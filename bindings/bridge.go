// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// Participant is an auto generated low-level Go binding around an user-defined struct.
type Participant struct {
	PublicKey                   [2]*big.Int
	Nonce                       uint64
	Index                       uint64
	Phase                       uint8
	DistributedSharesHash       [32]byte
	CommitmentsFirstCoefficient [2]*big.Int
	KeyShares                   [2]*big.Int
	Gpkj                        [4]*big.Int
}

// AccessControlLibraryMetaData contains all meta data concerning the AccessControlLibrary contract.
var AccessControlLibraryMetaData = &bind.MetaData{
	ABI: "[]",
<<<<<<< Updated upstream
	Bin: "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220198888fb8ce05ad46352b1ccf4ec98e07d302860fbd6c5d95515828f265efca964736f6c634300080b0033",
=======
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122022b3295f971e03e3b5a3d1cfc39a1b1f9d719377e4a4c4711b84be65daa4756164736f6c634300080b0033",
>>>>>>> Stashed changes
}

// AccessControlLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use AccessControlLibraryMetaData.ABI instead.
var AccessControlLibraryABI = AccessControlLibraryMetaData.ABI

// AccessControlLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AccessControlLibraryMetaData.Bin instead.
var AccessControlLibraryBin = AccessControlLibraryMetaData.Bin

// DeployAccessControlLibrary deploys a new Ethereum contract, binding an instance of AccessControlLibrary to it.
func DeployAccessControlLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *AccessControlLibrary, error) {
	parsed, err := AccessControlLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AccessControlLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &AccessControlLibrary{AccessControlLibraryCaller: AccessControlLibraryCaller{contract: contract}, AccessControlLibraryTransactor: AccessControlLibraryTransactor{contract: contract}, AccessControlLibraryFilterer: AccessControlLibraryFilterer{contract: contract}}, nil
}

// AccessControlLibrary is an auto generated Go binding around an Ethereum contract.
type AccessControlLibrary struct {
	AccessControlLibraryCaller     // Read-only binding to the contract
	AccessControlLibraryTransactor // Write-only binding to the contract
	AccessControlLibraryFilterer   // Log filterer for contract events
}

// AccessControlLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type AccessControlLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessControlLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AccessControlLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessControlLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AccessControlLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessControlLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AccessControlLibrarySession struct {
	Contract     *AccessControlLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// AccessControlLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AccessControlLibraryCallerSession struct {
	Contract *AccessControlLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// AccessControlLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AccessControlLibraryTransactorSession struct {
	Contract     *AccessControlLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// AccessControlLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type AccessControlLibraryRaw struct {
	Contract *AccessControlLibrary // Generic contract binding to access the raw methods on
}

// AccessControlLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AccessControlLibraryCallerRaw struct {
	Contract *AccessControlLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// AccessControlLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AccessControlLibraryTransactorRaw struct {
	Contract *AccessControlLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAccessControlLibrary creates a new instance of AccessControlLibrary, bound to a specific deployed contract.
func NewAccessControlLibrary(address common.Address, backend bind.ContractBackend) (*AccessControlLibrary, error) {
	contract, err := bindAccessControlLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AccessControlLibrary{AccessControlLibraryCaller: AccessControlLibraryCaller{contract: contract}, AccessControlLibraryTransactor: AccessControlLibraryTransactor{contract: contract}, AccessControlLibraryFilterer: AccessControlLibraryFilterer{contract: contract}}, nil
}

// NewAccessControlLibraryCaller creates a new read-only instance of AccessControlLibrary, bound to a specific deployed contract.
func NewAccessControlLibraryCaller(address common.Address, caller bind.ContractCaller) (*AccessControlLibraryCaller, error) {
	contract, err := bindAccessControlLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AccessControlLibraryCaller{contract: contract}, nil
}

// NewAccessControlLibraryTransactor creates a new write-only instance of AccessControlLibrary, bound to a specific deployed contract.
func NewAccessControlLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*AccessControlLibraryTransactor, error) {
	contract, err := bindAccessControlLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AccessControlLibraryTransactor{contract: contract}, nil
}

// NewAccessControlLibraryFilterer creates a new log filterer instance of AccessControlLibrary, bound to a specific deployed contract.
func NewAccessControlLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*AccessControlLibraryFilterer, error) {
	contract, err := bindAccessControlLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AccessControlLibraryFilterer{contract: contract}, nil
}

// bindAccessControlLibrary binds a generic wrapper to an already deployed contract.
func bindAccessControlLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AccessControlLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AccessControlLibrary *AccessControlLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AccessControlLibrary.Contract.AccessControlLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AccessControlLibrary *AccessControlLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessControlLibrary.Contract.AccessControlLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AccessControlLibrary *AccessControlLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AccessControlLibrary.Contract.AccessControlLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AccessControlLibrary *AccessControlLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AccessControlLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AccessControlLibrary *AccessControlLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessControlLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AccessControlLibrary *AccessControlLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AccessControlLibrary.Contract.contract.Transact(opts, method, params...)
}

// AccessControlledMetaData contains all meta data concerning the AccessControlled contract.
var AccessControlledMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
<<<<<<< Updated upstream
	Bin: "0x608060405234801561001057600080fd5b50600061002561007060201b61068a1760201c565b9050338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061009d565b6000807f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90508091505090565b610944806100ac6000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063dc97805911610050578063dc97805914610092578063e348da13146100ae578063fad8b32a146100ca57610067565b8063605361721461006c578063ab033ea914610076575b600080fd5b6100746100e6565b005b610090600480360381019061008b919061071a565b6101f1565b005b6100ac60048036038101906100a7919061071a565b6102e3565b005b6100c860048036038101906100c3919061071a565b6103d5565b005b6100e460048036038101906100df919061071a565b610534565b005b60006100f061068a565b90508060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610184576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017b906107ca565b60405180910390fd5b8060020160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006101fb61068a565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461028f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102869061085c565b60405180910390fd5b600061029961068a565b9050828160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b60006102ed61068a565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610381576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103789061085c565b60405180910390fd5b600061038b61068a565b9050828160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b60006103df61068a565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061048a57508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6104c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c0906108ee565b60405180910390fd5b60006104d361068a565b905060018160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b600061053e61068a565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806105e957508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610628576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061f906108ee565b60405180910390fd5b600061063261068a565b90508060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff0219169055505050565b6000807f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90508091505090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106e7826106bc565b9050919050565b6106f7816106dc565b811461070257600080fd5b50565b600081359050610714816106ee565b92915050565b6000602082840312156107305761072f6106b7565b5b600061073e84828501610705565b91505092915050565b600082825260208201905092915050565b7f41636365737320436f6e74726f6c3a206f776e657273686970206e6f7420677260008201527f616e746564000000000000000000000000000000000000000000000000000000602082015250565b60006107b4602583610747565b91506107bf82610758565b604082019050919050565b600060208201905081810360008301526107e3816107a7565b9050919050565b7f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60008201527f6c6f776564000000000000000000000000000000000000000000000000000000602082015250565b6000610846602583610747565b9150610851826107ea565b604082019050919050565b6000602082019050818103600083015261087581610839565b9050919050565b7f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060008201527f657261746f7220616c6c6f776564000000000000000000000000000000000000602082015250565b60006108d8602e83610747565b91506108e38261087c565b604082019050919050565b60006020820190508181036000830152610907816108cb565b905091905056fea2646970667358221220704e506f7c1758df4425aada69e2b081bf38f9a9ae05bcdef41ab80a9303335164736f6c634300080b0033",
=======
	Bin: "0x608060405234801561001057600080fd5b50600061002561003e60201b6107691760201c565b60010180546001600160a01b0319163317905550610062565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90565b610800806100716000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063dc97805911610050578063dc97805914610089578063e348da131461009c578063fad8b32a146100af57600080fd5b8063605361721461006c578063ab033ea914610076575b600080fd5b6100746100c2565b005b61007461008436600461078d565b6101ec565b61007461009736600461078d565b61033b565b6100746100aa36600461078d565b61048a565b6100746100bd36600461078d565b6105fb565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520c547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff1633146101af576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f776e657273686970206e6f7420677260448201527f616e74656400000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6002810180547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169091556001909101805490911633179055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff1633146102d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60448201527f6c6f77656400000000000000000000000000000000000000000000000000000060648201526084016101a6565b507f31434318735a8e6385da596be365952169e52986860b974818986b522d23520d80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff163314610423576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60448201527f6c6f77656400000000000000000000000000000000000000000000000000000060648201526084016101a6565b507f31434318735a8e6385da596be365952169e52986860b974818986b522d23520c80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff1633148061050057503360009081526020829052604090205460ff165b61058c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060448201527f657261746f7220616c6c6f77656400000000000000000000000000000000000060648201526084016101a6565b5073ffffffffffffffffffffffffffffffffffffffff1660009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff1633148061067157503360009081526020829052604090205460ff165b6106fd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060448201527f657261746f7220616c6c6f77656400000000000000000000000000000000000060648201526084016101a6565b5073ffffffffffffffffffffffffffffffffffffffff1660009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90565b60006020828403121561079f57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146107c357600080fd5b939250505056fea26469706673582212200f62826dba0ccd43cb667f8bfc6a076f38d62d03d8b2cc9d176f170aed45493164736f6c634300080b0033",
>>>>>>> Stashed changes
}

// AccessControlledABI is the input ABI used to generate the binding from.
// Deprecated: Use AccessControlledMetaData.ABI instead.
var AccessControlledABI = AccessControlledMetaData.ABI

// AccessControlledBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AccessControlledMetaData.Bin instead.
var AccessControlledBin = AccessControlledMetaData.Bin

// DeployAccessControlled deploys a new Ethereum contract, binding an instance of AccessControlled to it.
func DeployAccessControlled(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *AccessControlled, error) {
	parsed, err := AccessControlledMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AccessControlledBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &AccessControlled{AccessControlledCaller: AccessControlledCaller{contract: contract}, AccessControlledTransactor: AccessControlledTransactor{contract: contract}, AccessControlledFilterer: AccessControlledFilterer{contract: contract}}, nil
}

// AccessControlled is an auto generated Go binding around an Ethereum contract.
type AccessControlled struct {
	AccessControlledCaller     // Read-only binding to the contract
	AccessControlledTransactor // Write-only binding to the contract
	AccessControlledFilterer   // Log filterer for contract events
}

// AccessControlledCaller is an auto generated read-only Go binding around an Ethereum contract.
type AccessControlledCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessControlledTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AccessControlledTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessControlledFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AccessControlledFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessControlledSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AccessControlledSession struct {
	Contract     *AccessControlled // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AccessControlledCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AccessControlledCallerSession struct {
	Contract *AccessControlledCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// AccessControlledTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AccessControlledTransactorSession struct {
	Contract     *AccessControlledTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// AccessControlledRaw is an auto generated low-level Go binding around an Ethereum contract.
type AccessControlledRaw struct {
	Contract *AccessControlled // Generic contract binding to access the raw methods on
}

// AccessControlledCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AccessControlledCallerRaw struct {
	Contract *AccessControlledCaller // Generic read-only contract binding to access the raw methods on
}

// AccessControlledTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AccessControlledTransactorRaw struct {
	Contract *AccessControlledTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAccessControlled creates a new instance of AccessControlled, bound to a specific deployed contract.
func NewAccessControlled(address common.Address, backend bind.ContractBackend) (*AccessControlled, error) {
	contract, err := bindAccessControlled(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AccessControlled{AccessControlledCaller: AccessControlledCaller{contract: contract}, AccessControlledTransactor: AccessControlledTransactor{contract: contract}, AccessControlledFilterer: AccessControlledFilterer{contract: contract}}, nil
}

// NewAccessControlledCaller creates a new read-only instance of AccessControlled, bound to a specific deployed contract.
func NewAccessControlledCaller(address common.Address, caller bind.ContractCaller) (*AccessControlledCaller, error) {
	contract, err := bindAccessControlled(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AccessControlledCaller{contract: contract}, nil
}

// NewAccessControlledTransactor creates a new write-only instance of AccessControlled, bound to a specific deployed contract.
func NewAccessControlledTransactor(address common.Address, transactor bind.ContractTransactor) (*AccessControlledTransactor, error) {
	contract, err := bindAccessControlled(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AccessControlledTransactor{contract: contract}, nil
}

// NewAccessControlledFilterer creates a new log filterer instance of AccessControlled, bound to a specific deployed contract.
func NewAccessControlledFilterer(address common.Address, filterer bind.ContractFilterer) (*AccessControlledFilterer, error) {
	contract, err := bindAccessControlled(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AccessControlledFilterer{contract: contract}, nil
}

// bindAccessControlled binds a generic wrapper to an already deployed contract.
func bindAccessControlled(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AccessControlledABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AccessControlled *AccessControlledRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AccessControlled.Contract.AccessControlledCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AccessControlled *AccessControlledRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessControlled.Contract.AccessControlledTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AccessControlled *AccessControlledRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AccessControlled.Contract.AccessControlledTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AccessControlled *AccessControlledCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AccessControlled.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AccessControlled *AccessControlledTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessControlled.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AccessControlled *AccessControlledTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AccessControlled.Contract.contract.Transact(opts, method, params...)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_AccessControlled *AccessControlledTransactor) GrantOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _AccessControlled.contract.Transact(opts, "grantOperator", who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_AccessControlled *AccessControlledSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _AccessControlled.Contract.GrantOperator(&_AccessControlled.TransactOpts, who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_AccessControlled *AccessControlledTransactorSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _AccessControlled.Contract.GrantOperator(&_AccessControlled.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_AccessControlled *AccessControlledTransactor) GrantOwner(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _AccessControlled.contract.Transact(opts, "grantOwner", who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_AccessControlled *AccessControlledSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _AccessControlled.Contract.GrantOwner(&_AccessControlled.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_AccessControlled *AccessControlledTransactorSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _AccessControlled.Contract.GrantOwner(&_AccessControlled.TransactOpts, who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_AccessControlled *AccessControlledTransactor) RevokeOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _AccessControlled.contract.Transact(opts, "revokeOperator", who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_AccessControlled *AccessControlledSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _AccessControlled.Contract.RevokeOperator(&_AccessControlled.TransactOpts, who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_AccessControlled *AccessControlledTransactorSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _AccessControlled.Contract.RevokeOperator(&_AccessControlled.TransactOpts, who)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_AccessControlled *AccessControlledTransactor) SetGovernance(opts *bind.TransactOpts, governance_ common.Address) (*types.Transaction, error) {
	return _AccessControlled.contract.Transact(opts, "setGovernance", governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_AccessControlled *AccessControlledSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _AccessControlled.Contract.SetGovernance(&_AccessControlled.TransactOpts, governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_AccessControlled *AccessControlledTransactorSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _AccessControlled.Contract.SetGovernance(&_AccessControlled.TransactOpts, governance_)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_AccessControlled *AccessControlledTransactor) TakeOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessControlled.contract.Transact(opts, "takeOwnership")
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_AccessControlled *AccessControlledSession) TakeOwnership() (*types.Transaction, error) {
	return _AccessControlled.Contract.TakeOwnership(&_AccessControlled.TransactOpts)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_AccessControlled *AccessControlledTransactorSession) TakeOwnership() (*types.Transaction, error) {
	return _AccessControlled.Contract.TakeOwnership(&_AccessControlled.TransactOpts)
}

// AtomicCounterMetaData contains all meta data concerning the AtomicCounter contract.
var AtomicCounterMetaData = &bind.MetaData{
	ABI: "[]",
}

// AtomicCounterABI is the input ABI used to generate the binding from.
// Deprecated: Use AtomicCounterMetaData.ABI instead.
var AtomicCounterABI = AtomicCounterMetaData.ABI

// AtomicCounter is an auto generated Go binding around an Ethereum contract.
type AtomicCounter struct {
	AtomicCounterCaller     // Read-only binding to the contract
	AtomicCounterTransactor // Write-only binding to the contract
	AtomicCounterFilterer   // Log filterer for contract events
}

// AtomicCounterCaller is an auto generated read-only Go binding around an Ethereum contract.
type AtomicCounterCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AtomicCounterTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AtomicCounterTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AtomicCounterFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AtomicCounterFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AtomicCounterSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AtomicCounterSession struct {
	Contract     *AtomicCounter    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AtomicCounterCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AtomicCounterCallerSession struct {
	Contract *AtomicCounterCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// AtomicCounterTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AtomicCounterTransactorSession struct {
	Contract     *AtomicCounterTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// AtomicCounterRaw is an auto generated low-level Go binding around an Ethereum contract.
type AtomicCounterRaw struct {
	Contract *AtomicCounter // Generic contract binding to access the raw methods on
}

// AtomicCounterCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AtomicCounterCallerRaw struct {
	Contract *AtomicCounterCaller // Generic read-only contract binding to access the raw methods on
}

// AtomicCounterTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AtomicCounterTransactorRaw struct {
	Contract *AtomicCounterTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAtomicCounter creates a new instance of AtomicCounter, bound to a specific deployed contract.
func NewAtomicCounter(address common.Address, backend bind.ContractBackend) (*AtomicCounter, error) {
	contract, err := bindAtomicCounter(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AtomicCounter{AtomicCounterCaller: AtomicCounterCaller{contract: contract}, AtomicCounterTransactor: AtomicCounterTransactor{contract: contract}, AtomicCounterFilterer: AtomicCounterFilterer{contract: contract}}, nil
}

// NewAtomicCounterCaller creates a new read-only instance of AtomicCounter, bound to a specific deployed contract.
func NewAtomicCounterCaller(address common.Address, caller bind.ContractCaller) (*AtomicCounterCaller, error) {
	contract, err := bindAtomicCounter(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AtomicCounterCaller{contract: contract}, nil
}

// NewAtomicCounterTransactor creates a new write-only instance of AtomicCounter, bound to a specific deployed contract.
func NewAtomicCounterTransactor(address common.Address, transactor bind.ContractTransactor) (*AtomicCounterTransactor, error) {
	contract, err := bindAtomicCounter(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AtomicCounterTransactor{contract: contract}, nil
}

// NewAtomicCounterFilterer creates a new log filterer instance of AtomicCounter, bound to a specific deployed contract.
func NewAtomicCounterFilterer(address common.Address, filterer bind.ContractFilterer) (*AtomicCounterFilterer, error) {
	contract, err := bindAtomicCounter(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AtomicCounterFilterer{contract: contract}, nil
}

// bindAtomicCounter binds a generic wrapper to an already deployed contract.
func bindAtomicCounter(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AtomicCounterABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AtomicCounter *AtomicCounterRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AtomicCounter.Contract.AtomicCounterCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AtomicCounter *AtomicCounterRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AtomicCounter.Contract.AtomicCounterTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AtomicCounter *AtomicCounterRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AtomicCounter.Contract.AtomicCounterTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AtomicCounter *AtomicCounterCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AtomicCounter.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AtomicCounter *AtomicCounterTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AtomicCounter.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AtomicCounter *AtomicCounterTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AtomicCounter.Contract.contract.Transact(opts, method, params...)
}

// BClaimsParserLibraryMetaData contains all meta data concerning the BClaimsParserLibrary contract.
var BClaimsParserLibraryMetaData = &bind.MetaData{
	ABI: "[]",
<<<<<<< Updated upstream
	Bin: "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c302578fc1c8c32bedc445abc605faa731bed974bb637c97a5656ba4d4a5b44764736f6c634300080b0033",
=======
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c88fae4ef4cc684f93e62e9356823a67902a69161d000ad6817f4085ca2d5ae064736f6c634300080b0033",
>>>>>>> Stashed changes
}

// BClaimsParserLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use BClaimsParserLibraryMetaData.ABI instead.
var BClaimsParserLibraryABI = BClaimsParserLibraryMetaData.ABI

// BClaimsParserLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BClaimsParserLibraryMetaData.Bin instead.
var BClaimsParserLibraryBin = BClaimsParserLibraryMetaData.Bin

// DeployBClaimsParserLibrary deploys a new Ethereum contract, binding an instance of BClaimsParserLibrary to it.
func DeployBClaimsParserLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BClaimsParserLibrary, error) {
	parsed, err := BClaimsParserLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BClaimsParserLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BClaimsParserLibrary{BClaimsParserLibraryCaller: BClaimsParserLibraryCaller{contract: contract}, BClaimsParserLibraryTransactor: BClaimsParserLibraryTransactor{contract: contract}, BClaimsParserLibraryFilterer: BClaimsParserLibraryFilterer{contract: contract}}, nil
}

// BClaimsParserLibrary is an auto generated Go binding around an Ethereum contract.
type BClaimsParserLibrary struct {
	BClaimsParserLibraryCaller     // Read-only binding to the contract
	BClaimsParserLibraryTransactor // Write-only binding to the contract
	BClaimsParserLibraryFilterer   // Log filterer for contract events
}

// BClaimsParserLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type BClaimsParserLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BClaimsParserLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BClaimsParserLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BClaimsParserLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BClaimsParserLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BClaimsParserLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BClaimsParserLibrarySession struct {
	Contract     *BClaimsParserLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// BClaimsParserLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BClaimsParserLibraryCallerSession struct {
	Contract *BClaimsParserLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// BClaimsParserLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BClaimsParserLibraryTransactorSession struct {
	Contract     *BClaimsParserLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// BClaimsParserLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type BClaimsParserLibraryRaw struct {
	Contract *BClaimsParserLibrary // Generic contract binding to access the raw methods on
}

// BClaimsParserLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BClaimsParserLibraryCallerRaw struct {
	Contract *BClaimsParserLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// BClaimsParserLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BClaimsParserLibraryTransactorRaw struct {
	Contract *BClaimsParserLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBClaimsParserLibrary creates a new instance of BClaimsParserLibrary, bound to a specific deployed contract.
func NewBClaimsParserLibrary(address common.Address, backend bind.ContractBackend) (*BClaimsParserLibrary, error) {
	contract, err := bindBClaimsParserLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BClaimsParserLibrary{BClaimsParserLibraryCaller: BClaimsParserLibraryCaller{contract: contract}, BClaimsParserLibraryTransactor: BClaimsParserLibraryTransactor{contract: contract}, BClaimsParserLibraryFilterer: BClaimsParserLibraryFilterer{contract: contract}}, nil
}

// NewBClaimsParserLibraryCaller creates a new read-only instance of BClaimsParserLibrary, bound to a specific deployed contract.
func NewBClaimsParserLibraryCaller(address common.Address, caller bind.ContractCaller) (*BClaimsParserLibraryCaller, error) {
	contract, err := bindBClaimsParserLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BClaimsParserLibraryCaller{contract: contract}, nil
}

// NewBClaimsParserLibraryTransactor creates a new write-only instance of BClaimsParserLibrary, bound to a specific deployed contract.
func NewBClaimsParserLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*BClaimsParserLibraryTransactor, error) {
	contract, err := bindBClaimsParserLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BClaimsParserLibraryTransactor{contract: contract}, nil
}

// NewBClaimsParserLibraryFilterer creates a new log filterer instance of BClaimsParserLibrary, bound to a specific deployed contract.
func NewBClaimsParserLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*BClaimsParserLibraryFilterer, error) {
	contract, err := bindBClaimsParserLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BClaimsParserLibraryFilterer{contract: contract}, nil
}

// bindBClaimsParserLibrary binds a generic wrapper to an already deployed contract.
func bindBClaimsParserLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BClaimsParserLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BClaimsParserLibrary *BClaimsParserLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BClaimsParserLibrary.Contract.BClaimsParserLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BClaimsParserLibrary *BClaimsParserLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BClaimsParserLibrary.Contract.BClaimsParserLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BClaimsParserLibrary *BClaimsParserLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BClaimsParserLibrary.Contract.BClaimsParserLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BClaimsParserLibrary *BClaimsParserLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BClaimsParserLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BClaimsParserLibrary *BClaimsParserLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BClaimsParserLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BClaimsParserLibrary *BClaimsParserLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BClaimsParserLibrary.Contract.contract.Transact(opts, method, params...)
}

// BaseParserLibraryMetaData contains all meta data concerning the BaseParserLibrary contract.
var BaseParserLibraryMetaData = &bind.MetaData{
	ABI: "[]",
<<<<<<< Updated upstream
	Bin: "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207f255644ea690b19f3b9208db9ae14cbdb48dcb44e6d232aac3f1552d8d17d9e64736f6c634300080b0033",
=======
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c64e414222feaf9b454eb59334d4f97a199e2ce364b074270d8e38058fa1670a64736f6c634300080b0033",
>>>>>>> Stashed changes
}

// BaseParserLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use BaseParserLibraryMetaData.ABI instead.
var BaseParserLibraryABI = BaseParserLibraryMetaData.ABI

// BaseParserLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BaseParserLibraryMetaData.Bin instead.
var BaseParserLibraryBin = BaseParserLibraryMetaData.Bin

// DeployBaseParserLibrary deploys a new Ethereum contract, binding an instance of BaseParserLibrary to it.
func DeployBaseParserLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BaseParserLibrary, error) {
	parsed, err := BaseParserLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BaseParserLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseParserLibrary{BaseParserLibraryCaller: BaseParserLibraryCaller{contract: contract}, BaseParserLibraryTransactor: BaseParserLibraryTransactor{contract: contract}, BaseParserLibraryFilterer: BaseParserLibraryFilterer{contract: contract}}, nil
}

// BaseParserLibrary is an auto generated Go binding around an Ethereum contract.
type BaseParserLibrary struct {
	BaseParserLibraryCaller     // Read-only binding to the contract
	BaseParserLibraryTransactor // Write-only binding to the contract
	BaseParserLibraryFilterer   // Log filterer for contract events
}

// BaseParserLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseParserLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseParserLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseParserLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseParserLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseParserLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseParserLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaseParserLibrarySession struct {
	Contract     *BaseParserLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// BaseParserLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaseParserLibraryCallerSession struct {
	Contract *BaseParserLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// BaseParserLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaseParserLibraryTransactorSession struct {
	Contract     *BaseParserLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// BaseParserLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaseParserLibraryRaw struct {
	Contract *BaseParserLibrary // Generic contract binding to access the raw methods on
}

// BaseParserLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaseParserLibraryCallerRaw struct {
	Contract *BaseParserLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// BaseParserLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaseParserLibraryTransactorRaw struct {
	Contract *BaseParserLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBaseParserLibrary creates a new instance of BaseParserLibrary, bound to a specific deployed contract.
func NewBaseParserLibrary(address common.Address, backend bind.ContractBackend) (*BaseParserLibrary, error) {
	contract, err := bindBaseParserLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseParserLibrary{BaseParserLibraryCaller: BaseParserLibraryCaller{contract: contract}, BaseParserLibraryTransactor: BaseParserLibraryTransactor{contract: contract}, BaseParserLibraryFilterer: BaseParserLibraryFilterer{contract: contract}}, nil
}

// NewBaseParserLibraryCaller creates a new read-only instance of BaseParserLibrary, bound to a specific deployed contract.
func NewBaseParserLibraryCaller(address common.Address, caller bind.ContractCaller) (*BaseParserLibraryCaller, error) {
	contract, err := bindBaseParserLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseParserLibraryCaller{contract: contract}, nil
}

// NewBaseParserLibraryTransactor creates a new write-only instance of BaseParserLibrary, bound to a specific deployed contract.
func NewBaseParserLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseParserLibraryTransactor, error) {
	contract, err := bindBaseParserLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseParserLibraryTransactor{contract: contract}, nil
}

// NewBaseParserLibraryFilterer creates a new log filterer instance of BaseParserLibrary, bound to a specific deployed contract.
func NewBaseParserLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseParserLibraryFilterer, error) {
	contract, err := bindBaseParserLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseParserLibraryFilterer{contract: contract}, nil
}

// bindBaseParserLibrary binds a generic wrapper to an already deployed contract.
func bindBaseParserLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseParserLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseParserLibrary *BaseParserLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BaseParserLibrary.Contract.BaseParserLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseParserLibrary *BaseParserLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseParserLibrary.Contract.BaseParserLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseParserLibrary *BaseParserLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseParserLibrary.Contract.BaseParserLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseParserLibrary *BaseParserLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BaseParserLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseParserLibrary *BaseParserLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseParserLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseParserLibrary *BaseParserLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseParserLibrary.Contract.contract.Transact(opts, method, params...)
}

// BasicERC20MetaData contains all meta data concerning the BasicERC20 contract.
var BasicERC20MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// BasicERC20ABI is the input ABI used to generate the binding from.
// Deprecated: Use BasicERC20MetaData.ABI instead.
var BasicERC20ABI = BasicERC20MetaData.ABI

// BasicERC20 is an auto generated Go binding around an Ethereum contract.
type BasicERC20 struct {
	BasicERC20Caller     // Read-only binding to the contract
	BasicERC20Transactor // Write-only binding to the contract
	BasicERC20Filterer   // Log filterer for contract events
}

// BasicERC20Caller is an auto generated read-only Go binding around an Ethereum contract.
type BasicERC20Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BasicERC20Transactor is an auto generated write-only Go binding around an Ethereum contract.
type BasicERC20Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BasicERC20Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BasicERC20Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BasicERC20Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BasicERC20Session struct {
	Contract     *BasicERC20       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BasicERC20CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BasicERC20CallerSession struct {
	Contract *BasicERC20Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// BasicERC20TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BasicERC20TransactorSession struct {
	Contract     *BasicERC20Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// BasicERC20Raw is an auto generated low-level Go binding around an Ethereum contract.
type BasicERC20Raw struct {
	Contract *BasicERC20 // Generic contract binding to access the raw methods on
}

// BasicERC20CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BasicERC20CallerRaw struct {
	Contract *BasicERC20Caller // Generic read-only contract binding to access the raw methods on
}

// BasicERC20TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BasicERC20TransactorRaw struct {
	Contract *BasicERC20Transactor // Generic write-only contract binding to access the raw methods on
}

// NewBasicERC20 creates a new instance of BasicERC20, bound to a specific deployed contract.
func NewBasicERC20(address common.Address, backend bind.ContractBackend) (*BasicERC20, error) {
	contract, err := bindBasicERC20(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BasicERC20{BasicERC20Caller: BasicERC20Caller{contract: contract}, BasicERC20Transactor: BasicERC20Transactor{contract: contract}, BasicERC20Filterer: BasicERC20Filterer{contract: contract}}, nil
}

// NewBasicERC20Caller creates a new read-only instance of BasicERC20, bound to a specific deployed contract.
func NewBasicERC20Caller(address common.Address, caller bind.ContractCaller) (*BasicERC20Caller, error) {
	contract, err := bindBasicERC20(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BasicERC20Caller{contract: contract}, nil
}

// NewBasicERC20Transactor creates a new write-only instance of BasicERC20, bound to a specific deployed contract.
func NewBasicERC20Transactor(address common.Address, transactor bind.ContractTransactor) (*BasicERC20Transactor, error) {
	contract, err := bindBasicERC20(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BasicERC20Transactor{contract: contract}, nil
}

// NewBasicERC20Filterer creates a new log filterer instance of BasicERC20, bound to a specific deployed contract.
func NewBasicERC20Filterer(address common.Address, filterer bind.ContractFilterer) (*BasicERC20Filterer, error) {
	contract, err := bindBasicERC20(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BasicERC20Filterer{contract: contract}, nil
}

// bindBasicERC20 binds a generic wrapper to an already deployed contract.
func bindBasicERC20(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BasicERC20ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BasicERC20 *BasicERC20Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BasicERC20.Contract.BasicERC20Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BasicERC20 *BasicERC20Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BasicERC20.Contract.BasicERC20Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BasicERC20 *BasicERC20Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BasicERC20.Contract.BasicERC20Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BasicERC20 *BasicERC20CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BasicERC20.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BasicERC20 *BasicERC20TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BasicERC20.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BasicERC20 *BasicERC20TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BasicERC20.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address src, address who) view returns(uint256)
func (_BasicERC20 *BasicERC20Caller) Allowance(opts *bind.CallOpts, src common.Address, who common.Address) (*big.Int, error) {
	var out []interface{}
	err := _BasicERC20.contract.Call(opts, &out, "allowance", src, who)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address src, address who) view returns(uint256)
func (_BasicERC20 *BasicERC20Session) Allowance(src common.Address, who common.Address) (*big.Int, error) {
	return _BasicERC20.Contract.Allowance(&_BasicERC20.CallOpts, src, who)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address src, address who) view returns(uint256)
func (_BasicERC20 *BasicERC20CallerSession) Allowance(src common.Address, who common.Address) (*big.Int, error) {
	return _BasicERC20.Contract.Allowance(&_BasicERC20.CallOpts, src, who)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address who) view returns(uint256)
func (_BasicERC20 *BasicERC20Caller) BalanceOf(opts *bind.CallOpts, who common.Address) (*big.Int, error) {
	var out []interface{}
	err := _BasicERC20.contract.Call(opts, &out, "balanceOf", who)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address who) view returns(uint256)
func (_BasicERC20 *BasicERC20Session) BalanceOf(who common.Address) (*big.Int, error) {
	return _BasicERC20.Contract.BalanceOf(&_BasicERC20.CallOpts, who)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address who) view returns(uint256)
func (_BasicERC20 *BasicERC20CallerSession) BalanceOf(who common.Address) (*big.Int, error) {
	return _BasicERC20.Contract.BalanceOf(&_BasicERC20.CallOpts, who)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_BasicERC20 *BasicERC20Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BasicERC20.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_BasicERC20 *BasicERC20Session) TotalSupply() (*big.Int, error) {
	return _BasicERC20.Contract.TotalSupply(&_BasicERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_BasicERC20 *BasicERC20CallerSession) TotalSupply() (*big.Int, error) {
	return _BasicERC20.Contract.TotalSupply(&_BasicERC20.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address who, uint256 wad) returns(bool)
func (_BasicERC20 *BasicERC20Transactor) Approve(opts *bind.TransactOpts, who common.Address, wad *big.Int) (*types.Transaction, error) {
	return _BasicERC20.contract.Transact(opts, "approve", who, wad)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address who, uint256 wad) returns(bool)
func (_BasicERC20 *BasicERC20Session) Approve(who common.Address, wad *big.Int) (*types.Transaction, error) {
	return _BasicERC20.Contract.Approve(&_BasicERC20.TransactOpts, who, wad)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address who, uint256 wad) returns(bool)
func (_BasicERC20 *BasicERC20TransactorSession) Approve(who common.Address, wad *big.Int) (*types.Transaction, error) {
	return _BasicERC20.Contract.Approve(&_BasicERC20.TransactOpts, who, wad)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 wad) returns(bool)
func (_BasicERC20 *BasicERC20Transactor) Transfer(opts *bind.TransactOpts, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _BasicERC20.contract.Transact(opts, "transfer", dst, wad)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 wad) returns(bool)
func (_BasicERC20 *BasicERC20Session) Transfer(dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _BasicERC20.Contract.Transfer(&_BasicERC20.TransactOpts, dst, wad)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 wad) returns(bool)
func (_BasicERC20 *BasicERC20TransactorSession) Transfer(dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _BasicERC20.Contract.Transfer(&_BasicERC20.TransactOpts, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_BasicERC20 *BasicERC20Transactor) TransferFrom(opts *bind.TransactOpts, src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _BasicERC20.contract.Transact(opts, "transferFrom", src, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_BasicERC20 *BasicERC20Session) TransferFrom(src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _BasicERC20.Contract.TransferFrom(&_BasicERC20.TransactOpts, src, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_BasicERC20 *BasicERC20TransactorSession) TransferFrom(src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _BasicERC20.Contract.TransferFrom(&_BasicERC20.TransactOpts, src, dst, wad)
}

// ChainStatusLibraryMetaData contains all meta data concerning the ChainStatusLibrary contract.
var ChainStatusLibraryMetaData = &bind.MetaData{
	ABI: "[]",
<<<<<<< Updated upstream
	Bin: "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220893e602d1a08d8368555c1345ab6341bc68268db129b67f67b5e3004afca6d9764736f6c634300080b0033",
=======
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220eb2fbb878367374670d1059806ce7a83643b0a372399cc862fdc9bda5dff79a164736f6c634300080b0033",
>>>>>>> Stashed changes
}

// ChainStatusLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use ChainStatusLibraryMetaData.ABI instead.
var ChainStatusLibraryABI = ChainStatusLibraryMetaData.ABI

// ChainStatusLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ChainStatusLibraryMetaData.Bin instead.
var ChainStatusLibraryBin = ChainStatusLibraryMetaData.Bin

// DeployChainStatusLibrary deploys a new Ethereum contract, binding an instance of ChainStatusLibrary to it.
func DeployChainStatusLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ChainStatusLibrary, error) {
	parsed, err := ChainStatusLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ChainStatusLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ChainStatusLibrary{ChainStatusLibraryCaller: ChainStatusLibraryCaller{contract: contract}, ChainStatusLibraryTransactor: ChainStatusLibraryTransactor{contract: contract}, ChainStatusLibraryFilterer: ChainStatusLibraryFilterer{contract: contract}}, nil
}

// ChainStatusLibrary is an auto generated Go binding around an Ethereum contract.
type ChainStatusLibrary struct {
	ChainStatusLibraryCaller     // Read-only binding to the contract
	ChainStatusLibraryTransactor // Write-only binding to the contract
	ChainStatusLibraryFilterer   // Log filterer for contract events
}

// ChainStatusLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type ChainStatusLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ChainStatusLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ChainStatusLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ChainStatusLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ChainStatusLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ChainStatusLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ChainStatusLibrarySession struct {
	Contract     *ChainStatusLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ChainStatusLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ChainStatusLibraryCallerSession struct {
	Contract *ChainStatusLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// ChainStatusLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ChainStatusLibraryTransactorSession struct {
	Contract     *ChainStatusLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// ChainStatusLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type ChainStatusLibraryRaw struct {
	Contract *ChainStatusLibrary // Generic contract binding to access the raw methods on
}

// ChainStatusLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ChainStatusLibraryCallerRaw struct {
	Contract *ChainStatusLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// ChainStatusLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ChainStatusLibraryTransactorRaw struct {
	Contract *ChainStatusLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewChainStatusLibrary creates a new instance of ChainStatusLibrary, bound to a specific deployed contract.
func NewChainStatusLibrary(address common.Address, backend bind.ContractBackend) (*ChainStatusLibrary, error) {
	contract, err := bindChainStatusLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ChainStatusLibrary{ChainStatusLibraryCaller: ChainStatusLibraryCaller{contract: contract}, ChainStatusLibraryTransactor: ChainStatusLibraryTransactor{contract: contract}, ChainStatusLibraryFilterer: ChainStatusLibraryFilterer{contract: contract}}, nil
}

// NewChainStatusLibraryCaller creates a new read-only instance of ChainStatusLibrary, bound to a specific deployed contract.
func NewChainStatusLibraryCaller(address common.Address, caller bind.ContractCaller) (*ChainStatusLibraryCaller, error) {
	contract, err := bindChainStatusLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ChainStatusLibraryCaller{contract: contract}, nil
}

// NewChainStatusLibraryTransactor creates a new write-only instance of ChainStatusLibrary, bound to a specific deployed contract.
func NewChainStatusLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*ChainStatusLibraryTransactor, error) {
	contract, err := bindChainStatusLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ChainStatusLibraryTransactor{contract: contract}, nil
}

// NewChainStatusLibraryFilterer creates a new log filterer instance of ChainStatusLibrary, bound to a specific deployed contract.
func NewChainStatusLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*ChainStatusLibraryFilterer, error) {
	contract, err := bindChainStatusLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ChainStatusLibraryFilterer{contract: contract}, nil
}

// bindChainStatusLibrary binds a generic wrapper to an already deployed contract.
func bindChainStatusLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ChainStatusLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ChainStatusLibrary *ChainStatusLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ChainStatusLibrary.Contract.ChainStatusLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ChainStatusLibrary *ChainStatusLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ChainStatusLibrary.Contract.ChainStatusLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ChainStatusLibrary *ChainStatusLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ChainStatusLibrary.Contract.ChainStatusLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ChainStatusLibrary *ChainStatusLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ChainStatusLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ChainStatusLibrary *ChainStatusLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ChainStatusLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ChainStatusLibrary *ChainStatusLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ChainStatusLibrary.Contract.contract.Transact(opts, method, params...)
}

// ConstantsMetaData contains all meta data concerning the Constants contract.
var ConstantsMetaData = &bind.MetaData{
	ABI: "[]",
<<<<<<< Updated upstream
	Bin: "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212205e1cc7540bbee9e17f4bc3f9b478a93f43d0e72897d06f117c45103592a0102464736f6c634300080b0033",
=======
	Bin: "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220c36a84852571fcc3c796207d18a48b2fb850d0720aed08c6c7cb2af5bf23292e64736f6c634300080b0033",
>>>>>>> Stashed changes
}

// ConstantsABI is the input ABI used to generate the binding from.
// Deprecated: Use ConstantsMetaData.ABI instead.
var ConstantsABI = ConstantsMetaData.ABI

// ConstantsBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ConstantsMetaData.Bin instead.
var ConstantsBin = ConstantsMetaData.Bin

// DeployConstants deploys a new Ethereum contract, binding an instance of Constants to it.
func DeployConstants(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Constants, error) {
	parsed, err := ConstantsMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ConstantsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Constants{ConstantsCaller: ConstantsCaller{contract: contract}, ConstantsTransactor: ConstantsTransactor{contract: contract}, ConstantsFilterer: ConstantsFilterer{contract: contract}}, nil
}

// Constants is an auto generated Go binding around an Ethereum contract.
type Constants struct {
	ConstantsCaller     // Read-only binding to the contract
	ConstantsTransactor // Write-only binding to the contract
	ConstantsFilterer   // Log filterer for contract events
}

// ConstantsCaller is an auto generated read-only Go binding around an Ethereum contract.
type ConstantsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ConstantsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ConstantsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ConstantsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ConstantsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ConstantsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ConstantsSession struct {
	Contract     *Constants        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ConstantsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ConstantsCallerSession struct {
	Contract *ConstantsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// ConstantsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ConstantsTransactorSession struct {
	Contract     *ConstantsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// ConstantsRaw is an auto generated low-level Go binding around an Ethereum contract.
type ConstantsRaw struct {
	Contract *Constants // Generic contract binding to access the raw methods on
}

// ConstantsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ConstantsCallerRaw struct {
	Contract *ConstantsCaller // Generic read-only contract binding to access the raw methods on
}

// ConstantsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ConstantsTransactorRaw struct {
	Contract *ConstantsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewConstants creates a new instance of Constants, bound to a specific deployed contract.
func NewConstants(address common.Address, backend bind.ContractBackend) (*Constants, error) {
	contract, err := bindConstants(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Constants{ConstantsCaller: ConstantsCaller{contract: contract}, ConstantsTransactor: ConstantsTransactor{contract: contract}, ConstantsFilterer: ConstantsFilterer{contract: contract}}, nil
}

// NewConstantsCaller creates a new read-only instance of Constants, bound to a specific deployed contract.
func NewConstantsCaller(address common.Address, caller bind.ContractCaller) (*ConstantsCaller, error) {
	contract, err := bindConstants(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ConstantsCaller{contract: contract}, nil
}

// NewConstantsTransactor creates a new write-only instance of Constants, bound to a specific deployed contract.
func NewConstantsTransactor(address common.Address, transactor bind.ContractTransactor) (*ConstantsTransactor, error) {
	contract, err := bindConstants(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ConstantsTransactor{contract: contract}, nil
}

// NewConstantsFilterer creates a new log filterer instance of Constants, bound to a specific deployed contract.
func NewConstantsFilterer(address common.Address, filterer bind.ContractFilterer) (*ConstantsFilterer, error) {
	contract, err := bindConstants(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ConstantsFilterer{contract: contract}, nil
}

// bindConstants binds a generic wrapper to an already deployed contract.
func bindConstants(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ConstantsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Constants *ConstantsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Constants.Contract.ConstantsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Constants *ConstantsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Constants.Contract.ConstantsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Constants *ConstantsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Constants.Contract.ConstantsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Constants *ConstantsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Constants.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Constants *ConstantsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Constants.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Constants *ConstantsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Constants.Contract.contract.Transact(opts, method, params...)
}

// CryptoMetaData contains all meta data concerning the Crypto contract.
var CryptoMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256[2][]\",\"name\":\"sigs\",\"type\":\"uint256[2][]\"},{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"invArray\",\"type\":\"uint256[]\"}],\"name\":\"AggregateSignatures\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"HashToG1\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"h\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2][]\",\"name\":\"pointsG1\",\"type\":\"uint256[2][]\"},{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"invArray\",\"type\":\"uint256[]\"}],\"name\":\"LagrangeInterpolationG1\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"privK\",\"type\":\"uint256\"}],\"name\":\"Sign\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"sig\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"uint256[2]\",\"name\":\"sig\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"pubK\",\"type\":\"uint256[4]\"}],\"name\":\"Verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"v\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"baseToG1\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"h\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"input\",\"type\":\"uint256[4]\"}],\"name\":\"bn128_add\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"result\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[12]\",\"name\":\"input\",\"type\":\"uint256[12]\"}],\"name\":\"bn128_check_pairing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"point\",\"type\":\"uint256[2]\"}],\"name\":\"bn128_is_on_curve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"input\",\"type\":\"uint256[3]\"}],\"name\":\"bn128_multiply\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"result\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"honestIndices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"dishonestIndices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"checkIndices\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"validIndices\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"invArray\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"maxIndex\",\"type\":\"uint256\"}],\"name\":\"checkInverses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"uint256Array\",\"type\":\"uint256[]\"}],\"name\":\"computeArrayMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"x1\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y1\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"x2\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y2\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"proof\",\"type\":\"uint256[2]\"}],\"name\":\"dleq_verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"proof_is_valid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"e\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"}],\"name\":\"expmod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes1\",\"name\":\"c0\",\"type\":\"bytes1\"},{\"internalType\":\"bytes1\",\"name\":\"c1\",\"type\":\"bytes1\"}],\"name\":\"hashToBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"invert\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"legendre\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"chi\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"k\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"j\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"invArray\",\"type\":\"uint256[]\"}],\"name\":\"liRjPartialConst\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"neg\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"input\",\"type\":\"uint256[2]\"}],\"name\":\"safeSigningPoint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"sign0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"sqrt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
<<<<<<< Updated upstream
	Bin: "0x608060405234801561001057600080fd5b50613d60806100206000396000f3fe608060405234801561001057600080fd5b506004361061018d5760003560e01c806382688f14116100e3578063ccba31231161008c578063e81ee0e311610066578063e81ee0e314610552578063f022e06114610582578063f4d7d33d146105b25761018d565b8063ccba3123146104c2578063e480a92e146104f2578063e664725b146105225761018d565b806396d95a6f116100bd57806396d95a6f14610432578063a218e42614610462578063b87cbafc146104925761018d565b806382688f14146103a25780638b6eb76e146103d257806395add79c146104025761018d565b80636bdf477c1161014557806377d2f2031161011f57806377d2f20314610312578063783ce4581461034257806380f4a922146103725761018d565b80636bdf477c146102825780636ef064a4146102b25780637351ee37146102e25761018d565b806338529ab41161017657806338529ab4146101f257806358ef876a14610222578063677342ce146102525761018d565b8063063675871461019257806316534acd146101c2575b600080fd5b6101ac60048036038101906101a79190612634565b6105e2565b6040516101b991906126be565b60405180910390f35b6101dc60048036038101906101d7919061285f565b6105f8565b6040516101e991906129c5565b60405180910390f35b61020c60048036038101906102079190612a38565b610616565b6040516102199190612ab6565b60405180910390f35b61023c60048036038101906102379190612ad1565b61062c565b6040516102499190612ab6565b60405180910390f35b61026c60048036038101906102679190612b40565b610642565b6040516102799190612ab6565b60405180910390f35b61029c60048036038101906102979190612b6d565b610654565b6040516102a991906129c5565b60405180910390f35b6102cc60048036038101906102c79190612b40565b61066e565b6040516102d99190612be2565b60405180910390f35b6102fc60048036038101906102f79190612b40565b610680565b6040516103099190612ab6565b60405180910390f35b61032c60048036038101906103279190612b40565b610692565b6040516103399190612ab6565b60405180910390f35b61035c60048036038101906103579190612bfd565b6106a4565b6040516103699190612ab6565b60405180910390f35b61038c60048036038101906103879190612c50565b6106ba565b60405161039991906126be565b60405180910390f35b6103bc60048036038101906103b79190612d8c565b6106d0565b6040516103c991906129c5565b60405180910390f35b6103ec60048036038101906103e79190612b40565b6106e8565b6040516103f991906129c5565b60405180910390f35b61041c60048036038101906104179190612db9565b610700565b60405161042991906129c5565b60405180910390f35b61044c60048036038101906104479190612e02565b610718565b60405161045991906126be565b60405180910390f35b61047c60048036038101906104779190612e2f565b61072a565b6040516104899190612ab6565b60405180910390f35b6104ac60048036038101906104a79190612f29565b61073c565b6040516104b991906126be565b60405180910390f35b6104dc60048036038101906104d79190612b40565b61074e565b6040516104e99190612ab6565b60405180910390f35b61050c60048036038101906105079190612f57565b610760565b60405161051991906126be565b60405180910390f35b61053c60048036038101906105379190612fb3565b610774565b60405161054991906129c5565b60405180910390f35b61056c60048036038101906105679190612fe0565b61078c565b60405161057991906126be565b60405180910390f35b61059c6004803603810190610597919061285f565b6107a6565b6040516105a991906129c5565b60405180910390f35b6105cc60048036038101906105c79190612e02565b6107c4565b6040516105d991906126be565b60405180910390f35b60006105ef8484846107d6565b90509392505050565b6106006122f9565b61060c8585858561098f565b9050949350505050565b6000610623848484610c2b565b90509392505050565b6000610639848484610d1a565b90509392505050565b600061064d82610e59565b9050919050565b61065c6122f9565b6106668383610ead565b905092915050565b600061067982610f24565b9050919050565b600061068b82610fa9565b9050919050565b600061069d82610ffd565b9050919050565b60006106b1848484611044565b90509392505050565b60006106c78484846110c6565b90509392505050565b6106d86122f9565b6106e18261120b565b9050919050565b6106f06122f9565b6106f982611269565b9050919050565b6107086122f9565b610711826118f3565b9050919050565b600061072382611a67565b9050919050565b600061073582611abf565b9050919050565b600061074782611b39565b9050919050565b600061075982611bb9565b9050919050565b600061076c8383611c10565b905092915050565b61077c6122f9565b61078582611d07565b9050919050565b600061079b8686868686611d65565b905095945050505050565b6107ae6122f9565b6107ba858585856120a8565b9050949350505050565b60006107cf826121b0565b9050919050565b60006107e06122f9565b6107e9856118f3565b90506109856040518061018001604052808660006002811061080e5761080d61305d565b5b602002015181526020018660016002811061082c5761082b61305d565b5b602002015181526020017f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed81526020017f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec81526020017f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d8152602001836000600281106108e2576108e161305d565b5b6020020151815260200183600160028110610900576108ff61305d565b5b602002015181526020018560006004811061091e5761091d61305d565b5b602002015181526020018560016004811061093c5761093b61305d565b5b602002015181526020018560026004811061095a5761095961305d565b5b60200201518152602001856003600481106109785761097761305d565b5b6020020151815250611b39565b9150509392505050565b6109976122f9565b83518551146109db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d29061310f565b60405180910390fd5b6109e36122f9565b6000816000600281106109f9576109f861305d565b5b602002018181525050600081600160028110610a1857610a1761305d565b5b602002018181525050600080600080600080610a326122f9565b600096505b8b51871015610c18578b8781518110610a5357610a5261305d565b5b602002602001015194508a871115610a6a57610c18565b60019250600095505b8b51861015610b08578b8681518110610a8f57610a8e61305d565b5b602002602001015193508a861115610aa657610b08565b84841415610ab357610af5565b610abe84868c610d1a565b91507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000180610aef57610aee61312f565b5b82840992505b8580610b009061318d565b965050610a73565b8c8781518110610b1b57610b1a61305d565b5b60200260200101519050610b78604051806060016040528083600060028110610b4757610b4661305d565b5b6020020151815260200183600160028110610b6557610b6461305d565b5b602002015181526020018581525061120b565b9050610c0360405180608001604052808a600060028110610b9c57610b9b61305d565b5b602002015181526020018a600160028110610bba57610bb961305d565b5b6020020151815260200183600060028110610bd857610bd761305d565b5b6020020151815260200183600160028110610bf657610bf561305d565b5b6020020151815250611d07565b97508680610c109061318d565b975050610a37565b8798505050505050505050949350505050565b6000808385604051602001610c41929190613271565b6040516020818303038152906040528051906020012060001c905060008386604051602001610c71929190613271565b6040516020818303038152906040528051906020012060001c90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780610cbb57610cba61312f565b5b817f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780610ceb57610cea61312f565b5b7f0e0a77c19a07df2f666ea36f7879462c0a78eb28f5c70b3dd35d438dc58f0d9d850908925050509392505050565b600082841415610d5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d569061330b565b60405180910390fd5b6000849050600084861115610d81578486610d7a919061332b565b9050610df0565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000180610db057610daf61312f565b5b60017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610ddd919061332b565b830991508585610ded919061332b565b90505b83600182610dfe919061332b565b81518110610e0f57610e0e61305d565b5b602002602001015190507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000180610e4857610e4761312f565b5b818309905080925050509392505050565b6000610ea6827f0c19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47611044565b9050919050565b610eb56122f9565b610ebd6122f9565b610ec6846118f3565b9050610f1b604051806060016040528083600060028110610eea57610ee961305d565b5b6020020151815260200183600160028110610f0857610f0761305d565b5b602002015181526020018581525061120b565b91505092915050565b600080610f72837f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea37f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47611044565b905060008114610f9e5760018082166002610f8d919061335f565b610f979190613476565b9150610fa3565b600091505b50919050565b6000610ff6827f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd457f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47611044565b9050919050565b600080821415611010576000905061103f565b817f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4761103c919061332b565b90505b919050565b60008060405160208152602080820152602060408201528560608201528460808201528360a082015260208160c08360055afa91508051925050806110be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110b590613556565b60405180910390fd5b509392505050565b60006001905060008060008085116110e1576110e0613576565b5b61010085106110f3576110f2613576565b5b600092505b8651831015611173578683815181106111145761111361305d565b5b60200260200101519050600081148061112c57508481115b1561113a5760009350611173565b6000816001901b8316141561115757806001901b82179150611160565b60009350611173565b828061116b9061318d565b9350506110f8565b8361118057505050611204565b600092505b8551831015611200578583815181106111a1576111a061305d565b5b6020026020010151905060008114806111b957508481115b156111c75760009350611200565b6000816001901b831614156111e457806001901b821791506111ed565b60009350611200565b82806111f89061318d565b935050611185565b5050505b9392505050565b6112136122f9565b60006040826060856007600019fa905080611263576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125a90613617565b60405180910390fd5b50919050565b6112716122f9565b60008060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806112a5576112a461312f565b5b85860992507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806112d9576112d861312f565b5b6004840891507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061130e5761130d61312f565b5b828409905061131c81610fa9565b905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061134f5761134e61312f565b5b83840990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806113835761138261312f565b5b83820990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806113b7576113b661312f565b5b848509935060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806113ed576113ec61312f565b5b8577b3c4d79d41a91759a9e4c7e359b6b89eaec68e62effffffd0990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806114395761143861312f565b5b838209905061144781610ffd565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806114785761147761312f565b5b7759e26bcea0d48bacd4f263f1acdb5c4f5763473177fffffe8208905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806114c6576114c561312f565b5b6001830890506114d581610ffd565b905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806115085761150761312f565b5b847f2042def740cbc01bd03583cf0100e593ba56470b9af68708d2c05d64905353850990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061155c5761155b61312f565b5b858209905061156a81610ffd565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061159b5761159a61312f565b5b60018208905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806115d2576115d161312f565b5b84850990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806116065761160561312f565b5b84820990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061163a5761163961312f565b5b600382089050600061164b82610f24565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061167c5761167b61312f565b5b84850991507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806116b0576116af61312f565b5b84830991507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806116e4576116e361312f565b5b60038308915060006116f583610f24565b905060006001600460038461170a9190613476565b6001866117179190613476565b611721919061335f565b61172b9190613637565b61173591906136a1565b90506000600182141561174a57879050611760565b600282141561175b5786905061175f565b8590505b5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061178f5761178e61312f565b5b81820994507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806117c3576117c261312f565b5b81860994507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806117f7576117f661312f565b5b60038608945061180685610e59565b945060006118138f611bb9565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806118445761184361312f565b5b81870995506118666040518060400160405280848152602001888152506121b0565b6118a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161189c906137a7565b60405180910390fd5b818e6000600281106118ba576118b961305d565b5b602002018181525050858e6001600281106118d8576118d761305d565b5b60200201818152505050505050505050505050505050919050565b6118fb6122f9565b600061191083600060f81b600160f81b610c2b565b9050600061192784600260f81b600360f81b610c2b565b9050600061193483611269565b9050600061194183611269565b90506119cc6040518060800160405280846000600281106119655761196461305d565b5b60200201518152602001846001600281106119835761198261305d565b5b60200201518152602001836000600281106119a1576119a061305d565b5b60200201518152602001836001600281106119bf576119be61305d565b5b6020020151815250611d07565b94506119d7856121b0565b611a16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a0d90613839565b60405180910390fd5b611a1f85611a67565b611a5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a55906138cb565b60405180910390fd5b50505050919050565b60008082600060028110611a7e57611a7d61305d565b5b60200201511480611aa75750600182600060028110611aa057611a9f61305d565b5b6020020151145b15611ab55760009050611aba565b600190505b919050565b600080600083600081518110611ad857611ad761305d565b5b602002602001015190506000600190505b8451811015611b2e57848181518110611b0557611b0461305d565b5b6020026020010151925081831115611b1b578291505b8080611b269061318d565b915050611ae9565b508092505050919050565b6000611b4361231b565b6000602082610180866008600019fa905080611b94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b8b90613937565b60405180910390fd5b600182600060018110611baa57611ba961305d565b5b60200201511492505050919050565b6000600190507f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea3821115611c0b577f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4690505b919050565b6000806000806000600190508651600187611c2b919061332b565b1115611c6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c63906139ef565b60405180910390fd5b600193505b85841015611cfa5786600185611c87919061332b565b81518110611c9857611c9761305d565b5b602002602001015192507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000180611cd157611cd061312f565b5b838509915060018214611ce75760009050611cfa565b8380611cf29061318d565b945050611c71565b8094505050505092915050565b611d0f6122f9565b60006040826080856006600019fa905080611d5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d5690613a5b565b60405180910390fd5b50919050565b6000611d6f6122f9565b611d776122f9565b611de260405180606001604052808a600060028110611d9957611d9861305d565b5b602002015181526020018a600160028110611db757611db661305d565b5b6020020151815260200186600160028110611dd557611dd461305d565b5b602002015181525061120b565b9150611e4f604051806060016040528089600060028110611e0657611e0561305d565b5b6020020151815260200189600160028110611e2457611e2361305d565b5b6020020151815260200186600060028110611e4257611e4161305d565b5b602002015181525061120b565b90506000611edc604051806080016040528085600060028110611e7557611e7461305d565b5b6020020151815260200185600160028110611e9357611e9261305d565b5b6020020151815260200184600060028110611eb157611eb061305d565b5b6020020151815260200184600160028110611ecf57611ece61305d565b5b6020020151815250611d07565b9050611f49604051806060016040528089600060028110611f0057611eff61305d565b5b6020020151815260200189600160028110611f1e57611f1d61305d565b5b6020020151815260200187600160028110611f3c57611f3b61305d565b5b602002015181525061120b565b9250611fb6604051806060016040528088600060028110611f6d57611f6c61305d565b5b6020020151815260200188600160028110611f8b57611f8a61305d565b5b6020020151815260200187600060028110611fa957611fa861305d565b5b602002015181525061120b565b91506000612043604051806080016040528086600060028110611fdc57611fdb61305d565b5b6020020151815260200186600160028110611ffa57611ff961305d565b5b60200201518152602001856000600281106120185761201761305d565b5b60200201518152602001856001600281106120365761203561305d565b5b6020020151815250611d07565b905060008a8a8a8a868660405160200161206296959493929190613b04565b6040516020818303038152906040528051906020012060001c9050866000600281106120915761209061305d565b5b602002015181149550505050505095945050505050565b6120b06122f9565b83518551146120f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120eb90613be6565b60405180910390fd5b82855111612137576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161212e90613c78565b60405180910390fd5b600061214285611abf565b905061214e8382611c10565b61218d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161218490613d0a565b60405180910390fd5b6121956122f9565b6121a18787878761098f565b90508092505050949350505050565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806121e1576121e061312f565b5b60037f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806122125761221161312f565b5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806122415761224061312f565b5b856000600281106122555761225461305d565b5b60200201518660006002811061226e5761226d61305d565b5b602002015109856000600281106122885761228761305d565b5b602002015109087f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806122be576122bd61312f565b5b836001600281106122d2576122d161305d565b5b6020020151846001600281106122eb576122ea61305d565b5b602002015109149050919050565b6040518060400160405280600290602082028036833780820191505090505090565b6040518060200160405280600190602082028036833780820191505090505090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6123a48261235b565b810181811067ffffffffffffffff821117156123c3576123c261236c565b5b80604052505050565b60006123d661233d565b90506123e2828261239b565b919050565b600067ffffffffffffffff8211156124025761240161236c565b5b61240b8261235b565b9050602081019050919050565b82818337600083830152505050565b600061243a612435846123e7565b6123cc565b90508281526020810184848401111561245657612455612356565b5b612461848285612418565b509392505050565b600082601f83011261247e5761247d612351565b5b813561248e848260208601612427565b91505092915050565b600067ffffffffffffffff8211156124b2576124b161236c565b5b602082029050919050565b600080fd5b6000819050919050565b6124d5816124c2565b81146124e057600080fd5b50565b6000813590506124f2816124cc565b92915050565b600061250b61250684612497565b6123cc565b90508060208402830185811115612525576125246124bd565b5b835b8181101561254e578061253a88826124e3565b845260208401935050602081019050612527565b5050509392505050565b600082601f83011261256d5761256c612351565b5b600261257a8482856124f8565b91505092915050565b600067ffffffffffffffff82111561259e5761259d61236c565b5b602082029050919050565b60006125bc6125b784612583565b6123cc565b905080602084028301858111156125d6576125d56124bd565b5b835b818110156125ff57806125eb88826124e3565b8452602084019350506020810190506125d8565b5050509392505050565b600082601f83011261261e5761261d612351565b5b600461262b8482856125a9565b91505092915050565b600080600060e0848603121561264d5761264c612347565b5b600084013567ffffffffffffffff81111561266b5761266a61234c565b5b61267786828701612469565b935050602061268886828701612558565b925050606061269986828701612609565b9150509250925092565b60008115159050919050565b6126b8816126a3565b82525050565b60006020820190506126d360008301846126af565b92915050565b600067ffffffffffffffff8211156126f4576126f361236c565b5b602082029050602081019050919050565b6000612718612713846126d9565b6123cc565b9050808382526020820190506040840283018581111561273b5761273a6124bd565b5b835b8181101561276457806127508882612558565b84526020840193505060408101905061273d565b5050509392505050565b600082601f83011261278357612782612351565b5b8135612793848260208601612705565b91505092915050565b600067ffffffffffffffff8211156127b7576127b661236c565b5b602082029050602081019050919050565b60006127db6127d68461279c565b6123cc565b905080838252602082019050602084028301858111156127fe576127fd6124bd565b5b835b81811015612827578061281388826124e3565b845260208401935050602081019050612800565b5050509392505050565b600082601f83011261284657612845612351565b5b81356128568482602086016127c8565b91505092915050565b6000806000806080858703121561287957612878612347565b5b600085013567ffffffffffffffff8111156128975761289661234c565b5b6128a38782880161276e565b945050602085013567ffffffffffffffff8111156128c4576128c361234c565b5b6128d087828801612831565b93505060406128e1878288016124e3565b925050606085013567ffffffffffffffff8111156129025761290161234c565b5b61290e87828801612831565b91505092959194509250565b600060029050919050565b600081905092915050565b6000819050919050565b612943816124c2565b82525050565b6000612955838361293a565b60208301905092915050565b6000602082019050919050565b6129778161291a565b6129818184612925565b925061298c82612930565b8060005b838110156129bd5781516129a48782612949565b96506129af83612961565b925050600181019050612990565b505050505050565b60006040820190506129da600083018461296e565b92915050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b612a15816129e0565b8114612a2057600080fd5b50565b600081359050612a3281612a0c565b92915050565b600080600060608486031215612a5157612a50612347565b5b600084013567ffffffffffffffff811115612a6f57612a6e61234c565b5b612a7b86828701612469565b9350506020612a8c86828701612a23565b9250506040612a9d86828701612a23565b9150509250925092565b612ab0816124c2565b82525050565b6000602082019050612acb6000830184612aa7565b92915050565b600080600060608486031215612aea57612ae9612347565b5b6000612af8868287016124e3565b9350506020612b09868287016124e3565b925050604084013567ffffffffffffffff811115612b2a57612b2961234c565b5b612b3686828701612831565b9150509250925092565b600060208284031215612b5657612b55612347565b5b6000612b64848285016124e3565b91505092915050565b60008060408385031215612b8457612b83612347565b5b600083013567ffffffffffffffff811115612ba257612ba161234c565b5b612bae85828601612469565b9250506020612bbf858286016124e3565b9150509250929050565b6000819050919050565b612bdc81612bc9565b82525050565b6000602082019050612bf76000830184612bd3565b92915050565b600080600060608486031215612c1657612c15612347565b5b6000612c24868287016124e3565b9350506020612c35868287016124e3565b9250506040612c46868287016124e3565b9150509250925092565b600080600060608486031215612c6957612c68612347565b5b600084013567ffffffffffffffff811115612c8757612c8661234c565b5b612c9386828701612831565b935050602084013567ffffffffffffffff811115612cb457612cb361234c565b5b612cc086828701612831565b9250506040612cd1868287016124e3565b9150509250925092565b600067ffffffffffffffff821115612cf657612cf561236c565b5b602082029050919050565b6000612d14612d0f84612cdb565b6123cc565b90508060208402830185811115612d2e57612d2d6124bd565b5b835b81811015612d575780612d4388826124e3565b845260208401935050602081019050612d30565b5050509392505050565b600082601f830112612d7657612d75612351565b5b6003612d83848285612d01565b91505092915050565b600060608284031215612da257612da1612347565b5b6000612db084828501612d61565b91505092915050565b600060208284031215612dcf57612dce612347565b5b600082013567ffffffffffffffff811115612ded57612dec61234c565b5b612df984828501612469565b91505092915050565b600060408284031215612e1857612e17612347565b5b6000612e2684828501612558565b91505092915050565b600060208284031215612e4557612e44612347565b5b600082013567ffffffffffffffff811115612e6357612e6261234c565b5b612e6f84828501612831565b91505092915050565b600067ffffffffffffffff821115612e9357612e9261236c565b5b602082029050919050565b6000612eb1612eac84612e78565b6123cc565b90508060208402830185811115612ecb57612eca6124bd565b5b835b81811015612ef45780612ee088826124e3565b845260208401935050602081019050612ecd565b5050509392505050565b600082601f830112612f1357612f12612351565b5b600c612f20848285612e9e565b91505092915050565b60006101808284031215612f4057612f3f612347565b5b6000612f4e84828501612efe565b91505092915050565b60008060408385031215612f6e57612f6d612347565b5b600083013567ffffffffffffffff811115612f8c57612f8b61234c565b5b612f9885828601612831565b9250506020612fa9858286016124e3565b9150509250929050565b600060808284031215612fc957612fc8612347565b5b6000612fd784828501612609565b91505092915050565b60008060008060006101408688031215612ffd57612ffc612347565b5b600061300b88828901612558565b955050604061301c88828901612558565b945050608061302d88828901612558565b93505060c061303e88828901612558565b92505061010061305088828901612558565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f4d69736d61746368206265747765656e20706f696e7473473120616e6420696e60008201527f6469636573206172726179730000000000000000000000000000000000000000602082015250565b60006130f9602c8361308c565b91506131048261309d565b604082019050919050565b60006020820190508181036000830152613128816130ec565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613198826124c2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156131cb576131ca61315e565b5b600182019050919050565b6000819050919050565b6131f16131ec826129e0565b6131d6565b82525050565b600081519050919050565b600081905092915050565b60005b8381101561322b578082015181840152602081019050613210565b8381111561323a576000848401525b50505050565b600061324b826131f7565b6132558185613202565b935061326581856020860161320d565b80840191505092915050565b600061327d82856131e0565b60018201915061328d8284613240565b91508190509392505050565b7f4d7573742068617665206b20213d206a207768656e20636f6d707574696e672060008201527f526a207061727469616c20636f6e7374616e7473000000000000000000000000602082015250565b60006132f560348361308c565b915061330082613299565b604082019050919050565b60006020820190508181036000830152613324816132e8565b9050919050565b6000613336826124c2565b9150613341836124c2565b9250828210156133545761335361315e565b5b828203905092915050565b600061336a82612bc9565b915061337583612bc9565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156133b4576133b361315e565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156133f1576133f061315e565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561342e5761342d61315e565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561346b5761346a61315e565b5b828202905092915050565b600061348182612bc9565b915061348c83612bc9565b9250827f8000000000000000000000000000000000000000000000000000000000000000018212600084121516156134c7576134c661315e565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0182136000841216156134ff576134fe61315e565b5b828203905092915050565b7f6d6f64756c6172206578706f6e656e74696174696f6e2066616c696564000000600082015250565b6000613540601d8361308c565b915061354b8261350a565b602082019050919050565b6000602082019050818103600083015261356f81613533565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f656c6c6970746963206375727665206d756c7469706c69636174696f6e20666160008201527f696c656400000000000000000000000000000000000000000000000000000000602082015250565b600061360160248361308c565b915061360c826135a5565b604082019050919050565b60006020820190508181036000830152613630816135f4565b9050919050565b600061364282612bc9565b915061364d83612bc9565b92508261365d5761365c61312f565b5b600160000383147f8000000000000000000000000000000000000000000000000000000000000000831416156136965761369561315e565b5b828205905092915050565b60006136ac82612bc9565b91506136b783612bc9565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038313600083121516156136f2576136f161315e565b5b817f800000000000000000000000000000000000000000000000000000000000000003831260008312161561372a5761372961315e565b5b828201905092915050565b7f496e76616c696420706f696e743a206e6f74206f6e20656c6c6970746963206360008201527f7572766500000000000000000000000000000000000000000000000000000000602082015250565b600061379160248361308c565b915061379c82613735565b604082019050919050565b600060208201905081810360008301526137c081613784565b9050919050565b7f496e76616c6964206861736820706f696e743a206e6f74206f6e20656c6c697060008201527f7469632063757276650000000000000000000000000000000000000000000000602082015250565b600061382360298361308c565b915061382e826137c7565b604082019050919050565b6000602082019050818103600083015261385281613816565b9050919050565b7f44616e6765726f7573206861736820706f696e743a206e6f742073616665206660008201527f6f72207369676e696e6700000000000000000000000000000000000000000000602082015250565b60006138b5602a8361308c565b91506138c082613859565b604082019050919050565b600060208201905081810360008301526138e4816138a8565b9050919050565b7f656c6c69707469632063757276652070616972696e67206661696c6564000000600082015250565b6000613921601d8361308c565b915061392c826138eb565b602082019050919050565b6000602082019050818103600083015261395081613914565b9050919050565b7f636865636b496e7665727365733a20696e73756666696369656e7420696e766560008201527f7273657320666f722067726f7570207369676e61747572652063616c63756c6160208201527f74696f6e00000000000000000000000000000000000000000000000000000000604082015250565b60006139d960448361308c565b91506139e482613957565b606082019050919050565b60006020820190508181036000830152613a08816139cc565b9050919050565b7f656c6c6970746963206375727665206164646974696f6e206661696c65640000600082015250565b6000613a45601e8361308c565b9150613a5082613a0f565b602082019050919050565b60006020820190508181036000830152613a7481613a38565b9050919050565b600081905092915050565b613a8f816124c2565b82525050565b6000613aa18383613a86565b60208301905092915050565b613ab68161291a565b613ac08184613a7b565b9250613acb82612930565b8060005b83811015613afc578151613ae38782613a95565b9650613aee83612961565b925050600181019050613acf565b505050505050565b6000613b108289613aad565b604082019150613b208288613aad565b604082019150613b308287613aad565b604082019150613b408286613aad565b604082019150613b508285613aad565b604082019150613b608284613aad565b604082019150819050979650505050505050565b7f4d69736d61746368206265747765656e206c656e677468206f66207369676e6160008201527f747572657320616e6420696e6465782061727261790000000000000000000000602082015250565b6000613bd060358361308c565b9150613bdb82613b74565b604082019050919050565b60006020820190508181036000830152613bff81613bc3565b9050919050565b7f4661696c656420746f206d656574207265717569726564206e756d626572206f60008201527f66207369676e61747572657320666f72207468726573686f6c64000000000000602082015250565b6000613c62603a8361308c565b9150613c6d82613c06565b604082019050919050565b60006020820190508181036000830152613c9181613c55565b9050919050565b7f696e76417272617920646f6573206e6f7420696e636c75646520636f7272656360008201527f7420696e76657273657300000000000000000000000000000000000000000000602082015250565b6000613cf4602a8361308c565b9150613cff82613c98565b604082019050919050565b60006020820190508181036000830152613d2381613ce7565b905091905056fea2646970667358221220b8ae4e16c1243ca7840255f43a779ea86e7667c311d73f7c4279922a1a21701d64736f6c634300080b0033",
=======
	Bin: "0x608060405234801561001057600080fd5b50612c4a806100206000396000f3fe608060405234801561001057600080fd5b506004361061018d5760003560e01c806382688f14116100e3578063ccba31231161008c578063e81ee0e311610066578063e81ee0e31461033e578063f022e06114610351578063f4d7d33d1461036457600080fd5b8063ccba312314610305578063e480a92e14610318578063e664725b1461032b57600080fd5b806396d95a6f116100bd57806396d95a6f146102cc578063a218e426146102df578063b87cbafc146102f257600080fd5b806382688f14146102935780638b6eb76e146102a657806395add79c146102b957600080fd5b80636bdf477c1161014557806377d2f2031161011f57806377d2f2031461025a578063783ce4581461026d57806380f4a9221461028057600080fd5b80636bdf477c146102215780636ef064a4146102345780637351ee371461024757600080fd5b806338529ab41161017657806338529ab4146101da57806358ef876a146101fb578063677342ce1461020e57600080fd5b8063063675871461019257806316534acd146101ba575b600080fd5b6101a56101a03660046121ed565b610377565b60405190151581526020015b60405180910390f35b6101cd6101c83660046122dc565b61038e565b6040516101b191906123ce565b6101ed6101e836600461242f565b6103ab565b6040519081526020016101b1565b6101ed610209366004612484565b6103b8565b6101ed61021c3660046124d4565b6103c5565b6101cd61022f3660046124ed565b6103d6565b6101ed6102423660046124d4565b6103e8565b6101ed6102553660046124d4565b6103f3565b6101ed6102683660046124d4565b6103fe565b6101ed61027b366004612532565b610409565b6101a561028e36600461255e565b610416565b6101cd6102a13660046125cb565b610423565b6101cd6102b43660046124d4565b610434565b6101cd6102c7366004612624565b610445565b6101a56102da366004612659565b610456565b6101ed6102ed366004612675565b610461565b6101a56103003660046126aa565b61046c565b6101ed6103133660046124d4565b610477565b6101a5610326366004612729565b610482565b6101cd61033936600461275f565b61048e565b6101a561034c36600461277b565b61049f565b6101cd61035f3660046122dc565b6104b8565b6101a5610372366004612659565b6104cc565b60006103848484846104d7565b90505b9392505050565b610396611fec565b6103a28585858561067d565b95945050505050565b6000610384848484610919565b6000610384848484610a22565b60006103d082610b8e565b92915050565b6103de611fec565b6103878383610bdb565b60006103d082610c1f565b60006103d082610ca0565b60006103d082610ced565b6000610384848484610d2b565b6000610384848484610dd3565b61042b611fec565b6103d082610f00565b61043c611fec565b6103d082610fc2565b61044d611fec565b6103d082611516565b60006103d082611729565b60006103d082611750565b60006103d0826117bc565b60006103d082611867565b600061038783836118b8565b610496611fec565b6103d082611a10565b60006104ae8686868686611aad565b9695505050505050565b6104c0611fec565b6103a285858585611d9d565b60006103d082611f88565b60006104e1611fec565b6104ea85611516565b90506103a26040518061018001604052808660006002811061050e5761050e6127e7565b602002015181526020018660016002811061052b5761052b6127e7565b602002015181526020017f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed81526020017f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec81526020017f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d8152602001836000600281106105e0576105e06127e7565b60200201518152602001836001600281106105fd576105fd6127e7565b602002015181526020018560006004811061061a5761061a6127e7565b6020020151815260200185600160048110610637576106376127e7565b6020020151815260200185600260048110610654576106546127e7565b6020020151815260200185600360048110610671576106716127e7565b602002015190526117bc565b610685611fec565b835185511461071b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f4d69736d61746368206265747765656e20706f696e7473473120616e6420696e60448201527f646963657320617272617973000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610723611fec565b600080825260208201819052808080808061073c611fec565b600096505b8b51871015610908578b878151811061075c5761075c6127e7565b602002602001015194508a87111561077357610908565b60019250600095505b8b51861015610801578b8681518110610797576107976127e7565b602002602001015193508a8611156107ae57610801565b848414156107bb576107ef565b6107c684868c610a22565b91507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182840992505b856107f981612874565b96505061077c565b8c8781518110610813576108136127e7565b6020026020010151905061086e60405180606001604052808360006002811061083e5761083e6127e7565b602002015181526020018360016002811061085b5761085b6127e7565b6020020151815260200185815250610f00565b90506108f460405180608001604052808a600060028110610891576108916127e7565b602002015181526020018a6001600281106108ae576108ae6127e7565b60200201518152602001836000600281106108cb576108cb6127e7565b60200201518152602001836001600281106108e8576108e86127e7565b60200201519052611a10565b97508661090081612874565b975050610741565b50959b9a5050505050505050505050565b600080838560405160200161092f9291906128ad565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815290829052805160209182012092506000916109799186918991016128ad565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052805160209091012090507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47817f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd477f0e0a77c19a07df2f666ea36f7879462c0a78eb28f5c70b3dd35d438dc58f0d9d8509089695505050505050565b600082841415610ab4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603460248201527f4d7573742068617665206b20213d206a207768656e20636f6d707574696e672060448201527f526a207061727469616c20636f6e7374616e74730000000000000000000000006064820152608401610712565b83600084821115610ad057610ac98587612917565b9050610b2d565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610b1c60017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001612917565b83099150610b2a8686612917565b90505b83610b39600183612917565b81518110610b4957610b496127e7565b602002602001015190507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000180610b8157610b81612816565b8183099695505050505050565b60006103d0827f0c19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47610d2b565b610be3611fec565b610beb611fec565b610bf484611516565b9050610c1760405180606001604052808360006002811061083e5761083e6127e7565b949350505050565b600080610c6d837f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea37f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47610d2b565b90508015610c95576001610c84828216600261292e565b610c8e91906129ea565b9150610c9a565b600091505b50919050565b60006103d0827f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd457f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47610d2b565b600081610cfc57506000919050565b6103d0827f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47612917565b919050565b60008060405160208152602080820152602060408201528560608201528460808201528360a082015260208160c08360055afa90519250905080610dcb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f6d6f64756c6172206578706f6e656e74696174696f6e2066616c6965640000006044820152606401610712565b509392505050565b60016000808084610de657610de6612a5e565b6101008510610df757610df7612a5e565b600092505b8651831015610e7057868381518110610e1757610e176127e7565b602002602001015190508060001480610e2f57508481115b15610e3d5760009350610e70565b6001811b8216610e5557806001901b82179150610e5e565b60009350610e70565b82610e6881612874565b935050610dfc565b83610e7d57505050610387565b600092505b8551831015610ef657858381518110610e9d57610e9d6127e7565b602002602001015190508060001480610eb557508481115b15610ec35760009350610ef6565b6001811b8216610edb57806001901b82179150610ee4565b60009350610ef6565b82610eee81612874565b935050610e82565b5050509392505050565b610f08611fec565b600060408260608560077ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa905080610c9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f656c6c6970746963206375727665206d756c7469706c69636174696f6e20666160448201527f696c6564000000000000000000000000000000000000000000000000000000006064820152608401610712565b610fca611fec565b600080807f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4785860992507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476004840891507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47828409905061104a81610ca0565b905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4783840990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4783820990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47848509935060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478577b3c4d79d41a91759a9e4c7e359b6b89eaec68e62effffffd0990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47838209905061112f81610ced565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd477759e26bcea0d48bacd4f263f1acdb5c4f5763473177fffffe8208905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476001830890506111a181610ced565b905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47847f2042def740cbc01bd03583cf0100e593ba56470b9af68708d2c05d64905353850990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47858209905061121a81610ced565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760018208905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4784850990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4784820990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760038208905060006112c382610c1f565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4784850991507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4784830991507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47600383089150600061134383610c1f565b9050600060046113546003846129ea565b61135f6001866129ea565b611369919061292e565b6113739190612a8d565b61137e906001612b1c565b9050600081600114156113925750866113a5565b81600214156113a25750856113a5565b50845b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4781820994507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4781860994507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760038608945061142185610b8e565b9450600061142e8f611867565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478187099550611473604051806040016040528084815260200188815250611f88565b6114fe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f496e76616c696420706f696e743a206e6f74206f6e20656c6c6970746963206360448201527f75727665000000000000000000000000000000000000000000000000000000006064820152608401610712565b508c5250505060208901525095979650505050505050565b61151e611fec565b600061154b83827f0100000000000000000000000000000000000000000000000000000000000000610919565b9050600061159a847f02000000000000000000000000000000000000000000000000000000000000007f0300000000000000000000000000000000000000000000000000000000000000610919565b905060006115a783610fc2565b905060006115b483610fc2565b90506115f46040518060800160405280846000600281106115d7576115d76127e7565b60200201518152602001846001600281106108ae576108ae6127e7565b94506115ff85611f88565b61168b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f496e76616c6964206861736820706f696e743a206e6f74206f6e20656c6c697060448201527f74696320637572766500000000000000000000000000000000000000000000006064820152608401610712565b61169485611729565b611720576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f44616e6765726f7573206861736820706f696e743a206e6f742073616665206660448201527f6f72207369676e696e67000000000000000000000000000000000000000000006064820152608401610712565b50505050919050565b8051600090158061173b575081516001145b1561174857506000919050565b506001919050565b600080600083600081518110611768576117686127e7565b602002602001015190506000600190505b8451811015610dcb57848181518110611794576117946127e7565b60200260200101519250818311156117aa578291505b806117b481612874565b915050611779565b60006117c661200a565b60006020826101808660087ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa90508061185c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f656c6c69707469632063757276652070616972696e67206661696c65640000006044820152606401610712565b505160011492915050565b60017f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea3821115610d2657507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd46919050565b60008060008060006001905086516001876118d39190612917565b1115611988576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526044602482018190527f636865636b496e7665727365733a20696e73756666696369656e7420696e7665908201527f7273657320666f722067726f7570207369676e61747572652063616c63756c6160648201527f74696f6e00000000000000000000000000000000000000000000000000000000608482015260a401610712565b600193505b858410156104ae57866119a1600186612917565b815181106119b1576119b16127e7565b602002602001015192507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001806119e9576119e9612816565b8385099150816001146119fe575060006104ae565b83611a0881612874565b94505061198d565b611a18611fec565b600060408260808560067ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa905080610c9a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f656c6c6970746963206375727665206164646974696f6e206661696c656400006044820152606401610712565b6000611ab7611fec565b611abf611fec565b611b2660405180606001604052808a600060028110611ae057611ae06127e7565b602002015181526020018a600160028110611afd57611afd6127e7565b6020020151815260200186600160028110611b1a57611b1a6127e7565b60200201519052610f00565b9150611b83604051806060016040528089600060028110611b4957611b496127e7565b6020020151815260200189600160028110611b6657611b666127e7565b6020020151815260200186600060028110611b1a57611b1a6127e7565b90506000611bff604051806080016040528085600060028110611ba857611ba86127e7565b6020020151815260200185600160028110611bc557611bc56127e7565b6020020151815260200184600060028110611be257611be26127e7565b60200201518152602001846001600281106108e8576108e86127e7565b9050611c5c604051806060016040528089600060028110611c2257611c226127e7565b6020020151815260200189600160028110611c3f57611c3f6127e7565b6020020151815260200187600160028110611b1a57611b1a6127e7565b9250611cb9604051806060016040528088600060028110611c7f57611c7f6127e7565b6020020151815260200188600160028110611c9c57611c9c6127e7565b6020020151815260200187600060028110611b1a57611b1a6127e7565b91506000611d35604051806080016040528086600060028110611cde57611cde6127e7565b6020020151815260200186600160028110611cfb57611cfb6127e7565b6020020151815260200185600060028110611d1857611d186127e7565b60200201518152602001856001600281106108e8576108e86127e7565b905060008a8a8a8a8686604051602001611d5496959493929190612bb9565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0018152919052805160209091012096519096149a9950505050505050505050565b611da5611fec565b8351855114611e36576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603560248201527f4d69736d61746368206265747765656e206c656e677468206f66207369676e6160448201527f747572657320616e6420696e64657820617272617900000000000000000000006064820152608401610712565b82855111611ec6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f4661696c656420746f206d656574207265717569726564206e756d626572206f60448201527f66207369676e61747572657320666f72207468726573686f6c640000000000006064820152608401610712565b6000611ed185611750565b9050611edd83826118b8565b611f69576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f696e76417272617920646f6573206e6f7420696e636c75646520636f7272656360448201527f7420696e766572736573000000000000000000000000000000000000000000006064820152608401610712565b611f71611fec565b611f7d8787878761067d565b979650505050505050565b80516000907f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47906003908290819080098551090860208301517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd479080091492915050565b60405180604001604052806002906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561209e5761209e612028565b604052919050565b600082601f8301126120b757600080fd5b813567ffffffffffffffff8111156120d1576120d1612028565b61210260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601612057565b81815284602083860101111561211757600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261214557600080fd5b6040516040810181811067ffffffffffffffff8211171561216857612168612028565b806040525080604084018581111561217f57600080fd5b845b81811015612199578035835260209283019201612181565b509195945050505050565b600082601f8301126121b557600080fd5b6040516080810181811067ffffffffffffffff821117156121d8576121d8612028565b60405280608084018581111561217f57600080fd5b600080600060e0848603121561220257600080fd5b833567ffffffffffffffff81111561221957600080fd5b612225868287016120a6565b9350506122358560208601612134565b915061224485606086016121a4565b90509250925092565b600067ffffffffffffffff82111561226757612267612028565b5060051b60200190565b600082601f83011261228257600080fd5b813560206122976122928361224d565b612057565b82815260059290921b840181019181810190868411156122b657600080fd5b8286015b848110156122d157803583529183019183016122ba565b509695505050505050565b600080600080608085870312156122f257600080fd5b843567ffffffffffffffff8082111561230a57600080fd5b818701915087601f83011261231e57600080fd5b8135602061232e6122928361224d565b82815260069290921b8401810191818101908b84111561234d57600080fd5b948201945b83861015612376576123648c87612134565b82528282019150604086019550612352565b9850508801359250508082111561238c57600080fd5b61239888838901612271565b94506040870135935060608701359150808211156123b557600080fd5b506123c287828801612271565b91505092959194509250565b60408101818360005b60028110156123f65781518352602092830192909101906001016123d7565b50505092915050565b80357fff0000000000000000000000000000000000000000000000000000000000000081168114610d2657600080fd5b60008060006060848603121561244457600080fd5b833567ffffffffffffffff81111561245b57600080fd5b612467868287016120a6565b935050612476602085016123ff565b9150612244604085016123ff565b60008060006060848603121561249957600080fd5b8335925060208401359150604084013567ffffffffffffffff8111156124be57600080fd5b6124ca86828701612271565b9150509250925092565b6000602082840312156124e657600080fd5b5035919050565b6000806040838503121561250057600080fd5b823567ffffffffffffffff81111561251757600080fd5b612523858286016120a6565b95602094909401359450505050565b60008060006060848603121561254757600080fd5b505081359360208301359350604090920135919050565b60008060006060848603121561257357600080fd5b833567ffffffffffffffff8082111561258b57600080fd5b61259787838801612271565b945060208601359150808211156125ad57600080fd5b506125ba86828701612271565b925050604084013590509250925092565b6000606082840312156125dd57600080fd5b82601f8301126125ec57600080fd5b6040516060810181811067ffffffffffffffff8211171561260f5761260f612028565b60405280606084018581111561217f57600080fd5b60006020828403121561263657600080fd5b813567ffffffffffffffff81111561264d57600080fd5b610c17848285016120a6565b60006040828403121561266b57600080fd5b6103878383612134565b60006020828403121561268757600080fd5b813567ffffffffffffffff81111561269e57600080fd5b610c1784828501612271565b60006101808083850312156126be57600080fd5b83601f8401126126cd57600080fd5b60405181810181811067ffffffffffffffff821117156126ef576126ef612028565b60405290830190808583111561270457600080fd5b845b8381101561271e578035825260209182019101612706565b509095945050505050565b6000806040838503121561273c57600080fd5b823567ffffffffffffffff81111561275357600080fd5b61252385828601612271565b60006080828403121561277157600080fd5b61038783836121a4565b6000806000806000610140868803121561279457600080fd5b61279e8787612134565b94506127ad8760408801612134565b93506127bc8760808801612134565b92506127cb8760c08801612134565b91506127db876101008801612134565b90509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156128a6576128a6612845565b5060010190565b7fff00000000000000000000000000000000000000000000000000000000000000831681526000825160005b818110156128f657602081860181015160018684010152016128d9565b81811115612908576000600183860101525b50919091016001019392505050565b60008282101561292957612929612845565b500390565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60008413600084138583048511828216161561296f5761296f612845565b7f800000000000000000000000000000000000000000000000000000000000000060008712868205881281841616156129aa576129aa612845565b600087129250878205871284841616156129c6576129c6612845565b878505871281841616156129dc576129dc612845565b505050929093029392505050565b6000808312837f800000000000000000000000000000000000000000000000000000000000000001831281151615612a2457612a24612845565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018313811615612a5857612a58612845565b50500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b600082612ac3577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83147f800000000000000000000000000000000000000000000000000000000000000083141615612b1757612b17612845565b500590565b6000808212827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03841381151615612b5657612b56612845565b827f8000000000000000000000000000000000000000000000000000000000000000038412811615612b8a57612b8a612845565b50500190565b8060005b6002811015612bb3578151845260209384019390910190600101612b94565b50505050565b612bc38188612b90565b612bd06040820187612b90565b612bdd6080820186612b90565b612bea60c0820185612b90565b612bf8610100820184612b90565b612c06610140820183612b90565b61018001969550505050505056fea2646970667358221220b066396ea90ad3424de4a50539e813d989fbffee7e31199f4179d9c6affd037e64736f6c634300080b0033",
>>>>>>> Stashed changes
}

// CryptoABI is the input ABI used to generate the binding from.
// Deprecated: Use CryptoMetaData.ABI instead.
var CryptoABI = CryptoMetaData.ABI

// CryptoBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CryptoMetaData.Bin instead.
var CryptoBin = CryptoMetaData.Bin

// DeployCrypto deploys a new Ethereum contract, binding an instance of Crypto to it.
func DeployCrypto(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Crypto, error) {
	parsed, err := CryptoMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CryptoBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Crypto{CryptoCaller: CryptoCaller{contract: contract}, CryptoTransactor: CryptoTransactor{contract: contract}, CryptoFilterer: CryptoFilterer{contract: contract}}, nil
}

// Crypto is an auto generated Go binding around an Ethereum contract.
type Crypto struct {
	CryptoCaller     // Read-only binding to the contract
	CryptoTransactor // Write-only binding to the contract
	CryptoFilterer   // Log filterer for contract events
}

// CryptoCaller is an auto generated read-only Go binding around an Ethereum contract.
type CryptoCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CryptoTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CryptoTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CryptoFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CryptoFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CryptoSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CryptoSession struct {
	Contract     *Crypto           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CryptoCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CryptoCallerSession struct {
	Contract *CryptoCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// CryptoTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CryptoTransactorSession struct {
	Contract     *CryptoTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CryptoRaw is an auto generated low-level Go binding around an Ethereum contract.
type CryptoRaw struct {
	Contract *Crypto // Generic contract binding to access the raw methods on
}

// CryptoCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CryptoCallerRaw struct {
	Contract *CryptoCaller // Generic read-only contract binding to access the raw methods on
}

// CryptoTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CryptoTransactorRaw struct {
	Contract *CryptoTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCrypto creates a new instance of Crypto, bound to a specific deployed contract.
func NewCrypto(address common.Address, backend bind.ContractBackend) (*Crypto, error) {
	contract, err := bindCrypto(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Crypto{CryptoCaller: CryptoCaller{contract: contract}, CryptoTransactor: CryptoTransactor{contract: contract}, CryptoFilterer: CryptoFilterer{contract: contract}}, nil
}

// NewCryptoCaller creates a new read-only instance of Crypto, bound to a specific deployed contract.
func NewCryptoCaller(address common.Address, caller bind.ContractCaller) (*CryptoCaller, error) {
	contract, err := bindCrypto(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CryptoCaller{contract: contract}, nil
}

// NewCryptoTransactor creates a new write-only instance of Crypto, bound to a specific deployed contract.
func NewCryptoTransactor(address common.Address, transactor bind.ContractTransactor) (*CryptoTransactor, error) {
	contract, err := bindCrypto(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CryptoTransactor{contract: contract}, nil
}

// NewCryptoFilterer creates a new log filterer instance of Crypto, bound to a specific deployed contract.
func NewCryptoFilterer(address common.Address, filterer bind.ContractFilterer) (*CryptoFilterer, error) {
	contract, err := bindCrypto(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CryptoFilterer{contract: contract}, nil
}

// bindCrypto binds a generic wrapper to an already deployed contract.
func bindCrypto(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(CryptoABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Crypto *CryptoRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Crypto.Contract.CryptoCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Crypto *CryptoRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Crypto.Contract.CryptoTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Crypto *CryptoRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Crypto.Contract.CryptoTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Crypto *CryptoCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Crypto.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Crypto *CryptoTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Crypto.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Crypto *CryptoTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Crypto.Contract.contract.Transact(opts, method, params...)
}

// AggregateSignatures is a free data retrieval call binding the contract method 0xf022e061.
//
// Solidity: function AggregateSignatures(uint256[2][] sigs, uint256[] indices, uint256 threshold, uint256[] invArray) view returns(uint256[2])
func (_Crypto *CryptoCaller) AggregateSignatures(opts *bind.CallOpts, sigs [][2]*big.Int, indices []*big.Int, threshold *big.Int, invArray []*big.Int) ([2]*big.Int, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "AggregateSignatures", sigs, indices, threshold, invArray)

	if err != nil {
		return *new([2]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([2]*big.Int)).(*[2]*big.Int)

	return out0, err

}

// AggregateSignatures is a free data retrieval call binding the contract method 0xf022e061.
//
// Solidity: function AggregateSignatures(uint256[2][] sigs, uint256[] indices, uint256 threshold, uint256[] invArray) view returns(uint256[2])
func (_Crypto *CryptoSession) AggregateSignatures(sigs [][2]*big.Int, indices []*big.Int, threshold *big.Int, invArray []*big.Int) ([2]*big.Int, error) {
	return _Crypto.Contract.AggregateSignatures(&_Crypto.CallOpts, sigs, indices, threshold, invArray)
}

// AggregateSignatures is a free data retrieval call binding the contract method 0xf022e061.
//
// Solidity: function AggregateSignatures(uint256[2][] sigs, uint256[] indices, uint256 threshold, uint256[] invArray) view returns(uint256[2])
func (_Crypto *CryptoCallerSession) AggregateSignatures(sigs [][2]*big.Int, indices []*big.Int, threshold *big.Int, invArray []*big.Int) ([2]*big.Int, error) {
	return _Crypto.Contract.AggregateSignatures(&_Crypto.CallOpts, sigs, indices, threshold, invArray)
}

// HashToG1 is a free data retrieval call binding the contract method 0x95add79c.
//
// Solidity: function HashToG1(bytes message) view returns(uint256[2] h)
func (_Crypto *CryptoCaller) HashToG1(opts *bind.CallOpts, message []byte) ([2]*big.Int, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "HashToG1", message)

	if err != nil {
		return *new([2]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([2]*big.Int)).(*[2]*big.Int)

	return out0, err

}

// HashToG1 is a free data retrieval call binding the contract method 0x95add79c.
//
// Solidity: function HashToG1(bytes message) view returns(uint256[2] h)
func (_Crypto *CryptoSession) HashToG1(message []byte) ([2]*big.Int, error) {
	return _Crypto.Contract.HashToG1(&_Crypto.CallOpts, message)
}

// HashToG1 is a free data retrieval call binding the contract method 0x95add79c.
//
// Solidity: function HashToG1(bytes message) view returns(uint256[2] h)
func (_Crypto *CryptoCallerSession) HashToG1(message []byte) ([2]*big.Int, error) {
	return _Crypto.Contract.HashToG1(&_Crypto.CallOpts, message)
}

// LagrangeInterpolationG1 is a free data retrieval call binding the contract method 0x16534acd.
//
// Solidity: function LagrangeInterpolationG1(uint256[2][] pointsG1, uint256[] indices, uint256 threshold, uint256[] invArray) view returns(uint256[2])
func (_Crypto *CryptoCaller) LagrangeInterpolationG1(opts *bind.CallOpts, pointsG1 [][2]*big.Int, indices []*big.Int, threshold *big.Int, invArray []*big.Int) ([2]*big.Int, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "LagrangeInterpolationG1", pointsG1, indices, threshold, invArray)

	if err != nil {
		return *new([2]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([2]*big.Int)).(*[2]*big.Int)

	return out0, err

}

// LagrangeInterpolationG1 is a free data retrieval call binding the contract method 0x16534acd.
//
// Solidity: function LagrangeInterpolationG1(uint256[2][] pointsG1, uint256[] indices, uint256 threshold, uint256[] invArray) view returns(uint256[2])
func (_Crypto *CryptoSession) LagrangeInterpolationG1(pointsG1 [][2]*big.Int, indices []*big.Int, threshold *big.Int, invArray []*big.Int) ([2]*big.Int, error) {
	return _Crypto.Contract.LagrangeInterpolationG1(&_Crypto.CallOpts, pointsG1, indices, threshold, invArray)
}

// LagrangeInterpolationG1 is a free data retrieval call binding the contract method 0x16534acd.
//
// Solidity: function LagrangeInterpolationG1(uint256[2][] pointsG1, uint256[] indices, uint256 threshold, uint256[] invArray) view returns(uint256[2])
func (_Crypto *CryptoCallerSession) LagrangeInterpolationG1(pointsG1 [][2]*big.Int, indices []*big.Int, threshold *big.Int, invArray []*big.Int) ([2]*big.Int, error) {
	return _Crypto.Contract.LagrangeInterpolationG1(&_Crypto.CallOpts, pointsG1, indices, threshold, invArray)
}

// Sign is a free data retrieval call binding the contract method 0x6bdf477c.
//
// Solidity: function Sign(bytes message, uint256 privK) view returns(uint256[2] sig)
func (_Crypto *CryptoCaller) Sign(opts *bind.CallOpts, message []byte, privK *big.Int) ([2]*big.Int, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "Sign", message, privK)

	if err != nil {
		return *new([2]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([2]*big.Int)).(*[2]*big.Int)

	return out0, err

}

// Sign is a free data retrieval call binding the contract method 0x6bdf477c.
//
// Solidity: function Sign(bytes message, uint256 privK) view returns(uint256[2] sig)
func (_Crypto *CryptoSession) Sign(message []byte, privK *big.Int) ([2]*big.Int, error) {
	return _Crypto.Contract.Sign(&_Crypto.CallOpts, message, privK)
}

// Sign is a free data retrieval call binding the contract method 0x6bdf477c.
//
// Solidity: function Sign(bytes message, uint256 privK) view returns(uint256[2] sig)
func (_Crypto *CryptoCallerSession) Sign(message []byte, privK *big.Int) ([2]*big.Int, error) {
	return _Crypto.Contract.Sign(&_Crypto.CallOpts, message, privK)
}

// Verify is a free data retrieval call binding the contract method 0x06367587.
//
// Solidity: function Verify(bytes message, uint256[2] sig, uint256[4] pubK) view returns(bool v)
func (_Crypto *CryptoCaller) Verify(opts *bind.CallOpts, message []byte, sig [2]*big.Int, pubK [4]*big.Int) (bool, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "Verify", message, sig, pubK)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Verify is a free data retrieval call binding the contract method 0x06367587.
//
// Solidity: function Verify(bytes message, uint256[2] sig, uint256[4] pubK) view returns(bool v)
func (_Crypto *CryptoSession) Verify(message []byte, sig [2]*big.Int, pubK [4]*big.Int) (bool, error) {
	return _Crypto.Contract.Verify(&_Crypto.CallOpts, message, sig, pubK)
}

// Verify is a free data retrieval call binding the contract method 0x06367587.
//
// Solidity: function Verify(bytes message, uint256[2] sig, uint256[4] pubK) view returns(bool v)
func (_Crypto *CryptoCallerSession) Verify(message []byte, sig [2]*big.Int, pubK [4]*big.Int) (bool, error) {
	return _Crypto.Contract.Verify(&_Crypto.CallOpts, message, sig, pubK)
}

// BaseToG1 is a free data retrieval call binding the contract method 0x8b6eb76e.
//
// Solidity: function baseToG1(uint256 t) view returns(uint256[2] h)
func (_Crypto *CryptoCaller) BaseToG1(opts *bind.CallOpts, t *big.Int) ([2]*big.Int, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "baseToG1", t)

	if err != nil {
		return *new([2]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([2]*big.Int)).(*[2]*big.Int)

	return out0, err

}

// BaseToG1 is a free data retrieval call binding the contract method 0x8b6eb76e.
//
// Solidity: function baseToG1(uint256 t) view returns(uint256[2] h)
func (_Crypto *CryptoSession) BaseToG1(t *big.Int) ([2]*big.Int, error) {
	return _Crypto.Contract.BaseToG1(&_Crypto.CallOpts, t)
}

// BaseToG1 is a free data retrieval call binding the contract method 0x8b6eb76e.
//
// Solidity: function baseToG1(uint256 t) view returns(uint256[2] h)
func (_Crypto *CryptoCallerSession) BaseToG1(t *big.Int) ([2]*big.Int, error) {
	return _Crypto.Contract.BaseToG1(&_Crypto.CallOpts, t)
}

// Bn128Add is a free data retrieval call binding the contract method 0xe664725b.
//
// Solidity: function bn128_add(uint256[4] input) view returns(uint256[2] result)
func (_Crypto *CryptoCaller) Bn128Add(opts *bind.CallOpts, input [4]*big.Int) ([2]*big.Int, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "bn128_add", input)

	if err != nil {
		return *new([2]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([2]*big.Int)).(*[2]*big.Int)

	return out0, err

}

// Bn128Add is a free data retrieval call binding the contract method 0xe664725b.
//
// Solidity: function bn128_add(uint256[4] input) view returns(uint256[2] result)
func (_Crypto *CryptoSession) Bn128Add(input [4]*big.Int) ([2]*big.Int, error) {
	return _Crypto.Contract.Bn128Add(&_Crypto.CallOpts, input)
}

// Bn128Add is a free data retrieval call binding the contract method 0xe664725b.
//
// Solidity: function bn128_add(uint256[4] input) view returns(uint256[2] result)
func (_Crypto *CryptoCallerSession) Bn128Add(input [4]*big.Int) ([2]*big.Int, error) {
	return _Crypto.Contract.Bn128Add(&_Crypto.CallOpts, input)
}

// Bn128CheckPairing is a free data retrieval call binding the contract method 0xb87cbafc.
//
// Solidity: function bn128_check_pairing(uint256[12] input) view returns(bool)
func (_Crypto *CryptoCaller) Bn128CheckPairing(opts *bind.CallOpts, input [12]*big.Int) (bool, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "bn128_check_pairing", input)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Bn128CheckPairing is a free data retrieval call binding the contract method 0xb87cbafc.
//
// Solidity: function bn128_check_pairing(uint256[12] input) view returns(bool)
func (_Crypto *CryptoSession) Bn128CheckPairing(input [12]*big.Int) (bool, error) {
	return _Crypto.Contract.Bn128CheckPairing(&_Crypto.CallOpts, input)
}

// Bn128CheckPairing is a free data retrieval call binding the contract method 0xb87cbafc.
//
// Solidity: function bn128_check_pairing(uint256[12] input) view returns(bool)
func (_Crypto *CryptoCallerSession) Bn128CheckPairing(input [12]*big.Int) (bool, error) {
	return _Crypto.Contract.Bn128CheckPairing(&_Crypto.CallOpts, input)
}

// Bn128IsOnCurve is a free data retrieval call binding the contract method 0xf4d7d33d.
//
// Solidity: function bn128_is_on_curve(uint256[2] point) pure returns(bool)
func (_Crypto *CryptoCaller) Bn128IsOnCurve(opts *bind.CallOpts, point [2]*big.Int) (bool, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "bn128_is_on_curve", point)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Bn128IsOnCurve is a free data retrieval call binding the contract method 0xf4d7d33d.
//
// Solidity: function bn128_is_on_curve(uint256[2] point) pure returns(bool)
func (_Crypto *CryptoSession) Bn128IsOnCurve(point [2]*big.Int) (bool, error) {
	return _Crypto.Contract.Bn128IsOnCurve(&_Crypto.CallOpts, point)
}

// Bn128IsOnCurve is a free data retrieval call binding the contract method 0xf4d7d33d.
//
// Solidity: function bn128_is_on_curve(uint256[2] point) pure returns(bool)
func (_Crypto *CryptoCallerSession) Bn128IsOnCurve(point [2]*big.Int) (bool, error) {
	return _Crypto.Contract.Bn128IsOnCurve(&_Crypto.CallOpts, point)
}

// Bn128Multiply is a free data retrieval call binding the contract method 0x82688f14.
//
// Solidity: function bn128_multiply(uint256[3] input) view returns(uint256[2] result)
func (_Crypto *CryptoCaller) Bn128Multiply(opts *bind.CallOpts, input [3]*big.Int) ([2]*big.Int, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "bn128_multiply", input)

	if err != nil {
		return *new([2]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([2]*big.Int)).(*[2]*big.Int)

	return out0, err

}

// Bn128Multiply is a free data retrieval call binding the contract method 0x82688f14.
//
// Solidity: function bn128_multiply(uint256[3] input) view returns(uint256[2] result)
func (_Crypto *CryptoSession) Bn128Multiply(input [3]*big.Int) ([2]*big.Int, error) {
	return _Crypto.Contract.Bn128Multiply(&_Crypto.CallOpts, input)
}

// Bn128Multiply is a free data retrieval call binding the contract method 0x82688f14.
//
// Solidity: function bn128_multiply(uint256[3] input) view returns(uint256[2] result)
func (_Crypto *CryptoCallerSession) Bn128Multiply(input [3]*big.Int) ([2]*big.Int, error) {
	return _Crypto.Contract.Bn128Multiply(&_Crypto.CallOpts, input)
}

// CheckIndices is a free data retrieval call binding the contract method 0x80f4a922.
//
// Solidity: function checkIndices(uint256[] honestIndices, uint256[] dishonestIndices, uint256 n) pure returns(bool validIndices)
func (_Crypto *CryptoCaller) CheckIndices(opts *bind.CallOpts, honestIndices []*big.Int, dishonestIndices []*big.Int, n *big.Int) (bool, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "checkIndices", honestIndices, dishonestIndices, n)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckIndices is a free data retrieval call binding the contract method 0x80f4a922.
//
// Solidity: function checkIndices(uint256[] honestIndices, uint256[] dishonestIndices, uint256 n) pure returns(bool validIndices)
func (_Crypto *CryptoSession) CheckIndices(honestIndices []*big.Int, dishonestIndices []*big.Int, n *big.Int) (bool, error) {
	return _Crypto.Contract.CheckIndices(&_Crypto.CallOpts, honestIndices, dishonestIndices, n)
}

// CheckIndices is a free data retrieval call binding the contract method 0x80f4a922.
//
// Solidity: function checkIndices(uint256[] honestIndices, uint256[] dishonestIndices, uint256 n) pure returns(bool validIndices)
func (_Crypto *CryptoCallerSession) CheckIndices(honestIndices []*big.Int, dishonestIndices []*big.Int, n *big.Int) (bool, error) {
	return _Crypto.Contract.CheckIndices(&_Crypto.CallOpts, honestIndices, dishonestIndices, n)
}

// CheckInverses is a free data retrieval call binding the contract method 0xe480a92e.
//
// Solidity: function checkInverses(uint256[] invArray, uint256 maxIndex) pure returns(bool)
func (_Crypto *CryptoCaller) CheckInverses(opts *bind.CallOpts, invArray []*big.Int, maxIndex *big.Int) (bool, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "checkInverses", invArray, maxIndex)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckInverses is a free data retrieval call binding the contract method 0xe480a92e.
//
// Solidity: function checkInverses(uint256[] invArray, uint256 maxIndex) pure returns(bool)
func (_Crypto *CryptoSession) CheckInverses(invArray []*big.Int, maxIndex *big.Int) (bool, error) {
	return _Crypto.Contract.CheckInverses(&_Crypto.CallOpts, invArray, maxIndex)
}

// CheckInverses is a free data retrieval call binding the contract method 0xe480a92e.
//
// Solidity: function checkInverses(uint256[] invArray, uint256 maxIndex) pure returns(bool)
func (_Crypto *CryptoCallerSession) CheckInverses(invArray []*big.Int, maxIndex *big.Int) (bool, error) {
	return _Crypto.Contract.CheckInverses(&_Crypto.CallOpts, invArray, maxIndex)
}

// ComputeArrayMax is a free data retrieval call binding the contract method 0xa218e426.
//
// Solidity: function computeArrayMax(uint256[] uint256Array) pure returns(uint256)
func (_Crypto *CryptoCaller) ComputeArrayMax(opts *bind.CallOpts, uint256Array []*big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "computeArrayMax", uint256Array)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ComputeArrayMax is a free data retrieval call binding the contract method 0xa218e426.
//
// Solidity: function computeArrayMax(uint256[] uint256Array) pure returns(uint256)
func (_Crypto *CryptoSession) ComputeArrayMax(uint256Array []*big.Int) (*big.Int, error) {
	return _Crypto.Contract.ComputeArrayMax(&_Crypto.CallOpts, uint256Array)
}

// ComputeArrayMax is a free data retrieval call binding the contract method 0xa218e426.
//
// Solidity: function computeArrayMax(uint256[] uint256Array) pure returns(uint256)
func (_Crypto *CryptoCallerSession) ComputeArrayMax(uint256Array []*big.Int) (*big.Int, error) {
	return _Crypto.Contract.ComputeArrayMax(&_Crypto.CallOpts, uint256Array)
}

// DleqVerify is a free data retrieval call binding the contract method 0xe81ee0e3.
//
// Solidity: function dleq_verify(uint256[2] x1, uint256[2] y1, uint256[2] x2, uint256[2] y2, uint256[2] proof) view returns(bool proof_is_valid)
func (_Crypto *CryptoCaller) DleqVerify(opts *bind.CallOpts, x1 [2]*big.Int, y1 [2]*big.Int, x2 [2]*big.Int, y2 [2]*big.Int, proof [2]*big.Int) (bool, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "dleq_verify", x1, y1, x2, y2, proof)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// DleqVerify is a free data retrieval call binding the contract method 0xe81ee0e3.
//
// Solidity: function dleq_verify(uint256[2] x1, uint256[2] y1, uint256[2] x2, uint256[2] y2, uint256[2] proof) view returns(bool proof_is_valid)
func (_Crypto *CryptoSession) DleqVerify(x1 [2]*big.Int, y1 [2]*big.Int, x2 [2]*big.Int, y2 [2]*big.Int, proof [2]*big.Int) (bool, error) {
	return _Crypto.Contract.DleqVerify(&_Crypto.CallOpts, x1, y1, x2, y2, proof)
}

// DleqVerify is a free data retrieval call binding the contract method 0xe81ee0e3.
//
// Solidity: function dleq_verify(uint256[2] x1, uint256[2] y1, uint256[2] x2, uint256[2] y2, uint256[2] proof) view returns(bool proof_is_valid)
func (_Crypto *CryptoCallerSession) DleqVerify(x1 [2]*big.Int, y1 [2]*big.Int, x2 [2]*big.Int, y2 [2]*big.Int, proof [2]*big.Int) (bool, error) {
	return _Crypto.Contract.DleqVerify(&_Crypto.CallOpts, x1, y1, x2, y2, proof)
}

// Expmod is a free data retrieval call binding the contract method 0x783ce458.
//
// Solidity: function expmod(uint256 base, uint256 e, uint256 m) view returns(uint256 result)
func (_Crypto *CryptoCaller) Expmod(opts *bind.CallOpts, base *big.Int, e *big.Int, m *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "expmod", base, e, m)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Expmod is a free data retrieval call binding the contract method 0x783ce458.
//
// Solidity: function expmod(uint256 base, uint256 e, uint256 m) view returns(uint256 result)
func (_Crypto *CryptoSession) Expmod(base *big.Int, e *big.Int, m *big.Int) (*big.Int, error) {
	return _Crypto.Contract.Expmod(&_Crypto.CallOpts, base, e, m)
}

// Expmod is a free data retrieval call binding the contract method 0x783ce458.
//
// Solidity: function expmod(uint256 base, uint256 e, uint256 m) view returns(uint256 result)
func (_Crypto *CryptoCallerSession) Expmod(base *big.Int, e *big.Int, m *big.Int) (*big.Int, error) {
	return _Crypto.Contract.Expmod(&_Crypto.CallOpts, base, e, m)
}

// HashToBase is a free data retrieval call binding the contract method 0x38529ab4.
//
// Solidity: function hashToBase(bytes message, bytes1 c0, bytes1 c1) pure returns(uint256 t)
func (_Crypto *CryptoCaller) HashToBase(opts *bind.CallOpts, message []byte, c0 [1]byte, c1 [1]byte) (*big.Int, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "hashToBase", message, c0, c1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// HashToBase is a free data retrieval call binding the contract method 0x38529ab4.
//
// Solidity: function hashToBase(bytes message, bytes1 c0, bytes1 c1) pure returns(uint256 t)
func (_Crypto *CryptoSession) HashToBase(message []byte, c0 [1]byte, c1 [1]byte) (*big.Int, error) {
	return _Crypto.Contract.HashToBase(&_Crypto.CallOpts, message, c0, c1)
}

// HashToBase is a free data retrieval call binding the contract method 0x38529ab4.
//
// Solidity: function hashToBase(bytes message, bytes1 c0, bytes1 c1) pure returns(uint256 t)
func (_Crypto *CryptoCallerSession) HashToBase(message []byte, c0 [1]byte, c1 [1]byte) (*big.Int, error) {
	return _Crypto.Contract.HashToBase(&_Crypto.CallOpts, message, c0, c1)
}

// Invert is a free data retrieval call binding the contract method 0x7351ee37.
//
// Solidity: function invert(uint256 t) view returns(uint256 s)
func (_Crypto *CryptoCaller) Invert(opts *bind.CallOpts, t *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "invert", t)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Invert is a free data retrieval call binding the contract method 0x7351ee37.
//
// Solidity: function invert(uint256 t) view returns(uint256 s)
func (_Crypto *CryptoSession) Invert(t *big.Int) (*big.Int, error) {
	return _Crypto.Contract.Invert(&_Crypto.CallOpts, t)
}

// Invert is a free data retrieval call binding the contract method 0x7351ee37.
//
// Solidity: function invert(uint256 t) view returns(uint256 s)
func (_Crypto *CryptoCallerSession) Invert(t *big.Int) (*big.Int, error) {
	return _Crypto.Contract.Invert(&_Crypto.CallOpts, t)
}

// Legendre is a free data retrieval call binding the contract method 0x6ef064a4.
//
// Solidity: function legendre(uint256 t) view returns(int256 chi)
func (_Crypto *CryptoCaller) Legendre(opts *bind.CallOpts, t *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "legendre", t)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Legendre is a free data retrieval call binding the contract method 0x6ef064a4.
//
// Solidity: function legendre(uint256 t) view returns(int256 chi)
func (_Crypto *CryptoSession) Legendre(t *big.Int) (*big.Int, error) {
	return _Crypto.Contract.Legendre(&_Crypto.CallOpts, t)
}

// Legendre is a free data retrieval call binding the contract method 0x6ef064a4.
//
// Solidity: function legendre(uint256 t) view returns(int256 chi)
func (_Crypto *CryptoCallerSession) Legendre(t *big.Int) (*big.Int, error) {
	return _Crypto.Contract.Legendre(&_Crypto.CallOpts, t)
}

// LiRjPartialConst is a free data retrieval call binding the contract method 0x58ef876a.
//
// Solidity: function liRjPartialConst(uint256 k, uint256 j, uint256[] invArray) pure returns(uint256)
func (_Crypto *CryptoCaller) LiRjPartialConst(opts *bind.CallOpts, k *big.Int, j *big.Int, invArray []*big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "liRjPartialConst", k, j, invArray)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LiRjPartialConst is a free data retrieval call binding the contract method 0x58ef876a.
//
// Solidity: function liRjPartialConst(uint256 k, uint256 j, uint256[] invArray) pure returns(uint256)
func (_Crypto *CryptoSession) LiRjPartialConst(k *big.Int, j *big.Int, invArray []*big.Int) (*big.Int, error) {
	return _Crypto.Contract.LiRjPartialConst(&_Crypto.CallOpts, k, j, invArray)
}

// LiRjPartialConst is a free data retrieval call binding the contract method 0x58ef876a.
//
// Solidity: function liRjPartialConst(uint256 k, uint256 j, uint256[] invArray) pure returns(uint256)
func (_Crypto *CryptoCallerSession) LiRjPartialConst(k *big.Int, j *big.Int, invArray []*big.Int) (*big.Int, error) {
	return _Crypto.Contract.LiRjPartialConst(&_Crypto.CallOpts, k, j, invArray)
}

// Neg is a free data retrieval call binding the contract method 0x77d2f203.
//
// Solidity: function neg(uint256 t) pure returns(uint256 s)
func (_Crypto *CryptoCaller) Neg(opts *bind.CallOpts, t *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "neg", t)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Neg is a free data retrieval call binding the contract method 0x77d2f203.
//
// Solidity: function neg(uint256 t) pure returns(uint256 s)
func (_Crypto *CryptoSession) Neg(t *big.Int) (*big.Int, error) {
	return _Crypto.Contract.Neg(&_Crypto.CallOpts, t)
}

// Neg is a free data retrieval call binding the contract method 0x77d2f203.
//
// Solidity: function neg(uint256 t) pure returns(uint256 s)
func (_Crypto *CryptoCallerSession) Neg(t *big.Int) (*big.Int, error) {
	return _Crypto.Contract.Neg(&_Crypto.CallOpts, t)
}

// SafeSigningPoint is a free data retrieval call binding the contract method 0x96d95a6f.
//
// Solidity: function safeSigningPoint(uint256[2] input) pure returns(bool)
func (_Crypto *CryptoCaller) SafeSigningPoint(opts *bind.CallOpts, input [2]*big.Int) (bool, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "safeSigningPoint", input)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SafeSigningPoint is a free data retrieval call binding the contract method 0x96d95a6f.
//
// Solidity: function safeSigningPoint(uint256[2] input) pure returns(bool)
func (_Crypto *CryptoSession) SafeSigningPoint(input [2]*big.Int) (bool, error) {
	return _Crypto.Contract.SafeSigningPoint(&_Crypto.CallOpts, input)
}

// SafeSigningPoint is a free data retrieval call binding the contract method 0x96d95a6f.
//
// Solidity: function safeSigningPoint(uint256[2] input) pure returns(bool)
func (_Crypto *CryptoCallerSession) SafeSigningPoint(input [2]*big.Int) (bool, error) {
	return _Crypto.Contract.SafeSigningPoint(&_Crypto.CallOpts, input)
}

// Sign0 is a free data retrieval call binding the contract method 0xccba3123.
//
// Solidity: function sign0(uint256 t) pure returns(uint256 s)
func (_Crypto *CryptoCaller) Sign0(opts *bind.CallOpts, t *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "sign0", t)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Sign0 is a free data retrieval call binding the contract method 0xccba3123.
//
// Solidity: function sign0(uint256 t) pure returns(uint256 s)
func (_Crypto *CryptoSession) Sign0(t *big.Int) (*big.Int, error) {
	return _Crypto.Contract.Sign0(&_Crypto.CallOpts, t)
}

// Sign0 is a free data retrieval call binding the contract method 0xccba3123.
//
// Solidity: function sign0(uint256 t) pure returns(uint256 s)
func (_Crypto *CryptoCallerSession) Sign0(t *big.Int) (*big.Int, error) {
	return _Crypto.Contract.Sign0(&_Crypto.CallOpts, t)
}

// Sqrt is a free data retrieval call binding the contract method 0x677342ce.
//
// Solidity: function sqrt(uint256 t) view returns(uint256 s)
func (_Crypto *CryptoCaller) Sqrt(opts *bind.CallOpts, t *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Crypto.contract.Call(opts, &out, "sqrt", t)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Sqrt is a free data retrieval call binding the contract method 0x677342ce.
//
// Solidity: function sqrt(uint256 t) view returns(uint256 s)
func (_Crypto *CryptoSession) Sqrt(t *big.Int) (*big.Int, error) {
	return _Crypto.Contract.Sqrt(&_Crypto.CallOpts, t)
}

// Sqrt is a free data retrieval call binding the contract method 0x677342ce.
//
// Solidity: function sqrt(uint256 t) view returns(uint256 s)
func (_Crypto *CryptoCallerSession) Sqrt(t *big.Int) (*big.Int, error) {
	return _Crypto.Contract.Sqrt(&_Crypto.CallOpts, t)
}

// CryptoLibraryMetaData contains all meta data concerning the CryptoLibrary contract.
var CryptoLibraryMetaData = &bind.MetaData{
	ABI: "[]",
<<<<<<< Updated upstream
	Bin: "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220511b8a8d1adbf71b32c31175aeb81440e393da511896bde43b6ac1626d79991164736f6c634300080b0033",
=======
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220994791288a32cf328695c1966a31f9ac0bf430955880d1a217f5bfb523e4953b64736f6c634300080b0033",
>>>>>>> Stashed changes
}

// CryptoLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use CryptoLibraryMetaData.ABI instead.
var CryptoLibraryABI = CryptoLibraryMetaData.ABI

// CryptoLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CryptoLibraryMetaData.Bin instead.
var CryptoLibraryBin = CryptoLibraryMetaData.Bin

// DeployCryptoLibrary deploys a new Ethereum contract, binding an instance of CryptoLibrary to it.
func DeployCryptoLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *CryptoLibrary, error) {
	parsed, err := CryptoLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CryptoLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CryptoLibrary{CryptoLibraryCaller: CryptoLibraryCaller{contract: contract}, CryptoLibraryTransactor: CryptoLibraryTransactor{contract: contract}, CryptoLibraryFilterer: CryptoLibraryFilterer{contract: contract}}, nil
}

// CryptoLibrary is an auto generated Go binding around an Ethereum contract.
type CryptoLibrary struct {
	CryptoLibraryCaller     // Read-only binding to the contract
	CryptoLibraryTransactor // Write-only binding to the contract
	CryptoLibraryFilterer   // Log filterer for contract events
}

// CryptoLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type CryptoLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CryptoLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CryptoLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CryptoLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CryptoLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CryptoLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CryptoLibrarySession struct {
	Contract     *CryptoLibrary    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CryptoLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CryptoLibraryCallerSession struct {
	Contract *CryptoLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// CryptoLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CryptoLibraryTransactorSession struct {
	Contract     *CryptoLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// CryptoLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type CryptoLibraryRaw struct {
	Contract *CryptoLibrary // Generic contract binding to access the raw methods on
}

// CryptoLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CryptoLibraryCallerRaw struct {
	Contract *CryptoLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// CryptoLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CryptoLibraryTransactorRaw struct {
	Contract *CryptoLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCryptoLibrary creates a new instance of CryptoLibrary, bound to a specific deployed contract.
func NewCryptoLibrary(address common.Address, backend bind.ContractBackend) (*CryptoLibrary, error) {
	contract, err := bindCryptoLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CryptoLibrary{CryptoLibraryCaller: CryptoLibraryCaller{contract: contract}, CryptoLibraryTransactor: CryptoLibraryTransactor{contract: contract}, CryptoLibraryFilterer: CryptoLibraryFilterer{contract: contract}}, nil
}

// NewCryptoLibraryCaller creates a new read-only instance of CryptoLibrary, bound to a specific deployed contract.
func NewCryptoLibraryCaller(address common.Address, caller bind.ContractCaller) (*CryptoLibraryCaller, error) {
	contract, err := bindCryptoLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CryptoLibraryCaller{contract: contract}, nil
}

// NewCryptoLibraryTransactor creates a new write-only instance of CryptoLibrary, bound to a specific deployed contract.
func NewCryptoLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*CryptoLibraryTransactor, error) {
	contract, err := bindCryptoLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CryptoLibraryTransactor{contract: contract}, nil
}

// NewCryptoLibraryFilterer creates a new log filterer instance of CryptoLibrary, bound to a specific deployed contract.
func NewCryptoLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*CryptoLibraryFilterer, error) {
	contract, err := bindCryptoLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CryptoLibraryFilterer{contract: contract}, nil
}

// bindCryptoLibrary binds a generic wrapper to an already deployed contract.
func bindCryptoLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(CryptoLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CryptoLibrary *CryptoLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CryptoLibrary.Contract.CryptoLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CryptoLibrary *CryptoLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CryptoLibrary.Contract.CryptoLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CryptoLibrary *CryptoLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CryptoLibrary.Contract.CryptoLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CryptoLibrary *CryptoLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CryptoLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CryptoLibrary *CryptoLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CryptoLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CryptoLibrary *CryptoLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CryptoLibrary.Contract.contract.Transact(opts, method, params...)
}

// DSAuthMetaData contains all meta data concerning the DSAuth contract.
var DSAuthMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contractDSAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractDSAuthority\",\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
<<<<<<< Updated upstream
	Bin: "0x608060405234801561001057600080fd5b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9460405160405180910390a2610804806100a46000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806313af4035146100515780637a9e5e4b1461006d5780638da5cb5b14610089578063bf7e214f146100a7575b600080fd5b61006b6004803603810190610066919061053e565b6100c5565b005b610087600480360381019061008291906105a9565b6101db565b005b6100916102ee565b60405161009e91906105e5565b60405180910390f35b6100af610314565b6040516100bc919061065f565b60405180910390f35b6100f3336000357fffffffff0000000000000000000000000000000000000000000000000000000016610338565b610132576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610129906106d7565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9460405160405180910390a250565b610209336000357fffffffff0000000000000000000000000000000000000000000000000000000016610338565b610248576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023f906106d7565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada460405160405180910390a250565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60003073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561037757600190506104d5565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156103d657600190506104d5565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561043457600090506104d5565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b70096138430856040518463ffffffff1660e01b815260040161049193929190610732565b602060405180830381865afa1580156104ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d291906107a1565b90505b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061050b826104e0565b9050919050565b61051b81610500565b811461052657600080fd5b50565b60008135905061053881610512565b92915050565b600060208284031215610554576105536104db565b5b600061056284828501610529565b91505092915050565b600061057682610500565b9050919050565b6105868161056b565b811461059157600080fd5b50565b6000813590506105a38161057d565b92915050565b6000602082840312156105bf576105be6104db565b5b60006105cd84828501610594565b91505092915050565b6105df81610500565b82525050565b60006020820190506105fa60008301846105d6565b92915050565b6000819050919050565b600061062561062061061b846104e0565b610600565b6104e0565b9050919050565b60006106378261060a565b9050919050565b60006106498261062c565b9050919050565b6106598161063e565b82525050565b60006020820190506106746000830184610650565b92915050565b600082825260208201905092915050565b7f64732d617574682d756e617574686f72697a6564000000000000000000000000600082015250565b60006106c160148361067a565b91506106cc8261068b565b602082019050919050565b600060208201905081810360008301526106f0816106b4565b9050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61072c816106f7565b82525050565b600060608201905061074760008301866105d6565b61075460208301856105d6565b6107616040830184610723565b949350505050565b60008115159050919050565b61077e81610769565b811461078957600080fd5b50565b60008151905061079b81610775565b92915050565b6000602082840312156107b7576107b66104db565b5b60006107c58482850161078c565b9150509291505056fea2646970667358221220fa22129e414905b2f34b81515878148e369b7d24d8911a334a0ef8534312485264736f6c634300080b0033",
=======
	Bin: "0x608060405234801561001057600080fd5b50600180546001600160a01b031916339081179091556040517fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a26104cf8061005e6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806313af4035146100515780637a9e5e4b146100665780638da5cb5b14610079578063bf7e214f146100c2575b600080fd5b61006461005f366004610453565b6100e2565b005b610064610074366004610453565b6101ea565b6001546100999073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6000546100999073ffffffffffffffffffffffffffffffffffffffff1681565b610110336000357fffffffff00000000000000000000000000000000000000000000000000000000166102eb565b61017b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d617574682d756e617574686f72697a656400000000000000000000000060448201526064015b60405180910390fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a250565b610218336000357fffffffff00000000000000000000000000000000000000000000000000000000166102eb565b61027e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d617574682d756e617574686f72697a65640000000000000000000000006044820152606401610172565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316908117825560405190917f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada491a250565b600073ffffffffffffffffffffffffffffffffffffffff831630141561031357506001610428565b60015473ffffffffffffffffffffffffffffffffffffffff8481169116141561033e57506001610428565b60005473ffffffffffffffffffffffffffffffffffffffff1661036357506000610428565b6000546040517fb700961300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301523060248301527fffffffff00000000000000000000000000000000000000000000000000000000851660448301529091169063b700961390606401602060405180830381865afa158015610401573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104259190610477565b90505b92915050565b73ffffffffffffffffffffffffffffffffffffffff8116811461045057600080fd5b50565b60006020828403121561046557600080fd5b81356104708161042e565b9392505050565b60006020828403121561048957600080fd5b8151801515811461047057600080fdfea2646970667358221220e6b740c54933643aed9719c2904c55bac12ea676d7fceee3cbe040c871008ee364736f6c634300080b0033",
>>>>>>> Stashed changes
}

// DSAuthABI is the input ABI used to generate the binding from.
// Deprecated: Use DSAuthMetaData.ABI instead.
var DSAuthABI = DSAuthMetaData.ABI

// DSAuthBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DSAuthMetaData.Bin instead.
var DSAuthBin = DSAuthMetaData.Bin

// DeployDSAuth deploys a new Ethereum contract, binding an instance of DSAuth to it.
func DeployDSAuth(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *DSAuth, error) {
	parsed, err := DSAuthMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DSAuthBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DSAuth{DSAuthCaller: DSAuthCaller{contract: contract}, DSAuthTransactor: DSAuthTransactor{contract: contract}, DSAuthFilterer: DSAuthFilterer{contract: contract}}, nil
}

// DSAuth is an auto generated Go binding around an Ethereum contract.
type DSAuth struct {
	DSAuthCaller     // Read-only binding to the contract
	DSAuthTransactor // Write-only binding to the contract
	DSAuthFilterer   // Log filterer for contract events
}

// DSAuthCaller is an auto generated read-only Go binding around an Ethereum contract.
type DSAuthCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSAuthTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DSAuthTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSAuthFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DSAuthFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSAuthSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DSAuthSession struct {
	Contract     *DSAuth           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DSAuthCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DSAuthCallerSession struct {
	Contract *DSAuthCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// DSAuthTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DSAuthTransactorSession struct {
	Contract     *DSAuthTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DSAuthRaw is an auto generated low-level Go binding around an Ethereum contract.
type DSAuthRaw struct {
	Contract *DSAuth // Generic contract binding to access the raw methods on
}

// DSAuthCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DSAuthCallerRaw struct {
	Contract *DSAuthCaller // Generic read-only contract binding to access the raw methods on
}

// DSAuthTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DSAuthTransactorRaw struct {
	Contract *DSAuthTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDSAuth creates a new instance of DSAuth, bound to a specific deployed contract.
func NewDSAuth(address common.Address, backend bind.ContractBackend) (*DSAuth, error) {
	contract, err := bindDSAuth(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DSAuth{DSAuthCaller: DSAuthCaller{contract: contract}, DSAuthTransactor: DSAuthTransactor{contract: contract}, DSAuthFilterer: DSAuthFilterer{contract: contract}}, nil
}

// NewDSAuthCaller creates a new read-only instance of DSAuth, bound to a specific deployed contract.
func NewDSAuthCaller(address common.Address, caller bind.ContractCaller) (*DSAuthCaller, error) {
	contract, err := bindDSAuth(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DSAuthCaller{contract: contract}, nil
}

// NewDSAuthTransactor creates a new write-only instance of DSAuth, bound to a specific deployed contract.
func NewDSAuthTransactor(address common.Address, transactor bind.ContractTransactor) (*DSAuthTransactor, error) {
	contract, err := bindDSAuth(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DSAuthTransactor{contract: contract}, nil
}

// NewDSAuthFilterer creates a new log filterer instance of DSAuth, bound to a specific deployed contract.
func NewDSAuthFilterer(address common.Address, filterer bind.ContractFilterer) (*DSAuthFilterer, error) {
	contract, err := bindDSAuth(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DSAuthFilterer{contract: contract}, nil
}

// bindDSAuth binds a generic wrapper to an already deployed contract.
func bindDSAuth(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DSAuthABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DSAuth *DSAuthRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DSAuth.Contract.DSAuthCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DSAuth *DSAuthRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSAuth.Contract.DSAuthTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DSAuth *DSAuthRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DSAuth.Contract.DSAuthTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DSAuth *DSAuthCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DSAuth.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DSAuth *DSAuthTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSAuth.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DSAuth *DSAuthTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DSAuth.Contract.contract.Transact(opts, method, params...)
}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_DSAuth *DSAuthCaller) Authority(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DSAuth.contract.Call(opts, &out, "authority")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_DSAuth *DSAuthSession) Authority() (common.Address, error) {
	return _DSAuth.Contract.Authority(&_DSAuth.CallOpts)
}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_DSAuth *DSAuthCallerSession) Authority() (common.Address, error) {
	return _DSAuth.Contract.Authority(&_DSAuth.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_DSAuth *DSAuthCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DSAuth.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_DSAuth *DSAuthSession) Owner() (common.Address, error) {
	return _DSAuth.Contract.Owner(&_DSAuth.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_DSAuth *DSAuthCallerSession) Owner() (common.Address, error) {
	return _DSAuth.Contract.Owner(&_DSAuth.CallOpts)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_DSAuth *DSAuthTransactor) SetAuthority(opts *bind.TransactOpts, authority_ common.Address) (*types.Transaction, error) {
	return _DSAuth.contract.Transact(opts, "setAuthority", authority_)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_DSAuth *DSAuthSession) SetAuthority(authority_ common.Address) (*types.Transaction, error) {
	return _DSAuth.Contract.SetAuthority(&_DSAuth.TransactOpts, authority_)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_DSAuth *DSAuthTransactorSession) SetAuthority(authority_ common.Address) (*types.Transaction, error) {
	return _DSAuth.Contract.SetAuthority(&_DSAuth.TransactOpts, authority_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_DSAuth *DSAuthTransactor) SetOwner(opts *bind.TransactOpts, owner_ common.Address) (*types.Transaction, error) {
	return _DSAuth.contract.Transact(opts, "setOwner", owner_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_DSAuth *DSAuthSession) SetOwner(owner_ common.Address) (*types.Transaction, error) {
	return _DSAuth.Contract.SetOwner(&_DSAuth.TransactOpts, owner_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_DSAuth *DSAuthTransactorSession) SetOwner(owner_ common.Address) (*types.Transaction, error) {
	return _DSAuth.Contract.SetOwner(&_DSAuth.TransactOpts, owner_)
}

// DSAuthLogSetAuthorityIterator is returned from FilterLogSetAuthority and is used to iterate over the raw logs and unpacked data for LogSetAuthority events raised by the DSAuth contract.
type DSAuthLogSetAuthorityIterator struct {
	Event *DSAuthLogSetAuthority // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DSAuthLogSetAuthorityIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DSAuthLogSetAuthority)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DSAuthLogSetAuthority)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DSAuthLogSetAuthorityIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DSAuthLogSetAuthorityIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DSAuthLogSetAuthority represents a LogSetAuthority event raised by the DSAuth contract.
type DSAuthLogSetAuthority struct {
	Authority common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterLogSetAuthority is a free log retrieval operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_DSAuth *DSAuthFilterer) FilterLogSetAuthority(opts *bind.FilterOpts, authority []common.Address) (*DSAuthLogSetAuthorityIterator, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}

	logs, sub, err := _DSAuth.contract.FilterLogs(opts, "LogSetAuthority", authorityRule)
	if err != nil {
		return nil, err
	}
	return &DSAuthLogSetAuthorityIterator{contract: _DSAuth.contract, event: "LogSetAuthority", logs: logs, sub: sub}, nil
}

// WatchLogSetAuthority is a free log subscription operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_DSAuth *DSAuthFilterer) WatchLogSetAuthority(opts *bind.WatchOpts, sink chan<- *DSAuthLogSetAuthority, authority []common.Address) (event.Subscription, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}

	logs, sub, err := _DSAuth.contract.WatchLogs(opts, "LogSetAuthority", authorityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DSAuthLogSetAuthority)
				if err := _DSAuth.contract.UnpackLog(event, "LogSetAuthority", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogSetAuthority is a log parse operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_DSAuth *DSAuthFilterer) ParseLogSetAuthority(log types.Log) (*DSAuthLogSetAuthority, error) {
	event := new(DSAuthLogSetAuthority)
	if err := _DSAuth.contract.UnpackLog(event, "LogSetAuthority", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DSAuthLogSetOwnerIterator is returned from FilterLogSetOwner and is used to iterate over the raw logs and unpacked data for LogSetOwner events raised by the DSAuth contract.
type DSAuthLogSetOwnerIterator struct {
	Event *DSAuthLogSetOwner // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DSAuthLogSetOwnerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DSAuthLogSetOwner)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DSAuthLogSetOwner)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DSAuthLogSetOwnerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DSAuthLogSetOwnerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DSAuthLogSetOwner represents a LogSetOwner event raised by the DSAuth contract.
type DSAuthLogSetOwner struct {
	Owner common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogSetOwner is a free log retrieval operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_DSAuth *DSAuthFilterer) FilterLogSetOwner(opts *bind.FilterOpts, owner []common.Address) (*DSAuthLogSetOwnerIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _DSAuth.contract.FilterLogs(opts, "LogSetOwner", ownerRule)
	if err != nil {
		return nil, err
	}
	return &DSAuthLogSetOwnerIterator{contract: _DSAuth.contract, event: "LogSetOwner", logs: logs, sub: sub}, nil
}

// WatchLogSetOwner is a free log subscription operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_DSAuth *DSAuthFilterer) WatchLogSetOwner(opts *bind.WatchOpts, sink chan<- *DSAuthLogSetOwner, owner []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _DSAuth.contract.WatchLogs(opts, "LogSetOwner", ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DSAuthLogSetOwner)
				if err := _DSAuth.contract.UnpackLog(event, "LogSetOwner", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogSetOwner is a log parse operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_DSAuth *DSAuthFilterer) ParseLogSetOwner(log types.Log) (*DSAuthLogSetOwner, error) {
	event := new(DSAuthLogSetOwner)
	if err := _DSAuth.contract.UnpackLog(event, "LogSetOwner", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DSAuthEventsMetaData contains all meta data concerning the DSAuthEvents contract.
var DSAuthEventsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"}]",
<<<<<<< Updated upstream
	Bin: "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220cc6bcdd4a37931f938611f8cc710060dacfa089208ddb89aadd8939fa1de56bc64736f6c634300080b0033",
=======
	Bin: "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220407940d972592316e21ba27e12789f56a28a1e5932d32d1af641e71179a1654164736f6c634300080b0033",
>>>>>>> Stashed changes
}

// DSAuthEventsABI is the input ABI used to generate the binding from.
// Deprecated: Use DSAuthEventsMetaData.ABI instead.
var DSAuthEventsABI = DSAuthEventsMetaData.ABI

// DSAuthEventsBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DSAuthEventsMetaData.Bin instead.
var DSAuthEventsBin = DSAuthEventsMetaData.Bin

// DeployDSAuthEvents deploys a new Ethereum contract, binding an instance of DSAuthEvents to it.
func DeployDSAuthEvents(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *DSAuthEvents, error) {
	parsed, err := DSAuthEventsMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DSAuthEventsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DSAuthEvents{DSAuthEventsCaller: DSAuthEventsCaller{contract: contract}, DSAuthEventsTransactor: DSAuthEventsTransactor{contract: contract}, DSAuthEventsFilterer: DSAuthEventsFilterer{contract: contract}}, nil
}

// DSAuthEvents is an auto generated Go binding around an Ethereum contract.
type DSAuthEvents struct {
	DSAuthEventsCaller     // Read-only binding to the contract
	DSAuthEventsTransactor // Write-only binding to the contract
	DSAuthEventsFilterer   // Log filterer for contract events
}

// DSAuthEventsCaller is an auto generated read-only Go binding around an Ethereum contract.
type DSAuthEventsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSAuthEventsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DSAuthEventsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSAuthEventsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DSAuthEventsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSAuthEventsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DSAuthEventsSession struct {
	Contract     *DSAuthEvents     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DSAuthEventsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DSAuthEventsCallerSession struct {
	Contract *DSAuthEventsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// DSAuthEventsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DSAuthEventsTransactorSession struct {
	Contract     *DSAuthEventsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// DSAuthEventsRaw is an auto generated low-level Go binding around an Ethereum contract.
type DSAuthEventsRaw struct {
	Contract *DSAuthEvents // Generic contract binding to access the raw methods on
}

// DSAuthEventsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DSAuthEventsCallerRaw struct {
	Contract *DSAuthEventsCaller // Generic read-only contract binding to access the raw methods on
}

// DSAuthEventsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DSAuthEventsTransactorRaw struct {
	Contract *DSAuthEventsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDSAuthEvents creates a new instance of DSAuthEvents, bound to a specific deployed contract.
func NewDSAuthEvents(address common.Address, backend bind.ContractBackend) (*DSAuthEvents, error) {
	contract, err := bindDSAuthEvents(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DSAuthEvents{DSAuthEventsCaller: DSAuthEventsCaller{contract: contract}, DSAuthEventsTransactor: DSAuthEventsTransactor{contract: contract}, DSAuthEventsFilterer: DSAuthEventsFilterer{contract: contract}}, nil
}

// NewDSAuthEventsCaller creates a new read-only instance of DSAuthEvents, bound to a specific deployed contract.
func NewDSAuthEventsCaller(address common.Address, caller bind.ContractCaller) (*DSAuthEventsCaller, error) {
	contract, err := bindDSAuthEvents(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DSAuthEventsCaller{contract: contract}, nil
}

// NewDSAuthEventsTransactor creates a new write-only instance of DSAuthEvents, bound to a specific deployed contract.
func NewDSAuthEventsTransactor(address common.Address, transactor bind.ContractTransactor) (*DSAuthEventsTransactor, error) {
	contract, err := bindDSAuthEvents(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DSAuthEventsTransactor{contract: contract}, nil
}

// NewDSAuthEventsFilterer creates a new log filterer instance of DSAuthEvents, bound to a specific deployed contract.
func NewDSAuthEventsFilterer(address common.Address, filterer bind.ContractFilterer) (*DSAuthEventsFilterer, error) {
	contract, err := bindDSAuthEvents(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DSAuthEventsFilterer{contract: contract}, nil
}

// bindDSAuthEvents binds a generic wrapper to an already deployed contract.
func bindDSAuthEvents(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DSAuthEventsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DSAuthEvents *DSAuthEventsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DSAuthEvents.Contract.DSAuthEventsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DSAuthEvents *DSAuthEventsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSAuthEvents.Contract.DSAuthEventsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DSAuthEvents *DSAuthEventsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DSAuthEvents.Contract.DSAuthEventsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DSAuthEvents *DSAuthEventsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DSAuthEvents.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DSAuthEvents *DSAuthEventsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSAuthEvents.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DSAuthEvents *DSAuthEventsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DSAuthEvents.Contract.contract.Transact(opts, method, params...)
}

// DSAuthEventsLogSetAuthorityIterator is returned from FilterLogSetAuthority and is used to iterate over the raw logs and unpacked data for LogSetAuthority events raised by the DSAuthEvents contract.
type DSAuthEventsLogSetAuthorityIterator struct {
	Event *DSAuthEventsLogSetAuthority // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DSAuthEventsLogSetAuthorityIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DSAuthEventsLogSetAuthority)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DSAuthEventsLogSetAuthority)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DSAuthEventsLogSetAuthorityIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DSAuthEventsLogSetAuthorityIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DSAuthEventsLogSetAuthority represents a LogSetAuthority event raised by the DSAuthEvents contract.
type DSAuthEventsLogSetAuthority struct {
	Authority common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterLogSetAuthority is a free log retrieval operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_DSAuthEvents *DSAuthEventsFilterer) FilterLogSetAuthority(opts *bind.FilterOpts, authority []common.Address) (*DSAuthEventsLogSetAuthorityIterator, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}

	logs, sub, err := _DSAuthEvents.contract.FilterLogs(opts, "LogSetAuthority", authorityRule)
	if err != nil {
		return nil, err
	}
	return &DSAuthEventsLogSetAuthorityIterator{contract: _DSAuthEvents.contract, event: "LogSetAuthority", logs: logs, sub: sub}, nil
}

// WatchLogSetAuthority is a free log subscription operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_DSAuthEvents *DSAuthEventsFilterer) WatchLogSetAuthority(opts *bind.WatchOpts, sink chan<- *DSAuthEventsLogSetAuthority, authority []common.Address) (event.Subscription, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}

	logs, sub, err := _DSAuthEvents.contract.WatchLogs(opts, "LogSetAuthority", authorityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DSAuthEventsLogSetAuthority)
				if err := _DSAuthEvents.contract.UnpackLog(event, "LogSetAuthority", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogSetAuthority is a log parse operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_DSAuthEvents *DSAuthEventsFilterer) ParseLogSetAuthority(log types.Log) (*DSAuthEventsLogSetAuthority, error) {
	event := new(DSAuthEventsLogSetAuthority)
	if err := _DSAuthEvents.contract.UnpackLog(event, "LogSetAuthority", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DSAuthEventsLogSetOwnerIterator is returned from FilterLogSetOwner and is used to iterate over the raw logs and unpacked data for LogSetOwner events raised by the DSAuthEvents contract.
type DSAuthEventsLogSetOwnerIterator struct {
	Event *DSAuthEventsLogSetOwner // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DSAuthEventsLogSetOwnerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DSAuthEventsLogSetOwner)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DSAuthEventsLogSetOwner)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DSAuthEventsLogSetOwnerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DSAuthEventsLogSetOwnerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DSAuthEventsLogSetOwner represents a LogSetOwner event raised by the DSAuthEvents contract.
type DSAuthEventsLogSetOwner struct {
	Owner common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogSetOwner is a free log retrieval operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_DSAuthEvents *DSAuthEventsFilterer) FilterLogSetOwner(opts *bind.FilterOpts, owner []common.Address) (*DSAuthEventsLogSetOwnerIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _DSAuthEvents.contract.FilterLogs(opts, "LogSetOwner", ownerRule)
	if err != nil {
		return nil, err
	}
	return &DSAuthEventsLogSetOwnerIterator{contract: _DSAuthEvents.contract, event: "LogSetOwner", logs: logs, sub: sub}, nil
}

// WatchLogSetOwner is a free log subscription operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_DSAuthEvents *DSAuthEventsFilterer) WatchLogSetOwner(opts *bind.WatchOpts, sink chan<- *DSAuthEventsLogSetOwner, owner []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _DSAuthEvents.contract.WatchLogs(opts, "LogSetOwner", ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DSAuthEventsLogSetOwner)
				if err := _DSAuthEvents.contract.UnpackLog(event, "LogSetOwner", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogSetOwner is a log parse operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_DSAuthEvents *DSAuthEventsFilterer) ParseLogSetOwner(log types.Log) (*DSAuthEventsLogSetOwner, error) {
	event := new(DSAuthEventsLogSetOwner)
	if err := _DSAuthEvents.contract.UnpackLog(event, "LogSetOwner", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DSAuthorityMetaData contains all meta data concerning the DSAuthority contract.
var DSAuthorityMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"}],\"name\":\"canCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// DSAuthorityABI is the input ABI used to generate the binding from.
// Deprecated: Use DSAuthorityMetaData.ABI instead.
var DSAuthorityABI = DSAuthorityMetaData.ABI

// DSAuthority is an auto generated Go binding around an Ethereum contract.
type DSAuthority struct {
	DSAuthorityCaller     // Read-only binding to the contract
	DSAuthorityTransactor // Write-only binding to the contract
	DSAuthorityFilterer   // Log filterer for contract events
}

// DSAuthorityCaller is an auto generated read-only Go binding around an Ethereum contract.
type DSAuthorityCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSAuthorityTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DSAuthorityTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSAuthorityFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DSAuthorityFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSAuthoritySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DSAuthoritySession struct {
	Contract     *DSAuthority      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DSAuthorityCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DSAuthorityCallerSession struct {
	Contract *DSAuthorityCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// DSAuthorityTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DSAuthorityTransactorSession struct {
	Contract     *DSAuthorityTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// DSAuthorityRaw is an auto generated low-level Go binding around an Ethereum contract.
type DSAuthorityRaw struct {
	Contract *DSAuthority // Generic contract binding to access the raw methods on
}

// DSAuthorityCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DSAuthorityCallerRaw struct {
	Contract *DSAuthorityCaller // Generic read-only contract binding to access the raw methods on
}

// DSAuthorityTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DSAuthorityTransactorRaw struct {
	Contract *DSAuthorityTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDSAuthority creates a new instance of DSAuthority, bound to a specific deployed contract.
func NewDSAuthority(address common.Address, backend bind.ContractBackend) (*DSAuthority, error) {
	contract, err := bindDSAuthority(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DSAuthority{DSAuthorityCaller: DSAuthorityCaller{contract: contract}, DSAuthorityTransactor: DSAuthorityTransactor{contract: contract}, DSAuthorityFilterer: DSAuthorityFilterer{contract: contract}}, nil
}

// NewDSAuthorityCaller creates a new read-only instance of DSAuthority, bound to a specific deployed contract.
func NewDSAuthorityCaller(address common.Address, caller bind.ContractCaller) (*DSAuthorityCaller, error) {
	contract, err := bindDSAuthority(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DSAuthorityCaller{contract: contract}, nil
}

// NewDSAuthorityTransactor creates a new write-only instance of DSAuthority, bound to a specific deployed contract.
func NewDSAuthorityTransactor(address common.Address, transactor bind.ContractTransactor) (*DSAuthorityTransactor, error) {
	contract, err := bindDSAuthority(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DSAuthorityTransactor{contract: contract}, nil
}

// NewDSAuthorityFilterer creates a new log filterer instance of DSAuthority, bound to a specific deployed contract.
func NewDSAuthorityFilterer(address common.Address, filterer bind.ContractFilterer) (*DSAuthorityFilterer, error) {
	contract, err := bindDSAuthority(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DSAuthorityFilterer{contract: contract}, nil
}

// bindDSAuthority binds a generic wrapper to an already deployed contract.
func bindDSAuthority(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DSAuthorityABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DSAuthority *DSAuthorityRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DSAuthority.Contract.DSAuthorityCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DSAuthority *DSAuthorityRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSAuthority.Contract.DSAuthorityTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DSAuthority *DSAuthorityRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DSAuthority.Contract.DSAuthorityTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DSAuthority *DSAuthorityCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DSAuthority.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DSAuthority *DSAuthorityTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSAuthority.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DSAuthority *DSAuthorityTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DSAuthority.Contract.contract.Transact(opts, method, params...)
}

// CanCall is a free data retrieval call binding the contract method 0xb7009613.
//
// Solidity: function canCall(address src, address dst, bytes4 sig) view returns(bool)
func (_DSAuthority *DSAuthorityCaller) CanCall(opts *bind.CallOpts, src common.Address, dst common.Address, sig [4]byte) (bool, error) {
	var out []interface{}
	err := _DSAuthority.contract.Call(opts, &out, "canCall", src, dst, sig)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanCall is a free data retrieval call binding the contract method 0xb7009613.
//
// Solidity: function canCall(address src, address dst, bytes4 sig) view returns(bool)
func (_DSAuthority *DSAuthoritySession) CanCall(src common.Address, dst common.Address, sig [4]byte) (bool, error) {
	return _DSAuthority.Contract.CanCall(&_DSAuthority.CallOpts, src, dst, sig)
}

// CanCall is a free data retrieval call binding the contract method 0xb7009613.
//
// Solidity: function canCall(address src, address dst, bytes4 sig) view returns(bool)
func (_DSAuthority *DSAuthorityCallerSession) CanCall(src common.Address, dst common.Address, sig [4]byte) (bool, error) {
	return _DSAuthority.Contract.CanCall(&_DSAuthority.CallOpts, src, dst, sig)
}

// DSMathMetaData contains all meta data concerning the DSMath contract.
var DSMathMetaData = &bind.MetaData{
	ABI: "[]",
<<<<<<< Updated upstream
	Bin: "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212208222e5e713910c47f36bf7e4baca4b67ce2225a2c3ab6751ce5741a91738b6b964736f6c634300080b0033",
=======
	Bin: "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220b803c6baec794a96a4f824b900744c27902ef99dbd084dd5d646340f9f03312964736f6c634300080b0033",
>>>>>>> Stashed changes
}

// DSMathABI is the input ABI used to generate the binding from.
// Deprecated: Use DSMathMetaData.ABI instead.
var DSMathABI = DSMathMetaData.ABI

// DSMathBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DSMathMetaData.Bin instead.
var DSMathBin = DSMathMetaData.Bin

// DeployDSMath deploys a new Ethereum contract, binding an instance of DSMath to it.
func DeployDSMath(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *DSMath, error) {
	parsed, err := DSMathMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DSMathBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DSMath{DSMathCaller: DSMathCaller{contract: contract}, DSMathTransactor: DSMathTransactor{contract: contract}, DSMathFilterer: DSMathFilterer{contract: contract}}, nil
}

// DSMath is an auto generated Go binding around an Ethereum contract.
type DSMath struct {
	DSMathCaller     // Read-only binding to the contract
	DSMathTransactor // Write-only binding to the contract
	DSMathFilterer   // Log filterer for contract events
}

// DSMathCaller is an auto generated read-only Go binding around an Ethereum contract.
type DSMathCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSMathTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DSMathTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSMathFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DSMathFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSMathSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DSMathSession struct {
	Contract     *DSMath           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DSMathCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DSMathCallerSession struct {
	Contract *DSMathCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// DSMathTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DSMathTransactorSession struct {
	Contract     *DSMathTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DSMathRaw is an auto generated low-level Go binding around an Ethereum contract.
type DSMathRaw struct {
	Contract *DSMath // Generic contract binding to access the raw methods on
}

// DSMathCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DSMathCallerRaw struct {
	Contract *DSMathCaller // Generic read-only contract binding to access the raw methods on
}

// DSMathTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DSMathTransactorRaw struct {
	Contract *DSMathTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDSMath creates a new instance of DSMath, bound to a specific deployed contract.
func NewDSMath(address common.Address, backend bind.ContractBackend) (*DSMath, error) {
	contract, err := bindDSMath(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DSMath{DSMathCaller: DSMathCaller{contract: contract}, DSMathTransactor: DSMathTransactor{contract: contract}, DSMathFilterer: DSMathFilterer{contract: contract}}, nil
}

// NewDSMathCaller creates a new read-only instance of DSMath, bound to a specific deployed contract.
func NewDSMathCaller(address common.Address, caller bind.ContractCaller) (*DSMathCaller, error) {
	contract, err := bindDSMath(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DSMathCaller{contract: contract}, nil
}

// NewDSMathTransactor creates a new write-only instance of DSMath, bound to a specific deployed contract.
func NewDSMathTransactor(address common.Address, transactor bind.ContractTransactor) (*DSMathTransactor, error) {
	contract, err := bindDSMath(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DSMathTransactor{contract: contract}, nil
}

// NewDSMathFilterer creates a new log filterer instance of DSMath, bound to a specific deployed contract.
func NewDSMathFilterer(address common.Address, filterer bind.ContractFilterer) (*DSMathFilterer, error) {
	contract, err := bindDSMath(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DSMathFilterer{contract: contract}, nil
}

// bindDSMath binds a generic wrapper to an already deployed contract.
func bindDSMath(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DSMathABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DSMath *DSMathRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DSMath.Contract.DSMathCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DSMath *DSMathRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSMath.Contract.DSMathTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DSMath *DSMathRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DSMath.Contract.DSMathTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DSMath *DSMathCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DSMath.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DSMath *DSMathTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSMath.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DSMath *DSMathTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DSMath.Contract.contract.Transact(opts, method, params...)
}

// DSNoteMetaData contains all meta data concerning the DSNote contract.
var DSNoteMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"foo\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"bar\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"fax\",\"type\":\"bytes\"}],\"name\":\"LogNote\",\"type\":\"event\"}]",
<<<<<<< Updated upstream
	Bin: "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220ca39f4b04f0882c988cce06ab535060f1b8cb73f5db5302cf4d54c34966b6d5364736f6c634300080b0033",
=======
	Bin: "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212208036a0760b5f2efb195bc3110e8886dfc6cc80895b4dd8754e971668e08f396f64736f6c634300080b0033",
>>>>>>> Stashed changes
}

// DSNoteABI is the input ABI used to generate the binding from.
// Deprecated: Use DSNoteMetaData.ABI instead.
var DSNoteABI = DSNoteMetaData.ABI

// DSNoteBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DSNoteMetaData.Bin instead.
var DSNoteBin = DSNoteMetaData.Bin

// DeployDSNote deploys a new Ethereum contract, binding an instance of DSNote to it.
func DeployDSNote(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *DSNote, error) {
	parsed, err := DSNoteMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DSNoteBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DSNote{DSNoteCaller: DSNoteCaller{contract: contract}, DSNoteTransactor: DSNoteTransactor{contract: contract}, DSNoteFilterer: DSNoteFilterer{contract: contract}}, nil
}

// DSNote is an auto generated Go binding around an Ethereum contract.
type DSNote struct {
	DSNoteCaller     // Read-only binding to the contract
	DSNoteTransactor // Write-only binding to the contract
	DSNoteFilterer   // Log filterer for contract events
}

// DSNoteCaller is an auto generated read-only Go binding around an Ethereum contract.
type DSNoteCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSNoteTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DSNoteTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSNoteFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DSNoteFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSNoteSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DSNoteSession struct {
	Contract     *DSNote           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DSNoteCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DSNoteCallerSession struct {
	Contract *DSNoteCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// DSNoteTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DSNoteTransactorSession struct {
	Contract     *DSNoteTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DSNoteRaw is an auto generated low-level Go binding around an Ethereum contract.
type DSNoteRaw struct {
	Contract *DSNote // Generic contract binding to access the raw methods on
}

// DSNoteCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DSNoteCallerRaw struct {
	Contract *DSNoteCaller // Generic read-only contract binding to access the raw methods on
}

// DSNoteTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DSNoteTransactorRaw struct {
	Contract *DSNoteTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDSNote creates a new instance of DSNote, bound to a specific deployed contract.
func NewDSNote(address common.Address, backend bind.ContractBackend) (*DSNote, error) {
	contract, err := bindDSNote(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DSNote{DSNoteCaller: DSNoteCaller{contract: contract}, DSNoteTransactor: DSNoteTransactor{contract: contract}, DSNoteFilterer: DSNoteFilterer{contract: contract}}, nil
}

// NewDSNoteCaller creates a new read-only instance of DSNote, bound to a specific deployed contract.
func NewDSNoteCaller(address common.Address, caller bind.ContractCaller) (*DSNoteCaller, error) {
	contract, err := bindDSNote(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DSNoteCaller{contract: contract}, nil
}

// NewDSNoteTransactor creates a new write-only instance of DSNote, bound to a specific deployed contract.
func NewDSNoteTransactor(address common.Address, transactor bind.ContractTransactor) (*DSNoteTransactor, error) {
	contract, err := bindDSNote(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DSNoteTransactor{contract: contract}, nil
}

// NewDSNoteFilterer creates a new log filterer instance of DSNote, bound to a specific deployed contract.
func NewDSNoteFilterer(address common.Address, filterer bind.ContractFilterer) (*DSNoteFilterer, error) {
	contract, err := bindDSNote(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DSNoteFilterer{contract: contract}, nil
}

// bindDSNote binds a generic wrapper to an already deployed contract.
func bindDSNote(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DSNoteABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DSNote *DSNoteRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DSNote.Contract.DSNoteCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DSNote *DSNoteRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSNote.Contract.DSNoteTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DSNote *DSNoteRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DSNote.Contract.DSNoteTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DSNote *DSNoteCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DSNote.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DSNote *DSNoteTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSNote.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DSNote *DSNoteTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DSNote.Contract.contract.Transact(opts, method, params...)
}

// DSStopMetaData contains all meta data concerning the DSStop contract.
var DSStopMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"foo\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"bar\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"fax\",\"type\":\"bytes\"}],\"name\":\"LogNote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contractDSAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractDSAuthority\",\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
<<<<<<< Updated upstream
	Bin: "0x608060405234801561001057600080fd5b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9460405160405180910390a2610b7a806100a46000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80637a9e5e4b1161005b5780637a9e5e4b146100c65780638da5cb5b146100e2578063be9a655514610100578063bf7e214f1461010a5761007d565b806307da68f51461008257806313af40351461008c57806375f12b21146100a8575b600080fd5b61008a610128565b005b6100a660048036038101906100a191906107e1565b61023e565b005b6100b0610354565b6040516100bd9190610829565b60405180910390f35b6100e060048036038101906100db9190610882565b610367565b005b6100ea61047a565b6040516100f791906108be565b60405180910390f35b6101086104a0565b005b6101126105b7565b60405161011f9190610938565b60405180910390f35b610156336000357fffffffff00000000000000000000000000000000000000000000000000000000166105db565b610195576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018c906109b0565b60405180910390fd5b60008060006004359250602435915034905060018060146101000a81548160ff02191690831515021790555081833373ffffffffffffffffffffffffffffffffffffffff166000357fffffffff00000000000000000000000000000000000000000000000000000000167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168460003660405161023193929190610a47565b60405180910390a4505050565b61026c336000357fffffffff00000000000000000000000000000000000000000000000000000000166105db565b6102ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a2906109b0565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9460405160405180910390a250565b600160149054906101000a900460ff1681565b610395336000357fffffffff00000000000000000000000000000000000000000000000000000000166105db565b6103d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103cb906109b0565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada460405160405180910390a250565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6104ce336000357fffffffff00000000000000000000000000000000000000000000000000000000166105db565b61050d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610504906109b0565b60405180910390fd5b6000806000600435925060243591503490506000600160146101000a81548160ff02191690831515021790555081833373ffffffffffffffffffffffffffffffffffffffff166000357fffffffff00000000000000000000000000000000000000000000000000000000167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916846000366040516105aa93929190610a47565b60405180910390a4505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60003073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561061a5760019050610778565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156106795760019050610778565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156106d75760009050610778565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b70096138430856040518463ffffffff1660e01b815260040161073493929190610ab4565b602060405180830381865afa158015610751573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107759190610b17565b90505b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107ae82610783565b9050919050565b6107be816107a3565b81146107c957600080fd5b50565b6000813590506107db816107b5565b92915050565b6000602082840312156107f7576107f661077e565b5b6000610805848285016107cc565b91505092915050565b60008115159050919050565b6108238161080e565b82525050565b600060208201905061083e600083018461081a565b92915050565b600061084f826107a3565b9050919050565b61085f81610844565b811461086a57600080fd5b50565b60008135905061087c81610856565b92915050565b6000602082840312156108985761089761077e565b5b60006108a68482850161086d565b91505092915050565b6108b8816107a3565b82525050565b60006020820190506108d360008301846108af565b92915050565b6000819050919050565b60006108fe6108f96108f484610783565b6108d9565b610783565b9050919050565b6000610910826108e3565b9050919050565b600061092282610905565b9050919050565b61093281610917565b82525050565b600060208201905061094d6000830184610929565b92915050565b600082825260208201905092915050565b7f64732d617574682d756e617574686f72697a6564000000000000000000000000600082015250565b600061099a601483610953565b91506109a582610964565b602082019050919050565b600060208201905081810360008301526109c98161098d565b9050919050565b6000819050919050565b6109e3816109d0565b82525050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000610a2683856109e9565b9350610a338385846109fa565b610a3c83610a09565b840190509392505050565b6000604082019050610a5c60008301866109da565b8181036020830152610a6f818486610a1a565b9050949350505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610aae81610a79565b82525050565b6000606082019050610ac960008301866108af565b610ad660208301856108af565b610ae36040830184610aa5565b949350505050565b610af48161080e565b8114610aff57600080fd5b50565b600081519050610b1181610aeb565b92915050565b600060208284031215610b2d57610b2c61077e565b5b6000610b3b84828501610b02565b9150509291505056fea26469706673582212203dbc4da9351a3292e8404a983949d7b670be42b49ce87eb49a2a24cef8779e1564736f6c634300080b0033",
=======
	Bin: "0x608060405234801561001057600080fd5b50600180546001600160a01b031916339081179091556040517fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a26107c68061005e6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80637a9e5e4b1161005b5780637a9e5e4b146100d95780638da5cb5b146100ec578063be9a655514610131578063bf7e214f1461013957600080fd5b806307da68f51461008257806313af40351461008c57806375f12b211461009f575b600080fd5b61008a610159565b005b61008a61009a3660046106f6565b610287565b6001546100c49074010000000000000000000000000000000000000000900460ff1681565b60405190151581526020015b60405180910390f35b61008a6100e73660046106f6565b61038a565b60015461010c9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100d0565b61008a61048b565b60005461010c9073ffffffffffffffffffffffffffffffffffffffff1681565b610187336000357fffffffff000000000000000000000000000000000000000000000000000000001661058e565b6101f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d617574682d756e617574686f72697a656400000000000000000000000060448201526064015b60405180910390fd5b60018054740100000000000000000000000000000000000000007fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff90911617905560405160043590602435903490829084903390600080357fffffffff00000000000000000000000000000000000000000000000000000000169161027a918791369061071a565b60405180910390a4505050565b6102b5336000357fffffffff000000000000000000000000000000000000000000000000000000001661058e565b61031b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d617574682d756e617574686f72697a656400000000000000000000000060448201526064016101e9565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a250565b6103b8336000357fffffffff000000000000000000000000000000000000000000000000000000001661058e565b61041e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d617574682d756e617574686f72697a656400000000000000000000000060448201526064016101e9565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316908117825560405190917f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada491a250565b6104b9336000357fffffffff000000000000000000000000000000000000000000000000000000001661058e565b61051f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d617574682d756e617574686f72697a656400000000000000000000000060448201526064016101e9565b600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16905560405160043590602435903490829084903390600080357fffffffff00000000000000000000000000000000000000000000000000000000169161027a918791369061071a565b600073ffffffffffffffffffffffffffffffffffffffff83163014156105b6575060016106cb565b60015473ffffffffffffffffffffffffffffffffffffffff848116911614156105e1575060016106cb565b60005473ffffffffffffffffffffffffffffffffffffffff16610606575060006106cb565b6000546040517fb700961300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301523060248301527fffffffff00000000000000000000000000000000000000000000000000000000851660448301529091169063b700961390606401602060405180830381865afa1580156106a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c8919061076e565b90505b92915050565b73ffffffffffffffffffffffffffffffffffffffff811681146106f357600080fd5b50565b60006020828403121561070857600080fd5b8135610713816106d1565b9392505050565b83815260406020820152816040820152818360608301376000818301606090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016010192915050565b60006020828403121561078057600080fd5b8151801515811461071357600080fdfea2646970667358221220dd464f14a08f605557d7517c0992f30818385f6fd631e6a8f852cb5949ba8e1064736f6c634300080b0033",
>>>>>>> Stashed changes
}

// DSStopABI is the input ABI used to generate the binding from.
// Deprecated: Use DSStopMetaData.ABI instead.
var DSStopABI = DSStopMetaData.ABI

// DSStopBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DSStopMetaData.Bin instead.
var DSStopBin = DSStopMetaData.Bin

// DeployDSStop deploys a new Ethereum contract, binding an instance of DSStop to it.
func DeployDSStop(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *DSStop, error) {
	parsed, err := DSStopMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DSStopBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DSStop{DSStopCaller: DSStopCaller{contract: contract}, DSStopTransactor: DSStopTransactor{contract: contract}, DSStopFilterer: DSStopFilterer{contract: contract}}, nil
}

// DSStop is an auto generated Go binding around an Ethereum contract.
type DSStop struct {
	DSStopCaller     // Read-only binding to the contract
	DSStopTransactor // Write-only binding to the contract
	DSStopFilterer   // Log filterer for contract events
}

// DSStopCaller is an auto generated read-only Go binding around an Ethereum contract.
type DSStopCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSStopTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DSStopTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSStopFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DSStopFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSStopSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DSStopSession struct {
	Contract     *DSStop           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DSStopCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DSStopCallerSession struct {
	Contract *DSStopCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// DSStopTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DSStopTransactorSession struct {
	Contract     *DSStopTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DSStopRaw is an auto generated low-level Go binding around an Ethereum contract.
type DSStopRaw struct {
	Contract *DSStop // Generic contract binding to access the raw methods on
}

// DSStopCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DSStopCallerRaw struct {
	Contract *DSStopCaller // Generic read-only contract binding to access the raw methods on
}

// DSStopTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DSStopTransactorRaw struct {
	Contract *DSStopTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDSStop creates a new instance of DSStop, bound to a specific deployed contract.
func NewDSStop(address common.Address, backend bind.ContractBackend) (*DSStop, error) {
	contract, err := bindDSStop(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DSStop{DSStopCaller: DSStopCaller{contract: contract}, DSStopTransactor: DSStopTransactor{contract: contract}, DSStopFilterer: DSStopFilterer{contract: contract}}, nil
}

// NewDSStopCaller creates a new read-only instance of DSStop, bound to a specific deployed contract.
func NewDSStopCaller(address common.Address, caller bind.ContractCaller) (*DSStopCaller, error) {
	contract, err := bindDSStop(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DSStopCaller{contract: contract}, nil
}

// NewDSStopTransactor creates a new write-only instance of DSStop, bound to a specific deployed contract.
func NewDSStopTransactor(address common.Address, transactor bind.ContractTransactor) (*DSStopTransactor, error) {
	contract, err := bindDSStop(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DSStopTransactor{contract: contract}, nil
}

// NewDSStopFilterer creates a new log filterer instance of DSStop, bound to a specific deployed contract.
func NewDSStopFilterer(address common.Address, filterer bind.ContractFilterer) (*DSStopFilterer, error) {
	contract, err := bindDSStop(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DSStopFilterer{contract: contract}, nil
}

// bindDSStop binds a generic wrapper to an already deployed contract.
func bindDSStop(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DSStopABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DSStop *DSStopRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DSStop.Contract.DSStopCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DSStop *DSStopRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSStop.Contract.DSStopTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DSStop *DSStopRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DSStop.Contract.DSStopTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DSStop *DSStopCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DSStop.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DSStop *DSStopTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSStop.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DSStop *DSStopTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DSStop.Contract.contract.Transact(opts, method, params...)
}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_DSStop *DSStopCaller) Authority(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DSStop.contract.Call(opts, &out, "authority")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_DSStop *DSStopSession) Authority() (common.Address, error) {
	return _DSStop.Contract.Authority(&_DSStop.CallOpts)
}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_DSStop *DSStopCallerSession) Authority() (common.Address, error) {
	return _DSStop.Contract.Authority(&_DSStop.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_DSStop *DSStopCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DSStop.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_DSStop *DSStopSession) Owner() (common.Address, error) {
	return _DSStop.Contract.Owner(&_DSStop.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_DSStop *DSStopCallerSession) Owner() (common.Address, error) {
	return _DSStop.Contract.Owner(&_DSStop.CallOpts)
}

// Stopped is a free data retrieval call binding the contract method 0x75f12b21.
//
// Solidity: function stopped() view returns(bool)
func (_DSStop *DSStopCaller) Stopped(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _DSStop.contract.Call(opts, &out, "stopped")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Stopped is a free data retrieval call binding the contract method 0x75f12b21.
//
// Solidity: function stopped() view returns(bool)
func (_DSStop *DSStopSession) Stopped() (bool, error) {
	return _DSStop.Contract.Stopped(&_DSStop.CallOpts)
}

// Stopped is a free data retrieval call binding the contract method 0x75f12b21.
//
// Solidity: function stopped() view returns(bool)
func (_DSStop *DSStopCallerSession) Stopped() (bool, error) {
	return _DSStop.Contract.Stopped(&_DSStop.CallOpts)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_DSStop *DSStopTransactor) SetAuthority(opts *bind.TransactOpts, authority_ common.Address) (*types.Transaction, error) {
	return _DSStop.contract.Transact(opts, "setAuthority", authority_)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_DSStop *DSStopSession) SetAuthority(authority_ common.Address) (*types.Transaction, error) {
	return _DSStop.Contract.SetAuthority(&_DSStop.TransactOpts, authority_)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_DSStop *DSStopTransactorSession) SetAuthority(authority_ common.Address) (*types.Transaction, error) {
	return _DSStop.Contract.SetAuthority(&_DSStop.TransactOpts, authority_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_DSStop *DSStopTransactor) SetOwner(opts *bind.TransactOpts, owner_ common.Address) (*types.Transaction, error) {
	return _DSStop.contract.Transact(opts, "setOwner", owner_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_DSStop *DSStopSession) SetOwner(owner_ common.Address) (*types.Transaction, error) {
	return _DSStop.Contract.SetOwner(&_DSStop.TransactOpts, owner_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_DSStop *DSStopTransactorSession) SetOwner(owner_ common.Address) (*types.Transaction, error) {
	return _DSStop.Contract.SetOwner(&_DSStop.TransactOpts, owner_)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_DSStop *DSStopTransactor) Start(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSStop.contract.Transact(opts, "start")
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_DSStop *DSStopSession) Start() (*types.Transaction, error) {
	return _DSStop.Contract.Start(&_DSStop.TransactOpts)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_DSStop *DSStopTransactorSession) Start() (*types.Transaction, error) {
	return _DSStop.Contract.Start(&_DSStop.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_DSStop *DSStopTransactor) Stop(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSStop.contract.Transact(opts, "stop")
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_DSStop *DSStopSession) Stop() (*types.Transaction, error) {
	return _DSStop.Contract.Stop(&_DSStop.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_DSStop *DSStopTransactorSession) Stop() (*types.Transaction, error) {
	return _DSStop.Contract.Stop(&_DSStop.TransactOpts)
}

// DSStopLogSetAuthorityIterator is returned from FilterLogSetAuthority and is used to iterate over the raw logs and unpacked data for LogSetAuthority events raised by the DSStop contract.
type DSStopLogSetAuthorityIterator struct {
	Event *DSStopLogSetAuthority // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DSStopLogSetAuthorityIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DSStopLogSetAuthority)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DSStopLogSetAuthority)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DSStopLogSetAuthorityIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DSStopLogSetAuthorityIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DSStopLogSetAuthority represents a LogSetAuthority event raised by the DSStop contract.
type DSStopLogSetAuthority struct {
	Authority common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterLogSetAuthority is a free log retrieval operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_DSStop *DSStopFilterer) FilterLogSetAuthority(opts *bind.FilterOpts, authority []common.Address) (*DSStopLogSetAuthorityIterator, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}

	logs, sub, err := _DSStop.contract.FilterLogs(opts, "LogSetAuthority", authorityRule)
	if err != nil {
		return nil, err
	}
	return &DSStopLogSetAuthorityIterator{contract: _DSStop.contract, event: "LogSetAuthority", logs: logs, sub: sub}, nil
}

// WatchLogSetAuthority is a free log subscription operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_DSStop *DSStopFilterer) WatchLogSetAuthority(opts *bind.WatchOpts, sink chan<- *DSStopLogSetAuthority, authority []common.Address) (event.Subscription, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}

	logs, sub, err := _DSStop.contract.WatchLogs(opts, "LogSetAuthority", authorityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DSStopLogSetAuthority)
				if err := _DSStop.contract.UnpackLog(event, "LogSetAuthority", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogSetAuthority is a log parse operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_DSStop *DSStopFilterer) ParseLogSetAuthority(log types.Log) (*DSStopLogSetAuthority, error) {
	event := new(DSStopLogSetAuthority)
	if err := _DSStop.contract.UnpackLog(event, "LogSetAuthority", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DSStopLogSetOwnerIterator is returned from FilterLogSetOwner and is used to iterate over the raw logs and unpacked data for LogSetOwner events raised by the DSStop contract.
type DSStopLogSetOwnerIterator struct {
	Event *DSStopLogSetOwner // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DSStopLogSetOwnerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DSStopLogSetOwner)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DSStopLogSetOwner)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DSStopLogSetOwnerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DSStopLogSetOwnerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DSStopLogSetOwner represents a LogSetOwner event raised by the DSStop contract.
type DSStopLogSetOwner struct {
	Owner common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogSetOwner is a free log retrieval operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_DSStop *DSStopFilterer) FilterLogSetOwner(opts *bind.FilterOpts, owner []common.Address) (*DSStopLogSetOwnerIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _DSStop.contract.FilterLogs(opts, "LogSetOwner", ownerRule)
	if err != nil {
		return nil, err
	}
	return &DSStopLogSetOwnerIterator{contract: _DSStop.contract, event: "LogSetOwner", logs: logs, sub: sub}, nil
}

// WatchLogSetOwner is a free log subscription operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_DSStop *DSStopFilterer) WatchLogSetOwner(opts *bind.WatchOpts, sink chan<- *DSStopLogSetOwner, owner []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _DSStop.contract.WatchLogs(opts, "LogSetOwner", ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DSStopLogSetOwner)
				if err := _DSStop.contract.UnpackLog(event, "LogSetOwner", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogSetOwner is a log parse operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_DSStop *DSStopFilterer) ParseLogSetOwner(log types.Log) (*DSStopLogSetOwner, error) {
	event := new(DSStopLogSetOwner)
	if err := _DSStop.contract.UnpackLog(event, "LogSetOwner", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DSTokenMetaData contains all meta data concerning the DSToken contract.
var DSTokenMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbol_\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Start\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Stop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contractDSAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"move\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"pull\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"push\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractDSAuthority\",\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"name_\",\"type\":\"bytes32\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
<<<<<<< Updated upstream
	Bin: "0x6080604052601260065560006007553480156200001b57600080fd5b506040516200229538038062002295833981810160405281019062000041919062000113565b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9460405160405180910390a2806005819055505062000145565b600080fd5b6000819050919050565b620000ed81620000d8565b8114620000f957600080fd5b50565b6000815190506200010d81620000e2565b92915050565b6000602082840312156200012c576200012b620000d3565b5b60006200013c84828501620000fc565b91505092915050565b61214080620001556000396000f3fe608060405234801561001057600080fd5b50600436106101a35760003560e01c80637a9e5e4b116100ee578063b753a98c11610097578063bf7e214f11610071578063bf7e214f1461042c578063daea85c51461044a578063dd62ed3e1461047a578063f2d5d56b146104aa576101a3565b8063b753a98c146103ea578063bb35783b14610406578063be9a655514610422576101a3565b80639dc29fac116100c85780639dc29fac14610382578063a0712d681461039e578063a9059cbb146103ba576101a3565b80637a9e5e4b1461032a5780638da5cb5b1461034657806395d89b4114610364576101a3565b8063313ce567116101505780635ac801fe1161012a5780635ac801fe146102c057806370a08231146102dc57806375f12b211461030c576101a3565b8063313ce5671461026a57806340c10f191461028857806342966c68146102a4576101a3565b806313af40351161018157806313af40351461020057806318160ddd1461021c57806323b872dd1461023a576101a3565b806306fdde03146101a857806307da68f5146101c6578063095ea7b3146101d0575b600080fd5b6101b06104c6565b6040516101bd9190611944565b60405180910390f35b6101ce6104cc565b005b6101ea60048036038101906101e591906119f8565b610581565b6040516101f79190611a53565b60405180910390f35b61021a60048036038101906102159190611a6e565b6106c3565b005b6102246107d9565b6040516102319190611aaa565b60405180910390f35b610254600480360381019061024f9190611ac5565b6107df565b6040516102619190611a53565b60405180910390f35b610272610cde565b60405161027f9190611aaa565b60405180910390f35b6102a2600480360381019061029d91906119f8565b610ce4565b005b6102be60048036038101906102b99190611b18565b610e91565b005b6102da60048036038101906102d59190611b71565b610e9e565b005b6102f660048036038101906102f19190611a6e565b610f15565b6040516103039190611aaa565b60405180910390f35b610314610f2d565b6040516103219190611a53565b60405180910390f35b610344600480360381019061033f9190611bdc565b610f40565b005b61034e611053565b60405161035b9190611c18565b60405180910390f35b61036c611079565b6040516103799190611944565b60405180910390f35b61039c600480360381019061039791906119f8565b61107f565b005b6103b860048036038101906103b39190611b18565b611551565b005b6103d460048036038101906103cf91906119f8565b61155e565b6040516103e19190611a53565b60405180910390f35b61040460048036038101906103ff91906119f8565b611573565b005b610420600480360381019061041b9190611ac5565b611583565b005b61042a611594565b005b61043461164a565b6040516104419190611c92565b60405180910390f35b610464600480360381019061045f9190611a6e565b61166e565b6040516104719190611a53565b60405180910390f35b610494600480360381019061048f9190611cad565b6116a1565b6040516104a19190611aaa565b60405180910390f35b6104c460048036038101906104bf91906119f8565b6116c6565b005b60075481565b6104fa336000357fffffffff00000000000000000000000000000000000000000000000000000000166116d6565b610539576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053090611d4a565b60405180910390fd5b60018060146101000a81548160ff0219169083151502179055507fbedf0f4abfe86d4ffad593d9607fe70e83ea706033d44d24b3b6283cf3fc4f6b60405160405180910390a1565b6000600160149054906101000a900460ff16156105d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ca90611db6565b60405180910390fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516106b19190611aaa565b60405180910390a36001905092915050565b6106f1336000357fffffffff00000000000000000000000000000000000000000000000000000000166116d6565b610730576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072790611d4a565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9460405160405180910390a250565b60025481565b6000600160149054906101000a900460ff1615610831576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082890611db6565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415801561090957507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b15610ad45781600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156109cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c490611e22565b60405180910390fd5b610a53600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611879565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b81600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610b56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4d90611e8e565b60405180910390fd5b610b9f600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611879565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c2b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836118d2565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610ccb9190611aaa565b60405180910390a3600190509392505050565b60065481565b610d12336000357fffffffff00000000000000000000000000000000000000000000000000000000166116d6565b610d51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4890611d4a565b60405180910390fd5b600160149054906101000a900460ff1615610da1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9890611db6565b60405180910390fd5b610dea600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054826118d2565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610e39600254826118d2565b6002819055508173ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688582604051610e859190611aaa565b60405180910390a25050565b610e9b338261107f565b50565b610ecc336000357fffffffff00000000000000000000000000000000000000000000000000000000166116d6565b610f0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0290611d4a565b60405180910390fd5b8060078190555050565b60036020528060005260406000206000915090505481565b600160149054906101000a900460ff1681565b610f6e336000357fffffffff00000000000000000000000000000000000000000000000000000000166116d6565b610fad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fa490611d4a565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada460405160405180910390a250565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b6110ad336000357fffffffff00000000000000000000000000000000000000000000000000000000166116d6565b6110ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e390611d4a565b60405180910390fd5b600160149054906101000a900460ff161561113c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113390611db6565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415801561121457507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b156113df5780600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156112d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112cf90611e22565b60405180910390fd5b61135e600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482611879565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611461576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145890611e8e565b60405180910390fd5b6114aa600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482611879565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506114f960025482611879565b6002819055508173ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5826040516115459190611aaa565b60405180910390a25050565b61155b3382610ce4565b50565b600061156b3384846107df565b905092915050565b61157e3383836107df565b505050565b61158e8383836107df565b50505050565b6115c2336000357fffffffff00000000000000000000000000000000000000000000000000000000166116d6565b611601576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f890611d4a565b60405180910390fd5b6000600160146101000a81548160ff0219169083151502179055507f1b55ba3aa851a46be3b365aee5b5c140edd620d578922f3e8466d2cbd96f954b60405160405180910390a1565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061169a827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610581565b9050919050565b6004602052816000526040600020602052806000526040600020600091509150505481565b6116d18233836107df565b505050565b60003073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156117155760019050611873565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156117745760019050611873565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156117d25760009050611873565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b70096138430856040518463ffffffff1660e01b815260040161182f93929190611ee9565b602060405180830381865afa15801561184c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118709190611f4c565b90505b92915050565b60008282846118889190611fa8565b91508111156118cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118c390612028565b60405180910390fd5b92915050565b60008282846118e19190612048565b9150811015611925576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191c906120ea565b60405180910390fd5b92915050565b6000819050919050565b61193e8161192b565b82525050565b60006020820190506119596000830184611935565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061198f82611964565b9050919050565b61199f81611984565b81146119aa57600080fd5b50565b6000813590506119bc81611996565b92915050565b6000819050919050565b6119d5816119c2565b81146119e057600080fd5b50565b6000813590506119f2816119cc565b92915050565b60008060408385031215611a0f57611a0e61195f565b5b6000611a1d858286016119ad565b9250506020611a2e858286016119e3565b9150509250929050565b60008115159050919050565b611a4d81611a38565b82525050565b6000602082019050611a686000830184611a44565b92915050565b600060208284031215611a8457611a8361195f565b5b6000611a92848285016119ad565b91505092915050565b611aa4816119c2565b82525050565b6000602082019050611abf6000830184611a9b565b92915050565b600080600060608486031215611ade57611add61195f565b5b6000611aec868287016119ad565b9350506020611afd868287016119ad565b9250506040611b0e868287016119e3565b9150509250925092565b600060208284031215611b2e57611b2d61195f565b5b6000611b3c848285016119e3565b91505092915050565b611b4e8161192b565b8114611b5957600080fd5b50565b600081359050611b6b81611b45565b92915050565b600060208284031215611b8757611b8661195f565b5b6000611b9584828501611b5c565b91505092915050565b6000611ba982611984565b9050919050565b611bb981611b9e565b8114611bc457600080fd5b50565b600081359050611bd681611bb0565b92915050565b600060208284031215611bf257611bf161195f565b5b6000611c0084828501611bc7565b91505092915050565b611c1281611984565b82525050565b6000602082019050611c2d6000830184611c09565b92915050565b6000819050919050565b6000611c58611c53611c4e84611964565b611c33565b611964565b9050919050565b6000611c6a82611c3d565b9050919050565b6000611c7c82611c5f565b9050919050565b611c8c81611c71565b82525050565b6000602082019050611ca76000830184611c83565b92915050565b60008060408385031215611cc457611cc361195f565b5b6000611cd2858286016119ad565b9250506020611ce3858286016119ad565b9150509250929050565b600082825260208201905092915050565b7f64732d617574682d756e617574686f72697a6564000000000000000000000000600082015250565b6000611d34601483611ced565b9150611d3f82611cfe565b602082019050919050565b60006020820190508181036000830152611d6381611d27565b9050919050565b7f64732d73746f702d69732d73746f707065640000000000000000000000000000600082015250565b6000611da0601283611ced565b9150611dab82611d6a565b602082019050919050565b60006020820190508181036000830152611dcf81611d93565b9050919050565b7f64732d746f6b656e2d696e73756666696369656e742d617070726f76616c0000600082015250565b6000611e0c601e83611ced565b9150611e1782611dd6565b602082019050919050565b60006020820190508181036000830152611e3b81611dff565b9050919050565b7f64732d746f6b656e2d696e73756666696369656e742d62616c616e6365000000600082015250565b6000611e78601d83611ced565b9150611e8382611e42565b602082019050919050565b60006020820190508181036000830152611ea781611e6b565b9050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611ee381611eae565b82525050565b6000606082019050611efe6000830186611c09565b611f0b6020830185611c09565b611f186040830184611eda565b949350505050565b611f2981611a38565b8114611f3457600080fd5b50565b600081519050611f4681611f20565b92915050565b600060208284031215611f6257611f6161195f565b5b6000611f7084828501611f37565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611fb3826119c2565b9150611fbe836119c2565b925082821015611fd157611fd0611f79565b5b828203905092915050565b7f64732d6d6174682d7375622d756e646572666c6f770000000000000000000000600082015250565b6000612012601583611ced565b915061201d82611fdc565b602082019050919050565b6000602082019050818103600083015261204181612005565b9050919050565b6000612053826119c2565b915061205e836119c2565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561209357612092611f79565b5b828201905092915050565b7f64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000600082015250565b60006120d4601483611ced565b91506120df8261209e565b602082019050919050565b60006020820190508181036000830152612103816120c7565b905091905056fea264697066735822122084cb0d75761bc98e3d83f4fc35bad9e5f86476af4e56df982e0cccb66ca632a664736f6c634300080b0033",
=======
	Bin: "0x60806040526012600655600060075534801561001a57600080fd5b5060405161178f38038061178f8339810160408190526100399161007f565b600180546001600160a01b031916339081179091556040517fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a2600555610098565b60006020828403121561009157600080fd5b5051919050565b6116e8806100a76000396000f3fe608060405234801561001057600080fd5b50600436106101a35760003560e01c80637a9e5e4b116100ee578063b753a98c11610097578063bf7e214f11610071578063bf7e214f1461036f578063daea85c51461038f578063dd62ed3e146103a2578063f2d5d56b146103cd57600080fd5b8063b753a98c14610341578063bb35783b14610354578063be9a65551461036757600080fd5b80639dc29fac116100c85780639dc29fac14610308578063a0712d681461031b578063a9059cbb1461032e57600080fd5b80637a9e5e4b146102a75780638da5cb5b146102ba57806395d89b41146102ff57600080fd5b8063313ce567116101505780635ac801fe1161012a5780635ac801fe1461024f57806370a082311461026257806375f12b211461028257600080fd5b8063313ce5671461022057806340c10f191461022957806342966c681461023c57600080fd5b806313af40351161018157806313af4035146101f157806318160ddd1461020457806323b872dd1461020d57600080fd5b806306fdde03146101a857806307da68f5146101c4578063095ea7b3146101ce575b600080fd5b6101b160075481565b6040519081526020015b60405180910390f35b6101cc6103e0565b005b6101e16101dc366004611556565b6104e3565b60405190151581526020016101bb565b6101cc6101ff366004611582565b6105dd565b6101b160025481565b6101e161021b36600461159f565b6106e0565b6101b160065481565b6101cc610237366004611556565b610a58565b6101cc61024a3660046115e0565b610c27565b6101cc61025d3660046115e0565b610c34565b6101b1610270366004611582565b60036020526000908152604090205481565b6001546101e19074010000000000000000000000000000000000000000900460ff1681565b6101cc6102b5366004611582565b610ccd565b6001546102da9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101bb565b6101b160055481565b6101cc610316366004611556565b610dce565b6101cc6103293660046115e0565b6111a6565b6101e161033c366004611556565b6111b0565b6101cc61034f366004611556565b6111c4565b6101cc61036236600461159f565b6111d4565b6101cc6111e5565b6000546102da9073ffffffffffffffffffffffffffffffffffffffff1681565b6101e161039d366004611582565b6112cc565b6101b16103b03660046115f9565b600460209081526000928352604080842090915290825290205481565b6101cc6103db366004611556565b6112f8565b61040e336000357fffffffff0000000000000000000000000000000000000000000000000000000016611303565b610479576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d617574682d756e617574686f72697a656400000000000000000000000060448201526064015b60405180910390fd5b600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790556040517fbedf0f4abfe86d4ffad593d9607fe70e83ea706033d44d24b3b6283cf3fc4f6b90600090a1565b60015460009074010000000000000000000000000000000000000000900460ff161561056b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f64732d73746f702d69732d73746f7070656400000000000000000000000000006044820152606401610470565b33600081815260046020908152604080832073ffffffffffffffffffffffffffffffffffffffff881680855290835292819020869055518581529192917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a35060015b92915050565b61060b336000357fffffffff0000000000000000000000000000000000000000000000000000000016611303565b610671576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d617574682d756e617574686f72697a65640000000000000000000000006044820152606401610470565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a250565b60015460009074010000000000000000000000000000000000000000900460ff1615610768576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f64732d73746f702d69732d73746f7070656400000000000000000000000000006044820152606401610470565b73ffffffffffffffffffffffffffffffffffffffff841633148015906107de575073ffffffffffffffffffffffffffffffffffffffff841660009081526004602090815260408083203384529091529020547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14155b156108ea5773ffffffffffffffffffffffffffffffffffffffff8416600090815260046020908152604080832033845290915290205482111561087d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f64732d746f6b656e2d696e73756666696369656e742d617070726f76616c00006044820152606401610470565b73ffffffffffffffffffffffffffffffffffffffff841660009081526004602090815260408083203384529091529020546108b89083611444565b73ffffffffffffffffffffffffffffffffffffffff851660009081526004602090815260408083203384529091529020555b73ffffffffffffffffffffffffffffffffffffffff8416600090815260036020526040902054821115610979576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f64732d746f6b656e2d696e73756666696369656e742d62616c616e63650000006044820152606401610470565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600360205260409020546109a99083611444565b73ffffffffffffffffffffffffffffffffffffffff80861660009081526003602052604080822093909355908516815220546109e590836114bc565b73ffffffffffffffffffffffffffffffffffffffff80851660008181526003602052604090819020939093559151908616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610a469086815260200190565b60405180910390a35060019392505050565b610a86336000357fffffffff0000000000000000000000000000000000000000000000000000000016611303565b610aec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d617574682d756e617574686f72697a65640000000000000000000000006044820152606401610470565b60015474010000000000000000000000000000000000000000900460ff1615610b71576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f64732d73746f702d69732d73746f7070656400000000000000000000000000006044820152606401610470565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260036020526040902054610ba190826114bc565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260036020526040902055600254610bd490826114bc565b60025560405181815273ffffffffffffffffffffffffffffffffffffffff8316907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885906020015b60405180910390a25050565b610c313382610dce565b50565b610c62336000357fffffffff0000000000000000000000000000000000000000000000000000000016611303565b610cc8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d617574682d756e617574686f72697a65640000000000000000000000006044820152606401610470565b600755565b610cfb336000357fffffffff0000000000000000000000000000000000000000000000000000000016611303565b610d61576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d617574682d756e617574686f72697a65640000000000000000000000006044820152606401610470565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316908117825560405190917f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada491a250565b610dfc336000357fffffffff0000000000000000000000000000000000000000000000000000000016611303565b610e62576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d617574682d756e617574686f72697a65640000000000000000000000006044820152606401610470565b60015474010000000000000000000000000000000000000000900460ff1615610ee7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f64732d73746f702d69732d73746f7070656400000000000000000000000000006044820152606401610470565b73ffffffffffffffffffffffffffffffffffffffff82163314801590610f5d575073ffffffffffffffffffffffffffffffffffffffff821660009081526004602090815260408083203384529091529020547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14155b156110695773ffffffffffffffffffffffffffffffffffffffff82166000908152600460209081526040808320338452909152902054811115610ffc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f64732d746f6b656e2d696e73756666696369656e742d617070726f76616c00006044820152606401610470565b73ffffffffffffffffffffffffffffffffffffffff821660009081526004602090815260408083203384529091529020546110379082611444565b73ffffffffffffffffffffffffffffffffffffffff831660009081526004602090815260408083203384529091529020555b73ffffffffffffffffffffffffffffffffffffffff82166000908152600360205260409020548111156110f8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f64732d746f6b656e2d696e73756666696369656e742d62616c616e63650000006044820152606401610470565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600360205260409020546111289082611444565b73ffffffffffffffffffffffffffffffffffffffff831660009081526003602052604090205560025461115b9082611444565b60025560405181815273ffffffffffffffffffffffffffffffffffffffff8316907fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca590602001610c1b565b610c313382610a58565b60006111bd3384846106e0565b9392505050565b6111cf3383836106e0565b505050565b6111df8383836106e0565b50505050565b611213336000357fffffffff0000000000000000000000000000000000000000000000000000000016611303565b611279576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d617574682d756e617574686f72697a65640000000000000000000000006044820152606401610470565b600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690556040517f1b55ba3aa851a46be3b365aee5b5c140edd620d578922f3e8466d2cbd96f954b90600090a1565b60006105d7827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6104e3565b6111cf8233836106e0565b600073ffffffffffffffffffffffffffffffffffffffff831630141561132b575060016105d7565b60015473ffffffffffffffffffffffffffffffffffffffff84811691161415611356575060016105d7565b60005473ffffffffffffffffffffffffffffffffffffffff1661137b575060006105d7565b6000546040517fb700961300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301523060248301527fffffffff00000000000000000000000000000000000000000000000000000000851660448301529091169063b700961390606401602060405180830381865afa158015611419573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143d9190611632565b90506105d7565b6000826114518382611683565b91508111156105d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f64732d6d6174682d7375622d756e646572666c6f7700000000000000000000006044820152606401610470565b6000826114c9838261169a565b91508110156105d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f770000000000000000000000006044820152606401610470565b73ffffffffffffffffffffffffffffffffffffffff81168114610c3157600080fd5b6000806040838503121561156957600080fd5b823561157481611534565b946020939093013593505050565b60006020828403121561159457600080fd5b81356111bd81611534565b6000806000606084860312156115b457600080fd5b83356115bf81611534565b925060208401356115cf81611534565b929592945050506040919091013590565b6000602082840312156115f257600080fd5b5035919050565b6000806040838503121561160c57600080fd5b823561161781611534565b9150602083013561162781611534565b809150509250929050565b60006020828403121561164457600080fd5b815180151581146111bd57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008282101561169557611695611654565b500390565b600082198211156116ad576116ad611654565b50019056fea26469706673582212202befba1208d7a3535c7812c32249ebf34439ed81de4d0e29b6982f9e3ac851d164736f6c634300080b0033",
>>>>>>> Stashed changes
}

// DSTokenABI is the input ABI used to generate the binding from.
// Deprecated: Use DSTokenMetaData.ABI instead.
var DSTokenABI = DSTokenMetaData.ABI

// DSTokenBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DSTokenMetaData.Bin instead.
var DSTokenBin = DSTokenMetaData.Bin

// DeployDSToken deploys a new Ethereum contract, binding an instance of DSToken to it.
func DeployDSToken(auth *bind.TransactOpts, backend bind.ContractBackend, symbol_ [32]byte) (common.Address, *types.Transaction, *DSToken, error) {
	parsed, err := DSTokenMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DSTokenBin), backend, symbol_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DSToken{DSTokenCaller: DSTokenCaller{contract: contract}, DSTokenTransactor: DSTokenTransactor{contract: contract}, DSTokenFilterer: DSTokenFilterer{contract: contract}}, nil
}

// DSToken is an auto generated Go binding around an Ethereum contract.
type DSToken struct {
	DSTokenCaller     // Read-only binding to the contract
	DSTokenTransactor // Write-only binding to the contract
	DSTokenFilterer   // Log filterer for contract events
}

// DSTokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type DSTokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSTokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DSTokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSTokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DSTokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DSTokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DSTokenSession struct {
	Contract     *DSToken          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DSTokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DSTokenCallerSession struct {
	Contract *DSTokenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// DSTokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DSTokenTransactorSession struct {
	Contract     *DSTokenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// DSTokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type DSTokenRaw struct {
	Contract *DSToken // Generic contract binding to access the raw methods on
}

// DSTokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DSTokenCallerRaw struct {
	Contract *DSTokenCaller // Generic read-only contract binding to access the raw methods on
}

// DSTokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DSTokenTransactorRaw struct {
	Contract *DSTokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDSToken creates a new instance of DSToken, bound to a specific deployed contract.
func NewDSToken(address common.Address, backend bind.ContractBackend) (*DSToken, error) {
	contract, err := bindDSToken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DSToken{DSTokenCaller: DSTokenCaller{contract: contract}, DSTokenTransactor: DSTokenTransactor{contract: contract}, DSTokenFilterer: DSTokenFilterer{contract: contract}}, nil
}

// NewDSTokenCaller creates a new read-only instance of DSToken, bound to a specific deployed contract.
func NewDSTokenCaller(address common.Address, caller bind.ContractCaller) (*DSTokenCaller, error) {
	contract, err := bindDSToken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DSTokenCaller{contract: contract}, nil
}

// NewDSTokenTransactor creates a new write-only instance of DSToken, bound to a specific deployed contract.
func NewDSTokenTransactor(address common.Address, transactor bind.ContractTransactor) (*DSTokenTransactor, error) {
	contract, err := bindDSToken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DSTokenTransactor{contract: contract}, nil
}

// NewDSTokenFilterer creates a new log filterer instance of DSToken, bound to a specific deployed contract.
func NewDSTokenFilterer(address common.Address, filterer bind.ContractFilterer) (*DSTokenFilterer, error) {
	contract, err := bindDSToken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DSTokenFilterer{contract: contract}, nil
}

// bindDSToken binds a generic wrapper to an already deployed contract.
func bindDSToken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DSTokenABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DSToken *DSTokenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DSToken.Contract.DSTokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DSToken *DSTokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSToken.Contract.DSTokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DSToken *DSTokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DSToken.Contract.DSTokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DSToken *DSTokenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DSToken.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DSToken *DSTokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSToken.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DSToken *DSTokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DSToken.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address , address ) view returns(uint256)
func (_DSToken *DSTokenCaller) Allowance(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _DSToken.contract.Call(opts, &out, "allowance", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address , address ) view returns(uint256)
func (_DSToken *DSTokenSession) Allowance(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _DSToken.Contract.Allowance(&_DSToken.CallOpts, arg0, arg1)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address , address ) view returns(uint256)
func (_DSToken *DSTokenCallerSession) Allowance(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _DSToken.Contract.Allowance(&_DSToken.CallOpts, arg0, arg1)
}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_DSToken *DSTokenCaller) Authority(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DSToken.contract.Call(opts, &out, "authority")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_DSToken *DSTokenSession) Authority() (common.Address, error) {
	return _DSToken.Contract.Authority(&_DSToken.CallOpts)
}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_DSToken *DSTokenCallerSession) Authority() (common.Address, error) {
	return _DSToken.Contract.Authority(&_DSToken.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address ) view returns(uint256)
func (_DSToken *DSTokenCaller) BalanceOf(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _DSToken.contract.Call(opts, &out, "balanceOf", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address ) view returns(uint256)
func (_DSToken *DSTokenSession) BalanceOf(arg0 common.Address) (*big.Int, error) {
	return _DSToken.Contract.BalanceOf(&_DSToken.CallOpts, arg0)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address ) view returns(uint256)
func (_DSToken *DSTokenCallerSession) BalanceOf(arg0 common.Address) (*big.Int, error) {
	return _DSToken.Contract.BalanceOf(&_DSToken.CallOpts, arg0)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint256)
func (_DSToken *DSTokenCaller) Decimals(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DSToken.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint256)
func (_DSToken *DSTokenSession) Decimals() (*big.Int, error) {
	return _DSToken.Contract.Decimals(&_DSToken.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint256)
func (_DSToken *DSTokenCallerSession) Decimals() (*big.Int, error) {
	return _DSToken.Contract.Decimals(&_DSToken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(bytes32)
func (_DSToken *DSTokenCaller) Name(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _DSToken.contract.Call(opts, &out, "name")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(bytes32)
func (_DSToken *DSTokenSession) Name() ([32]byte, error) {
	return _DSToken.Contract.Name(&_DSToken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(bytes32)
func (_DSToken *DSTokenCallerSession) Name() ([32]byte, error) {
	return _DSToken.Contract.Name(&_DSToken.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_DSToken *DSTokenCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DSToken.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_DSToken *DSTokenSession) Owner() (common.Address, error) {
	return _DSToken.Contract.Owner(&_DSToken.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_DSToken *DSTokenCallerSession) Owner() (common.Address, error) {
	return _DSToken.Contract.Owner(&_DSToken.CallOpts)
}

// Stopped is a free data retrieval call binding the contract method 0x75f12b21.
//
// Solidity: function stopped() view returns(bool)
func (_DSToken *DSTokenCaller) Stopped(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _DSToken.contract.Call(opts, &out, "stopped")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Stopped is a free data retrieval call binding the contract method 0x75f12b21.
//
// Solidity: function stopped() view returns(bool)
func (_DSToken *DSTokenSession) Stopped() (bool, error) {
	return _DSToken.Contract.Stopped(&_DSToken.CallOpts)
}

// Stopped is a free data retrieval call binding the contract method 0x75f12b21.
//
// Solidity: function stopped() view returns(bool)
func (_DSToken *DSTokenCallerSession) Stopped() (bool, error) {
	return _DSToken.Contract.Stopped(&_DSToken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(bytes32)
func (_DSToken *DSTokenCaller) Symbol(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _DSToken.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(bytes32)
func (_DSToken *DSTokenSession) Symbol() ([32]byte, error) {
	return _DSToken.Contract.Symbol(&_DSToken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(bytes32)
func (_DSToken *DSTokenCallerSession) Symbol() ([32]byte, error) {
	return _DSToken.Contract.Symbol(&_DSToken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_DSToken *DSTokenCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DSToken.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_DSToken *DSTokenSession) TotalSupply() (*big.Int, error) {
	return _DSToken.Contract.TotalSupply(&_DSToken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_DSToken *DSTokenCallerSession) TotalSupply() (*big.Int, error) {
	return _DSToken.Contract.TotalSupply(&_DSToken.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address guy, uint256 wad) returns(bool)
func (_DSToken *DSTokenTransactor) Approve(opts *bind.TransactOpts, guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.contract.Transact(opts, "approve", guy, wad)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address guy, uint256 wad) returns(bool)
func (_DSToken *DSTokenSession) Approve(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Approve(&_DSToken.TransactOpts, guy, wad)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address guy, uint256 wad) returns(bool)
func (_DSToken *DSTokenTransactorSession) Approve(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Approve(&_DSToken.TransactOpts, guy, wad)
}

// Approve0 is a paid mutator transaction binding the contract method 0xdaea85c5.
//
// Solidity: function approve(address guy) returns(bool)
func (_DSToken *DSTokenTransactor) Approve0(opts *bind.TransactOpts, guy common.Address) (*types.Transaction, error) {
	return _DSToken.contract.Transact(opts, "approve0", guy)
}

// Approve0 is a paid mutator transaction binding the contract method 0xdaea85c5.
//
// Solidity: function approve(address guy) returns(bool)
func (_DSToken *DSTokenSession) Approve0(guy common.Address) (*types.Transaction, error) {
	return _DSToken.Contract.Approve0(&_DSToken.TransactOpts, guy)
}

// Approve0 is a paid mutator transaction binding the contract method 0xdaea85c5.
//
// Solidity: function approve(address guy) returns(bool)
func (_DSToken *DSTokenTransactorSession) Approve0(guy common.Address) (*types.Transaction, error) {
	return _DSToken.Contract.Approve0(&_DSToken.TransactOpts, guy)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 wad) returns()
func (_DSToken *DSTokenTransactor) Burn(opts *bind.TransactOpts, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.contract.Transact(opts, "burn", wad)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 wad) returns()
func (_DSToken *DSTokenSession) Burn(wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Burn(&_DSToken.TransactOpts, wad)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 wad) returns()
func (_DSToken *DSTokenTransactorSession) Burn(wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Burn(&_DSToken.TransactOpts, wad)
}

// Burn0 is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address guy, uint256 wad) returns()
func (_DSToken *DSTokenTransactor) Burn0(opts *bind.TransactOpts, guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.contract.Transact(opts, "burn0", guy, wad)
}

// Burn0 is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address guy, uint256 wad) returns()
func (_DSToken *DSTokenSession) Burn0(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Burn0(&_DSToken.TransactOpts, guy, wad)
}

// Burn0 is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address guy, uint256 wad) returns()
func (_DSToken *DSTokenTransactorSession) Burn0(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Burn0(&_DSToken.TransactOpts, guy, wad)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address guy, uint256 wad) returns()
func (_DSToken *DSTokenTransactor) Mint(opts *bind.TransactOpts, guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.contract.Transact(opts, "mint", guy, wad)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address guy, uint256 wad) returns()
func (_DSToken *DSTokenSession) Mint(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Mint(&_DSToken.TransactOpts, guy, wad)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address guy, uint256 wad) returns()
func (_DSToken *DSTokenTransactorSession) Mint(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Mint(&_DSToken.TransactOpts, guy, wad)
}

// Mint0 is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 wad) returns()
func (_DSToken *DSTokenTransactor) Mint0(opts *bind.TransactOpts, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.contract.Transact(opts, "mint0", wad)
}

// Mint0 is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 wad) returns()
func (_DSToken *DSTokenSession) Mint0(wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Mint0(&_DSToken.TransactOpts, wad)
}

// Mint0 is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 wad) returns()
func (_DSToken *DSTokenTransactorSession) Mint0(wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Mint0(&_DSToken.TransactOpts, wad)
}

// Move is a paid mutator transaction binding the contract method 0xbb35783b.
//
// Solidity: function move(address src, address dst, uint256 wad) returns()
func (_DSToken *DSTokenTransactor) Move(opts *bind.TransactOpts, src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.contract.Transact(opts, "move", src, dst, wad)
}

// Move is a paid mutator transaction binding the contract method 0xbb35783b.
//
// Solidity: function move(address src, address dst, uint256 wad) returns()
func (_DSToken *DSTokenSession) Move(src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Move(&_DSToken.TransactOpts, src, dst, wad)
}

// Move is a paid mutator transaction binding the contract method 0xbb35783b.
//
// Solidity: function move(address src, address dst, uint256 wad) returns()
func (_DSToken *DSTokenTransactorSession) Move(src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Move(&_DSToken.TransactOpts, src, dst, wad)
}

// Pull is a paid mutator transaction binding the contract method 0xf2d5d56b.
//
// Solidity: function pull(address src, uint256 wad) returns()
func (_DSToken *DSTokenTransactor) Pull(opts *bind.TransactOpts, src common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.contract.Transact(opts, "pull", src, wad)
}

// Pull is a paid mutator transaction binding the contract method 0xf2d5d56b.
//
// Solidity: function pull(address src, uint256 wad) returns()
func (_DSToken *DSTokenSession) Pull(src common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Pull(&_DSToken.TransactOpts, src, wad)
}

// Pull is a paid mutator transaction binding the contract method 0xf2d5d56b.
//
// Solidity: function pull(address src, uint256 wad) returns()
func (_DSToken *DSTokenTransactorSession) Pull(src common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Pull(&_DSToken.TransactOpts, src, wad)
}

// Push is a paid mutator transaction binding the contract method 0xb753a98c.
//
// Solidity: function push(address dst, uint256 wad) returns()
func (_DSToken *DSTokenTransactor) Push(opts *bind.TransactOpts, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.contract.Transact(opts, "push", dst, wad)
}

// Push is a paid mutator transaction binding the contract method 0xb753a98c.
//
// Solidity: function push(address dst, uint256 wad) returns()
func (_DSToken *DSTokenSession) Push(dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Push(&_DSToken.TransactOpts, dst, wad)
}

// Push is a paid mutator transaction binding the contract method 0xb753a98c.
//
// Solidity: function push(address dst, uint256 wad) returns()
func (_DSToken *DSTokenTransactorSession) Push(dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Push(&_DSToken.TransactOpts, dst, wad)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_DSToken *DSTokenTransactor) SetAuthority(opts *bind.TransactOpts, authority_ common.Address) (*types.Transaction, error) {
	return _DSToken.contract.Transact(opts, "setAuthority", authority_)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_DSToken *DSTokenSession) SetAuthority(authority_ common.Address) (*types.Transaction, error) {
	return _DSToken.Contract.SetAuthority(&_DSToken.TransactOpts, authority_)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_DSToken *DSTokenTransactorSession) SetAuthority(authority_ common.Address) (*types.Transaction, error) {
	return _DSToken.Contract.SetAuthority(&_DSToken.TransactOpts, authority_)
}

// SetName is a paid mutator transaction binding the contract method 0x5ac801fe.
//
// Solidity: function setName(bytes32 name_) returns()
func (_DSToken *DSTokenTransactor) SetName(opts *bind.TransactOpts, name_ [32]byte) (*types.Transaction, error) {
	return _DSToken.contract.Transact(opts, "setName", name_)
}

// SetName is a paid mutator transaction binding the contract method 0x5ac801fe.
//
// Solidity: function setName(bytes32 name_) returns()
func (_DSToken *DSTokenSession) SetName(name_ [32]byte) (*types.Transaction, error) {
	return _DSToken.Contract.SetName(&_DSToken.TransactOpts, name_)
}

// SetName is a paid mutator transaction binding the contract method 0x5ac801fe.
//
// Solidity: function setName(bytes32 name_) returns()
func (_DSToken *DSTokenTransactorSession) SetName(name_ [32]byte) (*types.Transaction, error) {
	return _DSToken.Contract.SetName(&_DSToken.TransactOpts, name_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_DSToken *DSTokenTransactor) SetOwner(opts *bind.TransactOpts, owner_ common.Address) (*types.Transaction, error) {
	return _DSToken.contract.Transact(opts, "setOwner", owner_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_DSToken *DSTokenSession) SetOwner(owner_ common.Address) (*types.Transaction, error) {
	return _DSToken.Contract.SetOwner(&_DSToken.TransactOpts, owner_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_DSToken *DSTokenTransactorSession) SetOwner(owner_ common.Address) (*types.Transaction, error) {
	return _DSToken.Contract.SetOwner(&_DSToken.TransactOpts, owner_)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_DSToken *DSTokenTransactor) Start(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSToken.contract.Transact(opts, "start")
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_DSToken *DSTokenSession) Start() (*types.Transaction, error) {
	return _DSToken.Contract.Start(&_DSToken.TransactOpts)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_DSToken *DSTokenTransactorSession) Start() (*types.Transaction, error) {
	return _DSToken.Contract.Start(&_DSToken.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_DSToken *DSTokenTransactor) Stop(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DSToken.contract.Transact(opts, "stop")
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_DSToken *DSTokenSession) Stop() (*types.Transaction, error) {
	return _DSToken.Contract.Stop(&_DSToken.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_DSToken *DSTokenTransactorSession) Stop() (*types.Transaction, error) {
	return _DSToken.Contract.Stop(&_DSToken.TransactOpts)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 wad) returns(bool)
func (_DSToken *DSTokenTransactor) Transfer(opts *bind.TransactOpts, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.contract.Transact(opts, "transfer", dst, wad)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 wad) returns(bool)
func (_DSToken *DSTokenSession) Transfer(dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Transfer(&_DSToken.TransactOpts, dst, wad)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 wad) returns(bool)
func (_DSToken *DSTokenTransactorSession) Transfer(dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.Transfer(&_DSToken.TransactOpts, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_DSToken *DSTokenTransactor) TransferFrom(opts *bind.TransactOpts, src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.contract.Transact(opts, "transferFrom", src, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_DSToken *DSTokenSession) TransferFrom(src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.TransferFrom(&_DSToken.TransactOpts, src, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_DSToken *DSTokenTransactorSession) TransferFrom(src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _DSToken.Contract.TransferFrom(&_DSToken.TransactOpts, src, dst, wad)
}

// DSTokenApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the DSToken contract.
type DSTokenApprovalIterator struct {
	Event *DSTokenApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DSTokenApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DSTokenApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DSTokenApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DSTokenApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DSTokenApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DSTokenApproval represents a Approval event raised by the DSToken contract.
type DSTokenApproval struct {
	Src common.Address
	Guy common.Address
	Wad *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed src, address indexed guy, uint256 wad)
func (_DSToken *DSTokenFilterer) FilterApproval(opts *bind.FilterOpts, src []common.Address, guy []common.Address) (*DSTokenApprovalIterator, error) {

	var srcRule []interface{}
	for _, srcItem := range src {
		srcRule = append(srcRule, srcItem)
	}
	var guyRule []interface{}
	for _, guyItem := range guy {
		guyRule = append(guyRule, guyItem)
	}

	logs, sub, err := _DSToken.contract.FilterLogs(opts, "Approval", srcRule, guyRule)
	if err != nil {
		return nil, err
	}
	return &DSTokenApprovalIterator{contract: _DSToken.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed src, address indexed guy, uint256 wad)
func (_DSToken *DSTokenFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *DSTokenApproval, src []common.Address, guy []common.Address) (event.Subscription, error) {

	var srcRule []interface{}
	for _, srcItem := range src {
		srcRule = append(srcRule, srcItem)
	}
	var guyRule []interface{}
	for _, guyItem := range guy {
		guyRule = append(guyRule, guyItem)
	}

	logs, sub, err := _DSToken.contract.WatchLogs(opts, "Approval", srcRule, guyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DSTokenApproval)
				if err := _DSToken.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed src, address indexed guy, uint256 wad)
func (_DSToken *DSTokenFilterer) ParseApproval(log types.Log) (*DSTokenApproval, error) {
	event := new(DSTokenApproval)
	if err := _DSToken.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DSTokenBurnIterator is returned from FilterBurn and is used to iterate over the raw logs and unpacked data for Burn events raised by the DSToken contract.
type DSTokenBurnIterator struct {
	Event *DSTokenBurn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DSTokenBurnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DSTokenBurn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DSTokenBurn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DSTokenBurnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DSTokenBurnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DSTokenBurn represents a Burn event raised by the DSToken contract.
type DSTokenBurn struct {
	Guy common.Address
	Wad *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterBurn is a free log retrieval operation binding the contract event 0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5.
//
// Solidity: event Burn(address indexed guy, uint256 wad)
func (_DSToken *DSTokenFilterer) FilterBurn(opts *bind.FilterOpts, guy []common.Address) (*DSTokenBurnIterator, error) {

	var guyRule []interface{}
	for _, guyItem := range guy {
		guyRule = append(guyRule, guyItem)
	}

	logs, sub, err := _DSToken.contract.FilterLogs(opts, "Burn", guyRule)
	if err != nil {
		return nil, err
	}
	return &DSTokenBurnIterator{contract: _DSToken.contract, event: "Burn", logs: logs, sub: sub}, nil
}

// WatchBurn is a free log subscription operation binding the contract event 0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5.
//
// Solidity: event Burn(address indexed guy, uint256 wad)
func (_DSToken *DSTokenFilterer) WatchBurn(opts *bind.WatchOpts, sink chan<- *DSTokenBurn, guy []common.Address) (event.Subscription, error) {

	var guyRule []interface{}
	for _, guyItem := range guy {
		guyRule = append(guyRule, guyItem)
	}

	logs, sub, err := _DSToken.contract.WatchLogs(opts, "Burn", guyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DSTokenBurn)
				if err := _DSToken.contract.UnpackLog(event, "Burn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurn is a log parse operation binding the contract event 0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5.
//
// Solidity: event Burn(address indexed guy, uint256 wad)
func (_DSToken *DSTokenFilterer) ParseBurn(log types.Log) (*DSTokenBurn, error) {
	event := new(DSTokenBurn)
	if err := _DSToken.contract.UnpackLog(event, "Burn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DSTokenLogSetAuthorityIterator is returned from FilterLogSetAuthority and is used to iterate over the raw logs and unpacked data for LogSetAuthority events raised by the DSToken contract.
type DSTokenLogSetAuthorityIterator struct {
	Event *DSTokenLogSetAuthority // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DSTokenLogSetAuthorityIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DSTokenLogSetAuthority)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DSTokenLogSetAuthority)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DSTokenLogSetAuthorityIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DSTokenLogSetAuthorityIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DSTokenLogSetAuthority represents a LogSetAuthority event raised by the DSToken contract.
type DSTokenLogSetAuthority struct {
	Authority common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterLogSetAuthority is a free log retrieval operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_DSToken *DSTokenFilterer) FilterLogSetAuthority(opts *bind.FilterOpts, authority []common.Address) (*DSTokenLogSetAuthorityIterator, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}

	logs, sub, err := _DSToken.contract.FilterLogs(opts, "LogSetAuthority", authorityRule)
	if err != nil {
		return nil, err
	}
	return &DSTokenLogSetAuthorityIterator{contract: _DSToken.contract, event: "LogSetAuthority", logs: logs, sub: sub}, nil
}

// WatchLogSetAuthority is a free log subscription operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_DSToken *DSTokenFilterer) WatchLogSetAuthority(opts *bind.WatchOpts, sink chan<- *DSTokenLogSetAuthority, authority []common.Address) (event.Subscription, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}

	logs, sub, err := _DSToken.contract.WatchLogs(opts, "LogSetAuthority", authorityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DSTokenLogSetAuthority)
				if err := _DSToken.contract.UnpackLog(event, "LogSetAuthority", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogSetAuthority is a log parse operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_DSToken *DSTokenFilterer) ParseLogSetAuthority(log types.Log) (*DSTokenLogSetAuthority, error) {
	event := new(DSTokenLogSetAuthority)
	if err := _DSToken.contract.UnpackLog(event, "LogSetAuthority", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DSTokenLogSetOwnerIterator is returned from FilterLogSetOwner and is used to iterate over the raw logs and unpacked data for LogSetOwner events raised by the DSToken contract.
type DSTokenLogSetOwnerIterator struct {
	Event *DSTokenLogSetOwner // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DSTokenLogSetOwnerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DSTokenLogSetOwner)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DSTokenLogSetOwner)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DSTokenLogSetOwnerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DSTokenLogSetOwnerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DSTokenLogSetOwner represents a LogSetOwner event raised by the DSToken contract.
type DSTokenLogSetOwner struct {
	Owner common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogSetOwner is a free log retrieval operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_DSToken *DSTokenFilterer) FilterLogSetOwner(opts *bind.FilterOpts, owner []common.Address) (*DSTokenLogSetOwnerIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _DSToken.contract.FilterLogs(opts, "LogSetOwner", ownerRule)
	if err != nil {
		return nil, err
	}
	return &DSTokenLogSetOwnerIterator{contract: _DSToken.contract, event: "LogSetOwner", logs: logs, sub: sub}, nil
}

// WatchLogSetOwner is a free log subscription operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_DSToken *DSTokenFilterer) WatchLogSetOwner(opts *bind.WatchOpts, sink chan<- *DSTokenLogSetOwner, owner []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _DSToken.contract.WatchLogs(opts, "LogSetOwner", ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DSTokenLogSetOwner)
				if err := _DSToken.contract.UnpackLog(event, "LogSetOwner", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogSetOwner is a log parse operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_DSToken *DSTokenFilterer) ParseLogSetOwner(log types.Log) (*DSTokenLogSetOwner, error) {
	event := new(DSTokenLogSetOwner)
	if err := _DSToken.contract.UnpackLog(event, "LogSetOwner", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DSTokenMintIterator is returned from FilterMint and is used to iterate over the raw logs and unpacked data for Mint events raised by the DSToken contract.
type DSTokenMintIterator struct {
	Event *DSTokenMint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DSTokenMintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DSTokenMint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DSTokenMint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DSTokenMintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DSTokenMintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DSTokenMint represents a Mint event raised by the DSToken contract.
type DSTokenMint struct {
	Guy common.Address
	Wad *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterMint is a free log retrieval operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: event Mint(address indexed guy, uint256 wad)
func (_DSToken *DSTokenFilterer) FilterMint(opts *bind.FilterOpts, guy []common.Address) (*DSTokenMintIterator, error) {

	var guyRule []interface{}
	for _, guyItem := range guy {
		guyRule = append(guyRule, guyItem)
	}

	logs, sub, err := _DSToken.contract.FilterLogs(opts, "Mint", guyRule)
	if err != nil {
		return nil, err
	}
	return &DSTokenMintIterator{contract: _DSToken.contract, event: "Mint", logs: logs, sub: sub}, nil
}

// WatchMint is a free log subscription operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: event Mint(address indexed guy, uint256 wad)
func (_DSToken *DSTokenFilterer) WatchMint(opts *bind.WatchOpts, sink chan<- *DSTokenMint, guy []common.Address) (event.Subscription, error) {

	var guyRule []interface{}
	for _, guyItem := range guy {
		guyRule = append(guyRule, guyItem)
	}

	logs, sub, err := _DSToken.contract.WatchLogs(opts, "Mint", guyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DSTokenMint)
				if err := _DSToken.contract.UnpackLog(event, "Mint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMint is a log parse operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: event Mint(address indexed guy, uint256 wad)
func (_DSToken *DSTokenFilterer) ParseMint(log types.Log) (*DSTokenMint, error) {
	event := new(DSTokenMint)
	if err := _DSToken.contract.UnpackLog(event, "Mint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DSTokenStartIterator is returned from FilterStart and is used to iterate over the raw logs and unpacked data for Start events raised by the DSToken contract.
type DSTokenStartIterator struct {
	Event *DSTokenStart // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DSTokenStartIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DSTokenStart)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DSTokenStart)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DSTokenStartIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DSTokenStartIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DSTokenStart represents a Start event raised by the DSToken contract.
type DSTokenStart struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterStart is a free log retrieval operation binding the contract event 0x1b55ba3aa851a46be3b365aee5b5c140edd620d578922f3e8466d2cbd96f954b.
//
// Solidity: event Start()
func (_DSToken *DSTokenFilterer) FilterStart(opts *bind.FilterOpts) (*DSTokenStartIterator, error) {

	logs, sub, err := _DSToken.contract.FilterLogs(opts, "Start")
	if err != nil {
		return nil, err
	}
	return &DSTokenStartIterator{contract: _DSToken.contract, event: "Start", logs: logs, sub: sub}, nil
}

// WatchStart is a free log subscription operation binding the contract event 0x1b55ba3aa851a46be3b365aee5b5c140edd620d578922f3e8466d2cbd96f954b.
//
// Solidity: event Start()
func (_DSToken *DSTokenFilterer) WatchStart(opts *bind.WatchOpts, sink chan<- *DSTokenStart) (event.Subscription, error) {

	logs, sub, err := _DSToken.contract.WatchLogs(opts, "Start")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DSTokenStart)
				if err := _DSToken.contract.UnpackLog(event, "Start", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStart is a log parse operation binding the contract event 0x1b55ba3aa851a46be3b365aee5b5c140edd620d578922f3e8466d2cbd96f954b.
//
// Solidity: event Start()
func (_DSToken *DSTokenFilterer) ParseStart(log types.Log) (*DSTokenStart, error) {
	event := new(DSTokenStart)
	if err := _DSToken.contract.UnpackLog(event, "Start", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DSTokenStopIterator is returned from FilterStop and is used to iterate over the raw logs and unpacked data for Stop events raised by the DSToken contract.
type DSTokenStopIterator struct {
	Event *DSTokenStop // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DSTokenStopIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DSTokenStop)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DSTokenStop)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DSTokenStopIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DSTokenStopIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DSTokenStop represents a Stop event raised by the DSToken contract.
type DSTokenStop struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterStop is a free log retrieval operation binding the contract event 0xbedf0f4abfe86d4ffad593d9607fe70e83ea706033d44d24b3b6283cf3fc4f6b.
//
// Solidity: event Stop()
func (_DSToken *DSTokenFilterer) FilterStop(opts *bind.FilterOpts) (*DSTokenStopIterator, error) {

	logs, sub, err := _DSToken.contract.FilterLogs(opts, "Stop")
	if err != nil {
		return nil, err
	}
	return &DSTokenStopIterator{contract: _DSToken.contract, event: "Stop", logs: logs, sub: sub}, nil
}

// WatchStop is a free log subscription operation binding the contract event 0xbedf0f4abfe86d4ffad593d9607fe70e83ea706033d44d24b3b6283cf3fc4f6b.
//
// Solidity: event Stop()
func (_DSToken *DSTokenFilterer) WatchStop(opts *bind.WatchOpts, sink chan<- *DSTokenStop) (event.Subscription, error) {

	logs, sub, err := _DSToken.contract.WatchLogs(opts, "Stop")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DSTokenStop)
				if err := _DSToken.contract.UnpackLog(event, "Stop", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStop is a log parse operation binding the contract event 0xbedf0f4abfe86d4ffad593d9607fe70e83ea706033d44d24b3b6283cf3fc4f6b.
//
// Solidity: event Stop()
func (_DSToken *DSTokenFilterer) ParseStop(log types.Log) (*DSTokenStop, error) {
	event := new(DSTokenStop)
	if err := _DSToken.contract.UnpackLog(event, "Stop", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DSTokenTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the DSToken contract.
type DSTokenTransferIterator struct {
	Event *DSTokenTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DSTokenTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DSTokenTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DSTokenTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DSTokenTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DSTokenTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DSTokenTransfer represents a Transfer event raised by the DSToken contract.
type DSTokenTransfer struct {
	Src common.Address
	Dst common.Address
	Wad *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed src, address indexed dst, uint256 wad)
func (_DSToken *DSTokenFilterer) FilterTransfer(opts *bind.FilterOpts, src []common.Address, dst []common.Address) (*DSTokenTransferIterator, error) {

	var srcRule []interface{}
	for _, srcItem := range src {
		srcRule = append(srcRule, srcItem)
	}
	var dstRule []interface{}
	for _, dstItem := range dst {
		dstRule = append(dstRule, dstItem)
	}

	logs, sub, err := _DSToken.contract.FilterLogs(opts, "Transfer", srcRule, dstRule)
	if err != nil {
		return nil, err
	}
	return &DSTokenTransferIterator{contract: _DSToken.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed src, address indexed dst, uint256 wad)
func (_DSToken *DSTokenFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *DSTokenTransfer, src []common.Address, dst []common.Address) (event.Subscription, error) {

	var srcRule []interface{}
	for _, srcItem := range src {
		srcRule = append(srcRule, srcItem)
	}
	var dstRule []interface{}
	for _, dstItem := range dst {
		dstRule = append(dstRule, dstItem)
	}

	logs, sub, err := _DSToken.contract.WatchLogs(opts, "Transfer", srcRule, dstRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DSTokenTransfer)
				if err := _DSToken.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed src, address indexed dst, uint256 wad)
func (_DSToken *DSTokenFilterer) ParseTransfer(log types.Log) (*DSTokenTransfer, error) {
	event := new(DSTokenTransfer)
	if err := _DSToken.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DepositMetaData contains all meta data concerning the Deposit contract.
var DepositMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractRegistry\",\"name\":\"registry_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"key_share_G1\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"key_share_G1_correctness_proof\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"key_share_G2\",\"type\":\"uint256[4]\"}],\"name\":\"KeyShareSubmission\",\"type\":\"event\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"foo\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"bar\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"fax\",\"type\":\"bytes\"}],\"name\":\"LogNote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dkgStarts\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"registrationEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shareDistributionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disputeEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"keyShareSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mpkSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gpkjSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gpkjDisputeEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dkgComplete\",\"type\":\"uint256\"}],\"name\":\"RegistrationOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"encrypted_shares\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"}],\"name\":\"ShareDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share3\",\"type\":\"uint256\"}],\"name\":\"ValidatorMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"validatorCount\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"ethHeight\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"madHeight\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey3\",\"type\":\"uint256\"}],\"name\":\"ValidatorSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contractDSAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositID\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"directDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reloadRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractDSAuthority\",\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositID\",\"type\":\"uint256\"}],\"name\":\"setDepositID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
<<<<<<< Updated upstream
	Bin: "",
=======
	Bin: "0x60806040523480156200001157600080fd5b5060405162001b2c38038062001b2c8339810160408190526200003491620001b5565b600180546001600160a01b031916339081179091556040517fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a2600480546001600160a01b031916339081179091556200009290620000e6565b600580546001600160a01b0319166001600160a01b0383161790556000620000d77f1f4a8eb7cf654c75cb9376a8ca57eea8125f02544d28c8b83107dea51810f21290565b60019081015550620002119050565b6004546001600160a01b03163314806200010f57503360009081526002602052604090205460ff165b6200017a5760405162461bcd60e51b815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527037b934bd32b21037b832b930ba37b9399760791b606482015260840160405180910390fd5b6001600160a01b0381166000908152600260205260408120805460ff191660011790556003805491620001ad83620001e7565b919050555050565b600060208284031215620001c857600080fd5b81516001600160a01b0381168114620001e057600080fd5b9392505050565b60006000198214156200020a57634e487b7160e01b600052601160045260246000fd5b5060010190565b61190b80620002216000396000f3fe608060405234801561001057600080fd5b506004361061011b5760003560e01c8063b3117446116100b2578063da7f7eb711610081578063ec68426f11610066578063ec68426f146102bf578063fad8b32a146102d2578063ff50abdc146102e557600080fd5b8063da7f7eb714610299578063e348da13146102ac57600080fd5b8063b311744614610237578063b6b55f251461025e578063be9a655514610271578063bf7e214f1461027957600080fd5b806375f12b21116100ee57806375f12b211461016d5780637a9e5e4b146101925780638da5cb5b146101a5578063b02c43d0146101ea57600080fd5b806307da68f51461012057806313af40351461012a5780631476601d1461013d5780632f4f21e214610145575b600080fd5b61012861030c565b005b610128610138366004611662565b61043a565b61012861053d565b610158610153366004611686565b610795565b60405190151581526020015b60405180910390f35b6001546101589074010000000000000000000000000000000000000000900460ff1681565b6101286101a0366004611662565b610830565b6001546101c59073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610164565b6102296101f83660046116b2565b60009081527f1f4a8eb7cf654c75cb9376a8ca57eea8125f02544d28c8b83107dea51810f214602052604090205490565b604051908152602001610164565b7f1f4a8eb7cf654c75cb9376a8ca57eea8125f02544d28c8b83107dea51810f21354610229565b61015861026c3660046116b2565b610931565b6101286109c3565b6000546101c59073ffffffffffffffffffffffffffffffffffffffff1681565b6101286102a73660046116b2565b610ac6565b6101286102ba366004611662565b610bab565b6101586102cd3660046116cb565b610cd0565b6101286102e0366004611662565b611017565b7f1f4a8eb7cf654c75cb9376a8ca57eea8125f02544d28c8b83107dea51810f21254610229565b61033a336000357fffffffff000000000000000000000000000000000000000000000000000000001661119d565b6103a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d617574682d756e617574686f72697a656400000000000000000000000060448201526064015b60405180910390fd5b60018054740100000000000000000000000000000000000000007fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff90911617905560405160043590602435903490829084903390600080357fffffffff00000000000000000000000000000000000000000000000000000000169161042d9187913690611703565b60405180910390a4505050565b610468336000357fffffffff000000000000000000000000000000000000000000000000000000001661119d565b6104ce576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d617574682d756e617574686f72697a6564000000000000000000000000604482015260640161039c565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a250565b60045473ffffffffffffffffffffffffffffffffffffffff1633148061057257503360009081526002602052604090205460ff165b6105fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e000000000000000000000000000000606482015260840161039c565b600554604080518082018252600f81527f7574696c697479546f6b656e2f76310000000000000000000000000000000000602082015290517ff67187ac0000000000000000000000000000000000000000000000000000000081527f1f4a8eb7cf654c75cb9376a8ca57eea8125f02544d28c8b83107dea51810f2129273ffffffffffffffffffffffffffffffffffffffff169163f67187ac916106a59190600401611757565b602060405180830381865afa1580156106c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e691906117ca565b6004820180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff929092169182179055610792576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f696e76616c6964206164647265737320666f7220746f6b656e00000000000000604482015260640161039c565b50565b60015460009074010000000000000000000000000000000000000000900460ff161561081d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f64732d73746f702d69732d73746f707065640000000000000000000000000000604482015260640161039c565b61082733836112de565b90505b92915050565b61085e336000357fffffffff000000000000000000000000000000000000000000000000000000001661119d565b6108c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d617574682d756e617574686f72697a6564000000000000000000000000604482015260640161039c565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316908117825560405190917f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada491a250565b60015460009074010000000000000000000000000000000000000000900460ff16156109b9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f64732d73746f702d69732d73746f707065640000000000000000000000000000604482015260640161039c565b61082a33836112de565b6109f1336000357fffffffff000000000000000000000000000000000000000000000000000000001661119d565b610a57576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d617574682d756e617574686f72697a6564000000000000000000000000604482015260640161039c565b600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16905560405160043590602435903490829084903390600080357fffffffff00000000000000000000000000000000000000000000000000000000169161042d9187913690611703565b60045473ffffffffffffffffffffffffffffffffffffffff16331480610afb57503360009081526002602052604090205460ff165b610b87576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e000000000000000000000000000000606482015260840161039c565b7f1f4a8eb7cf654c75cb9376a8ca57eea8125f02544d28c8b83107dea51810f21355565b60045473ffffffffffffffffffffffffffffffffffffffff16331480610be057503360009081526002602052604090205460ff165b610c6c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e000000000000000000000000000000606482015260840161039c565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260026020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556003805491610cc883611816565b919050555050565b60015460009074010000000000000000000000000000000000000000900460ff1615610d58576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f64732d73746f702d69732d73746f707065640000000000000000000000000000604482015260640161039c565b60045473ffffffffffffffffffffffffffffffffffffffff16331480610d8d57503360009081526002602052604090205460ff165b610e19576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e000000000000000000000000000000606482015260840161039c565b6040805185815273ffffffffffffffffffffffffffffffffffffffff851660208201529081018390527f5b063c6569a91e8133fc6cd71d31a4ca5c65c652fd53ae093f46107754f085419060600160405180910390a160008481527f1f4a8eb7cf654c75cb9376a8ca57eea8125f02544d28c8b83107dea51810f214602090815260408083208054908690557f1f4a8eb7cf654c75cb9376a8ca57eea8125f02544d28c8b83107dea51810f21590925290912080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86161790557f1f4a8eb7cf654c75cb9376a8ca57eea8125f02544d28c8b83107dea51810f2129080841115610f57576000610f408583611550565b8354909150610f4f90826115c8565b835550610f7e565b80841015610f7e576000610f6b8286611550565b8354909150610f7a9082611550565b8355505b6004828101546040517f40c10f1900000000000000000000000000000000000000000000000000000000815230928101929092526024820186905273ffffffffffffffffffffffffffffffffffffffff169081906340c10f1990604401600060405180830381600087803b158015610ff557600080fd5b505af1158015611009573d6000803e3d6000fd5b505050505050509392505050565b60045473ffffffffffffffffffffffffffffffffffffffff1633148061104c57503360009081526002602052604090205460ff165b6110d8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e000000000000000000000000000000606482015260840161039c565b600160035411611144576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f43616e27742072656d6f766520616c6c206f70657261746f7273000000000000604482015260640161039c565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260026020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690556003805491610cc88361184f565b600073ffffffffffffffffffffffffffffffffffffffff83163014156111c55750600161082a565b60015473ffffffffffffffffffffffffffffffffffffffff848116911614156111f05750600161082a565b60005473ffffffffffffffffffffffffffffffffffffffff166112155750600061082a565b6000546040517fb700961300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301523060248301527fffffffff00000000000000000000000000000000000000000000000000000000851660448301529091169063b700961390606401602060405180830381865afa1580156112b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d79190611884565b905061082a565b7f1f4a8eb7cf654c75cb9376a8ca57eea8125f02544d28c8b83107dea51810f213805460009081527f1f4a8eb7cf654c75cb9376a8ca57eea8125f02544d28c8b83107dea51810f21460209081526040808320859055925482527f1f4a8eb7cf654c75cb9376a8ca57eea8125f02544d28c8b83107dea51810f215905290812080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff85161790557f1f4a8eb7cf654c75cb9376a8ca57eea8125f02544d28c8b83107dea51810f21280546113c990846115c8565b815560018101546040805191825273ffffffffffffffffffffffffffffffffffffffff8616602083015281018490527f5b063c6569a91e8133fc6cd71d31a4ca5c65c652fd53ae093f46107754f085419060600160405180910390a1600181810154611434916115c8565b60018201556004808201546040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811693820193909352306024820152604481018690529116906323b872dd906064016020604051808303816000875af11580156114bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e09190611884565b611546576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5472616e73666572206661696c65640000000000000000000000000000000000604482015260640161039c565b5060019392505050565b60008261155d83826118a6565b915081111561082a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f64732d6d6174682d7375622d756e646572666c6f770000000000000000000000604482015260640161039c565b6000826115d583826118bd565b915081101561082a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000604482015260640161039c565b73ffffffffffffffffffffffffffffffffffffffff8116811461079257600080fd5b60006020828403121561167457600080fd5b813561167f81611640565b9392505050565b6000806040838503121561169957600080fd5b82356116a481611640565b946020939093013593505050565b6000602082840312156116c457600080fd5b5035919050565b6000806000606084860312156116e057600080fd5b8335925060208401356116f281611640565b929592945050506040919091013590565b83815260406020820152816040820152818360608301376000818301606090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016010192915050565b600060208083528351808285015260005b8181101561178457858101830151858201604001528201611768565b81811115611796576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b6000602082840312156117dc57600080fd5b815161167f81611640565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611848576118486117e7565b5060010190565b60008161185e5761185e6117e7565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60006020828403121561189657600080fd5b8151801515811461167f57600080fd5b6000828210156118b8576118b86117e7565b500390565b600082198211156118d0576118d06117e7565b50019056fea26469706673582212204d0940da1c049e7f76ca7681e3dc87e3a8c180a22e6c4ae177b1ff2ca7b42dbe64736f6c634300080b0033",
>>>>>>> Stashed changes
}

// DepositABI is the input ABI used to generate the binding from.
// Deprecated: Use DepositMetaData.ABI instead.
var DepositABI = DepositMetaData.ABI

// DepositBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DepositMetaData.Bin instead.
var DepositBin = DepositMetaData.Bin

// DeployDeposit deploys a new Ethereum contract, binding an instance of Deposit to it.
func DeployDeposit(auth *bind.TransactOpts, backend bind.ContractBackend, registry_ common.Address) (common.Address, *types.Transaction, *Deposit, error) {
	parsed, err := DepositMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DepositBin), backend, registry_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Deposit{DepositCaller: DepositCaller{contract: contract}, DepositTransactor: DepositTransactor{contract: contract}, DepositFilterer: DepositFilterer{contract: contract}}, nil
}

// Deposit is an auto generated Go binding around an Ethereum contract.
type Deposit struct {
	DepositCaller     // Read-only binding to the contract
	DepositTransactor // Write-only binding to the contract
	DepositFilterer   // Log filterer for contract events
}

// DepositCaller is an auto generated read-only Go binding around an Ethereum contract.
type DepositCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DepositTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DepositTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DepositFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DepositFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DepositSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DepositSession struct {
	Contract     *Deposit          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DepositCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DepositCallerSession struct {
	Contract *DepositCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// DepositTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DepositTransactorSession struct {
	Contract     *DepositTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// DepositRaw is an auto generated low-level Go binding around an Ethereum contract.
type DepositRaw struct {
	Contract *Deposit // Generic contract binding to access the raw methods on
}

// DepositCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DepositCallerRaw struct {
	Contract *DepositCaller // Generic read-only contract binding to access the raw methods on
}

// DepositTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DepositTransactorRaw struct {
	Contract *DepositTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDeposit creates a new instance of Deposit, bound to a specific deployed contract.
func NewDeposit(address common.Address, backend bind.ContractBackend) (*Deposit, error) {
	contract, err := bindDeposit(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Deposit{DepositCaller: DepositCaller{contract: contract}, DepositTransactor: DepositTransactor{contract: contract}, DepositFilterer: DepositFilterer{contract: contract}}, nil
}

// NewDepositCaller creates a new read-only instance of Deposit, bound to a specific deployed contract.
func NewDepositCaller(address common.Address, caller bind.ContractCaller) (*DepositCaller, error) {
	contract, err := bindDeposit(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DepositCaller{contract: contract}, nil
}

// NewDepositTransactor creates a new write-only instance of Deposit, bound to a specific deployed contract.
func NewDepositTransactor(address common.Address, transactor bind.ContractTransactor) (*DepositTransactor, error) {
	contract, err := bindDeposit(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DepositTransactor{contract: contract}, nil
}

// NewDepositFilterer creates a new log filterer instance of Deposit, bound to a specific deployed contract.
func NewDepositFilterer(address common.Address, filterer bind.ContractFilterer) (*DepositFilterer, error) {
	contract, err := bindDeposit(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DepositFilterer{contract: contract}, nil
}

// bindDeposit binds a generic wrapper to an already deployed contract.
func bindDeposit(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DepositABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Deposit *DepositRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Deposit.Contract.DepositCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Deposit *DepositRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Deposit.Contract.DepositTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Deposit *DepositRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Deposit.Contract.DepositTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Deposit *DepositCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Deposit.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Deposit *DepositTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Deposit.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Deposit *DepositTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Deposit.Contract.contract.Transact(opts, method, params...)
}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_Deposit *DepositCaller) Authority(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Deposit.contract.Call(opts, &out, "authority")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_Deposit *DepositSession) Authority() (common.Address, error) {
	return _Deposit.Contract.Authority(&_Deposit.CallOpts)
}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_Deposit *DepositCallerSession) Authority() (common.Address, error) {
	return _Deposit.Contract.Authority(&_Deposit.CallOpts)
}

// DepositID is a free data retrieval call binding the contract method 0xb3117446.
//
// Solidity: function depositID() view returns(uint256)
func (_Deposit *DepositCaller) DepositID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Deposit.contract.Call(opts, &out, "depositID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DepositID is a free data retrieval call binding the contract method 0xb3117446.
//
// Solidity: function depositID() view returns(uint256)
func (_Deposit *DepositSession) DepositID() (*big.Int, error) {
	return _Deposit.Contract.DepositID(&_Deposit.CallOpts)
}

// DepositID is a free data retrieval call binding the contract method 0xb3117446.
//
// Solidity: function depositID() view returns(uint256)
func (_Deposit *DepositCallerSession) DepositID() (*big.Int, error) {
	return _Deposit.Contract.DepositID(&_Deposit.CallOpts)
}

// Deposits is a free data retrieval call binding the contract method 0xb02c43d0.
//
// Solidity: function deposits(uint256 _depositID) view returns(uint256)
func (_Deposit *DepositCaller) Deposits(opts *bind.CallOpts, _depositID *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Deposit.contract.Call(opts, &out, "deposits", _depositID)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Deposits is a free data retrieval call binding the contract method 0xb02c43d0.
//
// Solidity: function deposits(uint256 _depositID) view returns(uint256)
func (_Deposit *DepositSession) Deposits(_depositID *big.Int) (*big.Int, error) {
	return _Deposit.Contract.Deposits(&_Deposit.CallOpts, _depositID)
}

// Deposits is a free data retrieval call binding the contract method 0xb02c43d0.
//
// Solidity: function deposits(uint256 _depositID) view returns(uint256)
func (_Deposit *DepositCallerSession) Deposits(_depositID *big.Int) (*big.Int, error) {
	return _Deposit.Contract.Deposits(&_Deposit.CallOpts, _depositID)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Deposit *DepositCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Deposit.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Deposit *DepositSession) Owner() (common.Address, error) {
	return _Deposit.Contract.Owner(&_Deposit.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Deposit *DepositCallerSession) Owner() (common.Address, error) {
	return _Deposit.Contract.Owner(&_Deposit.CallOpts)
}

// Stopped is a free data retrieval call binding the contract method 0x75f12b21.
//
// Solidity: function stopped() view returns(bool)
func (_Deposit *DepositCaller) Stopped(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Deposit.contract.Call(opts, &out, "stopped")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Stopped is a free data retrieval call binding the contract method 0x75f12b21.
//
// Solidity: function stopped() view returns(bool)
func (_Deposit *DepositSession) Stopped() (bool, error) {
	return _Deposit.Contract.Stopped(&_Deposit.CallOpts)
}

// Stopped is a free data retrieval call binding the contract method 0x75f12b21.
//
// Solidity: function stopped() view returns(bool)
func (_Deposit *DepositCallerSession) Stopped() (bool, error) {
	return _Deposit.Contract.Stopped(&_Deposit.CallOpts)
}

// TotalDeposited is a free data retrieval call binding the contract method 0xff50abdc.
//
// Solidity: function totalDeposited() view returns(uint256)
func (_Deposit *DepositCaller) TotalDeposited(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Deposit.contract.Call(opts, &out, "totalDeposited")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalDeposited is a free data retrieval call binding the contract method 0xff50abdc.
//
// Solidity: function totalDeposited() view returns(uint256)
func (_Deposit *DepositSession) TotalDeposited() (*big.Int, error) {
	return _Deposit.Contract.TotalDeposited(&_Deposit.CallOpts)
}

// TotalDeposited is a free data retrieval call binding the contract method 0xff50abdc.
//
// Solidity: function totalDeposited() view returns(uint256)
func (_Deposit *DepositCallerSession) TotalDeposited() (*big.Int, error) {
	return _Deposit.Contract.TotalDeposited(&_Deposit.CallOpts)
}

// Deposit is a paid mutator transaction binding the contract method 0xb6b55f25.
//
// Solidity: function deposit(uint256 amount) returns(bool)
func (_Deposit *DepositTransactor) Deposit(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Deposit.contract.Transact(opts, "deposit", amount)
}

// Deposit is a paid mutator transaction binding the contract method 0xb6b55f25.
//
// Solidity: function deposit(uint256 amount) returns(bool)
func (_Deposit *DepositSession) Deposit(amount *big.Int) (*types.Transaction, error) {
	return _Deposit.Contract.Deposit(&_Deposit.TransactOpts, amount)
}

// Deposit is a paid mutator transaction binding the contract method 0xb6b55f25.
//
// Solidity: function deposit(uint256 amount) returns(bool)
func (_Deposit *DepositTransactorSession) Deposit(amount *big.Int) (*types.Transaction, error) {
	return _Deposit.Contract.Deposit(&_Deposit.TransactOpts, amount)
}

// DepositFor is a paid mutator transaction binding the contract method 0x2f4f21e2.
//
// Solidity: function depositFor(address who, uint256 amount) returns(bool)
func (_Deposit *DepositTransactor) DepositFor(opts *bind.TransactOpts, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Deposit.contract.Transact(opts, "depositFor", who, amount)
}

// DepositFor is a paid mutator transaction binding the contract method 0x2f4f21e2.
//
// Solidity: function depositFor(address who, uint256 amount) returns(bool)
func (_Deposit *DepositSession) DepositFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Deposit.Contract.DepositFor(&_Deposit.TransactOpts, who, amount)
}

// DepositFor is a paid mutator transaction binding the contract method 0x2f4f21e2.
//
// Solidity: function depositFor(address who, uint256 amount) returns(bool)
func (_Deposit *DepositTransactorSession) DepositFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Deposit.Contract.DepositFor(&_Deposit.TransactOpts, who, amount)
}

// DirectDeposit is a paid mutator transaction binding the contract method 0xec68426f.
//
// Solidity: function directDeposit(uint256 _depositID, address who, uint256 amount) returns(bool)
func (_Deposit *DepositTransactor) DirectDeposit(opts *bind.TransactOpts, _depositID *big.Int, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Deposit.contract.Transact(opts, "directDeposit", _depositID, who, amount)
}

// DirectDeposit is a paid mutator transaction binding the contract method 0xec68426f.
//
// Solidity: function directDeposit(uint256 _depositID, address who, uint256 amount) returns(bool)
func (_Deposit *DepositSession) DirectDeposit(_depositID *big.Int, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Deposit.Contract.DirectDeposit(&_Deposit.TransactOpts, _depositID, who, amount)
}

// DirectDeposit is a paid mutator transaction binding the contract method 0xec68426f.
//
// Solidity: function directDeposit(uint256 _depositID, address who, uint256 amount) returns(bool)
func (_Deposit *DepositTransactorSession) DirectDeposit(_depositID *big.Int, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Deposit.Contract.DirectDeposit(&_Deposit.TransactOpts, _depositID, who, amount)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_Deposit *DepositTransactor) GrantOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _Deposit.contract.Transact(opts, "grantOperator", _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_Deposit *DepositSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _Deposit.Contract.GrantOperator(&_Deposit.TransactOpts, _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_Deposit *DepositTransactorSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _Deposit.Contract.GrantOperator(&_Deposit.TransactOpts, _operator)
}

// ReloadRegistry is a paid mutator transaction binding the contract method 0x1476601d.
//
// Solidity: function reloadRegistry() returns()
func (_Deposit *DepositTransactor) ReloadRegistry(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Deposit.contract.Transact(opts, "reloadRegistry")
}

// ReloadRegistry is a paid mutator transaction binding the contract method 0x1476601d.
//
// Solidity: function reloadRegistry() returns()
func (_Deposit *DepositSession) ReloadRegistry() (*types.Transaction, error) {
	return _Deposit.Contract.ReloadRegistry(&_Deposit.TransactOpts)
}

// ReloadRegistry is a paid mutator transaction binding the contract method 0x1476601d.
//
// Solidity: function reloadRegistry() returns()
func (_Deposit *DepositTransactorSession) ReloadRegistry() (*types.Transaction, error) {
	return _Deposit.Contract.ReloadRegistry(&_Deposit.TransactOpts)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_Deposit *DepositTransactor) RevokeOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _Deposit.contract.Transact(opts, "revokeOperator", _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_Deposit *DepositSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _Deposit.Contract.RevokeOperator(&_Deposit.TransactOpts, _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_Deposit *DepositTransactorSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _Deposit.Contract.RevokeOperator(&_Deposit.TransactOpts, _operator)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_Deposit *DepositTransactor) SetAuthority(opts *bind.TransactOpts, authority_ common.Address) (*types.Transaction, error) {
	return _Deposit.contract.Transact(opts, "setAuthority", authority_)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_Deposit *DepositSession) SetAuthority(authority_ common.Address) (*types.Transaction, error) {
	return _Deposit.Contract.SetAuthority(&_Deposit.TransactOpts, authority_)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_Deposit *DepositTransactorSession) SetAuthority(authority_ common.Address) (*types.Transaction, error) {
	return _Deposit.Contract.SetAuthority(&_Deposit.TransactOpts, authority_)
}

// SetDepositID is a paid mutator transaction binding the contract method 0xda7f7eb7.
//
// Solidity: function setDepositID(uint256 _depositID) returns()
func (_Deposit *DepositTransactor) SetDepositID(opts *bind.TransactOpts, _depositID *big.Int) (*types.Transaction, error) {
	return _Deposit.contract.Transact(opts, "setDepositID", _depositID)
}

// SetDepositID is a paid mutator transaction binding the contract method 0xda7f7eb7.
//
// Solidity: function setDepositID(uint256 _depositID) returns()
func (_Deposit *DepositSession) SetDepositID(_depositID *big.Int) (*types.Transaction, error) {
	return _Deposit.Contract.SetDepositID(&_Deposit.TransactOpts, _depositID)
}

// SetDepositID is a paid mutator transaction binding the contract method 0xda7f7eb7.
//
// Solidity: function setDepositID(uint256 _depositID) returns()
func (_Deposit *DepositTransactorSession) SetDepositID(_depositID *big.Int) (*types.Transaction, error) {
	return _Deposit.Contract.SetDepositID(&_Deposit.TransactOpts, _depositID)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_Deposit *DepositTransactor) SetOwner(opts *bind.TransactOpts, owner_ common.Address) (*types.Transaction, error) {
	return _Deposit.contract.Transact(opts, "setOwner", owner_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_Deposit *DepositSession) SetOwner(owner_ common.Address) (*types.Transaction, error) {
	return _Deposit.Contract.SetOwner(&_Deposit.TransactOpts, owner_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_Deposit *DepositTransactorSession) SetOwner(owner_ common.Address) (*types.Transaction, error) {
	return _Deposit.Contract.SetOwner(&_Deposit.TransactOpts, owner_)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_Deposit *DepositTransactor) Start(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Deposit.contract.Transact(opts, "start")
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_Deposit *DepositSession) Start() (*types.Transaction, error) {
	return _Deposit.Contract.Start(&_Deposit.TransactOpts)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_Deposit *DepositTransactorSession) Start() (*types.Transaction, error) {
	return _Deposit.Contract.Start(&_Deposit.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_Deposit *DepositTransactor) Stop(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Deposit.contract.Transact(opts, "stop")
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_Deposit *DepositSession) Stop() (*types.Transaction, error) {
	return _Deposit.Contract.Stop(&_Deposit.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_Deposit *DepositTransactorSession) Stop() (*types.Transaction, error) {
	return _Deposit.Contract.Stop(&_Deposit.TransactOpts)
}

// DepositDepositReceivedIterator is returned from FilterDepositReceived and is used to iterate over the raw logs and unpacked data for DepositReceived events raised by the Deposit contract.
type DepositDepositReceivedIterator struct {
	Event *DepositDepositReceived // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DepositDepositReceivedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DepositDepositReceived)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DepositDepositReceived)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DepositDepositReceivedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DepositDepositReceivedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DepositDepositReceived represents a DepositReceived event raised by the Deposit contract.
type DepositDepositReceived struct {
	DepositID *big.Int
	Depositor common.Address
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterDepositReceived is a free log retrieval operation binding the contract event 0x5b063c6569a91e8133fc6cd71d31a4ca5c65c652fd53ae093f46107754f08541.
//
// Solidity: event DepositReceived(uint256 depositID, address depositor, uint256 amount)
func (_Deposit *DepositFilterer) FilterDepositReceived(opts *bind.FilterOpts) (*DepositDepositReceivedIterator, error) {

	logs, sub, err := _Deposit.contract.FilterLogs(opts, "DepositReceived")
	if err != nil {
		return nil, err
	}
	return &DepositDepositReceivedIterator{contract: _Deposit.contract, event: "DepositReceived", logs: logs, sub: sub}, nil
}

// WatchDepositReceived is a free log subscription operation binding the contract event 0x5b063c6569a91e8133fc6cd71d31a4ca5c65c652fd53ae093f46107754f08541.
//
// Solidity: event DepositReceived(uint256 depositID, address depositor, uint256 amount)
func (_Deposit *DepositFilterer) WatchDepositReceived(opts *bind.WatchOpts, sink chan<- *DepositDepositReceived) (event.Subscription, error) {

	logs, sub, err := _Deposit.contract.WatchLogs(opts, "DepositReceived")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DepositDepositReceived)
				if err := _Deposit.contract.UnpackLog(event, "DepositReceived", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositReceived is a log parse operation binding the contract event 0x5b063c6569a91e8133fc6cd71d31a4ca5c65c652fd53ae093f46107754f08541.
//
// Solidity: event DepositReceived(uint256 depositID, address depositor, uint256 amount)
func (_Deposit *DepositFilterer) ParseDepositReceived(log types.Log) (*DepositDepositReceived, error) {
	event := new(DepositDepositReceived)
	if err := _Deposit.contract.UnpackLog(event, "DepositReceived", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DepositKeyShareSubmissionIterator is returned from FilterKeyShareSubmission and is used to iterate over the raw logs and unpacked data for KeyShareSubmission events raised by the Deposit contract.
type DepositKeyShareSubmissionIterator struct {
	Event *DepositKeyShareSubmission // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DepositKeyShareSubmissionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DepositKeyShareSubmission)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DepositKeyShareSubmission)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DepositKeyShareSubmissionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DepositKeyShareSubmissionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DepositKeyShareSubmission represents a KeyShareSubmission event raised by the Deposit contract.
type DepositKeyShareSubmission struct {
	Issuer                     common.Address
	KeyShareG1                 [2]*big.Int
	KeyShareG1CorrectnessProof [2]*big.Int
	KeyShareG2                 [4]*big.Int
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterKeyShareSubmission is a free log retrieval operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_Deposit *DepositFilterer) FilterKeyShareSubmission(opts *bind.FilterOpts) (*DepositKeyShareSubmissionIterator, error) {

	logs, sub, err := _Deposit.contract.FilterLogs(opts, "KeyShareSubmission")
	if err != nil {
		return nil, err
	}
	return &DepositKeyShareSubmissionIterator{contract: _Deposit.contract, event: "KeyShareSubmission", logs: logs, sub: sub}, nil
}

// WatchKeyShareSubmission is a free log subscription operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_Deposit *DepositFilterer) WatchKeyShareSubmission(opts *bind.WatchOpts, sink chan<- *DepositKeyShareSubmission) (event.Subscription, error) {

	logs, sub, err := _Deposit.contract.WatchLogs(opts, "KeyShareSubmission")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DepositKeyShareSubmission)
				if err := _Deposit.contract.UnpackLog(event, "KeyShareSubmission", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyShareSubmission is a log parse operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_Deposit *DepositFilterer) ParseKeyShareSubmission(log types.Log) (*DepositKeyShareSubmission, error) {
	event := new(DepositKeyShareSubmission)
	if err := _Deposit.contract.UnpackLog(event, "KeyShareSubmission", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DepositLogSetAuthorityIterator is returned from FilterLogSetAuthority and is used to iterate over the raw logs and unpacked data for LogSetAuthority events raised by the Deposit contract.
type DepositLogSetAuthorityIterator struct {
	Event *DepositLogSetAuthority // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DepositLogSetAuthorityIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DepositLogSetAuthority)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DepositLogSetAuthority)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DepositLogSetAuthorityIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DepositLogSetAuthorityIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DepositLogSetAuthority represents a LogSetAuthority event raised by the Deposit contract.
type DepositLogSetAuthority struct {
	Authority common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterLogSetAuthority is a free log retrieval operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_Deposit *DepositFilterer) FilterLogSetAuthority(opts *bind.FilterOpts, authority []common.Address) (*DepositLogSetAuthorityIterator, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}

	logs, sub, err := _Deposit.contract.FilterLogs(opts, "LogSetAuthority", authorityRule)
	if err != nil {
		return nil, err
	}
	return &DepositLogSetAuthorityIterator{contract: _Deposit.contract, event: "LogSetAuthority", logs: logs, sub: sub}, nil
}

// WatchLogSetAuthority is a free log subscription operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_Deposit *DepositFilterer) WatchLogSetAuthority(opts *bind.WatchOpts, sink chan<- *DepositLogSetAuthority, authority []common.Address) (event.Subscription, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}

	logs, sub, err := _Deposit.contract.WatchLogs(opts, "LogSetAuthority", authorityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DepositLogSetAuthority)
				if err := _Deposit.contract.UnpackLog(event, "LogSetAuthority", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogSetAuthority is a log parse operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_Deposit *DepositFilterer) ParseLogSetAuthority(log types.Log) (*DepositLogSetAuthority, error) {
	event := new(DepositLogSetAuthority)
	if err := _Deposit.contract.UnpackLog(event, "LogSetAuthority", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DepositLogSetOwnerIterator is returned from FilterLogSetOwner and is used to iterate over the raw logs and unpacked data for LogSetOwner events raised by the Deposit contract.
type DepositLogSetOwnerIterator struct {
	Event *DepositLogSetOwner // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DepositLogSetOwnerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DepositLogSetOwner)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DepositLogSetOwner)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DepositLogSetOwnerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DepositLogSetOwnerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DepositLogSetOwner represents a LogSetOwner event raised by the Deposit contract.
type DepositLogSetOwner struct {
	Owner common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogSetOwner is a free log retrieval operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_Deposit *DepositFilterer) FilterLogSetOwner(opts *bind.FilterOpts, owner []common.Address) (*DepositLogSetOwnerIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Deposit.contract.FilterLogs(opts, "LogSetOwner", ownerRule)
	if err != nil {
		return nil, err
	}
	return &DepositLogSetOwnerIterator{contract: _Deposit.contract, event: "LogSetOwner", logs: logs, sub: sub}, nil
}

// WatchLogSetOwner is a free log subscription operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_Deposit *DepositFilterer) WatchLogSetOwner(opts *bind.WatchOpts, sink chan<- *DepositLogSetOwner, owner []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Deposit.contract.WatchLogs(opts, "LogSetOwner", ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DepositLogSetOwner)
				if err := _Deposit.contract.UnpackLog(event, "LogSetOwner", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogSetOwner is a log parse operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_Deposit *DepositFilterer) ParseLogSetOwner(log types.Log) (*DepositLogSetOwner, error) {
	event := new(DepositLogSetOwner)
	if err := _Deposit.contract.UnpackLog(event, "LogSetOwner", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DepositRegistrationOpenIterator is returned from FilterRegistrationOpen and is used to iterate over the raw logs and unpacked data for RegistrationOpen events raised by the Deposit contract.
type DepositRegistrationOpenIterator struct {
	Event *DepositRegistrationOpen // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DepositRegistrationOpenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DepositRegistrationOpen)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DepositRegistrationOpen)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DepositRegistrationOpenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DepositRegistrationOpenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DepositRegistrationOpen represents a RegistrationOpen event raised by the Deposit contract.
type DepositRegistrationOpen struct {
	DkgStarts              *big.Int
	RegistrationEnds       *big.Int
	ShareDistributionEnds  *big.Int
	DisputeEnds            *big.Int
	KeyShareSubmissionEnds *big.Int
	MpkSubmissionEnds      *big.Int
	GpkjSubmissionEnds     *big.Int
	GpkjDisputeEnds        *big.Int
	DkgComplete            *big.Int
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterRegistrationOpen is a free log retrieval operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_Deposit *DepositFilterer) FilterRegistrationOpen(opts *bind.FilterOpts) (*DepositRegistrationOpenIterator, error) {

	logs, sub, err := _Deposit.contract.FilterLogs(opts, "RegistrationOpen")
	if err != nil {
		return nil, err
	}
	return &DepositRegistrationOpenIterator{contract: _Deposit.contract, event: "RegistrationOpen", logs: logs, sub: sub}, nil
}

// WatchRegistrationOpen is a free log subscription operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_Deposit *DepositFilterer) WatchRegistrationOpen(opts *bind.WatchOpts, sink chan<- *DepositRegistrationOpen) (event.Subscription, error) {

	logs, sub, err := _Deposit.contract.WatchLogs(opts, "RegistrationOpen")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DepositRegistrationOpen)
				if err := _Deposit.contract.UnpackLog(event, "RegistrationOpen", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistrationOpen is a log parse operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_Deposit *DepositFilterer) ParseRegistrationOpen(log types.Log) (*DepositRegistrationOpen, error) {
	event := new(DepositRegistrationOpen)
	if err := _Deposit.contract.UnpackLog(event, "RegistrationOpen", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DepositShareDistributionIterator is returned from FilterShareDistribution and is used to iterate over the raw logs and unpacked data for ShareDistribution events raised by the Deposit contract.
type DepositShareDistributionIterator struct {
	Event *DepositShareDistribution // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DepositShareDistributionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DepositShareDistribution)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DepositShareDistribution)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DepositShareDistributionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DepositShareDistributionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DepositShareDistribution represents a ShareDistribution event raised by the Deposit contract.
type DepositShareDistribution struct {
	Issuer          common.Address
	Index           *big.Int
	EncryptedShares []*big.Int
	Commitments     [][2]*big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterShareDistribution is a free log retrieval operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_Deposit *DepositFilterer) FilterShareDistribution(opts *bind.FilterOpts) (*DepositShareDistributionIterator, error) {

	logs, sub, err := _Deposit.contract.FilterLogs(opts, "ShareDistribution")
	if err != nil {
		return nil, err
	}
	return &DepositShareDistributionIterator{contract: _Deposit.contract, event: "ShareDistribution", logs: logs, sub: sub}, nil
}

// WatchShareDistribution is a free log subscription operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_Deposit *DepositFilterer) WatchShareDistribution(opts *bind.WatchOpts, sink chan<- *DepositShareDistribution) (event.Subscription, error) {

	logs, sub, err := _Deposit.contract.WatchLogs(opts, "ShareDistribution")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DepositShareDistribution)
				if err := _Deposit.contract.UnpackLog(event, "ShareDistribution", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseShareDistribution is a log parse operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_Deposit *DepositFilterer) ParseShareDistribution(log types.Log) (*DepositShareDistribution, error) {
	event := new(DepositShareDistribution)
	if err := _Deposit.contract.UnpackLog(event, "ShareDistribution", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DepositValidatorMemberIterator is returned from FilterValidatorMember and is used to iterate over the raw logs and unpacked data for ValidatorMember events raised by the Deposit contract.
type DepositValidatorMemberIterator struct {
	Event *DepositValidatorMember // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DepositValidatorMemberIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DepositValidatorMember)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DepositValidatorMember)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DepositValidatorMemberIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DepositValidatorMemberIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DepositValidatorMember represents a ValidatorMember event raised by the Deposit contract.
type DepositValidatorMember struct {
	Account common.Address
	Epoch   *big.Int
	Index   *big.Int
	Share0  *big.Int
	Share1  *big.Int
	Share2  *big.Int
	Share3  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterValidatorMember is a free log retrieval operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_Deposit *DepositFilterer) FilterValidatorMember(opts *bind.FilterOpts) (*DepositValidatorMemberIterator, error) {

	logs, sub, err := _Deposit.contract.FilterLogs(opts, "ValidatorMember")
	if err != nil {
		return nil, err
	}
	return &DepositValidatorMemberIterator{contract: _Deposit.contract, event: "ValidatorMember", logs: logs, sub: sub}, nil
}

// WatchValidatorMember is a free log subscription operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_Deposit *DepositFilterer) WatchValidatorMember(opts *bind.WatchOpts, sink chan<- *DepositValidatorMember) (event.Subscription, error) {

	logs, sub, err := _Deposit.contract.WatchLogs(opts, "ValidatorMember")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DepositValidatorMember)
				if err := _Deposit.contract.UnpackLog(event, "ValidatorMember", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorMember is a log parse operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_Deposit *DepositFilterer) ParseValidatorMember(log types.Log) (*DepositValidatorMember, error) {
	event := new(DepositValidatorMember)
	if err := _Deposit.contract.UnpackLog(event, "ValidatorMember", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DepositValidatorSetIterator is returned from FilterValidatorSet and is used to iterate over the raw logs and unpacked data for ValidatorSet events raised by the Deposit contract.
type DepositValidatorSetIterator struct {
	Event *DepositValidatorSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DepositValidatorSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DepositValidatorSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DepositValidatorSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DepositValidatorSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DepositValidatorSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DepositValidatorSet represents a ValidatorSet event raised by the Deposit contract.
type DepositValidatorSet struct {
	ValidatorCount uint8
	Epoch          *big.Int
	EthHeight      uint32
	MadHeight      uint32
	GroupKey0      *big.Int
	GroupKey1      *big.Int
	GroupKey2      *big.Int
	GroupKey3      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterValidatorSet is a free log retrieval operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_Deposit *DepositFilterer) FilterValidatorSet(opts *bind.FilterOpts) (*DepositValidatorSetIterator, error) {

	logs, sub, err := _Deposit.contract.FilterLogs(opts, "ValidatorSet")
	if err != nil {
		return nil, err
	}
	return &DepositValidatorSetIterator{contract: _Deposit.contract, event: "ValidatorSet", logs: logs, sub: sub}, nil
}

// WatchValidatorSet is a free log subscription operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_Deposit *DepositFilterer) WatchValidatorSet(opts *bind.WatchOpts, sink chan<- *DepositValidatorSet) (event.Subscription, error) {

	logs, sub, err := _Deposit.contract.WatchLogs(opts, "ValidatorSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DepositValidatorSet)
				if err := _Deposit.contract.UnpackLog(event, "ValidatorSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorSet is a log parse operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_Deposit *DepositFilterer) ParseValidatorSet(log types.Log) (*DepositValidatorSet, error) {
	event := new(DepositValidatorSet)
	if err := _Deposit.contract.UnpackLog(event, "ValidatorSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DiamondMetaData contains all meta data concerning the Diamond contract.
var DiamondMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
<<<<<<< Updated upstream
	Bin: "",
=======
	Bin: "",
>>>>>>> Stashed changes
}

// DiamondABI is the input ABI used to generate the binding from.
// Deprecated: Use DiamondMetaData.ABI instead.
var DiamondABI = DiamondMetaData.ABI

// DiamondBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DiamondMetaData.Bin instead.
var DiamondBin = DiamondMetaData.Bin

// DeployDiamond deploys a new Ethereum contract, binding an instance of Diamond to it.
func DeployDiamond(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Diamond, error) {
	parsed, err := DiamondMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DiamondBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Diamond{DiamondCaller: DiamondCaller{contract: contract}, DiamondTransactor: DiamondTransactor{contract: contract}, DiamondFilterer: DiamondFilterer{contract: contract}}, nil
}

// Diamond is an auto generated Go binding around an Ethereum contract.
type Diamond struct {
	DiamondCaller     // Read-only binding to the contract
	DiamondTransactor // Write-only binding to the contract
	DiamondFilterer   // Log filterer for contract events
}

// DiamondCaller is an auto generated read-only Go binding around an Ethereum contract.
type DiamondCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DiamondTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DiamondTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DiamondFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DiamondFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DiamondSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DiamondSession struct {
	Contract     *Diamond          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DiamondCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DiamondCallerSession struct {
	Contract *DiamondCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// DiamondTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DiamondTransactorSession struct {
	Contract     *DiamondTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// DiamondRaw is an auto generated low-level Go binding around an Ethereum contract.
type DiamondRaw struct {
	Contract *Diamond // Generic contract binding to access the raw methods on
}

// DiamondCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DiamondCallerRaw struct {
	Contract *DiamondCaller // Generic read-only contract binding to access the raw methods on
}

// DiamondTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DiamondTransactorRaw struct {
	Contract *DiamondTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDiamond creates a new instance of Diamond, bound to a specific deployed contract.
func NewDiamond(address common.Address, backend bind.ContractBackend) (*Diamond, error) {
	contract, err := bindDiamond(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Diamond{DiamondCaller: DiamondCaller{contract: contract}, DiamondTransactor: DiamondTransactor{contract: contract}, DiamondFilterer: DiamondFilterer{contract: contract}}, nil
}

// NewDiamondCaller creates a new read-only instance of Diamond, bound to a specific deployed contract.
func NewDiamondCaller(address common.Address, caller bind.ContractCaller) (*DiamondCaller, error) {
	contract, err := bindDiamond(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DiamondCaller{contract: contract}, nil
}

// NewDiamondTransactor creates a new write-only instance of Diamond, bound to a specific deployed contract.
func NewDiamondTransactor(address common.Address, transactor bind.ContractTransactor) (*DiamondTransactor, error) {
	contract, err := bindDiamond(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DiamondTransactor{contract: contract}, nil
}

// NewDiamondFilterer creates a new log filterer instance of Diamond, bound to a specific deployed contract.
func NewDiamondFilterer(address common.Address, filterer bind.ContractFilterer) (*DiamondFilterer, error) {
	contract, err := bindDiamond(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DiamondFilterer{contract: contract}, nil
}

// bindDiamond binds a generic wrapper to an already deployed contract.
func bindDiamond(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DiamondABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Diamond *DiamondRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Diamond.Contract.DiamondCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Diamond *DiamondRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Diamond.Contract.DiamondTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Diamond *DiamondRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Diamond.Contract.DiamondTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Diamond *DiamondCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Diamond.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Diamond *DiamondTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Diamond.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Diamond *DiamondTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Diamond.Contract.contract.Transact(opts, method, params...)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Diamond *DiamondTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _Diamond.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Diamond *DiamondSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _Diamond.Contract.Fallback(&_Diamond.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Diamond *DiamondTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _Diamond.Contract.Fallback(&_Diamond.TransactOpts, calldata)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Diamond *DiamondTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Diamond.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Diamond *DiamondSession) Receive() (*types.Transaction, error) {
	return _Diamond.Contract.Receive(&_Diamond.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Diamond *DiamondTransactorSession) Receive() (*types.Transaction, error) {
	return _Diamond.Contract.Receive(&_Diamond.TransactOpts)
}

// DiamondStorageLibraryMetaData contains all meta data concerning the DiamondStorageLibrary contract.
var DiamondStorageLibraryMetaData = &bind.MetaData{
	ABI: "[]",
<<<<<<< Updated upstream
	Bin: "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205f3b834b8be06fdacf62ec6574886a7b224f2c8da3157c4b6cb2f899840b2a8764736f6c634300080b0033",
=======
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fbdf52e7e93b99ec905365e21167809ab4c24a9140c701480309189d408534af64736f6c634300080b0033",
>>>>>>> Stashed changes
}

// DiamondStorageLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use DiamondStorageLibraryMetaData.ABI instead.
var DiamondStorageLibraryABI = DiamondStorageLibraryMetaData.ABI

// DiamondStorageLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DiamondStorageLibraryMetaData.Bin instead.
var DiamondStorageLibraryBin = DiamondStorageLibraryMetaData.Bin

// DeployDiamondStorageLibrary deploys a new Ethereum contract, binding an instance of DiamondStorageLibrary to it.
func DeployDiamondStorageLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *DiamondStorageLibrary, error) {
	parsed, err := DiamondStorageLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DiamondStorageLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DiamondStorageLibrary{DiamondStorageLibraryCaller: DiamondStorageLibraryCaller{contract: contract}, DiamondStorageLibraryTransactor: DiamondStorageLibraryTransactor{contract: contract}, DiamondStorageLibraryFilterer: DiamondStorageLibraryFilterer{contract: contract}}, nil
}

// DiamondStorageLibrary is an auto generated Go binding around an Ethereum contract.
type DiamondStorageLibrary struct {
	DiamondStorageLibraryCaller     // Read-only binding to the contract
	DiamondStorageLibraryTransactor // Write-only binding to the contract
	DiamondStorageLibraryFilterer   // Log filterer for contract events
}

// DiamondStorageLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type DiamondStorageLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DiamondStorageLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DiamondStorageLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DiamondStorageLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DiamondStorageLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DiamondStorageLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DiamondStorageLibrarySession struct {
	Contract     *DiamondStorageLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts          // Call options to use throughout this session
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// DiamondStorageLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DiamondStorageLibraryCallerSession struct {
	Contract *DiamondStorageLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                // Call options to use throughout this session
}

// DiamondStorageLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DiamondStorageLibraryTransactorSession struct {
	Contract     *DiamondStorageLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                // Transaction auth options to use throughout this session
}

// DiamondStorageLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type DiamondStorageLibraryRaw struct {
	Contract *DiamondStorageLibrary // Generic contract binding to access the raw methods on
}

// DiamondStorageLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DiamondStorageLibraryCallerRaw struct {
	Contract *DiamondStorageLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// DiamondStorageLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DiamondStorageLibraryTransactorRaw struct {
	Contract *DiamondStorageLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDiamondStorageLibrary creates a new instance of DiamondStorageLibrary, bound to a specific deployed contract.
func NewDiamondStorageLibrary(address common.Address, backend bind.ContractBackend) (*DiamondStorageLibrary, error) {
	contract, err := bindDiamondStorageLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DiamondStorageLibrary{DiamondStorageLibraryCaller: DiamondStorageLibraryCaller{contract: contract}, DiamondStorageLibraryTransactor: DiamondStorageLibraryTransactor{contract: contract}, DiamondStorageLibraryFilterer: DiamondStorageLibraryFilterer{contract: contract}}, nil
}

// NewDiamondStorageLibraryCaller creates a new read-only instance of DiamondStorageLibrary, bound to a specific deployed contract.
func NewDiamondStorageLibraryCaller(address common.Address, caller bind.ContractCaller) (*DiamondStorageLibraryCaller, error) {
	contract, err := bindDiamondStorageLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DiamondStorageLibraryCaller{contract: contract}, nil
}

// NewDiamondStorageLibraryTransactor creates a new write-only instance of DiamondStorageLibrary, bound to a specific deployed contract.
func NewDiamondStorageLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*DiamondStorageLibraryTransactor, error) {
	contract, err := bindDiamondStorageLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DiamondStorageLibraryTransactor{contract: contract}, nil
}

// NewDiamondStorageLibraryFilterer creates a new log filterer instance of DiamondStorageLibrary, bound to a specific deployed contract.
func NewDiamondStorageLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*DiamondStorageLibraryFilterer, error) {
	contract, err := bindDiamondStorageLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DiamondStorageLibraryFilterer{contract: contract}, nil
}

// bindDiamondStorageLibrary binds a generic wrapper to an already deployed contract.
func bindDiamondStorageLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DiamondStorageLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DiamondStorageLibrary *DiamondStorageLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DiamondStorageLibrary.Contract.DiamondStorageLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DiamondStorageLibrary *DiamondStorageLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DiamondStorageLibrary.Contract.DiamondStorageLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DiamondStorageLibrary *DiamondStorageLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DiamondStorageLibrary.Contract.DiamondStorageLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DiamondStorageLibrary *DiamondStorageLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DiamondStorageLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DiamondStorageLibrary *DiamondStorageLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DiamondStorageLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DiamondStorageLibrary *DiamondStorageLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DiamondStorageLibrary.Contract.contract.Transact(opts, method, params...)
}

// DiamondUpdateFacetMetaData contains all meta data concerning the DiamondUpdateFacet contract.
var DiamondUpdateFacetMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"facet\",\"type\":\"address\"}],\"name\":\"addFacet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"removeFacet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"facet\",\"type\":\"address\"}],\"name\":\"replaceFacet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
<<<<<<< Updated upstream
	Bin: "0x608060405234801561001057600080fd5b50600061002561007060201b610d441760201c565b9050338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061009d565b6000807f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90508091505090565b61125a806100ac6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063dc9780591161005b578063dc978059146100eb578063de380fbf14610107578063e348da1314610123578063fad8b32a1461013f57610088565b8063208865cc1461008d57806360536172146100a9578063ab033ea9146100b3578063ca5a0fae146100cf575b600080fd5b6100a760048036038101906100a29190610e59565b61015b565b005b6100b161037b565b005b6100cd60048036038101906100c89190610e99565b610486565b005b6100e960048036038101906100e49190610ec6565b610578565b005b61010560048036038101906101009190610e99565b61077c565b005b610121600480360381019061011c9190610e59565b61086e565b005b61013d60048036038101906101389190610e99565b610a8f565b005b61015960048036038101906101549190610e99565b610bee565b005b6000610165610d44565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166101f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ec90610f76565b60405180910390fd5b60006101ff610d71565b9050600073ffffffffffffffffffffffffffffffffffffffff16816000016000867bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146102e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102da90610fe2565b60405180910390fd5b82816000016000867bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b6000610385610d44565b90508060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610419576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041090611074565b60405180910390fd5b8060020160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000610490610d44565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610524576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051b90611106565b60405180910390fd5b600061052e610d44565b9050828160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6000610582610d44565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610612576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060990610f76565b60405180910390fd5b600061061c610d71565b9050600073ffffffffffffffffffffffffffffffffffffffff16816000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610701576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f890611172565b60405180910390fd5b806000016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055505050565b6000610786610d44565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461081a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081190611106565b60405180910390fd5b6000610824610d44565b9050828160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6000610878610d44565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610908576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ff90610f76565b60405180910390fd5b6000610912610d71565b9050600073ffffffffffffffffffffffffffffffffffffffff16816000016000867bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156109f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ee90611172565b60405180910390fd5b82816000016000867bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b6000610a99610d44565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610b4457508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610b83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7a90611204565b60405180910390fd5b6000610b8d610d44565b905060018160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b6000610bf8610d44565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610ca357508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610ce2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd990611204565b60405180910390fd5b6000610cec610d44565b90508060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff0219169055505050565b6000807f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90508091505090565b6000807f2031468f0c30f7087de4da9398818763b546d7f89935fa65485c24ff1df26bf390508091505090565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610dd881610da3565b8114610de357600080fd5b50565b600081359050610df581610dcf565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e2682610dfb565b9050919050565b610e3681610e1b565b8114610e4157600080fd5b50565b600081359050610e5381610e2d565b92915050565b60008060408385031215610e7057610e6f610d9e565b5b6000610e7e85828601610de6565b9250506020610e8f85828601610e44565b9150509250929050565b600060208284031215610eaf57610eae610d9e565b5b6000610ebd84828501610e44565b91505092915050565b600060208284031215610edc57610edb610d9e565b5b6000610eea84828501610de6565b91505092915050565b600082825260208201905092915050565b7f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160008201527f6c6c6f7765640000000000000000000000000000000000000000000000000000602082015250565b6000610f60602683610ef3565b9150610f6b82610f04565b604082019050919050565b60006020820190508181036000830152610f8f81610f53565b9050919050565b7f73656c6563746f7220616c726561647920657869737473000000000000000000600082015250565b6000610fcc601783610ef3565b9150610fd782610f96565b602082019050919050565b60006020820190508181036000830152610ffb81610fbf565b9050919050565b7f41636365737320436f6e74726f6c3a206f776e657273686970206e6f7420677260008201527f616e746564000000000000000000000000000000000000000000000000000000602082015250565b600061105e602583610ef3565b915061106982611002565b604082019050919050565b6000602082019050818103600083015261108d81611051565b9050919050565b7f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60008201527f6c6f776564000000000000000000000000000000000000000000000000000000602082015250565b60006110f0602583610ef3565b91506110fb82611094565b604082019050919050565b6000602082019050818103600083015261111f816110e3565b9050919050565b7f73656c6563746f7220646f6573206e6f74206578697374000000000000000000600082015250565b600061115c601783610ef3565b915061116782611126565b602082019050919050565b6000602082019050818103600083015261118b8161114f565b9050919050565b7f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060008201527f657261746f7220616c6c6f776564000000000000000000000000000000000000602082015250565b60006111ee602e83610ef3565b91506111f982611192565b604082019050919050565b6000602082019050818103600083015261121d816111e1565b905091905056fea26469706673582212209d2ad2d31589cce54f7a74e03ccef824e210849114897898efae2783108ab86b64736f6c634300080b0033",
=======
	Bin: "0x608060405234801561001057600080fd5b50600061002561003e60201b610d4d1760201c565b60010180546001600160a01b0319163317905550610062565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90565b610e70806100716000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063dc9780591161005b578063dc978059146100d0578063de380fbf146100e3578063e348da13146100f6578063fad8b32a1461010957600080fd5b8063208865cc1461008d57806360536172146100a2578063ab033ea9146100aa578063ca5a0fae146100bd575b600080fd5b6100a061009b366004610dca565b61011c565b005b6100a061032d565b6100a06100b8366004610dfd565b610452565b6100a06100cb366004610e1f565b6105a1565b6100a06100de366004610dfd565b61078e565b6100a06100f1366004610dca565b6108dd565b6100a0610104366004610dfd565b610a6e565b6100a0610117366004610dfd565b610bdf565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a602081905260409091205460ff166101e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f776564000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7fffffffff00000000000000000000000000000000000000000000000000000000831660009081527f2031468f0c30f7087de4da9398818763b546d7f89935fa65485c24ff1df26bf3602081905260409091205473ffffffffffffffffffffffffffffffffffffffff16156102b3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f73656c6563746f7220616c72656164792065786973747300000000000000000060448201526064016101d9565b7fffffffff0000000000000000000000000000000000000000000000000000000093909316600090815260209390935250604090912080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520c547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff163314610415576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f776e657273686970206e6f7420677260448201527f616e74656400000000000000000000000000000000000000000000000000000060648201526084016101d9565b6002810180547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169091556001909101805490911633179055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff16331461053a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60448201527f6c6f77656400000000000000000000000000000000000000000000000000000060648201526084016101d9565b507f31434318735a8e6385da596be365952169e52986860b974818986b522d23520d80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a602081905260409091205460ff16610662576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f776564000000000000000000000000000000000000000000000000000060648201526084016101d9565b7fffffffff00000000000000000000000000000000000000000000000000000000821660009081527f2031468f0c30f7087de4da9398818763b546d7f89935fa65485c24ff1df26bf3602081905260409091205473ffffffffffffffffffffffffffffffffffffffff16610732576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f73656c6563746f7220646f6573206e6f7420657869737400000000000000000060448201526064016101d9565b7fffffffff000000000000000000000000000000000000000000000000000000009092166000908152602092909252506040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff163314610876576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60448201527f6c6f77656400000000000000000000000000000000000000000000000000000060648201526084016101d9565b507f31434318735a8e6385da596be365952169e52986860b974818986b522d23520c80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a602081905260409091205460ff1661099e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f776564000000000000000000000000000000000000000000000000000060648201526084016101d9565b7fffffffff00000000000000000000000000000000000000000000000000000000831660009081527f2031468f0c30f7087de4da9398818763b546d7f89935fa65485c24ff1df26bf3602081905260409091205473ffffffffffffffffffffffffffffffffffffffff166102b3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f73656c6563746f7220646f6573206e6f7420657869737400000000000000000060448201526064016101d9565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff16331480610ae457503360009081526020829052604090205460ff165b610b70576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060448201527f657261746f7220616c6c6f77656400000000000000000000000000000000000060648201526084016101d9565b5073ffffffffffffffffffffffffffffffffffffffff1660009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff16331480610c5557503360009081526020829052604090205460ff165b610ce1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060448201527f657261746f7220616c6c6f77656400000000000000000000000000000000000060648201526084016101d9565b5073ffffffffffffffffffffffffffffffffffffffff1660009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90565b80357fffffffff0000000000000000000000000000000000000000000000000000000081168114610da157600080fd5b919050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610da157600080fd5b60008060408385031215610ddd57600080fd5b610de683610d71565b9150610df460208401610da6565b90509250929050565b600060208284031215610e0f57600080fd5b610e1882610da6565b9392505050565b600060208284031215610e3157600080fd5b610e1882610d7156fea264697066735822122063ab818d1f372cc10d92575592aa760438aa381a0436992b2f44e78b788fd01b64736f6c634300080b0033",
>>>>>>> Stashed changes
}

// DiamondUpdateFacetABI is the input ABI used to generate the binding from.
// Deprecated: Use DiamondUpdateFacetMetaData.ABI instead.
var DiamondUpdateFacetABI = DiamondUpdateFacetMetaData.ABI

// DiamondUpdateFacetBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DiamondUpdateFacetMetaData.Bin instead.
var DiamondUpdateFacetBin = DiamondUpdateFacetMetaData.Bin

// DeployDiamondUpdateFacet deploys a new Ethereum contract, binding an instance of DiamondUpdateFacet to it.
func DeployDiamondUpdateFacet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *DiamondUpdateFacet, error) {
	parsed, err := DiamondUpdateFacetMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DiamondUpdateFacetBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DiamondUpdateFacet{DiamondUpdateFacetCaller: DiamondUpdateFacetCaller{contract: contract}, DiamondUpdateFacetTransactor: DiamondUpdateFacetTransactor{contract: contract}, DiamondUpdateFacetFilterer: DiamondUpdateFacetFilterer{contract: contract}}, nil
}

// DiamondUpdateFacet is an auto generated Go binding around an Ethereum contract.
type DiamondUpdateFacet struct {
	DiamondUpdateFacetCaller     // Read-only binding to the contract
	DiamondUpdateFacetTransactor // Write-only binding to the contract
	DiamondUpdateFacetFilterer   // Log filterer for contract events
}

// DiamondUpdateFacetCaller is an auto generated read-only Go binding around an Ethereum contract.
type DiamondUpdateFacetCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DiamondUpdateFacetTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DiamondUpdateFacetTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DiamondUpdateFacetFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DiamondUpdateFacetFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DiamondUpdateFacetSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DiamondUpdateFacetSession struct {
	Contract     *DiamondUpdateFacet // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// DiamondUpdateFacetCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DiamondUpdateFacetCallerSession struct {
	Contract *DiamondUpdateFacetCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// DiamondUpdateFacetTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DiamondUpdateFacetTransactorSession struct {
	Contract     *DiamondUpdateFacetTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// DiamondUpdateFacetRaw is an auto generated low-level Go binding around an Ethereum contract.
type DiamondUpdateFacetRaw struct {
	Contract *DiamondUpdateFacet // Generic contract binding to access the raw methods on
}

// DiamondUpdateFacetCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DiamondUpdateFacetCallerRaw struct {
	Contract *DiamondUpdateFacetCaller // Generic read-only contract binding to access the raw methods on
}

// DiamondUpdateFacetTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DiamondUpdateFacetTransactorRaw struct {
	Contract *DiamondUpdateFacetTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDiamondUpdateFacet creates a new instance of DiamondUpdateFacet, bound to a specific deployed contract.
func NewDiamondUpdateFacet(address common.Address, backend bind.ContractBackend) (*DiamondUpdateFacet, error) {
	contract, err := bindDiamondUpdateFacet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DiamondUpdateFacet{DiamondUpdateFacetCaller: DiamondUpdateFacetCaller{contract: contract}, DiamondUpdateFacetTransactor: DiamondUpdateFacetTransactor{contract: contract}, DiamondUpdateFacetFilterer: DiamondUpdateFacetFilterer{contract: contract}}, nil
}

// NewDiamondUpdateFacetCaller creates a new read-only instance of DiamondUpdateFacet, bound to a specific deployed contract.
func NewDiamondUpdateFacetCaller(address common.Address, caller bind.ContractCaller) (*DiamondUpdateFacetCaller, error) {
	contract, err := bindDiamondUpdateFacet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DiamondUpdateFacetCaller{contract: contract}, nil
}

// NewDiamondUpdateFacetTransactor creates a new write-only instance of DiamondUpdateFacet, bound to a specific deployed contract.
func NewDiamondUpdateFacetTransactor(address common.Address, transactor bind.ContractTransactor) (*DiamondUpdateFacetTransactor, error) {
	contract, err := bindDiamondUpdateFacet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DiamondUpdateFacetTransactor{contract: contract}, nil
}

// NewDiamondUpdateFacetFilterer creates a new log filterer instance of DiamondUpdateFacet, bound to a specific deployed contract.
func NewDiamondUpdateFacetFilterer(address common.Address, filterer bind.ContractFilterer) (*DiamondUpdateFacetFilterer, error) {
	contract, err := bindDiamondUpdateFacet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DiamondUpdateFacetFilterer{contract: contract}, nil
}

// bindDiamondUpdateFacet binds a generic wrapper to an already deployed contract.
func bindDiamondUpdateFacet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DiamondUpdateFacetABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DiamondUpdateFacet *DiamondUpdateFacetRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DiamondUpdateFacet.Contract.DiamondUpdateFacetCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DiamondUpdateFacet *DiamondUpdateFacetRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.DiamondUpdateFacetTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DiamondUpdateFacet *DiamondUpdateFacetRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.DiamondUpdateFacetTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DiamondUpdateFacet *DiamondUpdateFacetCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DiamondUpdateFacet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.contract.Transact(opts, method, params...)
}

// AddFacet is a paid mutator transaction binding the contract method 0x208865cc.
//
// Solidity: function addFacet(bytes4 selector, address facet) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactor) AddFacet(opts *bind.TransactOpts, selector [4]byte, facet common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.contract.Transact(opts, "addFacet", selector, facet)
}

// AddFacet is a paid mutator transaction binding the contract method 0x208865cc.
//
// Solidity: function addFacet(bytes4 selector, address facet) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetSession) AddFacet(selector [4]byte, facet common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.AddFacet(&_DiamondUpdateFacet.TransactOpts, selector, facet)
}

// AddFacet is a paid mutator transaction binding the contract method 0x208865cc.
//
// Solidity: function addFacet(bytes4 selector, address facet) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactorSession) AddFacet(selector [4]byte, facet common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.AddFacet(&_DiamondUpdateFacet.TransactOpts, selector, facet)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactor) GrantOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.contract.Transact(opts, "grantOperator", who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.GrantOperator(&_DiamondUpdateFacet.TransactOpts, who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactorSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.GrantOperator(&_DiamondUpdateFacet.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactor) GrantOwner(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.contract.Transact(opts, "grantOwner", who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.GrantOwner(&_DiamondUpdateFacet.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactorSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.GrantOwner(&_DiamondUpdateFacet.TransactOpts, who)
}

// RemoveFacet is a paid mutator transaction binding the contract method 0xca5a0fae.
//
// Solidity: function removeFacet(bytes4 selector) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactor) RemoveFacet(opts *bind.TransactOpts, selector [4]byte) (*types.Transaction, error) {
	return _DiamondUpdateFacet.contract.Transact(opts, "removeFacet", selector)
}

// RemoveFacet is a paid mutator transaction binding the contract method 0xca5a0fae.
//
// Solidity: function removeFacet(bytes4 selector) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetSession) RemoveFacet(selector [4]byte) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.RemoveFacet(&_DiamondUpdateFacet.TransactOpts, selector)
}

// RemoveFacet is a paid mutator transaction binding the contract method 0xca5a0fae.
//
// Solidity: function removeFacet(bytes4 selector) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactorSession) RemoveFacet(selector [4]byte) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.RemoveFacet(&_DiamondUpdateFacet.TransactOpts, selector)
}

// ReplaceFacet is a paid mutator transaction binding the contract method 0xde380fbf.
//
// Solidity: function replaceFacet(bytes4 selector, address facet) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactor) ReplaceFacet(opts *bind.TransactOpts, selector [4]byte, facet common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.contract.Transact(opts, "replaceFacet", selector, facet)
}

// ReplaceFacet is a paid mutator transaction binding the contract method 0xde380fbf.
//
// Solidity: function replaceFacet(bytes4 selector, address facet) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetSession) ReplaceFacet(selector [4]byte, facet common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.ReplaceFacet(&_DiamondUpdateFacet.TransactOpts, selector, facet)
}

// ReplaceFacet is a paid mutator transaction binding the contract method 0xde380fbf.
//
// Solidity: function replaceFacet(bytes4 selector, address facet) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactorSession) ReplaceFacet(selector [4]byte, facet common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.ReplaceFacet(&_DiamondUpdateFacet.TransactOpts, selector, facet)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactor) RevokeOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.contract.Transact(opts, "revokeOperator", who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.RevokeOperator(&_DiamondUpdateFacet.TransactOpts, who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactorSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.RevokeOperator(&_DiamondUpdateFacet.TransactOpts, who)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactor) SetGovernance(opts *bind.TransactOpts, governance_ common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.contract.Transact(opts, "setGovernance", governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.SetGovernance(&_DiamondUpdateFacet.TransactOpts, governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactorSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.SetGovernance(&_DiamondUpdateFacet.TransactOpts, governance_)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactor) TakeOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DiamondUpdateFacet.contract.Transact(opts, "takeOwnership")
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetSession) TakeOwnership() (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.TakeOwnership(&_DiamondUpdateFacet.TransactOpts)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_DiamondUpdateFacet *DiamondUpdateFacetTransactorSession) TakeOwnership() (*types.Transaction, error) {
	return _DiamondUpdateFacet.Contract.TakeOwnership(&_DiamondUpdateFacet.TransactOpts)
}

// DirectGovernanceMetaData contains all meta data concerning the DirectGovernance contract.
var DirectGovernanceMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"ValueUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"updateValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
<<<<<<< Updated upstream
	Bin: "0x608060405234801561001057600080fd5b5033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610083600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661008860201b60201c565b610302565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061012c57506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b61016b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161016290610260565b60405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600160008154809291906101d5906102b9565b919050555050565b600082825260208201905092915050565b7f46756e6374696f6e616c697479207265737472696374656420746f206175746860008201527f6f72697a6564206f70657261746f72732e000000000000000000000000000000602082015250565b600061024a6031836101dd565b9150610255826101ee565b604082019050919050565b600060208201905081810360008301526102798161023d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b60006102c4826102af565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156102f7576102f6610280565b5b600182019050919050565b610801806103116000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80634651248614610046578063e348da1314610062578063fad8b32a1461007e575b600080fd5b610060600480360381019061005b9190610512565b61009a565b005b61007c600480360381019061007791906105c3565b6101bc565b005b610098600480360381019061009391906105c3565b610311565b005b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061013e57506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b61017d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017490610673565b60405180910390fd5b8082847f36dcd0e03525dedd9d5c21a263ef5f35d030298b5c48f1a713006aefc064ad05336040516101af91906106a2565b60405180910390a4505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061026057506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b61029f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029690610673565b60405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060016000815480929190610309906106ec565b919050555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806103b557506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6103f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103eb90610673565b60405180910390fd5b6001805411610438576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042f90610781565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff021916905560016000815480929190610499906107a1565b919050555050565b600080fd5b6000819050919050565b6104b9816104a6565b81146104c457600080fd5b50565b6000813590506104d6816104b0565b92915050565b6000819050919050565b6104ef816104dc565b81146104fa57600080fd5b50565b60008135905061050c816104e6565b92915050565b60008060006060848603121561052b5761052a6104a1565b5b6000610539868287016104c7565b935050602061054a868287016104c7565b925050604061055b868287016104fd565b9150509250925092565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061059082610565565b9050919050565b6105a081610585565b81146105ab57600080fd5b50565b6000813590506105bd81610597565b92915050565b6000602082840312156105d9576105d86104a1565b5b60006105e7848285016105ae565b91505092915050565b600082825260208201905092915050565b7f46756e6374696f6e616c697479207265737472696374656420746f206175746860008201527f6f72697a6564206f70657261746f72732e000000000000000000000000000000602082015250565b600061065d6031836105f0565b915061066882610601565b604082019050919050565b6000602082019050818103600083015261068c81610650565b9050919050565b61069c81610585565b82525050565b60006020820190506106b76000830184610693565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006106f7826104a6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561072a576107296106bd565b5b600182019050919050565b7f43616e27742072656d6f766520616c6c206f70657261746f7273000000000000600082015250565b600061076b601a836105f0565b915061077682610735565b602082019050919050565b6000602082019050818103600083015261079a8161075e565b9050919050565b60006107ac826104a6565b915060008214156107c0576107bf6106bd565b5b60018203905091905056fea26469706673582212209092338cfb2f190ea2378a947ad6ae1537701ec31e0fd7c21c5ea041a608579864736f6c634300080b0033",
=======
	Bin: "0x608060405234801561001057600080fd5b50600280546001600160a01b0319163390811790915561002f90610034565b610129565b6002546001600160a01b031633148061005c57503360009081526020819052604090205460ff165b6100c65760405162461bcd60e51b815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527037b934bd32b21037b832b930ba37b9399760791b606482015260840160405180910390fd5b6001600160a01b0381166000908152602081905260408120805460ff191660019081179091558054916100f883610100565b919050555050565b600060001982141561012257634e487b7160e01b600052601160045260246000fd5b5060010190565b61056c806101386000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80634651248614610046578063e348da131461005b578063fad8b32a1461006e575b600080fd5b610059610054366004610430565b610081565b005b61005961006936600461045c565b610185565b61005961007c36600461045c565b6102ab565b60025473ffffffffffffffffffffffffffffffffffffffff163314806100b657503360009081526020819052604090205460ff165b610147576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e00000000000000000000000000000060648201526084015b60405180910390fd5b6040513381528190839085907f36dcd0e03525dedd9d5c21a263ef5f35d030298b5c48f1a713006aefc064ad059060200160405180910390a4505050565b60025473ffffffffffffffffffffffffffffffffffffffff163314806101ba57503360009081526020819052604090205460ff165b610246576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e000000000000000000000000000000606482015260840161013e565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260208190526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091558054916102a3836104c8565b919050555050565b60025473ffffffffffffffffffffffffffffffffffffffff163314806102e057503360009081526020819052604090205460ff165b61036c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e000000000000000000000000000000606482015260840161013e565b60018054116103d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f43616e27742072656d6f766520616c6c206f70657261746f7273000000000000604482015260640161013e565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260208190526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905560018054916102a383610501565b60008060006060848603121561044557600080fd5b505081359360208301359350604090920135919050565b60006020828403121561046e57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461049257600080fd5b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156104fa576104fa610499565b5060010190565b60008161051057610510610499565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fea26469706673582212200dc6bbe4b9d4615b8286e936c928a019e0d9c1a66d6577bfb99c8889c48b943f64736f6c634300080b0033",
>>>>>>> Stashed changes
}

// DirectGovernanceABI is the input ABI used to generate the binding from.
// Deprecated: Use DirectGovernanceMetaData.ABI instead.
var DirectGovernanceABI = DirectGovernanceMetaData.ABI

// DirectGovernanceBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DirectGovernanceMetaData.Bin instead.
var DirectGovernanceBin = DirectGovernanceMetaData.Bin

// DeployDirectGovernance deploys a new Ethereum contract, binding an instance of DirectGovernance to it.
func DeployDirectGovernance(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *DirectGovernance, error) {
	parsed, err := DirectGovernanceMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DirectGovernanceBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DirectGovernance{DirectGovernanceCaller: DirectGovernanceCaller{contract: contract}, DirectGovernanceTransactor: DirectGovernanceTransactor{contract: contract}, DirectGovernanceFilterer: DirectGovernanceFilterer{contract: contract}}, nil
}

// DirectGovernance is an auto generated Go binding around an Ethereum contract.
type DirectGovernance struct {
	DirectGovernanceCaller     // Read-only binding to the contract
	DirectGovernanceTransactor // Write-only binding to the contract
	DirectGovernanceFilterer   // Log filterer for contract events
}

// DirectGovernanceCaller is an auto generated read-only Go binding around an Ethereum contract.
type DirectGovernanceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DirectGovernanceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DirectGovernanceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DirectGovernanceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DirectGovernanceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DirectGovernanceSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DirectGovernanceSession struct {
	Contract     *DirectGovernance // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DirectGovernanceCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DirectGovernanceCallerSession struct {
	Contract *DirectGovernanceCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// DirectGovernanceTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DirectGovernanceTransactorSession struct {
	Contract     *DirectGovernanceTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// DirectGovernanceRaw is an auto generated low-level Go binding around an Ethereum contract.
type DirectGovernanceRaw struct {
	Contract *DirectGovernance // Generic contract binding to access the raw methods on
}

// DirectGovernanceCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DirectGovernanceCallerRaw struct {
	Contract *DirectGovernanceCaller // Generic read-only contract binding to access the raw methods on
}

// DirectGovernanceTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DirectGovernanceTransactorRaw struct {
	Contract *DirectGovernanceTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDirectGovernance creates a new instance of DirectGovernance, bound to a specific deployed contract.
func NewDirectGovernance(address common.Address, backend bind.ContractBackend) (*DirectGovernance, error) {
	contract, err := bindDirectGovernance(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DirectGovernance{DirectGovernanceCaller: DirectGovernanceCaller{contract: contract}, DirectGovernanceTransactor: DirectGovernanceTransactor{contract: contract}, DirectGovernanceFilterer: DirectGovernanceFilterer{contract: contract}}, nil
}

// NewDirectGovernanceCaller creates a new read-only instance of DirectGovernance, bound to a specific deployed contract.
func NewDirectGovernanceCaller(address common.Address, caller bind.ContractCaller) (*DirectGovernanceCaller, error) {
	contract, err := bindDirectGovernance(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DirectGovernanceCaller{contract: contract}, nil
}

// NewDirectGovernanceTransactor creates a new write-only instance of DirectGovernance, bound to a specific deployed contract.
func NewDirectGovernanceTransactor(address common.Address, transactor bind.ContractTransactor) (*DirectGovernanceTransactor, error) {
	contract, err := bindDirectGovernance(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DirectGovernanceTransactor{contract: contract}, nil
}

// NewDirectGovernanceFilterer creates a new log filterer instance of DirectGovernance, bound to a specific deployed contract.
func NewDirectGovernanceFilterer(address common.Address, filterer bind.ContractFilterer) (*DirectGovernanceFilterer, error) {
	contract, err := bindDirectGovernance(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DirectGovernanceFilterer{contract: contract}, nil
}

// bindDirectGovernance binds a generic wrapper to an already deployed contract.
func bindDirectGovernance(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DirectGovernanceABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DirectGovernance *DirectGovernanceRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DirectGovernance.Contract.DirectGovernanceCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DirectGovernance *DirectGovernanceRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DirectGovernance.Contract.DirectGovernanceTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DirectGovernance *DirectGovernanceRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DirectGovernance.Contract.DirectGovernanceTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DirectGovernance *DirectGovernanceCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DirectGovernance.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DirectGovernance *DirectGovernanceTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DirectGovernance.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DirectGovernance *DirectGovernanceTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DirectGovernance.Contract.contract.Transact(opts, method, params...)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_DirectGovernance *DirectGovernanceTransactor) GrantOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _DirectGovernance.contract.Transact(opts, "grantOperator", _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_DirectGovernance *DirectGovernanceSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _DirectGovernance.Contract.GrantOperator(&_DirectGovernance.TransactOpts, _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_DirectGovernance *DirectGovernanceTransactorSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _DirectGovernance.Contract.GrantOperator(&_DirectGovernance.TransactOpts, _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_DirectGovernance *DirectGovernanceTransactor) RevokeOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _DirectGovernance.contract.Transact(opts, "revokeOperator", _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_DirectGovernance *DirectGovernanceSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _DirectGovernance.Contract.RevokeOperator(&_DirectGovernance.TransactOpts, _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_DirectGovernance *DirectGovernanceTransactorSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _DirectGovernance.Contract.RevokeOperator(&_DirectGovernance.TransactOpts, _operator)
}

// UpdateValue is a paid mutator transaction binding the contract method 0x46512486.
//
// Solidity: function updateValue(uint256 epoch, uint256 key, bytes32 value) returns()
func (_DirectGovernance *DirectGovernanceTransactor) UpdateValue(opts *bind.TransactOpts, epoch *big.Int, key *big.Int, value [32]byte) (*types.Transaction, error) {
	return _DirectGovernance.contract.Transact(opts, "updateValue", epoch, key, value)
}

// UpdateValue is a paid mutator transaction binding the contract method 0x46512486.
//
// Solidity: function updateValue(uint256 epoch, uint256 key, bytes32 value) returns()
func (_DirectGovernance *DirectGovernanceSession) UpdateValue(epoch *big.Int, key *big.Int, value [32]byte) (*types.Transaction, error) {
	return _DirectGovernance.Contract.UpdateValue(&_DirectGovernance.TransactOpts, epoch, key, value)
}

// UpdateValue is a paid mutator transaction binding the contract method 0x46512486.
//
// Solidity: function updateValue(uint256 epoch, uint256 key, bytes32 value) returns()
func (_DirectGovernance *DirectGovernanceTransactorSession) UpdateValue(epoch *big.Int, key *big.Int, value [32]byte) (*types.Transaction, error) {
	return _DirectGovernance.Contract.UpdateValue(&_DirectGovernance.TransactOpts, epoch, key, value)
}

// DirectGovernanceValueUpdatedIterator is returned from FilterValueUpdated and is used to iterate over the raw logs and unpacked data for ValueUpdated events raised by the DirectGovernance contract.
type DirectGovernanceValueUpdatedIterator struct {
	Event *DirectGovernanceValueUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DirectGovernanceValueUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DirectGovernanceValueUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DirectGovernanceValueUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DirectGovernanceValueUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DirectGovernanceValueUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DirectGovernanceValueUpdated represents a ValueUpdated event raised by the DirectGovernance contract.
type DirectGovernanceValueUpdated struct {
	Epoch *big.Int
	Key   *big.Int
	Value [32]byte
	Who   common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterValueUpdated is a free log retrieval operation binding the contract event 0x36dcd0e03525dedd9d5c21a263ef5f35d030298b5c48f1a713006aefc064ad05.
//
// Solidity: event ValueUpdated(uint256 indexed epoch, uint256 indexed key, bytes32 indexed value, address who)
func (_DirectGovernance *DirectGovernanceFilterer) FilterValueUpdated(opts *bind.FilterOpts, epoch []*big.Int, key []*big.Int, value [][32]byte) (*DirectGovernanceValueUpdatedIterator, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}
	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}
	var valueRule []interface{}
	for _, valueItem := range value {
		valueRule = append(valueRule, valueItem)
	}

	logs, sub, err := _DirectGovernance.contract.FilterLogs(opts, "ValueUpdated", epochRule, keyRule, valueRule)
	if err != nil {
		return nil, err
	}
	return &DirectGovernanceValueUpdatedIterator{contract: _DirectGovernance.contract, event: "ValueUpdated", logs: logs, sub: sub}, nil
}

// WatchValueUpdated is a free log subscription operation binding the contract event 0x36dcd0e03525dedd9d5c21a263ef5f35d030298b5c48f1a713006aefc064ad05.
//
// Solidity: event ValueUpdated(uint256 indexed epoch, uint256 indexed key, bytes32 indexed value, address who)
func (_DirectGovernance *DirectGovernanceFilterer) WatchValueUpdated(opts *bind.WatchOpts, sink chan<- *DirectGovernanceValueUpdated, epoch []*big.Int, key []*big.Int, value [][32]byte) (event.Subscription, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}
	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}
	var valueRule []interface{}
	for _, valueItem := range value {
		valueRule = append(valueRule, valueItem)
	}

	logs, sub, err := _DirectGovernance.contract.WatchLogs(opts, "ValueUpdated", epochRule, keyRule, valueRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DirectGovernanceValueUpdated)
				if err := _DirectGovernance.contract.UnpackLog(event, "ValueUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValueUpdated is a log parse operation binding the contract event 0x36dcd0e03525dedd9d5c21a263ef5f35d030298b5c48f1a713006aefc064ad05.
//
// Solidity: event ValueUpdated(uint256 indexed epoch, uint256 indexed key, bytes32 indexed value, address who)
func (_DirectGovernance *DirectGovernanceFilterer) ParseValueUpdated(log types.Log) (*DirectGovernanceValueUpdated, error) {
	event := new(DirectGovernanceValueUpdated)
	if err := _DirectGovernance.contract.UnpackLog(event, "ValueUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC165MetaData contains all meta data concerning the ERC165 contract.
var ERC165MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// ERC165ABI is the input ABI used to generate the binding from.
// Deprecated: Use ERC165MetaData.ABI instead.
var ERC165ABI = ERC165MetaData.ABI

// ERC165 is an auto generated Go binding around an Ethereum contract.
type ERC165 struct {
	ERC165Caller     // Read-only binding to the contract
	ERC165Transactor // Write-only binding to the contract
	ERC165Filterer   // Log filterer for contract events
}

// ERC165Caller is an auto generated read-only Go binding around an Ethereum contract.
type ERC165Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC165Transactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC165Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC165Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC165Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC165Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC165Session struct {
	Contract     *ERC165           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC165CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC165CallerSession struct {
	Contract *ERC165Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ERC165TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC165TransactorSession struct {
	Contract     *ERC165Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC165Raw is an auto generated low-level Go binding around an Ethereum contract.
type ERC165Raw struct {
	Contract *ERC165 // Generic contract binding to access the raw methods on
}

// ERC165CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC165CallerRaw struct {
	Contract *ERC165Caller // Generic read-only contract binding to access the raw methods on
}

// ERC165TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC165TransactorRaw struct {
	Contract *ERC165Transactor // Generic write-only contract binding to access the raw methods on
}

// NewERC165 creates a new instance of ERC165, bound to a specific deployed contract.
func NewERC165(address common.Address, backend bind.ContractBackend) (*ERC165, error) {
	contract, err := bindERC165(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC165{ERC165Caller: ERC165Caller{contract: contract}, ERC165Transactor: ERC165Transactor{contract: contract}, ERC165Filterer: ERC165Filterer{contract: contract}}, nil
}

// NewERC165Caller creates a new read-only instance of ERC165, bound to a specific deployed contract.
func NewERC165Caller(address common.Address, caller bind.ContractCaller) (*ERC165Caller, error) {
	contract, err := bindERC165(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC165Caller{contract: contract}, nil
}

// NewERC165Transactor creates a new write-only instance of ERC165, bound to a specific deployed contract.
func NewERC165Transactor(address common.Address, transactor bind.ContractTransactor) (*ERC165Transactor, error) {
	contract, err := bindERC165(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC165Transactor{contract: contract}, nil
}

// NewERC165Filterer creates a new log filterer instance of ERC165, bound to a specific deployed contract.
func NewERC165Filterer(address common.Address, filterer bind.ContractFilterer) (*ERC165Filterer, error) {
	contract, err := bindERC165(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC165Filterer{contract: contract}, nil
}

// bindERC165 binds a generic wrapper to an already deployed contract.
func bindERC165(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ERC165ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC165 *ERC165Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC165.Contract.ERC165Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC165 *ERC165Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC165.Contract.ERC165Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC165 *ERC165Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC165.Contract.ERC165Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC165 *ERC165CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC165.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC165 *ERC165TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC165.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC165 *ERC165TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC165.Contract.contract.Transact(opts, method, params...)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceID) view returns(bool)
func (_ERC165 *ERC165Caller) SupportsInterface(opts *bind.CallOpts, interfaceID [4]byte) (bool, error) {
	var out []interface{}
	err := _ERC165.contract.Call(opts, &out, "supportsInterface", interfaceID)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceID) view returns(bool)
func (_ERC165 *ERC165Session) SupportsInterface(interfaceID [4]byte) (bool, error) {
	return _ERC165.Contract.SupportsInterface(&_ERC165.CallOpts, interfaceID)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceID) view returns(bool)
func (_ERC165 *ERC165CallerSession) SupportsInterface(interfaceID [4]byte) (bool, error) {
	return _ERC165.Contract.SupportsInterface(&_ERC165.CallOpts, interfaceID)
}

// ERC165LibraryMetaData contains all meta data concerning the ERC165Library contract.
var ERC165LibraryMetaData = &bind.MetaData{
	ABI: "[]",
<<<<<<< Updated upstream
	Bin: "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206a3702f574b2c8fc4c966d784b282981248b6b36c2b8a761eb88058d4e1a849964736f6c634300080b0033",
=======
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208e66a5c5246e94a027f46d36de01ce079c7f53016f9f9cf6ccf4341327d6041364736f6c634300080b0033",
>>>>>>> Stashed changes
}

// ERC165LibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use ERC165LibraryMetaData.ABI instead.
var ERC165LibraryABI = ERC165LibraryMetaData.ABI

// ERC165LibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ERC165LibraryMetaData.Bin instead.
var ERC165LibraryBin = ERC165LibraryMetaData.Bin

// DeployERC165Library deploys a new Ethereum contract, binding an instance of ERC165Library to it.
func DeployERC165Library(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ERC165Library, error) {
	parsed, err := ERC165LibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ERC165LibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ERC165Library{ERC165LibraryCaller: ERC165LibraryCaller{contract: contract}, ERC165LibraryTransactor: ERC165LibraryTransactor{contract: contract}, ERC165LibraryFilterer: ERC165LibraryFilterer{contract: contract}}, nil
}

// ERC165Library is an auto generated Go binding around an Ethereum contract.
type ERC165Library struct {
	ERC165LibraryCaller     // Read-only binding to the contract
	ERC165LibraryTransactor // Write-only binding to the contract
	ERC165LibraryFilterer   // Log filterer for contract events
}

// ERC165LibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type ERC165LibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC165LibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC165LibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC165LibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC165LibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC165LibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC165LibrarySession struct {
	Contract     *ERC165Library    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC165LibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC165LibraryCallerSession struct {
	Contract *ERC165LibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// ERC165LibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC165LibraryTransactorSession struct {
	Contract     *ERC165LibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// ERC165LibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type ERC165LibraryRaw struct {
	Contract *ERC165Library // Generic contract binding to access the raw methods on
}

// ERC165LibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC165LibraryCallerRaw struct {
	Contract *ERC165LibraryCaller // Generic read-only contract binding to access the raw methods on
}

// ERC165LibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC165LibraryTransactorRaw struct {
	Contract *ERC165LibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewERC165Library creates a new instance of ERC165Library, bound to a specific deployed contract.
func NewERC165Library(address common.Address, backend bind.ContractBackend) (*ERC165Library, error) {
	contract, err := bindERC165Library(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC165Library{ERC165LibraryCaller: ERC165LibraryCaller{contract: contract}, ERC165LibraryTransactor: ERC165LibraryTransactor{contract: contract}, ERC165LibraryFilterer: ERC165LibraryFilterer{contract: contract}}, nil
}

// NewERC165LibraryCaller creates a new read-only instance of ERC165Library, bound to a specific deployed contract.
func NewERC165LibraryCaller(address common.Address, caller bind.ContractCaller) (*ERC165LibraryCaller, error) {
	contract, err := bindERC165Library(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC165LibraryCaller{contract: contract}, nil
}

// NewERC165LibraryTransactor creates a new write-only instance of ERC165Library, bound to a specific deployed contract.
func NewERC165LibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*ERC165LibraryTransactor, error) {
	contract, err := bindERC165Library(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC165LibraryTransactor{contract: contract}, nil
}

// NewERC165LibraryFilterer creates a new log filterer instance of ERC165Library, bound to a specific deployed contract.
func NewERC165LibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*ERC165LibraryFilterer, error) {
	contract, err := bindERC165Library(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC165LibraryFilterer{contract: contract}, nil
}

// bindERC165Library binds a generic wrapper to an already deployed contract.
func bindERC165Library(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ERC165LibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC165Library *ERC165LibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC165Library.Contract.ERC165LibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC165Library *ERC165LibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC165Library.Contract.ERC165LibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC165Library *ERC165LibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC165Library.Contract.ERC165LibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC165Library *ERC165LibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC165Library.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC165Library *ERC165LibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC165Library.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC165Library *ERC165LibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC165Library.Contract.contract.Transact(opts, method, params...)
}

// ETHDKGMetaData contains all meta data concerning the ETHDKG contract.
var ETHDKGMetaData = &bind.MetaData{
<<<<<<< Updated upstream
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validatorPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ethdkgAccusations\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ethdkgPhases\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"hook\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"publicKey\",\"type\":\"uint256[2]\"}],\"name\":\"AddressRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"GPKJSubmissionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"KeyShareSubmissionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1CorrectnessProof\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"keyShareG2\",\"type\":\"uint256[4]\"}],\"name\":\"KeyShareSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"mpk\",\"type\":\"uint256[4]\"}],\"name\":\"MPKSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"RegistrationComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"RegistrationOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"ShareDistributionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"encryptedShares\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"}],\"name\":\"SharesDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share3\",\"type\":\"uint256\"}],\"name\":\"ValidatorMemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethHeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"madHeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey3\",\"type\":\"uint256\"}],\"name\":\"ValidatorSetCompleted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dishonestAddresses\",\"type\":\"address[]\"}],\"name\":\"accuseParticipantDidNotDistributeShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dishonestAddresses\",\"type\":\"address[]\"}],\"name\":\"accuseParticipantDidNotSubmitGPKJ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dishonestAddresses\",\"type\":\"address[]\"}],\"name\":\"accuseParticipantDidNotSubmitKeyShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dishonestAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"encryptedShares\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"},{\"internalType\":\"uint256[2]\",\"name\":\"sharedKey\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"sharedKeyCorrectnessProof\",\"type\":\"uint256[2]\"}],\"name\":\"accuseParticipantDistributedBadShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dishonestAddresses\",\"type\":\"address[]\"}],\"name\":\"accuseParticipantNotRegistered\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"encryptedSharesHash\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[2][][]\",\"name\":\"commitments\",\"type\":\"uint256[2][][]\"},{\"internalType\":\"address\",\"name\":\"dishonestAddress\",\"type\":\"address\"}],\"name\":\"accuseParticipantSubmittedBadGPKJ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"complete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"encryptedShares\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"}],\"name\":\"distributeShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBadParticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfirmationLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getETHDKGPhase\",\"outputs\":[{\"internalType\":\"enumPhase\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMasterPublicKey\",\"outputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"\",\"type\":\"uint256[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinValidators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumParticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"getParticipantInternalState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"publicKey\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"enumPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"distributedSharesHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[2]\",\"name\":\"commitmentsFirstCoefficient\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"keyShares\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"gpkj\",\"type\":\"uint256[4]\"}],\"internalType\":\"structParticipant\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPhaseLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPhaseStartBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeETHDKG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAccusationWindowOver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMasterPublicKeySet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"publicKey\",\"type\":\"uint256[2]\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"confirmationLength_\",\"type\":\"uint16\"}],\"name\":\"setConfirmationLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"minValidators_\",\"type\":\"uint16\"}],\"name\":\"setMinNumberOfValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"phaseLength_\",\"type\":\"uint16\"}],\"name\":\"setPhaseLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validatorPool\",\"type\":\"address\"}],\"name\":\"setValidatorPoolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"gpkj\",\"type\":\"uint256[4]\"}],\"name\":\"submitGPKj\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1CorrectnessProof\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"keyShareG2\",\"type\":\"uint256[4]\"}],\"name\":\"submitKeyShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"masterPublicKey_\",\"type\":\"uint256[4]\"}],\"name\":\"submitMasterPublicKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b5060405162003da838038062003da8833981810160405281019062000037919062000431565b60008060006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060008060086101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506028600060196101000a81548161ffff021916908361ffff16021790555060066000601b6101000a81548161ffff021916908361ffff16021790555060008060116101000a81548163ffffffff021916908363ffffffff16021790555060008060156101000a81548161ffff021916908361ffff1602179055506004600060176101000a81548161ffff021916908361ffff16021790555083600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050620004c2565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002708262000243565b9050919050565b620002828162000263565b81146200028e57600080fd5b50565b600081519050620002a28162000277565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620002fd82620002b2565b810181811067ffffffffffffffff821117156200031f576200031e620002c3565b5b80604052505050565b6000620003346200022f565b9050620003428282620002f2565b919050565b600067ffffffffffffffff821115620003655762000364620002c3565b5b6200037082620002b2565b9050602081019050919050565b60005b838110156200039d57808201518184015260208101905062000380565b83811115620003ad576000848401525b50505050565b6000620003ca620003c48462000347565b62000328565b905082815260208101848484011115620003e957620003e8620002ad565b5b620003f68482856200037d565b509392505050565b600082601f830112620004165762000415620002a8565b5b815162000428848260208601620003b3565b91505092915050565b600080600080608085870312156200044e576200044d62000239565b5b60006200045e8782880162000291565b9450506020620004718782880162000291565b9350506040620004848782880162000291565b925050606085015167ffffffffffffffff811115620004a857620004a76200023e565b5b620004b687828801620003fe565b91505092959194509250565b6138d680620004d26000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c80638a3c24cc1161010f578063e8323224116100a2578063fb89c89911610071578063fb89c899146104e4578063fd478ca914610500578063fe0fe4221461051e578063ff3e5e451461053a576101e5565b8063e832322414610472578063ecbadb361461048e578063edbe7bf7146104ac578063f72c45b6146104c8576101e5565b8063d087d288116100de578063d087d288146103fe578063d410e8e41461041c578063dae681bc14610438578063e146372a14610454576101e5565b80638a3c24cc146103765780638c848d3214610392578063a2bc9c78146103b0578063bf7786b6146103ce576101e5565b8063522e117711610187578063704b6c0211610156578063704b6c02146103065780637df24ee914610322578063800012641461033e57806380b97e011461035a576101e5565b8063522e1177146102b857806357b51c9c146102c257806362a6523e146102cc5780636e9960c3146102e8576101e5565b80632958e81c116101c35780632958e81c146102425780633131b8701461026057806332d4d5701461027e5780633442af5c1461029c576101e5565b8063043a6f12146101ea57806308efcf1614610206578063106da57d14610224575b600080fd5b61020460048036038101906101ff91906121f5565b610556565b005b61020e6105f0565b60405161021b9190612259565b60405180910390f35b61022c610677565b604051610239919061228d565b60405180910390f35b61024a610692565b604051610257919061231f565b60405180910390f35b6102686106a8565b6040516102759190612259565b60405180910390f35b6102866106fc565b604051610293919061228d565b60405180910390f35b6102b660048036038101906102b19190612417565b610717565b005b6102c061088c565b005b6102ca6109f5565b005b6102e660048036038101906102e191906124f5565b610a8f565b005b6102f0610c0a565b6040516102fd9190612558565b60405180910390f35b610320600480360381019061031b9190612573565b610c34565b005b61033c600480360381019061033791906121f5565b610d08565b005b6103586004803603810190610353919061283d565b610da2565b005b610374600480360381019061036f91906129bb565b610f20565b005b610390600480360381019061038b9190612a6d565b611098565b005b61039a611148565b6040516103a7919061228d565b60405180910390f35b6103b8611163565b6040516103c5919061228d565b60405180910390f35b6103e860048036038101906103e39190612573565b61118a565b6040516103f59190612cae565b60405180910390f35b6104066113a1565b604051610413919061228d565b60405180910390f35b61043660048036038101906104319190612cca565b6113c8565b005b610452600480360381019061044d91906121f5565b61153d565b005b61045c6115d7565b6040516104699190612d59565b60405180910390f35b61048c60048036038101906104879190612cca565b611622565b005b6104966116bc565b6040516104a3919061228d565b60405180910390f35b6104c660048036038101906104c19190612d74565b6116d7565b005b6104e260048036038101906104dd91906121f5565b611858565b005b6104fe60048036038101906104f99190612a6d565b6118f2565b005b6105086119a2565b604051610515919061228d565b60405180910390f35b61053860048036038101906105339190612573565b6119c1565b005b610554600480360381019061054f9190612a6d565b611a95565b005b6105ec8160405160240161056a9190612ee5565b6040516020818303038152906040527f043a6f12000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611b45565b5050565b600080600560006004811061060857610607612f07565b5b015414158061062e57506000600560016004811061062957610628612f07565b5b015414155b8061065057506000600560026004811061064b5761064a612f07565b5b015414155b8061067257506000600560036004811061066d5761066c612f07565b5b015414155b905090565b60008060199054906101000a900461ffff1661ffff16905090565b60008060109054906101000a900460ff16905090565b60008060199054906101000a900461ffff1660026106c69190612f65565b61ffff16600060089054906101000a900467ffffffffffffffff166106eb9190612fa1565b67ffffffffffffffff164311905090565b60008060159054906101000a900461ffff1661ffff16905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663facd743b336040518263ffffffff1660e01b81526004016107729190612558565b602060405180830381865afa15801561078f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b3919061300b565b6107f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e990613095565b60405180910390fd5b610888816040516024016108069190613117565b6040516020818303038152906040527f3442af5c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611bf2565b5050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663facd743b336040518263ffffffff1660e01b81526004016108e79190612558565b602060405180830381865afa158015610904573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610928919061300b565b610967576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095e90613095565b60405180910390fd5b6109f26040516024016040516020818303038152906040527f522e1177000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611bf2565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7c906131a4565b60405180910390fd5b610a8d611c9f565b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663facd743b336040518263ffffffff1660e01b8152600401610aea9190612558565b602060405180830381865afa158015610b07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2b919061300b565b610b6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6190613095565b60405180910390fd5b610c04838383604051602401610b82939291906131c4565b6040516020818303038152906040527f62a6523e000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611bf2565b50505050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610cc4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cbb9061326e565b60405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610d9e81604051602401610d1c9190612ee5565b6040516020818303038152906040527f7df24ee9000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611b45565b5050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663facd743b336040518263ffffffff1660e01b8152600401610dfd9190612558565b602060405180830381865afa158015610e1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3e919061300b565b610e7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7490613095565b60405180910390fd5b610f1984848484604051602401610e9794939291906134ae565b6040516020818303038152906040527f80001264000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611b45565b5050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663facd743b336040518263ffffffff1660e01b8152600401610f7b9190612558565b602060405180830381865afa158015610f98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbc919061300b565b610ffb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff290613095565b60405180910390fd5b611093828260405160240161101192919061360e565b6040516020818303038152906040527f80b97e01000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611bf2565b505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611128576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111f9061326e565b60405180910390fd5b80600060196101000a81548161ffff021916908361ffff16021790555050565b600080601b9054906101000a900461ffff1661ffff16905090565b60008060089054906101000a900467ffffffffffffffff1667ffffffffffffffff16905090565b611192611ee7565b600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518061010001604052908160008201600280602002604051908101604052809291908260028015611219576020028201915b815481526020019060010190808311611205575b505050505081526020016002820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016002820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016002820160109054906101000a900460ff1660078111156112ab576112aa6122a8565b5b60078111156112bd576112bc6122a8565b5b81526020016003820154815260200160048201600280602002604051908101604052809291908260028015611307576020028201915b8154815260200190600101908083116112f3575b505050505081526020016006820160028060200260405190810160405280929190826002801561134c576020028201915b815481526020019060010190808311611338575b5050505050815260200160088201600480602002604051908101604052809291908260048015611391576020028201915b81548152602001906001019080831161137d575b5050505050815250509050919050565b60008060009054906101000a900467ffffffffffffffff1667ffffffffffffffff16905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663facd743b336040518263ffffffff1660e01b81526004016114239190612558565b602060405180830381865afa158015611440573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611464919061300b565b6114a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149a90613095565b60405180910390fd5b611539816040516024016114b79190612d59565b6040516020818303038152906040527fd410e8e4000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611bf2565b5050565b6115d3816040516024016115519190612ee5565b6040516020818303038152906040527fdae681bc000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611b45565b5050565b6115df611f6d565b6005600480602002604051908101604052809291908260048015611618576020028201915b815481526020019060010190808311611604575b5050505050905090565b6116b8816040516024016116369190612d59565b6040516020818303038152906040527fe8323224000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611bf2565b5050565b60008060179054906101000a900461ffff1661ffff16905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663facd743b336040518263ffffffff1660e01b81526004016117329190612558565b602060405180830381865afa15801561174f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611773919061300b565b6117b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117a990613095565b60405180910390fd5b61185085858585856040516024016117ce959493929190613645565b6040516020818303038152906040527fedbe7bf7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611b45565b505050505050565b6118ee8160405160240161186c9190612ee5565b6040516020818303038152906040527ff72c45b6000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611b45565b5050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611982576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119799061326e565b60405180910390fd5b80600060176101000a81548161ffff021916908361ffff16021790555050565b60008060119054906101000a900463ffffffff1663ffffffff16905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611a51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a489061326e565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611b25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b1c9061326e565b60405180910390fd5b806000601b6101000a81548161ffff021916908361ffff16021790555050565b6060600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1684604051611b919190613720565b600060405180830381855af49150503d8060008114611bcc576040519150601f19603f3d011682016040523d82523d6000602084013e611bd1565b606091505b509150915081611be8576040513d806000833e8082fd5b8092505050919050565b6060600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1684604051611c3e9190613720565b600060405180830381855af49150503d8060008114611c79576040519150601f19603f3d011682016040523d82523d6000602084013e611c7e565b606091505b509150915081611c95576040513d806000833e8082fd5b8092505050919050565b600060179054906101000a900461ffff1661ffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663274982406040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d45919061374c565b1015611d86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d7d906137eb565b60405180910390fd5b43600060086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060008081819054906101000a900467ffffffffffffffff1680929190611dd49061380b565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505060008060116101000a81548163ffffffff021916908363ffffffff16021790555060008060156101000a81548161ffff021916908361ffff16021790555060405180604001604052806000815260200160008152506009906002611e60929190611f8f565b5060008060106101000a81548160ff02191690836007811115611e8657611e856122a8565b5b021790555060056000611e999190611fcf565b7e92d3a0faf985375d3ea8563cdbdedd99bb694713af121204f50ccb198fb4764360008054906101000a900467ffffffffffffffff16604051611edd929190613877565b60405180910390a1565b604051806101000160405280611efb611feb565b8152602001600067ffffffffffffffff168152602001600067ffffffffffffffff16815260200160006007811115611f3657611f356122a8565b5b815260200160008019168152602001611f4d611feb565b8152602001611f5a611feb565b8152602001611f67611f6d565b81525090565b6040518060800160405280600490602082028036833780820191505090505090565b8260028101928215611fbe579160200282015b82811115611fbd578251825591602001919060010190611fa2565b5b509050611fcb919061200d565b5090565b5060008155600101600081556001016000815560010160009055565b6040518060400160405280600290602082028036833780820191505090505090565b5b8082111561202657600081600090555060010161200e565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61208c82612043565b810181811067ffffffffffffffff821117156120ab576120aa612054565b5b80604052505050565b60006120be61202a565b90506120ca8282612083565b919050565b600067ffffffffffffffff8211156120ea576120e9612054565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061212b82612100565b9050919050565b61213b81612120565b811461214657600080fd5b50565b60008135905061215881612132565b92915050565b600061217161216c846120cf565b6120b4565b90508083825260208201905060208402830185811115612194576121936120fb565b5b835b818110156121bd57806121a98882612149565b845260208401935050602081019050612196565b5050509392505050565b600082601f8301126121dc576121db61203e565b5b81356121ec84826020860161215e565b91505092915050565b60006020828403121561220b5761220a612034565b5b600082013567ffffffffffffffff81111561222957612228612039565b5b612235848285016121c7565b91505092915050565b60008115159050919050565b6122538161223e565b82525050565b600060208201905061226e600083018461224a565b92915050565b6000819050919050565b61228781612274565b82525050565b60006020820190506122a2600083018461227e565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600881106122e8576122e76122a8565b5b50565b60008190506122f9826122d7565b919050565b6000612309826122eb565b9050919050565b612319816122fe565b82525050565b60006020820190506123346000830184612310565b92915050565b600067ffffffffffffffff82111561235557612354612054565b5b602082029050919050565b61236981612274565b811461237457600080fd5b50565b60008135905061238681612360565b92915050565b600061239f61239a8461233a565b6120b4565b905080602084028301858111156123b9576123b86120fb565b5b835b818110156123e257806123ce8882612377565b8452602084019350506020810190506123bb565b5050509392505050565b600082601f8301126124015761240061203e565b5b600261240e84828561238c565b91505092915050565b60006040828403121561242d5761242c612034565b5b600061243b848285016123ec565b91505092915050565b600067ffffffffffffffff82111561245f5761245e612054565b5b602082029050919050565b600061247d61247884612444565b6120b4565b90508060208402830185811115612497576124966120fb565b5b835b818110156124c057806124ac8882612377565b845260208401935050602081019050612499565b5050509392505050565b600082601f8301126124df576124de61203e565b5b60046124ec84828561246a565b91505092915050565b6000806000610100848603121561250f5761250e612034565b5b600061251d868287016123ec565b935050604061252e868287016123ec565b925050608061253f868287016124ca565b9150509250925092565b61255281612120565b82525050565b600060208201905061256d6000830184612549565b92915050565b60006020828403121561258957612588612034565b5b600061259784828501612149565b91505092915050565b600067ffffffffffffffff8211156125bb576125ba612054565b5b602082029050602081019050919050565b6000819050919050565b6125df816125cc565b81146125ea57600080fd5b50565b6000813590506125fc816125d6565b92915050565b6000612615612610846125a0565b6120b4565b90508083825260208201905060208402830185811115612638576126376120fb565b5b835b81811015612661578061264d88826125ed565b84526020840193505060208101905061263a565b5050509392505050565b600082601f8301126126805761267f61203e565b5b8135612690848260208601612602565b91505092915050565b600067ffffffffffffffff8211156126b4576126b3612054565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156126e0576126df612054565b5b602082029050602081019050919050565b60006127046126ff846126c5565b6120b4565b90508083825260208201905060408402830185811115612727576127266120fb565b5b835b81811015612750578061273c88826123ec565b845260208401935050604081019050612729565b5050509392505050565b600082601f83011261276f5761276e61203e565b5b813561277f8482602086016126f1565b91505092915050565b600061279b61279684612699565b6120b4565b905080838252602082019050602084028301858111156127be576127bd6120fb565b5b835b8181101561280557803567ffffffffffffffff8111156127e3576127e261203e565b5b8086016127f0898261275a565b855260208501945050506020810190506127c0565b5050509392505050565b600082601f8301126128245761282361203e565b5b8135612834848260208601612788565b91505092915050565b6000806000806080858703121561285757612856612034565b5b600085013567ffffffffffffffff81111561287557612874612039565b5b612881878288016121c7565b945050602085013567ffffffffffffffff8111156128a2576128a1612039565b5b6128ae8782880161266b565b935050604085013567ffffffffffffffff8111156128cf576128ce612039565b5b6128db8782880161280f565b92505060606128ec87828801612149565b91505092959194509250565b600067ffffffffffffffff82111561291357612912612054565b5b602082029050602081019050919050565b6000612937612932846128f8565b6120b4565b9050808382526020820190506020840283018581111561295a576129596120fb565b5b835b81811015612983578061296f8882612377565b84526020840193505060208101905061295c565b5050509392505050565b600082601f8301126129a2576129a161203e565b5b81356129b2848260208601612924565b91505092915050565b600080604083850312156129d2576129d1612034565b5b600083013567ffffffffffffffff8111156129f0576129ef612039565b5b6129fc8582860161298d565b925050602083013567ffffffffffffffff811115612a1d57612a1c612039565b5b612a298582860161275a565b9150509250929050565b600061ffff82169050919050565b612a4a81612a33565b8114612a5557600080fd5b50565b600081359050612a6781612a41565b92915050565b600060208284031215612a8357612a82612034565b5b6000612a9184828501612a58565b91505092915050565b600060029050919050565b600081905092915050565b6000819050919050565b612ac381612274565b82525050565b6000612ad58383612aba565b60208301905092915050565b6000602082019050919050565b612af781612a9a565b612b018184612aa5565b9250612b0c82612ab0565b8060005b83811015612b3d578151612b248782612ac9565b9650612b2f83612ae1565b925050600181019050612b10565b505050505050565b600067ffffffffffffffff82169050919050565b612b6281612b45565b82525050565b612b71816122fe565b82525050565b612b80816125cc565b82525050565b600060049050919050565b600081905092915050565b6000819050919050565b6000602082019050919050565b612bbc81612b86565b612bc68184612b91565b9250612bd182612b9c565b8060005b83811015612c02578151612be98782612ac9565b9650612bf483612ba6565b925050600181019050612bd5565b505050505050565b6101c082016000820151612c216000850182612aee565b506020820151612c346040850182612b59565b506040820151612c476060850182612b59565b506060820151612c5a6080850182612b68565b506080820151612c6d60a0850182612b77565b5060a0820151612c8060c0850182612aee565b5060c0820151612c94610100850182612aee565b5060e0820151612ca8610140850182612bb3565b50505050565b60006101c082019050612cc46000830184612c0a565b92915050565b600060808284031215612ce057612cdf612034565b5b6000612cee848285016124ca565b91505092915050565b600081905092915050565b612d0b81612b86565b612d158184612cf7565b9250612d2082612b9c565b8060005b83811015612d51578151612d388782612ac9565b9650612d4383612ba6565b925050600181019050612d24565b505050505050565b6000608082019050612d6e6000830184612d02565b92915050565b600080600080600060e08688031215612d9057612d8f612034565b5b6000612d9e88828901612149565b955050602086013567ffffffffffffffff811115612dbf57612dbe612039565b5b612dcb8882890161298d565b945050604086013567ffffffffffffffff811115612dec57612deb612039565b5b612df88882890161275a565b9350506060612e09888289016123ec565b92505060a0612e1a888289016123ec565b9150509295509295909350565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612e5c81612120565b82525050565b6000612e6e8383612e53565b60208301905092915050565b6000602082019050919050565b6000612e9282612e27565b612e9c8185612e32565b9350612ea783612e43565b8060005b83811015612ed8578151612ebf8882612e62565b9750612eca83612e7a565b925050600181019050612eab565b5085935050505092915050565b60006020820190508181036000830152612eff8184612e87565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612f7082612a33565b9150612f7b83612a33565b92508161ffff0483118215151615612f9657612f95612f36565b5b828202905092915050565b6000612fac82612b45565b9150612fb783612b45565b92508267ffffffffffffffff03821115612fd457612fd3612f36565b5b828201905092915050565b612fe88161223e565b8114612ff357600080fd5b50565b60008151905061300581612fdf565b92915050565b60006020828403121561302157613020612034565b5b600061302f84828501612ff6565b91505092915050565b600082825260208201905092915050565b7f455448444b473a204f6e6c792076616c696461746f727320616c6c6f77656421600082015250565b600061307f602083613038565b915061308a82613049565b602082019050919050565b600060208201905081810360008301526130ae81613072565b9050919050565b600081905092915050565b6130c981612a9a565b6130d381846130b5565b92506130de82612ab0565b8060005b8381101561310f5781516130f68782612ac9565b965061310183612ae1565b9250506001810190506130e2565b505050505050565b600060408201905061312c60008301846130c0565b92915050565b7f455448444b473a204f6e6c792076616c696461746f72506f6f6c20636f6e747260008201527f61637420616c6c6f776564210000000000000000000000000000000000000000602082015250565b600061318e602c83613038565b915061319982613132565b604082019050919050565b600060208201905081810360008301526131bd81613181565b9050919050565b6000610100820190506131da60008301866130c0565b6131e760408301856130c0565b6131f46080830184612d02565b949350505050565b7f455448444b473a2072657175697265732061646d696e2070726976696c65676560008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000613258602183613038565b9150613263826131fc565b604082019050919050565b600060208201905081810360008301526132878161324b565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006132c68383612b77565b60208301905092915050565b6000602082019050919050565b60006132ea8261328e565b6132f48185613299565b93506132ff836132aa565b8060005b8381101561333057815161331788826132ba565b9750613322836132d2565b925050600181019050613303565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006133a18383612aee565b60408301905092915050565b6000602082019050919050565b60006133c582613369565b6133cf8185613374565b93506133da83613385565b8060005b8381101561340b5781516133f28882613395565b97506133fd836133ad565b9250506001810190506133de565b5085935050505092915050565b600061342483836133ba565b905092915050565b6000602082019050919050565b60006134448261333d565b61344e8185613348565b93508360208202850161346085613359565b8060005b8581101561349c578484038952815161347d8582613418565b94506134888361342c565b925060208a01995050600181019050613464565b50829750879550505050505092915050565b600060808201905081810360008301526134c88187612e87565b905081810360208301526134dc81866132df565b905081810360408301526134f08185613439565b90506134ff6060830184612549565b95945050505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000602082019050919050565b600061354c82613508565b6135568185613513565b935061356183613524565b8060005b838110156135925781516135798882612ac9565b975061358483613534565b925050600181019050613565565b5085935050505092915050565b600082825260208201905092915050565b60006135bb82613369565b6135c5818561359f565b93506135d083613385565b8060005b838110156136015781516135e88882613395565b97506135f3836133ad565b9250506001810190506135d4565b5085935050505092915050565b600060408201905081810360008301526136288185613541565b9050818103602083015261363c81846135b0565b90509392505050565b600060e08201905061365a6000830188612549565b818103602083015261366c8187613541565b9050818103604083015261368081866135b0565b905061368f60608301856130c0565b61369c60a08301846130c0565b9695505050505050565b600081519050919050565b600081905092915050565b60005b838110156136da5780820151818401526020810190506136bf565b838111156136e9576000848401525b50505050565b60006136fa826136a6565b61370481856136b1565b93506137148185602086016136bc565b80840191505092915050565b600061372c82846136ef565b915081905092915050565b60008151905061374681612360565b92915050565b60006020828403121561376257613761612034565b5b600061377084828501613737565b91505092915050565b7f455448444b473a204d696e696d756d206e756d626572206f662076616c69646160008201527f746f7273207374616b6564206e6f74206d657421000000000000000000000000602082015250565b60006137d5603483613038565b91506137e082613779565b604082019050919050565b60006020820190508181036000830152613804816137c8565b9050919050565b600061381682612b45565b915067ffffffffffffffff82141561383157613830612f36565b5b600182019050919050565b6000819050919050565b600061386161385c61385784612b45565b61383c565b612274565b9050919050565b61387181613846565b82525050565b600060408201905061388c600083018561227e565b6138996020830184613868565b939250505056fea264697066735822122073dbe412bc68c3750ad27b37a498c5a147f7a66450ecf270f2c40a369cf8ff1e64736f6c634300080b0033",
=======
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validatorPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ethdkgAccusations\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ethdkgPhases\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"hook\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"publicKey\",\"type\":\"uint256[2]\"}],\"name\":\"AddressRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"GPKJSubmissionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"KeyShareSubmissionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1CorrectnessProof\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"keyShareG2\",\"type\":\"uint256[4]\"}],\"name\":\"KeyShareSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"mpk\",\"type\":\"uint256[4]\"}],\"name\":\"MPKSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"RegistrationComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"phaseLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"confirmationLength\",\"type\":\"uint256\"}],\"name\":\"RegistrationOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"ShareDistributionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"encryptedShares\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"}],\"name\":\"SharesDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share3\",\"type\":\"uint256\"}],\"name\":\"ValidatorMemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethHeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"madHeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey3\",\"type\":\"uint256\"}],\"name\":\"ValidatorSetCompleted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dishonestAddresses\",\"type\":\"address[]\"}],\"name\":\"accuseParticipantDidNotDistributeShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dishonestAddresses\",\"type\":\"address[]\"}],\"name\":\"accuseParticipantDidNotSubmitGPKJ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dishonestAddresses\",\"type\":\"address[]\"}],\"name\":\"accuseParticipantDidNotSubmitKeyShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dishonestAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"encryptedShares\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"},{\"internalType\":\"uint256[2]\",\"name\":\"sharedKey\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"sharedKeyCorrectnessProof\",\"type\":\"uint256[2]\"}],\"name\":\"accuseParticipantDistributedBadShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dishonestAddresses\",\"type\":\"address[]\"}],\"name\":\"accuseParticipantNotRegistered\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"encryptedSharesHash\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[2][][]\",\"name\":\"commitments\",\"type\":\"uint256[2][][]\"},{\"internalType\":\"address\",\"name\":\"dishonestAddress\",\"type\":\"address\"}],\"name\":\"accuseParticipantSubmittedBadGPKJ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"complete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"encryptedShares\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"}],\"name\":\"distributeShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBadParticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfirmationLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getETHDKGPhase\",\"outputs\":[{\"internalType\":\"enumPhase\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMasterPublicKey\",\"outputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"\",\"type\":\"uint256[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinValidators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumParticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"getParticipantInternalState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"publicKey\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"enumPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"distributedSharesHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[2]\",\"name\":\"commitmentsFirstCoefficient\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"keyShares\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"gpkj\",\"type\":\"uint256[4]\"}],\"internalType\":\"structParticipant\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPhaseLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPhaseStartBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeETHDKG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAccusationWindowOver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMasterPublicKeySet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"publicKey\",\"type\":\"uint256[2]\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"confirmationLength_\",\"type\":\"uint16\"}],\"name\":\"setConfirmationLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"minValidators_\",\"type\":\"uint16\"}],\"name\":\"setMinNumberOfValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"phaseLength_\",\"type\":\"uint16\"}],\"name\":\"setPhaseLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validatorPool\",\"type\":\"address\"}],\"name\":\"setValidatorPoolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"gpkj\",\"type\":\"uint256[4]\"}],\"name\":\"submitGPKJ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1CorrectnessProof\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"keyShareG2\",\"type\":\"uint256[4]\"}],\"name\":\"submitKeyShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"masterPublicKey_\",\"type\":\"uint256[4]\"}],\"name\":\"submitMasterPublicKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b5060405162002c1b38038062002c1b8339810160408190526200003491620000ea565b50600080547fffffff000000000000000000000000ff00000000000000000000000000000000166401800a000160ba1b179055600180546001600160a01b03199081166001600160a01b039586161790915560028054821693851693909317909255600380548316919093161790915560048054339216919091179055620001ff565b80516001600160a01b0381168114620000cf57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600080600080608085870312156200010157600080fd5b6200010c85620000b7565b935060206200011d818701620000b7565b93506200012d60408701620000b7565b60608701519093506001600160401b03808211156200014b57600080fd5b818801915088601f8301126200016057600080fd5b815181811115620001755762000175620000d4565b604051601f8201601f19908116603f01168101908382118183101715620001a057620001a0620000d4565b816040528281528b86848701011115620001b957600080fd5b600093505b82841015620001dd5784840186015181850187015292850192620001be565b82841115620001ef5760008684830101525b989b979a50959850505050505050565b612a0c806200020f6000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c806380b97e011161010f578063e8323224116100a2578063fb89c89911610071578063fb89c89914610476578063fd478ca914610489578063fe0fe422146104ac578063ff3e5e45146104bf57600080fd5b8063e832322414610416578063ecbadb3614610429578063edbe7bf714610450578063f72c45b61461046357600080fd5b8063bf7786b6116100de578063bf7786b6146103bc578063d087d288146103dc578063dae681bc146103ee578063e146372a1461040157600080fd5b806380b97e011461034d5780638a3c24cc146103605780638c848d3214610373578063a2bc9c781461039e57600080fd5b80633442af5c116101875780636e9960c3116101565780636e9960c3146102ec578063704b6c02146103145780637df24ee914610327578063800012641461033a57600080fd5b80633442af5c146102b6578063522e1177146102c957806357b51c9c146102d157806362a6523e146102d957600080fd5b8063106da57d116101c3578063106da57d1461022f5780632958e81c146102625780633131b8701461028957806332d4d5701461029157600080fd5b8063043a6f12146101ea57806308efcf16146101ff578063101f49c11461021c575b600080fd5b6101fd6101f8366004611ff1565b6104d2565b005b610207610565565b60405190151581526020015b60405180910390f35b6101fd61022a36600461209c565b610596565b600054790100000000000000000000000000000000000000000000000000900461ffff165b604051908152602001610213565b600054700100000000000000000000000000000000900460ff166040516102139190612122565b610207610722565b6000547501000000000000000000000000000000000000000000900461ffff16610254565b6101fd6102c4366004612181565b61078a565b6101fd610911565b6101fd610a6c565b6101fd6102e736600461219d565b610b1d565b60045460405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610213565b6101fd6103223660046121e4565b610cae565b6101fd610335366004611ff1565b610d9c565b6101fd6103483660046122e3565b610e2b565b6101fd61035b36600461242b565b610fbf565b6101fd61036e36600461248f565b61114d565b6000547b01000000000000000000000000000000000000000000000000000000900461ffff16610254565b60005468010000000000000000900467ffffffffffffffff16610254565b6103cf6103ca3660046121e4565b611246565b60405161021391906124f9565b60005467ffffffffffffffff16610254565b6101fd6103fc366004611ff1565b6113d0565b61040961145f565b604051610213919061258f565b6101fd61042436600461209c565b61149a565b60005477010000000000000000000000000000000000000000000000900461ffff16610254565b6101fd61045e36600461259d565b611529565b6101fd610471366004611ff1565b6116c0565b6101fd61048436600461248f565b61174f565b60005471010000000000000000000000000000000000900463ffffffff16610254565b6101fd6104ba3660046121e4565b611846565b6101fd6104cd36600461248f565b611934565b610561816040516024016104e69190612686565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f043a6f1200000000000000000000000000000000000000000000000000000000179052611a2f565b5050565b600554600090151580610579575060065415155b80610585575060075415155b80610591575060085415155b905090565b6001546040517ffacd743b00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063facd743b90602401602060405180830381865afa158015610604573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106289190612699565b610693576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f455448444b473a204f6e6c792076616c696461746f727320616c6c6f7765642160448201526064015b60405180910390fd5b610561816040516024016106a7919061258f565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f101f49c100000000000000000000000000000000000000000000000000000000179052611abd565b6000805461075290790100000000000000000000000000000000000000000000000000900461ffff1660026126ea565b6000546107799161ffff169068010000000000000000900467ffffffffffffffff16612714565b67ffffffffffffffff164311905090565b6001546040517ffacd743b00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063facd743b90602401602060405180830381865afa1580156107f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081c9190612699565b610882576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f455448444b473a204f6e6c792076616c696461746f727320616c6c6f77656421604482015260640161068a565b610561816040516024016108969190612740565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f3442af5c00000000000000000000000000000000000000000000000000000000179052611abd565b6001546040517ffacd743b00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063facd743b90602401602060405180830381865afa15801561097f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a39190612699565b610a09576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f455448444b473a204f6e6c792076616c696461746f727320616c6c6f77656421604482015260640161068a565b6040805160048152602481019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f522e117700000000000000000000000000000000000000000000000000000000179052610a6990611abd565b50565b60015473ffffffffffffffffffffffffffffffffffffffff163314610b13576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f455448444b473a204f6e6c792076616c696461746f72506f6f6c20636f6e747260448201527f61637420616c6c6f776564210000000000000000000000000000000000000000606482015260840161068a565b610b1b611aed565b565b6001546040517ffacd743b00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063facd743b90602401602060405180830381865afa158015610b8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610baf9190612699565b610c15576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f455448444b473a204f6e6c792076616c696461746f727320616c6c6f77656421604482015260640161068a565b610ca8838383604051602401610c2d9392919061274e565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f62a6523e00000000000000000000000000000000000000000000000000000000179052611abd565b50505050565b60045473ffffffffffffffffffffffffffffffffffffffff163314610d55576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f455448444b473a2072657175697265732061646d696e2070726976696c65676560448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161068a565b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b61056181604051602401610db09190612686565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f7df24ee900000000000000000000000000000000000000000000000000000000179052611a2f565b6001546040517ffacd743b00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063facd743b90602401602060405180830381865afa158015610e99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebd9190612699565b610f23576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f455448444b473a204f6e6c792076616c696461746f727320616c6c6f77656421604482015260640161068a565b610fb884848484604051602401610f3d94939291906127b1565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f8000126400000000000000000000000000000000000000000000000000000000179052611a2f565b5050505050565b6001546040517ffacd743b00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063facd743b90602401602060405180830381865afa15801561102d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110519190612699565b6110b7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f455448444b473a204f6e6c792076616c696461746f727320616c6c6f77656421604482015260640161068a565b61114882826040516024016110cd9291906128cd565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f80b97e0100000000000000000000000000000000000000000000000000000000179052611abd565b505050565b60045473ffffffffffffffffffffffffffffffffffffffff1633146111f4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f455448444b473a2072657175697265732061646d696e2070726976696c65676560448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161068a565b6000805461ffff909216790100000000000000000000000000000000000000000000000000027fffffffffff0000ffffffffffffffffffffffffffffffffffffffffffffffffff909216919091179055565b61124e611dc9565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600b602052604090819020815161014081019092528161010081018260028282826020028201915b815481526020019060010190808311611292575050509183525050600282015467ffffffffffffffff8082166020840152680100000000000000008204166040830152606090910190700100000000000000000000000000000000900460ff166007811115611303576113036120b8565b6007811115611314576113146120b8565b8152600382015460208201526040805180820182529101906004830160028282826020028201915b81548152602001906001019080831161133c575050509183525050604080518082019182905260209092019190600684019060029082845b81548152602001906001019080831161137457505050918352505060408051608081019182905260209092019190600884019060049082845b8154815260200190600101908083116113ad575050505050815250509050919050565b610561816040516024016113e49190612686565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fdae681bc00000000000000000000000000000000000000000000000000000000179052611a2f565b611467611e25565b6040805160808101918290529060059060049082845b81548152602001906001019080831161147d575050505050905090565b610561816040516024016114ae919061258f565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fe832322400000000000000000000000000000000000000000000000000000000179052611abd565b6001546040517ffacd743b00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063facd743b90602401602060405180830381865afa158015611597573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115bb9190612699565b611621576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f455448444b473a204f6e6c792076616c696461746f727320616c6c6f77656421604482015260640161068a565b6116b8858585858560405160240161163d9594939291906128f2565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fedbe7bf700000000000000000000000000000000000000000000000000000000179052611a2f565b505050505050565b610561816040516024016116d49190612686565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167ff72c45b600000000000000000000000000000000000000000000000000000000179052611a2f565b60045473ffffffffffffffffffffffffffffffffffffffff1633146117f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f455448444b473a2072657175697265732061646d696e2070726976696c65676560448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161068a565b6000805461ffff90921677010000000000000000000000000000000000000000000000027fffffffffffffff0000ffffffffffffffffffffffffffffffffffffffffffffff909216919091179055565b60045473ffffffffffffffffffffffffffffffffffffffff1633146118ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f455448444b473a2072657175697265732061646d696e2070726976696c65676560448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161068a565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60045473ffffffffffffffffffffffffffffffffffffffff1633146119db576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f455448444b473a2072657175697265732061646d696e2070726976696c65676560448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161068a565b6000805461ffff9092167b01000000000000000000000000000000000000000000000000000000027fffffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffffff909216919091179055565b600254604051606091600091829173ffffffffffffffffffffffffffffffffffffffff1690611a5f90869061295a565b600060405180830381855af49150503d8060008114611a9a576040519150601f19603f3d011682016040523d82523d6000602084013e611a9f565b606091505b509150915081611ab6576040513d806000833e8082fd5b9392505050565b600354604051606091600091829173ffffffffffffffffffffffffffffffffffffffff1690611a5f90869061295a565b600054600154604080517f2749824000000000000000000000000000000000000000000000000000000000815290517701000000000000000000000000000000000000000000000090930461ffff169273ffffffffffffffffffffffffffffffffffffffff909216916327498240916004808201926020929091908290030181865afa158015611b81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba59190612995565b1015611c33576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603460248201527f455448444b473a204d696e696d756d206e756d626572206f662076616c69646160448201527f746f7273207374616b6564206e6f74206d657421000000000000000000000000606482015260840161068a565b6000805467ffffffffffffffff43811668010000000000000000027fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff83168117845581169116179080611c85836129ae565b825467ffffffffffffffff9182166101009390930a928302919092021990911617905550600080547fffffffffffffffffff000000000000ffffffffffffffffffffffffffffffffff168155604080518082019091528181526020810191909152611cf4906009906002611e43565b50600080547fffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffff81168083556005839055600683905560078390556008929092556040805143815267ffffffffffffffff9092166020830152790100000000000000000000000000000000000000000000000000830461ffff908116838301527b01000000000000000000000000000000000000000000000000000000909304909216606082015290517fc867fa8c9b2d0ef5b1687773346ccc44cbc8b392ec2934a6178ffe529f311c8d9181900360800190a1565b604051806101000160405280611ddd611e81565b81526000602082018190526040820181905260608201819052608082015260a001611e06611e81565b8152602001611e13611e81565b8152602001611e20611e25565b905290565b60405180608001604052806004906020820280368337509192915050565b8260028101928215611e71579160200282015b82811115611e71578251825591602001919060010190611e56565b50611e7d929150611e9f565b5090565b60405180604001604052806002906020820280368337509192915050565b5b80821115611e7d5760008155600101611ea0565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715611f2a57611f2a611eb4565b604052919050565b600067ffffffffffffffff821115611f4c57611f4c611eb4565b5060051b60200190565b803573ffffffffffffffffffffffffffffffffffffffff81168114611f7a57600080fd5b919050565b600082601f830112611f9057600080fd5b81356020611fa5611fa083611f32565b611ee3565b82815260059290921b84018101918181019086841115611fc457600080fd5b8286015b84811015611fe657611fd981611f56565b8352918301918301611fc8565b509695505050505050565b60006020828403121561200357600080fd5b813567ffffffffffffffff81111561201a57600080fd5b61202684828501611f7f565b949350505050565b600082601f83011261203f57600080fd5b6040516080810181811067ffffffffffffffff8211171561206257612062611eb4565b60405280608084018581111561207757600080fd5b845b81811015612091578035835260209283019201612079565b509195945050505050565b6000608082840312156120ae57600080fd5b611ab6838361202e565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6008811061211e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b6020810161213082846120e7565b92915050565b600082601f83011261214757600080fd5b6040516040810181811067ffffffffffffffff8211171561216a5761216a611eb4565b806040525080604084018581111561207757600080fd5b60006040828403121561219357600080fd5b611ab68383612136565b600080600061010084860312156121b357600080fd5b6121bd8585612136565b92506121cc8560408601612136565b91506121db856080860161202e565b90509250925092565b6000602082840312156121f657600080fd5b611ab682611f56565b600082601f83011261221057600080fd5b81356020612220611fa083611f32565b82815260069290921b8401810191818101908684111561223f57600080fd5b8286015b84811015611fe6576122558882612136565b835291830191604001612243565b600082601f83011261227457600080fd5b81356020612284611fa083611f32565b82815260059290921b840181019181810190868411156122a357600080fd5b8286015b84811015611fe657803567ffffffffffffffff8111156122c75760008081fd5b6122d58986838b01016121ff565b8452509183019183016122a7565b600080600080608085870312156122f957600080fd5b843567ffffffffffffffff8082111561231157600080fd5b61231d88838901611f7f565b955060209150818701358181111561233457600080fd5b8701601f8101891361234557600080fd5b8035612353611fa082611f32565b81815260059190911b8201840190848101908b83111561237257600080fd5b928501925b8284101561239057833582529285019290850190612377565b975050505060408701359150808211156123a957600080fd5b506123b687828801612263565b9250506123c560608601611f56565b905092959194509250565b600082601f8301126123e157600080fd5b813560206123f1611fa083611f32565b82815260059290921b8401810191818101908684111561241057600080fd5b8286015b84811015611fe65780358352918301918301612414565b6000806040838503121561243e57600080fd5b823567ffffffffffffffff8082111561245657600080fd5b612462868387016123d0565b9350602085013591508082111561247857600080fd5b50612485858286016121ff565b9150509250929050565b6000602082840312156124a157600080fd5b813561ffff81168114611ab657600080fd5b8060005b6002811015610ca85781518452602093840193909101906001016124b7565b8060005b6004811015610ca85781518452602093840193909101906001016124da565b60006101c08201905061250d8284516124b3565b602083015167ffffffffffffffff80821660408501528060408601511660608501525050606083015161254360808401826120e7565b50608083015160a083015260a083015161256060c08401826124b3565b5060c08301516125746101008401826124b3565b5060e08301516125886101408401826124d6565b5092915050565b6080810161213082846124d6565b600080600080600060e086880312156125b557600080fd5b6125be86611f56565b9450602086013567ffffffffffffffff808211156125db57600080fd5b6125e789838a016123d0565b955060408801359150808211156125fd57600080fd5b5061260a888289016121ff565b93505061261a8760608801612136565b91506126298760a08801612136565b90509295509295909350565b600081518084526020808501945080840160005b8381101561267b57815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101612649565b509495945050505050565b602081526000611ab66020830184612635565b6000602082840312156126ab57600080fd5b81518015158114611ab657600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061ffff8083168185168183048111821515161561270b5761270b6126bb565b02949350505050565b600067ffffffffffffffff808316818516808303821115612737576127376126bb565b01949350505050565b6040810161213082846124b3565b610100810161275d82866124b3565b61276a60408301856124b3565b61202660808301846124d6565b600081518084526020808501945080840160005b8381101561267b5761279e8783516124b3565b604096909601959082019060010161278b565b6080815260006127c46080830187612635565b82810360208481019190915286518083528782019282019060005b818110156127fb578451835293830193918301916001016127df565b5050848103604086015286518082528282019350600581901b8201830183890160005b8381101561286a577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0858403018752612858838351612777565b9686019692509085019060010161281e565b505073ffffffffffffffffffffffffffffffffffffffff8816606088015294506128949350505050565b95945050505050565b600081518084526020808501945080840160005b8381101561267b578151875295820195908201906001016128b1565b6040815260006128e0604083018561289d565b82810360208401526128948185612777565b73ffffffffffffffffffffffffffffffffffffffff8616815260e06020820152600061292160e083018761289d565b82810360408401526129338187612777565b91505061294360608301856124b3565b61295060a08301846124b3565b9695505050505050565b6000825160005b8181101561297b5760208186018101518583015201612961565b8181111561298a576000828501525b509190910192915050565b6000602082840312156129a757600080fd5b5051919050565b600067ffffffffffffffff808316818114156129cc576129cc6126bb565b600101939250505056fea2646970667358221220ef89c711b5b2bdf199700a215354b60c81a69f71557b0f5f08c97582458bc3fd64736f6c634300080b0033",
>>>>>>> Stashed changes
}

// ETHDKGABI is the input ABI used to generate the binding from.
// Deprecated: Use ETHDKGMetaData.ABI instead.
var ETHDKGABI = ETHDKGMetaData.ABI

// ETHDKGBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ETHDKGMetaData.Bin instead.
var ETHDKGBin = ETHDKGMetaData.Bin

// DeployETHDKG deploys a new Ethereum contract, binding an instance of ETHDKG to it.
func DeployETHDKG(auth *bind.TransactOpts, backend bind.ContractBackend, validatorPool common.Address, ethdkgAccusations common.Address, ethdkgPhases common.Address, hook []byte) (common.Address, *types.Transaction, *ETHDKG, error) {
	parsed, err := ETHDKGMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ETHDKGBin), backend, validatorPool, ethdkgAccusations, ethdkgPhases, hook)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ETHDKG{ETHDKGCaller: ETHDKGCaller{contract: contract}, ETHDKGTransactor: ETHDKGTransactor{contract: contract}, ETHDKGFilterer: ETHDKGFilterer{contract: contract}}, nil
}

// ETHDKG is an auto generated Go binding around an Ethereum contract.
type ETHDKG struct {
	ETHDKGCaller     // Read-only binding to the contract
	ETHDKGTransactor // Write-only binding to the contract
	ETHDKGFilterer   // Log filterer for contract events
}

// ETHDKGCaller is an auto generated read-only Go binding around an Ethereum contract.
type ETHDKGCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ETHDKGTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ETHDKGFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ETHDKGSession struct {
	Contract     *ETHDKG           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ETHDKGCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ETHDKGCallerSession struct {
	Contract *ETHDKGCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ETHDKGTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ETHDKGTransactorSession struct {
	Contract     *ETHDKGTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ETHDKGRaw is an auto generated low-level Go binding around an Ethereum contract.
type ETHDKGRaw struct {
	Contract *ETHDKG // Generic contract binding to access the raw methods on
}

// ETHDKGCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ETHDKGCallerRaw struct {
	Contract *ETHDKGCaller // Generic read-only contract binding to access the raw methods on
}

// ETHDKGTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ETHDKGTransactorRaw struct {
	Contract *ETHDKGTransactor // Generic write-only contract binding to access the raw methods on
}

// NewETHDKG creates a new instance of ETHDKG, bound to a specific deployed contract.
func NewETHDKG(address common.Address, backend bind.ContractBackend) (*ETHDKG, error) {
	contract, err := bindETHDKG(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ETHDKG{ETHDKGCaller: ETHDKGCaller{contract: contract}, ETHDKGTransactor: ETHDKGTransactor{contract: contract}, ETHDKGFilterer: ETHDKGFilterer{contract: contract}}, nil
}

// NewETHDKGCaller creates a new read-only instance of ETHDKG, bound to a specific deployed contract.
func NewETHDKGCaller(address common.Address, caller bind.ContractCaller) (*ETHDKGCaller, error) {
	contract, err := bindETHDKG(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ETHDKGCaller{contract: contract}, nil
}

// NewETHDKGTransactor creates a new write-only instance of ETHDKG, bound to a specific deployed contract.
func NewETHDKGTransactor(address common.Address, transactor bind.ContractTransactor) (*ETHDKGTransactor, error) {
	contract, err := bindETHDKG(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ETHDKGTransactor{contract: contract}, nil
}

// NewETHDKGFilterer creates a new log filterer instance of ETHDKG, bound to a specific deployed contract.
func NewETHDKGFilterer(address common.Address, filterer bind.ContractFilterer) (*ETHDKGFilterer, error) {
	contract, err := bindETHDKG(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ETHDKGFilterer{contract: contract}, nil
}

// bindETHDKG binds a generic wrapper to an already deployed contract.
func bindETHDKG(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ETHDKGABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETHDKG *ETHDKGRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ETHDKG.Contract.ETHDKGCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETHDKG *ETHDKGRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKG.Contract.ETHDKGTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETHDKG *ETHDKGRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETHDKG.Contract.ETHDKGTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETHDKG *ETHDKGCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ETHDKG.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETHDKG *ETHDKGTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKG.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETHDKG *ETHDKGTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETHDKG.Contract.contract.Transact(opts, method, params...)
}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_ETHDKG *ETHDKGCaller) GetAdmin(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "getAdmin")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_ETHDKG *ETHDKGSession) GetAdmin() (common.Address, error) {
	return _ETHDKG.Contract.GetAdmin(&_ETHDKG.CallOpts)
}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_ETHDKG *ETHDKGCallerSession) GetAdmin() (common.Address, error) {
	return _ETHDKG.Contract.GetAdmin(&_ETHDKG.CallOpts)
}

// GetBadParticipants is a free data retrieval call binding the contract method 0x32d4d570.
//
// Solidity: function getBadParticipants() view returns(uint256)
func (_ETHDKG *ETHDKGCaller) GetBadParticipants(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "getBadParticipants")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetBadParticipants is a free data retrieval call binding the contract method 0x32d4d570.
//
// Solidity: function getBadParticipants() view returns(uint256)
func (_ETHDKG *ETHDKGSession) GetBadParticipants() (*big.Int, error) {
	return _ETHDKG.Contract.GetBadParticipants(&_ETHDKG.CallOpts)
}

// GetBadParticipants is a free data retrieval call binding the contract method 0x32d4d570.
//
// Solidity: function getBadParticipants() view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) GetBadParticipants() (*big.Int, error) {
	return _ETHDKG.Contract.GetBadParticipants(&_ETHDKG.CallOpts)
}

// GetConfirmationLength is a free data retrieval call binding the contract method 0x8c848d32.
//
// Solidity: function getConfirmationLength() view returns(uint256)
func (_ETHDKG *ETHDKGCaller) GetConfirmationLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "getConfirmationLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetConfirmationLength is a free data retrieval call binding the contract method 0x8c848d32.
//
// Solidity: function getConfirmationLength() view returns(uint256)
func (_ETHDKG *ETHDKGSession) GetConfirmationLength() (*big.Int, error) {
	return _ETHDKG.Contract.GetConfirmationLength(&_ETHDKG.CallOpts)
}

// GetConfirmationLength is a free data retrieval call binding the contract method 0x8c848d32.
//
// Solidity: function getConfirmationLength() view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) GetConfirmationLength() (*big.Int, error) {
	return _ETHDKG.Contract.GetConfirmationLength(&_ETHDKG.CallOpts)
}

// GetETHDKGPhase is a free data retrieval call binding the contract method 0x2958e81c.
//
// Solidity: function getETHDKGPhase() view returns(uint8)
func (_ETHDKG *ETHDKGCaller) GetETHDKGPhase(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "getETHDKGPhase")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetETHDKGPhase is a free data retrieval call binding the contract method 0x2958e81c.
//
// Solidity: function getETHDKGPhase() view returns(uint8)
func (_ETHDKG *ETHDKGSession) GetETHDKGPhase() (uint8, error) {
	return _ETHDKG.Contract.GetETHDKGPhase(&_ETHDKG.CallOpts)
}

// GetETHDKGPhase is a free data retrieval call binding the contract method 0x2958e81c.
//
// Solidity: function getETHDKGPhase() view returns(uint8)
func (_ETHDKG *ETHDKGCallerSession) GetETHDKGPhase() (uint8, error) {
	return _ETHDKG.Contract.GetETHDKGPhase(&_ETHDKG.CallOpts)
}

// GetMasterPublicKey is a free data retrieval call binding the contract method 0xe146372a.
//
// Solidity: function getMasterPublicKey() view returns(uint256[4])
func (_ETHDKG *ETHDKGCaller) GetMasterPublicKey(opts *bind.CallOpts) ([4]*big.Int, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "getMasterPublicKey")

	if err != nil {
		return *new([4]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([4]*big.Int)).(*[4]*big.Int)

	return out0, err

}

// GetMasterPublicKey is a free data retrieval call binding the contract method 0xe146372a.
//
// Solidity: function getMasterPublicKey() view returns(uint256[4])
func (_ETHDKG *ETHDKGSession) GetMasterPublicKey() ([4]*big.Int, error) {
	return _ETHDKG.Contract.GetMasterPublicKey(&_ETHDKG.CallOpts)
}

// GetMasterPublicKey is a free data retrieval call binding the contract method 0xe146372a.
//
// Solidity: function getMasterPublicKey() view returns(uint256[4])
func (_ETHDKG *ETHDKGCallerSession) GetMasterPublicKey() ([4]*big.Int, error) {
	return _ETHDKG.Contract.GetMasterPublicKey(&_ETHDKG.CallOpts)
}

// GetMinValidators is a free data retrieval call binding the contract method 0xecbadb36.
//
// Solidity: function getMinValidators() view returns(uint256)
func (_ETHDKG *ETHDKGCaller) GetMinValidators(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "getMinValidators")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMinValidators is a free data retrieval call binding the contract method 0xecbadb36.
//
// Solidity: function getMinValidators() view returns(uint256)
func (_ETHDKG *ETHDKGSession) GetMinValidators() (*big.Int, error) {
	return _ETHDKG.Contract.GetMinValidators(&_ETHDKG.CallOpts)
}

// GetMinValidators is a free data retrieval call binding the contract method 0xecbadb36.
//
// Solidity: function getMinValidators() view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) GetMinValidators() (*big.Int, error) {
	return _ETHDKG.Contract.GetMinValidators(&_ETHDKG.CallOpts)
}

// GetNonce is a free data retrieval call binding the contract method 0xd087d288.
//
// Solidity: function getNonce() view returns(uint256)
func (_ETHDKG *ETHDKGCaller) GetNonce(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "getNonce")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNonce is a free data retrieval call binding the contract method 0xd087d288.
//
// Solidity: function getNonce() view returns(uint256)
func (_ETHDKG *ETHDKGSession) GetNonce() (*big.Int, error) {
	return _ETHDKG.Contract.GetNonce(&_ETHDKG.CallOpts)
}

// GetNonce is a free data retrieval call binding the contract method 0xd087d288.
//
// Solidity: function getNonce() view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) GetNonce() (*big.Int, error) {
	return _ETHDKG.Contract.GetNonce(&_ETHDKG.CallOpts)
}

// GetNumParticipants is a free data retrieval call binding the contract method 0xfd478ca9.
//
// Solidity: function getNumParticipants() view returns(uint256)
func (_ETHDKG *ETHDKGCaller) GetNumParticipants(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "getNumParticipants")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNumParticipants is a free data retrieval call binding the contract method 0xfd478ca9.
//
// Solidity: function getNumParticipants() view returns(uint256)
func (_ETHDKG *ETHDKGSession) GetNumParticipants() (*big.Int, error) {
	return _ETHDKG.Contract.GetNumParticipants(&_ETHDKG.CallOpts)
}

// GetNumParticipants is a free data retrieval call binding the contract method 0xfd478ca9.
//
// Solidity: function getNumParticipants() view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) GetNumParticipants() (*big.Int, error) {
	return _ETHDKG.Contract.GetNumParticipants(&_ETHDKG.CallOpts)
}

// GetParticipantInternalState is a free data retrieval call binding the contract method 0xbf7786b6.
//
// Solidity: function getParticipantInternalState(address participant) view returns((uint256[2],uint64,uint64,uint8,bytes32,uint256[2],uint256[2],uint256[4]))
func (_ETHDKG *ETHDKGCaller) GetParticipantInternalState(opts *bind.CallOpts, participant common.Address) (Participant, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "getParticipantInternalState", participant)

	if err != nil {
		return *new(Participant), err
	}

	out0 := *abi.ConvertType(out[0], new(Participant)).(*Participant)

	return out0, err

}

// GetParticipantInternalState is a free data retrieval call binding the contract method 0xbf7786b6.
//
// Solidity: function getParticipantInternalState(address participant) view returns((uint256[2],uint64,uint64,uint8,bytes32,uint256[2],uint256[2],uint256[4]))
func (_ETHDKG *ETHDKGSession) GetParticipantInternalState(participant common.Address) (Participant, error) {
	return _ETHDKG.Contract.GetParticipantInternalState(&_ETHDKG.CallOpts, participant)
}

// GetParticipantInternalState is a free data retrieval call binding the contract method 0xbf7786b6.
//
// Solidity: function getParticipantInternalState(address participant) view returns((uint256[2],uint64,uint64,uint8,bytes32,uint256[2],uint256[2],uint256[4]))
func (_ETHDKG *ETHDKGCallerSession) GetParticipantInternalState(participant common.Address) (Participant, error) {
	return _ETHDKG.Contract.GetParticipantInternalState(&_ETHDKG.CallOpts, participant)
}

// GetPhaseLength is a free data retrieval call binding the contract method 0x106da57d.
//
// Solidity: function getPhaseLength() view returns(uint256)
func (_ETHDKG *ETHDKGCaller) GetPhaseLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "getPhaseLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPhaseLength is a free data retrieval call binding the contract method 0x106da57d.
//
// Solidity: function getPhaseLength() view returns(uint256)
func (_ETHDKG *ETHDKGSession) GetPhaseLength() (*big.Int, error) {
	return _ETHDKG.Contract.GetPhaseLength(&_ETHDKG.CallOpts)
}

// GetPhaseLength is a free data retrieval call binding the contract method 0x106da57d.
//
// Solidity: function getPhaseLength() view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) GetPhaseLength() (*big.Int, error) {
	return _ETHDKG.Contract.GetPhaseLength(&_ETHDKG.CallOpts)
}

// GetPhaseStartBlock is a free data retrieval call binding the contract method 0xa2bc9c78.
//
// Solidity: function getPhaseStartBlock() view returns(uint256)
func (_ETHDKG *ETHDKGCaller) GetPhaseStartBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "getPhaseStartBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPhaseStartBlock is a free data retrieval call binding the contract method 0xa2bc9c78.
//
// Solidity: function getPhaseStartBlock() view returns(uint256)
func (_ETHDKG *ETHDKGSession) GetPhaseStartBlock() (*big.Int, error) {
	return _ETHDKG.Contract.GetPhaseStartBlock(&_ETHDKG.CallOpts)
}

// GetPhaseStartBlock is a free data retrieval call binding the contract method 0xa2bc9c78.
//
// Solidity: function getPhaseStartBlock() view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) GetPhaseStartBlock() (*big.Int, error) {
	return _ETHDKG.Contract.GetPhaseStartBlock(&_ETHDKG.CallOpts)
}

// IsAccusationWindowOver is a free data retrieval call binding the contract method 0x3131b870.
//
// Solidity: function isAccusationWindowOver() view returns(bool)
func (_ETHDKG *ETHDKGCaller) IsAccusationWindowOver(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "isAccusationWindowOver")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsAccusationWindowOver is a free data retrieval call binding the contract method 0x3131b870.
//
// Solidity: function isAccusationWindowOver() view returns(bool)
func (_ETHDKG *ETHDKGSession) IsAccusationWindowOver() (bool, error) {
	return _ETHDKG.Contract.IsAccusationWindowOver(&_ETHDKG.CallOpts)
}

// IsAccusationWindowOver is a free data retrieval call binding the contract method 0x3131b870.
//
// Solidity: function isAccusationWindowOver() view returns(bool)
func (_ETHDKG *ETHDKGCallerSession) IsAccusationWindowOver() (bool, error) {
	return _ETHDKG.Contract.IsAccusationWindowOver(&_ETHDKG.CallOpts)
}

// IsMasterPublicKeySet is a free data retrieval call binding the contract method 0x08efcf16.
//
// Solidity: function isMasterPublicKeySet() view returns(bool)
func (_ETHDKG *ETHDKGCaller) IsMasterPublicKeySet(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "isMasterPublicKeySet")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsMasterPublicKeySet is a free data retrieval call binding the contract method 0x08efcf16.
//
// Solidity: function isMasterPublicKeySet() view returns(bool)
func (_ETHDKG *ETHDKGSession) IsMasterPublicKeySet() (bool, error) {
	return _ETHDKG.Contract.IsMasterPublicKeySet(&_ETHDKG.CallOpts)
}

// IsMasterPublicKeySet is a free data retrieval call binding the contract method 0x08efcf16.
//
// Solidity: function isMasterPublicKeySet() view returns(bool)
func (_ETHDKG *ETHDKGCallerSession) IsMasterPublicKeySet() (bool, error) {
	return _ETHDKG.Contract.IsMasterPublicKeySet(&_ETHDKG.CallOpts)
}

// AccuseParticipantDidNotDistributeShares is a paid mutator transaction binding the contract method 0xdae681bc.
//
// Solidity: function accuseParticipantDidNotDistributeShares(address[] dishonestAddresses) returns()
func (_ETHDKG *ETHDKGTransactor) AccuseParticipantDidNotDistributeShares(opts *bind.TransactOpts, dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "accuseParticipantDidNotDistributeShares", dishonestAddresses)
}

// AccuseParticipantDidNotDistributeShares is a paid mutator transaction binding the contract method 0xdae681bc.
//
// Solidity: function accuseParticipantDidNotDistributeShares(address[] dishonestAddresses) returns()
func (_ETHDKG *ETHDKGSession) AccuseParticipantDidNotDistributeShares(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.AccuseParticipantDidNotDistributeShares(&_ETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDidNotDistributeShares is a paid mutator transaction binding the contract method 0xdae681bc.
//
// Solidity: function accuseParticipantDidNotDistributeShares(address[] dishonestAddresses) returns()
func (_ETHDKG *ETHDKGTransactorSession) AccuseParticipantDidNotDistributeShares(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.AccuseParticipantDidNotDistributeShares(&_ETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDidNotSubmitGPKJ is a paid mutator transaction binding the contract method 0x7df24ee9.
//
// Solidity: function accuseParticipantDidNotSubmitGPKJ(address[] dishonestAddresses) returns()
func (_ETHDKG *ETHDKGTransactor) AccuseParticipantDidNotSubmitGPKJ(opts *bind.TransactOpts, dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "accuseParticipantDidNotSubmitGPKJ", dishonestAddresses)
}

// AccuseParticipantDidNotSubmitGPKJ is a paid mutator transaction binding the contract method 0x7df24ee9.
//
// Solidity: function accuseParticipantDidNotSubmitGPKJ(address[] dishonestAddresses) returns()
func (_ETHDKG *ETHDKGSession) AccuseParticipantDidNotSubmitGPKJ(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.AccuseParticipantDidNotSubmitGPKJ(&_ETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDidNotSubmitGPKJ is a paid mutator transaction binding the contract method 0x7df24ee9.
//
// Solidity: function accuseParticipantDidNotSubmitGPKJ(address[] dishonestAddresses) returns()
func (_ETHDKG *ETHDKGTransactorSession) AccuseParticipantDidNotSubmitGPKJ(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.AccuseParticipantDidNotSubmitGPKJ(&_ETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDidNotSubmitKeyShares is a paid mutator transaction binding the contract method 0x043a6f12.
//
// Solidity: function accuseParticipantDidNotSubmitKeyShares(address[] dishonestAddresses) returns()
func (_ETHDKG *ETHDKGTransactor) AccuseParticipantDidNotSubmitKeyShares(opts *bind.TransactOpts, dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "accuseParticipantDidNotSubmitKeyShares", dishonestAddresses)
}

// AccuseParticipantDidNotSubmitKeyShares is a paid mutator transaction binding the contract method 0x043a6f12.
//
// Solidity: function accuseParticipantDidNotSubmitKeyShares(address[] dishonestAddresses) returns()
func (_ETHDKG *ETHDKGSession) AccuseParticipantDidNotSubmitKeyShares(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.AccuseParticipantDidNotSubmitKeyShares(&_ETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDidNotSubmitKeyShares is a paid mutator transaction binding the contract method 0x043a6f12.
//
// Solidity: function accuseParticipantDidNotSubmitKeyShares(address[] dishonestAddresses) returns()
func (_ETHDKG *ETHDKGTransactorSession) AccuseParticipantDidNotSubmitKeyShares(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.AccuseParticipantDidNotSubmitKeyShares(&_ETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDistributedBadShares is a paid mutator transaction binding the contract method 0xedbe7bf7.
//
// Solidity: function accuseParticipantDistributedBadShares(address dishonestAddress, uint256[] encryptedShares, uint256[2][] commitments, uint256[2] sharedKey, uint256[2] sharedKeyCorrectnessProof) returns()
func (_ETHDKG *ETHDKGTransactor) AccuseParticipantDistributedBadShares(opts *bind.TransactOpts, dishonestAddress common.Address, encryptedShares []*big.Int, commitments [][2]*big.Int, sharedKey [2]*big.Int, sharedKeyCorrectnessProof [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "accuseParticipantDistributedBadShares", dishonestAddress, encryptedShares, commitments, sharedKey, sharedKeyCorrectnessProof)
}

// AccuseParticipantDistributedBadShares is a paid mutator transaction binding the contract method 0xedbe7bf7.
//
// Solidity: function accuseParticipantDistributedBadShares(address dishonestAddress, uint256[] encryptedShares, uint256[2][] commitments, uint256[2] sharedKey, uint256[2] sharedKeyCorrectnessProof) returns()
func (_ETHDKG *ETHDKGSession) AccuseParticipantDistributedBadShares(dishonestAddress common.Address, encryptedShares []*big.Int, commitments [][2]*big.Int, sharedKey [2]*big.Int, sharedKeyCorrectnessProof [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.AccuseParticipantDistributedBadShares(&_ETHDKG.TransactOpts, dishonestAddress, encryptedShares, commitments, sharedKey, sharedKeyCorrectnessProof)
}

// AccuseParticipantDistributedBadShares is a paid mutator transaction binding the contract method 0xedbe7bf7.
//
// Solidity: function accuseParticipantDistributedBadShares(address dishonestAddress, uint256[] encryptedShares, uint256[2][] commitments, uint256[2] sharedKey, uint256[2] sharedKeyCorrectnessProof) returns()
func (_ETHDKG *ETHDKGTransactorSession) AccuseParticipantDistributedBadShares(dishonestAddress common.Address, encryptedShares []*big.Int, commitments [][2]*big.Int, sharedKey [2]*big.Int, sharedKeyCorrectnessProof [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.AccuseParticipantDistributedBadShares(&_ETHDKG.TransactOpts, dishonestAddress, encryptedShares, commitments, sharedKey, sharedKeyCorrectnessProof)
}

// AccuseParticipantNotRegistered is a paid mutator transaction binding the contract method 0xf72c45b6.
//
// Solidity: function accuseParticipantNotRegistered(address[] dishonestAddresses) returns()
func (_ETHDKG *ETHDKGTransactor) AccuseParticipantNotRegistered(opts *bind.TransactOpts, dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "accuseParticipantNotRegistered", dishonestAddresses)
}

// AccuseParticipantNotRegistered is a paid mutator transaction binding the contract method 0xf72c45b6.
//
// Solidity: function accuseParticipantNotRegistered(address[] dishonestAddresses) returns()
func (_ETHDKG *ETHDKGSession) AccuseParticipantNotRegistered(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.AccuseParticipantNotRegistered(&_ETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantNotRegistered is a paid mutator transaction binding the contract method 0xf72c45b6.
//
// Solidity: function accuseParticipantNotRegistered(address[] dishonestAddresses) returns()
func (_ETHDKG *ETHDKGTransactorSession) AccuseParticipantNotRegistered(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.AccuseParticipantNotRegistered(&_ETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantSubmittedBadGPKJ is a paid mutator transaction binding the contract method 0x80001264.
//
// Solidity: function accuseParticipantSubmittedBadGPKJ(address[] validators, bytes32[] encryptedSharesHash, uint256[2][][] commitments, address dishonestAddress) returns()
func (_ETHDKG *ETHDKGTransactor) AccuseParticipantSubmittedBadGPKJ(opts *bind.TransactOpts, validators []common.Address, encryptedSharesHash [][32]byte, commitments [][][2]*big.Int, dishonestAddress common.Address) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "accuseParticipantSubmittedBadGPKJ", validators, encryptedSharesHash, commitments, dishonestAddress)
}

// AccuseParticipantSubmittedBadGPKJ is a paid mutator transaction binding the contract method 0x80001264.
//
// Solidity: function accuseParticipantSubmittedBadGPKJ(address[] validators, bytes32[] encryptedSharesHash, uint256[2][][] commitments, address dishonestAddress) returns()
func (_ETHDKG *ETHDKGSession) AccuseParticipantSubmittedBadGPKJ(validators []common.Address, encryptedSharesHash [][32]byte, commitments [][][2]*big.Int, dishonestAddress common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.AccuseParticipantSubmittedBadGPKJ(&_ETHDKG.TransactOpts, validators, encryptedSharesHash, commitments, dishonestAddress)
}

// AccuseParticipantSubmittedBadGPKJ is a paid mutator transaction binding the contract method 0x80001264.
//
// Solidity: function accuseParticipantSubmittedBadGPKJ(address[] validators, bytes32[] encryptedSharesHash, uint256[2][][] commitments, address dishonestAddress) returns()
func (_ETHDKG *ETHDKGTransactorSession) AccuseParticipantSubmittedBadGPKJ(validators []common.Address, encryptedSharesHash [][32]byte, commitments [][][2]*big.Int, dishonestAddress common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.AccuseParticipantSubmittedBadGPKJ(&_ETHDKG.TransactOpts, validators, encryptedSharesHash, commitments, dishonestAddress)
}

// Complete is a paid mutator transaction binding the contract method 0x522e1177.
//
// Solidity: function complete() returns()
func (_ETHDKG *ETHDKGTransactor) Complete(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "complete")
}

// Complete is a paid mutator transaction binding the contract method 0x522e1177.
//
// Solidity: function complete() returns()
func (_ETHDKG *ETHDKGSession) Complete() (*types.Transaction, error) {
	return _ETHDKG.Contract.Complete(&_ETHDKG.TransactOpts)
}

// Complete is a paid mutator transaction binding the contract method 0x522e1177.
//
// Solidity: function complete() returns()
func (_ETHDKG *ETHDKGTransactorSession) Complete() (*types.Transaction, error) {
	return _ETHDKG.Contract.Complete(&_ETHDKG.TransactOpts)
}

// DistributeShares is a paid mutator transaction binding the contract method 0x80b97e01.
//
// Solidity: function distributeShares(uint256[] encryptedShares, uint256[2][] commitments) returns()
func (_ETHDKG *ETHDKGTransactor) DistributeShares(opts *bind.TransactOpts, encryptedShares []*big.Int, commitments [][2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "distributeShares", encryptedShares, commitments)
}

// DistributeShares is a paid mutator transaction binding the contract method 0x80b97e01.
//
// Solidity: function distributeShares(uint256[] encryptedShares, uint256[2][] commitments) returns()
func (_ETHDKG *ETHDKGSession) DistributeShares(encryptedShares []*big.Int, commitments [][2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.DistributeShares(&_ETHDKG.TransactOpts, encryptedShares, commitments)
}

// DistributeShares is a paid mutator transaction binding the contract method 0x80b97e01.
//
// Solidity: function distributeShares(uint256[] encryptedShares, uint256[2][] commitments) returns()
func (_ETHDKG *ETHDKGTransactorSession) DistributeShares(encryptedShares []*big.Int, commitments [][2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.DistributeShares(&_ETHDKG.TransactOpts, encryptedShares, commitments)
}

// InitializeETHDKG is a paid mutator transaction binding the contract method 0x57b51c9c.
//
// Solidity: function initializeETHDKG() returns()
func (_ETHDKG *ETHDKGTransactor) InitializeETHDKG(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "initializeETHDKG")
}

// InitializeETHDKG is a paid mutator transaction binding the contract method 0x57b51c9c.
//
// Solidity: function initializeETHDKG() returns()
func (_ETHDKG *ETHDKGSession) InitializeETHDKG() (*types.Transaction, error) {
	return _ETHDKG.Contract.InitializeETHDKG(&_ETHDKG.TransactOpts)
}

// InitializeETHDKG is a paid mutator transaction binding the contract method 0x57b51c9c.
//
// Solidity: function initializeETHDKG() returns()
func (_ETHDKG *ETHDKGTransactorSession) InitializeETHDKG() (*types.Transaction, error) {
	return _ETHDKG.Contract.InitializeETHDKG(&_ETHDKG.TransactOpts)
}

// Register is a paid mutator transaction binding the contract method 0x3442af5c.
//
// Solidity: function register(uint256[2] publicKey) returns()
func (_ETHDKG *ETHDKGTransactor) Register(opts *bind.TransactOpts, publicKey [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "register", publicKey)
}

// Register is a paid mutator transaction binding the contract method 0x3442af5c.
//
// Solidity: function register(uint256[2] publicKey) returns()
func (_ETHDKG *ETHDKGSession) Register(publicKey [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.Register(&_ETHDKG.TransactOpts, publicKey)
}

// Register is a paid mutator transaction binding the contract method 0x3442af5c.
//
// Solidity: function register(uint256[2] publicKey) returns()
func (_ETHDKG *ETHDKGTransactorSession) Register(publicKey [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.Register(&_ETHDKG.TransactOpts, publicKey)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_ETHDKG *ETHDKGTransactor) SetAdmin(opts *bind.TransactOpts, admin_ common.Address) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "setAdmin", admin_)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_ETHDKG *ETHDKGSession) SetAdmin(admin_ common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.SetAdmin(&_ETHDKG.TransactOpts, admin_)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_ETHDKG *ETHDKGTransactorSession) SetAdmin(admin_ common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.SetAdmin(&_ETHDKG.TransactOpts, admin_)
}

// SetConfirmationLength is a paid mutator transaction binding the contract method 0xff3e5e45.
//
// Solidity: function setConfirmationLength(uint16 confirmationLength_) returns()
func (_ETHDKG *ETHDKGTransactor) SetConfirmationLength(opts *bind.TransactOpts, confirmationLength_ uint16) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "setConfirmationLength", confirmationLength_)
}

// SetConfirmationLength is a paid mutator transaction binding the contract method 0xff3e5e45.
//
// Solidity: function setConfirmationLength(uint16 confirmationLength_) returns()
func (_ETHDKG *ETHDKGSession) SetConfirmationLength(confirmationLength_ uint16) (*types.Transaction, error) {
	return _ETHDKG.Contract.SetConfirmationLength(&_ETHDKG.TransactOpts, confirmationLength_)
}

// SetConfirmationLength is a paid mutator transaction binding the contract method 0xff3e5e45.
//
// Solidity: function setConfirmationLength(uint16 confirmationLength_) returns()
func (_ETHDKG *ETHDKGTransactorSession) SetConfirmationLength(confirmationLength_ uint16) (*types.Transaction, error) {
	return _ETHDKG.Contract.SetConfirmationLength(&_ETHDKG.TransactOpts, confirmationLength_)
}

// SetMinNumberOfValidator is a paid mutator transaction binding the contract method 0xfb89c899.
//
// Solidity: function setMinNumberOfValidator(uint16 minValidators_) returns()
func (_ETHDKG *ETHDKGTransactor) SetMinNumberOfValidator(opts *bind.TransactOpts, minValidators_ uint16) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "setMinNumberOfValidator", minValidators_)
}

// SetMinNumberOfValidator is a paid mutator transaction binding the contract method 0xfb89c899.
//
// Solidity: function setMinNumberOfValidator(uint16 minValidators_) returns()
func (_ETHDKG *ETHDKGSession) SetMinNumberOfValidator(minValidators_ uint16) (*types.Transaction, error) {
	return _ETHDKG.Contract.SetMinNumberOfValidator(&_ETHDKG.TransactOpts, minValidators_)
}

// SetMinNumberOfValidator is a paid mutator transaction binding the contract method 0xfb89c899.
//
// Solidity: function setMinNumberOfValidator(uint16 minValidators_) returns()
func (_ETHDKG *ETHDKGTransactorSession) SetMinNumberOfValidator(minValidators_ uint16) (*types.Transaction, error) {
	return _ETHDKG.Contract.SetMinNumberOfValidator(&_ETHDKG.TransactOpts, minValidators_)
}

// SetPhaseLength is a paid mutator transaction binding the contract method 0x8a3c24cc.
//
// Solidity: function setPhaseLength(uint16 phaseLength_) returns()
func (_ETHDKG *ETHDKGTransactor) SetPhaseLength(opts *bind.TransactOpts, phaseLength_ uint16) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "setPhaseLength", phaseLength_)
}

// SetPhaseLength is a paid mutator transaction binding the contract method 0x8a3c24cc.
//
// Solidity: function setPhaseLength(uint16 phaseLength_) returns()
func (_ETHDKG *ETHDKGSession) SetPhaseLength(phaseLength_ uint16) (*types.Transaction, error) {
	return _ETHDKG.Contract.SetPhaseLength(&_ETHDKG.TransactOpts, phaseLength_)
}

// SetPhaseLength is a paid mutator transaction binding the contract method 0x8a3c24cc.
//
// Solidity: function setPhaseLength(uint16 phaseLength_) returns()
func (_ETHDKG *ETHDKGTransactorSession) SetPhaseLength(phaseLength_ uint16) (*types.Transaction, error) {
	return _ETHDKG.Contract.SetPhaseLength(&_ETHDKG.TransactOpts, phaseLength_)
}

// SetValidatorPoolAddress is a paid mutator transaction binding the contract method 0xfe0fe422.
//
// Solidity: function setValidatorPoolAddress(address validatorPool) returns()
func (_ETHDKG *ETHDKGTransactor) SetValidatorPoolAddress(opts *bind.TransactOpts, validatorPool common.Address) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "setValidatorPoolAddress", validatorPool)
}

// SetValidatorPoolAddress is a paid mutator transaction binding the contract method 0xfe0fe422.
//
// Solidity: function setValidatorPoolAddress(address validatorPool) returns()
func (_ETHDKG *ETHDKGSession) SetValidatorPoolAddress(validatorPool common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.SetValidatorPoolAddress(&_ETHDKG.TransactOpts, validatorPool)
}

// SetValidatorPoolAddress is a paid mutator transaction binding the contract method 0xfe0fe422.
//
// Solidity: function setValidatorPoolAddress(address validatorPool) returns()
func (_ETHDKG *ETHDKGTransactorSession) SetValidatorPoolAddress(validatorPool common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.SetValidatorPoolAddress(&_ETHDKG.TransactOpts, validatorPool)
}

<<<<<<< Updated upstream
// SubmitGPKj is a paid mutator transaction binding the contract method 0xd410e8e4.
//
// Solidity: function submitGPKj(uint256[4] gpkj) returns()
func (_ETHDKG *ETHDKGTransactor) SubmitGPKj(opts *bind.TransactOpts, gpkj [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "submitGPKj", gpkj)
}

// SubmitGPKj is a paid mutator transaction binding the contract method 0xd410e8e4.
//
// Solidity: function submitGPKj(uint256[4] gpkj) returns()
func (_ETHDKG *ETHDKGSession) SubmitGPKj(gpkj [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.SubmitGPKj(&_ETHDKG.TransactOpts, gpkj)
}

// SubmitGPKj is a paid mutator transaction binding the contract method 0xd410e8e4.
//
// Solidity: function submitGPKj(uint256[4] gpkj) returns()
func (_ETHDKG *ETHDKGTransactorSession) SubmitGPKj(gpkj [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.SubmitGPKj(&_ETHDKG.TransactOpts, gpkj)
=======
// SubmitGPKJ is a paid mutator transaction binding the contract method 0x101f49c1.
//
// Solidity: function submitGPKJ(uint256[4] gpkj) returns()
func (_ETHDKG *ETHDKGTransactor) SubmitGPKJ(opts *bind.TransactOpts, gpkj [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "submitGPKJ", gpkj)
}

// SubmitGPKJ is a paid mutator transaction binding the contract method 0x101f49c1.
//
// Solidity: function submitGPKJ(uint256[4] gpkj) returns()
func (_ETHDKG *ETHDKGSession) SubmitGPKJ(gpkj [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.SubmitGPKJ(&_ETHDKG.TransactOpts, gpkj)
}

// SubmitGPKJ is a paid mutator transaction binding the contract method 0x101f49c1.
//
// Solidity: function submitGPKJ(uint256[4] gpkj) returns()
func (_ETHDKG *ETHDKGTransactorSession) SubmitGPKJ(gpkj [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.SubmitGPKJ(&_ETHDKG.TransactOpts, gpkj)
>>>>>>> Stashed changes
}

// SubmitKeyShare is a paid mutator transaction binding the contract method 0x62a6523e.
//
// Solidity: function submitKeyShare(uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2) returns()
func (_ETHDKG *ETHDKGTransactor) SubmitKeyShare(opts *bind.TransactOpts, keyShareG1 [2]*big.Int, keyShareG1CorrectnessProof [2]*big.Int, keyShareG2 [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "submitKeyShare", keyShareG1, keyShareG1CorrectnessProof, keyShareG2)
}

// SubmitKeyShare is a paid mutator transaction binding the contract method 0x62a6523e.
//
// Solidity: function submitKeyShare(uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2) returns()
func (_ETHDKG *ETHDKGSession) SubmitKeyShare(keyShareG1 [2]*big.Int, keyShareG1CorrectnessProof [2]*big.Int, keyShareG2 [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.SubmitKeyShare(&_ETHDKG.TransactOpts, keyShareG1, keyShareG1CorrectnessProof, keyShareG2)
}

// SubmitKeyShare is a paid mutator transaction binding the contract method 0x62a6523e.
//
// Solidity: function submitKeyShare(uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2) returns()
func (_ETHDKG *ETHDKGTransactorSession) SubmitKeyShare(keyShareG1 [2]*big.Int, keyShareG1CorrectnessProof [2]*big.Int, keyShareG2 [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.SubmitKeyShare(&_ETHDKG.TransactOpts, keyShareG1, keyShareG1CorrectnessProof, keyShareG2)
}

// SubmitMasterPublicKey is a paid mutator transaction binding the contract method 0xe8323224.
//
// Solidity: function submitMasterPublicKey(uint256[4] masterPublicKey_) returns()
func (_ETHDKG *ETHDKGTransactor) SubmitMasterPublicKey(opts *bind.TransactOpts, masterPublicKey_ [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "submitMasterPublicKey", masterPublicKey_)
}

// SubmitMasterPublicKey is a paid mutator transaction binding the contract method 0xe8323224.
//
// Solidity: function submitMasterPublicKey(uint256[4] masterPublicKey_) returns()
func (_ETHDKG *ETHDKGSession) SubmitMasterPublicKey(masterPublicKey_ [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.SubmitMasterPublicKey(&_ETHDKG.TransactOpts, masterPublicKey_)
}

// SubmitMasterPublicKey is a paid mutator transaction binding the contract method 0xe8323224.
//
// Solidity: function submitMasterPublicKey(uint256[4] masterPublicKey_) returns()
func (_ETHDKG *ETHDKGTransactorSession) SubmitMasterPublicKey(masterPublicKey_ [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.SubmitMasterPublicKey(&_ETHDKG.TransactOpts, masterPublicKey_)
}

// ETHDKGAddressRegisteredIterator is returned from FilterAddressRegistered and is used to iterate over the raw logs and unpacked data for AddressRegistered events raised by the ETHDKG contract.
type ETHDKGAddressRegisteredIterator struct {
	Event *ETHDKGAddressRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGAddressRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGAddressRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGAddressRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGAddressRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGAddressRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGAddressRegistered represents a AddressRegistered event raised by the ETHDKG contract.
type ETHDKGAddressRegistered struct {
	Account   common.Address
	Index     *big.Int
	Nonce     *big.Int
	PublicKey [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAddressRegistered is a free log retrieval operation binding the contract event 0x7f1304057ec61140fbf2f5f236790f34fcafe123d3eb0d298d92317c97da500d.
//
// Solidity: event AddressRegistered(address account, uint256 index, uint256 nonce, uint256[2] publicKey)
func (_ETHDKG *ETHDKGFilterer) FilterAddressRegistered(opts *bind.FilterOpts) (*ETHDKGAddressRegisteredIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "AddressRegistered")
	if err != nil {
		return nil, err
	}
	return &ETHDKGAddressRegisteredIterator{contract: _ETHDKG.contract, event: "AddressRegistered", logs: logs, sub: sub}, nil
}

// WatchAddressRegistered is a free log subscription operation binding the contract event 0x7f1304057ec61140fbf2f5f236790f34fcafe123d3eb0d298d92317c97da500d.
//
// Solidity: event AddressRegistered(address account, uint256 index, uint256 nonce, uint256[2] publicKey)
func (_ETHDKG *ETHDKGFilterer) WatchAddressRegistered(opts *bind.WatchOpts, sink chan<- *ETHDKGAddressRegistered) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "AddressRegistered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGAddressRegistered)
				if err := _ETHDKG.contract.UnpackLog(event, "AddressRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddressRegistered is a log parse operation binding the contract event 0x7f1304057ec61140fbf2f5f236790f34fcafe123d3eb0d298d92317c97da500d.
//
// Solidity: event AddressRegistered(address account, uint256 index, uint256 nonce, uint256[2] publicKey)
func (_ETHDKG *ETHDKGFilterer) ParseAddressRegistered(log types.Log) (*ETHDKGAddressRegistered, error) {
	event := new(ETHDKGAddressRegistered)
	if err := _ETHDKG.contract.UnpackLog(event, "AddressRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGGPKJSubmissionCompleteIterator is returned from FilterGPKJSubmissionComplete and is used to iterate over the raw logs and unpacked data for GPKJSubmissionComplete events raised by the ETHDKG contract.
type ETHDKGGPKJSubmissionCompleteIterator struct {
	Event *ETHDKGGPKJSubmissionComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGGPKJSubmissionCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGGPKJSubmissionComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGGPKJSubmissionComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGGPKJSubmissionCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGGPKJSubmissionCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGGPKJSubmissionComplete represents a GPKJSubmissionComplete event raised by the ETHDKG contract.
type ETHDKGGPKJSubmissionComplete struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterGPKJSubmissionComplete is a free log retrieval operation binding the contract event 0x87bfe600b78cad9f7cf68c99eb582c1748f636b3269842b37d5873b0e069f628.
//
// Solidity: event GPKJSubmissionComplete(uint256 blockNumber)
func (_ETHDKG *ETHDKGFilterer) FilterGPKJSubmissionComplete(opts *bind.FilterOpts) (*ETHDKGGPKJSubmissionCompleteIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "GPKJSubmissionComplete")
	if err != nil {
		return nil, err
	}
	return &ETHDKGGPKJSubmissionCompleteIterator{contract: _ETHDKG.contract, event: "GPKJSubmissionComplete", logs: logs, sub: sub}, nil
}

// WatchGPKJSubmissionComplete is a free log subscription operation binding the contract event 0x87bfe600b78cad9f7cf68c99eb582c1748f636b3269842b37d5873b0e069f628.
//
// Solidity: event GPKJSubmissionComplete(uint256 blockNumber)
func (_ETHDKG *ETHDKGFilterer) WatchGPKJSubmissionComplete(opts *bind.WatchOpts, sink chan<- *ETHDKGGPKJSubmissionComplete) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "GPKJSubmissionComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGGPKJSubmissionComplete)
				if err := _ETHDKG.contract.UnpackLog(event, "GPKJSubmissionComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGPKJSubmissionComplete is a log parse operation binding the contract event 0x87bfe600b78cad9f7cf68c99eb582c1748f636b3269842b37d5873b0e069f628.
//
// Solidity: event GPKJSubmissionComplete(uint256 blockNumber)
func (_ETHDKG *ETHDKGFilterer) ParseGPKJSubmissionComplete(log types.Log) (*ETHDKGGPKJSubmissionComplete, error) {
	event := new(ETHDKGGPKJSubmissionComplete)
	if err := _ETHDKG.contract.UnpackLog(event, "GPKJSubmissionComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGKeyShareSubmissionCompleteIterator is returned from FilterKeyShareSubmissionComplete and is used to iterate over the raw logs and unpacked data for KeyShareSubmissionComplete events raised by the ETHDKG contract.
type ETHDKGKeyShareSubmissionCompleteIterator struct {
	Event *ETHDKGKeyShareSubmissionComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGKeyShareSubmissionCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGKeyShareSubmissionComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGKeyShareSubmissionComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGKeyShareSubmissionCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGKeyShareSubmissionCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGKeyShareSubmissionComplete represents a KeyShareSubmissionComplete event raised by the ETHDKG contract.
type ETHDKGKeyShareSubmissionComplete struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterKeyShareSubmissionComplete is a free log retrieval operation binding the contract event 0x522cec98f6caa194456c44afa9e8cef9ac63eecb0be60e20d180ce19cfb0ef59.
//
// Solidity: event KeyShareSubmissionComplete(uint256 blockNumber)
func (_ETHDKG *ETHDKGFilterer) FilterKeyShareSubmissionComplete(opts *bind.FilterOpts) (*ETHDKGKeyShareSubmissionCompleteIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "KeyShareSubmissionComplete")
	if err != nil {
		return nil, err
	}
	return &ETHDKGKeyShareSubmissionCompleteIterator{contract: _ETHDKG.contract, event: "KeyShareSubmissionComplete", logs: logs, sub: sub}, nil
}

// WatchKeyShareSubmissionComplete is a free log subscription operation binding the contract event 0x522cec98f6caa194456c44afa9e8cef9ac63eecb0be60e20d180ce19cfb0ef59.
//
// Solidity: event KeyShareSubmissionComplete(uint256 blockNumber)
func (_ETHDKG *ETHDKGFilterer) WatchKeyShareSubmissionComplete(opts *bind.WatchOpts, sink chan<- *ETHDKGKeyShareSubmissionComplete) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "KeyShareSubmissionComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGKeyShareSubmissionComplete)
				if err := _ETHDKG.contract.UnpackLog(event, "KeyShareSubmissionComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyShareSubmissionComplete is a log parse operation binding the contract event 0x522cec98f6caa194456c44afa9e8cef9ac63eecb0be60e20d180ce19cfb0ef59.
//
// Solidity: event KeyShareSubmissionComplete(uint256 blockNumber)
func (_ETHDKG *ETHDKGFilterer) ParseKeyShareSubmissionComplete(log types.Log) (*ETHDKGKeyShareSubmissionComplete, error) {
	event := new(ETHDKGKeyShareSubmissionComplete)
	if err := _ETHDKG.contract.UnpackLog(event, "KeyShareSubmissionComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGKeyShareSubmittedIterator is returned from FilterKeyShareSubmitted and is used to iterate over the raw logs and unpacked data for KeyShareSubmitted events raised by the ETHDKG contract.
type ETHDKGKeyShareSubmittedIterator struct {
	Event *ETHDKGKeyShareSubmitted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGKeyShareSubmittedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGKeyShareSubmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGKeyShareSubmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGKeyShareSubmittedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGKeyShareSubmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGKeyShareSubmitted represents a KeyShareSubmitted event raised by the ETHDKG contract.
type ETHDKGKeyShareSubmitted struct {
	Account                    common.Address
	Index                      *big.Int
	Nonce                      *big.Int
	KeyShareG1                 [2]*big.Int
	KeyShareG1CorrectnessProof [2]*big.Int
	KeyShareG2                 [4]*big.Int
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterKeyShareSubmitted is a free log retrieval operation binding the contract event 0x6162e2d11398e4063e4c8565dafc4fb6755bbead93747ea836a5ef73a594aaf7.
//
// Solidity: event KeyShareSubmitted(address account, uint256 index, uint256 nonce, uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2)
func (_ETHDKG *ETHDKGFilterer) FilterKeyShareSubmitted(opts *bind.FilterOpts) (*ETHDKGKeyShareSubmittedIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "KeyShareSubmitted")
	if err != nil {
		return nil, err
	}
	return &ETHDKGKeyShareSubmittedIterator{contract: _ETHDKG.contract, event: "KeyShareSubmitted", logs: logs, sub: sub}, nil
}

// WatchKeyShareSubmitted is a free log subscription operation binding the contract event 0x6162e2d11398e4063e4c8565dafc4fb6755bbead93747ea836a5ef73a594aaf7.
//
// Solidity: event KeyShareSubmitted(address account, uint256 index, uint256 nonce, uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2)
func (_ETHDKG *ETHDKGFilterer) WatchKeyShareSubmitted(opts *bind.WatchOpts, sink chan<- *ETHDKGKeyShareSubmitted) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "KeyShareSubmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGKeyShareSubmitted)
				if err := _ETHDKG.contract.UnpackLog(event, "KeyShareSubmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyShareSubmitted is a log parse operation binding the contract event 0x6162e2d11398e4063e4c8565dafc4fb6755bbead93747ea836a5ef73a594aaf7.
//
// Solidity: event KeyShareSubmitted(address account, uint256 index, uint256 nonce, uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2)
func (_ETHDKG *ETHDKGFilterer) ParseKeyShareSubmitted(log types.Log) (*ETHDKGKeyShareSubmitted, error) {
	event := new(ETHDKGKeyShareSubmitted)
	if err := _ETHDKG.contract.UnpackLog(event, "KeyShareSubmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGMPKSetIterator is returned from FilterMPKSet and is used to iterate over the raw logs and unpacked data for MPKSet events raised by the ETHDKG contract.
type ETHDKGMPKSetIterator struct {
	Event *ETHDKGMPKSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGMPKSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGMPKSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGMPKSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGMPKSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGMPKSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGMPKSet represents a MPKSet event raised by the ETHDKG contract.
type ETHDKGMPKSet struct {
	BlockNumber *big.Int
	Nonce       *big.Int
	Mpk         [4]*big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterMPKSet is a free log retrieval operation binding the contract event 0x71b1ebd27be320895a22125d6458e3363aefa6944a312ede4bf275867e6d5a71.
//
// Solidity: event MPKSet(uint256 blockNumber, uint256 nonce, uint256[4] mpk)
func (_ETHDKG *ETHDKGFilterer) FilterMPKSet(opts *bind.FilterOpts) (*ETHDKGMPKSetIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "MPKSet")
	if err != nil {
		return nil, err
	}
	return &ETHDKGMPKSetIterator{contract: _ETHDKG.contract, event: "MPKSet", logs: logs, sub: sub}, nil
}

// WatchMPKSet is a free log subscription operation binding the contract event 0x71b1ebd27be320895a22125d6458e3363aefa6944a312ede4bf275867e6d5a71.
//
// Solidity: event MPKSet(uint256 blockNumber, uint256 nonce, uint256[4] mpk)
func (_ETHDKG *ETHDKGFilterer) WatchMPKSet(opts *bind.WatchOpts, sink chan<- *ETHDKGMPKSet) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "MPKSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGMPKSet)
				if err := _ETHDKG.contract.UnpackLog(event, "MPKSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMPKSet is a log parse operation binding the contract event 0x71b1ebd27be320895a22125d6458e3363aefa6944a312ede4bf275867e6d5a71.
//
// Solidity: event MPKSet(uint256 blockNumber, uint256 nonce, uint256[4] mpk)
func (_ETHDKG *ETHDKGFilterer) ParseMPKSet(log types.Log) (*ETHDKGMPKSet, error) {
	event := new(ETHDKGMPKSet)
	if err := _ETHDKG.contract.UnpackLog(event, "MPKSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGRegistrationCompleteIterator is returned from FilterRegistrationComplete and is used to iterate over the raw logs and unpacked data for RegistrationComplete events raised by the ETHDKG contract.
type ETHDKGRegistrationCompleteIterator struct {
	Event *ETHDKGRegistrationComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGRegistrationCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGRegistrationComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGRegistrationComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGRegistrationCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGRegistrationCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGRegistrationComplete represents a RegistrationComplete event raised by the ETHDKG contract.
type ETHDKGRegistrationComplete struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRegistrationComplete is a free log retrieval operation binding the contract event 0x833013b96b786b4eca83baac286920e5e53956c21ff3894f1d9f02e97d6ed764.
//
// Solidity: event RegistrationComplete(uint256 blockNumber)
func (_ETHDKG *ETHDKGFilterer) FilterRegistrationComplete(opts *bind.FilterOpts) (*ETHDKGRegistrationCompleteIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "RegistrationComplete")
	if err != nil {
		return nil, err
	}
	return &ETHDKGRegistrationCompleteIterator{contract: _ETHDKG.contract, event: "RegistrationComplete", logs: logs, sub: sub}, nil
}

// WatchRegistrationComplete is a free log subscription operation binding the contract event 0x833013b96b786b4eca83baac286920e5e53956c21ff3894f1d9f02e97d6ed764.
//
// Solidity: event RegistrationComplete(uint256 blockNumber)
func (_ETHDKG *ETHDKGFilterer) WatchRegistrationComplete(opts *bind.WatchOpts, sink chan<- *ETHDKGRegistrationComplete) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "RegistrationComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGRegistrationComplete)
				if err := _ETHDKG.contract.UnpackLog(event, "RegistrationComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistrationComplete is a log parse operation binding the contract event 0x833013b96b786b4eca83baac286920e5e53956c21ff3894f1d9f02e97d6ed764.
//
// Solidity: event RegistrationComplete(uint256 blockNumber)
func (_ETHDKG *ETHDKGFilterer) ParseRegistrationComplete(log types.Log) (*ETHDKGRegistrationComplete, error) {
	event := new(ETHDKGRegistrationComplete)
	if err := _ETHDKG.contract.UnpackLog(event, "RegistrationComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGRegistrationOpenedIterator is returned from FilterRegistrationOpened and is used to iterate over the raw logs and unpacked data for RegistrationOpened events raised by the ETHDKG contract.
type ETHDKGRegistrationOpenedIterator struct {
	Event *ETHDKGRegistrationOpened // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGRegistrationOpenedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGRegistrationOpened)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGRegistrationOpened)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGRegistrationOpenedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGRegistrationOpenedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGRegistrationOpened represents a RegistrationOpened event raised by the ETHDKG contract.
type ETHDKGRegistrationOpened struct {
<<<<<<< Updated upstream
	StartBlock *big.Int
	Nonce      *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterRegistrationOpened is a free log retrieval operation binding the contract event 0x0092d3a0faf985375d3ea8563cdbdedd99bb694713af121204f50ccb198fb476.
//
// Solidity: event RegistrationOpened(uint256 startBlock, uint256 nonce)
=======
	StartBlock         *big.Int
	Nonce              *big.Int
	PhaseLength        *big.Int
	ConfirmationLength *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterRegistrationOpened is a free log retrieval operation binding the contract event 0xc867fa8c9b2d0ef5b1687773346ccc44cbc8b392ec2934a6178ffe529f311c8d.
//
// Solidity: event RegistrationOpened(uint256 startBlock, uint256 nonce, uint256 phaseLength, uint256 confirmationLength)
>>>>>>> Stashed changes
func (_ETHDKG *ETHDKGFilterer) FilterRegistrationOpened(opts *bind.FilterOpts) (*ETHDKGRegistrationOpenedIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "RegistrationOpened")
	if err != nil {
		return nil, err
	}
	return &ETHDKGRegistrationOpenedIterator{contract: _ETHDKG.contract, event: "RegistrationOpened", logs: logs, sub: sub}, nil
}

<<<<<<< Updated upstream
// WatchRegistrationOpened is a free log subscription operation binding the contract event 0x0092d3a0faf985375d3ea8563cdbdedd99bb694713af121204f50ccb198fb476.
//
// Solidity: event RegistrationOpened(uint256 startBlock, uint256 nonce)
=======
// WatchRegistrationOpened is a free log subscription operation binding the contract event 0xc867fa8c9b2d0ef5b1687773346ccc44cbc8b392ec2934a6178ffe529f311c8d.
//
// Solidity: event RegistrationOpened(uint256 startBlock, uint256 nonce, uint256 phaseLength, uint256 confirmationLength)
>>>>>>> Stashed changes
func (_ETHDKG *ETHDKGFilterer) WatchRegistrationOpened(opts *bind.WatchOpts, sink chan<- *ETHDKGRegistrationOpened) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "RegistrationOpened")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGRegistrationOpened)
				if err := _ETHDKG.contract.UnpackLog(event, "RegistrationOpened", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

<<<<<<< Updated upstream
// ParseRegistrationOpened is a log parse operation binding the contract event 0x0092d3a0faf985375d3ea8563cdbdedd99bb694713af121204f50ccb198fb476.
//
// Solidity: event RegistrationOpened(uint256 startBlock, uint256 nonce)
=======
// ParseRegistrationOpened is a log parse operation binding the contract event 0xc867fa8c9b2d0ef5b1687773346ccc44cbc8b392ec2934a6178ffe529f311c8d.
//
// Solidity: event RegistrationOpened(uint256 startBlock, uint256 nonce, uint256 phaseLength, uint256 confirmationLength)
>>>>>>> Stashed changes
func (_ETHDKG *ETHDKGFilterer) ParseRegistrationOpened(log types.Log) (*ETHDKGRegistrationOpened, error) {
	event := new(ETHDKGRegistrationOpened)
	if err := _ETHDKG.contract.UnpackLog(event, "RegistrationOpened", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGShareDistributionCompleteIterator is returned from FilterShareDistributionComplete and is used to iterate over the raw logs and unpacked data for ShareDistributionComplete events raised by the ETHDKG contract.
type ETHDKGShareDistributionCompleteIterator struct {
	Event *ETHDKGShareDistributionComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGShareDistributionCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGShareDistributionComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGShareDistributionComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGShareDistributionCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGShareDistributionCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGShareDistributionComplete represents a ShareDistributionComplete event raised by the ETHDKG contract.
type ETHDKGShareDistributionComplete struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterShareDistributionComplete is a free log retrieval operation binding the contract event 0xbfe94ffef5ddde4d25ac7b652f3f67686ea63f9badbfe1f25451e26fc262d11c.
//
// Solidity: event ShareDistributionComplete(uint256 blockNumber)
func (_ETHDKG *ETHDKGFilterer) FilterShareDistributionComplete(opts *bind.FilterOpts) (*ETHDKGShareDistributionCompleteIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "ShareDistributionComplete")
	if err != nil {
		return nil, err
	}
	return &ETHDKGShareDistributionCompleteIterator{contract: _ETHDKG.contract, event: "ShareDistributionComplete", logs: logs, sub: sub}, nil
}

// WatchShareDistributionComplete is a free log subscription operation binding the contract event 0xbfe94ffef5ddde4d25ac7b652f3f67686ea63f9badbfe1f25451e26fc262d11c.
//
// Solidity: event ShareDistributionComplete(uint256 blockNumber)
func (_ETHDKG *ETHDKGFilterer) WatchShareDistributionComplete(opts *bind.WatchOpts, sink chan<- *ETHDKGShareDistributionComplete) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "ShareDistributionComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGShareDistributionComplete)
				if err := _ETHDKG.contract.UnpackLog(event, "ShareDistributionComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseShareDistributionComplete is a log parse operation binding the contract event 0xbfe94ffef5ddde4d25ac7b652f3f67686ea63f9badbfe1f25451e26fc262d11c.
//
// Solidity: event ShareDistributionComplete(uint256 blockNumber)
func (_ETHDKG *ETHDKGFilterer) ParseShareDistributionComplete(log types.Log) (*ETHDKGShareDistributionComplete, error) {
	event := new(ETHDKGShareDistributionComplete)
	if err := _ETHDKG.contract.UnpackLog(event, "ShareDistributionComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGSharesDistributedIterator is returned from FilterSharesDistributed and is used to iterate over the raw logs and unpacked data for SharesDistributed events raised by the ETHDKG contract.
type ETHDKGSharesDistributedIterator struct {
	Event *ETHDKGSharesDistributed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGSharesDistributedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGSharesDistributed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGSharesDistributed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGSharesDistributedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGSharesDistributedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGSharesDistributed represents a SharesDistributed event raised by the ETHDKG contract.
type ETHDKGSharesDistributed struct {
	Account         common.Address
	Index           *big.Int
	Nonce           *big.Int
	EncryptedShares []*big.Int
	Commitments     [][2]*big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterSharesDistributed is a free log retrieval operation binding the contract event 0xf0c8b0ef2867c2b4639b404a0296b6bbf0bf97e20856af42144a5a6035c0d0d2.
//
// Solidity: event SharesDistributed(address account, uint256 index, uint256 nonce, uint256[] encryptedShares, uint256[2][] commitments)
func (_ETHDKG *ETHDKGFilterer) FilterSharesDistributed(opts *bind.FilterOpts) (*ETHDKGSharesDistributedIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "SharesDistributed")
	if err != nil {
		return nil, err
	}
	return &ETHDKGSharesDistributedIterator{contract: _ETHDKG.contract, event: "SharesDistributed", logs: logs, sub: sub}, nil
}

// WatchSharesDistributed is a free log subscription operation binding the contract event 0xf0c8b0ef2867c2b4639b404a0296b6bbf0bf97e20856af42144a5a6035c0d0d2.
//
// Solidity: event SharesDistributed(address account, uint256 index, uint256 nonce, uint256[] encryptedShares, uint256[2][] commitments)
func (_ETHDKG *ETHDKGFilterer) WatchSharesDistributed(opts *bind.WatchOpts, sink chan<- *ETHDKGSharesDistributed) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "SharesDistributed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGSharesDistributed)
				if err := _ETHDKG.contract.UnpackLog(event, "SharesDistributed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSharesDistributed is a log parse operation binding the contract event 0xf0c8b0ef2867c2b4639b404a0296b6bbf0bf97e20856af42144a5a6035c0d0d2.
//
// Solidity: event SharesDistributed(address account, uint256 index, uint256 nonce, uint256[] encryptedShares, uint256[2][] commitments)
func (_ETHDKG *ETHDKGFilterer) ParseSharesDistributed(log types.Log) (*ETHDKGSharesDistributed, error) {
	event := new(ETHDKGSharesDistributed)
	if err := _ETHDKG.contract.UnpackLog(event, "SharesDistributed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGValidatorMemberAddedIterator is returned from FilterValidatorMemberAdded and is used to iterate over the raw logs and unpacked data for ValidatorMemberAdded events raised by the ETHDKG contract.
type ETHDKGValidatorMemberAddedIterator struct {
	Event *ETHDKGValidatorMemberAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGValidatorMemberAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGValidatorMemberAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGValidatorMemberAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGValidatorMemberAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGValidatorMemberAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGValidatorMemberAdded represents a ValidatorMemberAdded event raised by the ETHDKG contract.
type ETHDKGValidatorMemberAdded struct {
	Account common.Address
	Index   *big.Int
	Nonce   *big.Int
	Epoch   *big.Int
	Share0  *big.Int
	Share1  *big.Int
	Share2  *big.Int
	Share3  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterValidatorMemberAdded is a free log retrieval operation binding the contract event 0x09b90b08bbc3dbe22e9d2a0bc9c2c7614c7511cd0ad72177727a1e762115bf06.
//
// Solidity: event ValidatorMemberAdded(address account, uint256 index, uint256 nonce, uint256 epoch, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ETHDKG *ETHDKGFilterer) FilterValidatorMemberAdded(opts *bind.FilterOpts) (*ETHDKGValidatorMemberAddedIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "ValidatorMemberAdded")
	if err != nil {
		return nil, err
	}
	return &ETHDKGValidatorMemberAddedIterator{contract: _ETHDKG.contract, event: "ValidatorMemberAdded", logs: logs, sub: sub}, nil
}

// WatchValidatorMemberAdded is a free log subscription operation binding the contract event 0x09b90b08bbc3dbe22e9d2a0bc9c2c7614c7511cd0ad72177727a1e762115bf06.
//
// Solidity: event ValidatorMemberAdded(address account, uint256 index, uint256 nonce, uint256 epoch, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ETHDKG *ETHDKGFilterer) WatchValidatorMemberAdded(opts *bind.WatchOpts, sink chan<- *ETHDKGValidatorMemberAdded) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "ValidatorMemberAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGValidatorMemberAdded)
				if err := _ETHDKG.contract.UnpackLog(event, "ValidatorMemberAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorMemberAdded is a log parse operation binding the contract event 0x09b90b08bbc3dbe22e9d2a0bc9c2c7614c7511cd0ad72177727a1e762115bf06.
//
// Solidity: event ValidatorMemberAdded(address account, uint256 index, uint256 nonce, uint256 epoch, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ETHDKG *ETHDKGFilterer) ParseValidatorMemberAdded(log types.Log) (*ETHDKGValidatorMemberAdded, error) {
	event := new(ETHDKGValidatorMemberAdded)
	if err := _ETHDKG.contract.UnpackLog(event, "ValidatorMemberAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGValidatorSetCompletedIterator is returned from FilterValidatorSetCompleted and is used to iterate over the raw logs and unpacked data for ValidatorSetCompleted events raised by the ETHDKG contract.
type ETHDKGValidatorSetCompletedIterator struct {
	Event *ETHDKGValidatorSetCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGValidatorSetCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGValidatorSetCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGValidatorSetCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGValidatorSetCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGValidatorSetCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGValidatorSetCompleted represents a ValidatorSetCompleted event raised by the ETHDKG contract.
type ETHDKGValidatorSetCompleted struct {
	ValidatorCount *big.Int
	Nonce          *big.Int
	Epoch          *big.Int
	EthHeight      *big.Int
	MadHeight      *big.Int
	GroupKey0      *big.Int
	GroupKey1      *big.Int
	GroupKey2      *big.Int
	GroupKey3      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterValidatorSetCompleted is a free log retrieval operation binding the contract event 0xd7237b781669fa700ecf77be6cd8fa0f4b98b1a24ac584a9b6b44c509216718a.
//
// Solidity: event ValidatorSetCompleted(uint256 validatorCount, uint256 nonce, uint256 epoch, uint256 ethHeight, uint256 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ETHDKG *ETHDKGFilterer) FilterValidatorSetCompleted(opts *bind.FilterOpts) (*ETHDKGValidatorSetCompletedIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "ValidatorSetCompleted")
	if err != nil {
		return nil, err
	}
	return &ETHDKGValidatorSetCompletedIterator{contract: _ETHDKG.contract, event: "ValidatorSetCompleted", logs: logs, sub: sub}, nil
}

// WatchValidatorSetCompleted is a free log subscription operation binding the contract event 0xd7237b781669fa700ecf77be6cd8fa0f4b98b1a24ac584a9b6b44c509216718a.
//
// Solidity: event ValidatorSetCompleted(uint256 validatorCount, uint256 nonce, uint256 epoch, uint256 ethHeight, uint256 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ETHDKG *ETHDKGFilterer) WatchValidatorSetCompleted(opts *bind.WatchOpts, sink chan<- *ETHDKGValidatorSetCompleted) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "ValidatorSetCompleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGValidatorSetCompleted)
				if err := _ETHDKG.contract.UnpackLog(event, "ValidatorSetCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorSetCompleted is a log parse operation binding the contract event 0xd7237b781669fa700ecf77be6cd8fa0f4b98b1a24ac584a9b6b44c509216718a.
//
// Solidity: event ValidatorSetCompleted(uint256 validatorCount, uint256 nonce, uint256 epoch, uint256 ethHeight, uint256 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ETHDKG *ETHDKGFilterer) ParseValidatorSetCompleted(log types.Log) (*ETHDKGValidatorSetCompleted, error) {
	event := new(ETHDKGValidatorSetCompleted)
	if err := _ETHDKG.contract.UnpackLog(event, "ValidatorSetCompleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGAccusationsMetaData contains all meta data concerning the ETHDKGAccusations contract.
var ETHDKGAccusationsMetaData = &bind.MetaData{
<<<<<<< Updated upstream
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"publicKey\",\"type\":\"uint256[2]\"}],\"name\":\"AddressRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"GPKJSubmissionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"KeyShareSubmissionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1CorrectnessProof\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"keyShareG2\",\"type\":\"uint256[4]\"}],\"name\":\"KeyShareSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"mpk\",\"type\":\"uint256[4]\"}],\"name\":\"MPKSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"RegistrationComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"RegistrationOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"ShareDistributionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"encryptedShares\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"}],\"name\":\"SharesDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share3\",\"type\":\"uint256\"}],\"name\":\"ValidatorMemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethHeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"madHeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey3\",\"type\":\"uint256\"}],\"name\":\"ValidatorSetCompleted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dishonestAddresses\",\"type\":\"address[]\"}],\"name\":\"accuseParticipantDidNotDistributeShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dishonestAddresses\",\"type\":\"address[]\"}],\"name\":\"accuseParticipantDidNotSubmitGPKJ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dishonestAddresses\",\"type\":\"address[]\"}],\"name\":\"accuseParticipantDidNotSubmitKeyShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dishonestAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"encryptedShares\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"},{\"internalType\":\"uint256[2]\",\"name\":\"sharedKey\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"sharedKeyCorrectnessProof\",\"type\":\"uint256[2]\"}],\"name\":\"accuseParticipantDistributedBadShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dishonestAddresses\",\"type\":\"address[]\"}],\"name\":\"accuseParticipantNotRegistered\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"encryptedSharesHash\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[2][][]\",\"name\":\"commitments\",\"type\":\"uint256[2][][]\"},{\"internalType\":\"address\",\"name\":\"dishonestAddress\",\"type\":\"address\"}],\"name\":\"accuseParticipantSubmittedBadGPKJ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
=======
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"publicKey\",\"type\":\"uint256[2]\"}],\"name\":\"AddressRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"GPKJSubmissionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"KeyShareSubmissionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1CorrectnessProof\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"keyShareG2\",\"type\":\"uint256[4]\"}],\"name\":\"KeyShareSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"mpk\",\"type\":\"uint256[4]\"}],\"name\":\"MPKSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"RegistrationComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"phaseLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"confirmationLength\",\"type\":\"uint256\"}],\"name\":\"RegistrationOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"ShareDistributionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"encryptedShares\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"}],\"name\":\"SharesDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share3\",\"type\":\"uint256\"}],\"name\":\"ValidatorMemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethHeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"madHeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey3\",\"type\":\"uint256\"}],\"name\":\"ValidatorSetCompleted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dishonestAddresses\",\"type\":\"address[]\"}],\"name\":\"accuseParticipantDidNotDistributeShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dishonestAddresses\",\"type\":\"address[]\"}],\"name\":\"accuseParticipantDidNotSubmitGPKJ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dishonestAddresses\",\"type\":\"address[]\"}],\"name\":\"accuseParticipantDidNotSubmitKeyShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dishonestAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"encryptedShares\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"},{\"internalType\":\"uint256[2]\",\"name\":\"sharedKey\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"sharedKeyCorrectnessProof\",\"type\":\"uint256[2]\"}],\"name\":\"accuseParticipantDistributedBadShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dishonestAddresses\",\"type\":\"address[]\"}],\"name\":\"accuseParticipantNotRegistered\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"encryptedSharesHash\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[2][][]\",\"name\":\"commitments\",\"type\":\"uint256[2][][]\"},{\"internalType\":\"address\",\"name\":\"dishonestAddress\",\"type\":\"address\"}],\"name\":\"accuseParticipantSubmittedBadGPKJ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
>>>>>>> Stashed changes
}

// ETHDKGAccusationsABI is the input ABI used to generate the binding from.
// Deprecated: Use ETHDKGAccusationsMetaData.ABI instead.
var ETHDKGAccusationsABI = ETHDKGAccusationsMetaData.ABI

// ETHDKGAccusationsBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ETHDKGAccusationsMetaData.Bin instead.
var ETHDKGAccusationsBin = ETHDKGAccusationsMetaData.Bin

// DeployETHDKGAccusations deploys a new Ethereum contract, binding an instance of ETHDKGAccusations to it.
func DeployETHDKGAccusations(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ETHDKGAccusations, error) {
	parsed, err := ETHDKGAccusationsMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ETHDKGAccusationsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ETHDKGAccusations{ETHDKGAccusationsCaller: ETHDKGAccusationsCaller{contract: contract}, ETHDKGAccusationsTransactor: ETHDKGAccusationsTransactor{contract: contract}, ETHDKGAccusationsFilterer: ETHDKGAccusationsFilterer{contract: contract}}, nil
}

// ETHDKGAccusations is an auto generated Go binding around an Ethereum contract.
type ETHDKGAccusations struct {
	ETHDKGAccusationsCaller     // Read-only binding to the contract
	ETHDKGAccusationsTransactor // Write-only binding to the contract
	ETHDKGAccusationsFilterer   // Log filterer for contract events
}

// ETHDKGAccusationsCaller is an auto generated read-only Go binding around an Ethereum contract.
type ETHDKGAccusationsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGAccusationsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ETHDKGAccusationsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGAccusationsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ETHDKGAccusationsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGAccusationsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ETHDKGAccusationsSession struct {
	Contract     *ETHDKGAccusations // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// ETHDKGAccusationsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ETHDKGAccusationsCallerSession struct {
	Contract *ETHDKGAccusationsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// ETHDKGAccusationsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ETHDKGAccusationsTransactorSession struct {
	Contract     *ETHDKGAccusationsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// ETHDKGAccusationsRaw is an auto generated low-level Go binding around an Ethereum contract.
type ETHDKGAccusationsRaw struct {
	Contract *ETHDKGAccusations // Generic contract binding to access the raw methods on
}

// ETHDKGAccusationsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ETHDKGAccusationsCallerRaw struct {
	Contract *ETHDKGAccusationsCaller // Generic read-only contract binding to access the raw methods on
}

// ETHDKGAccusationsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ETHDKGAccusationsTransactorRaw struct {
	Contract *ETHDKGAccusationsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewETHDKGAccusations creates a new instance of ETHDKGAccusations, bound to a specific deployed contract.
func NewETHDKGAccusations(address common.Address, backend bind.ContractBackend) (*ETHDKGAccusations, error) {
	contract, err := bindETHDKGAccusations(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ETHDKGAccusations{ETHDKGAccusationsCaller: ETHDKGAccusationsCaller{contract: contract}, ETHDKGAccusationsTransactor: ETHDKGAccusationsTransactor{contract: contract}, ETHDKGAccusationsFilterer: ETHDKGAccusationsFilterer{contract: contract}}, nil
}

// NewETHDKGAccusationsCaller creates a new read-only instance of ETHDKGAccusations, bound to a specific deployed contract.
func NewETHDKGAccusationsCaller(address common.Address, caller bind.ContractCaller) (*ETHDKGAccusationsCaller, error) {
	contract, err := bindETHDKGAccusations(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ETHDKGAccusationsCaller{contract: contract}, nil
}

// NewETHDKGAccusationsTransactor creates a new write-only instance of ETHDKGAccusations, bound to a specific deployed contract.
func NewETHDKGAccusationsTransactor(address common.Address, transactor bind.ContractTransactor) (*ETHDKGAccusationsTransactor, error) {
	contract, err := bindETHDKGAccusations(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ETHDKGAccusationsTransactor{contract: contract}, nil
}

// NewETHDKGAccusationsFilterer creates a new log filterer instance of ETHDKGAccusations, bound to a specific deployed contract.
func NewETHDKGAccusationsFilterer(address common.Address, filterer bind.ContractFilterer) (*ETHDKGAccusationsFilterer, error) {
	contract, err := bindETHDKGAccusations(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ETHDKGAccusationsFilterer{contract: contract}, nil
}

// bindETHDKGAccusations binds a generic wrapper to an already deployed contract.
func bindETHDKGAccusations(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ETHDKGAccusationsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETHDKGAccusations *ETHDKGAccusationsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ETHDKGAccusations.Contract.ETHDKGAccusationsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETHDKGAccusations *ETHDKGAccusationsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKGAccusations.Contract.ETHDKGAccusationsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETHDKGAccusations *ETHDKGAccusationsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETHDKGAccusations.Contract.ETHDKGAccusationsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETHDKGAccusations *ETHDKGAccusationsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ETHDKGAccusations.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETHDKGAccusations *ETHDKGAccusationsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKGAccusations.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETHDKGAccusations *ETHDKGAccusationsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETHDKGAccusations.Contract.contract.Transact(opts, method, params...)
}

// AccuseParticipantDidNotDistributeShares is a paid mutator transaction binding the contract method 0xdae681bc.
//
// Solidity: function accuseParticipantDidNotDistributeShares(address[] dishonestAddresses) returns()
func (_ETHDKGAccusations *ETHDKGAccusationsTransactor) AccuseParticipantDidNotDistributeShares(opts *bind.TransactOpts, dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKGAccusations.contract.Transact(opts, "accuseParticipantDidNotDistributeShares", dishonestAddresses)
}

// AccuseParticipantDidNotDistributeShares is a paid mutator transaction binding the contract method 0xdae681bc.
//
// Solidity: function accuseParticipantDidNotDistributeShares(address[] dishonestAddresses) returns()
func (_ETHDKGAccusations *ETHDKGAccusationsSession) AccuseParticipantDidNotDistributeShares(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKGAccusations.Contract.AccuseParticipantDidNotDistributeShares(&_ETHDKGAccusations.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDidNotDistributeShares is a paid mutator transaction binding the contract method 0xdae681bc.
//
// Solidity: function accuseParticipantDidNotDistributeShares(address[] dishonestAddresses) returns()
func (_ETHDKGAccusations *ETHDKGAccusationsTransactorSession) AccuseParticipantDidNotDistributeShares(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKGAccusations.Contract.AccuseParticipantDidNotDistributeShares(&_ETHDKGAccusations.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDidNotSubmitGPKJ is a paid mutator transaction binding the contract method 0x7df24ee9.
//
// Solidity: function accuseParticipantDidNotSubmitGPKJ(address[] dishonestAddresses) returns()
func (_ETHDKGAccusations *ETHDKGAccusationsTransactor) AccuseParticipantDidNotSubmitGPKJ(opts *bind.TransactOpts, dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKGAccusations.contract.Transact(opts, "accuseParticipantDidNotSubmitGPKJ", dishonestAddresses)
}

// AccuseParticipantDidNotSubmitGPKJ is a paid mutator transaction binding the contract method 0x7df24ee9.
//
// Solidity: function accuseParticipantDidNotSubmitGPKJ(address[] dishonestAddresses) returns()
func (_ETHDKGAccusations *ETHDKGAccusationsSession) AccuseParticipantDidNotSubmitGPKJ(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKGAccusations.Contract.AccuseParticipantDidNotSubmitGPKJ(&_ETHDKGAccusations.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDidNotSubmitGPKJ is a paid mutator transaction binding the contract method 0x7df24ee9.
//
// Solidity: function accuseParticipantDidNotSubmitGPKJ(address[] dishonestAddresses) returns()
func (_ETHDKGAccusations *ETHDKGAccusationsTransactorSession) AccuseParticipantDidNotSubmitGPKJ(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKGAccusations.Contract.AccuseParticipantDidNotSubmitGPKJ(&_ETHDKGAccusations.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDidNotSubmitKeyShares is a paid mutator transaction binding the contract method 0x043a6f12.
//
// Solidity: function accuseParticipantDidNotSubmitKeyShares(address[] dishonestAddresses) returns()
func (_ETHDKGAccusations *ETHDKGAccusationsTransactor) AccuseParticipantDidNotSubmitKeyShares(opts *bind.TransactOpts, dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKGAccusations.contract.Transact(opts, "accuseParticipantDidNotSubmitKeyShares", dishonestAddresses)
}

// AccuseParticipantDidNotSubmitKeyShares is a paid mutator transaction binding the contract method 0x043a6f12.
//
// Solidity: function accuseParticipantDidNotSubmitKeyShares(address[] dishonestAddresses) returns()
func (_ETHDKGAccusations *ETHDKGAccusationsSession) AccuseParticipantDidNotSubmitKeyShares(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKGAccusations.Contract.AccuseParticipantDidNotSubmitKeyShares(&_ETHDKGAccusations.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDidNotSubmitKeyShares is a paid mutator transaction binding the contract method 0x043a6f12.
//
// Solidity: function accuseParticipantDidNotSubmitKeyShares(address[] dishonestAddresses) returns()
func (_ETHDKGAccusations *ETHDKGAccusationsTransactorSession) AccuseParticipantDidNotSubmitKeyShares(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKGAccusations.Contract.AccuseParticipantDidNotSubmitKeyShares(&_ETHDKGAccusations.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDistributedBadShares is a paid mutator transaction binding the contract method 0xedbe7bf7.
//
// Solidity: function accuseParticipantDistributedBadShares(address dishonestAddress, uint256[] encryptedShares, uint256[2][] commitments, uint256[2] sharedKey, uint256[2] sharedKeyCorrectnessProof) returns()
func (_ETHDKGAccusations *ETHDKGAccusationsTransactor) AccuseParticipantDistributedBadShares(opts *bind.TransactOpts, dishonestAddress common.Address, encryptedShares []*big.Int, commitments [][2]*big.Int, sharedKey [2]*big.Int, sharedKeyCorrectnessProof [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKGAccusations.contract.Transact(opts, "accuseParticipantDistributedBadShares", dishonestAddress, encryptedShares, commitments, sharedKey, sharedKeyCorrectnessProof)
}

// AccuseParticipantDistributedBadShares is a paid mutator transaction binding the contract method 0xedbe7bf7.
//
// Solidity: function accuseParticipantDistributedBadShares(address dishonestAddress, uint256[] encryptedShares, uint256[2][] commitments, uint256[2] sharedKey, uint256[2] sharedKeyCorrectnessProof) returns()
func (_ETHDKGAccusations *ETHDKGAccusationsSession) AccuseParticipantDistributedBadShares(dishonestAddress common.Address, encryptedShares []*big.Int, commitments [][2]*big.Int, sharedKey [2]*big.Int, sharedKeyCorrectnessProof [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKGAccusations.Contract.AccuseParticipantDistributedBadShares(&_ETHDKGAccusations.TransactOpts, dishonestAddress, encryptedShares, commitments, sharedKey, sharedKeyCorrectnessProof)
}

// AccuseParticipantDistributedBadShares is a paid mutator transaction binding the contract method 0xedbe7bf7.
//
// Solidity: function accuseParticipantDistributedBadShares(address dishonestAddress, uint256[] encryptedShares, uint256[2][] commitments, uint256[2] sharedKey, uint256[2] sharedKeyCorrectnessProof) returns()
func (_ETHDKGAccusations *ETHDKGAccusationsTransactorSession) AccuseParticipantDistributedBadShares(dishonestAddress common.Address, encryptedShares []*big.Int, commitments [][2]*big.Int, sharedKey [2]*big.Int, sharedKeyCorrectnessProof [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKGAccusations.Contract.AccuseParticipantDistributedBadShares(&_ETHDKGAccusations.TransactOpts, dishonestAddress, encryptedShares, commitments, sharedKey, sharedKeyCorrectnessProof)
}

// AccuseParticipantNotRegistered is a paid mutator transaction binding the contract method 0xf72c45b6.
//
// Solidity: function accuseParticipantNotRegistered(address[] dishonestAddresses) returns()
func (_ETHDKGAccusations *ETHDKGAccusationsTransactor) AccuseParticipantNotRegistered(opts *bind.TransactOpts, dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKGAccusations.contract.Transact(opts, "accuseParticipantNotRegistered", dishonestAddresses)
}

// AccuseParticipantNotRegistered is a paid mutator transaction binding the contract method 0xf72c45b6.
//
// Solidity: function accuseParticipantNotRegistered(address[] dishonestAddresses) returns()
func (_ETHDKGAccusations *ETHDKGAccusationsSession) AccuseParticipantNotRegistered(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKGAccusations.Contract.AccuseParticipantNotRegistered(&_ETHDKGAccusations.TransactOpts, dishonestAddresses)
}

// AccuseParticipantNotRegistered is a paid mutator transaction binding the contract method 0xf72c45b6.
//
// Solidity: function accuseParticipantNotRegistered(address[] dishonestAddresses) returns()
func (_ETHDKGAccusations *ETHDKGAccusationsTransactorSession) AccuseParticipantNotRegistered(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKGAccusations.Contract.AccuseParticipantNotRegistered(&_ETHDKGAccusations.TransactOpts, dishonestAddresses)
}

// AccuseParticipantSubmittedBadGPKJ is a paid mutator transaction binding the contract method 0x80001264.
//
// Solidity: function accuseParticipantSubmittedBadGPKJ(address[] validators, bytes32[] encryptedSharesHash, uint256[2][][] commitments, address dishonestAddress) returns()
func (_ETHDKGAccusations *ETHDKGAccusationsTransactor) AccuseParticipantSubmittedBadGPKJ(opts *bind.TransactOpts, validators []common.Address, encryptedSharesHash [][32]byte, commitments [][][2]*big.Int, dishonestAddress common.Address) (*types.Transaction, error) {
	return _ETHDKGAccusations.contract.Transact(opts, "accuseParticipantSubmittedBadGPKJ", validators, encryptedSharesHash, commitments, dishonestAddress)
}

// AccuseParticipantSubmittedBadGPKJ is a paid mutator transaction binding the contract method 0x80001264.
//
// Solidity: function accuseParticipantSubmittedBadGPKJ(address[] validators, bytes32[] encryptedSharesHash, uint256[2][][] commitments, address dishonestAddress) returns()
func (_ETHDKGAccusations *ETHDKGAccusationsSession) AccuseParticipantSubmittedBadGPKJ(validators []common.Address, encryptedSharesHash [][32]byte, commitments [][][2]*big.Int, dishonestAddress common.Address) (*types.Transaction, error) {
	return _ETHDKGAccusations.Contract.AccuseParticipantSubmittedBadGPKJ(&_ETHDKGAccusations.TransactOpts, validators, encryptedSharesHash, commitments, dishonestAddress)
}

// AccuseParticipantSubmittedBadGPKJ is a paid mutator transaction binding the contract method 0x80001264.
//
// Solidity: function accuseParticipantSubmittedBadGPKJ(address[] validators, bytes32[] encryptedSharesHash, uint256[2][][] commitments, address dishonestAddress) returns()
func (_ETHDKGAccusations *ETHDKGAccusationsTransactorSession) AccuseParticipantSubmittedBadGPKJ(validators []common.Address, encryptedSharesHash [][32]byte, commitments [][][2]*big.Int, dishonestAddress common.Address) (*types.Transaction, error) {
	return _ETHDKGAccusations.Contract.AccuseParticipantSubmittedBadGPKJ(&_ETHDKGAccusations.TransactOpts, validators, encryptedSharesHash, commitments, dishonestAddress)
}

// ETHDKGAccusationsAddressRegisteredIterator is returned from FilterAddressRegistered and is used to iterate over the raw logs and unpacked data for AddressRegistered events raised by the ETHDKGAccusations contract.
type ETHDKGAccusationsAddressRegisteredIterator struct {
	Event *ETHDKGAccusationsAddressRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGAccusationsAddressRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGAccusationsAddressRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGAccusationsAddressRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGAccusationsAddressRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGAccusationsAddressRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGAccusationsAddressRegistered represents a AddressRegistered event raised by the ETHDKGAccusations contract.
type ETHDKGAccusationsAddressRegistered struct {
	Account   common.Address
	Index     *big.Int
	Nonce     *big.Int
	PublicKey [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAddressRegistered is a free log retrieval operation binding the contract event 0x7f1304057ec61140fbf2f5f236790f34fcafe123d3eb0d298d92317c97da500d.
//
// Solidity: event AddressRegistered(address account, uint256 index, uint256 nonce, uint256[2] publicKey)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) FilterAddressRegistered(opts *bind.FilterOpts) (*ETHDKGAccusationsAddressRegisteredIterator, error) {

	logs, sub, err := _ETHDKGAccusations.contract.FilterLogs(opts, "AddressRegistered")
	if err != nil {
		return nil, err
	}
	return &ETHDKGAccusationsAddressRegisteredIterator{contract: _ETHDKGAccusations.contract, event: "AddressRegistered", logs: logs, sub: sub}, nil
}

// WatchAddressRegistered is a free log subscription operation binding the contract event 0x7f1304057ec61140fbf2f5f236790f34fcafe123d3eb0d298d92317c97da500d.
//
// Solidity: event AddressRegistered(address account, uint256 index, uint256 nonce, uint256[2] publicKey)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) WatchAddressRegistered(opts *bind.WatchOpts, sink chan<- *ETHDKGAccusationsAddressRegistered) (event.Subscription, error) {

	logs, sub, err := _ETHDKGAccusations.contract.WatchLogs(opts, "AddressRegistered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGAccusationsAddressRegistered)
				if err := _ETHDKGAccusations.contract.UnpackLog(event, "AddressRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddressRegistered is a log parse operation binding the contract event 0x7f1304057ec61140fbf2f5f236790f34fcafe123d3eb0d298d92317c97da500d.
//
// Solidity: event AddressRegistered(address account, uint256 index, uint256 nonce, uint256[2] publicKey)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) ParseAddressRegistered(log types.Log) (*ETHDKGAccusationsAddressRegistered, error) {
	event := new(ETHDKGAccusationsAddressRegistered)
	if err := _ETHDKGAccusations.contract.UnpackLog(event, "AddressRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGAccusationsGPKJSubmissionCompleteIterator is returned from FilterGPKJSubmissionComplete and is used to iterate over the raw logs and unpacked data for GPKJSubmissionComplete events raised by the ETHDKGAccusations contract.
type ETHDKGAccusationsGPKJSubmissionCompleteIterator struct {
	Event *ETHDKGAccusationsGPKJSubmissionComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGAccusationsGPKJSubmissionCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGAccusationsGPKJSubmissionComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGAccusationsGPKJSubmissionComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGAccusationsGPKJSubmissionCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGAccusationsGPKJSubmissionCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGAccusationsGPKJSubmissionComplete represents a GPKJSubmissionComplete event raised by the ETHDKGAccusations contract.
type ETHDKGAccusationsGPKJSubmissionComplete struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterGPKJSubmissionComplete is a free log retrieval operation binding the contract event 0x87bfe600b78cad9f7cf68c99eb582c1748f636b3269842b37d5873b0e069f628.
//
// Solidity: event GPKJSubmissionComplete(uint256 blockNumber)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) FilterGPKJSubmissionComplete(opts *bind.FilterOpts) (*ETHDKGAccusationsGPKJSubmissionCompleteIterator, error) {

	logs, sub, err := _ETHDKGAccusations.contract.FilterLogs(opts, "GPKJSubmissionComplete")
	if err != nil {
		return nil, err
	}
	return &ETHDKGAccusationsGPKJSubmissionCompleteIterator{contract: _ETHDKGAccusations.contract, event: "GPKJSubmissionComplete", logs: logs, sub: sub}, nil
}

// WatchGPKJSubmissionComplete is a free log subscription operation binding the contract event 0x87bfe600b78cad9f7cf68c99eb582c1748f636b3269842b37d5873b0e069f628.
//
// Solidity: event GPKJSubmissionComplete(uint256 blockNumber)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) WatchGPKJSubmissionComplete(opts *bind.WatchOpts, sink chan<- *ETHDKGAccusationsGPKJSubmissionComplete) (event.Subscription, error) {

	logs, sub, err := _ETHDKGAccusations.contract.WatchLogs(opts, "GPKJSubmissionComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGAccusationsGPKJSubmissionComplete)
				if err := _ETHDKGAccusations.contract.UnpackLog(event, "GPKJSubmissionComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGPKJSubmissionComplete is a log parse operation binding the contract event 0x87bfe600b78cad9f7cf68c99eb582c1748f636b3269842b37d5873b0e069f628.
//
// Solidity: event GPKJSubmissionComplete(uint256 blockNumber)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) ParseGPKJSubmissionComplete(log types.Log) (*ETHDKGAccusationsGPKJSubmissionComplete, error) {
	event := new(ETHDKGAccusationsGPKJSubmissionComplete)
	if err := _ETHDKGAccusations.contract.UnpackLog(event, "GPKJSubmissionComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGAccusationsKeyShareSubmissionCompleteIterator is returned from FilterKeyShareSubmissionComplete and is used to iterate over the raw logs and unpacked data for KeyShareSubmissionComplete events raised by the ETHDKGAccusations contract.
type ETHDKGAccusationsKeyShareSubmissionCompleteIterator struct {
	Event *ETHDKGAccusationsKeyShareSubmissionComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGAccusationsKeyShareSubmissionCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGAccusationsKeyShareSubmissionComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGAccusationsKeyShareSubmissionComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGAccusationsKeyShareSubmissionCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGAccusationsKeyShareSubmissionCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGAccusationsKeyShareSubmissionComplete represents a KeyShareSubmissionComplete event raised by the ETHDKGAccusations contract.
type ETHDKGAccusationsKeyShareSubmissionComplete struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterKeyShareSubmissionComplete is a free log retrieval operation binding the contract event 0x522cec98f6caa194456c44afa9e8cef9ac63eecb0be60e20d180ce19cfb0ef59.
//
// Solidity: event KeyShareSubmissionComplete(uint256 blockNumber)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) FilterKeyShareSubmissionComplete(opts *bind.FilterOpts) (*ETHDKGAccusationsKeyShareSubmissionCompleteIterator, error) {

	logs, sub, err := _ETHDKGAccusations.contract.FilterLogs(opts, "KeyShareSubmissionComplete")
	if err != nil {
		return nil, err
	}
	return &ETHDKGAccusationsKeyShareSubmissionCompleteIterator{contract: _ETHDKGAccusations.contract, event: "KeyShareSubmissionComplete", logs: logs, sub: sub}, nil
}

// WatchKeyShareSubmissionComplete is a free log subscription operation binding the contract event 0x522cec98f6caa194456c44afa9e8cef9ac63eecb0be60e20d180ce19cfb0ef59.
//
// Solidity: event KeyShareSubmissionComplete(uint256 blockNumber)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) WatchKeyShareSubmissionComplete(opts *bind.WatchOpts, sink chan<- *ETHDKGAccusationsKeyShareSubmissionComplete) (event.Subscription, error) {

	logs, sub, err := _ETHDKGAccusations.contract.WatchLogs(opts, "KeyShareSubmissionComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGAccusationsKeyShareSubmissionComplete)
				if err := _ETHDKGAccusations.contract.UnpackLog(event, "KeyShareSubmissionComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyShareSubmissionComplete is a log parse operation binding the contract event 0x522cec98f6caa194456c44afa9e8cef9ac63eecb0be60e20d180ce19cfb0ef59.
//
// Solidity: event KeyShareSubmissionComplete(uint256 blockNumber)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) ParseKeyShareSubmissionComplete(log types.Log) (*ETHDKGAccusationsKeyShareSubmissionComplete, error) {
	event := new(ETHDKGAccusationsKeyShareSubmissionComplete)
	if err := _ETHDKGAccusations.contract.UnpackLog(event, "KeyShareSubmissionComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGAccusationsKeyShareSubmittedIterator is returned from FilterKeyShareSubmitted and is used to iterate over the raw logs and unpacked data for KeyShareSubmitted events raised by the ETHDKGAccusations contract.
type ETHDKGAccusationsKeyShareSubmittedIterator struct {
	Event *ETHDKGAccusationsKeyShareSubmitted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGAccusationsKeyShareSubmittedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGAccusationsKeyShareSubmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGAccusationsKeyShareSubmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGAccusationsKeyShareSubmittedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGAccusationsKeyShareSubmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGAccusationsKeyShareSubmitted represents a KeyShareSubmitted event raised by the ETHDKGAccusations contract.
type ETHDKGAccusationsKeyShareSubmitted struct {
	Account                    common.Address
	Index                      *big.Int
	Nonce                      *big.Int
	KeyShareG1                 [2]*big.Int
	KeyShareG1CorrectnessProof [2]*big.Int
	KeyShareG2                 [4]*big.Int
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterKeyShareSubmitted is a free log retrieval operation binding the contract event 0x6162e2d11398e4063e4c8565dafc4fb6755bbead93747ea836a5ef73a594aaf7.
//
// Solidity: event KeyShareSubmitted(address account, uint256 index, uint256 nonce, uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) FilterKeyShareSubmitted(opts *bind.FilterOpts) (*ETHDKGAccusationsKeyShareSubmittedIterator, error) {

	logs, sub, err := _ETHDKGAccusations.contract.FilterLogs(opts, "KeyShareSubmitted")
	if err != nil {
		return nil, err
	}
	return &ETHDKGAccusationsKeyShareSubmittedIterator{contract: _ETHDKGAccusations.contract, event: "KeyShareSubmitted", logs: logs, sub: sub}, nil
}

// WatchKeyShareSubmitted is a free log subscription operation binding the contract event 0x6162e2d11398e4063e4c8565dafc4fb6755bbead93747ea836a5ef73a594aaf7.
//
// Solidity: event KeyShareSubmitted(address account, uint256 index, uint256 nonce, uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) WatchKeyShareSubmitted(opts *bind.WatchOpts, sink chan<- *ETHDKGAccusationsKeyShareSubmitted) (event.Subscription, error) {

	logs, sub, err := _ETHDKGAccusations.contract.WatchLogs(opts, "KeyShareSubmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGAccusationsKeyShareSubmitted)
				if err := _ETHDKGAccusations.contract.UnpackLog(event, "KeyShareSubmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyShareSubmitted is a log parse operation binding the contract event 0x6162e2d11398e4063e4c8565dafc4fb6755bbead93747ea836a5ef73a594aaf7.
//
// Solidity: event KeyShareSubmitted(address account, uint256 index, uint256 nonce, uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) ParseKeyShareSubmitted(log types.Log) (*ETHDKGAccusationsKeyShareSubmitted, error) {
	event := new(ETHDKGAccusationsKeyShareSubmitted)
	if err := _ETHDKGAccusations.contract.UnpackLog(event, "KeyShareSubmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGAccusationsMPKSetIterator is returned from FilterMPKSet and is used to iterate over the raw logs and unpacked data for MPKSet events raised by the ETHDKGAccusations contract.
type ETHDKGAccusationsMPKSetIterator struct {
	Event *ETHDKGAccusationsMPKSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGAccusationsMPKSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGAccusationsMPKSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGAccusationsMPKSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGAccusationsMPKSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGAccusationsMPKSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGAccusationsMPKSet represents a MPKSet event raised by the ETHDKGAccusations contract.
type ETHDKGAccusationsMPKSet struct {
	BlockNumber *big.Int
	Nonce       *big.Int
	Mpk         [4]*big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterMPKSet is a free log retrieval operation binding the contract event 0x71b1ebd27be320895a22125d6458e3363aefa6944a312ede4bf275867e6d5a71.
//
// Solidity: event MPKSet(uint256 blockNumber, uint256 nonce, uint256[4] mpk)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) FilterMPKSet(opts *bind.FilterOpts) (*ETHDKGAccusationsMPKSetIterator, error) {

	logs, sub, err := _ETHDKGAccusations.contract.FilterLogs(opts, "MPKSet")
	if err != nil {
		return nil, err
	}
	return &ETHDKGAccusationsMPKSetIterator{contract: _ETHDKGAccusations.contract, event: "MPKSet", logs: logs, sub: sub}, nil
}

// WatchMPKSet is a free log subscription operation binding the contract event 0x71b1ebd27be320895a22125d6458e3363aefa6944a312ede4bf275867e6d5a71.
//
// Solidity: event MPKSet(uint256 blockNumber, uint256 nonce, uint256[4] mpk)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) WatchMPKSet(opts *bind.WatchOpts, sink chan<- *ETHDKGAccusationsMPKSet) (event.Subscription, error) {

	logs, sub, err := _ETHDKGAccusations.contract.WatchLogs(opts, "MPKSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGAccusationsMPKSet)
				if err := _ETHDKGAccusations.contract.UnpackLog(event, "MPKSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMPKSet is a log parse operation binding the contract event 0x71b1ebd27be320895a22125d6458e3363aefa6944a312ede4bf275867e6d5a71.
//
// Solidity: event MPKSet(uint256 blockNumber, uint256 nonce, uint256[4] mpk)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) ParseMPKSet(log types.Log) (*ETHDKGAccusationsMPKSet, error) {
	event := new(ETHDKGAccusationsMPKSet)
	if err := _ETHDKGAccusations.contract.UnpackLog(event, "MPKSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGAccusationsRegistrationCompleteIterator is returned from FilterRegistrationComplete and is used to iterate over the raw logs and unpacked data for RegistrationComplete events raised by the ETHDKGAccusations contract.
type ETHDKGAccusationsRegistrationCompleteIterator struct {
	Event *ETHDKGAccusationsRegistrationComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGAccusationsRegistrationCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGAccusationsRegistrationComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGAccusationsRegistrationComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGAccusationsRegistrationCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGAccusationsRegistrationCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGAccusationsRegistrationComplete represents a RegistrationComplete event raised by the ETHDKGAccusations contract.
type ETHDKGAccusationsRegistrationComplete struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRegistrationComplete is a free log retrieval operation binding the contract event 0x833013b96b786b4eca83baac286920e5e53956c21ff3894f1d9f02e97d6ed764.
//
// Solidity: event RegistrationComplete(uint256 blockNumber)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) FilterRegistrationComplete(opts *bind.FilterOpts) (*ETHDKGAccusationsRegistrationCompleteIterator, error) {

	logs, sub, err := _ETHDKGAccusations.contract.FilterLogs(opts, "RegistrationComplete")
	if err != nil {
		return nil, err
	}
	return &ETHDKGAccusationsRegistrationCompleteIterator{contract: _ETHDKGAccusations.contract, event: "RegistrationComplete", logs: logs, sub: sub}, nil
}

// WatchRegistrationComplete is a free log subscription operation binding the contract event 0x833013b96b786b4eca83baac286920e5e53956c21ff3894f1d9f02e97d6ed764.
//
// Solidity: event RegistrationComplete(uint256 blockNumber)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) WatchRegistrationComplete(opts *bind.WatchOpts, sink chan<- *ETHDKGAccusationsRegistrationComplete) (event.Subscription, error) {

	logs, sub, err := _ETHDKGAccusations.contract.WatchLogs(opts, "RegistrationComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGAccusationsRegistrationComplete)
				if err := _ETHDKGAccusations.contract.UnpackLog(event, "RegistrationComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistrationComplete is a log parse operation binding the contract event 0x833013b96b786b4eca83baac286920e5e53956c21ff3894f1d9f02e97d6ed764.
//
// Solidity: event RegistrationComplete(uint256 blockNumber)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) ParseRegistrationComplete(log types.Log) (*ETHDKGAccusationsRegistrationComplete, error) {
	event := new(ETHDKGAccusationsRegistrationComplete)
	if err := _ETHDKGAccusations.contract.UnpackLog(event, "RegistrationComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGAccusationsRegistrationOpenedIterator is returned from FilterRegistrationOpened and is used to iterate over the raw logs and unpacked data for RegistrationOpened events raised by the ETHDKGAccusations contract.
type ETHDKGAccusationsRegistrationOpenedIterator struct {
	Event *ETHDKGAccusationsRegistrationOpened // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGAccusationsRegistrationOpenedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGAccusationsRegistrationOpened)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGAccusationsRegistrationOpened)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGAccusationsRegistrationOpenedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGAccusationsRegistrationOpenedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGAccusationsRegistrationOpened represents a RegistrationOpened event raised by the ETHDKGAccusations contract.
type ETHDKGAccusationsRegistrationOpened struct {
<<<<<<< Updated upstream
	StartBlock *big.Int
	Nonce      *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterRegistrationOpened is a free log retrieval operation binding the contract event 0x0092d3a0faf985375d3ea8563cdbdedd99bb694713af121204f50ccb198fb476.
//
// Solidity: event RegistrationOpened(uint256 startBlock, uint256 nonce)
=======
	StartBlock         *big.Int
	Nonce              *big.Int
	PhaseLength        *big.Int
	ConfirmationLength *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterRegistrationOpened is a free log retrieval operation binding the contract event 0xc867fa8c9b2d0ef5b1687773346ccc44cbc8b392ec2934a6178ffe529f311c8d.
//
// Solidity: event RegistrationOpened(uint256 startBlock, uint256 nonce, uint256 phaseLength, uint256 confirmationLength)
>>>>>>> Stashed changes
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) FilterRegistrationOpened(opts *bind.FilterOpts) (*ETHDKGAccusationsRegistrationOpenedIterator, error) {

	logs, sub, err := _ETHDKGAccusations.contract.FilterLogs(opts, "RegistrationOpened")
	if err != nil {
		return nil, err
	}
	return &ETHDKGAccusationsRegistrationOpenedIterator{contract: _ETHDKGAccusations.contract, event: "RegistrationOpened", logs: logs, sub: sub}, nil
}

<<<<<<< Updated upstream
// WatchRegistrationOpened is a free log subscription operation binding the contract event 0x0092d3a0faf985375d3ea8563cdbdedd99bb694713af121204f50ccb198fb476.
//
// Solidity: event RegistrationOpened(uint256 startBlock, uint256 nonce)
=======
// WatchRegistrationOpened is a free log subscription operation binding the contract event 0xc867fa8c9b2d0ef5b1687773346ccc44cbc8b392ec2934a6178ffe529f311c8d.
//
// Solidity: event RegistrationOpened(uint256 startBlock, uint256 nonce, uint256 phaseLength, uint256 confirmationLength)
>>>>>>> Stashed changes
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) WatchRegistrationOpened(opts *bind.WatchOpts, sink chan<- *ETHDKGAccusationsRegistrationOpened) (event.Subscription, error) {

	logs, sub, err := _ETHDKGAccusations.contract.WatchLogs(opts, "RegistrationOpened")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGAccusationsRegistrationOpened)
				if err := _ETHDKGAccusations.contract.UnpackLog(event, "RegistrationOpened", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

<<<<<<< Updated upstream
// ParseRegistrationOpened is a log parse operation binding the contract event 0x0092d3a0faf985375d3ea8563cdbdedd99bb694713af121204f50ccb198fb476.
//
// Solidity: event RegistrationOpened(uint256 startBlock, uint256 nonce)
=======
// ParseRegistrationOpened is a log parse operation binding the contract event 0xc867fa8c9b2d0ef5b1687773346ccc44cbc8b392ec2934a6178ffe529f311c8d.
//
// Solidity: event RegistrationOpened(uint256 startBlock, uint256 nonce, uint256 phaseLength, uint256 confirmationLength)
>>>>>>> Stashed changes
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) ParseRegistrationOpened(log types.Log) (*ETHDKGAccusationsRegistrationOpened, error) {
	event := new(ETHDKGAccusationsRegistrationOpened)
	if err := _ETHDKGAccusations.contract.UnpackLog(event, "RegistrationOpened", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGAccusationsShareDistributionCompleteIterator is returned from FilterShareDistributionComplete and is used to iterate over the raw logs and unpacked data for ShareDistributionComplete events raised by the ETHDKGAccusations contract.
type ETHDKGAccusationsShareDistributionCompleteIterator struct {
	Event *ETHDKGAccusationsShareDistributionComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGAccusationsShareDistributionCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGAccusationsShareDistributionComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGAccusationsShareDistributionComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGAccusationsShareDistributionCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGAccusationsShareDistributionCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGAccusationsShareDistributionComplete represents a ShareDistributionComplete event raised by the ETHDKGAccusations contract.
type ETHDKGAccusationsShareDistributionComplete struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterShareDistributionComplete is a free log retrieval operation binding the contract event 0xbfe94ffef5ddde4d25ac7b652f3f67686ea63f9badbfe1f25451e26fc262d11c.
//
// Solidity: event ShareDistributionComplete(uint256 blockNumber)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) FilterShareDistributionComplete(opts *bind.FilterOpts) (*ETHDKGAccusationsShareDistributionCompleteIterator, error) {

	logs, sub, err := _ETHDKGAccusations.contract.FilterLogs(opts, "ShareDistributionComplete")
	if err != nil {
		return nil, err
	}
	return &ETHDKGAccusationsShareDistributionCompleteIterator{contract: _ETHDKGAccusations.contract, event: "ShareDistributionComplete", logs: logs, sub: sub}, nil
}

// WatchShareDistributionComplete is a free log subscription operation binding the contract event 0xbfe94ffef5ddde4d25ac7b652f3f67686ea63f9badbfe1f25451e26fc262d11c.
//
// Solidity: event ShareDistributionComplete(uint256 blockNumber)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) WatchShareDistributionComplete(opts *bind.WatchOpts, sink chan<- *ETHDKGAccusationsShareDistributionComplete) (event.Subscription, error) {

	logs, sub, err := _ETHDKGAccusations.contract.WatchLogs(opts, "ShareDistributionComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGAccusationsShareDistributionComplete)
				if err := _ETHDKGAccusations.contract.UnpackLog(event, "ShareDistributionComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseShareDistributionComplete is a log parse operation binding the contract event 0xbfe94ffef5ddde4d25ac7b652f3f67686ea63f9badbfe1f25451e26fc262d11c.
//
// Solidity: event ShareDistributionComplete(uint256 blockNumber)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) ParseShareDistributionComplete(log types.Log) (*ETHDKGAccusationsShareDistributionComplete, error) {
	event := new(ETHDKGAccusationsShareDistributionComplete)
	if err := _ETHDKGAccusations.contract.UnpackLog(event, "ShareDistributionComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGAccusationsSharesDistributedIterator is returned from FilterSharesDistributed and is used to iterate over the raw logs and unpacked data for SharesDistributed events raised by the ETHDKGAccusations contract.
type ETHDKGAccusationsSharesDistributedIterator struct {
	Event *ETHDKGAccusationsSharesDistributed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGAccusationsSharesDistributedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGAccusationsSharesDistributed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGAccusationsSharesDistributed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGAccusationsSharesDistributedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGAccusationsSharesDistributedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGAccusationsSharesDistributed represents a SharesDistributed event raised by the ETHDKGAccusations contract.
type ETHDKGAccusationsSharesDistributed struct {
	Account         common.Address
	Index           *big.Int
	Nonce           *big.Int
	EncryptedShares []*big.Int
	Commitments     [][2]*big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterSharesDistributed is a free log retrieval operation binding the contract event 0xf0c8b0ef2867c2b4639b404a0296b6bbf0bf97e20856af42144a5a6035c0d0d2.
//
// Solidity: event SharesDistributed(address account, uint256 index, uint256 nonce, uint256[] encryptedShares, uint256[2][] commitments)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) FilterSharesDistributed(opts *bind.FilterOpts) (*ETHDKGAccusationsSharesDistributedIterator, error) {

	logs, sub, err := _ETHDKGAccusations.contract.FilterLogs(opts, "SharesDistributed")
	if err != nil {
		return nil, err
	}
	return &ETHDKGAccusationsSharesDistributedIterator{contract: _ETHDKGAccusations.contract, event: "SharesDistributed", logs: logs, sub: sub}, nil
}

// WatchSharesDistributed is a free log subscription operation binding the contract event 0xf0c8b0ef2867c2b4639b404a0296b6bbf0bf97e20856af42144a5a6035c0d0d2.
//
// Solidity: event SharesDistributed(address account, uint256 index, uint256 nonce, uint256[] encryptedShares, uint256[2][] commitments)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) WatchSharesDistributed(opts *bind.WatchOpts, sink chan<- *ETHDKGAccusationsSharesDistributed) (event.Subscription, error) {

	logs, sub, err := _ETHDKGAccusations.contract.WatchLogs(opts, "SharesDistributed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGAccusationsSharesDistributed)
				if err := _ETHDKGAccusations.contract.UnpackLog(event, "SharesDistributed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSharesDistributed is a log parse operation binding the contract event 0xf0c8b0ef2867c2b4639b404a0296b6bbf0bf97e20856af42144a5a6035c0d0d2.
//
// Solidity: event SharesDistributed(address account, uint256 index, uint256 nonce, uint256[] encryptedShares, uint256[2][] commitments)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) ParseSharesDistributed(log types.Log) (*ETHDKGAccusationsSharesDistributed, error) {
	event := new(ETHDKGAccusationsSharesDistributed)
	if err := _ETHDKGAccusations.contract.UnpackLog(event, "SharesDistributed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGAccusationsValidatorMemberAddedIterator is returned from FilterValidatorMemberAdded and is used to iterate over the raw logs and unpacked data for ValidatorMemberAdded events raised by the ETHDKGAccusations contract.
type ETHDKGAccusationsValidatorMemberAddedIterator struct {
	Event *ETHDKGAccusationsValidatorMemberAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGAccusationsValidatorMemberAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGAccusationsValidatorMemberAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGAccusationsValidatorMemberAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGAccusationsValidatorMemberAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGAccusationsValidatorMemberAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGAccusationsValidatorMemberAdded represents a ValidatorMemberAdded event raised by the ETHDKGAccusations contract.
type ETHDKGAccusationsValidatorMemberAdded struct {
	Account common.Address
	Index   *big.Int
	Nonce   *big.Int
	Epoch   *big.Int
	Share0  *big.Int
	Share1  *big.Int
	Share2  *big.Int
	Share3  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterValidatorMemberAdded is a free log retrieval operation binding the contract event 0x09b90b08bbc3dbe22e9d2a0bc9c2c7614c7511cd0ad72177727a1e762115bf06.
//
// Solidity: event ValidatorMemberAdded(address account, uint256 index, uint256 nonce, uint256 epoch, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) FilterValidatorMemberAdded(opts *bind.FilterOpts) (*ETHDKGAccusationsValidatorMemberAddedIterator, error) {

	logs, sub, err := _ETHDKGAccusations.contract.FilterLogs(opts, "ValidatorMemberAdded")
	if err != nil {
		return nil, err
	}
	return &ETHDKGAccusationsValidatorMemberAddedIterator{contract: _ETHDKGAccusations.contract, event: "ValidatorMemberAdded", logs: logs, sub: sub}, nil
}

// WatchValidatorMemberAdded is a free log subscription operation binding the contract event 0x09b90b08bbc3dbe22e9d2a0bc9c2c7614c7511cd0ad72177727a1e762115bf06.
//
// Solidity: event ValidatorMemberAdded(address account, uint256 index, uint256 nonce, uint256 epoch, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) WatchValidatorMemberAdded(opts *bind.WatchOpts, sink chan<- *ETHDKGAccusationsValidatorMemberAdded) (event.Subscription, error) {

	logs, sub, err := _ETHDKGAccusations.contract.WatchLogs(opts, "ValidatorMemberAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGAccusationsValidatorMemberAdded)
				if err := _ETHDKGAccusations.contract.UnpackLog(event, "ValidatorMemberAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorMemberAdded is a log parse operation binding the contract event 0x09b90b08bbc3dbe22e9d2a0bc9c2c7614c7511cd0ad72177727a1e762115bf06.
//
// Solidity: event ValidatorMemberAdded(address account, uint256 index, uint256 nonce, uint256 epoch, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) ParseValidatorMemberAdded(log types.Log) (*ETHDKGAccusationsValidatorMemberAdded, error) {
	event := new(ETHDKGAccusationsValidatorMemberAdded)
	if err := _ETHDKGAccusations.contract.UnpackLog(event, "ValidatorMemberAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGAccusationsValidatorSetCompletedIterator is returned from FilterValidatorSetCompleted and is used to iterate over the raw logs and unpacked data for ValidatorSetCompleted events raised by the ETHDKGAccusations contract.
type ETHDKGAccusationsValidatorSetCompletedIterator struct {
	Event *ETHDKGAccusationsValidatorSetCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGAccusationsValidatorSetCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGAccusationsValidatorSetCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGAccusationsValidatorSetCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGAccusationsValidatorSetCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGAccusationsValidatorSetCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGAccusationsValidatorSetCompleted represents a ValidatorSetCompleted event raised by the ETHDKGAccusations contract.
type ETHDKGAccusationsValidatorSetCompleted struct {
	ValidatorCount *big.Int
	Nonce          *big.Int
	Epoch          *big.Int
	EthHeight      *big.Int
	MadHeight      *big.Int
	GroupKey0      *big.Int
	GroupKey1      *big.Int
	GroupKey2      *big.Int
	GroupKey3      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterValidatorSetCompleted is a free log retrieval operation binding the contract event 0xd7237b781669fa700ecf77be6cd8fa0f4b98b1a24ac584a9b6b44c509216718a.
//
// Solidity: event ValidatorSetCompleted(uint256 validatorCount, uint256 nonce, uint256 epoch, uint256 ethHeight, uint256 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) FilterValidatorSetCompleted(opts *bind.FilterOpts) (*ETHDKGAccusationsValidatorSetCompletedIterator, error) {

	logs, sub, err := _ETHDKGAccusations.contract.FilterLogs(opts, "ValidatorSetCompleted")
	if err != nil {
		return nil, err
	}
	return &ETHDKGAccusationsValidatorSetCompletedIterator{contract: _ETHDKGAccusations.contract, event: "ValidatorSetCompleted", logs: logs, sub: sub}, nil
}

// WatchValidatorSetCompleted is a free log subscription operation binding the contract event 0xd7237b781669fa700ecf77be6cd8fa0f4b98b1a24ac584a9b6b44c509216718a.
//
// Solidity: event ValidatorSetCompleted(uint256 validatorCount, uint256 nonce, uint256 epoch, uint256 ethHeight, uint256 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) WatchValidatorSetCompleted(opts *bind.WatchOpts, sink chan<- *ETHDKGAccusationsValidatorSetCompleted) (event.Subscription, error) {

	logs, sub, err := _ETHDKGAccusations.contract.WatchLogs(opts, "ValidatorSetCompleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGAccusationsValidatorSetCompleted)
				if err := _ETHDKGAccusations.contract.UnpackLog(event, "ValidatorSetCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorSetCompleted is a log parse operation binding the contract event 0xd7237b781669fa700ecf77be6cd8fa0f4b98b1a24ac584a9b6b44c509216718a.
//
// Solidity: event ValidatorSetCompleted(uint256 validatorCount, uint256 nonce, uint256 epoch, uint256 ethHeight, uint256 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ETHDKGAccusations *ETHDKGAccusationsFilterer) ParseValidatorSetCompleted(log types.Log) (*ETHDKGAccusationsValidatorSetCompleted, error) {
	event := new(ETHDKGAccusationsValidatorSetCompleted)
	if err := _ETHDKGAccusations.contract.UnpackLog(event, "ValidatorSetCompleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGPhasesMetaData contains all meta data concerning the ETHDKGPhases contract.
var ETHDKGPhasesMetaData = &bind.MetaData{
<<<<<<< Updated upstream
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"publicKey\",\"type\":\"uint256[2]\"}],\"name\":\"AddressRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"GPKJSubmissionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"KeyShareSubmissionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1CorrectnessProof\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"keyShareG2\",\"type\":\"uint256[4]\"}],\"name\":\"KeyShareSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"mpk\",\"type\":\"uint256[4]\"}],\"name\":\"MPKSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"RegistrationComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"RegistrationOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"ShareDistributionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"encryptedShares\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"}],\"name\":\"SharesDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share3\",\"type\":\"uint256\"}],\"name\":\"ValidatorMemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethHeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"madHeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey3\",\"type\":\"uint256\"}],\"name\":\"ValidatorSetCompleted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"complete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"encryptedShares\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"}],\"name\":\"distributeShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"publicKey\",\"type\":\"uint256[2]\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"gpkj\",\"type\":\"uint256[4]\"}],\"name\":\"submitGPKj\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1CorrectnessProof\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"keyShareG2\",\"type\":\"uint256[4]\"}],\"name\":\"submitKeyShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"masterPublicKey_\",\"type\":\"uint256[4]\"}],\"name\":\"submitMasterPublicKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50615325806100206000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c806380b97e011161005057806380b97e01146100b9578063d410e8e4146100d5578063e8323224146100f157610072565b80633442af5c14610077578063522e11771461009357806362a6523e1461009d575b600080fd5b610091600480360381019061008c91906132b1565b61010d565b005b61009b6106ef565b005b6100b760048036038101906100b2919061338f565b610969565b005b6100d360048036038101906100ce9190613569565b611476565b005b6100ef60048036038101906100ea91906135e1565b611da2565b005b61010b600480360381019061010691906135e1565b612575565b005b600060078111156101215761012061360e565b5b600060109054906101000a900460ff1660078111156101435761014261360e565b5b14801561016f5750600060089054906101000a900467ffffffffffffffff1667ffffffffffffffff1643115b80156101ba5750600060199054906101000a900461ffff1661ffff16600060089054906101000a900467ffffffffffffffff166101ac9190613680565b67ffffffffffffffff164311155b6101f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f090613741565b60405180910390fd5b60008160006002811061020f5761020e613761565b5b60200201511415801561023b575060008160016002811061023357610232613761565b5b602002015114155b61027a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027190613802565b60405180910390fd5b610283816128fb565b6102c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b990613894565b60405180910390fd5b60008054906101000a900467ffffffffffffffff1667ffffffffffffffff16600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1610610382576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103799061394c565b60405180910390fd5b60008060119054906101000a900463ffffffff16905080806103a39061397c565b91505060405180610100016040528083815260200160008054906101000a900467ffffffffffffffff1667ffffffffffffffff1681526020018263ffffffff1667ffffffffffffffff168152602001600060109054906101000a900460ff1660078111156104145761041361360e565b5b81526020016000801b8152602001604051806040016040528060008152602001600081525081526020016040518060400160405280600081526020016000815250815260200160405180608001604052806000815260200160008152602001600081526020016000815250815250600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000019060026104d892919061303f565b5060208201518160020160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060408201518160020160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060608201518160020160106101000a81548160ff021916908360078111156105625761056161360e565b5b02179055506080820151816003015560a08201518160040190600261058892919061303f565b5060c0820151816006019060026105a092919061303f565b5060e0820151816008019060046105b892919061307f565b509050507f7f1304057ec61140fbf2f5f236790f34fcafe123d3eb0d298d92317c97da500d338260008054906101000a900467ffffffffffffffff16856040516106059493929190613b01565b60405180910390a16106ae60018060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663274982406040518163ffffffff1660e01b8152600401602060405180830381865afa15801561067e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a29190613b5b565b8363ffffffff16612a44565b156106eb577f833013b96b786b4eca83baac286920e5e53956c21ff3894f1d9f02e97d6ed764436040516106e29190613b97565b60405180910390a15b5050565b600660078111156107035761070261360e565b5b600060109054906101000a900460ff1660078111156107255761072461360e565b5b1480156107705750600060199054906101000a900461ffff1661ffff16600060089054906101000a900467ffffffffffffffff166107639190613680565b67ffffffffffffffff1643115b6107af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a690613c24565b60405180910390fd5b60008060159054906101000a900461ffff1661ffff1614610805576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fc90613cdc565b60405180910390fd5b61080f6007612aec565b6000600190506000600190506000600190507fd7237b781669fa700ecf77be6cd8fa0f4b98b1a24ac584a9b6b44c509216718a600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663274982406040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d39190613b5b565b60008054906101000a900467ffffffffffffffff168585856005600060048110610900576108ff613761565b5b0154600560016004811061091757610916613761565b5b0154600560026004811061092e5761092d613761565b5b0154600560036004811061094557610944613761565b5b015460405161095c99989796959493929190613d3a565b60405180910390a1505050565b6003600781111561097d5761097c61360e565b5b600060109054906101000a900460ff16600781111561099f5761099e61360e565b5b1480156109cb5750600060089054906101000a900467ffffffffffffffff1667ffffffffffffffff1643115b8015610a165750600060199054906101000a900461ffff1661ffff16600060089054906101000a900467ffffffffffffffff16610a089190613680565b67ffffffffffffffff164311155b80610abd575060026007811115610a3057610a2f61360e565b5b600060109054906101000a900460ff166007811115610a5257610a5161360e565b5b148015610a9d5750600060199054906101000a900461ffff1661ffff16600060089054906101000a900467ffffffffffffffff16610a909190613680565b67ffffffffffffffff1643115b8015610abc575060008060159054906101000a900461ffff1661ffff16145b5b610afc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af390613e39565b60405180910390fd5b60036007811115610b1057610b0f61360e565b5b600060109054906101000a900460ff166007811115610b3257610b3161360e565b5b14610b4257610b416003612aec565b5b6000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518061010001604052908160008201600280602002604051908101604052809291908260028015610bcb576020028201915b815481526020019060010190808311610bb7575b505050505081526020016002820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016002820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016002820160109054906101000a900460ff166007811115610c5d57610c5c61360e565b5b6007811115610c6f57610c6e61360e565b5b81526020016003820154815260200160048201600280602002604051908101604052809291908260028015610cb9576020028201915b815481526020019060010190808311610ca5575b5050505050815260200160068201600280602002604051908101604052809291908260028015610cfe576020028201915b815481526020019060010190808311610cea575b5050505050815260200160088201600480602002604051908101604052809291908260048015610d43576020028201915b815481526020019060010190808311610d2f575b505050505081525050905060008054906101000a900467ffffffffffffffff1667ffffffffffffffff16816020015167ffffffffffffffff1614610dbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610db390613ef1565b60405180910390fd5b60016007811115610dd057610dcf61360e565b5b81606001516007811115610de757610de661360e565b5b14610e27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1e90613fa9565b60405180910390fd5b610ea260405180604001604052807f062a0ad5cf656709286b38ae4fb927fc901c5f9cf9623bfd0b6d22d30f95a1f381526020017f1b4af7018d896f006d7e5c23d05903b5d2698da94674e546e51f77b6df70ffac8152508560405180604001604052806001815260200160028152508460a0015187612b63565b610ee1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed89061403b565b60405180910390fd5b61108b60405180610180016040528086600060028110610f0457610f03613761565b5b6020020151815260200186600160028110610f2257610f21613761565b5b602002015181526020017f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed81526020017f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec81526020017f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d81526020017f062a0ad5cf656709286b38ae4fb927fc901c5f9cf9623bfd0b6d22d30f95a1f381526020017f1b4af7018d896f006d7e5c23d05903b5d2698da94674e546e51f77b6df70ffac81526020018460006004811061102457611023613761565b5b602002015181526020018460016004811061104257611041613761565b5b60200201518152602001846002600481106110605761105f613761565b5b602002015181526020018460036004811061107e5761107d613761565b5b6020020151815250612ea6565b6110ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c1906140cd565b60405180910390fd5b838160c001819052506003816060019060078111156110ec576110eb61360e565b5b90816007811115611100576110ff61360e565b5b8152505080600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000190600261115b92919061303f565b5060208201518160020160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060408201518160020160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060608201518160020160106101000a81548160ff021916908360078111156111e5576111e461360e565b5b02179055506080820151816003015560a08201518160040190600261120b92919061303f565b5060c08201518160060190600261122392919061303f565b5060e08201518160080190600461123b92919061307f565b509050506000600960028060200260405190810160405280929190826002801561127a576020028201915b815481526020019060010190808311611266575b505050505090506113126040518060800160405280836000600281106112a3576112a2613761565b5b60200201518152602001836001600281106112c1576112c0613761565b5b602002015181526020018460c001516000600281106112e3576112e2613761565b5b602002015181526020018460c0015160016002811061130557611304613761565b5b6020020151815250612f26565b600990600261132292919061303f565b5060006001600060119054906101000a900463ffffffff1661134491906140ed565b63ffffffff1690507f6162e2d11398e4063e4c8565dafc4fb6755bbead93747ea836a5ef73a594aaf7338460400151856020015189898960405161138d969594939291906141ab565b60405180910390a16114316004600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663274982406040518163ffffffff1660e01b8152600401602060405180830381865afa158015611407573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142b9190613b5b565b83612a44565b1561146e577f522cec98f6caa194456c44afa9e8cef9ac63eecb0be60e20d180ce19cfb0ef59436040516114659190613b97565b60405180910390a15b505050505050565b6001600781111561148a5761148961360e565b5b600060109054906101000a900460ff1660078111156114ac576114ab61360e565b5b1480156114d85750600060089054906101000a900467ffffffffffffffff1667ffffffffffffffff1643115b80156115235750600060199054906101000a900461ffff1661ffff16600060089054906101000a900467ffffffffffffffff166115159190613680565b67ffffffffffffffff164311155b611562576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115599061427f565b60405180910390fd5b6000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180610100016040529081600082016002806020026040519081016040528092919082600280156115eb576020028201915b8154815260200190600101908083116115d7575b505050505081526020016002820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016002820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016002820160109054906101000a900460ff16600781111561167d5761167c61360e565b5b600781111561168f5761168e61360e565b5b815260200160038201548152602001600482016002806020026040519081016040528092919082600280156116d9576020028201915b8154815260200190600101908083116116c5575b505050505081526020016006820160028060200260405190810160405280929190826002801561171e576020028201915b81548152602001906001019080831161170a575b5050505050815260200160088201600480602002604051908101604052809291908260048015611763576020028201915b81548152602001906001019080831161174f575b505050505081525050905060008054906101000a900467ffffffffffffffff1667ffffffffffffffff16816020015167ffffffffffffffff16146117dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117d390614337565b60405180910390fd5b600060078111156117f0576117ef61360e565b5b816060015160078111156118075761180661360e565b5b14611847576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183e906143ef565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663274982406040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118da9190613b5b565b905060006118e782612f84565b90506001826118f6919061440f565b855114611938576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161192f906144db565b60405180910390fd5b60018161194591906144fb565b845114611987576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161197e906145e9565b60405180910390fd5b60005b818111611a7c576119b48582815181106119a7576119a6613761565b5b60200260200101516128fb565b6119f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ea9061467b565b60405180910390fd5b6000858281518110611a0857611a07613761565b5b6020026020010151600060028110611a2357611a22613761565b5b60200201511415611a69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a609061470d565b60405180910390fd5b8080611a749061472d565b91505061198a565b50600085604051602001611a90919061482e565b604051602081830303815290604052805190602001209050600085604051602001611abb9190614950565b6040516020818303038152906040528051906020012090508181604051602001611ae6929190614992565b604051602081830303815290604052805190602001208560800181815250506000801b85608001511415611b4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4690614a56565b60405180910390fd5b85600081518110611b6357611b62613761565b5b60200260200101518560a00181905250600185606001906007811115611b8c57611b8b61360e565b5b90816007811115611ba057611b9f61360e565b5b8152505084600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001906002611bfb92919061303f565b5060208201518160020160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060408201518160020160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060608201518160020160106101000a81548160ff02191690836007811115611c8557611c8461360e565b5b02179055506080820151816003015560a082015181600401906002611cab92919061303f565b5060c082015181600601906002611cc392919061303f565b5060e082015181600801906004611cdb92919061307f565b5090505060006001600060119054906101000a900463ffffffff16611d0091906140ed565b63ffffffff1690507ff0c8b0ef2867c2b4639b404a0296b6bbf0bf97e20856af42144a5a6035c0d0d233876040015188602001518b8b604051611d47959493929190614bce565b60405180910390a1611d5b60028683612a44565b15611d98577fbfe94ffef5ddde4d25ac7b652f3f67686ea63f9badbfe1f25451e26fc262d11c43604051611d8f9190613b97565b60405180910390a15b5050505050505050565b60056007811115611db657611db561360e565b5b600060109054906101000a900460ff166007811115611dd857611dd761360e565b5b148015611e045750600060089054906101000a900467ffffffffffffffff1667ffffffffffffffff1643115b8015611e4f5750600060199054906101000a900461ffff1661ffff16600060089054906101000a900467ffffffffffffffff16611e419190613680565b67ffffffffffffffff164311155b611e8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e8590614ca1565b60405180910390fd5b6000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518061010001604052908160008201600280602002604051908101604052809291908260028015611f17576020028201915b815481526020019060010190808311611f03575b505050505081526020016002820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016002820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016002820160109054906101000a900460ff166007811115611fa957611fa861360e565b5b6007811115611fbb57611fba61360e565b5b81526020016003820154815260200160048201600280602002604051908101604052809291908260028015612005576020028201915b815481526020019060010190808311611ff1575b505050505081526020016006820160028060200260405190810160405280929190826002801561204a576020028201915b815481526020019060010190808311612036575b505050505081526020016008820160048060200260405190810160405280929190826004801561208f576020028201915b81548152602001906001019080831161207b575b505050505081525050905060008054906101000a900467ffffffffffffffff1667ffffffffffffffff16816020015167ffffffffffffffff1614612108576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120ff90613ef1565b60405180910390fd5b6003600781111561211c5761211b61360e565b5b816060015160078111156121335761213261360e565b5b14612173576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161216a90614d33565b60405180910390fd5b60008260006004811061218957612188613761565b5b60200201511415806121b457506000826001600481106121ac576121ab613761565b5b602002015114155b806121d857506000826002600481106121d0576121cf613761565b5b602002015114155b806121fc57506000826003600481106121f4576121f3613761565b5b602002015114155b61223b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161223290614dc5565b60405180910390fd5b818160e0018190525060058160600190600781111561225d5761225c61360e565b5b908160078111156122715761227061360e565b5b8152505080600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000019060026122cc92919061303f565b5060208201518160020160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060408201518160020160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060608201518160020160106101000a81548160ff021916908360078111156123565761235561360e565b5b02179055506080820151816003015560a08201518160040190600261237c92919061303f565b5060c08201518160060190600261239492919061303f565b5060e0820151816008019060046123ac92919061307f565b509050507f09b90b08bbc3dbe22e9d2a0bc9c2c7614c7511cd0ad72177727a1e762115bf06338260400151836020015160018560e001516000600481106123f6576123f5613761565b5b60200201518660e0015160016004811061241357612412613761565b5b60200201518760e001516002600481106124305761242f613761565b5b60200201518860e0015160036004811061244d5761244c613761565b5b6020020151604051612466989796959493929190614e20565b60405180910390a160006001600060119054906101000a900463ffffffff1661248f91906140ed565b63ffffffff1690506125336006600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663274982406040518163ffffffff1660e01b8152600401602060405180830381865afa158015612509573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061252d9190613b5b565b83612a44565b15612570577f87bfe600b78cad9f7cf68c99eb582c1748f636b3269842b37d5873b0e069f628436040516125679190613b97565b60405180910390a15b505050565b600460078111156125895761258861360e565b5b600060109054906101000a900460ff1660078111156125ab576125aa61360e565b5b1480156125d75750600060089054906101000a900467ffffffffffffffff1667ffffffffffffffff1643115b80156126225750600060199054906101000a900461ffff1661ffff16600060089054906101000a900467ffffffffffffffff166126149190613680565b67ffffffffffffffff164311155b612661576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161265890614f10565b60405180910390fd5b6000600960028060200260405190810160405280929190826002801561269c576020028201915b815481526020019060010190808311612688575b5050505050905061284d604051806101800160405280836000600281106126c6576126c5613761565b5b60200201518152602001836001600281106126e4576126e3613761565b5b602002015181526020017f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed81526020017f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec81526020017f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d81526020017f062a0ad5cf656709286b38ae4fb927fc901c5f9cf9623bfd0b6d22d30f95a1f381526020017f1b4af7018d896f006d7e5c23d05903b5d2698da94674e546e51f77b6df70ffac8152602001846000600481106127e6576127e5613761565b5b602002015181526020018460016004811061280457612803613761565b5b602002015181526020018460026004811061282257612821613761565b5b60200201518152602001846003600481106128405761283f613761565b5b6020020151815250612ea6565b61288c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161288390614fa2565b60405180910390fd5b81600590600461289d92919061307f565b506128a86005612aec565b7f71b1ebd27be320895a22125d6458e3363aefa6944a312ede4bf275867e6d5a714360008054906101000a900467ffffffffffffffff16846040516128ef93929190614fc2565b60405180910390a15050565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061292c5761292b614ff9565b5b60037f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061295d5761295c614ff9565b5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061298c5761298b614ff9565b5b856000600281106129a05761299f613761565b5b6020020151866000600281106129b9576129b8613761565b5b602002015109856000600281106129d3576129d2613761565b5b602002015109087f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780612a0957612a08614ff9565b5b83600160028110612a1d57612a1c613761565b5b602002015184600160028110612a3657612a35613761565b5b602002015109149050919050565b600082821415612abf57612a5784612aec565b6000601b9054906101000a900461ffff1661ffff16600060088282829054906101000a900467ffffffffffffffff16612a909190613680565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060019050612ae5565b81600060116101000a81548163ffffffff021916908363ffffffff160217905550600090505b9392505050565b80600060106101000a81548160ff02191690836007811115612b1157612b1061360e565b5b021790555043600060086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060008060116101000a81548163ffffffff021916908363ffffffff16021790555050565b6000612b6d6130bf565b612b756130bf565b612be060405180606001604052808a600060028110612b9757612b96613761565b5b602002015181526020018a600160028110612bb557612bb4613761565b5b6020020151815260200186600160028110612bd357612bd2613761565b5b6020020151815250612fe1565b9150612c4d604051806060016040528089600060028110612c0457612c03613761565b5b6020020151815260200189600160028110612c2257612c21613761565b5b6020020151815260200186600060028110612c4057612c3f613761565b5b6020020151815250612fe1565b90506000612cda604051806080016040528085600060028110612c7357612c72613761565b5b6020020151815260200185600160028110612c9157612c90613761565b5b6020020151815260200184600060028110612caf57612cae613761565b5b6020020151815260200184600160028110612ccd57612ccc613761565b5b6020020151815250612f26565b9050612d47604051806060016040528089600060028110612cfe57612cfd613761565b5b6020020151815260200189600160028110612d1c57612d1b613761565b5b6020020151815260200187600160028110612d3a57612d39613761565b5b6020020151815250612fe1565b9250612db4604051806060016040528088600060028110612d6b57612d6a613761565b5b6020020151815260200188600160028110612d8957612d88613761565b5b6020020151815260200187600060028110612da757612da6613761565b5b6020020151815250612fe1565b91506000612e41604051806080016040528086600060028110612dda57612dd9613761565b5b6020020151815260200186600160028110612df857612df7613761565b5b6020020151815260200185600060028110612e1657612e15613761565b5b6020020151815260200185600160028110612e3457612e33613761565b5b6020020151815250612f26565b905060008a8a8a8a8686604051602001612e609695949392919061508a565b6040516020818303038152906040528051906020012060001c905086600060028110612e8f57612e8e613761565b5b602002015181149550505050505095945050505050565b6000612eb06130e1565b6000602082610180866008600019fa905080612f01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ef890615146565b60405180910390fd5b600182600060018110612f1757612f16613761565b5b60200201511492505050919050565b612f2e6130bf565b60006040826080856006600019fa905080612f7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f75906151b2565b60405180910390fd5b50919050565b600080600383612f9491906151d2565b9050806002612fa39190615203565b91506000816003612fb49190615203565b84612fbf919061440f565b90506002811415612fda57600183612fd791906144fb565b92505b5050919050565b612fe96130bf565b60006040826060856007600019fa905080613039576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613030906152cf565b60405180910390fd5b50919050565b826002810192821561306e579160200282015b8281111561306d578251825591602001919060010190613052565b5b50905061307b9190613103565b5090565b82600481019282156130ae579160200282015b828111156130ad578251825591602001919060010190613092565b5b5090506130bb9190613103565b5090565b6040518060400160405280600290602082028036833780820191505090505090565b6040518060200160405280600190602082028036833780820191505090505090565b5b8082111561311c576000816000905550600101613104565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61318282613139565b810181811067ffffffffffffffff821117156131a1576131a061314a565b5b80604052505050565b60006131b4613120565b90506131c08282613179565b919050565b600067ffffffffffffffff8211156131e0576131df61314a565b5b602082029050919050565b600080fd5b6000819050919050565b613203816131f0565b811461320e57600080fd5b50565b600081359050613220816131fa565b92915050565b6000613239613234846131c5565b6131aa565b90508060208402830185811115613253576132526131eb565b5b835b8181101561327c57806132688882613211565b845260208401935050602081019050613255565b5050509392505050565b600082601f83011261329b5761329a613134565b5b60026132a8848285613226565b91505092915050565b6000604082840312156132c7576132c661312a565b5b60006132d584828501613286565b91505092915050565b600067ffffffffffffffff8211156132f9576132f861314a565b5b602082029050919050565b6000613317613312846132de565b6131aa565b90508060208402830185811115613331576133306131eb565b5b835b8181101561335a57806133468882613211565b845260208401935050602081019050613333565b5050509392505050565b600082601f83011261337957613378613134565b5b6004613386848285613304565b91505092915050565b600080600061010084860312156133a9576133a861312a565b5b60006133b786828701613286565b93505060406133c886828701613286565b92505060806133d986828701613364565b9150509250925092565b600067ffffffffffffffff8211156133fe576133fd61314a565b5b602082029050602081019050919050565b600061342261341d846133e3565b6131aa565b90508083825260208201905060208402830185811115613445576134446131eb565b5b835b8181101561346e578061345a8882613211565b845260208401935050602081019050613447565b5050509392505050565b600082601f83011261348d5761348c613134565b5b813561349d84826020860161340f565b91505092915050565b600067ffffffffffffffff8211156134c1576134c061314a565b5b602082029050602081019050919050565b60006134e56134e0846134a6565b6131aa565b90508083825260208201905060408402830185811115613508576135076131eb565b5b835b81811015613531578061351d8882613286565b84526020840193505060408101905061350a565b5050509392505050565b600082601f8301126135505761354f613134565b5b81356135608482602086016134d2565b91505092915050565b600080604083850312156135805761357f61312a565b5b600083013567ffffffffffffffff81111561359e5761359d61312f565b5b6135aa85828601613478565b925050602083013567ffffffffffffffff8111156135cb576135ca61312f565b5b6135d78582860161353b565b9150509250929050565b6000608082840312156135f7576135f661312a565b5b600061360584828501613364565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600067ffffffffffffffff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061368b8261363d565b91506136968361363d565b92508267ffffffffffffffff038211156136b3576136b2613651565b5b828201905092915050565b600082825260208201905092915050565b7f455448444b473a2043616e6e6f7420726567697374657220617420746865206d60008201527f6f6d656e74000000000000000000000000000000000000000000000000000000602082015250565b600061372b6025836136be565b9150613736826136cf565b604082019050919050565b6000602082019050818103600083015261375a8161371e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f455448444b473a20526567697374726174696f6e206661696c6564202d20707560008201527f624b65792073686f756c6420626520646966666572656e742066726f6d203021602082015250565b60006137ec6040836136be565b91506137f782613790565b604082019050919050565b6000602082019050818103600083015261381b816137df565b9050919050565b7f455448444b473a20526567697374726174696f6e206661696c6564202d20707560008201527f626c6963206b6579206e6f74206f6e20656c6c69707469632063757276652100602082015250565b600061387e603f836136be565b915061388982613822565b604082019050919050565b600060208201905081810360008301526138ad81613871565b9050919050565b7f455448444b473a205061727469636970616e7420697320616c7265616479207060008201527f617274696369706174696e6720696e207468697320455448444b4720726f756e60208201527f6421000000000000000000000000000000000000000000000000000000000000604082015250565b60006139366042836136be565b9150613941826138b4565b606082019050919050565b6000602082019050818103600083015261396581613929565b9050919050565b600063ffffffff82169050919050565b60006139878261396c565b915063ffffffff82141561399e5761399d613651565b5b600182019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006139d4826139a9565b9050919050565b6139e4816139c9565b82525050565b6000819050919050565b6000613a0f613a0a613a058461396c565b6139ea565b6131f0565b9050919050565b613a1f816139f4565b82525050565b6000613a40613a3b613a368461363d565b6139ea565b6131f0565b9050919050565b613a5081613a25565b82525050565b600060029050919050565b600081905092915050565b6000819050919050565b613a7f816131f0565b82525050565b6000613a918383613a76565b60208301905092915050565b6000602082019050919050565b613ab381613a56565b613abd8184613a61565b9250613ac882613a6c565b8060005b83811015613af9578151613ae08782613a85565b9650613aeb83613a9d565b925050600181019050613acc565b505050505050565b600060a082019050613b1660008301876139db565b613b236020830186613a16565b613b306040830185613a47565b613b3d6060830184613aaa565b95945050505050565b600081519050613b55816131fa565b92915050565b600060208284031215613b7157613b7061312a565b5b6000613b7f84828501613b46565b91505092915050565b613b91816131f0565b82525050565b6000602082019050613bac6000830184613b88565b92915050565b7f455448444b473a2073686f756c6420626520696e20706f73742d47504b4a446960008201527f7370757465207068617365210000000000000000000000000000000000000000602082015250565b6000613c0e602c836136be565b9150613c1982613bb2565b604082019050919050565b60006020820190508181036000830152613c3d81613c01565b9050919050565b7f455448444b473a204e6f7420616c6c207265717569736974657320746f20636f60008201527f6d706c657465207468697320455448444b4720726f756e64207765726520636f60208201527f6d706c6574656421000000000000000000000000000000000000000000000000604082015250565b6000613cc66048836136be565b9150613cd182613c44565b606082019050919050565b60006020820190508181036000830152613cf581613cb9565b9050919050565b600060ff82169050919050565b6000613d24613d1f613d1a84613cfc565b6139ea565b6131f0565b9050919050565b613d3481613d09565b82525050565b600061012082019050613d50600083018c613d2b565b613d5d602083018b613a47565b613d6a604083018a613a16565b613d776060830189613a16565b613d846080830188613a16565b613d9160a0830187613b88565b613d9e60c0830186613b88565b613dab60e0830185613b88565b613db9610100830184613b88565b9a9950505050505050505050565b7f455448444b473a2063616e6e6f74207061727469636970617465206f6e206b6560008201527f79207368617265207375626d697373696f6e2070686173650000000000000000602082015250565b6000613e236038836136be565b9150613e2e82613dc7565b604082019050919050565b60006020820190508181036000830152613e5281613e16565b9050919050565b7f455448444b473a204b6579207368617265207375626d697373696f6e2066616960008201527f6c65642c207061727469636970616e74207769746820696e76616c6964206e6f60208201527f6e63652100000000000000000000000000000000000000000000000000000000604082015250565b6000613edb6044836136be565b9150613ee682613e59565b606082019050919050565b60006020820190508181036000830152613f0a81613ece565b9050919050565b7f455448444b473a205061727469636970616e7420616c7265616479207375626d60008201527f6974746564206b657920736861726573207468697320455448444b4720726f7560208201527f6e64210000000000000000000000000000000000000000000000000000000000604082015250565b6000613f936043836136be565b9150613f9e82613f11565b606082019050919050565b60006020820190508181036000830152613fc281613f86565b9050919050565b7f455448444b473a204b6579207368617265207375626d697373696f6e2066616960008201527f6c6564202d20696e76616c6964206b6579207368617265204731210000000000602082015250565b6000614025603b836136be565b915061403082613fc9565b604082019050919050565b6000602082019050818103600083015261405481614018565b9050919050565b7f455448444b473a204b6579207368617265207375626d697373696f6e2066616960008201527f6c6564202d20696e76616c6964206b6579207368617265204732210000000000602082015250565b60006140b7603b836136be565b91506140c28261405b565b604082019050919050565b600060208201905081810360008301526140e6816140aa565b9050919050565b60006140f88261396c565b91506141038361396c565b92508263ffffffff0382111561411c5761411b613651565b5b828201905092915050565b600060049050919050565b600081905092915050565b6000819050919050565b6000602082019050919050565b61415d81614127565b6141678184614132565b92506141728261413d565b8060005b838110156141a357815161418a8782613a85565b965061419583614147565b925050600181019050614176565b505050505050565b6000610160820190506141c160008301896139db565b6141ce6020830188613a47565b6141db6040830187613a47565b6141e86060830186613aaa565b6141f560a0830185613aaa565b61420260e0830184614154565b979650505050505050565b7f455448444b473a2063616e6e6f74207061727469636970617465206f6e20746860008201527f6973207068617365000000000000000000000000000000000000000000000000602082015250565b60006142696028836136be565b91506142748261420d565b604082019050919050565b600060208201905081810360008301526142988161425c565b9050919050565b7f455448444b473a20536861726520646973747269627574696f6e206661696c6560008201527f642c207061727469636970616e74207769746820696e76616c6964206e6f6e6360208201527f6521000000000000000000000000000000000000000000000000000000000000604082015250565b60006143216042836136be565b915061432c8261429f565b606082019050919050565b6000602082019050818103600083015261435081614314565b9050919050565b7f455448444b473a205061727469636970616e7420616c7265616479206469737460008201527f7269627574656420736861726573207468697320455448444b4720726f756e6460208201527f2100000000000000000000000000000000000000000000000000000000000000604082015250565b60006143d96041836136be565b91506143e482614357565b606082019050919050565b60006020820190508181036000830152614408816143cc565b9050919050565b600061441a826131f0565b9150614425836131f0565b92508282101561443857614437613651565b5b828203905092915050565b7f455448444b473a20536861726520646973747269627574696f6e206661696c6560008201527f64202d20696e76616c6964206e756d626572206f6620656e637279707465642060208201527f7368617265732070726f76696465642100000000000000000000000000000000604082015250565b60006144c56050836136be565b91506144d082614443565b606082019050919050565b600060208201905081810360008301526144f4816144b8565b9050919050565b6000614506826131f0565b9150614511836131f0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561454657614545613651565b5b828201905092915050565b7f455448444b473a204b65792073686172696e67206661696c6564202d20696e7660008201527f616c6964206e756d626572206f6620636f6d6d69746d656e74732070726f766960208201527f6465642100000000000000000000000000000000000000000000000000000000604082015250565b60006145d36044836136be565b91506145de82614551565b606082019050919050565b60006020820190508181036000830152614602816145c6565b9050919050565b7f455448444b473a204b65792073686172696e67206661696c6564202d20636f6d60008201527f6d69746d656e74206e6f74206f6e20656c6c6970746963206375727665210000602082015250565b6000614665603e836136be565b915061467082614609565b604082019050919050565b6000602082019050818103600083015261469481614658565b9050919050565b7f455448444b473a20436f6d6d69746d656e74732073686f756c646e277420626560008201527f207a65726f210000000000000000000000000000000000000000000000000000602082015250565b60006146f76026836136be565b91506147028261469b565b604082019050919050565b60006020820190508181036000830152614726816146ea565b9050919050565b6000614738826131f0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561476b5761476a613651565b5b600182019050919050565b600081519050919050565b600081905092915050565b6000819050602082019050919050565b6147a5816131f0565b82525050565b60006147b7838361479c565b60208301905092915050565b6000602082019050919050565b60006147db82614776565b6147e58185614781565b93506147f08361478c565b8060005b8381101561482157815161480888826147ab565b9750614813836147c3565b9250506001810190506147f4565b5085935050505092915050565b600061483a82846147d0565b915081905092915050565b600081519050919050565b600081905092915050565b6000819050602082019050919050565b600081905092915050565b61487f81613a56565b614889818461486b565b925061489482613a6c565b8060005b838110156148c55781516148ac87826147ab565b96506148b783613a9d565b925050600181019050614898565b505050505050565b60006148d98383614876565b60408301905092915050565b6000602082019050919050565b60006148fd82614845565b6149078185614850565b93506149128361485b565b8060005b8381101561494357815161492a88826148cd565b9750614935836148e5565b925050600181019050614916565b5085935050505092915050565b600061495c82846148f2565b915081905092915050565b6000819050919050565b6000819050919050565b61498c61498782614967565b614971565b82525050565b600061499e828561497b565b6020820191506149ae828461497b565b6020820191508190509392505050565b7f455448444b473a205468652068617368206f6620656e6372797074656453686160008201527f72657320616e6420636f6d6d69746d656e74732073686f756c6420626520646960208201527f66666572656e742066726f6d207a65726f210000000000000000000000000000604082015250565b6000614a406052836136be565b9150614a4b826149be565b606082019050919050565b60006020820190508181036000830152614a6f81614a33565b9050919050565b600082825260208201905092915050565b6000614a9282614776565b614a9c8185614a76565b9350614aa78361478c565b8060005b83811015614ad8578151614abf8882613a85565b9750614aca836147c3565b925050600181019050614aab565b5085935050505092915050565b600082825260208201905092915050565b600081905092915050565b614b0a81613a56565b614b148184614af6565b9250614b1f82613a6c565b8060005b83811015614b50578151614b378782613a85565b9650614b4283613a9d565b925050600181019050614b23565b505050505050565b6000614b648383614b01565b60408301905092915050565b6000614b7b82614845565b614b858185614ae5565b9350614b908361485b565b8060005b83811015614bc1578151614ba88882614b58565b9750614bb3836148e5565b925050600181019050614b94565b5085935050505092915050565b600060a082019050614be360008301886139db565b614bf06020830187613a47565b614bfd6040830186613a47565b8181036060830152614c0f8185614a87565b90508181036080830152614c238184614b70565b90509695505050505050565b7f455448444b473a204e6f7420696e2047504b4a207375626d697373696f6e207060008201527f6861736500000000000000000000000000000000000000000000000000000000602082015250565b6000614c8b6024836136be565b9150614c9682614c2f565b604082019050919050565b60006020820190508181036000830152614cba81614c7e565b9050919050565b7f455448444b473a205061727469636970616e7420616c7265616479207375626d60008201527f69747465642047504b6a207468697320455448444b4720726f756e6421000000602082015250565b6000614d1d603d836136be565b9150614d2882614cc1565b604082019050919050565b60006020820190508181036000830152614d4c81614d10565b9050919050565b7f455448444b473a2047504b6a2063616e6e6f7420626520616c6c207a65726f7360008201527f2100000000000000000000000000000000000000000000000000000000000000602082015250565b6000614daf6021836136be565b9150614dba82614d53565b604082019050919050565b60006020820190508181036000830152614dde81614da2565b9050919050565b6000819050919050565b6000614e0a614e05614e0084614de5565b6139ea565b6131f0565b9050919050565b614e1a81614def565b82525050565b600061010082019050614e36600083018b6139db565b614e43602083018a613a47565b614e506040830189613a47565b614e5d6060830188614e11565b614e6a6080830187613b88565b614e7760a0830186613b88565b614e8460c0830185613b88565b614e9160e0830184613b88565b9998505050505050505050565b7f455448444b473a2063616e6e6f74207061727469636970617465206f6e206d6160008201527f73746572207075626c6963206b6579207375626d697373696f6e207068617365602082015250565b6000614efa6040836136be565b9150614f0582614e9e565b604082019050919050565b60006020820190508181036000830152614f2981614eed565b9050919050565b7f455448444b473a204d6173746572206b6579207375626d697373696f6e20706160008201527f6972696e6720636865636b206661696c65642100000000000000000000000000602082015250565b6000614f8c6033836136be565b9150614f9782614f30565b604082019050919050565b60006020820190508181036000830152614fbb81614f7f565b9050919050565b600060c082019050614fd76000830186613b88565b614fe46020830185613a47565b614ff16040830184614154565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600081905092915050565b61503c81613a56565b6150468184615028565b925061505182613a6c565b8060005b8381101561508257815161506987826147ab565b965061507483613a9d565b925050600181019050615055565b505050505050565b60006150968289615033565b6040820191506150a68288615033565b6040820191506150b68287615033565b6040820191506150c68286615033565b6040820191506150d68285615033565b6040820191506150e68284615033565b604082019150819050979650505050505050565b7f656c6c69707469632063757276652070616972696e67206661696c6564000000600082015250565b6000615130601d836136be565b915061513b826150fa565b602082019050919050565b6000602082019050818103600083015261515f81615123565b9050919050565b7f656c6c6970746963206375727665206164646974696f6e206661696c65640000600082015250565b600061519c601e836136be565b91506151a782615166565b602082019050919050565b600060208201905081810360008301526151cb8161518f565b9050919050565b60006151dd826131f0565b91506151e8836131f0565b9250826151f8576151f7614ff9565b5b828204905092915050565b600061520e826131f0565b9150615219836131f0565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561525257615251613651565b5b828202905092915050565b7f656c6c6970746963206375727665206d756c7469706c69636174696f6e20666160008201527f696c656400000000000000000000000000000000000000000000000000000000602082015250565b60006152b96024836136be565b91506152c48261525d565b604082019050919050565b600060208201905081810360008301526152e8816152ac565b905091905056fea26469706673582212208a5cbce107898145f769d9f1ce47f4ba5856ca8f9c238cd420922cbbd576b8bb64736f6c634300080b0033",
=======
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"publicKey\",\"type\":\"uint256[2]\"}],\"name\":\"AddressRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"GPKJSubmissionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"KeyShareSubmissionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1CorrectnessProof\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"keyShareG2\",\"type\":\"uint256[4]\"}],\"name\":\"KeyShareSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"mpk\",\"type\":\"uint256[4]\"}],\"name\":\"MPKSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"RegistrationComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"phaseLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"confirmationLength\",\"type\":\"uint256\"}],\"name\":\"RegistrationOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"ShareDistributionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"encryptedShares\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"}],\"name\":\"SharesDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share3\",\"type\":\"uint256\"}],\"name\":\"ValidatorMemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethHeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"madHeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey3\",\"type\":\"uint256\"}],\"name\":\"ValidatorSetCompleted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"complete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"encryptedShares\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"}],\"name\":\"distributeShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"publicKey\",\"type\":\"uint256[2]\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"gpkj\",\"type\":\"uint256[4]\"}],\"name\":\"submitGPKJ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1CorrectnessProof\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"keyShareG2\",\"type\":\"uint256[4]\"}],\"name\":\"submitKeyShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"masterPublicKey_\",\"type\":\"uint256[4]\"}],\"name\":\"submitMasterPublicKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50613bdc806100206000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c806362a6523e1161005057806362a6523e146100a757806380b97e01146100ba578063e8323224146100cd57600080fd5b8063101f49c1146100775780633442af5c1461008c578063522e11771461009f575b600080fd5b61008a6100853660046134c5565b6100e0565b005b61008a61009a36600461352c565b6108c1565b61008a610f26565b61008a6100b5366004613548565b61123c565b61008a6100c8366004613627565b611dd0565b61008a6100db3660046134c5565b612947565b6005600054700100000000000000000000000000000000900460ff16600781111561010d5761010d6136e0565b148015610131575060005468010000000000000000900467ffffffffffffffff1643115b801561018a575060005461017c90790100000000000000000000000000000000000000000000000000810461ffff169068010000000000000000900467ffffffffffffffff1661373e565b67ffffffffffffffff164311155b61021a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f455448444b473a204e6f7420696e2047504b4a207375626d697373696f6e207060448201527f686173650000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b336000908152600b6020526040808220815161014081019092528161010081018260028282826020028201915b815481526020019060010190808311610247575050509183525050600282015467ffffffffffffffff8082166020840152680100000000000000008204166040830152606090910190700100000000000000000000000000000000900460ff1660078111156102b8576102b86136e0565b60078111156102c9576102c96136e0565b8152600382015460208201526040805180820182529101906004830160028282826020028201915b8154815260200190600101908083116102f1575050509183525050604080518082019182905260209092019190600684019060029082845b81548152602001906001019080831161032957505050918352505060408051608081019182905260209092019190600884019060049082845b81548152602001906001019080831161036257505050505081525050905060008054906101000a900467ffffffffffffffff1667ffffffffffffffff16816020015167ffffffffffffffff1614610462576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526044602482018190527f455448444b473a204b6579207368617265207375626d697373696f6e20666169908201527f6c65642c207061727469636970616e74207769746820696e76616c6964206e6f60648201527f6e63652100000000000000000000000000000000000000000000000000000000608482015260a401610211565b60038160600151600781111561047a5761047a6136e0565b14610507576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603d60248201527f455448444b473a205061727469636970616e7420616c7265616479207375626d60448201527f69747465642047504b6a207468697320455448444b4720726f756e64210000006064820152608401610211565b81511515806105195750602082015115155b806105275750604082015115155b806105355750606082015115155b6105c1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f455448444b473a2047504b6a2063616e6e6f7420626520616c6c207a65726f7360448201527f21000000000000000000000000000000000000000000000000000000000000006064820152608401610211565b60e0810182905260056060820152336000908152600b6020526040902081518291906105f0908290600261331d565b506020820151600282018054604085015167ffffffffffffffff90811668010000000000000000027fffffffffffffffffffffffffffffffff0000000000000000000000000000000090921693169290921791909117808255606084015191907fffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffff16700100000000000000000000000000000000836007811115610696576106966136e0565b02179055506080820151600382015560a08201516106ba906004830190600261331d565b5060c08201516106d0906006830190600261331d565b5060e08201516106e6906008830190600461335b565b509050507f09b90b08bbc3dbe22e9d2a0bc9c2c7614c7511cd0ad72177727a1e762115bf06338260400151836020015160018560e0015160006004811061072f5761072f61376a565b6020908102919091015160e08881015180840151604080830151606093840151825173ffffffffffffffffffffffffffffffffffffffff9c909c168c5267ffffffffffffffff9a8b16978c01979097529790981697890197909752870193909352608086015260a085019390935260c08401919091528201526101000160405180910390a1600080546107de9071010000000000000000000000000000000000900463ffffffff166001613799565b63ffffffff1690506108826006600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663274982406040518163ffffffff1660e01b8152600401602060405180830381865afa158015610858573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087c91906137b8565b83612bd3565b156108bc576040514381527f87bfe600b78cad9f7cf68c99eb582c1748f636b3269842b37d5873b0e069f628906020015b60405180910390a15b505050565b60008054700100000000000000000000000000000000900460ff1660078111156108ed576108ed6136e0565b148015610911575060005468010000000000000000900467ffffffffffffffff1643115b801561096a575060005461095c90790100000000000000000000000000000000000000000000000000810461ffff169068010000000000000000900467ffffffffffffffff1661373e565b67ffffffffffffffff164311155b6109f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f455448444b473a2043616e6e6f7420726567697374657220617420746865206d60448201527f6f6d656e740000000000000000000000000000000000000000000000000000006064820152608401610211565b805115801590610a095750602081015115155b610a9757604080517f08c379a00000000000000000000000000000000000000000000000000000000081526020600482015260248101919091527f455448444b473a20526567697374726174696f6e206661696c6564202d20707560448201527f624b65792073686f756c6420626520646966666572656e742066726f6d2030216064820152608401610211565b610aa081612caf565b610b2c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603f60248201527f455448444b473a20526567697374726174696f6e206661696c6564202d20707560448201527f626c6963206b6579206e6f74206f6e20656c6c697074696320637572766521006064820152608401610211565b60008054338252600b60205260409091206002015467ffffffffffffffff918216911610610c02576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604260248201527f455448444b473a205061727469636970616e7420697320616c7265616479207060448201527f617274696369706174696e6720696e207468697320455448444b4720726f756e60648201527f6421000000000000000000000000000000000000000000000000000000000000608482015260a401610211565b60005471010000000000000000000000000000000000900463ffffffff1680610c2a816137d1565b604080516101008101825285815260005467ffffffffffffffff8116602083015263ffffffff8416928201929092529193509091506060820190700100000000000000000000000000000000900460ff166007811115610c8c57610c8c6136e0565b8152600060208083018290526040805180820182528381528083018490528185015280518082018252838152808301849052606080860191909152815160808181018452858252818501869052818401869052918101859052940193909352338252600b9052208151610d02908290600261331d565b506020820151600282018054604085015167ffffffffffffffff90811668010000000000000000027fffffffffffffffffffffffffffffffff0000000000000000000000000000000090921693169290921791909117808255606084015191907fffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffff16700100000000000000000000000000000000836007811115610da857610da86136e0565b02179055506080820151600382015560a0820151610dcc906004830190600261331d565b5060c0820151610de2906006830190600261331d565b5060e0820151610df8906008830190600461335b565b50506000546040517f7f1304057ec61140fbf2f5f236790f34fcafe123d3eb0d298d92317c97da500d9250610e3d913391859167ffffffffffffffff1690879061381e565b60405180910390a160018054604080517f274982400000000000000000000000000000000000000000000000000000000081529051610ee8939273ffffffffffffffffffffffffffffffffffffffff169163274982409160048083019260209291908290030181865afa158015610eb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edc91906137b8565b8363ffffffff16612bd3565b15610f22576040514381527f833013b96b786b4eca83baac286920e5e53956c21ff3894f1d9f02e97d6ed764906020015b60405180910390a15b5050565b6006600054700100000000000000000000000000000000900460ff166007811115610f5357610f536136e0565b148015610fac5750600054610f9f90790100000000000000000000000000000000000000000000000000810461ffff169068010000000000000000900467ffffffffffffffff1661373e565b67ffffffffffffffff1643115b611038576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f455448444b473a2073686f756c6420626520696e20706f73742d47504b4a446960448201527f73707574652070686173652100000000000000000000000000000000000000006064820152608401610211565b6000547501000000000000000000000000000000000000000000900461ffff161561110b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604860248201527f455448444b473a204e6f7420616c6c207265717569736974657320746f20636f60448201527f6d706c657465207468697320455448444b4720726f756e64207765726520636f60648201527f6d706c6574656421000000000000000000000000000000000000000000000000608482015260a401610211565b6111156007612d13565b60018054604080517f274982400000000000000000000000000000000000000000000000000000000081529051839283927fd7237b781669fa700ecf77be6cd8fa0f4b98b1a24ac584a9b6b44c509216718a9273ffffffffffffffffffffffffffffffffffffffff909216916327498240916004808201926020929091908290030181865afa1580156111ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d091906137b8565b6000546005546006546007546008546040805160ff97909716875267ffffffffffffffff909516602087015263ffffffff808b16958701959095528489166060870152938716608086015260a085019290925260c084015260e0830152610100820152610120016108b3565b6003600054700100000000000000000000000000000000900460ff166007811115611269576112696136e0565b14801561128d575060005468010000000000000000900467ffffffffffffffff1643115b80156112e657506000546112d890790100000000000000000000000000000000000000000000000000810461ffff169068010000000000000000900467ffffffffffffffff1661373e565b67ffffffffffffffff164311155b8061139b57506002600054700100000000000000000000000000000000900460ff166007811115611319576113196136e0565b148015611372575060005461136590790100000000000000000000000000000000000000000000000000810461ffff169068010000000000000000900467ffffffffffffffff1661373e565b67ffffffffffffffff1643115b801561139b57506000547501000000000000000000000000000000000000000000900461ffff16155b611427576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603860248201527f455448444b473a2063616e6e6f74207061727469636970617465206f6e206b6560448201527f79207368617265207375626d697373696f6e20706861736500000000000000006064820152608401610211565b6003600054700100000000000000000000000000000000900460ff166007811115611454576114546136e0565b14611463576114636003612d13565b336000908152600b6020526040808220815161014081019092528161010081018260028282826020028201915b815481526020019060010190808311611490575050509183525050600282015467ffffffffffffffff8082166020840152680100000000000000008204166040830152606090910190700100000000000000000000000000000000900460ff166007811115611501576115016136e0565b6007811115611512576115126136e0565b8152600382015460208201526040805180820182529101906004830160028282826020028201915b81548152602001906001019080831161153a575050509183525050604080518082019182905260209092019190600684019060029082845b81548152602001906001019080831161157257505050918352505060408051608081019182905260209092019190600884019060049082845b8154815260200190600101908083116115ab57505050505081525050905060008054906101000a900467ffffffffffffffff1667ffffffffffffffff16816020015167ffffffffffffffff16146116ab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526044602482018190527f455448444b473a204b6579207368617265207375626d697373696f6e20666169908201527f6c65642c207061727469636970616e74207769746820696e76616c6964206e6f60648201527f6e63652100000000000000000000000000000000000000000000000000000000608482015260a401610211565b6001816060015160078111156116c3576116c36136e0565b14611776576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604360248201527f455448444b473a205061727469636970616e7420616c7265616479207375626d60448201527f6974746564206b657920736861726573207468697320455448444b4720726f7560648201527f6e64210000000000000000000000000000000000000000000000000000000000608482015260a401610211565b6117f160405180604001604052807f062a0ad5cf656709286b38ae4fb927fc901c5f9cf9623bfd0b6d22d30f95a1f381526020017f1b4af7018d896f006d7e5c23d05903b5d2698da94674e546e51f77b6df70ffac8152508560405180604001604052806001815260200160028152508460a0015187612dc9565b61187d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603b60248201527f455448444b473a204b6579207368617265207375626d697373696f6e2066616960448201527f6c6564202d20696e76616c6964206b65792073686172652047312100000000006064820152608401610211565b611a206040518061018001604052808660006002811061189f5761189f61376a565b60200201518152602001866001600281106118bc576118bc61376a565b602002015181526020017f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed81526020017f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec81526020017f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d81526020017f062a0ad5cf656709286b38ae4fb927fc901c5f9cf9623bfd0b6d22d30f95a1f381526020017f1b4af7018d896f006d7e5c23d05903b5d2698da94674e546e51f77b6df70ffac8152602001846000600481106119bd576119bd61376a565b60200201518152602001846001600481106119da576119da61376a565b60200201518152602001846002600481106119f7576119f761376a565b6020020151815260200184600360048110611a1457611a1461376a565b602002015190526130b9565b611aac576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603b60248201527f455448444b473a204b6579207368617265207375626d697373696f6e2066616960448201527f6c6564202d20696e76616c6964206b65792073686172652047322100000000006064820152608401610211565b60c0810184905260036060820152336000908152600b602052604090208151829190611adb908290600261331d565b506020820151600282018054604085015167ffffffffffffffff90811668010000000000000000027fffffffffffffffffffffffffffffffff0000000000000000000000000000000090921693169290921791909117808255606084015191907fffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffff16700100000000000000000000000000000000836007811115611b8157611b816136e0565b02179055506080820151600382015560a0820151611ba5906004830190600261331d565b5060c0820151611bbb906006830190600261331d565b5060e0820151611bd1906008830190600461335b565b50506040805180820191829052600092509060099060029082845b815481526020019060010190808311611bec5750505050509050611c92604051806080016040528083600060028110611c2757611c2761376a565b6020020151815260200183600160028110611c4457611c4461376a565b602002015181526020018460c00151600060028110611c6557611c6561376a565b602002015181526020018460c00151600160028110611c8657611c8661376a565b60200201519052613164565b611ca090600990600261331d565b5060008054611ccb9071010000000000000000000000000000000000900463ffffffff166001613799565b63ffffffff1690507f6162e2d11398e4063e4c8565dafc4fb6755bbead93747ea836a5ef73a594aaf73384604001518560200151898989604051611d1496959493929190613890565b60405180910390a1600154604080517f274982400000000000000000000000000000000000000000000000000000000081529051611d8f9260049273ffffffffffffffffffffffffffffffffffffffff9091169163274982409180850191602091819003860181865afa158015610858573d6000803e3d6000fd5b15611dc8576040514381527f522cec98f6caa194456c44afa9e8cef9ac63eecb0be60e20d180ce19cfb0ef599060200160405180910390a15b505050505050565b6001600054700100000000000000000000000000000000900460ff166007811115611dfd57611dfd6136e0565b148015611e21575060005468010000000000000000900467ffffffffffffffff1643115b8015611e7a5750600054611e6c90790100000000000000000000000000000000000000000000000000810461ffff169068010000000000000000900467ffffffffffffffff1661373e565b67ffffffffffffffff164311155b611f06576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f455448444b473a2063616e6e6f74207061727469636970617465206f6e20746860448201527f69732070686173650000000000000000000000000000000000000000000000006064820152608401610211565b336000908152600b6020526040808220815161014081019092528161010081018260028282826020028201915b815481526020019060010190808311611f33575050509183525050600282015467ffffffffffffffff8082166020840152680100000000000000008204166040830152606090910190700100000000000000000000000000000000900460ff166007811115611fa457611fa46136e0565b6007811115611fb557611fb56136e0565b8152600382015460208201526040805180820182529101906004830160028282826020028201915b815481526020019060010190808311611fdd575050509183525050604080518082019182905260209092019190600684019060029082845b81548152602001906001019080831161201557505050918352505060408051608081019182905260209092019190600884019060049082845b81548152602001906001019080831161204e57505050505081525050905060008054906101000a900467ffffffffffffffff1667ffffffffffffffff16816020015167ffffffffffffffff161461214d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604260248201527f455448444b473a20536861726520646973747269627574696f6e206661696c6560448201527f642c207061727469636970616e74207769746820696e76616c6964206e6f6e6360648201527f6521000000000000000000000000000000000000000000000000000000000000608482015260a401610211565b600081606001516007811115612165576121656136e0565b14612218576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604160248201527f455448444b473a205061727469636970616e7420616c7265616479206469737460448201527f7269627574656420736861726573207468697320455448444b4720726f756e6460648201527f2100000000000000000000000000000000000000000000000000000000000000608482015260a401610211565b600154604080517f27498240000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163274982409160048083019260209291908290030181865afa158015612288573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ac91906137b8565b905060006122b982613207565b90506122c66001836138f8565b85511461237b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152605060248201527f455448444b473a20536861726520646973747269627574696f6e206661696c6560448201527f64202d20696e76616c6964206e756d626572206f6620656e637279707465642060648201527f7368617265732070726f76696465642100000000000000000000000000000000608482015260a401610211565b61238681600161390f565b84511461243c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526044602482018190527f455448444b473a204b65792073686172696e67206661696c6564202d20696e76908201527f616c6964206e756d626572206f6620636f6d6d69746d656e74732070726f766960648201527f6465642100000000000000000000000000000000000000000000000000000000608482015260a401610211565b60005b8181116125c35761246885828151811061245b5761245b61376a565b6020026020010151612caf565b6124f4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603e60248201527f455448444b473a204b65792073686172696e67206661696c6564202d20636f6d60448201527f6d69746d656e74206e6f74206f6e20656c6c69707469632063757276652100006064820152608401610211565b8481815181106125065761250661376a565b60200260200101516000600281106125205761252061376a565b60200201516125b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f455448444b473a20436f6d6d69746d656e74732073686f756c646e277420626560448201527f207a65726f2100000000000000000000000000000000000000000000000000006064820152608401610211565b806125bb81613927565b91505061243f565b506000856040516020016125d79190613960565b6040516020818303038152906040528051906020012090506000856040516020016126029190613996565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815282825280516020918201209083018590529082018190529150606001604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052805160209091012060808601819052612738576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152605260248201527f455448444b473a205468652068617368206f6620656e6372797074656453686160448201527f72657320616e6420636f6d6d69746d656e74732073686f756c6420626520646960648201527f66666572656e742066726f6d207a65726f210000000000000000000000000000608482015260a401610211565b8560008151811061274b5761274b61376a565b60209081029190910181015160a087015260016060870152336000908152600b909152604090208551869190612784908290600261331d565b506020820151600282018054604085015167ffffffffffffffff90811668010000000000000000027fffffffffffffffffffffffffffffffff0000000000000000000000000000000090921693169290921791909117808255606084015191907fffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffff1670010000000000000000000000000000000083600781111561282a5761282a6136e0565b02179055506080820151600382015560a082015161284e906004830190600261331d565b5060c0820151612864906006830190600261331d565b5060e082015161287a906008830190600461335b565b5050600080549091506128a99071010000000000000000000000000000000000900463ffffffff166001613799565b63ffffffff1690507ff0c8b0ef2867c2b4639b404a0296b6bbf0bf97e20856af42144a5a6035c0d0d233876040015188602001518b8b6040516128f09594939291906139ca565b60405180910390a161290460028683612bd3565b1561293d576040514381527fbfe94ffef5ddde4d25ac7b652f3f67686ea63f9badbfe1f25451e26fc262d11c9060200160405180910390a15b5050505050505050565b6004600054700100000000000000000000000000000000900460ff166007811115612974576129746136e0565b148015612998575060005468010000000000000000900467ffffffffffffffff1643115b80156129f157506000546129e390790100000000000000000000000000000000000000000000000000810461ffff169068010000000000000000900467ffffffffffffffff1661373e565b67ffffffffffffffff164311155b612a7f57604080517f08c379a00000000000000000000000000000000000000000000000000000000081526020600482015260248101919091527f455448444b473a2063616e6e6f74207061727469636970617465206f6e206d6160448201527f73746572207075626c6963206b6579207375626d697373696f6e2070686173656064820152608401610211565b604080518082019182905260009160099060029082845b815481526020019060010190808311612a965750505050509050612aef60405180610180016040528083600060028110612ad257612ad261376a565b60200201518152602001836001600281106118bc576118bc61376a565b612b7b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603360248201527f455448444b473a204d6173746572206b6579207375626d697373696f6e20706160448201527f6972696e6720636865636b206661696c656421000000000000000000000000006064820152608401610211565b612b88600583600461335b565b50612b936005612d13565b6000546040517f71b1ebd27be320895a22125d6458e3363aefa6944a312ede4bf275867e6d5a7191610f1991439167ffffffffffffffff16908690613aa7565b600082821415612c6257612be684612d13565b600080547b01000000000000000000000000000000000000000000000000000000810461ffff169190600890612c3390849068010000000000000000900467ffffffffffffffff1661373e565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060019050612ca8565b50600080547fffffffffffffffffffffff00000000ffffffffffffffffffffffffffffffffff167101000000000000000000000000000000000063ffffffff8416021781555b9392505050565b80516000907f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47906003908290819080098551090860208301517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd479080091492915050565b600080548291907fffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffff16700100000000000000000000000000000000836007811115612d6057612d606136e0565b021790555050600080547fffffffffffffffffffffff00000000ff0000000000000000ffffffffffffffff16680100000000000000004367ffffffffffffffff16027fffffffffffffffffffffff00000000ffffffffffffffffffffffffffffffffff16179055565b6000612dd3613388565b612ddb613388565b612e4260405180606001604052808a600060028110612dfc57612dfc61376a565b602002015181526020018a600160028110612e1957612e1961376a565b6020020151815260200186600160028110612e3657612e3661376a565b6020020151905261325b565b9150612e9f604051806060016040528089600060028110612e6557612e6561376a565b6020020151815260200189600160028110612e8257612e8261376a565b6020020151815260200186600060028110612e3657612e3661376a565b90506000612f1b604051806080016040528085600060028110612ec457612ec461376a565b6020020151815260200185600160028110612ee157612ee161376a565b6020020151815260200184600060028110612efe57612efe61376a565b6020020151815260200184600160028110611c8657611c8661376a565b9050612f78604051806060016040528089600060028110612f3e57612f3e61376a565b6020020151815260200189600160028110612f5b57612f5b61376a565b6020020151815260200187600160028110612e3657612e3661376a565b9250612fd5604051806060016040528088600060028110612f9b57612f9b61376a565b6020020151815260200188600160028110612fb857612fb861376a565b6020020151815260200187600060028110612e3657612e3661376a565b91506000613051604051806080016040528086600060028110612ffa57612ffa61376a565b60200201518152602001866001600281106130175761301761376a565b60200201518152602001856000600281106130345761303461376a565b6020020151815260200185600160028110611c8657611c8661376a565b905060008a8a8a8a868660405160200161307096959493929190613ad3565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0018152919052805160209091012096519096149a9950505050505050505050565b60006130c36133a6565b60006020826101808660087ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa905080613159576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f656c6c69707469632063757276652070616972696e67206661696c65640000006044820152606401610211565b505160011492915050565b61316c613388565b600060408260808560067ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa905080613201576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f656c6c6970746963206375727665206164646974696f6e206661696c656400006044820152606401610211565b50919050565b600080613215600384613b2e565b9050613222816002613b69565b91506000613231826003613b69565b61323b90856138f8565b905080600214156132545761325183600161390f565b92505b5050919050565b613263613388565b600060408260608560077ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa905080613201576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f656c6c6970746963206375727665206d756c7469706c69636174696f6e20666160448201527f696c6564000000000000000000000000000000000000000000000000000000006064820152608401610211565b826002810192821561334b579160200282015b8281111561334b578251825591602001919060010190613330565b506133579291506133c4565b5090565b826004810192821561334b579160200282018281111561334b578251825591602001919060010190613330565b60405180604001604052806002906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b5b8082111561335757600081556001016133c5565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561344f5761344f6133d9565b604052919050565b600082601f83011261346857600080fd5b6040516080810181811067ffffffffffffffff8211171561348b5761348b6133d9565b6040528060808401858111156134a057600080fd5b845b818110156134ba5780358352602092830192016134a2565b509195945050505050565b6000608082840312156134d757600080fd5b612ca88383613457565b600082601f8301126134f257600080fd5b6040516040810181811067ffffffffffffffff82111715613515576135156133d9565b80604052508060408401858111156134a057600080fd5b60006040828403121561353e57600080fd5b612ca883836134e1565b6000806000610100848603121561355e57600080fd5b61356885856134e1565b925061357785604086016134e1565b91506135868560808601613457565b90509250925092565b600067ffffffffffffffff8211156135a9576135a96133d9565b5060051b60200190565b600082601f8301126135c457600080fd5b813560206135d96135d48361358f565b613408565b82815260069290921b840181019181810190868411156135f857600080fd5b8286015b8481101561361c5761360e88826134e1565b8352918301916040016135fc565b509695505050505050565b6000806040838503121561363a57600080fd5b823567ffffffffffffffff8082111561365257600080fd5b818501915085601f83011261366657600080fd5b813560206136766135d48361358f565b82815260059290921b8401810191818101908984111561369557600080fd5b948201945b838610156136b35785358252948201949082019061369a565b965050860135925050808211156136c957600080fd5b506136d6858286016135b3565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600067ffffffffffffffff8083168185168083038211156137615761376161370f565b01949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600063ffffffff8083168185168083038211156137615761376161370f565b6000602082840312156137ca57600080fd5b5051919050565b600063ffffffff808316818114156137eb576137eb61370f565b6001019392505050565b8060005b60028110156138185781518452602093840193909101906001016137f9565b50505050565b73ffffffffffffffffffffffffffffffffffffffff8516815263ffffffff8416602082015267ffffffffffffffff8316604082015260a0810161386460608301846137f5565b95945050505050565b8060005b6004811015613818578151845260209384019390910190600101613871565b73ffffffffffffffffffffffffffffffffffffffff8716815267ffffffffffffffff86811660208301528516604082015261016081016138d360608301866137f5565b6138e060a08301856137f5565b6138ed60e083018461386d565b979650505050505050565b60008282101561390a5761390a61370f565b500390565b600082198211156139225761392261370f565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156139595761395961370f565b5060010190565b815160009082906020808601845b8381101561398a5781518552938201939082019060010161396e565b50929695505050505050565b815160009082906020808601845b8381101561398a576139b78583516137f5565b60409490940193908201906001016139a4565b600060a0820173ffffffffffffffffffffffffffffffffffffffff88168352602067ffffffffffffffff8089168286015260408189168187015260a06060870152839150875180855260c087019250838901945060005b81811015613a3d57855184529484019492840192600101613a21565b50508582036080870152865180835291830193508287019160005b81811015613a965783518660005b6002811015613a8357825182529187019190870190600101613a66565b5050509482019492840192600101613a58565b50939b9a5050505050505050505050565b83815267ffffffffffffffff8316602082015260c08101613acb604083018461386d565b949350505050565b613add81886137f5565b613aea60408201876137f5565b613af760808201866137f5565b613b0460c08201856137f5565b613b126101008201846137f5565b613b206101408201836137f5565b610180019695505050505050565b600082613b64577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613ba157613ba161370f565b50029056fea264697066735822122032181c02b60572a4c8b604caeab07ded57ae58b9b865204aeecad8a0560f1cf564736f6c634300080b0033",
>>>>>>> Stashed changes
}

// ETHDKGPhasesABI is the input ABI used to generate the binding from.
// Deprecated: Use ETHDKGPhasesMetaData.ABI instead.
var ETHDKGPhasesABI = ETHDKGPhasesMetaData.ABI

// ETHDKGPhasesBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ETHDKGPhasesMetaData.Bin instead.
var ETHDKGPhasesBin = ETHDKGPhasesMetaData.Bin

// DeployETHDKGPhases deploys a new Ethereum contract, binding an instance of ETHDKGPhases to it.
func DeployETHDKGPhases(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ETHDKGPhases, error) {
	parsed, err := ETHDKGPhasesMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ETHDKGPhasesBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ETHDKGPhases{ETHDKGPhasesCaller: ETHDKGPhasesCaller{contract: contract}, ETHDKGPhasesTransactor: ETHDKGPhasesTransactor{contract: contract}, ETHDKGPhasesFilterer: ETHDKGPhasesFilterer{contract: contract}}, nil
}

// ETHDKGPhases is an auto generated Go binding around an Ethereum contract.
type ETHDKGPhases struct {
	ETHDKGPhasesCaller     // Read-only binding to the contract
	ETHDKGPhasesTransactor // Write-only binding to the contract
	ETHDKGPhasesFilterer   // Log filterer for contract events
}

// ETHDKGPhasesCaller is an auto generated read-only Go binding around an Ethereum contract.
type ETHDKGPhasesCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGPhasesTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ETHDKGPhasesTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGPhasesFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ETHDKGPhasesFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGPhasesSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ETHDKGPhasesSession struct {
	Contract     *ETHDKGPhases     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ETHDKGPhasesCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ETHDKGPhasesCallerSession struct {
	Contract *ETHDKGPhasesCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// ETHDKGPhasesTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ETHDKGPhasesTransactorSession struct {
	Contract     *ETHDKGPhasesTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// ETHDKGPhasesRaw is an auto generated low-level Go binding around an Ethereum contract.
type ETHDKGPhasesRaw struct {
	Contract *ETHDKGPhases // Generic contract binding to access the raw methods on
}

// ETHDKGPhasesCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ETHDKGPhasesCallerRaw struct {
	Contract *ETHDKGPhasesCaller // Generic read-only contract binding to access the raw methods on
}

// ETHDKGPhasesTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ETHDKGPhasesTransactorRaw struct {
	Contract *ETHDKGPhasesTransactor // Generic write-only contract binding to access the raw methods on
}

// NewETHDKGPhases creates a new instance of ETHDKGPhases, bound to a specific deployed contract.
func NewETHDKGPhases(address common.Address, backend bind.ContractBackend) (*ETHDKGPhases, error) {
	contract, err := bindETHDKGPhases(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ETHDKGPhases{ETHDKGPhasesCaller: ETHDKGPhasesCaller{contract: contract}, ETHDKGPhasesTransactor: ETHDKGPhasesTransactor{contract: contract}, ETHDKGPhasesFilterer: ETHDKGPhasesFilterer{contract: contract}}, nil
}

// NewETHDKGPhasesCaller creates a new read-only instance of ETHDKGPhases, bound to a specific deployed contract.
func NewETHDKGPhasesCaller(address common.Address, caller bind.ContractCaller) (*ETHDKGPhasesCaller, error) {
	contract, err := bindETHDKGPhases(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ETHDKGPhasesCaller{contract: contract}, nil
}

// NewETHDKGPhasesTransactor creates a new write-only instance of ETHDKGPhases, bound to a specific deployed contract.
func NewETHDKGPhasesTransactor(address common.Address, transactor bind.ContractTransactor) (*ETHDKGPhasesTransactor, error) {
	contract, err := bindETHDKGPhases(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ETHDKGPhasesTransactor{contract: contract}, nil
}

// NewETHDKGPhasesFilterer creates a new log filterer instance of ETHDKGPhases, bound to a specific deployed contract.
func NewETHDKGPhasesFilterer(address common.Address, filterer bind.ContractFilterer) (*ETHDKGPhasesFilterer, error) {
	contract, err := bindETHDKGPhases(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ETHDKGPhasesFilterer{contract: contract}, nil
}

// bindETHDKGPhases binds a generic wrapper to an already deployed contract.
func bindETHDKGPhases(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ETHDKGPhasesABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETHDKGPhases *ETHDKGPhasesRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ETHDKGPhases.Contract.ETHDKGPhasesCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETHDKGPhases *ETHDKGPhasesRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKGPhases.Contract.ETHDKGPhasesTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETHDKGPhases *ETHDKGPhasesRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETHDKGPhases.Contract.ETHDKGPhasesTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETHDKGPhases *ETHDKGPhasesCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ETHDKGPhases.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETHDKGPhases *ETHDKGPhasesTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKGPhases.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETHDKGPhases *ETHDKGPhasesTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETHDKGPhases.Contract.contract.Transact(opts, method, params...)
}

// Complete is a paid mutator transaction binding the contract method 0x522e1177.
//
// Solidity: function complete() returns()
func (_ETHDKGPhases *ETHDKGPhasesTransactor) Complete(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKGPhases.contract.Transact(opts, "complete")
}

// Complete is a paid mutator transaction binding the contract method 0x522e1177.
//
// Solidity: function complete() returns()
func (_ETHDKGPhases *ETHDKGPhasesSession) Complete() (*types.Transaction, error) {
	return _ETHDKGPhases.Contract.Complete(&_ETHDKGPhases.TransactOpts)
}

// Complete is a paid mutator transaction binding the contract method 0x522e1177.
//
// Solidity: function complete() returns()
func (_ETHDKGPhases *ETHDKGPhasesTransactorSession) Complete() (*types.Transaction, error) {
	return _ETHDKGPhases.Contract.Complete(&_ETHDKGPhases.TransactOpts)
}

// DistributeShares is a paid mutator transaction binding the contract method 0x80b97e01.
//
// Solidity: function distributeShares(uint256[] encryptedShares, uint256[2][] commitments) returns()
func (_ETHDKGPhases *ETHDKGPhasesTransactor) DistributeShares(opts *bind.TransactOpts, encryptedShares []*big.Int, commitments [][2]*big.Int) (*types.Transaction, error) {
	return _ETHDKGPhases.contract.Transact(opts, "distributeShares", encryptedShares, commitments)
}

// DistributeShares is a paid mutator transaction binding the contract method 0x80b97e01.
//
// Solidity: function distributeShares(uint256[] encryptedShares, uint256[2][] commitments) returns()
func (_ETHDKGPhases *ETHDKGPhasesSession) DistributeShares(encryptedShares []*big.Int, commitments [][2]*big.Int) (*types.Transaction, error) {
	return _ETHDKGPhases.Contract.DistributeShares(&_ETHDKGPhases.TransactOpts, encryptedShares, commitments)
}

// DistributeShares is a paid mutator transaction binding the contract method 0x80b97e01.
//
// Solidity: function distributeShares(uint256[] encryptedShares, uint256[2][] commitments) returns()
func (_ETHDKGPhases *ETHDKGPhasesTransactorSession) DistributeShares(encryptedShares []*big.Int, commitments [][2]*big.Int) (*types.Transaction, error) {
	return _ETHDKGPhases.Contract.DistributeShares(&_ETHDKGPhases.TransactOpts, encryptedShares, commitments)
}

// Register is a paid mutator transaction binding the contract method 0x3442af5c.
//
// Solidity: function register(uint256[2] publicKey) returns()
func (_ETHDKGPhases *ETHDKGPhasesTransactor) Register(opts *bind.TransactOpts, publicKey [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKGPhases.contract.Transact(opts, "register", publicKey)
}

// Register is a paid mutator transaction binding the contract method 0x3442af5c.
//
// Solidity: function register(uint256[2] publicKey) returns()
func (_ETHDKGPhases *ETHDKGPhasesSession) Register(publicKey [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKGPhases.Contract.Register(&_ETHDKGPhases.TransactOpts, publicKey)
}

// Register is a paid mutator transaction binding the contract method 0x3442af5c.
//
// Solidity: function register(uint256[2] publicKey) returns()
func (_ETHDKGPhases *ETHDKGPhasesTransactorSession) Register(publicKey [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKGPhases.Contract.Register(&_ETHDKGPhases.TransactOpts, publicKey)
}

<<<<<<< Updated upstream
// SubmitGPKj is a paid mutator transaction binding the contract method 0xd410e8e4.
//
// Solidity: function submitGPKj(uint256[4] gpkj) returns()
func (_ETHDKGPhases *ETHDKGPhasesTransactor) SubmitGPKj(opts *bind.TransactOpts, gpkj [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKGPhases.contract.Transact(opts, "submitGPKj", gpkj)
}

// SubmitGPKj is a paid mutator transaction binding the contract method 0xd410e8e4.
//
// Solidity: function submitGPKj(uint256[4] gpkj) returns()
func (_ETHDKGPhases *ETHDKGPhasesSession) SubmitGPKj(gpkj [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKGPhases.Contract.SubmitGPKj(&_ETHDKGPhases.TransactOpts, gpkj)
}

// SubmitGPKj is a paid mutator transaction binding the contract method 0xd410e8e4.
//
// Solidity: function submitGPKj(uint256[4] gpkj) returns()
func (_ETHDKGPhases *ETHDKGPhasesTransactorSession) SubmitGPKj(gpkj [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKGPhases.Contract.SubmitGPKj(&_ETHDKGPhases.TransactOpts, gpkj)
=======
// SubmitGPKJ is a paid mutator transaction binding the contract method 0x101f49c1.
//
// Solidity: function submitGPKJ(uint256[4] gpkj) returns()
func (_ETHDKGPhases *ETHDKGPhasesTransactor) SubmitGPKJ(opts *bind.TransactOpts, gpkj [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKGPhases.contract.Transact(opts, "submitGPKJ", gpkj)
}

// SubmitGPKJ is a paid mutator transaction binding the contract method 0x101f49c1.
//
// Solidity: function submitGPKJ(uint256[4] gpkj) returns()
func (_ETHDKGPhases *ETHDKGPhasesSession) SubmitGPKJ(gpkj [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKGPhases.Contract.SubmitGPKJ(&_ETHDKGPhases.TransactOpts, gpkj)
}

// SubmitGPKJ is a paid mutator transaction binding the contract method 0x101f49c1.
//
// Solidity: function submitGPKJ(uint256[4] gpkj) returns()
func (_ETHDKGPhases *ETHDKGPhasesTransactorSession) SubmitGPKJ(gpkj [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKGPhases.Contract.SubmitGPKJ(&_ETHDKGPhases.TransactOpts, gpkj)
>>>>>>> Stashed changes
}

// SubmitKeyShare is a paid mutator transaction binding the contract method 0x62a6523e.
//
// Solidity: function submitKeyShare(uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2) returns()
func (_ETHDKGPhases *ETHDKGPhasesTransactor) SubmitKeyShare(opts *bind.TransactOpts, keyShareG1 [2]*big.Int, keyShareG1CorrectnessProof [2]*big.Int, keyShareG2 [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKGPhases.contract.Transact(opts, "submitKeyShare", keyShareG1, keyShareG1CorrectnessProof, keyShareG2)
}

// SubmitKeyShare is a paid mutator transaction binding the contract method 0x62a6523e.
//
// Solidity: function submitKeyShare(uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2) returns()
func (_ETHDKGPhases *ETHDKGPhasesSession) SubmitKeyShare(keyShareG1 [2]*big.Int, keyShareG1CorrectnessProof [2]*big.Int, keyShareG2 [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKGPhases.Contract.SubmitKeyShare(&_ETHDKGPhases.TransactOpts, keyShareG1, keyShareG1CorrectnessProof, keyShareG2)
}

// SubmitKeyShare is a paid mutator transaction binding the contract method 0x62a6523e.
//
// Solidity: function submitKeyShare(uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2) returns()
func (_ETHDKGPhases *ETHDKGPhasesTransactorSession) SubmitKeyShare(keyShareG1 [2]*big.Int, keyShareG1CorrectnessProof [2]*big.Int, keyShareG2 [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKGPhases.Contract.SubmitKeyShare(&_ETHDKGPhases.TransactOpts, keyShareG1, keyShareG1CorrectnessProof, keyShareG2)
}

// SubmitMasterPublicKey is a paid mutator transaction binding the contract method 0xe8323224.
//
// Solidity: function submitMasterPublicKey(uint256[4] masterPublicKey_) returns()
func (_ETHDKGPhases *ETHDKGPhasesTransactor) SubmitMasterPublicKey(opts *bind.TransactOpts, masterPublicKey_ [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKGPhases.contract.Transact(opts, "submitMasterPublicKey", masterPublicKey_)
}

// SubmitMasterPublicKey is a paid mutator transaction binding the contract method 0xe8323224.
//
// Solidity: function submitMasterPublicKey(uint256[4] masterPublicKey_) returns()
func (_ETHDKGPhases *ETHDKGPhasesSession) SubmitMasterPublicKey(masterPublicKey_ [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKGPhases.Contract.SubmitMasterPublicKey(&_ETHDKGPhases.TransactOpts, masterPublicKey_)
}

// SubmitMasterPublicKey is a paid mutator transaction binding the contract method 0xe8323224.
//
// Solidity: function submitMasterPublicKey(uint256[4] masterPublicKey_) returns()
func (_ETHDKGPhases *ETHDKGPhasesTransactorSession) SubmitMasterPublicKey(masterPublicKey_ [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKGPhases.Contract.SubmitMasterPublicKey(&_ETHDKGPhases.TransactOpts, masterPublicKey_)
}

// ETHDKGPhasesAddressRegisteredIterator is returned from FilterAddressRegistered and is used to iterate over the raw logs and unpacked data for AddressRegistered events raised by the ETHDKGPhases contract.
type ETHDKGPhasesAddressRegisteredIterator struct {
	Event *ETHDKGPhasesAddressRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGPhasesAddressRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGPhasesAddressRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGPhasesAddressRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGPhasesAddressRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGPhasesAddressRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGPhasesAddressRegistered represents a AddressRegistered event raised by the ETHDKGPhases contract.
type ETHDKGPhasesAddressRegistered struct {
	Account   common.Address
	Index     *big.Int
	Nonce     *big.Int
	PublicKey [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAddressRegistered is a free log retrieval operation binding the contract event 0x7f1304057ec61140fbf2f5f236790f34fcafe123d3eb0d298d92317c97da500d.
//
// Solidity: event AddressRegistered(address account, uint256 index, uint256 nonce, uint256[2] publicKey)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) FilterAddressRegistered(opts *bind.FilterOpts) (*ETHDKGPhasesAddressRegisteredIterator, error) {

	logs, sub, err := _ETHDKGPhases.contract.FilterLogs(opts, "AddressRegistered")
	if err != nil {
		return nil, err
	}
	return &ETHDKGPhasesAddressRegisteredIterator{contract: _ETHDKGPhases.contract, event: "AddressRegistered", logs: logs, sub: sub}, nil
}

// WatchAddressRegistered is a free log subscription operation binding the contract event 0x7f1304057ec61140fbf2f5f236790f34fcafe123d3eb0d298d92317c97da500d.
//
// Solidity: event AddressRegistered(address account, uint256 index, uint256 nonce, uint256[2] publicKey)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) WatchAddressRegistered(opts *bind.WatchOpts, sink chan<- *ETHDKGPhasesAddressRegistered) (event.Subscription, error) {

	logs, sub, err := _ETHDKGPhases.contract.WatchLogs(opts, "AddressRegistered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGPhasesAddressRegistered)
				if err := _ETHDKGPhases.contract.UnpackLog(event, "AddressRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddressRegistered is a log parse operation binding the contract event 0x7f1304057ec61140fbf2f5f236790f34fcafe123d3eb0d298d92317c97da500d.
//
// Solidity: event AddressRegistered(address account, uint256 index, uint256 nonce, uint256[2] publicKey)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) ParseAddressRegistered(log types.Log) (*ETHDKGPhasesAddressRegistered, error) {
	event := new(ETHDKGPhasesAddressRegistered)
	if err := _ETHDKGPhases.contract.UnpackLog(event, "AddressRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGPhasesGPKJSubmissionCompleteIterator is returned from FilterGPKJSubmissionComplete and is used to iterate over the raw logs and unpacked data for GPKJSubmissionComplete events raised by the ETHDKGPhases contract.
type ETHDKGPhasesGPKJSubmissionCompleteIterator struct {
	Event *ETHDKGPhasesGPKJSubmissionComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGPhasesGPKJSubmissionCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGPhasesGPKJSubmissionComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGPhasesGPKJSubmissionComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGPhasesGPKJSubmissionCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGPhasesGPKJSubmissionCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGPhasesGPKJSubmissionComplete represents a GPKJSubmissionComplete event raised by the ETHDKGPhases contract.
type ETHDKGPhasesGPKJSubmissionComplete struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterGPKJSubmissionComplete is a free log retrieval operation binding the contract event 0x87bfe600b78cad9f7cf68c99eb582c1748f636b3269842b37d5873b0e069f628.
//
// Solidity: event GPKJSubmissionComplete(uint256 blockNumber)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) FilterGPKJSubmissionComplete(opts *bind.FilterOpts) (*ETHDKGPhasesGPKJSubmissionCompleteIterator, error) {

	logs, sub, err := _ETHDKGPhases.contract.FilterLogs(opts, "GPKJSubmissionComplete")
	if err != nil {
		return nil, err
	}
	return &ETHDKGPhasesGPKJSubmissionCompleteIterator{contract: _ETHDKGPhases.contract, event: "GPKJSubmissionComplete", logs: logs, sub: sub}, nil
}

// WatchGPKJSubmissionComplete is a free log subscription operation binding the contract event 0x87bfe600b78cad9f7cf68c99eb582c1748f636b3269842b37d5873b0e069f628.
//
// Solidity: event GPKJSubmissionComplete(uint256 blockNumber)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) WatchGPKJSubmissionComplete(opts *bind.WatchOpts, sink chan<- *ETHDKGPhasesGPKJSubmissionComplete) (event.Subscription, error) {

	logs, sub, err := _ETHDKGPhases.contract.WatchLogs(opts, "GPKJSubmissionComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGPhasesGPKJSubmissionComplete)
				if err := _ETHDKGPhases.contract.UnpackLog(event, "GPKJSubmissionComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGPKJSubmissionComplete is a log parse operation binding the contract event 0x87bfe600b78cad9f7cf68c99eb582c1748f636b3269842b37d5873b0e069f628.
//
// Solidity: event GPKJSubmissionComplete(uint256 blockNumber)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) ParseGPKJSubmissionComplete(log types.Log) (*ETHDKGPhasesGPKJSubmissionComplete, error) {
	event := new(ETHDKGPhasesGPKJSubmissionComplete)
	if err := _ETHDKGPhases.contract.UnpackLog(event, "GPKJSubmissionComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGPhasesKeyShareSubmissionCompleteIterator is returned from FilterKeyShareSubmissionComplete and is used to iterate over the raw logs and unpacked data for KeyShareSubmissionComplete events raised by the ETHDKGPhases contract.
type ETHDKGPhasesKeyShareSubmissionCompleteIterator struct {
	Event *ETHDKGPhasesKeyShareSubmissionComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGPhasesKeyShareSubmissionCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGPhasesKeyShareSubmissionComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGPhasesKeyShareSubmissionComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGPhasesKeyShareSubmissionCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGPhasesKeyShareSubmissionCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGPhasesKeyShareSubmissionComplete represents a KeyShareSubmissionComplete event raised by the ETHDKGPhases contract.
type ETHDKGPhasesKeyShareSubmissionComplete struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterKeyShareSubmissionComplete is a free log retrieval operation binding the contract event 0x522cec98f6caa194456c44afa9e8cef9ac63eecb0be60e20d180ce19cfb0ef59.
//
// Solidity: event KeyShareSubmissionComplete(uint256 blockNumber)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) FilterKeyShareSubmissionComplete(opts *bind.FilterOpts) (*ETHDKGPhasesKeyShareSubmissionCompleteIterator, error) {

	logs, sub, err := _ETHDKGPhases.contract.FilterLogs(opts, "KeyShareSubmissionComplete")
	if err != nil {
		return nil, err
	}
	return &ETHDKGPhasesKeyShareSubmissionCompleteIterator{contract: _ETHDKGPhases.contract, event: "KeyShareSubmissionComplete", logs: logs, sub: sub}, nil
}

// WatchKeyShareSubmissionComplete is a free log subscription operation binding the contract event 0x522cec98f6caa194456c44afa9e8cef9ac63eecb0be60e20d180ce19cfb0ef59.
//
// Solidity: event KeyShareSubmissionComplete(uint256 blockNumber)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) WatchKeyShareSubmissionComplete(opts *bind.WatchOpts, sink chan<- *ETHDKGPhasesKeyShareSubmissionComplete) (event.Subscription, error) {

	logs, sub, err := _ETHDKGPhases.contract.WatchLogs(opts, "KeyShareSubmissionComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGPhasesKeyShareSubmissionComplete)
				if err := _ETHDKGPhases.contract.UnpackLog(event, "KeyShareSubmissionComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyShareSubmissionComplete is a log parse operation binding the contract event 0x522cec98f6caa194456c44afa9e8cef9ac63eecb0be60e20d180ce19cfb0ef59.
//
// Solidity: event KeyShareSubmissionComplete(uint256 blockNumber)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) ParseKeyShareSubmissionComplete(log types.Log) (*ETHDKGPhasesKeyShareSubmissionComplete, error) {
	event := new(ETHDKGPhasesKeyShareSubmissionComplete)
	if err := _ETHDKGPhases.contract.UnpackLog(event, "KeyShareSubmissionComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGPhasesKeyShareSubmittedIterator is returned from FilterKeyShareSubmitted and is used to iterate over the raw logs and unpacked data for KeyShareSubmitted events raised by the ETHDKGPhases contract.
type ETHDKGPhasesKeyShareSubmittedIterator struct {
	Event *ETHDKGPhasesKeyShareSubmitted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGPhasesKeyShareSubmittedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGPhasesKeyShareSubmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGPhasesKeyShareSubmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGPhasesKeyShareSubmittedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGPhasesKeyShareSubmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGPhasesKeyShareSubmitted represents a KeyShareSubmitted event raised by the ETHDKGPhases contract.
type ETHDKGPhasesKeyShareSubmitted struct {
	Account                    common.Address
	Index                      *big.Int
	Nonce                      *big.Int
	KeyShareG1                 [2]*big.Int
	KeyShareG1CorrectnessProof [2]*big.Int
	KeyShareG2                 [4]*big.Int
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterKeyShareSubmitted is a free log retrieval operation binding the contract event 0x6162e2d11398e4063e4c8565dafc4fb6755bbead93747ea836a5ef73a594aaf7.
//
// Solidity: event KeyShareSubmitted(address account, uint256 index, uint256 nonce, uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) FilterKeyShareSubmitted(opts *bind.FilterOpts) (*ETHDKGPhasesKeyShareSubmittedIterator, error) {

	logs, sub, err := _ETHDKGPhases.contract.FilterLogs(opts, "KeyShareSubmitted")
	if err != nil {
		return nil, err
	}
	return &ETHDKGPhasesKeyShareSubmittedIterator{contract: _ETHDKGPhases.contract, event: "KeyShareSubmitted", logs: logs, sub: sub}, nil
}

// WatchKeyShareSubmitted is a free log subscription operation binding the contract event 0x6162e2d11398e4063e4c8565dafc4fb6755bbead93747ea836a5ef73a594aaf7.
//
// Solidity: event KeyShareSubmitted(address account, uint256 index, uint256 nonce, uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) WatchKeyShareSubmitted(opts *bind.WatchOpts, sink chan<- *ETHDKGPhasesKeyShareSubmitted) (event.Subscription, error) {

	logs, sub, err := _ETHDKGPhases.contract.WatchLogs(opts, "KeyShareSubmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGPhasesKeyShareSubmitted)
				if err := _ETHDKGPhases.contract.UnpackLog(event, "KeyShareSubmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyShareSubmitted is a log parse operation binding the contract event 0x6162e2d11398e4063e4c8565dafc4fb6755bbead93747ea836a5ef73a594aaf7.
//
// Solidity: event KeyShareSubmitted(address account, uint256 index, uint256 nonce, uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) ParseKeyShareSubmitted(log types.Log) (*ETHDKGPhasesKeyShareSubmitted, error) {
	event := new(ETHDKGPhasesKeyShareSubmitted)
	if err := _ETHDKGPhases.contract.UnpackLog(event, "KeyShareSubmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGPhasesMPKSetIterator is returned from FilterMPKSet and is used to iterate over the raw logs and unpacked data for MPKSet events raised by the ETHDKGPhases contract.
type ETHDKGPhasesMPKSetIterator struct {
	Event *ETHDKGPhasesMPKSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGPhasesMPKSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGPhasesMPKSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGPhasesMPKSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGPhasesMPKSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGPhasesMPKSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGPhasesMPKSet represents a MPKSet event raised by the ETHDKGPhases contract.
type ETHDKGPhasesMPKSet struct {
	BlockNumber *big.Int
	Nonce       *big.Int
	Mpk         [4]*big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterMPKSet is a free log retrieval operation binding the contract event 0x71b1ebd27be320895a22125d6458e3363aefa6944a312ede4bf275867e6d5a71.
//
// Solidity: event MPKSet(uint256 blockNumber, uint256 nonce, uint256[4] mpk)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) FilterMPKSet(opts *bind.FilterOpts) (*ETHDKGPhasesMPKSetIterator, error) {

	logs, sub, err := _ETHDKGPhases.contract.FilterLogs(opts, "MPKSet")
	if err != nil {
		return nil, err
	}
	return &ETHDKGPhasesMPKSetIterator{contract: _ETHDKGPhases.contract, event: "MPKSet", logs: logs, sub: sub}, nil
}

// WatchMPKSet is a free log subscription operation binding the contract event 0x71b1ebd27be320895a22125d6458e3363aefa6944a312ede4bf275867e6d5a71.
//
// Solidity: event MPKSet(uint256 blockNumber, uint256 nonce, uint256[4] mpk)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) WatchMPKSet(opts *bind.WatchOpts, sink chan<- *ETHDKGPhasesMPKSet) (event.Subscription, error) {

	logs, sub, err := _ETHDKGPhases.contract.WatchLogs(opts, "MPKSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGPhasesMPKSet)
				if err := _ETHDKGPhases.contract.UnpackLog(event, "MPKSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMPKSet is a log parse operation binding the contract event 0x71b1ebd27be320895a22125d6458e3363aefa6944a312ede4bf275867e6d5a71.
//
// Solidity: event MPKSet(uint256 blockNumber, uint256 nonce, uint256[4] mpk)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) ParseMPKSet(log types.Log) (*ETHDKGPhasesMPKSet, error) {
	event := new(ETHDKGPhasesMPKSet)
	if err := _ETHDKGPhases.contract.UnpackLog(event, "MPKSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGPhasesRegistrationCompleteIterator is returned from FilterRegistrationComplete and is used to iterate over the raw logs and unpacked data for RegistrationComplete events raised by the ETHDKGPhases contract.
type ETHDKGPhasesRegistrationCompleteIterator struct {
	Event *ETHDKGPhasesRegistrationComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGPhasesRegistrationCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGPhasesRegistrationComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGPhasesRegistrationComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGPhasesRegistrationCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGPhasesRegistrationCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGPhasesRegistrationComplete represents a RegistrationComplete event raised by the ETHDKGPhases contract.
type ETHDKGPhasesRegistrationComplete struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRegistrationComplete is a free log retrieval operation binding the contract event 0x833013b96b786b4eca83baac286920e5e53956c21ff3894f1d9f02e97d6ed764.
//
// Solidity: event RegistrationComplete(uint256 blockNumber)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) FilterRegistrationComplete(opts *bind.FilterOpts) (*ETHDKGPhasesRegistrationCompleteIterator, error) {

	logs, sub, err := _ETHDKGPhases.contract.FilterLogs(opts, "RegistrationComplete")
	if err != nil {
		return nil, err
	}
	return &ETHDKGPhasesRegistrationCompleteIterator{contract: _ETHDKGPhases.contract, event: "RegistrationComplete", logs: logs, sub: sub}, nil
}

// WatchRegistrationComplete is a free log subscription operation binding the contract event 0x833013b96b786b4eca83baac286920e5e53956c21ff3894f1d9f02e97d6ed764.
//
// Solidity: event RegistrationComplete(uint256 blockNumber)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) WatchRegistrationComplete(opts *bind.WatchOpts, sink chan<- *ETHDKGPhasesRegistrationComplete) (event.Subscription, error) {

	logs, sub, err := _ETHDKGPhases.contract.WatchLogs(opts, "RegistrationComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGPhasesRegistrationComplete)
				if err := _ETHDKGPhases.contract.UnpackLog(event, "RegistrationComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistrationComplete is a log parse operation binding the contract event 0x833013b96b786b4eca83baac286920e5e53956c21ff3894f1d9f02e97d6ed764.
//
// Solidity: event RegistrationComplete(uint256 blockNumber)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) ParseRegistrationComplete(log types.Log) (*ETHDKGPhasesRegistrationComplete, error) {
	event := new(ETHDKGPhasesRegistrationComplete)
	if err := _ETHDKGPhases.contract.UnpackLog(event, "RegistrationComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGPhasesRegistrationOpenedIterator is returned from FilterRegistrationOpened and is used to iterate over the raw logs and unpacked data for RegistrationOpened events raised by the ETHDKGPhases contract.
type ETHDKGPhasesRegistrationOpenedIterator struct {
	Event *ETHDKGPhasesRegistrationOpened // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGPhasesRegistrationOpenedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGPhasesRegistrationOpened)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGPhasesRegistrationOpened)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGPhasesRegistrationOpenedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGPhasesRegistrationOpenedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGPhasesRegistrationOpened represents a RegistrationOpened event raised by the ETHDKGPhases contract.
type ETHDKGPhasesRegistrationOpened struct {
<<<<<<< Updated upstream
	StartBlock *big.Int
	Nonce      *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterRegistrationOpened is a free log retrieval operation binding the contract event 0x0092d3a0faf985375d3ea8563cdbdedd99bb694713af121204f50ccb198fb476.
//
// Solidity: event RegistrationOpened(uint256 startBlock, uint256 nonce)
=======
	StartBlock         *big.Int
	Nonce              *big.Int
	PhaseLength        *big.Int
	ConfirmationLength *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterRegistrationOpened is a free log retrieval operation binding the contract event 0xc867fa8c9b2d0ef5b1687773346ccc44cbc8b392ec2934a6178ffe529f311c8d.
//
// Solidity: event RegistrationOpened(uint256 startBlock, uint256 nonce, uint256 phaseLength, uint256 confirmationLength)
>>>>>>> Stashed changes
func (_ETHDKGPhases *ETHDKGPhasesFilterer) FilterRegistrationOpened(opts *bind.FilterOpts) (*ETHDKGPhasesRegistrationOpenedIterator, error) {

	logs, sub, err := _ETHDKGPhases.contract.FilterLogs(opts, "RegistrationOpened")
	if err != nil {
		return nil, err
	}
	return &ETHDKGPhasesRegistrationOpenedIterator{contract: _ETHDKGPhases.contract, event: "RegistrationOpened", logs: logs, sub: sub}, nil
}

<<<<<<< Updated upstream
// WatchRegistrationOpened is a free log subscription operation binding the contract event 0x0092d3a0faf985375d3ea8563cdbdedd99bb694713af121204f50ccb198fb476.
//
// Solidity: event RegistrationOpened(uint256 startBlock, uint256 nonce)
=======
// WatchRegistrationOpened is a free log subscription operation binding the contract event 0xc867fa8c9b2d0ef5b1687773346ccc44cbc8b392ec2934a6178ffe529f311c8d.
//
// Solidity: event RegistrationOpened(uint256 startBlock, uint256 nonce, uint256 phaseLength, uint256 confirmationLength)
>>>>>>> Stashed changes
func (_ETHDKGPhases *ETHDKGPhasesFilterer) WatchRegistrationOpened(opts *bind.WatchOpts, sink chan<- *ETHDKGPhasesRegistrationOpened) (event.Subscription, error) {

	logs, sub, err := _ETHDKGPhases.contract.WatchLogs(opts, "RegistrationOpened")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGPhasesRegistrationOpened)
				if err := _ETHDKGPhases.contract.UnpackLog(event, "RegistrationOpened", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

<<<<<<< Updated upstream
// ParseRegistrationOpened is a log parse operation binding the contract event 0x0092d3a0faf985375d3ea8563cdbdedd99bb694713af121204f50ccb198fb476.
//
// Solidity: event RegistrationOpened(uint256 startBlock, uint256 nonce)
=======
// ParseRegistrationOpened is a log parse operation binding the contract event 0xc867fa8c9b2d0ef5b1687773346ccc44cbc8b392ec2934a6178ffe529f311c8d.
//
// Solidity: event RegistrationOpened(uint256 startBlock, uint256 nonce, uint256 phaseLength, uint256 confirmationLength)
>>>>>>> Stashed changes
func (_ETHDKGPhases *ETHDKGPhasesFilterer) ParseRegistrationOpened(log types.Log) (*ETHDKGPhasesRegistrationOpened, error) {
	event := new(ETHDKGPhasesRegistrationOpened)
	if err := _ETHDKGPhases.contract.UnpackLog(event, "RegistrationOpened", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGPhasesShareDistributionCompleteIterator is returned from FilterShareDistributionComplete and is used to iterate over the raw logs and unpacked data for ShareDistributionComplete events raised by the ETHDKGPhases contract.
type ETHDKGPhasesShareDistributionCompleteIterator struct {
	Event *ETHDKGPhasesShareDistributionComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGPhasesShareDistributionCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGPhasesShareDistributionComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGPhasesShareDistributionComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGPhasesShareDistributionCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGPhasesShareDistributionCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGPhasesShareDistributionComplete represents a ShareDistributionComplete event raised by the ETHDKGPhases contract.
type ETHDKGPhasesShareDistributionComplete struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterShareDistributionComplete is a free log retrieval operation binding the contract event 0xbfe94ffef5ddde4d25ac7b652f3f67686ea63f9badbfe1f25451e26fc262d11c.
//
// Solidity: event ShareDistributionComplete(uint256 blockNumber)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) FilterShareDistributionComplete(opts *bind.FilterOpts) (*ETHDKGPhasesShareDistributionCompleteIterator, error) {

	logs, sub, err := _ETHDKGPhases.contract.FilterLogs(opts, "ShareDistributionComplete")
	if err != nil {
		return nil, err
	}
	return &ETHDKGPhasesShareDistributionCompleteIterator{contract: _ETHDKGPhases.contract, event: "ShareDistributionComplete", logs: logs, sub: sub}, nil
}

// WatchShareDistributionComplete is a free log subscription operation binding the contract event 0xbfe94ffef5ddde4d25ac7b652f3f67686ea63f9badbfe1f25451e26fc262d11c.
//
// Solidity: event ShareDistributionComplete(uint256 blockNumber)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) WatchShareDistributionComplete(opts *bind.WatchOpts, sink chan<- *ETHDKGPhasesShareDistributionComplete) (event.Subscription, error) {

	logs, sub, err := _ETHDKGPhases.contract.WatchLogs(opts, "ShareDistributionComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGPhasesShareDistributionComplete)
				if err := _ETHDKGPhases.contract.UnpackLog(event, "ShareDistributionComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseShareDistributionComplete is a log parse operation binding the contract event 0xbfe94ffef5ddde4d25ac7b652f3f67686ea63f9badbfe1f25451e26fc262d11c.
//
// Solidity: event ShareDistributionComplete(uint256 blockNumber)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) ParseShareDistributionComplete(log types.Log) (*ETHDKGPhasesShareDistributionComplete, error) {
	event := new(ETHDKGPhasesShareDistributionComplete)
	if err := _ETHDKGPhases.contract.UnpackLog(event, "ShareDistributionComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGPhasesSharesDistributedIterator is returned from FilterSharesDistributed and is used to iterate over the raw logs and unpacked data for SharesDistributed events raised by the ETHDKGPhases contract.
type ETHDKGPhasesSharesDistributedIterator struct {
	Event *ETHDKGPhasesSharesDistributed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGPhasesSharesDistributedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGPhasesSharesDistributed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGPhasesSharesDistributed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGPhasesSharesDistributedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGPhasesSharesDistributedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGPhasesSharesDistributed represents a SharesDistributed event raised by the ETHDKGPhases contract.
type ETHDKGPhasesSharesDistributed struct {
	Account         common.Address
	Index           *big.Int
	Nonce           *big.Int
	EncryptedShares []*big.Int
	Commitments     [][2]*big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterSharesDistributed is a free log retrieval operation binding the contract event 0xf0c8b0ef2867c2b4639b404a0296b6bbf0bf97e20856af42144a5a6035c0d0d2.
//
// Solidity: event SharesDistributed(address account, uint256 index, uint256 nonce, uint256[] encryptedShares, uint256[2][] commitments)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) FilterSharesDistributed(opts *bind.FilterOpts) (*ETHDKGPhasesSharesDistributedIterator, error) {

	logs, sub, err := _ETHDKGPhases.contract.FilterLogs(opts, "SharesDistributed")
	if err != nil {
		return nil, err
	}
	return &ETHDKGPhasesSharesDistributedIterator{contract: _ETHDKGPhases.contract, event: "SharesDistributed", logs: logs, sub: sub}, nil
}

// WatchSharesDistributed is a free log subscription operation binding the contract event 0xf0c8b0ef2867c2b4639b404a0296b6bbf0bf97e20856af42144a5a6035c0d0d2.
//
// Solidity: event SharesDistributed(address account, uint256 index, uint256 nonce, uint256[] encryptedShares, uint256[2][] commitments)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) WatchSharesDistributed(opts *bind.WatchOpts, sink chan<- *ETHDKGPhasesSharesDistributed) (event.Subscription, error) {

	logs, sub, err := _ETHDKGPhases.contract.WatchLogs(opts, "SharesDistributed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGPhasesSharesDistributed)
				if err := _ETHDKGPhases.contract.UnpackLog(event, "SharesDistributed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSharesDistributed is a log parse operation binding the contract event 0xf0c8b0ef2867c2b4639b404a0296b6bbf0bf97e20856af42144a5a6035c0d0d2.
//
// Solidity: event SharesDistributed(address account, uint256 index, uint256 nonce, uint256[] encryptedShares, uint256[2][] commitments)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) ParseSharesDistributed(log types.Log) (*ETHDKGPhasesSharesDistributed, error) {
	event := new(ETHDKGPhasesSharesDistributed)
	if err := _ETHDKGPhases.contract.UnpackLog(event, "SharesDistributed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGPhasesValidatorMemberAddedIterator is returned from FilterValidatorMemberAdded and is used to iterate over the raw logs and unpacked data for ValidatorMemberAdded events raised by the ETHDKGPhases contract.
type ETHDKGPhasesValidatorMemberAddedIterator struct {
	Event *ETHDKGPhasesValidatorMemberAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGPhasesValidatorMemberAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGPhasesValidatorMemberAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGPhasesValidatorMemberAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGPhasesValidatorMemberAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGPhasesValidatorMemberAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGPhasesValidatorMemberAdded represents a ValidatorMemberAdded event raised by the ETHDKGPhases contract.
type ETHDKGPhasesValidatorMemberAdded struct {
	Account common.Address
	Index   *big.Int
	Nonce   *big.Int
	Epoch   *big.Int
	Share0  *big.Int
	Share1  *big.Int
	Share2  *big.Int
	Share3  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterValidatorMemberAdded is a free log retrieval operation binding the contract event 0x09b90b08bbc3dbe22e9d2a0bc9c2c7614c7511cd0ad72177727a1e762115bf06.
//
// Solidity: event ValidatorMemberAdded(address account, uint256 index, uint256 nonce, uint256 epoch, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) FilterValidatorMemberAdded(opts *bind.FilterOpts) (*ETHDKGPhasesValidatorMemberAddedIterator, error) {

	logs, sub, err := _ETHDKGPhases.contract.FilterLogs(opts, "ValidatorMemberAdded")
	if err != nil {
		return nil, err
	}
	return &ETHDKGPhasesValidatorMemberAddedIterator{contract: _ETHDKGPhases.contract, event: "ValidatorMemberAdded", logs: logs, sub: sub}, nil
}

// WatchValidatorMemberAdded is a free log subscription operation binding the contract event 0x09b90b08bbc3dbe22e9d2a0bc9c2c7614c7511cd0ad72177727a1e762115bf06.
//
// Solidity: event ValidatorMemberAdded(address account, uint256 index, uint256 nonce, uint256 epoch, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) WatchValidatorMemberAdded(opts *bind.WatchOpts, sink chan<- *ETHDKGPhasesValidatorMemberAdded) (event.Subscription, error) {

	logs, sub, err := _ETHDKGPhases.contract.WatchLogs(opts, "ValidatorMemberAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGPhasesValidatorMemberAdded)
				if err := _ETHDKGPhases.contract.UnpackLog(event, "ValidatorMemberAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorMemberAdded is a log parse operation binding the contract event 0x09b90b08bbc3dbe22e9d2a0bc9c2c7614c7511cd0ad72177727a1e762115bf06.
//
// Solidity: event ValidatorMemberAdded(address account, uint256 index, uint256 nonce, uint256 epoch, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) ParseValidatorMemberAdded(log types.Log) (*ETHDKGPhasesValidatorMemberAdded, error) {
	event := new(ETHDKGPhasesValidatorMemberAdded)
	if err := _ETHDKGPhases.contract.UnpackLog(event, "ValidatorMemberAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGPhasesValidatorSetCompletedIterator is returned from FilterValidatorSetCompleted and is used to iterate over the raw logs and unpacked data for ValidatorSetCompleted events raised by the ETHDKGPhases contract.
type ETHDKGPhasesValidatorSetCompletedIterator struct {
	Event *ETHDKGPhasesValidatorSetCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGPhasesValidatorSetCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGPhasesValidatorSetCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGPhasesValidatorSetCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGPhasesValidatorSetCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGPhasesValidatorSetCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGPhasesValidatorSetCompleted represents a ValidatorSetCompleted event raised by the ETHDKGPhases contract.
type ETHDKGPhasesValidatorSetCompleted struct {
	ValidatorCount *big.Int
	Nonce          *big.Int
	Epoch          *big.Int
	EthHeight      *big.Int
	MadHeight      *big.Int
	GroupKey0      *big.Int
	GroupKey1      *big.Int
	GroupKey2      *big.Int
	GroupKey3      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterValidatorSetCompleted is a free log retrieval operation binding the contract event 0xd7237b781669fa700ecf77be6cd8fa0f4b98b1a24ac584a9b6b44c509216718a.
//
// Solidity: event ValidatorSetCompleted(uint256 validatorCount, uint256 nonce, uint256 epoch, uint256 ethHeight, uint256 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) FilterValidatorSetCompleted(opts *bind.FilterOpts) (*ETHDKGPhasesValidatorSetCompletedIterator, error) {

	logs, sub, err := _ETHDKGPhases.contract.FilterLogs(opts, "ValidatorSetCompleted")
	if err != nil {
		return nil, err
	}
	return &ETHDKGPhasesValidatorSetCompletedIterator{contract: _ETHDKGPhases.contract, event: "ValidatorSetCompleted", logs: logs, sub: sub}, nil
}

// WatchValidatorSetCompleted is a free log subscription operation binding the contract event 0xd7237b781669fa700ecf77be6cd8fa0f4b98b1a24ac584a9b6b44c509216718a.
//
// Solidity: event ValidatorSetCompleted(uint256 validatorCount, uint256 nonce, uint256 epoch, uint256 ethHeight, uint256 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) WatchValidatorSetCompleted(opts *bind.WatchOpts, sink chan<- *ETHDKGPhasesValidatorSetCompleted) (event.Subscription, error) {

	logs, sub, err := _ETHDKGPhases.contract.WatchLogs(opts, "ValidatorSetCompleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGPhasesValidatorSetCompleted)
				if err := _ETHDKGPhases.contract.UnpackLog(event, "ValidatorSetCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorSetCompleted is a log parse operation binding the contract event 0xd7237b781669fa700ecf77be6cd8fa0f4b98b1a24ac584a9b6b44c509216718a.
//
// Solidity: event ValidatorSetCompleted(uint256 validatorCount, uint256 nonce, uint256 epoch, uint256 ethHeight, uint256 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ETHDKGPhases *ETHDKGPhasesFilterer) ParseValidatorSetCompleted(log types.Log) (*ETHDKGPhasesValidatorSetCompleted, error) {
	event := new(ETHDKGPhasesValidatorSetCompleted)
	if err := _ETHDKGPhases.contract.UnpackLog(event, "ValidatorSetCompleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGStorageMetaData contains all meta data concerning the ETHDKGStorage contract.
var ETHDKGStorageMetaData = &bind.MetaData{
	ABI: "[]",
}

// ETHDKGStorageABI is the input ABI used to generate the binding from.
// Deprecated: Use ETHDKGStorageMetaData.ABI instead.
var ETHDKGStorageABI = ETHDKGStorageMetaData.ABI

// ETHDKGStorage is an auto generated Go binding around an Ethereum contract.
type ETHDKGStorage struct {
	ETHDKGStorageCaller     // Read-only binding to the contract
	ETHDKGStorageTransactor // Write-only binding to the contract
	ETHDKGStorageFilterer   // Log filterer for contract events
}

// ETHDKGStorageCaller is an auto generated read-only Go binding around an Ethereum contract.
type ETHDKGStorageCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGStorageTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ETHDKGStorageTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGStorageFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ETHDKGStorageFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGStorageSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ETHDKGStorageSession struct {
	Contract     *ETHDKGStorage    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ETHDKGStorageCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ETHDKGStorageCallerSession struct {
	Contract *ETHDKGStorageCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// ETHDKGStorageTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ETHDKGStorageTransactorSession struct {
	Contract     *ETHDKGStorageTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// ETHDKGStorageRaw is an auto generated low-level Go binding around an Ethereum contract.
type ETHDKGStorageRaw struct {
	Contract *ETHDKGStorage // Generic contract binding to access the raw methods on
}

// ETHDKGStorageCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ETHDKGStorageCallerRaw struct {
	Contract *ETHDKGStorageCaller // Generic read-only contract binding to access the raw methods on
}

// ETHDKGStorageTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ETHDKGStorageTransactorRaw struct {
	Contract *ETHDKGStorageTransactor // Generic write-only contract binding to access the raw methods on
}

// NewETHDKGStorage creates a new instance of ETHDKGStorage, bound to a specific deployed contract.
func NewETHDKGStorage(address common.Address, backend bind.ContractBackend) (*ETHDKGStorage, error) {
	contract, err := bindETHDKGStorage(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ETHDKGStorage{ETHDKGStorageCaller: ETHDKGStorageCaller{contract: contract}, ETHDKGStorageTransactor: ETHDKGStorageTransactor{contract: contract}, ETHDKGStorageFilterer: ETHDKGStorageFilterer{contract: contract}}, nil
}

// NewETHDKGStorageCaller creates a new read-only instance of ETHDKGStorage, bound to a specific deployed contract.
func NewETHDKGStorageCaller(address common.Address, caller bind.ContractCaller) (*ETHDKGStorageCaller, error) {
	contract, err := bindETHDKGStorage(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ETHDKGStorageCaller{contract: contract}, nil
}

// NewETHDKGStorageTransactor creates a new write-only instance of ETHDKGStorage, bound to a specific deployed contract.
func NewETHDKGStorageTransactor(address common.Address, transactor bind.ContractTransactor) (*ETHDKGStorageTransactor, error) {
	contract, err := bindETHDKGStorage(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ETHDKGStorageTransactor{contract: contract}, nil
}

// NewETHDKGStorageFilterer creates a new log filterer instance of ETHDKGStorage, bound to a specific deployed contract.
func NewETHDKGStorageFilterer(address common.Address, filterer bind.ContractFilterer) (*ETHDKGStorageFilterer, error) {
	contract, err := bindETHDKGStorage(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ETHDKGStorageFilterer{contract: contract}, nil
}

// bindETHDKGStorage binds a generic wrapper to an already deployed contract.
func bindETHDKGStorage(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ETHDKGStorageABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETHDKGStorage *ETHDKGStorageRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ETHDKGStorage.Contract.ETHDKGStorageCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETHDKGStorage *ETHDKGStorageRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKGStorage.Contract.ETHDKGStorageTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETHDKGStorage *ETHDKGStorageRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETHDKGStorage.Contract.ETHDKGStorageTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETHDKGStorage *ETHDKGStorageCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ETHDKGStorage.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETHDKGStorage *ETHDKGStorageTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKGStorage.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETHDKGStorage *ETHDKGStorageTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETHDKGStorage.Contract.contract.Transact(opts, method, params...)
}

// ETHDKGUtilsMetaData contains all meta data concerning the ETHDKGUtils contract.
var ETHDKGUtilsMetaData = &bind.MetaData{
	ABI: "[]",
}

// ETHDKGUtilsABI is the input ABI used to generate the binding from.
// Deprecated: Use ETHDKGUtilsMetaData.ABI instead.
var ETHDKGUtilsABI = ETHDKGUtilsMetaData.ABI

// ETHDKGUtils is an auto generated Go binding around an Ethereum contract.
type ETHDKGUtils struct {
	ETHDKGUtilsCaller     // Read-only binding to the contract
	ETHDKGUtilsTransactor // Write-only binding to the contract
	ETHDKGUtilsFilterer   // Log filterer for contract events
}

// ETHDKGUtilsCaller is an auto generated read-only Go binding around an Ethereum contract.
type ETHDKGUtilsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGUtilsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ETHDKGUtilsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGUtilsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ETHDKGUtilsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGUtilsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ETHDKGUtilsSession struct {
	Contract     *ETHDKGUtils      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ETHDKGUtilsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ETHDKGUtilsCallerSession struct {
	Contract *ETHDKGUtilsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// ETHDKGUtilsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ETHDKGUtilsTransactorSession struct {
	Contract     *ETHDKGUtilsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// ETHDKGUtilsRaw is an auto generated low-level Go binding around an Ethereum contract.
type ETHDKGUtilsRaw struct {
	Contract *ETHDKGUtils // Generic contract binding to access the raw methods on
}

// ETHDKGUtilsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ETHDKGUtilsCallerRaw struct {
	Contract *ETHDKGUtilsCaller // Generic read-only contract binding to access the raw methods on
}

// ETHDKGUtilsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ETHDKGUtilsTransactorRaw struct {
	Contract *ETHDKGUtilsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewETHDKGUtils creates a new instance of ETHDKGUtils, bound to a specific deployed contract.
func NewETHDKGUtils(address common.Address, backend bind.ContractBackend) (*ETHDKGUtils, error) {
	contract, err := bindETHDKGUtils(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ETHDKGUtils{ETHDKGUtilsCaller: ETHDKGUtilsCaller{contract: contract}, ETHDKGUtilsTransactor: ETHDKGUtilsTransactor{contract: contract}, ETHDKGUtilsFilterer: ETHDKGUtilsFilterer{contract: contract}}, nil
}

// NewETHDKGUtilsCaller creates a new read-only instance of ETHDKGUtils, bound to a specific deployed contract.
func NewETHDKGUtilsCaller(address common.Address, caller bind.ContractCaller) (*ETHDKGUtilsCaller, error) {
	contract, err := bindETHDKGUtils(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ETHDKGUtilsCaller{contract: contract}, nil
}

// NewETHDKGUtilsTransactor creates a new write-only instance of ETHDKGUtils, bound to a specific deployed contract.
func NewETHDKGUtilsTransactor(address common.Address, transactor bind.ContractTransactor) (*ETHDKGUtilsTransactor, error) {
	contract, err := bindETHDKGUtils(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ETHDKGUtilsTransactor{contract: contract}, nil
}

// NewETHDKGUtilsFilterer creates a new log filterer instance of ETHDKGUtils, bound to a specific deployed contract.
func NewETHDKGUtilsFilterer(address common.Address, filterer bind.ContractFilterer) (*ETHDKGUtilsFilterer, error) {
	contract, err := bindETHDKGUtils(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ETHDKGUtilsFilterer{contract: contract}, nil
}

// bindETHDKGUtils binds a generic wrapper to an already deployed contract.
func bindETHDKGUtils(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ETHDKGUtilsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETHDKGUtils *ETHDKGUtilsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ETHDKGUtils.Contract.ETHDKGUtilsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETHDKGUtils *ETHDKGUtilsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKGUtils.Contract.ETHDKGUtilsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETHDKGUtils *ETHDKGUtilsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETHDKGUtils.Contract.ETHDKGUtilsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETHDKGUtils *ETHDKGUtilsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ETHDKGUtils.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETHDKGUtils *ETHDKGUtilsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKGUtils.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETHDKGUtils *ETHDKGUtilsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETHDKGUtils.Contract.contract.Transact(opts, method, params...)
}

// EthDKGLibraryMetaData contains all meta data concerning the EthDKGLibrary contract.
var EthDKGLibraryMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"key_share_G1\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"key_share_G1_correctness_proof\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"key_share_G2\",\"type\":\"uint256[4]\"}],\"name\":\"KeyShareSubmission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dkgStarts\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"registrationEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shareDistributionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disputeEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"keyShareSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mpkSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gpkjSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gpkjDisputeEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dkgComplete\",\"type\":\"uint256\"}],\"name\":\"RegistrationOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"encrypted_shares\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"}],\"name\":\"ShareDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share3\",\"type\":\"uint256\"}],\"name\":\"ValidatorMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"validatorCount\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"ethHeight\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"madHeight\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey3\",\"type\":\"uint256\"}],\"name\":\"ValidatorSet\",\"type\":\"event\"}]",
<<<<<<< Updated upstream
	Bin: "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206d0fc51527abd2bab2456711d14423a8bbdf0b28531d02b8590eeaa1810e281f64736f6c634300080b0033",
=======
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201376a73015c119a69f49a5e0b3edf04c7be8b581a912aa8fc067effbc47471a764736f6c634300080b0033",
>>>>>>> Stashed changes
}

// EthDKGLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use EthDKGLibraryMetaData.ABI instead.
var EthDKGLibraryABI = EthDKGLibraryMetaData.ABI

// EthDKGLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use EthDKGLibraryMetaData.Bin instead.
var EthDKGLibraryBin = EthDKGLibraryMetaData.Bin

// DeployEthDKGLibrary deploys a new Ethereum contract, binding an instance of EthDKGLibrary to it.
func DeployEthDKGLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *EthDKGLibrary, error) {
	parsed, err := EthDKGLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(EthDKGLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &EthDKGLibrary{EthDKGLibraryCaller: EthDKGLibraryCaller{contract: contract}, EthDKGLibraryTransactor: EthDKGLibraryTransactor{contract: contract}, EthDKGLibraryFilterer: EthDKGLibraryFilterer{contract: contract}}, nil
}

// EthDKGLibrary is an auto generated Go binding around an Ethereum contract.
type EthDKGLibrary struct {
	EthDKGLibraryCaller     // Read-only binding to the contract
	EthDKGLibraryTransactor // Write-only binding to the contract
	EthDKGLibraryFilterer   // Log filterer for contract events
}

// EthDKGLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type EthDKGLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthDKGLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type EthDKGLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthDKGLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type EthDKGLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthDKGLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type EthDKGLibrarySession struct {
	Contract     *EthDKGLibrary    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// EthDKGLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type EthDKGLibraryCallerSession struct {
	Contract *EthDKGLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// EthDKGLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type EthDKGLibraryTransactorSession struct {
	Contract     *EthDKGLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// EthDKGLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type EthDKGLibraryRaw struct {
	Contract *EthDKGLibrary // Generic contract binding to access the raw methods on
}

// EthDKGLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type EthDKGLibraryCallerRaw struct {
	Contract *EthDKGLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// EthDKGLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type EthDKGLibraryTransactorRaw struct {
	Contract *EthDKGLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewEthDKGLibrary creates a new instance of EthDKGLibrary, bound to a specific deployed contract.
func NewEthDKGLibrary(address common.Address, backend bind.ContractBackend) (*EthDKGLibrary, error) {
	contract, err := bindEthDKGLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &EthDKGLibrary{EthDKGLibraryCaller: EthDKGLibraryCaller{contract: contract}, EthDKGLibraryTransactor: EthDKGLibraryTransactor{contract: contract}, EthDKGLibraryFilterer: EthDKGLibraryFilterer{contract: contract}}, nil
}

// NewEthDKGLibraryCaller creates a new read-only instance of EthDKGLibrary, bound to a specific deployed contract.
func NewEthDKGLibraryCaller(address common.Address, caller bind.ContractCaller) (*EthDKGLibraryCaller, error) {
	contract, err := bindEthDKGLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &EthDKGLibraryCaller{contract: contract}, nil
}

// NewEthDKGLibraryTransactor creates a new write-only instance of EthDKGLibrary, bound to a specific deployed contract.
func NewEthDKGLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*EthDKGLibraryTransactor, error) {
	contract, err := bindEthDKGLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &EthDKGLibraryTransactor{contract: contract}, nil
}

// NewEthDKGLibraryFilterer creates a new log filterer instance of EthDKGLibrary, bound to a specific deployed contract.
func NewEthDKGLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*EthDKGLibraryFilterer, error) {
	contract, err := bindEthDKGLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &EthDKGLibraryFilterer{contract: contract}, nil
}

// bindEthDKGLibrary binds a generic wrapper to an already deployed contract.
func bindEthDKGLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(EthDKGLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EthDKGLibrary *EthDKGLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EthDKGLibrary.Contract.EthDKGLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EthDKGLibrary *EthDKGLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EthDKGLibrary.Contract.EthDKGLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EthDKGLibrary *EthDKGLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EthDKGLibrary.Contract.EthDKGLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EthDKGLibrary *EthDKGLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EthDKGLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EthDKGLibrary *EthDKGLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EthDKGLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EthDKGLibrary *EthDKGLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EthDKGLibrary.Contract.contract.Transact(opts, method, params...)
}

// EthDKGLibraryKeyShareSubmissionIterator is returned from FilterKeyShareSubmission and is used to iterate over the raw logs and unpacked data for KeyShareSubmission events raised by the EthDKGLibrary contract.
type EthDKGLibraryKeyShareSubmissionIterator struct {
	Event *EthDKGLibraryKeyShareSubmission // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthDKGLibraryKeyShareSubmissionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthDKGLibraryKeyShareSubmission)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthDKGLibraryKeyShareSubmission)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthDKGLibraryKeyShareSubmissionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthDKGLibraryKeyShareSubmissionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthDKGLibraryKeyShareSubmission represents a KeyShareSubmission event raised by the EthDKGLibrary contract.
type EthDKGLibraryKeyShareSubmission struct {
	Issuer                     common.Address
	KeyShareG1                 [2]*big.Int
	KeyShareG1CorrectnessProof [2]*big.Int
	KeyShareG2                 [4]*big.Int
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterKeyShareSubmission is a free log retrieval operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_EthDKGLibrary *EthDKGLibraryFilterer) FilterKeyShareSubmission(opts *bind.FilterOpts) (*EthDKGLibraryKeyShareSubmissionIterator, error) {

	logs, sub, err := _EthDKGLibrary.contract.FilterLogs(opts, "KeyShareSubmission")
	if err != nil {
		return nil, err
	}
	return &EthDKGLibraryKeyShareSubmissionIterator{contract: _EthDKGLibrary.contract, event: "KeyShareSubmission", logs: logs, sub: sub}, nil
}

// WatchKeyShareSubmission is a free log subscription operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_EthDKGLibrary *EthDKGLibraryFilterer) WatchKeyShareSubmission(opts *bind.WatchOpts, sink chan<- *EthDKGLibraryKeyShareSubmission) (event.Subscription, error) {

	logs, sub, err := _EthDKGLibrary.contract.WatchLogs(opts, "KeyShareSubmission")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthDKGLibraryKeyShareSubmission)
				if err := _EthDKGLibrary.contract.UnpackLog(event, "KeyShareSubmission", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyShareSubmission is a log parse operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_EthDKGLibrary *EthDKGLibraryFilterer) ParseKeyShareSubmission(log types.Log) (*EthDKGLibraryKeyShareSubmission, error) {
	event := new(EthDKGLibraryKeyShareSubmission)
	if err := _EthDKGLibrary.contract.UnpackLog(event, "KeyShareSubmission", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EthDKGLibraryRegistrationOpenIterator is returned from FilterRegistrationOpen and is used to iterate over the raw logs and unpacked data for RegistrationOpen events raised by the EthDKGLibrary contract.
type EthDKGLibraryRegistrationOpenIterator struct {
	Event *EthDKGLibraryRegistrationOpen // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthDKGLibraryRegistrationOpenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthDKGLibraryRegistrationOpen)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthDKGLibraryRegistrationOpen)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthDKGLibraryRegistrationOpenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthDKGLibraryRegistrationOpenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthDKGLibraryRegistrationOpen represents a RegistrationOpen event raised by the EthDKGLibrary contract.
type EthDKGLibraryRegistrationOpen struct {
	DkgStarts              *big.Int
	RegistrationEnds       *big.Int
	ShareDistributionEnds  *big.Int
	DisputeEnds            *big.Int
	KeyShareSubmissionEnds *big.Int
	MpkSubmissionEnds      *big.Int
	GpkjSubmissionEnds     *big.Int
	GpkjDisputeEnds        *big.Int
	DkgComplete            *big.Int
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterRegistrationOpen is a free log retrieval operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_EthDKGLibrary *EthDKGLibraryFilterer) FilterRegistrationOpen(opts *bind.FilterOpts) (*EthDKGLibraryRegistrationOpenIterator, error) {

	logs, sub, err := _EthDKGLibrary.contract.FilterLogs(opts, "RegistrationOpen")
	if err != nil {
		return nil, err
	}
	return &EthDKGLibraryRegistrationOpenIterator{contract: _EthDKGLibrary.contract, event: "RegistrationOpen", logs: logs, sub: sub}, nil
}

// WatchRegistrationOpen is a free log subscription operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_EthDKGLibrary *EthDKGLibraryFilterer) WatchRegistrationOpen(opts *bind.WatchOpts, sink chan<- *EthDKGLibraryRegistrationOpen) (event.Subscription, error) {

	logs, sub, err := _EthDKGLibrary.contract.WatchLogs(opts, "RegistrationOpen")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthDKGLibraryRegistrationOpen)
				if err := _EthDKGLibrary.contract.UnpackLog(event, "RegistrationOpen", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistrationOpen is a log parse operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_EthDKGLibrary *EthDKGLibraryFilterer) ParseRegistrationOpen(log types.Log) (*EthDKGLibraryRegistrationOpen, error) {
	event := new(EthDKGLibraryRegistrationOpen)
	if err := _EthDKGLibrary.contract.UnpackLog(event, "RegistrationOpen", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EthDKGLibraryShareDistributionIterator is returned from FilterShareDistribution and is used to iterate over the raw logs and unpacked data for ShareDistribution events raised by the EthDKGLibrary contract.
type EthDKGLibraryShareDistributionIterator struct {
	Event *EthDKGLibraryShareDistribution // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthDKGLibraryShareDistributionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthDKGLibraryShareDistribution)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthDKGLibraryShareDistribution)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthDKGLibraryShareDistributionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthDKGLibraryShareDistributionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthDKGLibraryShareDistribution represents a ShareDistribution event raised by the EthDKGLibrary contract.
type EthDKGLibraryShareDistribution struct {
	Issuer          common.Address
	Index           *big.Int
	EncryptedShares []*big.Int
	Commitments     [][2]*big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterShareDistribution is a free log retrieval operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_EthDKGLibrary *EthDKGLibraryFilterer) FilterShareDistribution(opts *bind.FilterOpts) (*EthDKGLibraryShareDistributionIterator, error) {

	logs, sub, err := _EthDKGLibrary.contract.FilterLogs(opts, "ShareDistribution")
	if err != nil {
		return nil, err
	}
	return &EthDKGLibraryShareDistributionIterator{contract: _EthDKGLibrary.contract, event: "ShareDistribution", logs: logs, sub: sub}, nil
}

// WatchShareDistribution is a free log subscription operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_EthDKGLibrary *EthDKGLibraryFilterer) WatchShareDistribution(opts *bind.WatchOpts, sink chan<- *EthDKGLibraryShareDistribution) (event.Subscription, error) {

	logs, sub, err := _EthDKGLibrary.contract.WatchLogs(opts, "ShareDistribution")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthDKGLibraryShareDistribution)
				if err := _EthDKGLibrary.contract.UnpackLog(event, "ShareDistribution", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseShareDistribution is a log parse operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_EthDKGLibrary *EthDKGLibraryFilterer) ParseShareDistribution(log types.Log) (*EthDKGLibraryShareDistribution, error) {
	event := new(EthDKGLibraryShareDistribution)
	if err := _EthDKGLibrary.contract.UnpackLog(event, "ShareDistribution", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EthDKGLibraryValidatorMemberIterator is returned from FilterValidatorMember and is used to iterate over the raw logs and unpacked data for ValidatorMember events raised by the EthDKGLibrary contract.
type EthDKGLibraryValidatorMemberIterator struct {
	Event *EthDKGLibraryValidatorMember // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthDKGLibraryValidatorMemberIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthDKGLibraryValidatorMember)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthDKGLibraryValidatorMember)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthDKGLibraryValidatorMemberIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthDKGLibraryValidatorMemberIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthDKGLibraryValidatorMember represents a ValidatorMember event raised by the EthDKGLibrary contract.
type EthDKGLibraryValidatorMember struct {
	Account common.Address
	Epoch   *big.Int
	Index   *big.Int
	Share0  *big.Int
	Share1  *big.Int
	Share2  *big.Int
	Share3  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterValidatorMember is a free log retrieval operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_EthDKGLibrary *EthDKGLibraryFilterer) FilterValidatorMember(opts *bind.FilterOpts) (*EthDKGLibraryValidatorMemberIterator, error) {

	logs, sub, err := _EthDKGLibrary.contract.FilterLogs(opts, "ValidatorMember")
	if err != nil {
		return nil, err
	}
	return &EthDKGLibraryValidatorMemberIterator{contract: _EthDKGLibrary.contract, event: "ValidatorMember", logs: logs, sub: sub}, nil
}

// WatchValidatorMember is a free log subscription operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_EthDKGLibrary *EthDKGLibraryFilterer) WatchValidatorMember(opts *bind.WatchOpts, sink chan<- *EthDKGLibraryValidatorMember) (event.Subscription, error) {

	logs, sub, err := _EthDKGLibrary.contract.WatchLogs(opts, "ValidatorMember")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthDKGLibraryValidatorMember)
				if err := _EthDKGLibrary.contract.UnpackLog(event, "ValidatorMember", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorMember is a log parse operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_EthDKGLibrary *EthDKGLibraryFilterer) ParseValidatorMember(log types.Log) (*EthDKGLibraryValidatorMember, error) {
	event := new(EthDKGLibraryValidatorMember)
	if err := _EthDKGLibrary.contract.UnpackLog(event, "ValidatorMember", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EthDKGLibraryValidatorSetIterator is returned from FilterValidatorSet and is used to iterate over the raw logs and unpacked data for ValidatorSet events raised by the EthDKGLibrary contract.
type EthDKGLibraryValidatorSetIterator struct {
	Event *EthDKGLibraryValidatorSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthDKGLibraryValidatorSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthDKGLibraryValidatorSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthDKGLibraryValidatorSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthDKGLibraryValidatorSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthDKGLibraryValidatorSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthDKGLibraryValidatorSet represents a ValidatorSet event raised by the EthDKGLibrary contract.
type EthDKGLibraryValidatorSet struct {
	ValidatorCount uint8
	Epoch          *big.Int
	EthHeight      uint32
	MadHeight      uint32
	GroupKey0      *big.Int
	GroupKey1      *big.Int
	GroupKey2      *big.Int
	GroupKey3      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterValidatorSet is a free log retrieval operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_EthDKGLibrary *EthDKGLibraryFilterer) FilterValidatorSet(opts *bind.FilterOpts) (*EthDKGLibraryValidatorSetIterator, error) {

	logs, sub, err := _EthDKGLibrary.contract.FilterLogs(opts, "ValidatorSet")
	if err != nil {
		return nil, err
	}
	return &EthDKGLibraryValidatorSetIterator{contract: _EthDKGLibrary.contract, event: "ValidatorSet", logs: logs, sub: sub}, nil
}

// WatchValidatorSet is a free log subscription operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_EthDKGLibrary *EthDKGLibraryFilterer) WatchValidatorSet(opts *bind.WatchOpts, sink chan<- *EthDKGLibraryValidatorSet) (event.Subscription, error) {

	logs, sub, err := _EthDKGLibrary.contract.WatchLogs(opts, "ValidatorSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthDKGLibraryValidatorSet)
				if err := _EthDKGLibrary.contract.UnpackLog(event, "ValidatorSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorSet is a log parse operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_EthDKGLibrary *EthDKGLibraryFilterer) ParseValidatorSet(log types.Log) (*EthDKGLibraryValidatorSet, error) {
	event := new(EthDKGLibraryValidatorSet)
	if err := _EthDKGLibrary.contract.UnpackLog(event, "ValidatorSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GovernorMetaData contains all meta data concerning the Governor contract.
var GovernorMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"ValueUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"updateValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// GovernorABI is the input ABI used to generate the binding from.
// Deprecated: Use GovernorMetaData.ABI instead.
var GovernorABI = GovernorMetaData.ABI

// Governor is an auto generated Go binding around an Ethereum contract.
type Governor struct {
	GovernorCaller     // Read-only binding to the contract
	GovernorTransactor // Write-only binding to the contract
	GovernorFilterer   // Log filterer for contract events
}

// GovernorCaller is an auto generated read-only Go binding around an Ethereum contract.
type GovernorCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernorTransactor is an auto generated write-only Go binding around an Ethereum contract.
type GovernorTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernorFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type GovernorFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernorSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type GovernorSession struct {
	Contract     *Governor         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// GovernorCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type GovernorCallerSession struct {
	Contract *GovernorCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// GovernorTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type GovernorTransactorSession struct {
	Contract     *GovernorTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// GovernorRaw is an auto generated low-level Go binding around an Ethereum contract.
type GovernorRaw struct {
	Contract *Governor // Generic contract binding to access the raw methods on
}

// GovernorCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type GovernorCallerRaw struct {
	Contract *GovernorCaller // Generic read-only contract binding to access the raw methods on
}

// GovernorTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type GovernorTransactorRaw struct {
	Contract *GovernorTransactor // Generic write-only contract binding to access the raw methods on
}

// NewGovernor creates a new instance of Governor, bound to a specific deployed contract.
func NewGovernor(address common.Address, backend bind.ContractBackend) (*Governor, error) {
	contract, err := bindGovernor(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Governor{GovernorCaller: GovernorCaller{contract: contract}, GovernorTransactor: GovernorTransactor{contract: contract}, GovernorFilterer: GovernorFilterer{contract: contract}}, nil
}

// NewGovernorCaller creates a new read-only instance of Governor, bound to a specific deployed contract.
func NewGovernorCaller(address common.Address, caller bind.ContractCaller) (*GovernorCaller, error) {
	contract, err := bindGovernor(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &GovernorCaller{contract: contract}, nil
}

// NewGovernorTransactor creates a new write-only instance of Governor, bound to a specific deployed contract.
func NewGovernorTransactor(address common.Address, transactor bind.ContractTransactor) (*GovernorTransactor, error) {
	contract, err := bindGovernor(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &GovernorTransactor{contract: contract}, nil
}

// NewGovernorFilterer creates a new log filterer instance of Governor, bound to a specific deployed contract.
func NewGovernorFilterer(address common.Address, filterer bind.ContractFilterer) (*GovernorFilterer, error) {
	contract, err := bindGovernor(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &GovernorFilterer{contract: contract}, nil
}

// bindGovernor binds a generic wrapper to an already deployed contract.
func bindGovernor(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(GovernorABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Governor *GovernorRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Governor.Contract.GovernorCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Governor *GovernorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Governor.Contract.GovernorTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Governor *GovernorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Governor.Contract.GovernorTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Governor *GovernorCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Governor.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Governor *GovernorTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Governor.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Governor *GovernorTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Governor.Contract.contract.Transact(opts, method, params...)
}

// UpdateValue is a paid mutator transaction binding the contract method 0x46512486.
//
// Solidity: function updateValue(uint256 epoch, uint256 key, bytes32 value) returns()
func (_Governor *GovernorTransactor) UpdateValue(opts *bind.TransactOpts, epoch *big.Int, key *big.Int, value [32]byte) (*types.Transaction, error) {
	return _Governor.contract.Transact(opts, "updateValue", epoch, key, value)
}

// UpdateValue is a paid mutator transaction binding the contract method 0x46512486.
//
// Solidity: function updateValue(uint256 epoch, uint256 key, bytes32 value) returns()
func (_Governor *GovernorSession) UpdateValue(epoch *big.Int, key *big.Int, value [32]byte) (*types.Transaction, error) {
	return _Governor.Contract.UpdateValue(&_Governor.TransactOpts, epoch, key, value)
}

// UpdateValue is a paid mutator transaction binding the contract method 0x46512486.
//
// Solidity: function updateValue(uint256 epoch, uint256 key, bytes32 value) returns()
func (_Governor *GovernorTransactorSession) UpdateValue(epoch *big.Int, key *big.Int, value [32]byte) (*types.Transaction, error) {
	return _Governor.Contract.UpdateValue(&_Governor.TransactOpts, epoch, key, value)
}

// GovernorValueUpdatedIterator is returned from FilterValueUpdated and is used to iterate over the raw logs and unpacked data for ValueUpdated events raised by the Governor contract.
type GovernorValueUpdatedIterator struct {
	Event *GovernorValueUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GovernorValueUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GovernorValueUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GovernorValueUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GovernorValueUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GovernorValueUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GovernorValueUpdated represents a ValueUpdated event raised by the Governor contract.
type GovernorValueUpdated struct {
	Epoch *big.Int
	Key   *big.Int
	Value [32]byte
	Who   common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterValueUpdated is a free log retrieval operation binding the contract event 0x36dcd0e03525dedd9d5c21a263ef5f35d030298b5c48f1a713006aefc064ad05.
//
// Solidity: event ValueUpdated(uint256 indexed epoch, uint256 indexed key, bytes32 indexed value, address who)
func (_Governor *GovernorFilterer) FilterValueUpdated(opts *bind.FilterOpts, epoch []*big.Int, key []*big.Int, value [][32]byte) (*GovernorValueUpdatedIterator, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}
	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}
	var valueRule []interface{}
	for _, valueItem := range value {
		valueRule = append(valueRule, valueItem)
	}

	logs, sub, err := _Governor.contract.FilterLogs(opts, "ValueUpdated", epochRule, keyRule, valueRule)
	if err != nil {
		return nil, err
	}
	return &GovernorValueUpdatedIterator{contract: _Governor.contract, event: "ValueUpdated", logs: logs, sub: sub}, nil
}

// WatchValueUpdated is a free log subscription operation binding the contract event 0x36dcd0e03525dedd9d5c21a263ef5f35d030298b5c48f1a713006aefc064ad05.
//
// Solidity: event ValueUpdated(uint256 indexed epoch, uint256 indexed key, bytes32 indexed value, address who)
func (_Governor *GovernorFilterer) WatchValueUpdated(opts *bind.WatchOpts, sink chan<- *GovernorValueUpdated, epoch []*big.Int, key []*big.Int, value [][32]byte) (event.Subscription, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}
	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}
	var valueRule []interface{}
	for _, valueItem := range value {
		valueRule = append(valueRule, valueItem)
	}

	logs, sub, err := _Governor.contract.WatchLogs(opts, "ValueUpdated", epochRule, keyRule, valueRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GovernorValueUpdated)
				if err := _Governor.contract.UnpackLog(event, "ValueUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValueUpdated is a log parse operation binding the contract event 0x36dcd0e03525dedd9d5c21a263ef5f35d030298b5c48f1a713006aefc064ad05.
//
// Solidity: event ValueUpdated(uint256 indexed epoch, uint256 indexed key, bytes32 indexed value, address who)
func (_Governor *GovernorFilterer) ParseValueUpdated(log types.Log) (*GovernorValueUpdated, error) {
	event := new(GovernorValueUpdated)
	if err := _Governor.contract.UnpackLog(event, "ValueUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GovernorEventsMetaData contains all meta data concerning the GovernorEvents contract.
var GovernorEventsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"ValueUpdated\",\"type\":\"event\"}]",
}

// GovernorEventsABI is the input ABI used to generate the binding from.
// Deprecated: Use GovernorEventsMetaData.ABI instead.
var GovernorEventsABI = GovernorEventsMetaData.ABI

// GovernorEvents is an auto generated Go binding around an Ethereum contract.
type GovernorEvents struct {
	GovernorEventsCaller     // Read-only binding to the contract
	GovernorEventsTransactor // Write-only binding to the contract
	GovernorEventsFilterer   // Log filterer for contract events
}

// GovernorEventsCaller is an auto generated read-only Go binding around an Ethereum contract.
type GovernorEventsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernorEventsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type GovernorEventsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernorEventsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type GovernorEventsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernorEventsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type GovernorEventsSession struct {
	Contract     *GovernorEvents   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// GovernorEventsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type GovernorEventsCallerSession struct {
	Contract *GovernorEventsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// GovernorEventsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type GovernorEventsTransactorSession struct {
	Contract     *GovernorEventsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// GovernorEventsRaw is an auto generated low-level Go binding around an Ethereum contract.
type GovernorEventsRaw struct {
	Contract *GovernorEvents // Generic contract binding to access the raw methods on
}

// GovernorEventsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type GovernorEventsCallerRaw struct {
	Contract *GovernorEventsCaller // Generic read-only contract binding to access the raw methods on
}

// GovernorEventsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type GovernorEventsTransactorRaw struct {
	Contract *GovernorEventsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewGovernorEvents creates a new instance of GovernorEvents, bound to a specific deployed contract.
func NewGovernorEvents(address common.Address, backend bind.ContractBackend) (*GovernorEvents, error) {
	contract, err := bindGovernorEvents(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &GovernorEvents{GovernorEventsCaller: GovernorEventsCaller{contract: contract}, GovernorEventsTransactor: GovernorEventsTransactor{contract: contract}, GovernorEventsFilterer: GovernorEventsFilterer{contract: contract}}, nil
}

// NewGovernorEventsCaller creates a new read-only instance of GovernorEvents, bound to a specific deployed contract.
func NewGovernorEventsCaller(address common.Address, caller bind.ContractCaller) (*GovernorEventsCaller, error) {
	contract, err := bindGovernorEvents(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &GovernorEventsCaller{contract: contract}, nil
}

// NewGovernorEventsTransactor creates a new write-only instance of GovernorEvents, bound to a specific deployed contract.
func NewGovernorEventsTransactor(address common.Address, transactor bind.ContractTransactor) (*GovernorEventsTransactor, error) {
	contract, err := bindGovernorEvents(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &GovernorEventsTransactor{contract: contract}, nil
}

// NewGovernorEventsFilterer creates a new log filterer instance of GovernorEvents, bound to a specific deployed contract.
func NewGovernorEventsFilterer(address common.Address, filterer bind.ContractFilterer) (*GovernorEventsFilterer, error) {
	contract, err := bindGovernorEvents(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &GovernorEventsFilterer{contract: contract}, nil
}

// bindGovernorEvents binds a generic wrapper to an already deployed contract.
func bindGovernorEvents(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(GovernorEventsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GovernorEvents *GovernorEventsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _GovernorEvents.Contract.GovernorEventsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GovernorEvents *GovernorEventsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GovernorEvents.Contract.GovernorEventsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GovernorEvents *GovernorEventsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GovernorEvents.Contract.GovernorEventsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GovernorEvents *GovernorEventsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _GovernorEvents.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GovernorEvents *GovernorEventsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GovernorEvents.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GovernorEvents *GovernorEventsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GovernorEvents.Contract.contract.Transact(opts, method, params...)
}

// GovernorEventsValueUpdatedIterator is returned from FilterValueUpdated and is used to iterate over the raw logs and unpacked data for ValueUpdated events raised by the GovernorEvents contract.
type GovernorEventsValueUpdatedIterator struct {
	Event *GovernorEventsValueUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GovernorEventsValueUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GovernorEventsValueUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GovernorEventsValueUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GovernorEventsValueUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GovernorEventsValueUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GovernorEventsValueUpdated represents a ValueUpdated event raised by the GovernorEvents contract.
type GovernorEventsValueUpdated struct {
	Epoch *big.Int
	Key   *big.Int
	Value [32]byte
	Who   common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterValueUpdated is a free log retrieval operation binding the contract event 0x36dcd0e03525dedd9d5c21a263ef5f35d030298b5c48f1a713006aefc064ad05.
//
// Solidity: event ValueUpdated(uint256 indexed epoch, uint256 indexed key, bytes32 indexed value, address who)
func (_GovernorEvents *GovernorEventsFilterer) FilterValueUpdated(opts *bind.FilterOpts, epoch []*big.Int, key []*big.Int, value [][32]byte) (*GovernorEventsValueUpdatedIterator, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}
	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}
	var valueRule []interface{}
	for _, valueItem := range value {
		valueRule = append(valueRule, valueItem)
	}

	logs, sub, err := _GovernorEvents.contract.FilterLogs(opts, "ValueUpdated", epochRule, keyRule, valueRule)
	if err != nil {
		return nil, err
	}
	return &GovernorEventsValueUpdatedIterator{contract: _GovernorEvents.contract, event: "ValueUpdated", logs: logs, sub: sub}, nil
}

// WatchValueUpdated is a free log subscription operation binding the contract event 0x36dcd0e03525dedd9d5c21a263ef5f35d030298b5c48f1a713006aefc064ad05.
//
// Solidity: event ValueUpdated(uint256 indexed epoch, uint256 indexed key, bytes32 indexed value, address who)
func (_GovernorEvents *GovernorEventsFilterer) WatchValueUpdated(opts *bind.WatchOpts, sink chan<- *GovernorEventsValueUpdated, epoch []*big.Int, key []*big.Int, value [][32]byte) (event.Subscription, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}
	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}
	var valueRule []interface{}
	for _, valueItem := range value {
		valueRule = append(valueRule, valueItem)
	}

	logs, sub, err := _GovernorEvents.contract.WatchLogs(opts, "ValueUpdated", epochRule, keyRule, valueRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GovernorEventsValueUpdated)
				if err := _GovernorEvents.contract.UnpackLog(event, "ValueUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValueUpdated is a log parse operation binding the contract event 0x36dcd0e03525dedd9d5c21a263ef5f35d030298b5c48f1a713006aefc064ad05.
//
// Solidity: event ValueUpdated(uint256 indexed epoch, uint256 indexed key, bytes32 indexed value, address who)
func (_GovernorEvents *GovernorEventsFilterer) ParseValueUpdated(log types.Log) (*GovernorEventsValueUpdated, error) {
	event := new(GovernorEventsValueUpdated)
	if err := _GovernorEvents.contract.UnpackLog(event, "ValueUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IETHDKGMetaData contains all meta data concerning the IETHDKG contract.
var IETHDKGMetaData = &bind.MetaData{
<<<<<<< Updated upstream
	ABI: "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dishonestAddresses\",\"type\":\"address[]\"}],\"name\":\"accuseParticipantDidNotDistributeShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dishonestAddresses\",\"type\":\"address[]\"}],\"name\":\"accuseParticipantDidNotSubmitGPKJ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dishonestAddresses\",\"type\":\"address[]\"}],\"name\":\"accuseParticipantDidNotSubmitKeyShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dishonestAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"encryptedShares\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"},{\"internalType\":\"uint256[2]\",\"name\":\"sharedKey\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"sharedKeyCorrectnessProof\",\"type\":\"uint256[2]\"}],\"name\":\"accuseParticipantDistributedBadShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dishonestAddresses\",\"type\":\"address[]\"}],\"name\":\"accuseParticipantNotRegistered\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"encryptedSharesHash\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[2][][]\",\"name\":\"commitments\",\"type\":\"uint256[2][][]\"},{\"internalType\":\"address\",\"name\":\"dishonestAddress\",\"type\":\"address\"}],\"name\":\"accuseParticipantSubmittedBadGPKJ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"complete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"encryptedShares\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"}],\"name\":\"distributeShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBadParticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfirmationLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getETHDKGPhase\",\"outputs\":[{\"internalType\":\"enumPhase\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMasterPublicKey\",\"outputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"\",\"type\":\"uint256[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinValidators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumParticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"getParticipantInternalState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"publicKey\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"enumPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"distributedSharesHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[2]\",\"name\":\"commitmentsFirstCoefficient\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"keyShares\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"gpkj\",\"type\":\"uint256[4]\"}],\"internalType\":\"structParticipant\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPhaseLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPhaseStartBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeETHDKG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAccusationWindowOver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMasterPublicKeySet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"publicKey\",\"type\":\"uint256[2]\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"confirmationLength_\",\"type\":\"uint16\"}],\"name\":\"setConfirmationLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"minValidators_\",\"type\":\"uint16\"}],\"name\":\"setMinNumberOfValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"phaseLength_\",\"type\":\"uint16\"}],\"name\":\"setPhaseLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validatorPool\",\"type\":\"address\"}],\"name\":\"setValidatorPoolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"gpkj\",\"type\":\"uint256[4]\"}],\"name\":\"submitGPKj\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1CorrectnessProof\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"keyShareG2\",\"type\":\"uint256[4]\"}],\"name\":\"submitKeyShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"masterPublicKey_\",\"type\":\"uint256[4]\"}],\"name\":\"submitMasterPublicKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
=======
	ABI: "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dishonestAddresses\",\"type\":\"address[]\"}],\"name\":\"accuseParticipantDidNotDistributeShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dishonestAddresses\",\"type\":\"address[]\"}],\"name\":\"accuseParticipantDidNotSubmitGPKJ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dishonestAddresses\",\"type\":\"address[]\"}],\"name\":\"accuseParticipantDidNotSubmitKeyShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dishonestAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"encryptedShares\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"},{\"internalType\":\"uint256[2]\",\"name\":\"sharedKey\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"sharedKeyCorrectnessProof\",\"type\":\"uint256[2]\"}],\"name\":\"accuseParticipantDistributedBadShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dishonestAddresses\",\"type\":\"address[]\"}],\"name\":\"accuseParticipantNotRegistered\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"encryptedSharesHash\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[2][][]\",\"name\":\"commitments\",\"type\":\"uint256[2][][]\"},{\"internalType\":\"address\",\"name\":\"dishonestAddress\",\"type\":\"address\"}],\"name\":\"accuseParticipantSubmittedBadGPKJ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"complete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"encryptedShares\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"}],\"name\":\"distributeShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBadParticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfirmationLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getETHDKGPhase\",\"outputs\":[{\"internalType\":\"enumPhase\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMasterPublicKey\",\"outputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"\",\"type\":\"uint256[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinValidators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumParticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"getParticipantInternalState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"publicKey\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"enumPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"distributedSharesHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[2]\",\"name\":\"commitmentsFirstCoefficient\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"keyShares\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"gpkj\",\"type\":\"uint256[4]\"}],\"internalType\":\"structParticipant\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPhaseLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPhaseStartBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeETHDKG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAccusationWindowOver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMasterPublicKeySet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"publicKey\",\"type\":\"uint256[2]\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"confirmationLength_\",\"type\":\"uint16\"}],\"name\":\"setConfirmationLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"minValidators_\",\"type\":\"uint16\"}],\"name\":\"setMinNumberOfValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"phaseLength_\",\"type\":\"uint16\"}],\"name\":\"setPhaseLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validatorPool\",\"type\":\"address\"}],\"name\":\"setValidatorPoolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"gpkj\",\"type\":\"uint256[4]\"}],\"name\":\"submitGPKJ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1CorrectnessProof\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"keyShareG2\",\"type\":\"uint256[4]\"}],\"name\":\"submitKeyShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"masterPublicKey_\",\"type\":\"uint256[4]\"}],\"name\":\"submitMasterPublicKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
>>>>>>> Stashed changes
}

// IETHDKGABI is the input ABI used to generate the binding from.
// Deprecated: Use IETHDKGMetaData.ABI instead.
var IETHDKGABI = IETHDKGMetaData.ABI

// IETHDKG is an auto generated Go binding around an Ethereum contract.
type IETHDKG struct {
	IETHDKGCaller     // Read-only binding to the contract
	IETHDKGTransactor // Write-only binding to the contract
	IETHDKGFilterer   // Log filterer for contract events
}

// IETHDKGCaller is an auto generated read-only Go binding around an Ethereum contract.
type IETHDKGCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IETHDKGTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IETHDKGTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IETHDKGFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IETHDKGFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IETHDKGSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IETHDKGSession struct {
	Contract     *IETHDKG          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IETHDKGCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IETHDKGCallerSession struct {
	Contract *IETHDKGCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// IETHDKGTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IETHDKGTransactorSession struct {
	Contract     *IETHDKGTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// IETHDKGRaw is an auto generated low-level Go binding around an Ethereum contract.
type IETHDKGRaw struct {
	Contract *IETHDKG // Generic contract binding to access the raw methods on
}

// IETHDKGCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IETHDKGCallerRaw struct {
	Contract *IETHDKGCaller // Generic read-only contract binding to access the raw methods on
}

// IETHDKGTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IETHDKGTransactorRaw struct {
	Contract *IETHDKGTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIETHDKG creates a new instance of IETHDKG, bound to a specific deployed contract.
func NewIETHDKG(address common.Address, backend bind.ContractBackend) (*IETHDKG, error) {
	contract, err := bindIETHDKG(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IETHDKG{IETHDKGCaller: IETHDKGCaller{contract: contract}, IETHDKGTransactor: IETHDKGTransactor{contract: contract}, IETHDKGFilterer: IETHDKGFilterer{contract: contract}}, nil
}

// NewIETHDKGCaller creates a new read-only instance of IETHDKG, bound to a specific deployed contract.
func NewIETHDKGCaller(address common.Address, caller bind.ContractCaller) (*IETHDKGCaller, error) {
	contract, err := bindIETHDKG(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IETHDKGCaller{contract: contract}, nil
}

// NewIETHDKGTransactor creates a new write-only instance of IETHDKG, bound to a specific deployed contract.
func NewIETHDKGTransactor(address common.Address, transactor bind.ContractTransactor) (*IETHDKGTransactor, error) {
	contract, err := bindIETHDKG(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IETHDKGTransactor{contract: contract}, nil
}

// NewIETHDKGFilterer creates a new log filterer instance of IETHDKG, bound to a specific deployed contract.
func NewIETHDKGFilterer(address common.Address, filterer bind.ContractFilterer) (*IETHDKGFilterer, error) {
	contract, err := bindIETHDKG(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IETHDKGFilterer{contract: contract}, nil
}

// bindIETHDKG binds a generic wrapper to an already deployed contract.
func bindIETHDKG(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IETHDKGABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IETHDKG *IETHDKGRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IETHDKG.Contract.IETHDKGCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IETHDKG *IETHDKGRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IETHDKG.Contract.IETHDKGTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IETHDKG *IETHDKGRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IETHDKG.Contract.IETHDKGTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IETHDKG *IETHDKGCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IETHDKG.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IETHDKG *IETHDKGTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IETHDKG.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IETHDKG *IETHDKGTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IETHDKG.Contract.contract.Transact(opts, method, params...)
}

// GetBadParticipants is a free data retrieval call binding the contract method 0x32d4d570.
//
// Solidity: function getBadParticipants() view returns(uint256)
func (_IETHDKG *IETHDKGCaller) GetBadParticipants(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IETHDKG.contract.Call(opts, &out, "getBadParticipants")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetBadParticipants is a free data retrieval call binding the contract method 0x32d4d570.
//
// Solidity: function getBadParticipants() view returns(uint256)
func (_IETHDKG *IETHDKGSession) GetBadParticipants() (*big.Int, error) {
	return _IETHDKG.Contract.GetBadParticipants(&_IETHDKG.CallOpts)
}

// GetBadParticipants is a free data retrieval call binding the contract method 0x32d4d570.
//
// Solidity: function getBadParticipants() view returns(uint256)
func (_IETHDKG *IETHDKGCallerSession) GetBadParticipants() (*big.Int, error) {
	return _IETHDKG.Contract.GetBadParticipants(&_IETHDKG.CallOpts)
}

// GetConfirmationLength is a free data retrieval call binding the contract method 0x8c848d32.
//
// Solidity: function getConfirmationLength() view returns(uint256)
func (_IETHDKG *IETHDKGCaller) GetConfirmationLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IETHDKG.contract.Call(opts, &out, "getConfirmationLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetConfirmationLength is a free data retrieval call binding the contract method 0x8c848d32.
//
// Solidity: function getConfirmationLength() view returns(uint256)
func (_IETHDKG *IETHDKGSession) GetConfirmationLength() (*big.Int, error) {
	return _IETHDKG.Contract.GetConfirmationLength(&_IETHDKG.CallOpts)
}

// GetConfirmationLength is a free data retrieval call binding the contract method 0x8c848d32.
//
// Solidity: function getConfirmationLength() view returns(uint256)
func (_IETHDKG *IETHDKGCallerSession) GetConfirmationLength() (*big.Int, error) {
	return _IETHDKG.Contract.GetConfirmationLength(&_IETHDKG.CallOpts)
}

// GetETHDKGPhase is a free data retrieval call binding the contract method 0x2958e81c.
//
// Solidity: function getETHDKGPhase() view returns(uint8)
func (_IETHDKG *IETHDKGCaller) GetETHDKGPhase(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _IETHDKG.contract.Call(opts, &out, "getETHDKGPhase")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetETHDKGPhase is a free data retrieval call binding the contract method 0x2958e81c.
//
// Solidity: function getETHDKGPhase() view returns(uint8)
func (_IETHDKG *IETHDKGSession) GetETHDKGPhase() (uint8, error) {
	return _IETHDKG.Contract.GetETHDKGPhase(&_IETHDKG.CallOpts)
}

// GetETHDKGPhase is a free data retrieval call binding the contract method 0x2958e81c.
//
// Solidity: function getETHDKGPhase() view returns(uint8)
func (_IETHDKG *IETHDKGCallerSession) GetETHDKGPhase() (uint8, error) {
	return _IETHDKG.Contract.GetETHDKGPhase(&_IETHDKG.CallOpts)
}

// GetMasterPublicKey is a free data retrieval call binding the contract method 0xe146372a.
//
// Solidity: function getMasterPublicKey() view returns(uint256[4])
func (_IETHDKG *IETHDKGCaller) GetMasterPublicKey(opts *bind.CallOpts) ([4]*big.Int, error) {
	var out []interface{}
	err := _IETHDKG.contract.Call(opts, &out, "getMasterPublicKey")

	if err != nil {
		return *new([4]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([4]*big.Int)).(*[4]*big.Int)

	return out0, err

}

// GetMasterPublicKey is a free data retrieval call binding the contract method 0xe146372a.
//
// Solidity: function getMasterPublicKey() view returns(uint256[4])
func (_IETHDKG *IETHDKGSession) GetMasterPublicKey() ([4]*big.Int, error) {
	return _IETHDKG.Contract.GetMasterPublicKey(&_IETHDKG.CallOpts)
}

// GetMasterPublicKey is a free data retrieval call binding the contract method 0xe146372a.
//
// Solidity: function getMasterPublicKey() view returns(uint256[4])
func (_IETHDKG *IETHDKGCallerSession) GetMasterPublicKey() ([4]*big.Int, error) {
	return _IETHDKG.Contract.GetMasterPublicKey(&_IETHDKG.CallOpts)
}

// GetMinValidators is a free data retrieval call binding the contract method 0xecbadb36.
//
// Solidity: function getMinValidators() view returns(uint256)
func (_IETHDKG *IETHDKGCaller) GetMinValidators(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IETHDKG.contract.Call(opts, &out, "getMinValidators")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMinValidators is a free data retrieval call binding the contract method 0xecbadb36.
//
// Solidity: function getMinValidators() view returns(uint256)
func (_IETHDKG *IETHDKGSession) GetMinValidators() (*big.Int, error) {
	return _IETHDKG.Contract.GetMinValidators(&_IETHDKG.CallOpts)
}

// GetMinValidators is a free data retrieval call binding the contract method 0xecbadb36.
//
// Solidity: function getMinValidators() view returns(uint256)
func (_IETHDKG *IETHDKGCallerSession) GetMinValidators() (*big.Int, error) {
	return _IETHDKG.Contract.GetMinValidators(&_IETHDKG.CallOpts)
}

// GetNonce is a free data retrieval call binding the contract method 0xd087d288.
//
// Solidity: function getNonce() view returns(uint256)
func (_IETHDKG *IETHDKGCaller) GetNonce(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IETHDKG.contract.Call(opts, &out, "getNonce")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNonce is a free data retrieval call binding the contract method 0xd087d288.
//
// Solidity: function getNonce() view returns(uint256)
func (_IETHDKG *IETHDKGSession) GetNonce() (*big.Int, error) {
	return _IETHDKG.Contract.GetNonce(&_IETHDKG.CallOpts)
}

// GetNonce is a free data retrieval call binding the contract method 0xd087d288.
//
// Solidity: function getNonce() view returns(uint256)
func (_IETHDKG *IETHDKGCallerSession) GetNonce() (*big.Int, error) {
	return _IETHDKG.Contract.GetNonce(&_IETHDKG.CallOpts)
}

// GetNumParticipants is a free data retrieval call binding the contract method 0xfd478ca9.
//
// Solidity: function getNumParticipants() view returns(uint256)
func (_IETHDKG *IETHDKGCaller) GetNumParticipants(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IETHDKG.contract.Call(opts, &out, "getNumParticipants")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNumParticipants is a free data retrieval call binding the contract method 0xfd478ca9.
//
// Solidity: function getNumParticipants() view returns(uint256)
func (_IETHDKG *IETHDKGSession) GetNumParticipants() (*big.Int, error) {
	return _IETHDKG.Contract.GetNumParticipants(&_IETHDKG.CallOpts)
}

// GetNumParticipants is a free data retrieval call binding the contract method 0xfd478ca9.
//
// Solidity: function getNumParticipants() view returns(uint256)
func (_IETHDKG *IETHDKGCallerSession) GetNumParticipants() (*big.Int, error) {
	return _IETHDKG.Contract.GetNumParticipants(&_IETHDKG.CallOpts)
}

// GetParticipantInternalState is a free data retrieval call binding the contract method 0xbf7786b6.
//
// Solidity: function getParticipantInternalState(address participant) view returns((uint256[2],uint64,uint64,uint8,bytes32,uint256[2],uint256[2],uint256[4]))
func (_IETHDKG *IETHDKGCaller) GetParticipantInternalState(opts *bind.CallOpts, participant common.Address) (Participant, error) {
	var out []interface{}
	err := _IETHDKG.contract.Call(opts, &out, "getParticipantInternalState", participant)

	if err != nil {
		return *new(Participant), err
	}

	out0 := *abi.ConvertType(out[0], new(Participant)).(*Participant)

	return out0, err

}

// GetParticipantInternalState is a free data retrieval call binding the contract method 0xbf7786b6.
//
// Solidity: function getParticipantInternalState(address participant) view returns((uint256[2],uint64,uint64,uint8,bytes32,uint256[2],uint256[2],uint256[4]))
func (_IETHDKG *IETHDKGSession) GetParticipantInternalState(participant common.Address) (Participant, error) {
	return _IETHDKG.Contract.GetParticipantInternalState(&_IETHDKG.CallOpts, participant)
}

// GetParticipantInternalState is a free data retrieval call binding the contract method 0xbf7786b6.
//
// Solidity: function getParticipantInternalState(address participant) view returns((uint256[2],uint64,uint64,uint8,bytes32,uint256[2],uint256[2],uint256[4]))
func (_IETHDKG *IETHDKGCallerSession) GetParticipantInternalState(participant common.Address) (Participant, error) {
	return _IETHDKG.Contract.GetParticipantInternalState(&_IETHDKG.CallOpts, participant)
}

// GetPhaseLength is a free data retrieval call binding the contract method 0x106da57d.
//
// Solidity: function getPhaseLength() view returns(uint256)
func (_IETHDKG *IETHDKGCaller) GetPhaseLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IETHDKG.contract.Call(opts, &out, "getPhaseLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPhaseLength is a free data retrieval call binding the contract method 0x106da57d.
//
// Solidity: function getPhaseLength() view returns(uint256)
func (_IETHDKG *IETHDKGSession) GetPhaseLength() (*big.Int, error) {
	return _IETHDKG.Contract.GetPhaseLength(&_IETHDKG.CallOpts)
}

// GetPhaseLength is a free data retrieval call binding the contract method 0x106da57d.
//
// Solidity: function getPhaseLength() view returns(uint256)
func (_IETHDKG *IETHDKGCallerSession) GetPhaseLength() (*big.Int, error) {
	return _IETHDKG.Contract.GetPhaseLength(&_IETHDKG.CallOpts)
}

// GetPhaseStartBlock is a free data retrieval call binding the contract method 0xa2bc9c78.
//
// Solidity: function getPhaseStartBlock() view returns(uint256)
func (_IETHDKG *IETHDKGCaller) GetPhaseStartBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IETHDKG.contract.Call(opts, &out, "getPhaseStartBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPhaseStartBlock is a free data retrieval call binding the contract method 0xa2bc9c78.
//
// Solidity: function getPhaseStartBlock() view returns(uint256)
func (_IETHDKG *IETHDKGSession) GetPhaseStartBlock() (*big.Int, error) {
	return _IETHDKG.Contract.GetPhaseStartBlock(&_IETHDKG.CallOpts)
}

// GetPhaseStartBlock is a free data retrieval call binding the contract method 0xa2bc9c78.
//
// Solidity: function getPhaseStartBlock() view returns(uint256)
func (_IETHDKG *IETHDKGCallerSession) GetPhaseStartBlock() (*big.Int, error) {
	return _IETHDKG.Contract.GetPhaseStartBlock(&_IETHDKG.CallOpts)
}

// IsAccusationWindowOver is a free data retrieval call binding the contract method 0x3131b870.
//
// Solidity: function isAccusationWindowOver() view returns(bool)
func (_IETHDKG *IETHDKGCaller) IsAccusationWindowOver(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _IETHDKG.contract.Call(opts, &out, "isAccusationWindowOver")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsAccusationWindowOver is a free data retrieval call binding the contract method 0x3131b870.
//
// Solidity: function isAccusationWindowOver() view returns(bool)
func (_IETHDKG *IETHDKGSession) IsAccusationWindowOver() (bool, error) {
	return _IETHDKG.Contract.IsAccusationWindowOver(&_IETHDKG.CallOpts)
}

// IsAccusationWindowOver is a free data retrieval call binding the contract method 0x3131b870.
//
// Solidity: function isAccusationWindowOver() view returns(bool)
func (_IETHDKG *IETHDKGCallerSession) IsAccusationWindowOver() (bool, error) {
	return _IETHDKG.Contract.IsAccusationWindowOver(&_IETHDKG.CallOpts)
}

// IsMasterPublicKeySet is a free data retrieval call binding the contract method 0x08efcf16.
//
// Solidity: function isMasterPublicKeySet() view returns(bool)
func (_IETHDKG *IETHDKGCaller) IsMasterPublicKeySet(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _IETHDKG.contract.Call(opts, &out, "isMasterPublicKeySet")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsMasterPublicKeySet is a free data retrieval call binding the contract method 0x08efcf16.
//
// Solidity: function isMasterPublicKeySet() view returns(bool)
func (_IETHDKG *IETHDKGSession) IsMasterPublicKeySet() (bool, error) {
	return _IETHDKG.Contract.IsMasterPublicKeySet(&_IETHDKG.CallOpts)
}

// IsMasterPublicKeySet is a free data retrieval call binding the contract method 0x08efcf16.
//
// Solidity: function isMasterPublicKeySet() view returns(bool)
func (_IETHDKG *IETHDKGCallerSession) IsMasterPublicKeySet() (bool, error) {
	return _IETHDKG.Contract.IsMasterPublicKeySet(&_IETHDKG.CallOpts)
}

// AccuseParticipantDidNotDistributeShares is a paid mutator transaction binding the contract method 0xdae681bc.
//
// Solidity: function accuseParticipantDidNotDistributeShares(address[] dishonestAddresses) returns()
func (_IETHDKG *IETHDKGTransactor) AccuseParticipantDidNotDistributeShares(opts *bind.TransactOpts, dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "accuseParticipantDidNotDistributeShares", dishonestAddresses)
}

// AccuseParticipantDidNotDistributeShares is a paid mutator transaction binding the contract method 0xdae681bc.
//
// Solidity: function accuseParticipantDidNotDistributeShares(address[] dishonestAddresses) returns()
func (_IETHDKG *IETHDKGSession) AccuseParticipantDidNotDistributeShares(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _IETHDKG.Contract.AccuseParticipantDidNotDistributeShares(&_IETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDidNotDistributeShares is a paid mutator transaction binding the contract method 0xdae681bc.
//
// Solidity: function accuseParticipantDidNotDistributeShares(address[] dishonestAddresses) returns()
func (_IETHDKG *IETHDKGTransactorSession) AccuseParticipantDidNotDistributeShares(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _IETHDKG.Contract.AccuseParticipantDidNotDistributeShares(&_IETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDidNotSubmitGPKJ is a paid mutator transaction binding the contract method 0x7df24ee9.
//
// Solidity: function accuseParticipantDidNotSubmitGPKJ(address[] dishonestAddresses) returns()
func (_IETHDKG *IETHDKGTransactor) AccuseParticipantDidNotSubmitGPKJ(opts *bind.TransactOpts, dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "accuseParticipantDidNotSubmitGPKJ", dishonestAddresses)
}

// AccuseParticipantDidNotSubmitGPKJ is a paid mutator transaction binding the contract method 0x7df24ee9.
//
// Solidity: function accuseParticipantDidNotSubmitGPKJ(address[] dishonestAddresses) returns()
func (_IETHDKG *IETHDKGSession) AccuseParticipantDidNotSubmitGPKJ(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _IETHDKG.Contract.AccuseParticipantDidNotSubmitGPKJ(&_IETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDidNotSubmitGPKJ is a paid mutator transaction binding the contract method 0x7df24ee9.
//
// Solidity: function accuseParticipantDidNotSubmitGPKJ(address[] dishonestAddresses) returns()
func (_IETHDKG *IETHDKGTransactorSession) AccuseParticipantDidNotSubmitGPKJ(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _IETHDKG.Contract.AccuseParticipantDidNotSubmitGPKJ(&_IETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDidNotSubmitKeyShares is a paid mutator transaction binding the contract method 0x043a6f12.
//
// Solidity: function accuseParticipantDidNotSubmitKeyShares(address[] dishonestAddresses) returns()
func (_IETHDKG *IETHDKGTransactor) AccuseParticipantDidNotSubmitKeyShares(opts *bind.TransactOpts, dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "accuseParticipantDidNotSubmitKeyShares", dishonestAddresses)
}

// AccuseParticipantDidNotSubmitKeyShares is a paid mutator transaction binding the contract method 0x043a6f12.
//
// Solidity: function accuseParticipantDidNotSubmitKeyShares(address[] dishonestAddresses) returns()
func (_IETHDKG *IETHDKGSession) AccuseParticipantDidNotSubmitKeyShares(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _IETHDKG.Contract.AccuseParticipantDidNotSubmitKeyShares(&_IETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDidNotSubmitKeyShares is a paid mutator transaction binding the contract method 0x043a6f12.
//
// Solidity: function accuseParticipantDidNotSubmitKeyShares(address[] dishonestAddresses) returns()
func (_IETHDKG *IETHDKGTransactorSession) AccuseParticipantDidNotSubmitKeyShares(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _IETHDKG.Contract.AccuseParticipantDidNotSubmitKeyShares(&_IETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDistributedBadShares is a paid mutator transaction binding the contract method 0xedbe7bf7.
//
// Solidity: function accuseParticipantDistributedBadShares(address dishonestAddress, uint256[] encryptedShares, uint256[2][] commitments, uint256[2] sharedKey, uint256[2] sharedKeyCorrectnessProof) returns()
func (_IETHDKG *IETHDKGTransactor) AccuseParticipantDistributedBadShares(opts *bind.TransactOpts, dishonestAddress common.Address, encryptedShares []*big.Int, commitments [][2]*big.Int, sharedKey [2]*big.Int, sharedKeyCorrectnessProof [2]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "accuseParticipantDistributedBadShares", dishonestAddress, encryptedShares, commitments, sharedKey, sharedKeyCorrectnessProof)
}

// AccuseParticipantDistributedBadShares is a paid mutator transaction binding the contract method 0xedbe7bf7.
//
// Solidity: function accuseParticipantDistributedBadShares(address dishonestAddress, uint256[] encryptedShares, uint256[2][] commitments, uint256[2] sharedKey, uint256[2] sharedKeyCorrectnessProof) returns()
func (_IETHDKG *IETHDKGSession) AccuseParticipantDistributedBadShares(dishonestAddress common.Address, encryptedShares []*big.Int, commitments [][2]*big.Int, sharedKey [2]*big.Int, sharedKeyCorrectnessProof [2]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.AccuseParticipantDistributedBadShares(&_IETHDKG.TransactOpts, dishonestAddress, encryptedShares, commitments, sharedKey, sharedKeyCorrectnessProof)
}

// AccuseParticipantDistributedBadShares is a paid mutator transaction binding the contract method 0xedbe7bf7.
//
// Solidity: function accuseParticipantDistributedBadShares(address dishonestAddress, uint256[] encryptedShares, uint256[2][] commitments, uint256[2] sharedKey, uint256[2] sharedKeyCorrectnessProof) returns()
func (_IETHDKG *IETHDKGTransactorSession) AccuseParticipantDistributedBadShares(dishonestAddress common.Address, encryptedShares []*big.Int, commitments [][2]*big.Int, sharedKey [2]*big.Int, sharedKeyCorrectnessProof [2]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.AccuseParticipantDistributedBadShares(&_IETHDKG.TransactOpts, dishonestAddress, encryptedShares, commitments, sharedKey, sharedKeyCorrectnessProof)
}

// AccuseParticipantNotRegistered is a paid mutator transaction binding the contract method 0xf72c45b6.
//
// Solidity: function accuseParticipantNotRegistered(address[] dishonestAddresses) returns()
func (_IETHDKG *IETHDKGTransactor) AccuseParticipantNotRegistered(opts *bind.TransactOpts, dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "accuseParticipantNotRegistered", dishonestAddresses)
}

// AccuseParticipantNotRegistered is a paid mutator transaction binding the contract method 0xf72c45b6.
//
// Solidity: function accuseParticipantNotRegistered(address[] dishonestAddresses) returns()
func (_IETHDKG *IETHDKGSession) AccuseParticipantNotRegistered(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _IETHDKG.Contract.AccuseParticipantNotRegistered(&_IETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantNotRegistered is a paid mutator transaction binding the contract method 0xf72c45b6.
//
// Solidity: function accuseParticipantNotRegistered(address[] dishonestAddresses) returns()
func (_IETHDKG *IETHDKGTransactorSession) AccuseParticipantNotRegistered(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _IETHDKG.Contract.AccuseParticipantNotRegistered(&_IETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantSubmittedBadGPKJ is a paid mutator transaction binding the contract method 0x80001264.
//
// Solidity: function accuseParticipantSubmittedBadGPKJ(address[] validators, bytes32[] encryptedSharesHash, uint256[2][][] commitments, address dishonestAddress) returns()
func (_IETHDKG *IETHDKGTransactor) AccuseParticipantSubmittedBadGPKJ(opts *bind.TransactOpts, validators []common.Address, encryptedSharesHash [][32]byte, commitments [][][2]*big.Int, dishonestAddress common.Address) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "accuseParticipantSubmittedBadGPKJ", validators, encryptedSharesHash, commitments, dishonestAddress)
}

// AccuseParticipantSubmittedBadGPKJ is a paid mutator transaction binding the contract method 0x80001264.
//
// Solidity: function accuseParticipantSubmittedBadGPKJ(address[] validators, bytes32[] encryptedSharesHash, uint256[2][][] commitments, address dishonestAddress) returns()
func (_IETHDKG *IETHDKGSession) AccuseParticipantSubmittedBadGPKJ(validators []common.Address, encryptedSharesHash [][32]byte, commitments [][][2]*big.Int, dishonestAddress common.Address) (*types.Transaction, error) {
	return _IETHDKG.Contract.AccuseParticipantSubmittedBadGPKJ(&_IETHDKG.TransactOpts, validators, encryptedSharesHash, commitments, dishonestAddress)
}

// AccuseParticipantSubmittedBadGPKJ is a paid mutator transaction binding the contract method 0x80001264.
//
// Solidity: function accuseParticipantSubmittedBadGPKJ(address[] validators, bytes32[] encryptedSharesHash, uint256[2][][] commitments, address dishonestAddress) returns()
func (_IETHDKG *IETHDKGTransactorSession) AccuseParticipantSubmittedBadGPKJ(validators []common.Address, encryptedSharesHash [][32]byte, commitments [][][2]*big.Int, dishonestAddress common.Address) (*types.Transaction, error) {
	return _IETHDKG.Contract.AccuseParticipantSubmittedBadGPKJ(&_IETHDKG.TransactOpts, validators, encryptedSharesHash, commitments, dishonestAddress)
}

// Complete is a paid mutator transaction binding the contract method 0x522e1177.
//
// Solidity: function complete() returns()
func (_IETHDKG *IETHDKGTransactor) Complete(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "complete")
}

// Complete is a paid mutator transaction binding the contract method 0x522e1177.
//
// Solidity: function complete() returns()
func (_IETHDKG *IETHDKGSession) Complete() (*types.Transaction, error) {
	return _IETHDKG.Contract.Complete(&_IETHDKG.TransactOpts)
}

// Complete is a paid mutator transaction binding the contract method 0x522e1177.
//
// Solidity: function complete() returns()
func (_IETHDKG *IETHDKGTransactorSession) Complete() (*types.Transaction, error) {
	return _IETHDKG.Contract.Complete(&_IETHDKG.TransactOpts)
}

// DistributeShares is a paid mutator transaction binding the contract method 0x80b97e01.
//
// Solidity: function distributeShares(uint256[] encryptedShares, uint256[2][] commitments) returns()
func (_IETHDKG *IETHDKGTransactor) DistributeShares(opts *bind.TransactOpts, encryptedShares []*big.Int, commitments [][2]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "distributeShares", encryptedShares, commitments)
}

// DistributeShares is a paid mutator transaction binding the contract method 0x80b97e01.
//
// Solidity: function distributeShares(uint256[] encryptedShares, uint256[2][] commitments) returns()
func (_IETHDKG *IETHDKGSession) DistributeShares(encryptedShares []*big.Int, commitments [][2]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.DistributeShares(&_IETHDKG.TransactOpts, encryptedShares, commitments)
}

// DistributeShares is a paid mutator transaction binding the contract method 0x80b97e01.
//
// Solidity: function distributeShares(uint256[] encryptedShares, uint256[2][] commitments) returns()
func (_IETHDKG *IETHDKGTransactorSession) DistributeShares(encryptedShares []*big.Int, commitments [][2]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.DistributeShares(&_IETHDKG.TransactOpts, encryptedShares, commitments)
}

// InitializeETHDKG is a paid mutator transaction binding the contract method 0x57b51c9c.
//
// Solidity: function initializeETHDKG() returns()
func (_IETHDKG *IETHDKGTransactor) InitializeETHDKG(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "initializeETHDKG")
}

// InitializeETHDKG is a paid mutator transaction binding the contract method 0x57b51c9c.
//
// Solidity: function initializeETHDKG() returns()
func (_IETHDKG *IETHDKGSession) InitializeETHDKG() (*types.Transaction, error) {
	return _IETHDKG.Contract.InitializeETHDKG(&_IETHDKG.TransactOpts)
}

// InitializeETHDKG is a paid mutator transaction binding the contract method 0x57b51c9c.
//
// Solidity: function initializeETHDKG() returns()
func (_IETHDKG *IETHDKGTransactorSession) InitializeETHDKG() (*types.Transaction, error) {
	return _IETHDKG.Contract.InitializeETHDKG(&_IETHDKG.TransactOpts)
}

// Register is a paid mutator transaction binding the contract method 0x3442af5c.
//
// Solidity: function register(uint256[2] publicKey) returns()
func (_IETHDKG *IETHDKGTransactor) Register(opts *bind.TransactOpts, publicKey [2]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "register", publicKey)
}

// Register is a paid mutator transaction binding the contract method 0x3442af5c.
//
// Solidity: function register(uint256[2] publicKey) returns()
func (_IETHDKG *IETHDKGSession) Register(publicKey [2]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.Register(&_IETHDKG.TransactOpts, publicKey)
}

// Register is a paid mutator transaction binding the contract method 0x3442af5c.
//
// Solidity: function register(uint256[2] publicKey) returns()
func (_IETHDKG *IETHDKGTransactorSession) Register(publicKey [2]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.Register(&_IETHDKG.TransactOpts, publicKey)
}

// SetConfirmationLength is a paid mutator transaction binding the contract method 0xff3e5e45.
//
// Solidity: function setConfirmationLength(uint16 confirmationLength_) returns()
func (_IETHDKG *IETHDKGTransactor) SetConfirmationLength(opts *bind.TransactOpts, confirmationLength_ uint16) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "setConfirmationLength", confirmationLength_)
}

// SetConfirmationLength is a paid mutator transaction binding the contract method 0xff3e5e45.
//
// Solidity: function setConfirmationLength(uint16 confirmationLength_) returns()
func (_IETHDKG *IETHDKGSession) SetConfirmationLength(confirmationLength_ uint16) (*types.Transaction, error) {
	return _IETHDKG.Contract.SetConfirmationLength(&_IETHDKG.TransactOpts, confirmationLength_)
}

// SetConfirmationLength is a paid mutator transaction binding the contract method 0xff3e5e45.
//
// Solidity: function setConfirmationLength(uint16 confirmationLength_) returns()
func (_IETHDKG *IETHDKGTransactorSession) SetConfirmationLength(confirmationLength_ uint16) (*types.Transaction, error) {
	return _IETHDKG.Contract.SetConfirmationLength(&_IETHDKG.TransactOpts, confirmationLength_)
}

// SetMinNumberOfValidator is a paid mutator transaction binding the contract method 0xfb89c899.
//
// Solidity: function setMinNumberOfValidator(uint16 minValidators_) returns()
func (_IETHDKG *IETHDKGTransactor) SetMinNumberOfValidator(opts *bind.TransactOpts, minValidators_ uint16) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "setMinNumberOfValidator", minValidators_)
}

// SetMinNumberOfValidator is a paid mutator transaction binding the contract method 0xfb89c899.
//
// Solidity: function setMinNumberOfValidator(uint16 minValidators_) returns()
func (_IETHDKG *IETHDKGSession) SetMinNumberOfValidator(minValidators_ uint16) (*types.Transaction, error) {
	return _IETHDKG.Contract.SetMinNumberOfValidator(&_IETHDKG.TransactOpts, minValidators_)
}

// SetMinNumberOfValidator is a paid mutator transaction binding the contract method 0xfb89c899.
//
// Solidity: function setMinNumberOfValidator(uint16 minValidators_) returns()
func (_IETHDKG *IETHDKGTransactorSession) SetMinNumberOfValidator(minValidators_ uint16) (*types.Transaction, error) {
	return _IETHDKG.Contract.SetMinNumberOfValidator(&_IETHDKG.TransactOpts, minValidators_)
}

// SetPhaseLength is a paid mutator transaction binding the contract method 0x8a3c24cc.
//
// Solidity: function setPhaseLength(uint16 phaseLength_) returns()
func (_IETHDKG *IETHDKGTransactor) SetPhaseLength(opts *bind.TransactOpts, phaseLength_ uint16) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "setPhaseLength", phaseLength_)
}

// SetPhaseLength is a paid mutator transaction binding the contract method 0x8a3c24cc.
//
// Solidity: function setPhaseLength(uint16 phaseLength_) returns()
func (_IETHDKG *IETHDKGSession) SetPhaseLength(phaseLength_ uint16) (*types.Transaction, error) {
	return _IETHDKG.Contract.SetPhaseLength(&_IETHDKG.TransactOpts, phaseLength_)
}

// SetPhaseLength is a paid mutator transaction binding the contract method 0x8a3c24cc.
//
// Solidity: function setPhaseLength(uint16 phaseLength_) returns()
func (_IETHDKG *IETHDKGTransactorSession) SetPhaseLength(phaseLength_ uint16) (*types.Transaction, error) {
	return _IETHDKG.Contract.SetPhaseLength(&_IETHDKG.TransactOpts, phaseLength_)
}

// SetValidatorPoolAddress is a paid mutator transaction binding the contract method 0xfe0fe422.
//
// Solidity: function setValidatorPoolAddress(address validatorPool) returns()
func (_IETHDKG *IETHDKGTransactor) SetValidatorPoolAddress(opts *bind.TransactOpts, validatorPool common.Address) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "setValidatorPoolAddress", validatorPool)
}

// SetValidatorPoolAddress is a paid mutator transaction binding the contract method 0xfe0fe422.
//
// Solidity: function setValidatorPoolAddress(address validatorPool) returns()
func (_IETHDKG *IETHDKGSession) SetValidatorPoolAddress(validatorPool common.Address) (*types.Transaction, error) {
	return _IETHDKG.Contract.SetValidatorPoolAddress(&_IETHDKG.TransactOpts, validatorPool)
}

// SetValidatorPoolAddress is a paid mutator transaction binding the contract method 0xfe0fe422.
//
// Solidity: function setValidatorPoolAddress(address validatorPool) returns()
func (_IETHDKG *IETHDKGTransactorSession) SetValidatorPoolAddress(validatorPool common.Address) (*types.Transaction, error) {
	return _IETHDKG.Contract.SetValidatorPoolAddress(&_IETHDKG.TransactOpts, validatorPool)
}

<<<<<<< Updated upstream
// SubmitGPKj is a paid mutator transaction binding the contract method 0xd410e8e4.
//
// Solidity: function submitGPKj(uint256[4] gpkj) returns()
func (_IETHDKG *IETHDKGTransactor) SubmitGPKj(opts *bind.TransactOpts, gpkj [4]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "submitGPKj", gpkj)
}

// SubmitGPKj is a paid mutator transaction binding the contract method 0xd410e8e4.
//
// Solidity: function submitGPKj(uint256[4] gpkj) returns()
func (_IETHDKG *IETHDKGSession) SubmitGPKj(gpkj [4]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.SubmitGPKj(&_IETHDKG.TransactOpts, gpkj)
}

// SubmitGPKj is a paid mutator transaction binding the contract method 0xd410e8e4.
//
// Solidity: function submitGPKj(uint256[4] gpkj) returns()
func (_IETHDKG *IETHDKGTransactorSession) SubmitGPKj(gpkj [4]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.SubmitGPKj(&_IETHDKG.TransactOpts, gpkj)
=======
// SubmitGPKJ is a paid mutator transaction binding the contract method 0x101f49c1.
//
// Solidity: function submitGPKJ(uint256[4] gpkj) returns()
func (_IETHDKG *IETHDKGTransactor) SubmitGPKJ(opts *bind.TransactOpts, gpkj [4]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "submitGPKJ", gpkj)
}

// SubmitGPKJ is a paid mutator transaction binding the contract method 0x101f49c1.
//
// Solidity: function submitGPKJ(uint256[4] gpkj) returns()
func (_IETHDKG *IETHDKGSession) SubmitGPKJ(gpkj [4]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.SubmitGPKJ(&_IETHDKG.TransactOpts, gpkj)
}

// SubmitGPKJ is a paid mutator transaction binding the contract method 0x101f49c1.
//
// Solidity: function submitGPKJ(uint256[4] gpkj) returns()
func (_IETHDKG *IETHDKGTransactorSession) SubmitGPKJ(gpkj [4]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.SubmitGPKJ(&_IETHDKG.TransactOpts, gpkj)
>>>>>>> Stashed changes
}

// SubmitKeyShare is a paid mutator transaction binding the contract method 0x62a6523e.
//
// Solidity: function submitKeyShare(uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2) returns()
func (_IETHDKG *IETHDKGTransactor) SubmitKeyShare(opts *bind.TransactOpts, keyShareG1 [2]*big.Int, keyShareG1CorrectnessProof [2]*big.Int, keyShareG2 [4]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "submitKeyShare", keyShareG1, keyShareG1CorrectnessProof, keyShareG2)
}

// SubmitKeyShare is a paid mutator transaction binding the contract method 0x62a6523e.
//
// Solidity: function submitKeyShare(uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2) returns()
func (_IETHDKG *IETHDKGSession) SubmitKeyShare(keyShareG1 [2]*big.Int, keyShareG1CorrectnessProof [2]*big.Int, keyShareG2 [4]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.SubmitKeyShare(&_IETHDKG.TransactOpts, keyShareG1, keyShareG1CorrectnessProof, keyShareG2)
}

// SubmitKeyShare is a paid mutator transaction binding the contract method 0x62a6523e.
//
// Solidity: function submitKeyShare(uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2) returns()
func (_IETHDKG *IETHDKGTransactorSession) SubmitKeyShare(keyShareG1 [2]*big.Int, keyShareG1CorrectnessProof [2]*big.Int, keyShareG2 [4]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.SubmitKeyShare(&_IETHDKG.TransactOpts, keyShareG1, keyShareG1CorrectnessProof, keyShareG2)
}

// SubmitMasterPublicKey is a paid mutator transaction binding the contract method 0xe8323224.
//
// Solidity: function submitMasterPublicKey(uint256[4] masterPublicKey_) returns()
func (_IETHDKG *IETHDKGTransactor) SubmitMasterPublicKey(opts *bind.TransactOpts, masterPublicKey_ [4]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "submitMasterPublicKey", masterPublicKey_)
}

// SubmitMasterPublicKey is a paid mutator transaction binding the contract method 0xe8323224.
//
// Solidity: function submitMasterPublicKey(uint256[4] masterPublicKey_) returns()
func (_IETHDKG *IETHDKGSession) SubmitMasterPublicKey(masterPublicKey_ [4]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.SubmitMasterPublicKey(&_IETHDKG.TransactOpts, masterPublicKey_)
}

// SubmitMasterPublicKey is a paid mutator transaction binding the contract method 0xe8323224.
//
// Solidity: function submitMasterPublicKey(uint256[4] masterPublicKey_) returns()
func (_IETHDKG *IETHDKGTransactorSession) SubmitMasterPublicKey(masterPublicKey_ [4]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.SubmitMasterPublicKey(&_IETHDKG.TransactOpts, masterPublicKey_)
}

// IETHDKGEventsMetaData contains all meta data concerning the IETHDKGEvents contract.
var IETHDKGEventsMetaData = &bind.MetaData{
<<<<<<< Updated upstream
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"publicKey\",\"type\":\"uint256[2]\"}],\"name\":\"AddressRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"GPKJSubmissionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"KeyShareSubmissionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1CorrectnessProof\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"keyShareG2\",\"type\":\"uint256[4]\"}],\"name\":\"KeyShareSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"mpk\",\"type\":\"uint256[4]\"}],\"name\":\"MPKSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"RegistrationComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"RegistrationOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"ShareDistributionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"encryptedShares\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"}],\"name\":\"SharesDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share3\",\"type\":\"uint256\"}],\"name\":\"ValidatorMemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethHeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"madHeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey3\",\"type\":\"uint256\"}],\"name\":\"ValidatorSetCompleted\",\"type\":\"event\"}]",
=======
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"publicKey\",\"type\":\"uint256[2]\"}],\"name\":\"AddressRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"GPKJSubmissionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"KeyShareSubmissionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1CorrectnessProof\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"keyShareG2\",\"type\":\"uint256[4]\"}],\"name\":\"KeyShareSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"mpk\",\"type\":\"uint256[4]\"}],\"name\":\"MPKSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"RegistrationComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"phaseLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"confirmationLength\",\"type\":\"uint256\"}],\"name\":\"RegistrationOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"ShareDistributionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"encryptedShares\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"}],\"name\":\"SharesDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share3\",\"type\":\"uint256\"}],\"name\":\"ValidatorMemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethHeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"madHeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey3\",\"type\":\"uint256\"}],\"name\":\"ValidatorSetCompleted\",\"type\":\"event\"}]",
>>>>>>> Stashed changes
}

// IETHDKGEventsABI is the input ABI used to generate the binding from.
// Deprecated: Use IETHDKGEventsMetaData.ABI instead.
var IETHDKGEventsABI = IETHDKGEventsMetaData.ABI

// IETHDKGEvents is an auto generated Go binding around an Ethereum contract.
type IETHDKGEvents struct {
	IETHDKGEventsCaller     // Read-only binding to the contract
	IETHDKGEventsTransactor // Write-only binding to the contract
	IETHDKGEventsFilterer   // Log filterer for contract events
}

// IETHDKGEventsCaller is an auto generated read-only Go binding around an Ethereum contract.
type IETHDKGEventsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IETHDKGEventsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IETHDKGEventsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IETHDKGEventsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IETHDKGEventsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IETHDKGEventsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IETHDKGEventsSession struct {
	Contract     *IETHDKGEvents    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IETHDKGEventsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IETHDKGEventsCallerSession struct {
	Contract *IETHDKGEventsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// IETHDKGEventsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IETHDKGEventsTransactorSession struct {
	Contract     *IETHDKGEventsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// IETHDKGEventsRaw is an auto generated low-level Go binding around an Ethereum contract.
type IETHDKGEventsRaw struct {
	Contract *IETHDKGEvents // Generic contract binding to access the raw methods on
}

// IETHDKGEventsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IETHDKGEventsCallerRaw struct {
	Contract *IETHDKGEventsCaller // Generic read-only contract binding to access the raw methods on
}

// IETHDKGEventsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IETHDKGEventsTransactorRaw struct {
	Contract *IETHDKGEventsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIETHDKGEvents creates a new instance of IETHDKGEvents, bound to a specific deployed contract.
func NewIETHDKGEvents(address common.Address, backend bind.ContractBackend) (*IETHDKGEvents, error) {
	contract, err := bindIETHDKGEvents(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IETHDKGEvents{IETHDKGEventsCaller: IETHDKGEventsCaller{contract: contract}, IETHDKGEventsTransactor: IETHDKGEventsTransactor{contract: contract}, IETHDKGEventsFilterer: IETHDKGEventsFilterer{contract: contract}}, nil
}

// NewIETHDKGEventsCaller creates a new read-only instance of IETHDKGEvents, bound to a specific deployed contract.
func NewIETHDKGEventsCaller(address common.Address, caller bind.ContractCaller) (*IETHDKGEventsCaller, error) {
	contract, err := bindIETHDKGEvents(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsCaller{contract: contract}, nil
}

// NewIETHDKGEventsTransactor creates a new write-only instance of IETHDKGEvents, bound to a specific deployed contract.
func NewIETHDKGEventsTransactor(address common.Address, transactor bind.ContractTransactor) (*IETHDKGEventsTransactor, error) {
	contract, err := bindIETHDKGEvents(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsTransactor{contract: contract}, nil
}

// NewIETHDKGEventsFilterer creates a new log filterer instance of IETHDKGEvents, bound to a specific deployed contract.
func NewIETHDKGEventsFilterer(address common.Address, filterer bind.ContractFilterer) (*IETHDKGEventsFilterer, error) {
	contract, err := bindIETHDKGEvents(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsFilterer{contract: contract}, nil
}

// bindIETHDKGEvents binds a generic wrapper to an already deployed contract.
func bindIETHDKGEvents(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IETHDKGEventsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IETHDKGEvents *IETHDKGEventsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IETHDKGEvents.Contract.IETHDKGEventsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IETHDKGEvents *IETHDKGEventsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IETHDKGEvents.Contract.IETHDKGEventsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IETHDKGEvents *IETHDKGEventsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IETHDKGEvents.Contract.IETHDKGEventsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IETHDKGEvents *IETHDKGEventsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IETHDKGEvents.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IETHDKGEvents *IETHDKGEventsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IETHDKGEvents.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IETHDKGEvents *IETHDKGEventsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IETHDKGEvents.Contract.contract.Transact(opts, method, params...)
}

// IETHDKGEventsAddressRegisteredIterator is returned from FilterAddressRegistered and is used to iterate over the raw logs and unpacked data for AddressRegistered events raised by the IETHDKGEvents contract.
type IETHDKGEventsAddressRegisteredIterator struct {
	Event *IETHDKGEventsAddressRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IETHDKGEventsAddressRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IETHDKGEventsAddressRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IETHDKGEventsAddressRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IETHDKGEventsAddressRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IETHDKGEventsAddressRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IETHDKGEventsAddressRegistered represents a AddressRegistered event raised by the IETHDKGEvents contract.
type IETHDKGEventsAddressRegistered struct {
	Account   common.Address
	Index     *big.Int
	Nonce     *big.Int
	PublicKey [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAddressRegistered is a free log retrieval operation binding the contract event 0x7f1304057ec61140fbf2f5f236790f34fcafe123d3eb0d298d92317c97da500d.
//
// Solidity: event AddressRegistered(address account, uint256 index, uint256 nonce, uint256[2] publicKey)
func (_IETHDKGEvents *IETHDKGEventsFilterer) FilterAddressRegistered(opts *bind.FilterOpts) (*IETHDKGEventsAddressRegisteredIterator, error) {

	logs, sub, err := _IETHDKGEvents.contract.FilterLogs(opts, "AddressRegistered")
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsAddressRegisteredIterator{contract: _IETHDKGEvents.contract, event: "AddressRegistered", logs: logs, sub: sub}, nil
}

// WatchAddressRegistered is a free log subscription operation binding the contract event 0x7f1304057ec61140fbf2f5f236790f34fcafe123d3eb0d298d92317c97da500d.
//
// Solidity: event AddressRegistered(address account, uint256 index, uint256 nonce, uint256[2] publicKey)
func (_IETHDKGEvents *IETHDKGEventsFilterer) WatchAddressRegistered(opts *bind.WatchOpts, sink chan<- *IETHDKGEventsAddressRegistered) (event.Subscription, error) {

	logs, sub, err := _IETHDKGEvents.contract.WatchLogs(opts, "AddressRegistered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IETHDKGEventsAddressRegistered)
				if err := _IETHDKGEvents.contract.UnpackLog(event, "AddressRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddressRegistered is a log parse operation binding the contract event 0x7f1304057ec61140fbf2f5f236790f34fcafe123d3eb0d298d92317c97da500d.
//
// Solidity: event AddressRegistered(address account, uint256 index, uint256 nonce, uint256[2] publicKey)
func (_IETHDKGEvents *IETHDKGEventsFilterer) ParseAddressRegistered(log types.Log) (*IETHDKGEventsAddressRegistered, error) {
	event := new(IETHDKGEventsAddressRegistered)
	if err := _IETHDKGEvents.contract.UnpackLog(event, "AddressRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IETHDKGEventsGPKJSubmissionCompleteIterator is returned from FilterGPKJSubmissionComplete and is used to iterate over the raw logs and unpacked data for GPKJSubmissionComplete events raised by the IETHDKGEvents contract.
type IETHDKGEventsGPKJSubmissionCompleteIterator struct {
	Event *IETHDKGEventsGPKJSubmissionComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IETHDKGEventsGPKJSubmissionCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IETHDKGEventsGPKJSubmissionComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IETHDKGEventsGPKJSubmissionComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IETHDKGEventsGPKJSubmissionCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IETHDKGEventsGPKJSubmissionCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IETHDKGEventsGPKJSubmissionComplete represents a GPKJSubmissionComplete event raised by the IETHDKGEvents contract.
type IETHDKGEventsGPKJSubmissionComplete struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterGPKJSubmissionComplete is a free log retrieval operation binding the contract event 0x87bfe600b78cad9f7cf68c99eb582c1748f636b3269842b37d5873b0e069f628.
//
// Solidity: event GPKJSubmissionComplete(uint256 blockNumber)
func (_IETHDKGEvents *IETHDKGEventsFilterer) FilterGPKJSubmissionComplete(opts *bind.FilterOpts) (*IETHDKGEventsGPKJSubmissionCompleteIterator, error) {

	logs, sub, err := _IETHDKGEvents.contract.FilterLogs(opts, "GPKJSubmissionComplete")
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsGPKJSubmissionCompleteIterator{contract: _IETHDKGEvents.contract, event: "GPKJSubmissionComplete", logs: logs, sub: sub}, nil
}

// WatchGPKJSubmissionComplete is a free log subscription operation binding the contract event 0x87bfe600b78cad9f7cf68c99eb582c1748f636b3269842b37d5873b0e069f628.
//
// Solidity: event GPKJSubmissionComplete(uint256 blockNumber)
func (_IETHDKGEvents *IETHDKGEventsFilterer) WatchGPKJSubmissionComplete(opts *bind.WatchOpts, sink chan<- *IETHDKGEventsGPKJSubmissionComplete) (event.Subscription, error) {

	logs, sub, err := _IETHDKGEvents.contract.WatchLogs(opts, "GPKJSubmissionComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IETHDKGEventsGPKJSubmissionComplete)
				if err := _IETHDKGEvents.contract.UnpackLog(event, "GPKJSubmissionComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGPKJSubmissionComplete is a log parse operation binding the contract event 0x87bfe600b78cad9f7cf68c99eb582c1748f636b3269842b37d5873b0e069f628.
//
// Solidity: event GPKJSubmissionComplete(uint256 blockNumber)
func (_IETHDKGEvents *IETHDKGEventsFilterer) ParseGPKJSubmissionComplete(log types.Log) (*IETHDKGEventsGPKJSubmissionComplete, error) {
	event := new(IETHDKGEventsGPKJSubmissionComplete)
	if err := _IETHDKGEvents.contract.UnpackLog(event, "GPKJSubmissionComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IETHDKGEventsKeyShareSubmissionCompleteIterator is returned from FilterKeyShareSubmissionComplete and is used to iterate over the raw logs and unpacked data for KeyShareSubmissionComplete events raised by the IETHDKGEvents contract.
type IETHDKGEventsKeyShareSubmissionCompleteIterator struct {
	Event *IETHDKGEventsKeyShareSubmissionComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IETHDKGEventsKeyShareSubmissionCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IETHDKGEventsKeyShareSubmissionComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IETHDKGEventsKeyShareSubmissionComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IETHDKGEventsKeyShareSubmissionCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IETHDKGEventsKeyShareSubmissionCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IETHDKGEventsKeyShareSubmissionComplete represents a KeyShareSubmissionComplete event raised by the IETHDKGEvents contract.
type IETHDKGEventsKeyShareSubmissionComplete struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterKeyShareSubmissionComplete is a free log retrieval operation binding the contract event 0x522cec98f6caa194456c44afa9e8cef9ac63eecb0be60e20d180ce19cfb0ef59.
//
// Solidity: event KeyShareSubmissionComplete(uint256 blockNumber)
func (_IETHDKGEvents *IETHDKGEventsFilterer) FilterKeyShareSubmissionComplete(opts *bind.FilterOpts) (*IETHDKGEventsKeyShareSubmissionCompleteIterator, error) {

	logs, sub, err := _IETHDKGEvents.contract.FilterLogs(opts, "KeyShareSubmissionComplete")
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsKeyShareSubmissionCompleteIterator{contract: _IETHDKGEvents.contract, event: "KeyShareSubmissionComplete", logs: logs, sub: sub}, nil
}

// WatchKeyShareSubmissionComplete is a free log subscription operation binding the contract event 0x522cec98f6caa194456c44afa9e8cef9ac63eecb0be60e20d180ce19cfb0ef59.
//
// Solidity: event KeyShareSubmissionComplete(uint256 blockNumber)
func (_IETHDKGEvents *IETHDKGEventsFilterer) WatchKeyShareSubmissionComplete(opts *bind.WatchOpts, sink chan<- *IETHDKGEventsKeyShareSubmissionComplete) (event.Subscription, error) {

	logs, sub, err := _IETHDKGEvents.contract.WatchLogs(opts, "KeyShareSubmissionComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IETHDKGEventsKeyShareSubmissionComplete)
				if err := _IETHDKGEvents.contract.UnpackLog(event, "KeyShareSubmissionComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyShareSubmissionComplete is a log parse operation binding the contract event 0x522cec98f6caa194456c44afa9e8cef9ac63eecb0be60e20d180ce19cfb0ef59.
//
// Solidity: event KeyShareSubmissionComplete(uint256 blockNumber)
func (_IETHDKGEvents *IETHDKGEventsFilterer) ParseKeyShareSubmissionComplete(log types.Log) (*IETHDKGEventsKeyShareSubmissionComplete, error) {
	event := new(IETHDKGEventsKeyShareSubmissionComplete)
	if err := _IETHDKGEvents.contract.UnpackLog(event, "KeyShareSubmissionComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IETHDKGEventsKeyShareSubmittedIterator is returned from FilterKeyShareSubmitted and is used to iterate over the raw logs and unpacked data for KeyShareSubmitted events raised by the IETHDKGEvents contract.
type IETHDKGEventsKeyShareSubmittedIterator struct {
	Event *IETHDKGEventsKeyShareSubmitted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IETHDKGEventsKeyShareSubmittedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IETHDKGEventsKeyShareSubmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IETHDKGEventsKeyShareSubmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IETHDKGEventsKeyShareSubmittedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IETHDKGEventsKeyShareSubmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IETHDKGEventsKeyShareSubmitted represents a KeyShareSubmitted event raised by the IETHDKGEvents contract.
type IETHDKGEventsKeyShareSubmitted struct {
	Account                    common.Address
	Index                      *big.Int
	Nonce                      *big.Int
	KeyShareG1                 [2]*big.Int
	KeyShareG1CorrectnessProof [2]*big.Int
	KeyShareG2                 [4]*big.Int
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterKeyShareSubmitted is a free log retrieval operation binding the contract event 0x6162e2d11398e4063e4c8565dafc4fb6755bbead93747ea836a5ef73a594aaf7.
//
// Solidity: event KeyShareSubmitted(address account, uint256 index, uint256 nonce, uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2)
func (_IETHDKGEvents *IETHDKGEventsFilterer) FilterKeyShareSubmitted(opts *bind.FilterOpts) (*IETHDKGEventsKeyShareSubmittedIterator, error) {

	logs, sub, err := _IETHDKGEvents.contract.FilterLogs(opts, "KeyShareSubmitted")
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsKeyShareSubmittedIterator{contract: _IETHDKGEvents.contract, event: "KeyShareSubmitted", logs: logs, sub: sub}, nil
}

// WatchKeyShareSubmitted is a free log subscription operation binding the contract event 0x6162e2d11398e4063e4c8565dafc4fb6755bbead93747ea836a5ef73a594aaf7.
//
// Solidity: event KeyShareSubmitted(address account, uint256 index, uint256 nonce, uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2)
func (_IETHDKGEvents *IETHDKGEventsFilterer) WatchKeyShareSubmitted(opts *bind.WatchOpts, sink chan<- *IETHDKGEventsKeyShareSubmitted) (event.Subscription, error) {

	logs, sub, err := _IETHDKGEvents.contract.WatchLogs(opts, "KeyShareSubmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IETHDKGEventsKeyShareSubmitted)
				if err := _IETHDKGEvents.contract.UnpackLog(event, "KeyShareSubmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyShareSubmitted is a log parse operation binding the contract event 0x6162e2d11398e4063e4c8565dafc4fb6755bbead93747ea836a5ef73a594aaf7.
//
// Solidity: event KeyShareSubmitted(address account, uint256 index, uint256 nonce, uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2)
func (_IETHDKGEvents *IETHDKGEventsFilterer) ParseKeyShareSubmitted(log types.Log) (*IETHDKGEventsKeyShareSubmitted, error) {
	event := new(IETHDKGEventsKeyShareSubmitted)
	if err := _IETHDKGEvents.contract.UnpackLog(event, "KeyShareSubmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IETHDKGEventsMPKSetIterator is returned from FilterMPKSet and is used to iterate over the raw logs and unpacked data for MPKSet events raised by the IETHDKGEvents contract.
type IETHDKGEventsMPKSetIterator struct {
	Event *IETHDKGEventsMPKSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IETHDKGEventsMPKSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IETHDKGEventsMPKSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IETHDKGEventsMPKSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IETHDKGEventsMPKSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IETHDKGEventsMPKSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IETHDKGEventsMPKSet represents a MPKSet event raised by the IETHDKGEvents contract.
type IETHDKGEventsMPKSet struct {
	BlockNumber *big.Int
	Nonce       *big.Int
	Mpk         [4]*big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterMPKSet is a free log retrieval operation binding the contract event 0x71b1ebd27be320895a22125d6458e3363aefa6944a312ede4bf275867e6d5a71.
//
// Solidity: event MPKSet(uint256 blockNumber, uint256 nonce, uint256[4] mpk)
func (_IETHDKGEvents *IETHDKGEventsFilterer) FilterMPKSet(opts *bind.FilterOpts) (*IETHDKGEventsMPKSetIterator, error) {

	logs, sub, err := _IETHDKGEvents.contract.FilterLogs(opts, "MPKSet")
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsMPKSetIterator{contract: _IETHDKGEvents.contract, event: "MPKSet", logs: logs, sub: sub}, nil
}

// WatchMPKSet is a free log subscription operation binding the contract event 0x71b1ebd27be320895a22125d6458e3363aefa6944a312ede4bf275867e6d5a71.
//
// Solidity: event MPKSet(uint256 blockNumber, uint256 nonce, uint256[4] mpk)
func (_IETHDKGEvents *IETHDKGEventsFilterer) WatchMPKSet(opts *bind.WatchOpts, sink chan<- *IETHDKGEventsMPKSet) (event.Subscription, error) {

	logs, sub, err := _IETHDKGEvents.contract.WatchLogs(opts, "MPKSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IETHDKGEventsMPKSet)
				if err := _IETHDKGEvents.contract.UnpackLog(event, "MPKSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMPKSet is a log parse operation binding the contract event 0x71b1ebd27be320895a22125d6458e3363aefa6944a312ede4bf275867e6d5a71.
//
// Solidity: event MPKSet(uint256 blockNumber, uint256 nonce, uint256[4] mpk)
func (_IETHDKGEvents *IETHDKGEventsFilterer) ParseMPKSet(log types.Log) (*IETHDKGEventsMPKSet, error) {
	event := new(IETHDKGEventsMPKSet)
	if err := _IETHDKGEvents.contract.UnpackLog(event, "MPKSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IETHDKGEventsRegistrationCompleteIterator is returned from FilterRegistrationComplete and is used to iterate over the raw logs and unpacked data for RegistrationComplete events raised by the IETHDKGEvents contract.
type IETHDKGEventsRegistrationCompleteIterator struct {
	Event *IETHDKGEventsRegistrationComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IETHDKGEventsRegistrationCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IETHDKGEventsRegistrationComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IETHDKGEventsRegistrationComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IETHDKGEventsRegistrationCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IETHDKGEventsRegistrationCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IETHDKGEventsRegistrationComplete represents a RegistrationComplete event raised by the IETHDKGEvents contract.
type IETHDKGEventsRegistrationComplete struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRegistrationComplete is a free log retrieval operation binding the contract event 0x833013b96b786b4eca83baac286920e5e53956c21ff3894f1d9f02e97d6ed764.
//
// Solidity: event RegistrationComplete(uint256 blockNumber)
func (_IETHDKGEvents *IETHDKGEventsFilterer) FilterRegistrationComplete(opts *bind.FilterOpts) (*IETHDKGEventsRegistrationCompleteIterator, error) {

	logs, sub, err := _IETHDKGEvents.contract.FilterLogs(opts, "RegistrationComplete")
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsRegistrationCompleteIterator{contract: _IETHDKGEvents.contract, event: "RegistrationComplete", logs: logs, sub: sub}, nil
}

// WatchRegistrationComplete is a free log subscription operation binding the contract event 0x833013b96b786b4eca83baac286920e5e53956c21ff3894f1d9f02e97d6ed764.
//
// Solidity: event RegistrationComplete(uint256 blockNumber)
func (_IETHDKGEvents *IETHDKGEventsFilterer) WatchRegistrationComplete(opts *bind.WatchOpts, sink chan<- *IETHDKGEventsRegistrationComplete) (event.Subscription, error) {

	logs, sub, err := _IETHDKGEvents.contract.WatchLogs(opts, "RegistrationComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IETHDKGEventsRegistrationComplete)
				if err := _IETHDKGEvents.contract.UnpackLog(event, "RegistrationComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistrationComplete is a log parse operation binding the contract event 0x833013b96b786b4eca83baac286920e5e53956c21ff3894f1d9f02e97d6ed764.
//
// Solidity: event RegistrationComplete(uint256 blockNumber)
func (_IETHDKGEvents *IETHDKGEventsFilterer) ParseRegistrationComplete(log types.Log) (*IETHDKGEventsRegistrationComplete, error) {
	event := new(IETHDKGEventsRegistrationComplete)
	if err := _IETHDKGEvents.contract.UnpackLog(event, "RegistrationComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IETHDKGEventsRegistrationOpenedIterator is returned from FilterRegistrationOpened and is used to iterate over the raw logs and unpacked data for RegistrationOpened events raised by the IETHDKGEvents contract.
type IETHDKGEventsRegistrationOpenedIterator struct {
	Event *IETHDKGEventsRegistrationOpened // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IETHDKGEventsRegistrationOpenedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IETHDKGEventsRegistrationOpened)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IETHDKGEventsRegistrationOpened)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IETHDKGEventsRegistrationOpenedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IETHDKGEventsRegistrationOpenedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IETHDKGEventsRegistrationOpened represents a RegistrationOpened event raised by the IETHDKGEvents contract.
type IETHDKGEventsRegistrationOpened struct {
<<<<<<< Updated upstream
	StartBlock *big.Int
	Nonce      *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterRegistrationOpened is a free log retrieval operation binding the contract event 0x0092d3a0faf985375d3ea8563cdbdedd99bb694713af121204f50ccb198fb476.
//
// Solidity: event RegistrationOpened(uint256 startBlock, uint256 nonce)
=======
	StartBlock         *big.Int
	Nonce              *big.Int
	PhaseLength        *big.Int
	ConfirmationLength *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterRegistrationOpened is a free log retrieval operation binding the contract event 0xc867fa8c9b2d0ef5b1687773346ccc44cbc8b392ec2934a6178ffe529f311c8d.
//
// Solidity: event RegistrationOpened(uint256 startBlock, uint256 nonce, uint256 phaseLength, uint256 confirmationLength)
>>>>>>> Stashed changes
func (_IETHDKGEvents *IETHDKGEventsFilterer) FilterRegistrationOpened(opts *bind.FilterOpts) (*IETHDKGEventsRegistrationOpenedIterator, error) {

	logs, sub, err := _IETHDKGEvents.contract.FilterLogs(opts, "RegistrationOpened")
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsRegistrationOpenedIterator{contract: _IETHDKGEvents.contract, event: "RegistrationOpened", logs: logs, sub: sub}, nil
}

<<<<<<< Updated upstream
// WatchRegistrationOpened is a free log subscription operation binding the contract event 0x0092d3a0faf985375d3ea8563cdbdedd99bb694713af121204f50ccb198fb476.
//
// Solidity: event RegistrationOpened(uint256 startBlock, uint256 nonce)
=======
// WatchRegistrationOpened is a free log subscription operation binding the contract event 0xc867fa8c9b2d0ef5b1687773346ccc44cbc8b392ec2934a6178ffe529f311c8d.
//
// Solidity: event RegistrationOpened(uint256 startBlock, uint256 nonce, uint256 phaseLength, uint256 confirmationLength)
>>>>>>> Stashed changes
func (_IETHDKGEvents *IETHDKGEventsFilterer) WatchRegistrationOpened(opts *bind.WatchOpts, sink chan<- *IETHDKGEventsRegistrationOpened) (event.Subscription, error) {

	logs, sub, err := _IETHDKGEvents.contract.WatchLogs(opts, "RegistrationOpened")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IETHDKGEventsRegistrationOpened)
				if err := _IETHDKGEvents.contract.UnpackLog(event, "RegistrationOpened", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

<<<<<<< Updated upstream
// ParseRegistrationOpened is a log parse operation binding the contract event 0x0092d3a0faf985375d3ea8563cdbdedd99bb694713af121204f50ccb198fb476.
//
// Solidity: event RegistrationOpened(uint256 startBlock, uint256 nonce)
=======
// ParseRegistrationOpened is a log parse operation binding the contract event 0xc867fa8c9b2d0ef5b1687773346ccc44cbc8b392ec2934a6178ffe529f311c8d.
//
// Solidity: event RegistrationOpened(uint256 startBlock, uint256 nonce, uint256 phaseLength, uint256 confirmationLength)
>>>>>>> Stashed changes
func (_IETHDKGEvents *IETHDKGEventsFilterer) ParseRegistrationOpened(log types.Log) (*IETHDKGEventsRegistrationOpened, error) {
	event := new(IETHDKGEventsRegistrationOpened)
	if err := _IETHDKGEvents.contract.UnpackLog(event, "RegistrationOpened", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IETHDKGEventsShareDistributionCompleteIterator is returned from FilterShareDistributionComplete and is used to iterate over the raw logs and unpacked data for ShareDistributionComplete events raised by the IETHDKGEvents contract.
type IETHDKGEventsShareDistributionCompleteIterator struct {
	Event *IETHDKGEventsShareDistributionComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IETHDKGEventsShareDistributionCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IETHDKGEventsShareDistributionComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IETHDKGEventsShareDistributionComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IETHDKGEventsShareDistributionCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IETHDKGEventsShareDistributionCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IETHDKGEventsShareDistributionComplete represents a ShareDistributionComplete event raised by the IETHDKGEvents contract.
type IETHDKGEventsShareDistributionComplete struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterShareDistributionComplete is a free log retrieval operation binding the contract event 0xbfe94ffef5ddde4d25ac7b652f3f67686ea63f9badbfe1f25451e26fc262d11c.
//
// Solidity: event ShareDistributionComplete(uint256 blockNumber)
func (_IETHDKGEvents *IETHDKGEventsFilterer) FilterShareDistributionComplete(opts *bind.FilterOpts) (*IETHDKGEventsShareDistributionCompleteIterator, error) {

	logs, sub, err := _IETHDKGEvents.contract.FilterLogs(opts, "ShareDistributionComplete")
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsShareDistributionCompleteIterator{contract: _IETHDKGEvents.contract, event: "ShareDistributionComplete", logs: logs, sub: sub}, nil
}

// WatchShareDistributionComplete is a free log subscription operation binding the contract event 0xbfe94ffef5ddde4d25ac7b652f3f67686ea63f9badbfe1f25451e26fc262d11c.
//
// Solidity: event ShareDistributionComplete(uint256 blockNumber)
func (_IETHDKGEvents *IETHDKGEventsFilterer) WatchShareDistributionComplete(opts *bind.WatchOpts, sink chan<- *IETHDKGEventsShareDistributionComplete) (event.Subscription, error) {

	logs, sub, err := _IETHDKGEvents.contract.WatchLogs(opts, "ShareDistributionComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IETHDKGEventsShareDistributionComplete)
				if err := _IETHDKGEvents.contract.UnpackLog(event, "ShareDistributionComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseShareDistributionComplete is a log parse operation binding the contract event 0xbfe94ffef5ddde4d25ac7b652f3f67686ea63f9badbfe1f25451e26fc262d11c.
//
// Solidity: event ShareDistributionComplete(uint256 blockNumber)
func (_IETHDKGEvents *IETHDKGEventsFilterer) ParseShareDistributionComplete(log types.Log) (*IETHDKGEventsShareDistributionComplete, error) {
	event := new(IETHDKGEventsShareDistributionComplete)
	if err := _IETHDKGEvents.contract.UnpackLog(event, "ShareDistributionComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IETHDKGEventsSharesDistributedIterator is returned from FilterSharesDistributed and is used to iterate over the raw logs and unpacked data for SharesDistributed events raised by the IETHDKGEvents contract.
type IETHDKGEventsSharesDistributedIterator struct {
	Event *IETHDKGEventsSharesDistributed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IETHDKGEventsSharesDistributedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IETHDKGEventsSharesDistributed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IETHDKGEventsSharesDistributed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IETHDKGEventsSharesDistributedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IETHDKGEventsSharesDistributedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IETHDKGEventsSharesDistributed represents a SharesDistributed event raised by the IETHDKGEvents contract.
type IETHDKGEventsSharesDistributed struct {
	Account         common.Address
	Index           *big.Int
	Nonce           *big.Int
	EncryptedShares []*big.Int
	Commitments     [][2]*big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterSharesDistributed is a free log retrieval operation binding the contract event 0xf0c8b0ef2867c2b4639b404a0296b6bbf0bf97e20856af42144a5a6035c0d0d2.
//
// Solidity: event SharesDistributed(address account, uint256 index, uint256 nonce, uint256[] encryptedShares, uint256[2][] commitments)
func (_IETHDKGEvents *IETHDKGEventsFilterer) FilterSharesDistributed(opts *bind.FilterOpts) (*IETHDKGEventsSharesDistributedIterator, error) {

	logs, sub, err := _IETHDKGEvents.contract.FilterLogs(opts, "SharesDistributed")
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsSharesDistributedIterator{contract: _IETHDKGEvents.contract, event: "SharesDistributed", logs: logs, sub: sub}, nil
}

// WatchSharesDistributed is a free log subscription operation binding the contract event 0xf0c8b0ef2867c2b4639b404a0296b6bbf0bf97e20856af42144a5a6035c0d0d2.
//
// Solidity: event SharesDistributed(address account, uint256 index, uint256 nonce, uint256[] encryptedShares, uint256[2][] commitments)
func (_IETHDKGEvents *IETHDKGEventsFilterer) WatchSharesDistributed(opts *bind.WatchOpts, sink chan<- *IETHDKGEventsSharesDistributed) (event.Subscription, error) {

	logs, sub, err := _IETHDKGEvents.contract.WatchLogs(opts, "SharesDistributed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IETHDKGEventsSharesDistributed)
				if err := _IETHDKGEvents.contract.UnpackLog(event, "SharesDistributed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSharesDistributed is a log parse operation binding the contract event 0xf0c8b0ef2867c2b4639b404a0296b6bbf0bf97e20856af42144a5a6035c0d0d2.
//
// Solidity: event SharesDistributed(address account, uint256 index, uint256 nonce, uint256[] encryptedShares, uint256[2][] commitments)
func (_IETHDKGEvents *IETHDKGEventsFilterer) ParseSharesDistributed(log types.Log) (*IETHDKGEventsSharesDistributed, error) {
	event := new(IETHDKGEventsSharesDistributed)
	if err := _IETHDKGEvents.contract.UnpackLog(event, "SharesDistributed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IETHDKGEventsValidatorMemberAddedIterator is returned from FilterValidatorMemberAdded and is used to iterate over the raw logs and unpacked data for ValidatorMemberAdded events raised by the IETHDKGEvents contract.
type IETHDKGEventsValidatorMemberAddedIterator struct {
	Event *IETHDKGEventsValidatorMemberAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IETHDKGEventsValidatorMemberAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IETHDKGEventsValidatorMemberAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IETHDKGEventsValidatorMemberAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IETHDKGEventsValidatorMemberAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IETHDKGEventsValidatorMemberAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IETHDKGEventsValidatorMemberAdded represents a ValidatorMemberAdded event raised by the IETHDKGEvents contract.
type IETHDKGEventsValidatorMemberAdded struct {
	Account common.Address
	Index   *big.Int
	Nonce   *big.Int
	Epoch   *big.Int
	Share0  *big.Int
	Share1  *big.Int
	Share2  *big.Int
	Share3  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterValidatorMemberAdded is a free log retrieval operation binding the contract event 0x09b90b08bbc3dbe22e9d2a0bc9c2c7614c7511cd0ad72177727a1e762115bf06.
//
// Solidity: event ValidatorMemberAdded(address account, uint256 index, uint256 nonce, uint256 epoch, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_IETHDKGEvents *IETHDKGEventsFilterer) FilterValidatorMemberAdded(opts *bind.FilterOpts) (*IETHDKGEventsValidatorMemberAddedIterator, error) {

	logs, sub, err := _IETHDKGEvents.contract.FilterLogs(opts, "ValidatorMemberAdded")
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsValidatorMemberAddedIterator{contract: _IETHDKGEvents.contract, event: "ValidatorMemberAdded", logs: logs, sub: sub}, nil
}

// WatchValidatorMemberAdded is a free log subscription operation binding the contract event 0x09b90b08bbc3dbe22e9d2a0bc9c2c7614c7511cd0ad72177727a1e762115bf06.
//
// Solidity: event ValidatorMemberAdded(address account, uint256 index, uint256 nonce, uint256 epoch, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_IETHDKGEvents *IETHDKGEventsFilterer) WatchValidatorMemberAdded(opts *bind.WatchOpts, sink chan<- *IETHDKGEventsValidatorMemberAdded) (event.Subscription, error) {

	logs, sub, err := _IETHDKGEvents.contract.WatchLogs(opts, "ValidatorMemberAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IETHDKGEventsValidatorMemberAdded)
				if err := _IETHDKGEvents.contract.UnpackLog(event, "ValidatorMemberAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorMemberAdded is a log parse operation binding the contract event 0x09b90b08bbc3dbe22e9d2a0bc9c2c7614c7511cd0ad72177727a1e762115bf06.
//
// Solidity: event ValidatorMemberAdded(address account, uint256 index, uint256 nonce, uint256 epoch, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_IETHDKGEvents *IETHDKGEventsFilterer) ParseValidatorMemberAdded(log types.Log) (*IETHDKGEventsValidatorMemberAdded, error) {
	event := new(IETHDKGEventsValidatorMemberAdded)
	if err := _IETHDKGEvents.contract.UnpackLog(event, "ValidatorMemberAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IETHDKGEventsValidatorSetCompletedIterator is returned from FilterValidatorSetCompleted and is used to iterate over the raw logs and unpacked data for ValidatorSetCompleted events raised by the IETHDKGEvents contract.
type IETHDKGEventsValidatorSetCompletedIterator struct {
	Event *IETHDKGEventsValidatorSetCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IETHDKGEventsValidatorSetCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IETHDKGEventsValidatorSetCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IETHDKGEventsValidatorSetCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IETHDKGEventsValidatorSetCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IETHDKGEventsValidatorSetCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IETHDKGEventsValidatorSetCompleted represents a ValidatorSetCompleted event raised by the IETHDKGEvents contract.
type IETHDKGEventsValidatorSetCompleted struct {
	ValidatorCount *big.Int
	Nonce          *big.Int
	Epoch          *big.Int
	EthHeight      *big.Int
	MadHeight      *big.Int
	GroupKey0      *big.Int
	GroupKey1      *big.Int
	GroupKey2      *big.Int
	GroupKey3      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterValidatorSetCompleted is a free log retrieval operation binding the contract event 0xd7237b781669fa700ecf77be6cd8fa0f4b98b1a24ac584a9b6b44c509216718a.
//
// Solidity: event ValidatorSetCompleted(uint256 validatorCount, uint256 nonce, uint256 epoch, uint256 ethHeight, uint256 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_IETHDKGEvents *IETHDKGEventsFilterer) FilterValidatorSetCompleted(opts *bind.FilterOpts) (*IETHDKGEventsValidatorSetCompletedIterator, error) {

	logs, sub, err := _IETHDKGEvents.contract.FilterLogs(opts, "ValidatorSetCompleted")
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsValidatorSetCompletedIterator{contract: _IETHDKGEvents.contract, event: "ValidatorSetCompleted", logs: logs, sub: sub}, nil
}

// WatchValidatorSetCompleted is a free log subscription operation binding the contract event 0xd7237b781669fa700ecf77be6cd8fa0f4b98b1a24ac584a9b6b44c509216718a.
//
// Solidity: event ValidatorSetCompleted(uint256 validatorCount, uint256 nonce, uint256 epoch, uint256 ethHeight, uint256 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_IETHDKGEvents *IETHDKGEventsFilterer) WatchValidatorSetCompleted(opts *bind.WatchOpts, sink chan<- *IETHDKGEventsValidatorSetCompleted) (event.Subscription, error) {

	logs, sub, err := _IETHDKGEvents.contract.WatchLogs(opts, "ValidatorSetCompleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IETHDKGEventsValidatorSetCompleted)
				if err := _IETHDKGEvents.contract.UnpackLog(event, "ValidatorSetCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorSetCompleted is a log parse operation binding the contract event 0xd7237b781669fa700ecf77be6cd8fa0f4b98b1a24ac584a9b6b44c509216718a.
//
// Solidity: event ValidatorSetCompleted(uint256 validatorCount, uint256 nonce, uint256 epoch, uint256 ethHeight, uint256 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_IETHDKGEvents *IETHDKGEventsFilterer) ParseValidatorSetCompleted(log types.Log) (*IETHDKGEventsValidatorSetCompleted, error) {
	event := new(IETHDKGEventsValidatorSetCompleted)
	if err := _IETHDKGEvents.contract.UnpackLog(event, "ValidatorSetCompleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IValidatorPoolMetaData contains all meta data concerning the IValidatorPool contract.
var IValidatorPoolMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"claimStakeNFTPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeTokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectProfits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payoutEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoutToken\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getValidator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidatorsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeETHDKG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"majorSlash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"minorSlash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxNumValidators_\",\"type\":\"uint256\"}],\"name\":\"setMaxNumValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumStake_\",\"type\":\"uint256\"}],\"name\":\"setMinimumStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IValidatorPoolABI is the input ABI used to generate the binding from.
// Deprecated: Use IValidatorPoolMetaData.ABI instead.
var IValidatorPoolABI = IValidatorPoolMetaData.ABI

// IValidatorPool is an auto generated Go binding around an Ethereum contract.
type IValidatorPool struct {
	IValidatorPoolCaller     // Read-only binding to the contract
	IValidatorPoolTransactor // Write-only binding to the contract
	IValidatorPoolFilterer   // Log filterer for contract events
}

// IValidatorPoolCaller is an auto generated read-only Go binding around an Ethereum contract.
type IValidatorPoolCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IValidatorPoolTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IValidatorPoolTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IValidatorPoolFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IValidatorPoolFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IValidatorPoolSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IValidatorPoolSession struct {
	Contract     *IValidatorPool   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IValidatorPoolCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IValidatorPoolCallerSession struct {
	Contract *IValidatorPoolCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// IValidatorPoolTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IValidatorPoolTransactorSession struct {
	Contract     *IValidatorPoolTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// IValidatorPoolRaw is an auto generated low-level Go binding around an Ethereum contract.
type IValidatorPoolRaw struct {
	Contract *IValidatorPool // Generic contract binding to access the raw methods on
}

// IValidatorPoolCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IValidatorPoolCallerRaw struct {
	Contract *IValidatorPoolCaller // Generic read-only contract binding to access the raw methods on
}

// IValidatorPoolTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IValidatorPoolTransactorRaw struct {
	Contract *IValidatorPoolTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIValidatorPool creates a new instance of IValidatorPool, bound to a specific deployed contract.
func NewIValidatorPool(address common.Address, backend bind.ContractBackend) (*IValidatorPool, error) {
	contract, err := bindIValidatorPool(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IValidatorPool{IValidatorPoolCaller: IValidatorPoolCaller{contract: contract}, IValidatorPoolTransactor: IValidatorPoolTransactor{contract: contract}, IValidatorPoolFilterer: IValidatorPoolFilterer{contract: contract}}, nil
}

// NewIValidatorPoolCaller creates a new read-only instance of IValidatorPool, bound to a specific deployed contract.
func NewIValidatorPoolCaller(address common.Address, caller bind.ContractCaller) (*IValidatorPoolCaller, error) {
	contract, err := bindIValidatorPool(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IValidatorPoolCaller{contract: contract}, nil
}

// NewIValidatorPoolTransactor creates a new write-only instance of IValidatorPool, bound to a specific deployed contract.
func NewIValidatorPoolTransactor(address common.Address, transactor bind.ContractTransactor) (*IValidatorPoolTransactor, error) {
	contract, err := bindIValidatorPool(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IValidatorPoolTransactor{contract: contract}, nil
}

// NewIValidatorPoolFilterer creates a new log filterer instance of IValidatorPool, bound to a specific deployed contract.
func NewIValidatorPoolFilterer(address common.Address, filterer bind.ContractFilterer) (*IValidatorPoolFilterer, error) {
	contract, err := bindIValidatorPool(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IValidatorPoolFilterer{contract: contract}, nil
}

// bindIValidatorPool binds a generic wrapper to an already deployed contract.
func bindIValidatorPool(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IValidatorPoolABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IValidatorPool *IValidatorPoolRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IValidatorPool.Contract.IValidatorPoolCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IValidatorPool *IValidatorPoolRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IValidatorPool.Contract.IValidatorPoolTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IValidatorPool *IValidatorPoolRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IValidatorPool.Contract.IValidatorPoolTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IValidatorPool *IValidatorPoolCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IValidatorPool.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IValidatorPool *IValidatorPoolTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IValidatorPool.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IValidatorPool *IValidatorPoolTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IValidatorPool.Contract.contract.Transact(opts, method, params...)
}

// GetValidator is a free data retrieval call binding the contract method 0xb5d89627.
//
// Solidity: function getValidator(uint256 index) view returns(address)
func (_IValidatorPool *IValidatorPoolCaller) GetValidator(opts *bind.CallOpts, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _IValidatorPool.contract.Call(opts, &out, "getValidator", index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetValidator is a free data retrieval call binding the contract method 0xb5d89627.
//
// Solidity: function getValidator(uint256 index) view returns(address)
func (_IValidatorPool *IValidatorPoolSession) GetValidator(index *big.Int) (common.Address, error) {
	return _IValidatorPool.Contract.GetValidator(&_IValidatorPool.CallOpts, index)
}

// GetValidator is a free data retrieval call binding the contract method 0xb5d89627.
//
// Solidity: function getValidator(uint256 index) view returns(address)
func (_IValidatorPool *IValidatorPoolCallerSession) GetValidator(index *big.Int) (common.Address, error) {
	return _IValidatorPool.Contract.GetValidator(&_IValidatorPool.CallOpts, index)
}

// GetValidatorsCount is a free data retrieval call binding the contract method 0x27498240.
//
// Solidity: function getValidatorsCount() view returns(uint256)
func (_IValidatorPool *IValidatorPoolCaller) GetValidatorsCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IValidatorPool.contract.Call(opts, &out, "getValidatorsCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetValidatorsCount is a free data retrieval call binding the contract method 0x27498240.
//
// Solidity: function getValidatorsCount() view returns(uint256)
func (_IValidatorPool *IValidatorPoolSession) GetValidatorsCount() (*big.Int, error) {
	return _IValidatorPool.Contract.GetValidatorsCount(&_IValidatorPool.CallOpts)
}

// GetValidatorsCount is a free data retrieval call binding the contract method 0x27498240.
//
// Solidity: function getValidatorsCount() view returns(uint256)
func (_IValidatorPool *IValidatorPoolCallerSession) GetValidatorsCount() (*big.Int, error) {
	return _IValidatorPool.Contract.GetValidatorsCount(&_IValidatorPool.CallOpts)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address participant) view returns(bool)
func (_IValidatorPool *IValidatorPoolCaller) IsValidator(opts *bind.CallOpts, participant common.Address) (bool, error) {
	var out []interface{}
	err := _IValidatorPool.contract.Call(opts, &out, "isValidator", participant)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address participant) view returns(bool)
func (_IValidatorPool *IValidatorPoolSession) IsValidator(participant common.Address) (bool, error) {
	return _IValidatorPool.Contract.IsValidator(&_IValidatorPool.CallOpts, participant)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address participant) view returns(bool)
func (_IValidatorPool *IValidatorPoolCallerSession) IsValidator(participant common.Address) (bool, error) {
	return _IValidatorPool.Contract.IsValidator(&_IValidatorPool.CallOpts, participant)
}

// ClaimStakeNFTPosition is a paid mutator transaction binding the contract method 0xd9b4a939.
//
// Solidity: function claimStakeNFTPosition() returns(uint256 stakeTokenID)
func (_IValidatorPool *IValidatorPoolTransactor) ClaimStakeNFTPosition(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IValidatorPool.contract.Transact(opts, "claimStakeNFTPosition")
}

// ClaimStakeNFTPosition is a paid mutator transaction binding the contract method 0xd9b4a939.
//
// Solidity: function claimStakeNFTPosition() returns(uint256 stakeTokenID)
func (_IValidatorPool *IValidatorPoolSession) ClaimStakeNFTPosition() (*types.Transaction, error) {
	return _IValidatorPool.Contract.ClaimStakeNFTPosition(&_IValidatorPool.TransactOpts)
}

// ClaimStakeNFTPosition is a paid mutator transaction binding the contract method 0xd9b4a939.
//
// Solidity: function claimStakeNFTPosition() returns(uint256 stakeTokenID)
func (_IValidatorPool *IValidatorPoolTransactorSession) ClaimStakeNFTPosition() (*types.Transaction, error) {
	return _IValidatorPool.Contract.ClaimStakeNFTPosition(&_IValidatorPool.TransactOpts)
}

// CollectProfits is a paid mutator transaction binding the contract method 0xc958e0d6.
//
// Solidity: function collectProfits() returns(uint256 payoutEth, uint256 payoutToken)
func (_IValidatorPool *IValidatorPoolTransactor) CollectProfits(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IValidatorPool.contract.Transact(opts, "collectProfits")
}

// CollectProfits is a paid mutator transaction binding the contract method 0xc958e0d6.
//
// Solidity: function collectProfits() returns(uint256 payoutEth, uint256 payoutToken)
func (_IValidatorPool *IValidatorPoolSession) CollectProfits() (*types.Transaction, error) {
	return _IValidatorPool.Contract.CollectProfits(&_IValidatorPool.TransactOpts)
}

// CollectProfits is a paid mutator transaction binding the contract method 0xc958e0d6.
//
// Solidity: function collectProfits() returns(uint256 payoutEth, uint256 payoutToken)
func (_IValidatorPool *IValidatorPoolTransactorSession) CollectProfits() (*types.Transaction, error) {
	return _IValidatorPool.Contract.CollectProfits(&_IValidatorPool.TransactOpts)
}

// InitializeETHDKG is a paid mutator transaction binding the contract method 0x57b51c9c.
//
// Solidity: function initializeETHDKG() returns()
func (_IValidatorPool *IValidatorPoolTransactor) InitializeETHDKG(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IValidatorPool.contract.Transact(opts, "initializeETHDKG")
}

// InitializeETHDKG is a paid mutator transaction binding the contract method 0x57b51c9c.
//
// Solidity: function initializeETHDKG() returns()
func (_IValidatorPool *IValidatorPoolSession) InitializeETHDKG() (*types.Transaction, error) {
	return _IValidatorPool.Contract.InitializeETHDKG(&_IValidatorPool.TransactOpts)
}

// InitializeETHDKG is a paid mutator transaction binding the contract method 0x57b51c9c.
//
// Solidity: function initializeETHDKG() returns()
func (_IValidatorPool *IValidatorPoolTransactorSession) InitializeETHDKG() (*types.Transaction, error) {
	return _IValidatorPool.Contract.InitializeETHDKG(&_IValidatorPool.TransactOpts)
}

// MajorSlash is a paid mutator transaction binding the contract method 0x150ef01b.
//
// Solidity: function majorSlash(address participant) returns()
func (_IValidatorPool *IValidatorPoolTransactor) MajorSlash(opts *bind.TransactOpts, participant common.Address) (*types.Transaction, error) {
	return _IValidatorPool.contract.Transact(opts, "majorSlash", participant)
}

// MajorSlash is a paid mutator transaction binding the contract method 0x150ef01b.
//
// Solidity: function majorSlash(address participant) returns()
func (_IValidatorPool *IValidatorPoolSession) MajorSlash(participant common.Address) (*types.Transaction, error) {
	return _IValidatorPool.Contract.MajorSlash(&_IValidatorPool.TransactOpts, participant)
}

// MajorSlash is a paid mutator transaction binding the contract method 0x150ef01b.
//
// Solidity: function majorSlash(address participant) returns()
func (_IValidatorPool *IValidatorPoolTransactorSession) MajorSlash(participant common.Address) (*types.Transaction, error) {
	return _IValidatorPool.Contract.MajorSlash(&_IValidatorPool.TransactOpts, participant)
}

// MinorSlash is a paid mutator transaction binding the contract method 0xa19ebb21.
//
// Solidity: function minorSlash(address participant) returns()
func (_IValidatorPool *IValidatorPoolTransactor) MinorSlash(opts *bind.TransactOpts, participant common.Address) (*types.Transaction, error) {
	return _IValidatorPool.contract.Transact(opts, "minorSlash", participant)
}

// MinorSlash is a paid mutator transaction binding the contract method 0xa19ebb21.
//
// Solidity: function minorSlash(address participant) returns()
func (_IValidatorPool *IValidatorPoolSession) MinorSlash(participant common.Address) (*types.Transaction, error) {
	return _IValidatorPool.Contract.MinorSlash(&_IValidatorPool.TransactOpts, participant)
}

// MinorSlash is a paid mutator transaction binding the contract method 0xa19ebb21.
//
// Solidity: function minorSlash(address participant) returns()
func (_IValidatorPool *IValidatorPoolTransactorSession) MinorSlash(participant common.Address) (*types.Transaction, error) {
	return _IValidatorPool.Contract.MinorSlash(&_IValidatorPool.TransactOpts, participant)
}

// SetMaxNumValidators is a paid mutator transaction binding the contract method 0x6c0da0b4.
//
// Solidity: function setMaxNumValidators(uint256 maxNumValidators_) returns()
func (_IValidatorPool *IValidatorPoolTransactor) SetMaxNumValidators(opts *bind.TransactOpts, maxNumValidators_ *big.Int) (*types.Transaction, error) {
	return _IValidatorPool.contract.Transact(opts, "setMaxNumValidators", maxNumValidators_)
}

// SetMaxNumValidators is a paid mutator transaction binding the contract method 0x6c0da0b4.
//
// Solidity: function setMaxNumValidators(uint256 maxNumValidators_) returns()
func (_IValidatorPool *IValidatorPoolSession) SetMaxNumValidators(maxNumValidators_ *big.Int) (*types.Transaction, error) {
	return _IValidatorPool.Contract.SetMaxNumValidators(&_IValidatorPool.TransactOpts, maxNumValidators_)
}

// SetMaxNumValidators is a paid mutator transaction binding the contract method 0x6c0da0b4.
//
// Solidity: function setMaxNumValidators(uint256 maxNumValidators_) returns()
func (_IValidatorPool *IValidatorPoolTransactorSession) SetMaxNumValidators(maxNumValidators_ *big.Int) (*types.Transaction, error) {
	return _IValidatorPool.Contract.SetMaxNumValidators(&_IValidatorPool.TransactOpts, maxNumValidators_)
}

// SetMinimumStake is a paid mutator transaction binding the contract method 0x233e9903.
//
// Solidity: function setMinimumStake(uint256 minimumStake_) returns()
func (_IValidatorPool *IValidatorPoolTransactor) SetMinimumStake(opts *bind.TransactOpts, minimumStake_ *big.Int) (*types.Transaction, error) {
	return _IValidatorPool.contract.Transact(opts, "setMinimumStake", minimumStake_)
}

// SetMinimumStake is a paid mutator transaction binding the contract method 0x233e9903.
//
// Solidity: function setMinimumStake(uint256 minimumStake_) returns()
func (_IValidatorPool *IValidatorPoolSession) SetMinimumStake(minimumStake_ *big.Int) (*types.Transaction, error) {
	return _IValidatorPool.Contract.SetMinimumStake(&_IValidatorPool.TransactOpts, minimumStake_)
}

// SetMinimumStake is a paid mutator transaction binding the contract method 0x233e9903.
//
// Solidity: function setMinimumStake(uint256 minimumStake_) returns()
func (_IValidatorPool *IValidatorPoolTransactorSession) SetMinimumStake(minimumStake_ *big.Int) (*types.Transaction, error) {
	return _IValidatorPool.Contract.SetMinimumStake(&_IValidatorPool.TransactOpts, minimumStake_)
}

// MerkleProofLibraryMetaData contains all meta data concerning the MerkleProofLibrary contract.
var MerkleProofLibraryMetaData = &bind.MetaData{
	ABI: "[]",
<<<<<<< Updated upstream
	Bin: "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b53360e89aa11fc4d7efeae357d0a2008090ac2cd404871fc5cf05c0145ac8f064736f6c634300080b0033",
=======
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a6480ff04a27c0f4da64e4bccc372e38389954b8be111090d2cbdf9c7a97e04a64736f6c634300080b0033",
>>>>>>> Stashed changes
}

// MerkleProofLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use MerkleProofLibraryMetaData.ABI instead.
var MerkleProofLibraryABI = MerkleProofLibraryMetaData.ABI

// MerkleProofLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MerkleProofLibraryMetaData.Bin instead.
var MerkleProofLibraryBin = MerkleProofLibraryMetaData.Bin

// DeployMerkleProofLibrary deploys a new Ethereum contract, binding an instance of MerkleProofLibrary to it.
func DeployMerkleProofLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MerkleProofLibrary, error) {
	parsed, err := MerkleProofLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MerkleProofLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MerkleProofLibrary{MerkleProofLibraryCaller: MerkleProofLibraryCaller{contract: contract}, MerkleProofLibraryTransactor: MerkleProofLibraryTransactor{contract: contract}, MerkleProofLibraryFilterer: MerkleProofLibraryFilterer{contract: contract}}, nil
}

// MerkleProofLibrary is an auto generated Go binding around an Ethereum contract.
type MerkleProofLibrary struct {
	MerkleProofLibraryCaller     // Read-only binding to the contract
	MerkleProofLibraryTransactor // Write-only binding to the contract
	MerkleProofLibraryFilterer   // Log filterer for contract events
}

// MerkleProofLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type MerkleProofLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MerkleProofLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MerkleProofLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MerkleProofLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MerkleProofLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MerkleProofLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MerkleProofLibrarySession struct {
	Contract     *MerkleProofLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// MerkleProofLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MerkleProofLibraryCallerSession struct {
	Contract *MerkleProofLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// MerkleProofLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MerkleProofLibraryTransactorSession struct {
	Contract     *MerkleProofLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// MerkleProofLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type MerkleProofLibraryRaw struct {
	Contract *MerkleProofLibrary // Generic contract binding to access the raw methods on
}

// MerkleProofLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MerkleProofLibraryCallerRaw struct {
	Contract *MerkleProofLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// MerkleProofLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MerkleProofLibraryTransactorRaw struct {
	Contract *MerkleProofLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMerkleProofLibrary creates a new instance of MerkleProofLibrary, bound to a specific deployed contract.
func NewMerkleProofLibrary(address common.Address, backend bind.ContractBackend) (*MerkleProofLibrary, error) {
	contract, err := bindMerkleProofLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MerkleProofLibrary{MerkleProofLibraryCaller: MerkleProofLibraryCaller{contract: contract}, MerkleProofLibraryTransactor: MerkleProofLibraryTransactor{contract: contract}, MerkleProofLibraryFilterer: MerkleProofLibraryFilterer{contract: contract}}, nil
}

// NewMerkleProofLibraryCaller creates a new read-only instance of MerkleProofLibrary, bound to a specific deployed contract.
func NewMerkleProofLibraryCaller(address common.Address, caller bind.ContractCaller) (*MerkleProofLibraryCaller, error) {
	contract, err := bindMerkleProofLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MerkleProofLibraryCaller{contract: contract}, nil
}

// NewMerkleProofLibraryTransactor creates a new write-only instance of MerkleProofLibrary, bound to a specific deployed contract.
func NewMerkleProofLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*MerkleProofLibraryTransactor, error) {
	contract, err := bindMerkleProofLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MerkleProofLibraryTransactor{contract: contract}, nil
}

// NewMerkleProofLibraryFilterer creates a new log filterer instance of MerkleProofLibrary, bound to a specific deployed contract.
func NewMerkleProofLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*MerkleProofLibraryFilterer, error) {
	contract, err := bindMerkleProofLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MerkleProofLibraryFilterer{contract: contract}, nil
}

// bindMerkleProofLibrary binds a generic wrapper to an already deployed contract.
func bindMerkleProofLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MerkleProofLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MerkleProofLibrary *MerkleProofLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MerkleProofLibrary.Contract.MerkleProofLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MerkleProofLibrary *MerkleProofLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MerkleProofLibrary.Contract.MerkleProofLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MerkleProofLibrary *MerkleProofLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MerkleProofLibrary.Contract.MerkleProofLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MerkleProofLibrary *MerkleProofLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MerkleProofLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MerkleProofLibrary *MerkleProofLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MerkleProofLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MerkleProofLibrary *MerkleProofLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MerkleProofLibrary.Contract.contract.Transact(opts, method, params...)
}

// MerkleProofParserLibraryMetaData contains all meta data concerning the MerkleProofParserLibrary contract.
var MerkleProofParserLibraryMetaData = &bind.MetaData{
	ABI: "[]",
<<<<<<< Updated upstream
	Bin: "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207631d831f4e79f5f594504211eeed6dd25cc975705416c9a2e283544bf3980d864736f6c634300080b0033",
=======
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220136b88f9334ef9cec1414dc099c76cc960b9a86775069c49ccb9d7e9609a394a64736f6c634300080b0033",
>>>>>>> Stashed changes
}

// MerkleProofParserLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use MerkleProofParserLibraryMetaData.ABI instead.
var MerkleProofParserLibraryABI = MerkleProofParserLibraryMetaData.ABI

// MerkleProofParserLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MerkleProofParserLibraryMetaData.Bin instead.
var MerkleProofParserLibraryBin = MerkleProofParserLibraryMetaData.Bin

// DeployMerkleProofParserLibrary deploys a new Ethereum contract, binding an instance of MerkleProofParserLibrary to it.
func DeployMerkleProofParserLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MerkleProofParserLibrary, error) {
	parsed, err := MerkleProofParserLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MerkleProofParserLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MerkleProofParserLibrary{MerkleProofParserLibraryCaller: MerkleProofParserLibraryCaller{contract: contract}, MerkleProofParserLibraryTransactor: MerkleProofParserLibraryTransactor{contract: contract}, MerkleProofParserLibraryFilterer: MerkleProofParserLibraryFilterer{contract: contract}}, nil
}

// MerkleProofParserLibrary is an auto generated Go binding around an Ethereum contract.
type MerkleProofParserLibrary struct {
	MerkleProofParserLibraryCaller     // Read-only binding to the contract
	MerkleProofParserLibraryTransactor // Write-only binding to the contract
	MerkleProofParserLibraryFilterer   // Log filterer for contract events
}

// MerkleProofParserLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type MerkleProofParserLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MerkleProofParserLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MerkleProofParserLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MerkleProofParserLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MerkleProofParserLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MerkleProofParserLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MerkleProofParserLibrarySession struct {
	Contract     *MerkleProofParserLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts             // Call options to use throughout this session
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// MerkleProofParserLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MerkleProofParserLibraryCallerSession struct {
	Contract *MerkleProofParserLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                   // Call options to use throughout this session
}

// MerkleProofParserLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MerkleProofParserLibraryTransactorSession struct {
	Contract     *MerkleProofParserLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                   // Transaction auth options to use throughout this session
}

// MerkleProofParserLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type MerkleProofParserLibraryRaw struct {
	Contract *MerkleProofParserLibrary // Generic contract binding to access the raw methods on
}

// MerkleProofParserLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MerkleProofParserLibraryCallerRaw struct {
	Contract *MerkleProofParserLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// MerkleProofParserLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MerkleProofParserLibraryTransactorRaw struct {
	Contract *MerkleProofParserLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMerkleProofParserLibrary creates a new instance of MerkleProofParserLibrary, bound to a specific deployed contract.
func NewMerkleProofParserLibrary(address common.Address, backend bind.ContractBackend) (*MerkleProofParserLibrary, error) {
	contract, err := bindMerkleProofParserLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MerkleProofParserLibrary{MerkleProofParserLibraryCaller: MerkleProofParserLibraryCaller{contract: contract}, MerkleProofParserLibraryTransactor: MerkleProofParserLibraryTransactor{contract: contract}, MerkleProofParserLibraryFilterer: MerkleProofParserLibraryFilterer{contract: contract}}, nil
}

// NewMerkleProofParserLibraryCaller creates a new read-only instance of MerkleProofParserLibrary, bound to a specific deployed contract.
func NewMerkleProofParserLibraryCaller(address common.Address, caller bind.ContractCaller) (*MerkleProofParserLibraryCaller, error) {
	contract, err := bindMerkleProofParserLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MerkleProofParserLibraryCaller{contract: contract}, nil
}

// NewMerkleProofParserLibraryTransactor creates a new write-only instance of MerkleProofParserLibrary, bound to a specific deployed contract.
func NewMerkleProofParserLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*MerkleProofParserLibraryTransactor, error) {
	contract, err := bindMerkleProofParserLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MerkleProofParserLibraryTransactor{contract: contract}, nil
}

// NewMerkleProofParserLibraryFilterer creates a new log filterer instance of MerkleProofParserLibrary, bound to a specific deployed contract.
func NewMerkleProofParserLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*MerkleProofParserLibraryFilterer, error) {
	contract, err := bindMerkleProofParserLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MerkleProofParserLibraryFilterer{contract: contract}, nil
}

// bindMerkleProofParserLibrary binds a generic wrapper to an already deployed contract.
func bindMerkleProofParserLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MerkleProofParserLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MerkleProofParserLibrary *MerkleProofParserLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MerkleProofParserLibrary.Contract.MerkleProofParserLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MerkleProofParserLibrary *MerkleProofParserLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MerkleProofParserLibrary.Contract.MerkleProofParserLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MerkleProofParserLibrary *MerkleProofParserLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MerkleProofParserLibrary.Contract.MerkleProofParserLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MerkleProofParserLibrary *MerkleProofParserLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MerkleProofParserLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MerkleProofParserLibrary *MerkleProofParserLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MerkleProofParserLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MerkleProofParserLibrary *MerkleProofParserLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MerkleProofParserLibrary.Contract.contract.Transact(opts, method, params...)
}

// MigrateETHDKGMetaData contains all meta data concerning the MigrateETHDKG contract.
var MigrateETHDKGMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_ethHeight\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_madHeight\",\"type\":\"uint32\"},{\"internalType\":\"uint256[4]\",\"name\":\"_master_public_key\",\"type\":\"uint256[4]\"},{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[4][]\",\"name\":\"_gpkj\",\"type\":\"uint256[4][]\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
<<<<<<< Updated upstream
	Bin: "0x608060405234801561001057600080fd5b50600061002561007060201b6109f61760201c565b9050338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061009d565b6000807f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90508091505090565b61149e806100ac6000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063dc97805911610050578063dc978059146100b9578063e348da13146100d5578063fad8b32a146100f157610072565b80636053617214610077578063ab033ea914610081578063d35d5cbf1461009d575b600080fd5b61007f61010d565b005b61009b60048036038101906100969190610ba9565b610218565b005b6100b760048036038101906100b29190610f15565b61030a565b005b6100d360048036038101906100ce9190610ba9565b61064f565b005b6100ef60048036038101906100ea9190610ba9565b610741565b005b61010b60048036038101906101069190610ba9565b6108a0565b005b60006101176109f6565b90508060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a29061105f565b60405180910390fd5b8060020160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006102226109f6565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146102b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ad906110f1565b60405180910390fd5b60006102c06109f6565b9050828160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b60006103146109f6565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166103a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039b90611183565b60405180910390fd5b60006103ae610a23565b9050838160000190805190602001906103c8929190610a50565b5084816009019060046103dc929190610ada565b507f1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f845189898989600060048110610417576104166111a3565b5b60200201518a6001600481106104305761042f6111a3565b5b60200201518b600260048110610449576104486111a3565b5b60200201518c600360048110610462576104616111a3565b5b602002015160405161047b98979695949392919061120c565b60405180910390a160005b84518110156106445760008582815181106104a4576104a36111a3565b5b602002602001015190508482815181106104c1576104c06111a3565b5b60200260200101518360050160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020906004610518929190610ada565b507f113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0818b60018561054991906112b9565b88868151811061055c5761055b6111a3565b5b6020026020010151600060048110610577576105766111a3565b5b602002015189878151811061058f5761058e6111a3565b5b60200260200101516001600481106105aa576105a96111a3565b5b60200201518a88815181106105c2576105c16111a3565b5b60200260200101516002600481106105dd576105dc6111a3565b5b60200201518b89815181106105f5576105f46111a3565b5b60200260200101516003600481106106105761060f6111a3565b5b6020020151604051610628979695949392919061131e565b60405180910390a150808061063c9061138d565b915050610486565b505050505050505050565b60006106596109f6565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146106ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e4906110f1565b60405180910390fd5b60006106f76109f6565b9050828160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b600061074b6109f6565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806107f657508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610835576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082c90611448565b60405180910390fd5b600061083f6109f6565b905060018160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b60006108aa6109f6565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061095557508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610994576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098b90611448565b60405180910390fd5b600061099e6109f6565b90508060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff0219169055505050565b6000807f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90508091505090565b6000807fd2d37756412c577f56b4802b8e643c9a817fa92cc18ff383f317fce7fab4282b90508091505090565b828054828255906000526020600020908101928215610ac9579160200282015b82811115610ac85782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a70565b5b509050610ad69190610b1a565b5090565b8260048101928215610b09579160200282015b82811115610b08578251825591602001919060010190610aed565b5b509050610b169190610b1a565b5090565b5b80821115610b33576000816000905550600101610b1b565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b7682610b4b565b9050919050565b610b8681610b6b565b8114610b9157600080fd5b50565b600081359050610ba381610b7d565b92915050565b600060208284031215610bbf57610bbe610b41565b5b6000610bcd84828501610b94565b91505092915050565b6000819050919050565b610be981610bd6565b8114610bf457600080fd5b50565b600081359050610c0681610be0565b92915050565b600063ffffffff82169050919050565b610c2581610c0c565b8114610c3057600080fd5b50565b600081359050610c4281610c1c565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c9682610c4d565b810181811067ffffffffffffffff82111715610cb557610cb4610c5e565b5b80604052505050565b6000610cc8610b37565b9050610cd48282610c8d565b919050565b600067ffffffffffffffff821115610cf457610cf3610c5e565b5b602082029050919050565b600080fd5b6000610d17610d1284610cd9565b610cbe565b90508060208402830185811115610d3157610d30610cff565b5b835b81811015610d5a5780610d468882610bf7565b845260208401935050602081019050610d33565b5050509392505050565b600082601f830112610d7957610d78610c48565b5b6004610d86848285610d04565b91505092915050565b600067ffffffffffffffff821115610daa57610da9610c5e565b5b602082029050602081019050919050565b6000610dce610dc984610d8f565b610cbe565b90508083825260208201905060208402830185811115610df157610df0610cff565b5b835b81811015610e1a5780610e068882610b94565b845260208401935050602081019050610df3565b5050509392505050565b600082601f830112610e3957610e38610c48565b5b8135610e49848260208601610dbb565b91505092915050565b600067ffffffffffffffff821115610e6d57610e6c610c5e565b5b602082029050602081019050919050565b6000610e91610e8c84610e52565b610cbe565b90508083825260208201905060808402830185811115610eb457610eb3610cff565b5b835b81811015610edd5780610ec98882610d64565b845260208401935050608081019050610eb6565b5050509392505050565b600082601f830112610efc57610efb610c48565b5b8135610f0c848260208601610e7e565b91505092915050565b6000806000806000806101208789031215610f3357610f32610b41565b5b6000610f4189828a01610bf7565b9650506020610f5289828a01610c33565b9550506040610f6389828a01610c33565b9450506060610f7489828a01610d64565b93505060e087013567ffffffffffffffff811115610f9557610f94610b46565b5b610fa189828a01610e24565b92505061010087013567ffffffffffffffff811115610fc357610fc2610b46565b5b610fcf89828a01610ee7565b9150509295509295509295565b600082825260208201905092915050565b7f41636365737320436f6e74726f6c3a206f776e657273686970206e6f7420677260008201527f616e746564000000000000000000000000000000000000000000000000000000602082015250565b6000611049602583610fdc565b915061105482610fed565b604082019050919050565b600060208201905081810360008301526110788161103c565b9050919050565b7f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60008201527f6c6f776564000000000000000000000000000000000000000000000000000000602082015250565b60006110db602583610fdc565b91506110e68261107f565b604082019050919050565b6000602082019050818103600083015261110a816110ce565b9050919050565b7f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160008201527f6c6c6f7765640000000000000000000000000000000000000000000000000000602082015250565b600061116d602683610fdc565b915061117882611111565b604082019050919050565b6000602082019050818103600083015261119c81611160565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060ff82169050919050565b6111e8816111d2565b82525050565b6111f781610bd6565b82525050565b61120681610c0c565b82525050565b600061010082019050611222600083018b6111df565b61122f602083018a6111ee565b61123c60408301896111fd565b61124960608301886111fd565b61125660808301876111ee565b61126360a08301866111ee565b61127060c08301856111ee565b61127d60e08301846111ee565b9998505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006112c482610bd6565b91506112cf83610bd6565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156113045761130361128a565b5b828201905092915050565b61131881610b6b565b82525050565b600060e082019050611333600083018a61130f565b61134060208301896111ee565b61134d60408301886111ee565b61135a60608301876111ee565b61136760808301866111ee565b61137460a08301856111ee565b61138160c08301846111ee565b98975050505050505050565b600061139882610bd6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156113cb576113ca61128a565b5b600182019050919050565b7f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060008201527f657261746f7220616c6c6f776564000000000000000000000000000000000000602082015250565b6000611432602e83610fdc565b915061143d826113d6565b604082019050919050565b6000602082019050818103600083015261146181611425565b905091905056fea2646970667358221220653f35a66c19511971febf9b5bdea8122f6d2ad989484c1e4667dfb0c882c9bc64736f6c634300080b0033",
=======
	Bin: "0x608060405234801561001057600080fd5b50600061002561003e60201b610aeb1760201c565b60010180546001600160a01b0319163317905550610062565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90565b610fa3806100716000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063dc97805911610050578063dc978059146100a7578063e348da13146100ba578063fad8b32a146100cd57600080fd5b80636053617214610077578063ab033ea914610081578063d35d5cbf14610094575b600080fd5b61007f6100e0565b005b61007f61008f366004610c05565b61020a565b61007f6100a2366004610dbf565b610359565b61007f6100b5366004610c05565b6106bd565b61007f6100c8366004610c05565b61080c565b61007f6100db366004610c05565b61097d565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520c547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff1633146101cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f776e657273686970206e6f7420677260448201527f616e74656400000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6002810180547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169091556001909101805490911633179055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff1633146102f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60448201527f6c6f77656400000000000000000000000000000000000000000000000000000060648201526084016101c4565b507f31434318735a8e6385da596be365952169e52986860b974818986b522d23520d80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a602081905260409091205460ff1661041a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f776564000000000000000000000000000000000000000000000000000060648201526084016101c4565b82517fd2d37756412c577f56b4802b8e643c9a817fa92cc18ff383f317fce7fab4282b9061044e9082906020870190610b0f565b5061045e60098201866004610b99565b50835185516020808801516040808a01516060808c0151835160ff90981688529487018f905263ffffffff8e8116888501528d1690870152608086019490945260a085019190915260c084019290925260e0830152517f1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f918190036101000190a160005b84518110156106b25760008582815181106104ff576104ff610ebe565b6020026020010151905084828151811061051b5761051b610ebe565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff8316600090815260058601909252604090912061055a916004610b99565b507f113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0818b610589856001610f1c565b88868151811061059b5761059b610ebe565b60200260200101516000600481106105b5576105b5610ebe565b60200201518987815181106105cc576105cc610ebe565b60200260200101516001600481106105e6576105e6610ebe565b60200201518a88815181106105fd576105fd610ebe565b602002602001015160026004811061061757610617610ebe565b60200201518b898151811061062e5761062e610ebe565b602002602001015160036004811061064857610648610ebe565b602090810291909101516040805173ffffffffffffffffffffffffffffffffffffffff9099168952918801969096528601939093526060850191909152608084015260a083015260c082015260e00160405180910390a150806106aa81610f34565b9150506104e2565b505050505050505050565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff1633146107a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60448201527f6c6f77656400000000000000000000000000000000000000000000000000000060648201526084016101c4565b507f31434318735a8e6385da596be365952169e52986860b974818986b522d23520c80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff1633148061088257503360009081526020829052604090205460ff165b61090e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060448201527f657261746f7220616c6c6f77656400000000000000000000000000000000000060648201526084016101c4565b5073ffffffffffffffffffffffffffffffffffffffff1660009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff163314806109f357503360009081526020829052604090205460ff165b610a7f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060448201527f657261746f7220616c6c6f77656400000000000000000000000000000000000060648201526084016101c4565b5073ffffffffffffffffffffffffffffffffffffffff1660009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90565b828054828255906000526020600020908101928215610b89579160200282015b82811115610b8957825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178255602090920191600190910190610b2f565b50610b95929150610bc7565b5090565b8260048101928215610b89579160200282015b82811115610b89578251825591602001919060010190610bac565b5b80821115610b955760008155600101610bc8565b803573ffffffffffffffffffffffffffffffffffffffff81168114610c0057600080fd5b919050565b600060208284031215610c1757600080fd5b610c2082610bdc565b9392505050565b803563ffffffff81168114610c0057600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610cb157610cb1610c3b565b604052919050565b600082601f830112610cca57600080fd5b6040516080810181811067ffffffffffffffff82111715610ced57610ced610c3b565b604052806080840185811115610d0257600080fd5b845b81811015610d1c578035835260209283019201610d04565b509195945050505050565b600067ffffffffffffffff821115610d4157610d41610c3b565b5060051b60200190565b600082601f830112610d5c57600080fd5b81356020610d71610d6c83610d27565b610c6a565b82815260079290921b84018101918181019086841115610d9057600080fd5b8286015b84811015610db457610da68882610cb9565b835291830191608001610d94565b509695505050505050565b6000806000806000806101208789031215610dd957600080fd5b863595506020610dea818901610c27565b9550610df860408901610c27565b9450610e078960608a01610cb9565b935060e088013567ffffffffffffffff80821115610e2457600080fd5b818a0191508a601f830112610e3857600080fd5b8135610e46610d6c82610d27565b81815260059190911b8301840190848101908d831115610e6557600080fd5b938501935b82851015610e8a57610e7b85610bdc565b82529385019390850190610e6a565b965050506101008a0135925080831115610ea357600080fd5b5050610eb189828a01610d4b565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115610f2f57610f2f610eed565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610f6657610f66610eed565b506001019056fea2646970667358221220373d24ed1ebf3c5eb631cbe56635f2ecb84a9eaf6530e6cd461471afb23ed6fc64736f6c634300080b0033",
>>>>>>> Stashed changes
}

// MigrateETHDKGABI is the input ABI used to generate the binding from.
// Deprecated: Use MigrateETHDKGMetaData.ABI instead.
var MigrateETHDKGABI = MigrateETHDKGMetaData.ABI

// MigrateETHDKGBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MigrateETHDKGMetaData.Bin instead.
var MigrateETHDKGBin = MigrateETHDKGMetaData.Bin

// DeployMigrateETHDKG deploys a new Ethereum contract, binding an instance of MigrateETHDKG to it.
func DeployMigrateETHDKG(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MigrateETHDKG, error) {
	parsed, err := MigrateETHDKGMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MigrateETHDKGBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MigrateETHDKG{MigrateETHDKGCaller: MigrateETHDKGCaller{contract: contract}, MigrateETHDKGTransactor: MigrateETHDKGTransactor{contract: contract}, MigrateETHDKGFilterer: MigrateETHDKGFilterer{contract: contract}}, nil
}

// MigrateETHDKG is an auto generated Go binding around an Ethereum contract.
type MigrateETHDKG struct {
	MigrateETHDKGCaller     // Read-only binding to the contract
	MigrateETHDKGTransactor // Write-only binding to the contract
	MigrateETHDKGFilterer   // Log filterer for contract events
}

// MigrateETHDKGCaller is an auto generated read-only Go binding around an Ethereum contract.
type MigrateETHDKGCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MigrateETHDKGTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MigrateETHDKGTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MigrateETHDKGFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MigrateETHDKGFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MigrateETHDKGSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MigrateETHDKGSession struct {
	Contract     *MigrateETHDKG    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MigrateETHDKGCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MigrateETHDKGCallerSession struct {
	Contract *MigrateETHDKGCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// MigrateETHDKGTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MigrateETHDKGTransactorSession struct {
	Contract     *MigrateETHDKGTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// MigrateETHDKGRaw is an auto generated low-level Go binding around an Ethereum contract.
type MigrateETHDKGRaw struct {
	Contract *MigrateETHDKG // Generic contract binding to access the raw methods on
}

// MigrateETHDKGCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MigrateETHDKGCallerRaw struct {
	Contract *MigrateETHDKGCaller // Generic read-only contract binding to access the raw methods on
}

// MigrateETHDKGTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MigrateETHDKGTransactorRaw struct {
	Contract *MigrateETHDKGTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMigrateETHDKG creates a new instance of MigrateETHDKG, bound to a specific deployed contract.
func NewMigrateETHDKG(address common.Address, backend bind.ContractBackend) (*MigrateETHDKG, error) {
	contract, err := bindMigrateETHDKG(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MigrateETHDKG{MigrateETHDKGCaller: MigrateETHDKGCaller{contract: contract}, MigrateETHDKGTransactor: MigrateETHDKGTransactor{contract: contract}, MigrateETHDKGFilterer: MigrateETHDKGFilterer{contract: contract}}, nil
}

// NewMigrateETHDKGCaller creates a new read-only instance of MigrateETHDKG, bound to a specific deployed contract.
func NewMigrateETHDKGCaller(address common.Address, caller bind.ContractCaller) (*MigrateETHDKGCaller, error) {
	contract, err := bindMigrateETHDKG(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MigrateETHDKGCaller{contract: contract}, nil
}

// NewMigrateETHDKGTransactor creates a new write-only instance of MigrateETHDKG, bound to a specific deployed contract.
func NewMigrateETHDKGTransactor(address common.Address, transactor bind.ContractTransactor) (*MigrateETHDKGTransactor, error) {
	contract, err := bindMigrateETHDKG(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MigrateETHDKGTransactor{contract: contract}, nil
}

// NewMigrateETHDKGFilterer creates a new log filterer instance of MigrateETHDKG, bound to a specific deployed contract.
func NewMigrateETHDKGFilterer(address common.Address, filterer bind.ContractFilterer) (*MigrateETHDKGFilterer, error) {
	contract, err := bindMigrateETHDKG(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MigrateETHDKGFilterer{contract: contract}, nil
}

// bindMigrateETHDKG binds a generic wrapper to an already deployed contract.
func bindMigrateETHDKG(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MigrateETHDKGABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MigrateETHDKG *MigrateETHDKGRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MigrateETHDKG.Contract.MigrateETHDKGCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MigrateETHDKG *MigrateETHDKGRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MigrateETHDKG.Contract.MigrateETHDKGTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MigrateETHDKG *MigrateETHDKGRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MigrateETHDKG.Contract.MigrateETHDKGTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MigrateETHDKG *MigrateETHDKGCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MigrateETHDKG.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MigrateETHDKG *MigrateETHDKGTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MigrateETHDKG.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MigrateETHDKG *MigrateETHDKGTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MigrateETHDKG.Contract.contract.Transact(opts, method, params...)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_MigrateETHDKG *MigrateETHDKGTransactor) GrantOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _MigrateETHDKG.contract.Transact(opts, "grantOperator", who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_MigrateETHDKG *MigrateETHDKGSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _MigrateETHDKG.Contract.GrantOperator(&_MigrateETHDKG.TransactOpts, who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_MigrateETHDKG *MigrateETHDKGTransactorSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _MigrateETHDKG.Contract.GrantOperator(&_MigrateETHDKG.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_MigrateETHDKG *MigrateETHDKGTransactor) GrantOwner(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _MigrateETHDKG.contract.Transact(opts, "grantOwner", who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_MigrateETHDKG *MigrateETHDKGSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _MigrateETHDKG.Contract.GrantOwner(&_MigrateETHDKG.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_MigrateETHDKG *MigrateETHDKGTransactorSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _MigrateETHDKG.Contract.GrantOwner(&_MigrateETHDKG.TransactOpts, who)
}

// Migrate is a paid mutator transaction binding the contract method 0xd35d5cbf.
//
// Solidity: function migrate(uint256 _epoch, uint32 _ethHeight, uint32 _madHeight, uint256[4] _master_public_key, address[] _addresses, uint256[4][] _gpkj) returns()
func (_MigrateETHDKG *MigrateETHDKGTransactor) Migrate(opts *bind.TransactOpts, _epoch *big.Int, _ethHeight uint32, _madHeight uint32, _master_public_key [4]*big.Int, _addresses []common.Address, _gpkj [][4]*big.Int) (*types.Transaction, error) {
	return _MigrateETHDKG.contract.Transact(opts, "migrate", _epoch, _ethHeight, _madHeight, _master_public_key, _addresses, _gpkj)
}

// Migrate is a paid mutator transaction binding the contract method 0xd35d5cbf.
//
// Solidity: function migrate(uint256 _epoch, uint32 _ethHeight, uint32 _madHeight, uint256[4] _master_public_key, address[] _addresses, uint256[4][] _gpkj) returns()
func (_MigrateETHDKG *MigrateETHDKGSession) Migrate(_epoch *big.Int, _ethHeight uint32, _madHeight uint32, _master_public_key [4]*big.Int, _addresses []common.Address, _gpkj [][4]*big.Int) (*types.Transaction, error) {
	return _MigrateETHDKG.Contract.Migrate(&_MigrateETHDKG.TransactOpts, _epoch, _ethHeight, _madHeight, _master_public_key, _addresses, _gpkj)
}

// Migrate is a paid mutator transaction binding the contract method 0xd35d5cbf.
//
// Solidity: function migrate(uint256 _epoch, uint32 _ethHeight, uint32 _madHeight, uint256[4] _master_public_key, address[] _addresses, uint256[4][] _gpkj) returns()
func (_MigrateETHDKG *MigrateETHDKGTransactorSession) Migrate(_epoch *big.Int, _ethHeight uint32, _madHeight uint32, _master_public_key [4]*big.Int, _addresses []common.Address, _gpkj [][4]*big.Int) (*types.Transaction, error) {
	return _MigrateETHDKG.Contract.Migrate(&_MigrateETHDKG.TransactOpts, _epoch, _ethHeight, _madHeight, _master_public_key, _addresses, _gpkj)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_MigrateETHDKG *MigrateETHDKGTransactor) RevokeOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _MigrateETHDKG.contract.Transact(opts, "revokeOperator", who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_MigrateETHDKG *MigrateETHDKGSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _MigrateETHDKG.Contract.RevokeOperator(&_MigrateETHDKG.TransactOpts, who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_MigrateETHDKG *MigrateETHDKGTransactorSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _MigrateETHDKG.Contract.RevokeOperator(&_MigrateETHDKG.TransactOpts, who)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_MigrateETHDKG *MigrateETHDKGTransactor) SetGovernance(opts *bind.TransactOpts, governance_ common.Address) (*types.Transaction, error) {
	return _MigrateETHDKG.contract.Transact(opts, "setGovernance", governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_MigrateETHDKG *MigrateETHDKGSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _MigrateETHDKG.Contract.SetGovernance(&_MigrateETHDKG.TransactOpts, governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_MigrateETHDKG *MigrateETHDKGTransactorSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _MigrateETHDKG.Contract.SetGovernance(&_MigrateETHDKG.TransactOpts, governance_)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_MigrateETHDKG *MigrateETHDKGTransactor) TakeOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MigrateETHDKG.contract.Transact(opts, "takeOwnership")
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_MigrateETHDKG *MigrateETHDKGSession) TakeOwnership() (*types.Transaction, error) {
	return _MigrateETHDKG.Contract.TakeOwnership(&_MigrateETHDKG.TransactOpts)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_MigrateETHDKG *MigrateETHDKGTransactorSession) TakeOwnership() (*types.Transaction, error) {
	return _MigrateETHDKG.Contract.TakeOwnership(&_MigrateETHDKG.TransactOpts)
}

// MigrateParticipantsFacetMetaData contains all meta data concerning the MigrateParticipantsFacet contract.
var MigrateParticipantsFacetMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"_madID\",\"type\":\"uint256[2]\"}],\"name\":\"addValidatorImmediate\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"_madID\",\"type\":\"uint256[2]\"}],\"name\":\"removeValidatorImmediate\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
<<<<<<< Updated upstream
	Bin: "",
=======
	Bin: "0x608060405234801561001057600080fd5b50600061002561003e60201b610fde1760201c565b60010180546001600160a01b0319163317905550610062565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90565b6112b8806100716000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c8063ab033ea911610076578063dc9780591161005b578063dc97805914610109578063e348da131461011c578063fad8b32a1461012f57600080fd5b8063ab033ea9146100f6578063be9a6555146100d157600080fd5b806306246a1d146100a857806307da68f5146100d157806360536172146100db57806371612d07146100e3575b600080fd5b6100bb6100b63660046110fc565b610142565b60405160ff909116815260200160405180910390f35b6100d96105b7565b005b6100d961067b565b6100bb6100f13660046110fc565b6107a0565b6100d9610104366004611136565b610a61565b6100d9610117366004611136565b610bb0565b6100d961012a366004611136565b610cff565b6100d961013d366004611136565b610e70565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020819052604082205460ff16610207576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f776564000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff841660009081527f310970b1d84cbb8af371a12019b396e9511a9b44411c1dabeec3e3d59d9a50f860205260409020547f310970b1d84cbb8af371a12019b396e9511a9b44411c1dabeec3e3d59d9a50f69060ff16156105a85773ffffffffffffffffffffffffffffffffffffffff851660009081526001808301602052604082205483549092916102ad91611187565b905060008360000182815481106102c6576102c661119e565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff1680835260018701909152604090912084905584549091508490839081106103135761031361119e565b600091825260209091200154845473ffffffffffffffffffffffffffffffffffffffff9091169085908590811061034c5761034c61119e565b600091825260209091200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9290921691909117905583548490806103ab576103ab6111cd565b600082815260208082207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff908401810180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905590920190925573ffffffffffffffffffffffffffffffffffffffff8a16825260018681018252604080842084905560028801835280842080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690556003880183528084208481559091018390557f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f89091529020547f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237ef9080156105265773ffffffffffffffffffffffffffffffffffffffff8a1660009081526009830160205260409020600401546104f49082611002565b73ffffffffffffffffffffffffffffffffffffffff8b1660009081526009840160205260408120600481019290925590555b8973ffffffffffffffffffffffffffffffffffffffff167f319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd948a60405161056c91906111fc565b60405180910390a260048601805460ff169060006105898361120f565b91906101000a81548160ff021916908360ff1602179055505050505050505b6004015460ff16949350505050565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a602081905260409091205460ff16610678576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f776564000000000000000000000000000000000000000000000000000060648201526084016101fe565b50565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520c547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff163314610763576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f776e657273686970206e6f7420677260448201527f616e74656400000000000000000000000000000000000000000000000000000060648201526084016101fe565b6002810180547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169091556001909101805490911633179055565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020819052604082205460ff16610860576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f776564000000000000000000000000000000000000000000000000000060648201526084016101fe565b73ffffffffffffffffffffffffffffffffffffffff841660009081527f310970b1d84cbb8af371a12019b396e9511a9b44411c1dabeec3e3d59d9a50f860205260409020547f310970b1d84cbb8af371a12019b396e9511a9b44411c1dabeec3e3d59d9a50f69060ff1661094d57805460018101825560008281526020812090910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff881617905560048201805460ff16916109338361124a565b91906101000a81548160ff021916908360ff160217905550505b805461095b90600190611187565b73ffffffffffffffffffffffffffffffffffffffff86166000908152600180840160209081526040808420949094556002808601825284842080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169093179092556003850190529190206109d2918690611080565b506004810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffff166201000017905560405173ffffffffffffffffffffffffffffffffffffffff8616907f8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd990610a4a9087906111fc565b60405180910390a26004015460ff16949350505050565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff163314610b49576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60448201527f6c6f77656400000000000000000000000000000000000000000000000000000060648201526084016101fe565b507f31434318735a8e6385da596be365952169e52986860b974818986b522d23520d80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff163314610c98576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60448201527f6c6f77656400000000000000000000000000000000000000000000000000000060648201526084016101fe565b507f31434318735a8e6385da596be365952169e52986860b974818986b522d23520c80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff16331480610d7557503360009081526020829052604090205460ff165b610e01576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060448201527f657261746f7220616c6c6f77656400000000000000000000000000000000000060648201526084016101fe565b5073ffffffffffffffffffffffffffffffffffffffff1660009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff16331480610ee657503360009081526020829052604090205460ff165b610f72576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060448201527f657261746f7220616c6c6f77656400000000000000000000000000000000000060648201526084016101fe565b5073ffffffffffffffffffffffffffffffffffffffff1660009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90565b60008261100f838261126a565b915081101561107a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f7700000000000000000000000060448201526064016101fe565b92915050565b82600281019282156110ae579160200282015b828111156110ae578235825591602001919060010190611093565b506110ba9291506110be565b5090565b5b808211156110ba57600081556001016110bf565b803573ffffffffffffffffffffffffffffffffffffffff811681146110f757600080fd5b919050565b6000806060838503121561110f57600080fd5b611118836110d3565b91508360608401111561112a57600080fd5b50926020919091019150565b60006020828403121561114857600080fd5b611151826110d3565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008282101561119957611199611158565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6040818101908383376000815292915050565b600060ff82168061122257611222611158565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0192915050565b600060ff821660ff81141561126157611261611158565b60010192915050565b6000821982111561127d5761127d611158565b50019056fea26469706673582212201f5961c9e52f7c997c88df3260b0ca9b3d9545d0ae36b9b3fc88fbe5a65da18264736f6c634300080b0033",
>>>>>>> Stashed changes
}

// MigrateParticipantsFacetABI is the input ABI used to generate the binding from.
// Deprecated: Use MigrateParticipantsFacetMetaData.ABI instead.
var MigrateParticipantsFacetABI = MigrateParticipantsFacetMetaData.ABI

// MigrateParticipantsFacetBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MigrateParticipantsFacetMetaData.Bin instead.
var MigrateParticipantsFacetBin = MigrateParticipantsFacetMetaData.Bin

// DeployMigrateParticipantsFacet deploys a new Ethereum contract, binding an instance of MigrateParticipantsFacet to it.
func DeployMigrateParticipantsFacet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MigrateParticipantsFacet, error) {
	parsed, err := MigrateParticipantsFacetMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MigrateParticipantsFacetBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MigrateParticipantsFacet{MigrateParticipantsFacetCaller: MigrateParticipantsFacetCaller{contract: contract}, MigrateParticipantsFacetTransactor: MigrateParticipantsFacetTransactor{contract: contract}, MigrateParticipantsFacetFilterer: MigrateParticipantsFacetFilterer{contract: contract}}, nil
}

// MigrateParticipantsFacet is an auto generated Go binding around an Ethereum contract.
type MigrateParticipantsFacet struct {
	MigrateParticipantsFacetCaller     // Read-only binding to the contract
	MigrateParticipantsFacetTransactor // Write-only binding to the contract
	MigrateParticipantsFacetFilterer   // Log filterer for contract events
}

// MigrateParticipantsFacetCaller is an auto generated read-only Go binding around an Ethereum contract.
type MigrateParticipantsFacetCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MigrateParticipantsFacetTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MigrateParticipantsFacetTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MigrateParticipantsFacetFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MigrateParticipantsFacetFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MigrateParticipantsFacetSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MigrateParticipantsFacetSession struct {
	Contract     *MigrateParticipantsFacet // Generic contract binding to set the session for
	CallOpts     bind.CallOpts             // Call options to use throughout this session
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// MigrateParticipantsFacetCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MigrateParticipantsFacetCallerSession struct {
	Contract *MigrateParticipantsFacetCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                   // Call options to use throughout this session
}

// MigrateParticipantsFacetTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MigrateParticipantsFacetTransactorSession struct {
	Contract     *MigrateParticipantsFacetTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                   // Transaction auth options to use throughout this session
}

// MigrateParticipantsFacetRaw is an auto generated low-level Go binding around an Ethereum contract.
type MigrateParticipantsFacetRaw struct {
	Contract *MigrateParticipantsFacet // Generic contract binding to access the raw methods on
}

// MigrateParticipantsFacetCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MigrateParticipantsFacetCallerRaw struct {
	Contract *MigrateParticipantsFacetCaller // Generic read-only contract binding to access the raw methods on
}

// MigrateParticipantsFacetTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MigrateParticipantsFacetTransactorRaw struct {
	Contract *MigrateParticipantsFacetTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMigrateParticipantsFacet creates a new instance of MigrateParticipantsFacet, bound to a specific deployed contract.
func NewMigrateParticipantsFacet(address common.Address, backend bind.ContractBackend) (*MigrateParticipantsFacet, error) {
	contract, err := bindMigrateParticipantsFacet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MigrateParticipantsFacet{MigrateParticipantsFacetCaller: MigrateParticipantsFacetCaller{contract: contract}, MigrateParticipantsFacetTransactor: MigrateParticipantsFacetTransactor{contract: contract}, MigrateParticipantsFacetFilterer: MigrateParticipantsFacetFilterer{contract: contract}}, nil
}

// NewMigrateParticipantsFacetCaller creates a new read-only instance of MigrateParticipantsFacet, bound to a specific deployed contract.
func NewMigrateParticipantsFacetCaller(address common.Address, caller bind.ContractCaller) (*MigrateParticipantsFacetCaller, error) {
	contract, err := bindMigrateParticipantsFacet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MigrateParticipantsFacetCaller{contract: contract}, nil
}

// NewMigrateParticipantsFacetTransactor creates a new write-only instance of MigrateParticipantsFacet, bound to a specific deployed contract.
func NewMigrateParticipantsFacetTransactor(address common.Address, transactor bind.ContractTransactor) (*MigrateParticipantsFacetTransactor, error) {
	contract, err := bindMigrateParticipantsFacet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MigrateParticipantsFacetTransactor{contract: contract}, nil
}

// NewMigrateParticipantsFacetFilterer creates a new log filterer instance of MigrateParticipantsFacet, bound to a specific deployed contract.
func NewMigrateParticipantsFacetFilterer(address common.Address, filterer bind.ContractFilterer) (*MigrateParticipantsFacetFilterer, error) {
	contract, err := bindMigrateParticipantsFacet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MigrateParticipantsFacetFilterer{contract: contract}, nil
}

// bindMigrateParticipantsFacet binds a generic wrapper to an already deployed contract.
func bindMigrateParticipantsFacet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MigrateParticipantsFacetABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MigrateParticipantsFacet *MigrateParticipantsFacetRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MigrateParticipantsFacet.Contract.MigrateParticipantsFacetCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MigrateParticipantsFacet *MigrateParticipantsFacetRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.MigrateParticipantsFacetTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MigrateParticipantsFacet *MigrateParticipantsFacetRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.MigrateParticipantsFacetTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MigrateParticipantsFacet *MigrateParticipantsFacetCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MigrateParticipantsFacet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.contract.Transact(opts, method, params...)
}

// AddValidatorImmediate is a paid mutator transaction binding the contract method 0x71612d07.
//
// Solidity: function addValidatorImmediate(address _validator, uint256[2] _madID) returns(uint8)
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactor) AddValidatorImmediate(opts *bind.TransactOpts, _validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.contract.Transact(opts, "addValidatorImmediate", _validator, _madID)
}

// AddValidatorImmediate is a paid mutator transaction binding the contract method 0x71612d07.
//
// Solidity: function addValidatorImmediate(address _validator, uint256[2] _madID) returns(uint8)
func (_MigrateParticipantsFacet *MigrateParticipantsFacetSession) AddValidatorImmediate(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.AddValidatorImmediate(&_MigrateParticipantsFacet.TransactOpts, _validator, _madID)
}

// AddValidatorImmediate is a paid mutator transaction binding the contract method 0x71612d07.
//
// Solidity: function addValidatorImmediate(address _validator, uint256[2] _madID) returns(uint8)
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactorSession) AddValidatorImmediate(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.AddValidatorImmediate(&_MigrateParticipantsFacet.TransactOpts, _validator, _madID)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactor) GrantOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.contract.Transact(opts, "grantOperator", who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.GrantOperator(&_MigrateParticipantsFacet.TransactOpts, who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactorSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.GrantOperator(&_MigrateParticipantsFacet.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactor) GrantOwner(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.contract.Transact(opts, "grantOwner", who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.GrantOwner(&_MigrateParticipantsFacet.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactorSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.GrantOwner(&_MigrateParticipantsFacet.TransactOpts, who)
}

// RemoveValidatorImmediate is a paid mutator transaction binding the contract method 0x06246a1d.
//
// Solidity: function removeValidatorImmediate(address _validator, uint256[2] _madID) returns(uint8)
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactor) RemoveValidatorImmediate(opts *bind.TransactOpts, _validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.contract.Transact(opts, "removeValidatorImmediate", _validator, _madID)
}

// RemoveValidatorImmediate is a paid mutator transaction binding the contract method 0x06246a1d.
//
// Solidity: function removeValidatorImmediate(address _validator, uint256[2] _madID) returns(uint8)
func (_MigrateParticipantsFacet *MigrateParticipantsFacetSession) RemoveValidatorImmediate(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.RemoveValidatorImmediate(&_MigrateParticipantsFacet.TransactOpts, _validator, _madID)
}

// RemoveValidatorImmediate is a paid mutator transaction binding the contract method 0x06246a1d.
//
// Solidity: function removeValidatorImmediate(address _validator, uint256[2] _madID) returns(uint8)
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactorSession) RemoveValidatorImmediate(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.RemoveValidatorImmediate(&_MigrateParticipantsFacet.TransactOpts, _validator, _madID)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactor) RevokeOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.contract.Transact(opts, "revokeOperator", who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.RevokeOperator(&_MigrateParticipantsFacet.TransactOpts, who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactorSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.RevokeOperator(&_MigrateParticipantsFacet.TransactOpts, who)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactor) SetGovernance(opts *bind.TransactOpts, governance_ common.Address) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.contract.Transact(opts, "setGovernance", governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.SetGovernance(&_MigrateParticipantsFacet.TransactOpts, governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactorSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.SetGovernance(&_MigrateParticipantsFacet.TransactOpts, governance_)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactor) Start(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.contract.Transact(opts, "start")
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetSession) Start() (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.Start(&_MigrateParticipantsFacet.TransactOpts)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactorSession) Start() (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.Start(&_MigrateParticipantsFacet.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactor) Stop(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.contract.Transact(opts, "stop")
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetSession) Stop() (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.Stop(&_MigrateParticipantsFacet.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactorSession) Stop() (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.Stop(&_MigrateParticipantsFacet.TransactOpts)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactor) TakeOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MigrateParticipantsFacet.contract.Transact(opts, "takeOwnership")
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetSession) TakeOwnership() (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.TakeOwnership(&_MigrateParticipantsFacet.TransactOpts)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_MigrateParticipantsFacet *MigrateParticipantsFacetTransactorSession) TakeOwnership() (*types.Transaction, error) {
	return _MigrateParticipantsFacet.Contract.TakeOwnership(&_MigrateParticipantsFacet.TransactOpts)
}

// MigrateSnapshotsFacetMetaData contains all meta data concerning the MigrateSnapshotsFacet contract.
var MigrateSnapshotsFacetMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signatureGroup\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_bclaims\",\"type\":\"bytes\"}],\"name\":\"snapshot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
<<<<<<< Updated upstream
	Bin: "0x608060405234801561001057600080fd5b50600061002561007060201b6109701760201c565b9050338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061009d565b6000807f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90508091505090565b61112f806100ac6000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063dc97805911610050578063dc978059146100b9578063e348da13146100d5578063fad8b32a146100f157610072565b806360536172146100775780637d7335b014610081578063ab033ea91461009d575b600080fd5b61007f61010d565b005b61009b60048036038101906100969190610bfa565b610218565b005b6100b760048036038101906100b29190610ced565b6104d7565b005b6100d360048036038101906100ce9190610ced565b6105c9565b005b6100ef60048036038101906100ea9190610ced565b6106bb565b005b61010b60048036038101906101069190610ced565b61081a565b005b6000610117610970565b90508060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a290610d9d565b60405180910390fd5b8060020160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000610222610970565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166102b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a990610e2f565b60405180910390fd5b60006102bc61099d565b9050600061030f85858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505060086109ca565b9050600061036286868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050600c6109ca565b905060008360000160008b8152602001908152602001600020905060018160000160006101000a81548160ff02191690831515021790555086868260010191906103ad929190610ab2565b5088888260020191906103c1929190610ab2565b50438160030160006101000a81548163ffffffff021916908363ffffffff160217905550818160030160046101000a81548163ffffffff021916908363ffffffff160217905550828160000160016101000a81548163ffffffff021916908363ffffffff16021790555060008460010160009054906101000a900460ff161561044957600190505b60008560010160006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff168b7f6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a86868960010160009054906101000a900460ff166040516104c293929190610e89565b60405180910390a35050505050505050505050565b60006104e1610970565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610575576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056c90610f32565b60405180910390fd5b600061057f610970565b9050828160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b60006105d3610970565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610667576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065e90610f32565b60405180910390fd5b6000610671610970565b9050828160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b60006106c5610970565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061077057508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6107af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a690610fc4565b60405180910390fd5b60006107b9610970565b905060018160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b6000610824610970565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806108cf57508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b61090e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090590610fc4565b60405180910390fd5b6000610918610970565b90508060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff0219169055505050565b6000807f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90508091505090565b6000807fd02b08f6836233a79224d6de3c3df078574b0f84d75d2a48f85a5a3cacc7291590508091505090565b6000826003836109da9190611013565b815181106109eb576109ea611069565b5b602001015160f81c60f81b60f81c60ff16905082600283610a0c9190611013565b81518110610a1d57610a1c611069565b5b602001015160f81c60f81b60f81c60ff1660088263ffffffff16901b17905082600183610a4a9190611013565b81518110610a5b57610a5a611069565b5b602001015160f81c60f81b60f81c60ff1660088263ffffffff16901b179050828281518110610a8d57610a8c611069565b5b602001015160f81c60f81b60f81c60ff1660088263ffffffff16901b17905092915050565b828054610abe906110c7565b90600052602060002090601f016020900481019282610ae05760008555610b27565b82601f10610af957803560ff1916838001178555610b27565b82800160010185558215610b27579182015b82811115610b26578235825591602001919060010190610b0b565b5b509050610b349190610b38565b5090565b5b80821115610b51576000816000905550600101610b39565b5090565b600080fd5b600080fd5b6000819050919050565b610b7281610b5f565b8114610b7d57600080fd5b50565b600081359050610b8f81610b69565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610bba57610bb9610b95565b5b8235905067ffffffffffffffff811115610bd757610bd6610b9a565b5b602083019150836001820283011115610bf357610bf2610b9f565b5b9250929050565b600080600080600060608688031215610c1657610c15610b55565b5b6000610c2488828901610b80565b955050602086013567ffffffffffffffff811115610c4557610c44610b5a565b5b610c5188828901610ba4565b9450945050604086013567ffffffffffffffff811115610c7457610c73610b5a565b5b610c8088828901610ba4565b92509250509295509295909350565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610cba82610c8f565b9050919050565b610cca81610caf565b8114610cd557600080fd5b50565b600081359050610ce781610cc1565b92915050565b600060208284031215610d0357610d02610b55565b5b6000610d1184828501610cd8565b91505092915050565b600082825260208201905092915050565b7f41636365737320436f6e74726f6c3a206f776e657273686970206e6f7420677260008201527f616e746564000000000000000000000000000000000000000000000000000000602082015250565b6000610d87602583610d1a565b9150610d9282610d2b565b604082019050919050565b60006020820190508181036000830152610db681610d7a565b9050919050565b7f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160008201527f6c6c6f7765640000000000000000000000000000000000000000000000000000602082015250565b6000610e19602683610d1a565b9150610e2482610dbd565b604082019050919050565b60006020820190508181036000830152610e4881610e0c565b9050919050565b600063ffffffff82169050919050565b610e6881610e4f565b82525050565b60008115159050919050565b610e8381610e6e565b82525050565b6000606082019050610e9e6000830186610e5f565b610eab6020830185610e5f565b610eb86040830184610e7a565b949350505050565b7f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60008201527f6c6f776564000000000000000000000000000000000000000000000000000000602082015250565b6000610f1c602583610d1a565b9150610f2782610ec0565b604082019050919050565b60006020820190508181036000830152610f4b81610f0f565b9050919050565b7f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060008201527f657261746f7220616c6c6f776564000000000000000000000000000000000000602082015250565b6000610fae602e83610d1a565b9150610fb982610f52565b604082019050919050565b60006020820190508181036000830152610fdd81610fa1565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061101e82610b5f565b915061102983610b5f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561105e5761105d610fe4565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806110df57607f821691505b602082108114156110f3576110f2611098565b5b5091905056fea26469706673582212209c94f18b1e3dba3d7f9b6f1cc100b501978f7f19849a828276c02837b020054964736f6c634300080b0033",
=======
	Bin: "0x608060405234801561001057600080fd5b50600061002561003e60201b610a5b1760201c565b60010180546001600160a01b0319163317905550610062565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90565b610df3806100716000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063dc97805911610050578063dc978059146100a7578063e348da13146100ba578063fad8b32a146100cd57600080fd5b806360536172146100775780637d7335b014610081578063ab033ea914610094575b600080fd5b61007f6100e0565b005b61007f61008f366004610c44565b61020a565b61007f6100a2366004610cbe565b6104de565b61007f6100b5366004610cbe565b61062d565b61007f6100c8366004610cbe565b61077c565b61007f6100db366004610cbe565b6108ed565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520c547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff1633146101cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f776e657273686970206e6f7420677260448201527f616e74656400000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6002810180547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169091556001909101805490911633179055565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a602081905260409091205460ff166102cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f776564000000000000000000000000000000000000000000000000000060648201526084016101c4565b60007fd02b08f6836233a79224d6de3c3df078574b0f84d75d2a48f85a5a3cacc729159050600061033485858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525060089250610a7f915050565b9050600061037a86868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250600c9250610a7f915050565b60008a815260208590526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081178255919250906103c49082018888610b44565b506103d3600282018a8a610b44565b5060038101805463ffffffff848116640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000090921643821617919091179091558154908416610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000ff909116178155600184015460009060ff161561045c575060015b6001850180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690556040805163ffffffff868116825285166020820152600081830152905133918d917f6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a9181900360600190a35050505050505050505050565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff1633146105c6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60448201527f6c6f77656400000000000000000000000000000000000000000000000000000060648201526084016101c4565b507f31434318735a8e6385da596be365952169e52986860b974818986b522d23520d80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff163314610715576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60448201527f6c6f77656400000000000000000000000000000000000000000000000000000060648201526084016101c4565b507f31434318735a8e6385da596be365952169e52986860b974818986b522d23520c80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff163314806107f257503360009081526020829052604090205460ff165b61087e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060448201527f657261746f7220616c6c6f77656400000000000000000000000000000000000060648201526084016101c4565b5073ffffffffffffffffffffffffffffffffffffffff1660009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff1633148061096357503360009081526020829052604090205460ff165b6109ef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060448201527f657261746f7220616c6c6f77656400000000000000000000000000000000000060648201526084016101c4565b5073ffffffffffffffffffffffffffffffffffffffff1660009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90565b600082610a8d836003610cfb565b81518110610a9d57610a9d610d3a565b016020015160f81c905082610ab3836002610cfb565b81518110610ac357610ac3610d3a565b60209101015160f81c60089190911b64ffffffff00161782610ae6836001610cfb565b81518110610af657610af6610d3a565b602001015160f81c60f81b60f81c60ff1660088263ffffffff16901b179050828281518110610b2757610b27610d3a565b60209101015160f81c60089190911b64ffffffff00161792915050565b828054610b5090610d69565b90600052602060002090601f016020900481019282610b725760008555610bd6565b82601f10610ba9578280017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00823516178555610bd6565b82800160010185558215610bd6579182015b82811115610bd6578235825591602001919060010190610bbb565b50610be2929150610be6565b5090565b5b80821115610be25760008155600101610be7565b60008083601f840112610c0d57600080fd5b50813567ffffffffffffffff811115610c2557600080fd5b602083019150836020828501011115610c3d57600080fd5b9250929050565b600080600080600060608688031215610c5c57600080fd5b85359450602086013567ffffffffffffffff80821115610c7b57600080fd5b610c8789838a01610bfb565b90965094506040880135915080821115610ca057600080fd5b50610cad88828901610bfb565b969995985093965092949392505050565b600060208284031215610cd057600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610cf457600080fd5b9392505050565b60008219821115610d35577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600181811c90821680610d7d57607f821691505b60208210811415610db7577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b5091905056fea26469706673582212209a6ada66955c7d1246bd6823cc6219919d0f630c6add4cd4ebd0edeb54da7e8864736f6c634300080b0033",
>>>>>>> Stashed changes
}

// MigrateSnapshotsFacetABI is the input ABI used to generate the binding from.
// Deprecated: Use MigrateSnapshotsFacetMetaData.ABI instead.
var MigrateSnapshotsFacetABI = MigrateSnapshotsFacetMetaData.ABI

// MigrateSnapshotsFacetBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MigrateSnapshotsFacetMetaData.Bin instead.
var MigrateSnapshotsFacetBin = MigrateSnapshotsFacetMetaData.Bin

// DeployMigrateSnapshotsFacet deploys a new Ethereum contract, binding an instance of MigrateSnapshotsFacet to it.
func DeployMigrateSnapshotsFacet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MigrateSnapshotsFacet, error) {
	parsed, err := MigrateSnapshotsFacetMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MigrateSnapshotsFacetBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MigrateSnapshotsFacet{MigrateSnapshotsFacetCaller: MigrateSnapshotsFacetCaller{contract: contract}, MigrateSnapshotsFacetTransactor: MigrateSnapshotsFacetTransactor{contract: contract}, MigrateSnapshotsFacetFilterer: MigrateSnapshotsFacetFilterer{contract: contract}}, nil
}

// MigrateSnapshotsFacet is an auto generated Go binding around an Ethereum contract.
type MigrateSnapshotsFacet struct {
	MigrateSnapshotsFacetCaller     // Read-only binding to the contract
	MigrateSnapshotsFacetTransactor // Write-only binding to the contract
	MigrateSnapshotsFacetFilterer   // Log filterer for contract events
}

// MigrateSnapshotsFacetCaller is an auto generated read-only Go binding around an Ethereum contract.
type MigrateSnapshotsFacetCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MigrateSnapshotsFacetTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MigrateSnapshotsFacetTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MigrateSnapshotsFacetFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MigrateSnapshotsFacetFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MigrateSnapshotsFacetSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MigrateSnapshotsFacetSession struct {
	Contract     *MigrateSnapshotsFacet // Generic contract binding to set the session for
	CallOpts     bind.CallOpts          // Call options to use throughout this session
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// MigrateSnapshotsFacetCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MigrateSnapshotsFacetCallerSession struct {
	Contract *MigrateSnapshotsFacetCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                // Call options to use throughout this session
}

// MigrateSnapshotsFacetTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MigrateSnapshotsFacetTransactorSession struct {
	Contract     *MigrateSnapshotsFacetTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                // Transaction auth options to use throughout this session
}

// MigrateSnapshotsFacetRaw is an auto generated low-level Go binding around an Ethereum contract.
type MigrateSnapshotsFacetRaw struct {
	Contract *MigrateSnapshotsFacet // Generic contract binding to access the raw methods on
}

// MigrateSnapshotsFacetCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MigrateSnapshotsFacetCallerRaw struct {
	Contract *MigrateSnapshotsFacetCaller // Generic read-only contract binding to access the raw methods on
}

// MigrateSnapshotsFacetTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MigrateSnapshotsFacetTransactorRaw struct {
	Contract *MigrateSnapshotsFacetTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMigrateSnapshotsFacet creates a new instance of MigrateSnapshotsFacet, bound to a specific deployed contract.
func NewMigrateSnapshotsFacet(address common.Address, backend bind.ContractBackend) (*MigrateSnapshotsFacet, error) {
	contract, err := bindMigrateSnapshotsFacet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MigrateSnapshotsFacet{MigrateSnapshotsFacetCaller: MigrateSnapshotsFacetCaller{contract: contract}, MigrateSnapshotsFacetTransactor: MigrateSnapshotsFacetTransactor{contract: contract}, MigrateSnapshotsFacetFilterer: MigrateSnapshotsFacetFilterer{contract: contract}}, nil
}

// NewMigrateSnapshotsFacetCaller creates a new read-only instance of MigrateSnapshotsFacet, bound to a specific deployed contract.
func NewMigrateSnapshotsFacetCaller(address common.Address, caller bind.ContractCaller) (*MigrateSnapshotsFacetCaller, error) {
	contract, err := bindMigrateSnapshotsFacet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MigrateSnapshotsFacetCaller{contract: contract}, nil
}

// NewMigrateSnapshotsFacetTransactor creates a new write-only instance of MigrateSnapshotsFacet, bound to a specific deployed contract.
func NewMigrateSnapshotsFacetTransactor(address common.Address, transactor bind.ContractTransactor) (*MigrateSnapshotsFacetTransactor, error) {
	contract, err := bindMigrateSnapshotsFacet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MigrateSnapshotsFacetTransactor{contract: contract}, nil
}

// NewMigrateSnapshotsFacetFilterer creates a new log filterer instance of MigrateSnapshotsFacet, bound to a specific deployed contract.
func NewMigrateSnapshotsFacetFilterer(address common.Address, filterer bind.ContractFilterer) (*MigrateSnapshotsFacetFilterer, error) {
	contract, err := bindMigrateSnapshotsFacet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MigrateSnapshotsFacetFilterer{contract: contract}, nil
}

// bindMigrateSnapshotsFacet binds a generic wrapper to an already deployed contract.
func bindMigrateSnapshotsFacet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MigrateSnapshotsFacetABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MigrateSnapshotsFacet.Contract.MigrateSnapshotsFacetCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.Contract.MigrateSnapshotsFacetTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.Contract.MigrateSnapshotsFacetTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MigrateSnapshotsFacet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.Contract.contract.Transact(opts, method, params...)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetTransactor) GrantOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.contract.Transact(opts, "grantOperator", who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.Contract.GrantOperator(&_MigrateSnapshotsFacet.TransactOpts, who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetTransactorSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.Contract.GrantOperator(&_MigrateSnapshotsFacet.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetTransactor) GrantOwner(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.contract.Transact(opts, "grantOwner", who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.Contract.GrantOwner(&_MigrateSnapshotsFacet.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetTransactorSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.Contract.GrantOwner(&_MigrateSnapshotsFacet.TransactOpts, who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetTransactor) RevokeOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.contract.Transact(opts, "revokeOperator", who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.Contract.RevokeOperator(&_MigrateSnapshotsFacet.TransactOpts, who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetTransactorSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.Contract.RevokeOperator(&_MigrateSnapshotsFacet.TransactOpts, who)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetTransactor) SetGovernance(opts *bind.TransactOpts, governance_ common.Address) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.contract.Transact(opts, "setGovernance", governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.Contract.SetGovernance(&_MigrateSnapshotsFacet.TransactOpts, governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetTransactorSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.Contract.SetGovernance(&_MigrateSnapshotsFacet.TransactOpts, governance_)
}

// Snapshot is a paid mutator transaction binding the contract method 0x7d7335b0.
//
// Solidity: function snapshot(uint256 snapshotId, bytes _signatureGroup, bytes _bclaims) returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetTransactor) Snapshot(opts *bind.TransactOpts, snapshotId *big.Int, _signatureGroup []byte, _bclaims []byte) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.contract.Transact(opts, "snapshot", snapshotId, _signatureGroup, _bclaims)
}

// Snapshot is a paid mutator transaction binding the contract method 0x7d7335b0.
//
// Solidity: function snapshot(uint256 snapshotId, bytes _signatureGroup, bytes _bclaims) returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetSession) Snapshot(snapshotId *big.Int, _signatureGroup []byte, _bclaims []byte) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.Contract.Snapshot(&_MigrateSnapshotsFacet.TransactOpts, snapshotId, _signatureGroup, _bclaims)
}

// Snapshot is a paid mutator transaction binding the contract method 0x7d7335b0.
//
// Solidity: function snapshot(uint256 snapshotId, bytes _signatureGroup, bytes _bclaims) returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetTransactorSession) Snapshot(snapshotId *big.Int, _signatureGroup []byte, _bclaims []byte) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.Contract.Snapshot(&_MigrateSnapshotsFacet.TransactOpts, snapshotId, _signatureGroup, _bclaims)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetTransactor) TakeOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.contract.Transact(opts, "takeOwnership")
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetSession) TakeOwnership() (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.Contract.TakeOwnership(&_MigrateSnapshotsFacet.TransactOpts)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_MigrateSnapshotsFacet *MigrateSnapshotsFacetTransactorSession) TakeOwnership() (*types.Transaction, error) {
	return _MigrateSnapshotsFacet.Contract.TakeOwnership(&_MigrateSnapshotsFacet.TransactOpts)
}

// MigrateStakingFacetMetaData contains all meta data concerning the MigrateStakingFacet contract.
var MigrateStakingFacetMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedReward\",\"type\":\"uint256\"}],\"name\":\"setBalancesFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
<<<<<<< Updated upstream
	Bin: "",
=======
	Bin: "0x608060405234801561001057600080fd5b50600061002561003e60201b610ed21760201c565b60010180546001600160a01b0319163317905550610062565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90565b61108e806100716000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063dc9780591161005b578063dc978059146100b2578063e348da13146100c5578063e86a737d146100d8578063fad8b32a146100eb57600080fd5b806307da68f51461008d5780636053617214610097578063ab033ea91461009f578063be9a65551461008d575b600080fd5b6100956100fe565b005b6100956101c7565b6100956100ad366004610f9d565b6102ec565b6100956100c0366004610f9d565b61043b565b6100956100d3366004610f9d565b61058a565b6100956100e6366004610fbf565b6106fb565b6100956100f9366004610f9d565b610d64565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a602081905260409091205460ff166101c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f776564000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b50565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520c547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff1633146102af576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f776e657273686970206e6f7420677260448201527f616e74656400000000000000000000000000000000000000000000000000000060648201526084016101bb565b6002810180547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169091556001909101805490911633179055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff1633146103d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60448201527f6c6f77656400000000000000000000000000000000000000000000000000000060648201526084016101bb565b507f31434318735a8e6385da596be365952169e52986860b974818986b522d23520d80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff163314610523576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60448201527f6c6f77656400000000000000000000000000000000000000000000000000000060648201526084016101bb565b507f31434318735a8e6385da596be365952169e52986860b974818986b522d23520c80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff1633148061060057503360009081526020829052604090205460ff165b61068c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060448201527f657261746f7220616c6c6f77656400000000000000000000000000000000000060648201526084016101bb565b5073ffffffffffffffffffffffffffffffffffffffff1660009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a602081905260409091205460ff166107bc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f776564000000000000000000000000000000000000000000000000000060648201526084016101bb565b7fcab1f840c5079216f50ee5ceadd06b2639a4db685e2943cdfe10511c4e47eee4805460ff1615610849576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f69732073746f707065640000000000000000000000000000000000000000000060448201526064016101bb565b73ffffffffffffffffffffffffffffffffffffffff861660009081527f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f860205260409020547f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237ef908087111561095a5760006108c48883610ef6565b60078401546040517f40c10f190000000000000000000000000000000000000000000000000000000081523060048201526024810183905291925073ffffffffffffffffffffffffffffffffffffffff169081906340c10f1990604401600060405180830381600087803b15801561093b57600080fd5b505af115801561094f573d6000803e3d6000fd5b505050505050610a0f565b80871015610a0f57600061096e8289610ef6565b60078401546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810183905291925073ffffffffffffffffffffffffffffffffffffffff169063a9059cbb906044016020604051808303816000875af11580156109e8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0c9190610ff8565b50505b73ffffffffffffffffffffffffffffffffffffffff8816600090815260098301602052604090208781556004015480871115610ae7576000610a518883610ef6565b60078501546040517f40c10f190000000000000000000000000000000000000000000000000000000081523060048201526024810183905291925073ffffffffffffffffffffffffffffffffffffffff169081906340c10f1990604401600060405180830381600087803b158015610ac857600080fd5b505af1158015610adc573d6000803e3d6000fd5b505050505050610b9c565b80871015610b9c576000610afb8289610ef6565b60078501546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810183905291925073ffffffffffffffffffffffffffffffffffffffff169063a9059cbb906044016020604051808303816000875af1158015610b75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b999190610ff8565b50505b73ffffffffffffffffffffffffffffffffffffffff891660009081526009840160205260409020600481018890556003015480871115610c75576000610be28883610ef6565b60088601546040517f40c10f190000000000000000000000000000000000000000000000000000000081523060048201526024810183905291925073ffffffffffffffffffffffffffffffffffffffff16906340c10f1990604401600060405180830381600087803b158015610c5757600080fd5b505af1158015610c6b573d6000803e3d6000fd5b5050505050610d2a565b80871015610d2a576000610c898289610ef6565b60088601546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810183905291925073ffffffffffffffffffffffffffffffffffffffff169063a9059cbb906044016020604051808303816000875af1158015610d03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d279190610ff8565b50505b50505073ffffffffffffffffffffffffffffffffffffffff9096166000908152600990960160205250506040909320600301929092555050565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff16331480610dda57503360009081526020829052604090205460ff165b610e66576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060448201527f657261746f7220616c6c6f77656400000000000000000000000000000000000060648201526084016101bb565b5073ffffffffffffffffffffffffffffffffffffffff1660009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90565b600082610f03838261101a565b9150811115610f6e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f64732d6d6174682d7375622d756e646572666c6f77000000000000000000000060448201526064016101bb565b92915050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610f9857600080fd5b919050565b600060208284031215610faf57600080fd5b610fb882610f74565b9392505050565b60008060008060808587031215610fd557600080fd5b610fde85610f74565b966020860135965060408601359560600135945092505050565b60006020828403121561100a57600080fd5b81518015158114610fb857600080fd5b600082821015611053577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b50039056fea26469706673582212205800dfd3b611fd5c79805e254545baec64450a2b836fb7ee5a6325cefb88efca64736f6c634300080b0033",
>>>>>>> Stashed changes
}

// MigrateStakingFacetABI is the input ABI used to generate the binding from.
// Deprecated: Use MigrateStakingFacetMetaData.ABI instead.
var MigrateStakingFacetABI = MigrateStakingFacetMetaData.ABI

// MigrateStakingFacetBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MigrateStakingFacetMetaData.Bin instead.
var MigrateStakingFacetBin = MigrateStakingFacetMetaData.Bin

// DeployMigrateStakingFacet deploys a new Ethereum contract, binding an instance of MigrateStakingFacet to it.
func DeployMigrateStakingFacet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MigrateStakingFacet, error) {
	parsed, err := MigrateStakingFacetMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MigrateStakingFacetBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MigrateStakingFacet{MigrateStakingFacetCaller: MigrateStakingFacetCaller{contract: contract}, MigrateStakingFacetTransactor: MigrateStakingFacetTransactor{contract: contract}, MigrateStakingFacetFilterer: MigrateStakingFacetFilterer{contract: contract}}, nil
}

// MigrateStakingFacet is an auto generated Go binding around an Ethereum contract.
type MigrateStakingFacet struct {
	MigrateStakingFacetCaller     // Read-only binding to the contract
	MigrateStakingFacetTransactor // Write-only binding to the contract
	MigrateStakingFacetFilterer   // Log filterer for contract events
}

// MigrateStakingFacetCaller is an auto generated read-only Go binding around an Ethereum contract.
type MigrateStakingFacetCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MigrateStakingFacetTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MigrateStakingFacetTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MigrateStakingFacetFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MigrateStakingFacetFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MigrateStakingFacetSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MigrateStakingFacetSession struct {
	Contract     *MigrateStakingFacet // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// MigrateStakingFacetCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MigrateStakingFacetCallerSession struct {
	Contract *MigrateStakingFacetCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// MigrateStakingFacetTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MigrateStakingFacetTransactorSession struct {
	Contract     *MigrateStakingFacetTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// MigrateStakingFacetRaw is an auto generated low-level Go binding around an Ethereum contract.
type MigrateStakingFacetRaw struct {
	Contract *MigrateStakingFacet // Generic contract binding to access the raw methods on
}

// MigrateStakingFacetCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MigrateStakingFacetCallerRaw struct {
	Contract *MigrateStakingFacetCaller // Generic read-only contract binding to access the raw methods on
}

// MigrateStakingFacetTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MigrateStakingFacetTransactorRaw struct {
	Contract *MigrateStakingFacetTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMigrateStakingFacet creates a new instance of MigrateStakingFacet, bound to a specific deployed contract.
func NewMigrateStakingFacet(address common.Address, backend bind.ContractBackend) (*MigrateStakingFacet, error) {
	contract, err := bindMigrateStakingFacet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MigrateStakingFacet{MigrateStakingFacetCaller: MigrateStakingFacetCaller{contract: contract}, MigrateStakingFacetTransactor: MigrateStakingFacetTransactor{contract: contract}, MigrateStakingFacetFilterer: MigrateStakingFacetFilterer{contract: contract}}, nil
}

// NewMigrateStakingFacetCaller creates a new read-only instance of MigrateStakingFacet, bound to a specific deployed contract.
func NewMigrateStakingFacetCaller(address common.Address, caller bind.ContractCaller) (*MigrateStakingFacetCaller, error) {
	contract, err := bindMigrateStakingFacet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MigrateStakingFacetCaller{contract: contract}, nil
}

// NewMigrateStakingFacetTransactor creates a new write-only instance of MigrateStakingFacet, bound to a specific deployed contract.
func NewMigrateStakingFacetTransactor(address common.Address, transactor bind.ContractTransactor) (*MigrateStakingFacetTransactor, error) {
	contract, err := bindMigrateStakingFacet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MigrateStakingFacetTransactor{contract: contract}, nil
}

// NewMigrateStakingFacetFilterer creates a new log filterer instance of MigrateStakingFacet, bound to a specific deployed contract.
func NewMigrateStakingFacetFilterer(address common.Address, filterer bind.ContractFilterer) (*MigrateStakingFacetFilterer, error) {
	contract, err := bindMigrateStakingFacet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MigrateStakingFacetFilterer{contract: contract}, nil
}

// bindMigrateStakingFacet binds a generic wrapper to an already deployed contract.
func bindMigrateStakingFacet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MigrateStakingFacetABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MigrateStakingFacet *MigrateStakingFacetRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MigrateStakingFacet.Contract.MigrateStakingFacetCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MigrateStakingFacet *MigrateStakingFacetRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.MigrateStakingFacetTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MigrateStakingFacet *MigrateStakingFacetRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.MigrateStakingFacetTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MigrateStakingFacet *MigrateStakingFacetCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MigrateStakingFacet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MigrateStakingFacet *MigrateStakingFacetTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MigrateStakingFacet *MigrateStakingFacetTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.contract.Transact(opts, method, params...)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_MigrateStakingFacet *MigrateStakingFacetTransactor) GrantOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _MigrateStakingFacet.contract.Transact(opts, "grantOperator", who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_MigrateStakingFacet *MigrateStakingFacetSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.GrantOperator(&_MigrateStakingFacet.TransactOpts, who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_MigrateStakingFacet *MigrateStakingFacetTransactorSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.GrantOperator(&_MigrateStakingFacet.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_MigrateStakingFacet *MigrateStakingFacetTransactor) GrantOwner(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _MigrateStakingFacet.contract.Transact(opts, "grantOwner", who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_MigrateStakingFacet *MigrateStakingFacetSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.GrantOwner(&_MigrateStakingFacet.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_MigrateStakingFacet *MigrateStakingFacetTransactorSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.GrantOwner(&_MigrateStakingFacet.TransactOpts, who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_MigrateStakingFacet *MigrateStakingFacetTransactor) RevokeOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _MigrateStakingFacet.contract.Transact(opts, "revokeOperator", who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_MigrateStakingFacet *MigrateStakingFacetSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.RevokeOperator(&_MigrateStakingFacet.TransactOpts, who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_MigrateStakingFacet *MigrateStakingFacetTransactorSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.RevokeOperator(&_MigrateStakingFacet.TransactOpts, who)
}

// SetBalancesFor is a paid mutator transaction binding the contract method 0xe86a737d.
//
// Solidity: function setBalancesFor(address who, uint256 lockedStake, uint256 unlockedStake, uint256 unlockedReward) returns()
func (_MigrateStakingFacet *MigrateStakingFacetTransactor) SetBalancesFor(opts *bind.TransactOpts, who common.Address, lockedStake *big.Int, unlockedStake *big.Int, unlockedReward *big.Int) (*types.Transaction, error) {
	return _MigrateStakingFacet.contract.Transact(opts, "setBalancesFor", who, lockedStake, unlockedStake, unlockedReward)
}

// SetBalancesFor is a paid mutator transaction binding the contract method 0xe86a737d.
//
// Solidity: function setBalancesFor(address who, uint256 lockedStake, uint256 unlockedStake, uint256 unlockedReward) returns()
func (_MigrateStakingFacet *MigrateStakingFacetSession) SetBalancesFor(who common.Address, lockedStake *big.Int, unlockedStake *big.Int, unlockedReward *big.Int) (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.SetBalancesFor(&_MigrateStakingFacet.TransactOpts, who, lockedStake, unlockedStake, unlockedReward)
}

// SetBalancesFor is a paid mutator transaction binding the contract method 0xe86a737d.
//
// Solidity: function setBalancesFor(address who, uint256 lockedStake, uint256 unlockedStake, uint256 unlockedReward) returns()
func (_MigrateStakingFacet *MigrateStakingFacetTransactorSession) SetBalancesFor(who common.Address, lockedStake *big.Int, unlockedStake *big.Int, unlockedReward *big.Int) (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.SetBalancesFor(&_MigrateStakingFacet.TransactOpts, who, lockedStake, unlockedStake, unlockedReward)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_MigrateStakingFacet *MigrateStakingFacetTransactor) SetGovernance(opts *bind.TransactOpts, governance_ common.Address) (*types.Transaction, error) {
	return _MigrateStakingFacet.contract.Transact(opts, "setGovernance", governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_MigrateStakingFacet *MigrateStakingFacetSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.SetGovernance(&_MigrateStakingFacet.TransactOpts, governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_MigrateStakingFacet *MigrateStakingFacetTransactorSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.SetGovernance(&_MigrateStakingFacet.TransactOpts, governance_)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_MigrateStakingFacet *MigrateStakingFacetTransactor) Start(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MigrateStakingFacet.contract.Transact(opts, "start")
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_MigrateStakingFacet *MigrateStakingFacetSession) Start() (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.Start(&_MigrateStakingFacet.TransactOpts)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_MigrateStakingFacet *MigrateStakingFacetTransactorSession) Start() (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.Start(&_MigrateStakingFacet.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_MigrateStakingFacet *MigrateStakingFacetTransactor) Stop(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MigrateStakingFacet.contract.Transact(opts, "stop")
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_MigrateStakingFacet *MigrateStakingFacetSession) Stop() (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.Stop(&_MigrateStakingFacet.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_MigrateStakingFacet *MigrateStakingFacetTransactorSession) Stop() (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.Stop(&_MigrateStakingFacet.TransactOpts)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_MigrateStakingFacet *MigrateStakingFacetTransactor) TakeOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MigrateStakingFacet.contract.Transact(opts, "takeOwnership")
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_MigrateStakingFacet *MigrateStakingFacetSession) TakeOwnership() (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.TakeOwnership(&_MigrateStakingFacet.TransactOpts)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_MigrateStakingFacet *MigrateStakingFacetTransactorSession) TakeOwnership() (*types.Transaction, error) {
	return _MigrateStakingFacet.Contract.TakeOwnership(&_MigrateStakingFacet.TransactOpts)
}

// MintableERC20MetaData contains all meta data concerning the MintableERC20 contract.
var MintableERC20MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// MintableERC20ABI is the input ABI used to generate the binding from.
// Deprecated: Use MintableERC20MetaData.ABI instead.
var MintableERC20ABI = MintableERC20MetaData.ABI

// MintableERC20 is an auto generated Go binding around an Ethereum contract.
type MintableERC20 struct {
	MintableERC20Caller     // Read-only binding to the contract
	MintableERC20Transactor // Write-only binding to the contract
	MintableERC20Filterer   // Log filterer for contract events
}

// MintableERC20Caller is an auto generated read-only Go binding around an Ethereum contract.
type MintableERC20Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MintableERC20Transactor is an auto generated write-only Go binding around an Ethereum contract.
type MintableERC20Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MintableERC20Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MintableERC20Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MintableERC20Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MintableERC20Session struct {
	Contract     *MintableERC20    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MintableERC20CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MintableERC20CallerSession struct {
	Contract *MintableERC20Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// MintableERC20TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MintableERC20TransactorSession struct {
	Contract     *MintableERC20Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// MintableERC20Raw is an auto generated low-level Go binding around an Ethereum contract.
type MintableERC20Raw struct {
	Contract *MintableERC20 // Generic contract binding to access the raw methods on
}

// MintableERC20CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MintableERC20CallerRaw struct {
	Contract *MintableERC20Caller // Generic read-only contract binding to access the raw methods on
}

// MintableERC20TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MintableERC20TransactorRaw struct {
	Contract *MintableERC20Transactor // Generic write-only contract binding to access the raw methods on
}

// NewMintableERC20 creates a new instance of MintableERC20, bound to a specific deployed contract.
func NewMintableERC20(address common.Address, backend bind.ContractBackend) (*MintableERC20, error) {
	contract, err := bindMintableERC20(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MintableERC20{MintableERC20Caller: MintableERC20Caller{contract: contract}, MintableERC20Transactor: MintableERC20Transactor{contract: contract}, MintableERC20Filterer: MintableERC20Filterer{contract: contract}}, nil
}

// NewMintableERC20Caller creates a new read-only instance of MintableERC20, bound to a specific deployed contract.
func NewMintableERC20Caller(address common.Address, caller bind.ContractCaller) (*MintableERC20Caller, error) {
	contract, err := bindMintableERC20(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MintableERC20Caller{contract: contract}, nil
}

// NewMintableERC20Transactor creates a new write-only instance of MintableERC20, bound to a specific deployed contract.
func NewMintableERC20Transactor(address common.Address, transactor bind.ContractTransactor) (*MintableERC20Transactor, error) {
	contract, err := bindMintableERC20(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MintableERC20Transactor{contract: contract}, nil
}

// NewMintableERC20Filterer creates a new log filterer instance of MintableERC20, bound to a specific deployed contract.
func NewMintableERC20Filterer(address common.Address, filterer bind.ContractFilterer) (*MintableERC20Filterer, error) {
	contract, err := bindMintableERC20(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MintableERC20Filterer{contract: contract}, nil
}

// bindMintableERC20 binds a generic wrapper to an already deployed contract.
func bindMintableERC20(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MintableERC20ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MintableERC20 *MintableERC20Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MintableERC20.Contract.MintableERC20Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MintableERC20 *MintableERC20Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MintableERC20.Contract.MintableERC20Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MintableERC20 *MintableERC20Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MintableERC20.Contract.MintableERC20Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MintableERC20 *MintableERC20CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MintableERC20.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MintableERC20 *MintableERC20TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MintableERC20.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MintableERC20 *MintableERC20TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MintableERC20.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address src, address who) view returns(uint256)
func (_MintableERC20 *MintableERC20Caller) Allowance(opts *bind.CallOpts, src common.Address, who common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MintableERC20.contract.Call(opts, &out, "allowance", src, who)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address src, address who) view returns(uint256)
func (_MintableERC20 *MintableERC20Session) Allowance(src common.Address, who common.Address) (*big.Int, error) {
	return _MintableERC20.Contract.Allowance(&_MintableERC20.CallOpts, src, who)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address src, address who) view returns(uint256)
func (_MintableERC20 *MintableERC20CallerSession) Allowance(src common.Address, who common.Address) (*big.Int, error) {
	return _MintableERC20.Contract.Allowance(&_MintableERC20.CallOpts, src, who)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address who) view returns(uint256)
func (_MintableERC20 *MintableERC20Caller) BalanceOf(opts *bind.CallOpts, who common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MintableERC20.contract.Call(opts, &out, "balanceOf", who)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address who) view returns(uint256)
func (_MintableERC20 *MintableERC20Session) BalanceOf(who common.Address) (*big.Int, error) {
	return _MintableERC20.Contract.BalanceOf(&_MintableERC20.CallOpts, who)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address who) view returns(uint256)
func (_MintableERC20 *MintableERC20CallerSession) BalanceOf(who common.Address) (*big.Int, error) {
	return _MintableERC20.Contract.BalanceOf(&_MintableERC20.CallOpts, who)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MintableERC20 *MintableERC20Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MintableERC20.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MintableERC20 *MintableERC20Session) TotalSupply() (*big.Int, error) {
	return _MintableERC20.Contract.TotalSupply(&_MintableERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MintableERC20 *MintableERC20CallerSession) TotalSupply() (*big.Int, error) {
	return _MintableERC20.Contract.TotalSupply(&_MintableERC20.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address who, uint256 wad) returns(bool)
func (_MintableERC20 *MintableERC20Transactor) Approve(opts *bind.TransactOpts, who common.Address, wad *big.Int) (*types.Transaction, error) {
	return _MintableERC20.contract.Transact(opts, "approve", who, wad)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address who, uint256 wad) returns(bool)
func (_MintableERC20 *MintableERC20Session) Approve(who common.Address, wad *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.Approve(&_MintableERC20.TransactOpts, who, wad)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address who, uint256 wad) returns(bool)
func (_MintableERC20 *MintableERC20TransactorSession) Approve(who common.Address, wad *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.Approve(&_MintableERC20.TransactOpts, who, wad)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_MintableERC20 *MintableERC20Transactor) GrantOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _MintableERC20.contract.Transact(opts, "grantOperator", _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_MintableERC20 *MintableERC20Session) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _MintableERC20.Contract.GrantOperator(&_MintableERC20.TransactOpts, _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_MintableERC20 *MintableERC20TransactorSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _MintableERC20.Contract.GrantOperator(&_MintableERC20.TransactOpts, _operator)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address guy, uint256 wad) returns()
func (_MintableERC20 *MintableERC20Transactor) Mint(opts *bind.TransactOpts, guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _MintableERC20.contract.Transact(opts, "mint", guy, wad)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address guy, uint256 wad) returns()
func (_MintableERC20 *MintableERC20Session) Mint(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.Mint(&_MintableERC20.TransactOpts, guy, wad)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address guy, uint256 wad) returns()
func (_MintableERC20 *MintableERC20TransactorSession) Mint(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.Mint(&_MintableERC20.TransactOpts, guy, wad)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 wad) returns(bool)
func (_MintableERC20 *MintableERC20Transactor) Transfer(opts *bind.TransactOpts, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _MintableERC20.contract.Transact(opts, "transfer", dst, wad)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 wad) returns(bool)
func (_MintableERC20 *MintableERC20Session) Transfer(dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.Transfer(&_MintableERC20.TransactOpts, dst, wad)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 wad) returns(bool)
func (_MintableERC20 *MintableERC20TransactorSession) Transfer(dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.Transfer(&_MintableERC20.TransactOpts, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_MintableERC20 *MintableERC20Transactor) TransferFrom(opts *bind.TransactOpts, src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _MintableERC20.contract.Transact(opts, "transferFrom", src, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_MintableERC20 *MintableERC20Session) TransferFrom(src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.TransferFrom(&_MintableERC20.TransactOpts, src, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_MintableERC20 *MintableERC20TransactorSession) TransferFrom(src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.TransferFrom(&_MintableERC20.TransactOpts, src, dst, wad)
}

// PClaimsParserLibraryMetaData contains all meta data concerning the PClaimsParserLibrary contract.
var PClaimsParserLibraryMetaData = &bind.MetaData{
	ABI: "[]",
<<<<<<< Updated upstream
	Bin: "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204e6ae0454063925314feb6611620bcdd17860c65945f60fff30850bb9d3919fa64736f6c634300080b0033",
=======
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202a380ea131885c12136ea6bb6063f3088a355fcde887f11e3a933bcc5a382d4f64736f6c634300080b0033",
>>>>>>> Stashed changes
}

// PClaimsParserLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use PClaimsParserLibraryMetaData.ABI instead.
var PClaimsParserLibraryABI = PClaimsParserLibraryMetaData.ABI

// PClaimsParserLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PClaimsParserLibraryMetaData.Bin instead.
var PClaimsParserLibraryBin = PClaimsParserLibraryMetaData.Bin

// DeployPClaimsParserLibrary deploys a new Ethereum contract, binding an instance of PClaimsParserLibrary to it.
func DeployPClaimsParserLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *PClaimsParserLibrary, error) {
	parsed, err := PClaimsParserLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PClaimsParserLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &PClaimsParserLibrary{PClaimsParserLibraryCaller: PClaimsParserLibraryCaller{contract: contract}, PClaimsParserLibraryTransactor: PClaimsParserLibraryTransactor{contract: contract}, PClaimsParserLibraryFilterer: PClaimsParserLibraryFilterer{contract: contract}}, nil
}

// PClaimsParserLibrary is an auto generated Go binding around an Ethereum contract.
type PClaimsParserLibrary struct {
	PClaimsParserLibraryCaller     // Read-only binding to the contract
	PClaimsParserLibraryTransactor // Write-only binding to the contract
	PClaimsParserLibraryFilterer   // Log filterer for contract events
}

// PClaimsParserLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type PClaimsParserLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PClaimsParserLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PClaimsParserLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PClaimsParserLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PClaimsParserLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PClaimsParserLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PClaimsParserLibrarySession struct {
	Contract     *PClaimsParserLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// PClaimsParserLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PClaimsParserLibraryCallerSession struct {
	Contract *PClaimsParserLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// PClaimsParserLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PClaimsParserLibraryTransactorSession struct {
	Contract     *PClaimsParserLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// PClaimsParserLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type PClaimsParserLibraryRaw struct {
	Contract *PClaimsParserLibrary // Generic contract binding to access the raw methods on
}

// PClaimsParserLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PClaimsParserLibraryCallerRaw struct {
	Contract *PClaimsParserLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// PClaimsParserLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PClaimsParserLibraryTransactorRaw struct {
	Contract *PClaimsParserLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPClaimsParserLibrary creates a new instance of PClaimsParserLibrary, bound to a specific deployed contract.
func NewPClaimsParserLibrary(address common.Address, backend bind.ContractBackend) (*PClaimsParserLibrary, error) {
	contract, err := bindPClaimsParserLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &PClaimsParserLibrary{PClaimsParserLibraryCaller: PClaimsParserLibraryCaller{contract: contract}, PClaimsParserLibraryTransactor: PClaimsParserLibraryTransactor{contract: contract}, PClaimsParserLibraryFilterer: PClaimsParserLibraryFilterer{contract: contract}}, nil
}

// NewPClaimsParserLibraryCaller creates a new read-only instance of PClaimsParserLibrary, bound to a specific deployed contract.
func NewPClaimsParserLibraryCaller(address common.Address, caller bind.ContractCaller) (*PClaimsParserLibraryCaller, error) {
	contract, err := bindPClaimsParserLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PClaimsParserLibraryCaller{contract: contract}, nil
}

// NewPClaimsParserLibraryTransactor creates a new write-only instance of PClaimsParserLibrary, bound to a specific deployed contract.
func NewPClaimsParserLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*PClaimsParserLibraryTransactor, error) {
	contract, err := bindPClaimsParserLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PClaimsParserLibraryTransactor{contract: contract}, nil
}

// NewPClaimsParserLibraryFilterer creates a new log filterer instance of PClaimsParserLibrary, bound to a specific deployed contract.
func NewPClaimsParserLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*PClaimsParserLibraryFilterer, error) {
	contract, err := bindPClaimsParserLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PClaimsParserLibraryFilterer{contract: contract}, nil
}

// bindPClaimsParserLibrary binds a generic wrapper to an already deployed contract.
func bindPClaimsParserLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(PClaimsParserLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PClaimsParserLibrary *PClaimsParserLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PClaimsParserLibrary.Contract.PClaimsParserLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PClaimsParserLibrary *PClaimsParserLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PClaimsParserLibrary.Contract.PClaimsParserLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PClaimsParserLibrary *PClaimsParserLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PClaimsParserLibrary.Contract.PClaimsParserLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PClaimsParserLibrary *PClaimsParserLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PClaimsParserLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PClaimsParserLibrary *PClaimsParserLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PClaimsParserLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PClaimsParserLibrary *PClaimsParserLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PClaimsParserLibrary.Contract.contract.Transact(opts, method, params...)
}

// ParticipantsMetaData contains all meta data concerning the Participants contract.
var ParticipantsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"madID\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"madID\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"pkHash\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorLeft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"pkHash\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorQueued\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"_madID\",\"type\":\"uint256[2]\"}],\"name\":\"addValidator\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmValidators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"getValidatorPublicKey\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractRegistry\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"initializeParticipants\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"_madID\",\"type\":\"uint256[2]\"}],\"name\":\"removeValidator\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"}],\"name\":\"setChainId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"max\",\"type\":\"uint8\"}],\"name\":\"setValidatorMaxCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorMaxCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// ParticipantsABI is the input ABI used to generate the binding from.
// Deprecated: Use ParticipantsMetaData.ABI instead.
var ParticipantsABI = ParticipantsMetaData.ABI

// Participants is an auto generated Go binding around an Ethereum contract.
type Participants struct {
	ParticipantsCaller     // Read-only binding to the contract
	ParticipantsTransactor // Write-only binding to the contract
	ParticipantsFilterer   // Log filterer for contract events
}

// ParticipantsCaller is an auto generated read-only Go binding around an Ethereum contract.
type ParticipantsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ParticipantsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ParticipantsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ParticipantsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ParticipantsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ParticipantsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ParticipantsSession struct {
	Contract     *Participants     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ParticipantsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ParticipantsCallerSession struct {
	Contract *ParticipantsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// ParticipantsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ParticipantsTransactorSession struct {
	Contract     *ParticipantsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// ParticipantsRaw is an auto generated low-level Go binding around an Ethereum contract.
type ParticipantsRaw struct {
	Contract *Participants // Generic contract binding to access the raw methods on
}

// ParticipantsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ParticipantsCallerRaw struct {
	Contract *ParticipantsCaller // Generic read-only contract binding to access the raw methods on
}

// ParticipantsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ParticipantsTransactorRaw struct {
	Contract *ParticipantsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewParticipants creates a new instance of Participants, bound to a specific deployed contract.
func NewParticipants(address common.Address, backend bind.ContractBackend) (*Participants, error) {
	contract, err := bindParticipants(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Participants{ParticipantsCaller: ParticipantsCaller{contract: contract}, ParticipantsTransactor: ParticipantsTransactor{contract: contract}, ParticipantsFilterer: ParticipantsFilterer{contract: contract}}, nil
}

// NewParticipantsCaller creates a new read-only instance of Participants, bound to a specific deployed contract.
func NewParticipantsCaller(address common.Address, caller bind.ContractCaller) (*ParticipantsCaller, error) {
	contract, err := bindParticipants(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ParticipantsCaller{contract: contract}, nil
}

// NewParticipantsTransactor creates a new write-only instance of Participants, bound to a specific deployed contract.
func NewParticipantsTransactor(address common.Address, transactor bind.ContractTransactor) (*ParticipantsTransactor, error) {
	contract, err := bindParticipants(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ParticipantsTransactor{contract: contract}, nil
}

// NewParticipantsFilterer creates a new log filterer instance of Participants, bound to a specific deployed contract.
func NewParticipantsFilterer(address common.Address, filterer bind.ContractFilterer) (*ParticipantsFilterer, error) {
	contract, err := bindParticipants(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ParticipantsFilterer{contract: contract}, nil
}

// bindParticipants binds a generic wrapper to an already deployed contract.
func bindParticipants(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ParticipantsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Participants *ParticipantsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Participants.Contract.ParticipantsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Participants *ParticipantsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Participants.Contract.ParticipantsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Participants *ParticipantsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Participants.Contract.ParticipantsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Participants *ParticipantsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Participants.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Participants *ParticipantsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Participants.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Participants *ParticipantsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Participants.Contract.contract.Transact(opts, method, params...)
}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint32)
func (_Participants *ParticipantsCaller) GetChainId(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Participants.contract.Call(opts, &out, "getChainId")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint32)
func (_Participants *ParticipantsSession) GetChainId() (uint32, error) {
	return _Participants.Contract.GetChainId(&_Participants.CallOpts)
}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint32)
func (_Participants *ParticipantsCallerSession) GetChainId() (uint32, error) {
	return _Participants.Contract.GetChainId(&_Participants.CallOpts)
}

// GetValidatorPublicKey is a free data retrieval call binding the contract method 0x4e6f4a22.
//
// Solidity: function getValidatorPublicKey(address _validator) view returns(uint256[2])
func (_Participants *ParticipantsCaller) GetValidatorPublicKey(opts *bind.CallOpts, _validator common.Address) ([2]*big.Int, error) {
	var out []interface{}
	err := _Participants.contract.Call(opts, &out, "getValidatorPublicKey", _validator)

	if err != nil {
		return *new([2]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([2]*big.Int)).(*[2]*big.Int)

	return out0, err

}

// GetValidatorPublicKey is a free data retrieval call binding the contract method 0x4e6f4a22.
//
// Solidity: function getValidatorPublicKey(address _validator) view returns(uint256[2])
func (_Participants *ParticipantsSession) GetValidatorPublicKey(_validator common.Address) ([2]*big.Int, error) {
	return _Participants.Contract.GetValidatorPublicKey(&_Participants.CallOpts, _validator)
}

// GetValidatorPublicKey is a free data retrieval call binding the contract method 0x4e6f4a22.
//
// Solidity: function getValidatorPublicKey(address _validator) view returns(uint256[2])
func (_Participants *ParticipantsCallerSession) GetValidatorPublicKey(_validator common.Address) ([2]*big.Int, error) {
	return _Participants.Contract.GetValidatorPublicKey(&_Participants.CallOpts, _validator)
}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_Participants *ParticipantsCaller) GetValidators(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _Participants.contract.Call(opts, &out, "getValidators")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_Participants *ParticipantsSession) GetValidators() ([]common.Address, error) {
	return _Participants.Contract.GetValidators(&_Participants.CallOpts)
}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_Participants *ParticipantsCallerSession) GetValidators() ([]common.Address, error) {
	return _Participants.Contract.GetValidators(&_Participants.CallOpts)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_Participants *ParticipantsCaller) IsValidator(opts *bind.CallOpts, validator common.Address) (bool, error) {
	var out []interface{}
	err := _Participants.contract.Call(opts, &out, "isValidator", validator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_Participants *ParticipantsSession) IsValidator(validator common.Address) (bool, error) {
	return _Participants.Contract.IsValidator(&_Participants.CallOpts, validator)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_Participants *ParticipantsCallerSession) IsValidator(validator common.Address) (bool, error) {
	return _Participants.Contract.IsValidator(&_Participants.CallOpts, validator)
}

// AddValidator is a paid mutator transaction binding the contract method 0xeb6320c7.
//
// Solidity: function addValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_Participants *ParticipantsTransactor) AddValidator(opts *bind.TransactOpts, _validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _Participants.contract.Transact(opts, "addValidator", _validator, _madID)
}

// AddValidator is a paid mutator transaction binding the contract method 0xeb6320c7.
//
// Solidity: function addValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_Participants *ParticipantsSession) AddValidator(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _Participants.Contract.AddValidator(&_Participants.TransactOpts, _validator, _madID)
}

// AddValidator is a paid mutator transaction binding the contract method 0xeb6320c7.
//
// Solidity: function addValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_Participants *ParticipantsTransactorSession) AddValidator(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _Participants.Contract.AddValidator(&_Participants.TransactOpts, _validator, _madID)
}

// ConfirmValidators is a paid mutator transaction binding the contract method 0x35c6a163.
//
// Solidity: function confirmValidators() returns(bool)
func (_Participants *ParticipantsTransactor) ConfirmValidators(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Participants.contract.Transact(opts, "confirmValidators")
}

// ConfirmValidators is a paid mutator transaction binding the contract method 0x35c6a163.
//
// Solidity: function confirmValidators() returns(bool)
func (_Participants *ParticipantsSession) ConfirmValidators() (*types.Transaction, error) {
	return _Participants.Contract.ConfirmValidators(&_Participants.TransactOpts)
}

// ConfirmValidators is a paid mutator transaction binding the contract method 0x35c6a163.
//
// Solidity: function confirmValidators() returns(bool)
func (_Participants *ParticipantsTransactorSession) ConfirmValidators() (*types.Transaction, error) {
	return _Participants.Contract.ConfirmValidators(&_Participants.TransactOpts)
}

// InitializeParticipants is a paid mutator transaction binding the contract method 0xee8420dd.
//
// Solidity: function initializeParticipants(address registry) returns()
func (_Participants *ParticipantsTransactor) InitializeParticipants(opts *bind.TransactOpts, registry common.Address) (*types.Transaction, error) {
	return _Participants.contract.Transact(opts, "initializeParticipants", registry)
}

// InitializeParticipants is a paid mutator transaction binding the contract method 0xee8420dd.
//
// Solidity: function initializeParticipants(address registry) returns()
func (_Participants *ParticipantsSession) InitializeParticipants(registry common.Address) (*types.Transaction, error) {
	return _Participants.Contract.InitializeParticipants(&_Participants.TransactOpts, registry)
}

// InitializeParticipants is a paid mutator transaction binding the contract method 0xee8420dd.
//
// Solidity: function initializeParticipants(address registry) returns()
func (_Participants *ParticipantsTransactorSession) InitializeParticipants(registry common.Address) (*types.Transaction, error) {
	return _Participants.Contract.InitializeParticipants(&_Participants.TransactOpts, registry)
}

// RemoveValidator is a paid mutator transaction binding the contract method 0x844469b2.
//
// Solidity: function removeValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_Participants *ParticipantsTransactor) RemoveValidator(opts *bind.TransactOpts, _validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _Participants.contract.Transact(opts, "removeValidator", _validator, _madID)
}

// RemoveValidator is a paid mutator transaction binding the contract method 0x844469b2.
//
// Solidity: function removeValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_Participants *ParticipantsSession) RemoveValidator(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _Participants.Contract.RemoveValidator(&_Participants.TransactOpts, _validator, _madID)
}

// RemoveValidator is a paid mutator transaction binding the contract method 0x844469b2.
//
// Solidity: function removeValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_Participants *ParticipantsTransactorSession) RemoveValidator(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _Participants.Contract.RemoveValidator(&_Participants.TransactOpts, _validator, _madID)
}

// SetChainId is a paid mutator transaction binding the contract method 0xa179f124.
//
// Solidity: function setChainId(uint32 _chainId) returns()
func (_Participants *ParticipantsTransactor) SetChainId(opts *bind.TransactOpts, _chainId uint32) (*types.Transaction, error) {
	return _Participants.contract.Transact(opts, "setChainId", _chainId)
}

// SetChainId is a paid mutator transaction binding the contract method 0xa179f124.
//
// Solidity: function setChainId(uint32 _chainId) returns()
func (_Participants *ParticipantsSession) SetChainId(_chainId uint32) (*types.Transaction, error) {
	return _Participants.Contract.SetChainId(&_Participants.TransactOpts, _chainId)
}

// SetChainId is a paid mutator transaction binding the contract method 0xa179f124.
//
// Solidity: function setChainId(uint32 _chainId) returns()
func (_Participants *ParticipantsTransactorSession) SetChainId(_chainId uint32) (*types.Transaction, error) {
	return _Participants.Contract.SetChainId(&_Participants.TransactOpts, _chainId)
}

// SetValidatorMaxCount is a paid mutator transaction binding the contract method 0x2cab37f7.
//
// Solidity: function setValidatorMaxCount(uint8 max) returns()
func (_Participants *ParticipantsTransactor) SetValidatorMaxCount(opts *bind.TransactOpts, max uint8) (*types.Transaction, error) {
	return _Participants.contract.Transact(opts, "setValidatorMaxCount", max)
}

// SetValidatorMaxCount is a paid mutator transaction binding the contract method 0x2cab37f7.
//
// Solidity: function setValidatorMaxCount(uint8 max) returns()
func (_Participants *ParticipantsSession) SetValidatorMaxCount(max uint8) (*types.Transaction, error) {
	return _Participants.Contract.SetValidatorMaxCount(&_Participants.TransactOpts, max)
}

// SetValidatorMaxCount is a paid mutator transaction binding the contract method 0x2cab37f7.
//
// Solidity: function setValidatorMaxCount(uint8 max) returns()
func (_Participants *ParticipantsTransactorSession) SetValidatorMaxCount(max uint8) (*types.Transaction, error) {
	return _Participants.Contract.SetValidatorMaxCount(&_Participants.TransactOpts, max)
}

// ValidatorCount is a paid mutator transaction binding the contract method 0x0f43a677.
//
// Solidity: function validatorCount() returns(uint8)
func (_Participants *ParticipantsTransactor) ValidatorCount(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Participants.contract.Transact(opts, "validatorCount")
}

// ValidatorCount is a paid mutator transaction binding the contract method 0x0f43a677.
//
// Solidity: function validatorCount() returns(uint8)
func (_Participants *ParticipantsSession) ValidatorCount() (*types.Transaction, error) {
	return _Participants.Contract.ValidatorCount(&_Participants.TransactOpts)
}

// ValidatorCount is a paid mutator transaction binding the contract method 0x0f43a677.
//
// Solidity: function validatorCount() returns(uint8)
func (_Participants *ParticipantsTransactorSession) ValidatorCount() (*types.Transaction, error) {
	return _Participants.Contract.ValidatorCount(&_Participants.TransactOpts)
}

// ValidatorMaxCount is a paid mutator transaction binding the contract method 0x09f0d45d.
//
// Solidity: function validatorMaxCount() returns(uint8)
func (_Participants *ParticipantsTransactor) ValidatorMaxCount(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Participants.contract.Transact(opts, "validatorMaxCount")
}

// ValidatorMaxCount is a paid mutator transaction binding the contract method 0x09f0d45d.
//
// Solidity: function validatorMaxCount() returns(uint8)
func (_Participants *ParticipantsSession) ValidatorMaxCount() (*types.Transaction, error) {
	return _Participants.Contract.ValidatorMaxCount(&_Participants.TransactOpts)
}

// ValidatorMaxCount is a paid mutator transaction binding the contract method 0x09f0d45d.
//
// Solidity: function validatorMaxCount() returns(uint8)
func (_Participants *ParticipantsTransactorSession) ValidatorMaxCount() (*types.Transaction, error) {
	return _Participants.Contract.ValidatorMaxCount(&_Participants.TransactOpts)
}

// ParticipantsValidatorCreatedIterator is returned from FilterValidatorCreated and is used to iterate over the raw logs and unpacked data for ValidatorCreated events raised by the Participants contract.
type ParticipantsValidatorCreatedIterator struct {
	Event *ParticipantsValidatorCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsValidatorCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsValidatorCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsValidatorCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsValidatorCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsValidatorCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsValidatorCreated represents a ValidatorCreated event raised by the Participants contract.
type ParticipantsValidatorCreated struct {
	Validator common.Address
	Signer    common.Address
	MadID     [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorCreated is a free log retrieval operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_Participants *ParticipantsFilterer) FilterValidatorCreated(opts *bind.FilterOpts, validator []common.Address, signer []common.Address) (*ParticipantsValidatorCreatedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var signerRule []interface{}
	for _, signerItem := range signer {
		signerRule = append(signerRule, signerItem)
	}

	logs, sub, err := _Participants.contract.FilterLogs(opts, "ValidatorCreated", validatorRule, signerRule)
	if err != nil {
		return nil, err
	}
	return &ParticipantsValidatorCreatedIterator{contract: _Participants.contract, event: "ValidatorCreated", logs: logs, sub: sub}, nil
}

// WatchValidatorCreated is a free log subscription operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_Participants *ParticipantsFilterer) WatchValidatorCreated(opts *bind.WatchOpts, sink chan<- *ParticipantsValidatorCreated, validator []common.Address, signer []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var signerRule []interface{}
	for _, signerItem := range signer {
		signerRule = append(signerRule, signerItem)
	}

	logs, sub, err := _Participants.contract.WatchLogs(opts, "ValidatorCreated", validatorRule, signerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsValidatorCreated)
				if err := _Participants.contract.UnpackLog(event, "ValidatorCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorCreated is a log parse operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_Participants *ParticipantsFilterer) ParseValidatorCreated(log types.Log) (*ParticipantsValidatorCreated, error) {
	event := new(ParticipantsValidatorCreated)
	if err := _Participants.contract.UnpackLog(event, "ValidatorCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ParticipantsValidatorJoinedIterator is returned from FilterValidatorJoined and is used to iterate over the raw logs and unpacked data for ValidatorJoined events raised by the Participants contract.
type ParticipantsValidatorJoinedIterator struct {
	Event *ParticipantsValidatorJoined // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsValidatorJoinedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsValidatorJoined)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsValidatorJoined)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsValidatorJoinedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsValidatorJoinedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsValidatorJoined represents a ValidatorJoined event raised by the Participants contract.
type ParticipantsValidatorJoined struct {
	Validator common.Address
	MadID     [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorJoined is a free log retrieval operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_Participants *ParticipantsFilterer) FilterValidatorJoined(opts *bind.FilterOpts, validator []common.Address) (*ParticipantsValidatorJoinedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Participants.contract.FilterLogs(opts, "ValidatorJoined", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ParticipantsValidatorJoinedIterator{contract: _Participants.contract, event: "ValidatorJoined", logs: logs, sub: sub}, nil
}

// WatchValidatorJoined is a free log subscription operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_Participants *ParticipantsFilterer) WatchValidatorJoined(opts *bind.WatchOpts, sink chan<- *ParticipantsValidatorJoined, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Participants.contract.WatchLogs(opts, "ValidatorJoined", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsValidatorJoined)
				if err := _Participants.contract.UnpackLog(event, "ValidatorJoined", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorJoined is a log parse operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_Participants *ParticipantsFilterer) ParseValidatorJoined(log types.Log) (*ParticipantsValidatorJoined, error) {
	event := new(ParticipantsValidatorJoined)
	if err := _Participants.contract.UnpackLog(event, "ValidatorJoined", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ParticipantsValidatorLeftIterator is returned from FilterValidatorLeft and is used to iterate over the raw logs and unpacked data for ValidatorLeft events raised by the Participants contract.
type ParticipantsValidatorLeftIterator struct {
	Event *ParticipantsValidatorLeft // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsValidatorLeftIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsValidatorLeft)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsValidatorLeft)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsValidatorLeftIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsValidatorLeftIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsValidatorLeft represents a ValidatorLeft event raised by the Participants contract.
type ParticipantsValidatorLeft struct {
	Validator common.Address
	PkHash    [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorLeft is a free log retrieval operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_Participants *ParticipantsFilterer) FilterValidatorLeft(opts *bind.FilterOpts, validator []common.Address) (*ParticipantsValidatorLeftIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Participants.contract.FilterLogs(opts, "ValidatorLeft", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ParticipantsValidatorLeftIterator{contract: _Participants.contract, event: "ValidatorLeft", logs: logs, sub: sub}, nil
}

// WatchValidatorLeft is a free log subscription operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_Participants *ParticipantsFilterer) WatchValidatorLeft(opts *bind.WatchOpts, sink chan<- *ParticipantsValidatorLeft, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Participants.contract.WatchLogs(opts, "ValidatorLeft", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsValidatorLeft)
				if err := _Participants.contract.UnpackLog(event, "ValidatorLeft", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorLeft is a log parse operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_Participants *ParticipantsFilterer) ParseValidatorLeft(log types.Log) (*ParticipantsValidatorLeft, error) {
	event := new(ParticipantsValidatorLeft)
	if err := _Participants.contract.UnpackLog(event, "ValidatorLeft", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ParticipantsValidatorQueuedIterator is returned from FilterValidatorQueued and is used to iterate over the raw logs and unpacked data for ValidatorQueued events raised by the Participants contract.
type ParticipantsValidatorQueuedIterator struct {
	Event *ParticipantsValidatorQueued // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsValidatorQueuedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsValidatorQueued)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsValidatorQueued)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsValidatorQueuedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsValidatorQueuedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsValidatorQueued represents a ValidatorQueued event raised by the Participants contract.
type ParticipantsValidatorQueued struct {
	Validator common.Address
	PkHash    [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorQueued is a free log retrieval operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_Participants *ParticipantsFilterer) FilterValidatorQueued(opts *bind.FilterOpts, validator []common.Address) (*ParticipantsValidatorQueuedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Participants.contract.FilterLogs(opts, "ValidatorQueued", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ParticipantsValidatorQueuedIterator{contract: _Participants.contract, event: "ValidatorQueued", logs: logs, sub: sub}, nil
}

// WatchValidatorQueued is a free log subscription operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_Participants *ParticipantsFilterer) WatchValidatorQueued(opts *bind.WatchOpts, sink chan<- *ParticipantsValidatorQueued, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Participants.contract.WatchLogs(opts, "ValidatorQueued", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsValidatorQueued)
				if err := _Participants.contract.UnpackLog(event, "ValidatorQueued", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorQueued is a log parse operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_Participants *ParticipantsFilterer) ParseValidatorQueued(log types.Log) (*ParticipantsValidatorQueued, error) {
	event := new(ParticipantsValidatorQueued)
	if err := _Participants.contract.UnpackLog(event, "ValidatorQueued", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ParticipantsEventsMetaData contains all meta data concerning the ParticipantsEvents contract.
var ParticipantsEventsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"madID\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"madID\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"pkHash\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorLeft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"pkHash\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorQueued\",\"type\":\"event\"}]",
}

// ParticipantsEventsABI is the input ABI used to generate the binding from.
// Deprecated: Use ParticipantsEventsMetaData.ABI instead.
var ParticipantsEventsABI = ParticipantsEventsMetaData.ABI

// ParticipantsEvents is an auto generated Go binding around an Ethereum contract.
type ParticipantsEvents struct {
	ParticipantsEventsCaller     // Read-only binding to the contract
	ParticipantsEventsTransactor // Write-only binding to the contract
	ParticipantsEventsFilterer   // Log filterer for contract events
}

// ParticipantsEventsCaller is an auto generated read-only Go binding around an Ethereum contract.
type ParticipantsEventsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ParticipantsEventsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ParticipantsEventsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ParticipantsEventsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ParticipantsEventsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ParticipantsEventsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ParticipantsEventsSession struct {
	Contract     *ParticipantsEvents // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ParticipantsEventsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ParticipantsEventsCallerSession struct {
	Contract *ParticipantsEventsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// ParticipantsEventsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ParticipantsEventsTransactorSession struct {
	Contract     *ParticipantsEventsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// ParticipantsEventsRaw is an auto generated low-level Go binding around an Ethereum contract.
type ParticipantsEventsRaw struct {
	Contract *ParticipantsEvents // Generic contract binding to access the raw methods on
}

// ParticipantsEventsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ParticipantsEventsCallerRaw struct {
	Contract *ParticipantsEventsCaller // Generic read-only contract binding to access the raw methods on
}

// ParticipantsEventsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ParticipantsEventsTransactorRaw struct {
	Contract *ParticipantsEventsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewParticipantsEvents creates a new instance of ParticipantsEvents, bound to a specific deployed contract.
func NewParticipantsEvents(address common.Address, backend bind.ContractBackend) (*ParticipantsEvents, error) {
	contract, err := bindParticipantsEvents(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ParticipantsEvents{ParticipantsEventsCaller: ParticipantsEventsCaller{contract: contract}, ParticipantsEventsTransactor: ParticipantsEventsTransactor{contract: contract}, ParticipantsEventsFilterer: ParticipantsEventsFilterer{contract: contract}}, nil
}

// NewParticipantsEventsCaller creates a new read-only instance of ParticipantsEvents, bound to a specific deployed contract.
func NewParticipantsEventsCaller(address common.Address, caller bind.ContractCaller) (*ParticipantsEventsCaller, error) {
	contract, err := bindParticipantsEvents(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ParticipantsEventsCaller{contract: contract}, nil
}

// NewParticipantsEventsTransactor creates a new write-only instance of ParticipantsEvents, bound to a specific deployed contract.
func NewParticipantsEventsTransactor(address common.Address, transactor bind.ContractTransactor) (*ParticipantsEventsTransactor, error) {
	contract, err := bindParticipantsEvents(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ParticipantsEventsTransactor{contract: contract}, nil
}

// NewParticipantsEventsFilterer creates a new log filterer instance of ParticipantsEvents, bound to a specific deployed contract.
func NewParticipantsEventsFilterer(address common.Address, filterer bind.ContractFilterer) (*ParticipantsEventsFilterer, error) {
	contract, err := bindParticipantsEvents(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ParticipantsEventsFilterer{contract: contract}, nil
}

// bindParticipantsEvents binds a generic wrapper to an already deployed contract.
func bindParticipantsEvents(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ParticipantsEventsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ParticipantsEvents *ParticipantsEventsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ParticipantsEvents.Contract.ParticipantsEventsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ParticipantsEvents *ParticipantsEventsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ParticipantsEvents.Contract.ParticipantsEventsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ParticipantsEvents *ParticipantsEventsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ParticipantsEvents.Contract.ParticipantsEventsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ParticipantsEvents *ParticipantsEventsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ParticipantsEvents.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ParticipantsEvents *ParticipantsEventsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ParticipantsEvents.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ParticipantsEvents *ParticipantsEventsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ParticipantsEvents.Contract.contract.Transact(opts, method, params...)
}

// ParticipantsEventsValidatorCreatedIterator is returned from FilterValidatorCreated and is used to iterate over the raw logs and unpacked data for ValidatorCreated events raised by the ParticipantsEvents contract.
type ParticipantsEventsValidatorCreatedIterator struct {
	Event *ParticipantsEventsValidatorCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsEventsValidatorCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsEventsValidatorCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsEventsValidatorCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsEventsValidatorCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsEventsValidatorCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsEventsValidatorCreated represents a ValidatorCreated event raised by the ParticipantsEvents contract.
type ParticipantsEventsValidatorCreated struct {
	Validator common.Address
	Signer    common.Address
	MadID     [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorCreated is a free log retrieval operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_ParticipantsEvents *ParticipantsEventsFilterer) FilterValidatorCreated(opts *bind.FilterOpts, validator []common.Address, signer []common.Address) (*ParticipantsEventsValidatorCreatedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var signerRule []interface{}
	for _, signerItem := range signer {
		signerRule = append(signerRule, signerItem)
	}

	logs, sub, err := _ParticipantsEvents.contract.FilterLogs(opts, "ValidatorCreated", validatorRule, signerRule)
	if err != nil {
		return nil, err
	}
	return &ParticipantsEventsValidatorCreatedIterator{contract: _ParticipantsEvents.contract, event: "ValidatorCreated", logs: logs, sub: sub}, nil
}

// WatchValidatorCreated is a free log subscription operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_ParticipantsEvents *ParticipantsEventsFilterer) WatchValidatorCreated(opts *bind.WatchOpts, sink chan<- *ParticipantsEventsValidatorCreated, validator []common.Address, signer []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var signerRule []interface{}
	for _, signerItem := range signer {
		signerRule = append(signerRule, signerItem)
	}

	logs, sub, err := _ParticipantsEvents.contract.WatchLogs(opts, "ValidatorCreated", validatorRule, signerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsEventsValidatorCreated)
				if err := _ParticipantsEvents.contract.UnpackLog(event, "ValidatorCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorCreated is a log parse operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_ParticipantsEvents *ParticipantsEventsFilterer) ParseValidatorCreated(log types.Log) (*ParticipantsEventsValidatorCreated, error) {
	event := new(ParticipantsEventsValidatorCreated)
	if err := _ParticipantsEvents.contract.UnpackLog(event, "ValidatorCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ParticipantsEventsValidatorJoinedIterator is returned from FilterValidatorJoined and is used to iterate over the raw logs and unpacked data for ValidatorJoined events raised by the ParticipantsEvents contract.
type ParticipantsEventsValidatorJoinedIterator struct {
	Event *ParticipantsEventsValidatorJoined // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsEventsValidatorJoinedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsEventsValidatorJoined)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsEventsValidatorJoined)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsEventsValidatorJoinedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsEventsValidatorJoinedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsEventsValidatorJoined represents a ValidatorJoined event raised by the ParticipantsEvents contract.
type ParticipantsEventsValidatorJoined struct {
	Validator common.Address
	MadID     [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorJoined is a free log retrieval operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_ParticipantsEvents *ParticipantsEventsFilterer) FilterValidatorJoined(opts *bind.FilterOpts, validator []common.Address) (*ParticipantsEventsValidatorJoinedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsEvents.contract.FilterLogs(opts, "ValidatorJoined", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ParticipantsEventsValidatorJoinedIterator{contract: _ParticipantsEvents.contract, event: "ValidatorJoined", logs: logs, sub: sub}, nil
}

// WatchValidatorJoined is a free log subscription operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_ParticipantsEvents *ParticipantsEventsFilterer) WatchValidatorJoined(opts *bind.WatchOpts, sink chan<- *ParticipantsEventsValidatorJoined, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsEvents.contract.WatchLogs(opts, "ValidatorJoined", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsEventsValidatorJoined)
				if err := _ParticipantsEvents.contract.UnpackLog(event, "ValidatorJoined", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorJoined is a log parse operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_ParticipantsEvents *ParticipantsEventsFilterer) ParseValidatorJoined(log types.Log) (*ParticipantsEventsValidatorJoined, error) {
	event := new(ParticipantsEventsValidatorJoined)
	if err := _ParticipantsEvents.contract.UnpackLog(event, "ValidatorJoined", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ParticipantsEventsValidatorLeftIterator is returned from FilterValidatorLeft and is used to iterate over the raw logs and unpacked data for ValidatorLeft events raised by the ParticipantsEvents contract.
type ParticipantsEventsValidatorLeftIterator struct {
	Event *ParticipantsEventsValidatorLeft // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsEventsValidatorLeftIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsEventsValidatorLeft)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsEventsValidatorLeft)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsEventsValidatorLeftIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsEventsValidatorLeftIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsEventsValidatorLeft represents a ValidatorLeft event raised by the ParticipantsEvents contract.
type ParticipantsEventsValidatorLeft struct {
	Validator common.Address
	PkHash    [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorLeft is a free log retrieval operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_ParticipantsEvents *ParticipantsEventsFilterer) FilterValidatorLeft(opts *bind.FilterOpts, validator []common.Address) (*ParticipantsEventsValidatorLeftIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsEvents.contract.FilterLogs(opts, "ValidatorLeft", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ParticipantsEventsValidatorLeftIterator{contract: _ParticipantsEvents.contract, event: "ValidatorLeft", logs: logs, sub: sub}, nil
}

// WatchValidatorLeft is a free log subscription operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_ParticipantsEvents *ParticipantsEventsFilterer) WatchValidatorLeft(opts *bind.WatchOpts, sink chan<- *ParticipantsEventsValidatorLeft, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsEvents.contract.WatchLogs(opts, "ValidatorLeft", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsEventsValidatorLeft)
				if err := _ParticipantsEvents.contract.UnpackLog(event, "ValidatorLeft", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorLeft is a log parse operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_ParticipantsEvents *ParticipantsEventsFilterer) ParseValidatorLeft(log types.Log) (*ParticipantsEventsValidatorLeft, error) {
	event := new(ParticipantsEventsValidatorLeft)
	if err := _ParticipantsEvents.contract.UnpackLog(event, "ValidatorLeft", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ParticipantsEventsValidatorQueuedIterator is returned from FilterValidatorQueued and is used to iterate over the raw logs and unpacked data for ValidatorQueued events raised by the ParticipantsEvents contract.
type ParticipantsEventsValidatorQueuedIterator struct {
	Event *ParticipantsEventsValidatorQueued // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsEventsValidatorQueuedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsEventsValidatorQueued)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsEventsValidatorQueued)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsEventsValidatorQueuedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsEventsValidatorQueuedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsEventsValidatorQueued represents a ValidatorQueued event raised by the ParticipantsEvents contract.
type ParticipantsEventsValidatorQueued struct {
	Validator common.Address
	PkHash    [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorQueued is a free log retrieval operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_ParticipantsEvents *ParticipantsEventsFilterer) FilterValidatorQueued(opts *bind.FilterOpts, validator []common.Address) (*ParticipantsEventsValidatorQueuedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsEvents.contract.FilterLogs(opts, "ValidatorQueued", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ParticipantsEventsValidatorQueuedIterator{contract: _ParticipantsEvents.contract, event: "ValidatorQueued", logs: logs, sub: sub}, nil
}

// WatchValidatorQueued is a free log subscription operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_ParticipantsEvents *ParticipantsEventsFilterer) WatchValidatorQueued(opts *bind.WatchOpts, sink chan<- *ParticipantsEventsValidatorQueued, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsEvents.contract.WatchLogs(opts, "ValidatorQueued", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsEventsValidatorQueued)
				if err := _ParticipantsEvents.contract.UnpackLog(event, "ValidatorQueued", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorQueued is a log parse operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_ParticipantsEvents *ParticipantsEventsFilterer) ParseValidatorQueued(log types.Log) (*ParticipantsEventsValidatorQueued, error) {
	event := new(ParticipantsEventsValidatorQueued)
	if err := _ParticipantsEvents.contract.UnpackLog(event, "ValidatorQueued", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ParticipantsFacetMetaData contains all meta data concerning the ParticipantsFacet contract.
var ParticipantsFacetMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"madID\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"madID\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"pkHash\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorLeft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"pkHash\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorQueued\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"_madID\",\"type\":\"uint256[2]\"}],\"name\":\"addValidator\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmValidators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"getValidatorPublicKey\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractRegistry\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"initializeParticipants\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"_madID\",\"type\":\"uint256[2]\"}],\"name\":\"removeValidator\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"}],\"name\":\"setChainId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"max\",\"type\":\"uint8\"}],\"name\":\"setValidatorMaxCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorMaxCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
<<<<<<< Updated upstream
	Bin: "0x60806040523480156200001157600080fd5b506000620000296200007560201b62000eb01760201c565b9050338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620000a2565b6000807f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90508091505090565b6135c280620000b26000396000f3fe608060405234801561001057600080fd5b50600436106101515760003560e01c8063a179f124116100cd578063e348da1311610081578063ee8420dd11610066578063ee8420dd14610326578063facd743b14610342578063fad8b32a1461037257610151565b8063e348da13146102da578063eb6320c7146102f657610151565b8063b7ab4db5116100b2578063b7ab4db514610296578063be9a6555146102b4578063dc978059146102be57610151565b8063a179f1241461025e578063ab033ea91461027a57610151565b80633408e470116101245780634e6f4a22116101095780634e6f4a22146101f45780636053617214610224578063844469b21461022e57610151565b80633408e470146101b857806335c6a163146101d657610151565b806307da68f51461015657806309f0d45d146101605780630f43a6771461017e5780632cab37f71461019c575b600080fd5b61015e61038e565b005b61016861042b565b60405161017591906125e2565b60405180910390f35b61018661044b565b60405161019391906125e2565b60405180910390f35b6101b660048036038101906101b1919061262e565b61046b565b005b6101c0610492565b6040516101cd919061267a565b60405180910390f35b6101de6104a1565b6040516101eb91906126b0565b60405180910390f35b61020e60048036038101906102099190612729565b6104b0565b60405161021b919061280b565b60405180910390f35b61022c6104c8565b005b6102486004803603810190610243919061284d565b6105d3565b60405161025591906125e2565b60405180910390f35b610278600480360381019061027391906128b9565b61068c565b005b610294600480360381019061028f9190612729565b610733565b005b61029e610825565b6040516102ab91906129a4565b60405180910390f35b6102bc6108bc565b005b6102d860048036038101906102d39190612729565b610959565b005b6102f460048036038101906102ef9190612729565b610a4b565b005b610310600480360381019061030b919061284d565b610baa565b60405161031d91906125e2565b60405180910390f35b610340600480360381019061033b9190612a04565b610c36565b005b61035c60048036038101906103579190612729565b610d48565b60405161036991906126b0565b60405180910390f35b61038c60048036038101906103879190612729565b610d5a565b005b6000610398610eb0565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610428576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041f90612ab4565b60405180910390fd5b50565b6000610435610edd565b60040160019054906101000a900460ff16905090565b6000610455610edd565b60040160009054906101000a900460ff16905090565b80610474610edd565b60040160016101000a81548160ff021916908360ff16021790555050565b600061049c610f0a565b905090565b60006104ab610f2d565b905090565b6104b8612539565b6104c18261102d565b9050919050565b60006104d2610eb0565b90508060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610566576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055d90612b46565b60405180910390fd5b8060020160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610643576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063a90612bb2565b60405180910390fd5b61068483836002806020026040519081016040528092919082600260200280828437600081840152601f19601f820116905080830192505050505050611154565b905092915050565b6000610696610eb0565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610726576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071d90612ab4565b60405180910390fd5b61072f826116d7565b5050565b600061073d610eb0565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146107d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c890612c44565b60405180910390fd5b60006107db610eb0565b9050828160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b606061082f610edd565b6000018054806020026020016040519081016040528092919081815260200182805480156108b257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610868575b5050505050905090565b60006108c6610eb0565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610956576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094d90612ab4565b60405180910390fd5b50565b6000610963610eb0565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146109f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ee90612c44565b60405180910390fd5b6000610a01610eb0565b9050828160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6000610a55610eb0565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610b0057508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610b3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3690612cd6565b60405180910390fd5b6000610b49610eb0565b905060018160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b6000610bed83836002806020026040519081016040528092919082600260200280828437600081840152601f19601f820116905080830192505050505050611704565b610c2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2390612d42565b60405180910390fd5b6000905092915050565b6000610c40610eb0565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610cd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ccb90612c44565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610d44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3b90612dae565b60405180910390fd5b5050565b6000610d5382611aa6565b9050919050565b6000610d64610eb0565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610e0f57508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610e4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4590612cd6565b60405180910390fd5b6000610e58610eb0565b90508060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff0219169055505050565b6000807f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90508091505090565b6000807f310970b1d84cbb8af371a12019b396e9511a9b44411c1dabeec3e3d59d9a50f690508091505090565b6000610f14611b25565b60000160009054906101000a900463ffffffff16905090565b600080610f38610edd565b90505b8060040160019054906101000a900460ff1660ff168160040160009054906101000a900460ff1660ff16108015610f7d57506000610f7b82600601611b52565b115b15611025576000610f9082600601611b95565b905060008260030160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060028060200260405190810160405280929190826002801561100c576020028201915b815481526020019060010190808311610ff8575b5050505050905061101d8282611d56565b505050610f3b565b600191505090565b611035612539565b600061103f610edd565b90508060020160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166110cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c690612e1a565b60405180910390fd5b8060030160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600280602002604051908101604052809291908260028015611147576020028201915b815481526020019060010190808311611133575b5050505050915050919050565b60008061115f610edd565b90508060020160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166111ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e690612e86565b60405180910390fd5b60008160010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008260030160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002806020026040519081016040528092919082600280156112af576020028201915b81548152602001906001019080831161129b575b50505050509050846000600281106112ca576112c9612ea6565b5b6020020151816000600281106112e3576112e2612ea6565b5b602002015114611328576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161131f90612f47565b60405180910390fd5b8460016002811061133c5761133b612ea6565b5b60200201518160016002811061135557611354612ea6565b5b60200201511461139a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139190612f47565b60405180910390fd5b8260010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600090558260020160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff02191690558260030160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600061147d919061255b565b6000600184600001805490506114939190612f96565b905060008460000182815481106114ad576114ac612ea6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050838560010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555084600001828154811061153657611535612ea6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685600001858154811061157757611576612ea6565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550846000018054806115d3576115d2612fca565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055905560006116138961204e565b905060008111156116475761162889826120a3565b5060018660040160026101000a81548160ff0219169083151502179055505b8873ffffffffffffffffffffffffffffffffffffffff167f319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd948960405161168d919061280b565b60405180910390a285600401600081819054906101000a900460ff166116b290612ff9565b91906101000a81548160ff021916908360ff1602179055965050505050505092915050565b806116e0611b25565b60000160006101000a81548163ffffffff021916908363ffffffff16021790555050565b60008061170f610edd565b9050600061171b612290565b90508160020160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156117ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117a39061306f565b60405180910390fd5b80600001546117ba8661204e565b10156117fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f2906130db565b60405180910390fd5b8160040160019054906101000a900460ff1660ff168260040160009054906101000a900460ff1660ff161015611a3e5781600001859080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600182600001805490506118a49190612f96565b8260010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060018260020160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550838260030160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020906002611993929190612569565b5060018260040160026101000a81548160ff02191690831515021790555081600401600081819054906101000a900460ff16809291906119d2906130fb565b91906101000a81548160ff021916908360ff160217905550508473ffffffffffffffffffffffffffffffffffffffff167f8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd985604051611a31919061280b565b60405180910390a2611a9a565b611a4b82600601866122bd565b8473ffffffffffffffffffffffffffffffffffffffff167fb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d85604051611a91919061280b565b60405180910390a25b60019250505092915050565b600080611ab1610edd565b90508060020160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff168015611b1d5750611b11612461565b611b1a8461204e565b10155b915050919050565b6000807fa53f90683b42ecb37674e5c8c5c9cabf849818fdc2fdfb57bbe3c738f7b50d0e90508091505090565b60008160020160009054906101000a900463ffffffff168260020160049054906101000a900463ffffffff16611b889190613125565b63ffffffff169050919050565b60008160020160009054906101000a900463ffffffff1663ffffffff168260020160049054906101000a900463ffffffff1663ffffffff1611611c0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c04906131a5565b60405180910390fd5b8160010160008360020160009054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160010160008360020160009054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690558160000160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff021916905581600201600081819054906101000a900463ffffffff1680929190611d32906131c5565b91906101000a81548163ffffffff021916908363ffffffff16021790555050919050565b600080611d61610edd565b90508060020160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16158015611de657508060040160019054906101000a900460ff1660ff168160040160009054906101000a900460ff1660ff16105b611e25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1c9061323e565b60405180910390fd5b80600001849080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018160000180549050611e9e9190612f96565b8160010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060018160020160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550828160030160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020906002611f8d929190612569565b5060018160040160026101000a81548160ff02191690831515021790555080600401600081819054906101000a900460ff1680929190611fcc906130fb565b91906101000a81548160ff021916908360ff160217905550508373ffffffffffffffffffffffffffffffffffffffff167f8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd98460405161202b919061280b565b60405180910390a28060040160009054906101000a900460ff1691505092915050565b6000612058612290565b60090160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050919050565b6000806120ae612290565b905060008160090160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060010160009054906101000a900460ff16612146576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161213d906132aa565b60405180910390fd5b838160000154101561218d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121849061333c565b60405180910390fd5b612195612474565b816002015411156121db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121d2906133a8565b60405180910390fd5b6121f284826004015461248790919063ffffffff16565b81600401819055506122118482600001546124e090919063ffffffff16565b816000018190555060008160010160006101000a81548160ff0219169083151502179055508473ffffffffffffffffffffffffffffffffffffffff167f252a696583e35c4d61332829d3bb2a8236f2500140258f089951799c9b999a9c8560405161227c91906133d7565b60405180910390a260019250505092915050565b6000807f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237ef90508091505090565b8160000160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561234c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123439061343e565b60405180910390fd5b808260010160008460020160049054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555081600201600481819054906101000a900463ffffffff168092919061243e906131c5565b91906101000a81548163ffffffff021916908363ffffffff160217905550505050565b600061246b612290565b60000154905090565b600061247e611b25565b60010154905090565b6000828284612496919061345e565b91508110156124da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124d190613500565b60405180910390fd5b92915050565b60008282846124ef9190612f96565b9150811115612533576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161252a9061356c565b60405180910390fd5b92915050565b6040518060400160405280600290602082028036833780820191505090505090565b506000815560010160009055565b8260028101928215612598579160200282015b8281111561259757825182559160200191906001019061257c565b5b5090506125a591906125a9565b5090565b5b808211156125c25760008160009055506001016125aa565b5090565b600060ff82169050919050565b6125dc816125c6565b82525050565b60006020820190506125f760008301846125d3565b92915050565b600080fd5b61260b816125c6565b811461261657600080fd5b50565b60008135905061262881612602565b92915050565b600060208284031215612644576126436125fd565b5b600061265284828501612619565b91505092915050565b600063ffffffff82169050919050565b6126748161265b565b82525050565b600060208201905061268f600083018461266b565b92915050565b60008115159050919050565b6126aa81612695565b82525050565b60006020820190506126c560008301846126a1565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006126f6826126cb565b9050919050565b612706816126eb565b811461271157600080fd5b50565b600081359050612723816126fd565b92915050565b60006020828403121561273f5761273e6125fd565b5b600061274d84828501612714565b91505092915050565b600060029050919050565b600081905092915050565b6000819050919050565b6000819050919050565b61278981612776565b82525050565b600061279b8383612780565b60208301905092915050565b6000602082019050919050565b6127bd81612756565b6127c78184612761565b92506127d28261276c565b8060005b838110156128035781516127ea878261278f565b96506127f5836127a7565b9250506001810190506127d6565b505050505050565b600060408201905061282060008301846127b4565b92915050565b600080fd5b60008190508260206002028201111561284757612846612826565b5b92915050565b60008060608385031215612864576128636125fd565b5b600061287285828601612714565b92505060206128838582860161282b565b9150509250929050565b6128968161265b565b81146128a157600080fd5b50565b6000813590506128b38161288d565b92915050565b6000602082840312156128cf576128ce6125fd565b5b60006128dd848285016128a4565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61291b816126eb565b82525050565b600061292d8383612912565b60208301905092915050565b6000602082019050919050565b6000612951826128e6565b61295b81856128f1565b935061296683612902565b8060005b8381101561299757815161297e8882612921565b975061298983612939565b92505060018101905061296a565b5085935050505092915050565b600060208201905081810360008301526129be8184612946565b905092915050565b60006129d1826126eb565b9050919050565b6129e1816129c6565b81146129ec57600080fd5b50565b6000813590506129fe816129d8565b92915050565b600060208284031215612a1a57612a196125fd565b5b6000612a28848285016129ef565b91505092915050565b600082825260208201905092915050565b7f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160008201527f6c6c6f7765640000000000000000000000000000000000000000000000000000602082015250565b6000612a9e602683612a31565b9150612aa982612a42565b604082019050919050565b60006020820190508181036000830152612acd81612a91565b9050919050565b7f41636365737320436f6e74726f6c3a206f776e657273686970206e6f7420677260008201527f616e746564000000000000000000000000000000000000000000000000000000602082015250565b6000612b30602583612a31565b9150612b3b82612ad4565b604082019050919050565b60006020820190508181036000830152612b5f81612b23565b9050919050565b7f4f6e6c792073656c662072656d6f76616c20737570706f727465640000000000600082015250565b6000612b9c601b83612a31565b9150612ba782612b66565b602082019050919050565b60006020820190508181036000830152612bcb81612b8f565b9050919050565b7f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60008201527f6c6f776564000000000000000000000000000000000000000000000000000000602082015250565b6000612c2e602583612a31565b9150612c3982612bd2565b604082019050919050565b60006020820190508181036000830152612c5d81612c21565b9050919050565b7f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060008201527f657261746f7220616c6c6f776564000000000000000000000000000000000000602082015250565b6000612cc0602e83612a31565b9150612ccb82612c64565b604082019050919050565b60006020820190508181036000830152612cef81612cb3565b9050919050565b7f6661696c656420746f20616464206f7220717565756500000000000000000000600082015250565b6000612d2c601683612a31565b9150612d3782612cf6565b602082019050919050565b60006020820190508181036000830152612d5b81612d1f565b9050919050565b7f6e696c2072656769737472792061646472657373000000000000000000000000600082015250565b6000612d98601483612a31565b9150612da382612d62565b602082019050919050565b60006020820190508181036000830152612dc781612d8b565b9050919050565b7f56616c696461746f72206e6f742070726573656e742e00000000000000000000600082015250565b6000612e04601683612a31565b9150612e0f82612dce565b602082019050919050565b60006020820190508181036000830152612e3381612df7565b9050919050565b7f56616c696461746f72206e6f742070726573656e740000000000000000000000600082015250565b6000612e70601583612a31565b9150612e7b82612e3a565b602082019050919050565b60006020820190508181036000830152612e9f81612e63565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f56616c696461746f7220646f65736e2774206d61746368207075626c6963206b60008201527f6579000000000000000000000000000000000000000000000000000000000000602082015250565b6000612f31602283612a31565b9150612f3c82612ed5565b604082019050919050565b60006020820190508181036000830152612f6081612f24565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612fa182612776565b9150612fac83612776565b925082821015612fbf57612fbe612f67565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000613004826125c6565b9150600082141561301857613017612f67565b5b600182039050919050565b7f76616c696461746f7220616c72656164792070726573656e7400000000000000600082015250565b6000613059601983612a31565b915061306482613023565b602082019050919050565b600060208201905081810360008301526130888161304c565b9050919050565b7f696e73756666696369656e74207374616b650000000000000000000000000000600082015250565b60006130c5601283612a31565b91506130d08261308f565b602082019050919050565b600060208201905081810360008301526130f4816130b8565b9050919050565b6000613106826125c6565b915060ff82141561311a57613119612f67565b5b600182019050919050565b60006131308261265b565b915061313b8361265b565b92508282101561314e5761314d612f67565b5b828203905092915050565b7f717565756520697320656d707479000000000000000000000000000000000000600082015250565b600061318f600e83612a31565b915061319a82613159565b602082019050919050565b600060208201905081810360008301526131be81613182565b9050919050565b60006131d08261265b565b915063ffffffff8214156131e7576131e6612f67565b5b600182019050919050565b7f43616e277420616464206d6f72652076616c696461746f72732e000000000000600082015250565b6000613228601a83612a31565b9150613233826131f2565b602082019050919050565b600060208201905081810360008301526132578161321b565b9050919050565b7f5374616b6520756e6c6f636b206e6f7420726571756573746564000000000000600082015250565b6000613294601a83612a31565b915061329f8261325e565b602082019050919050565b600060208201905081810360008301526132c381613287565b9050919050565b7f5374616b6520756e6c6f636b207265717565737465642067726561746572207460008201527f68616e207374616b650000000000000000000000000000000000000000000000602082015250565b6000613326602983612a31565b9150613331826132ca565b604082019050919050565b6000602082019050818103600083015261335581613319565b9050919050565b7f4e6f742072656164790000000000000000000000000000000000000000000000600082015250565b6000613392600983612a31565b915061339d8261335c565b602082019050919050565b600060208201905081810360008301526133c181613385565b9050919050565b6133d181612776565b82525050565b60006020820190506133ec60008301846133c8565b92915050565b7f6475706c696361746573206e6f7420616c6c6f77656400000000000000000000600082015250565b6000613428601683612a31565b9150613433826133f2565b602082019050919050565b600060208201905081810360008301526134578161341b565b9050919050565b600061346982612776565b915061347483612776565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156134a9576134a8612f67565b5b828201905092915050565b7f64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000600082015250565b60006134ea601483612a31565b91506134f5826134b4565b602082019050919050565b60006020820190508181036000830152613519816134dd565b9050919050565b7f64732d6d6174682d7375622d756e646572666c6f770000000000000000000000600082015250565b6000613556601583612a31565b915061356182613520565b602082019050919050565b6000602082019050818103600083015261358581613549565b905091905056fea26469706673582212203821599be92685554ca32ba7bcc9dbf012c2dcf1a844579d4690e91236d51d3764736f6c634300080b0033",
=======
	Bin: "",
>>>>>>> Stashed changes
}

// ParticipantsFacetABI is the input ABI used to generate the binding from.
// Deprecated: Use ParticipantsFacetMetaData.ABI instead.
var ParticipantsFacetABI = ParticipantsFacetMetaData.ABI

// ParticipantsFacetBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ParticipantsFacetMetaData.Bin instead.
var ParticipantsFacetBin = ParticipantsFacetMetaData.Bin

// DeployParticipantsFacet deploys a new Ethereum contract, binding an instance of ParticipantsFacet to it.
func DeployParticipantsFacet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ParticipantsFacet, error) {
	parsed, err := ParticipantsFacetMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ParticipantsFacetBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ParticipantsFacet{ParticipantsFacetCaller: ParticipantsFacetCaller{contract: contract}, ParticipantsFacetTransactor: ParticipantsFacetTransactor{contract: contract}, ParticipantsFacetFilterer: ParticipantsFacetFilterer{contract: contract}}, nil
}

// ParticipantsFacet is an auto generated Go binding around an Ethereum contract.
type ParticipantsFacet struct {
	ParticipantsFacetCaller     // Read-only binding to the contract
	ParticipantsFacetTransactor // Write-only binding to the contract
	ParticipantsFacetFilterer   // Log filterer for contract events
}

// ParticipantsFacetCaller is an auto generated read-only Go binding around an Ethereum contract.
type ParticipantsFacetCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ParticipantsFacetTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ParticipantsFacetTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ParticipantsFacetFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ParticipantsFacetFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ParticipantsFacetSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ParticipantsFacetSession struct {
	Contract     *ParticipantsFacet // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// ParticipantsFacetCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ParticipantsFacetCallerSession struct {
	Contract *ParticipantsFacetCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// ParticipantsFacetTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ParticipantsFacetTransactorSession struct {
	Contract     *ParticipantsFacetTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// ParticipantsFacetRaw is an auto generated low-level Go binding around an Ethereum contract.
type ParticipantsFacetRaw struct {
	Contract *ParticipantsFacet // Generic contract binding to access the raw methods on
}

// ParticipantsFacetCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ParticipantsFacetCallerRaw struct {
	Contract *ParticipantsFacetCaller // Generic read-only contract binding to access the raw methods on
}

// ParticipantsFacetTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ParticipantsFacetTransactorRaw struct {
	Contract *ParticipantsFacetTransactor // Generic write-only contract binding to access the raw methods on
}

// NewParticipantsFacet creates a new instance of ParticipantsFacet, bound to a specific deployed contract.
func NewParticipantsFacet(address common.Address, backend bind.ContractBackend) (*ParticipantsFacet, error) {
	contract, err := bindParticipantsFacet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ParticipantsFacet{ParticipantsFacetCaller: ParticipantsFacetCaller{contract: contract}, ParticipantsFacetTransactor: ParticipantsFacetTransactor{contract: contract}, ParticipantsFacetFilterer: ParticipantsFacetFilterer{contract: contract}}, nil
}

// NewParticipantsFacetCaller creates a new read-only instance of ParticipantsFacet, bound to a specific deployed contract.
func NewParticipantsFacetCaller(address common.Address, caller bind.ContractCaller) (*ParticipantsFacetCaller, error) {
	contract, err := bindParticipantsFacet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ParticipantsFacetCaller{contract: contract}, nil
}

// NewParticipantsFacetTransactor creates a new write-only instance of ParticipantsFacet, bound to a specific deployed contract.
func NewParticipantsFacetTransactor(address common.Address, transactor bind.ContractTransactor) (*ParticipantsFacetTransactor, error) {
	contract, err := bindParticipantsFacet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ParticipantsFacetTransactor{contract: contract}, nil
}

// NewParticipantsFacetFilterer creates a new log filterer instance of ParticipantsFacet, bound to a specific deployed contract.
func NewParticipantsFacetFilterer(address common.Address, filterer bind.ContractFilterer) (*ParticipantsFacetFilterer, error) {
	contract, err := bindParticipantsFacet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ParticipantsFacetFilterer{contract: contract}, nil
}

// bindParticipantsFacet binds a generic wrapper to an already deployed contract.
func bindParticipantsFacet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ParticipantsFacetABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ParticipantsFacet *ParticipantsFacetRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ParticipantsFacet.Contract.ParticipantsFacetCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ParticipantsFacet *ParticipantsFacetRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.ParticipantsFacetTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ParticipantsFacet *ParticipantsFacetRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.ParticipantsFacetTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ParticipantsFacet *ParticipantsFacetCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ParticipantsFacet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ParticipantsFacet *ParticipantsFacetTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ParticipantsFacet *ParticipantsFacetTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.contract.Transact(opts, method, params...)
}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint32)
func (_ParticipantsFacet *ParticipantsFacetCaller) GetChainId(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _ParticipantsFacet.contract.Call(opts, &out, "getChainId")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint32)
func (_ParticipantsFacet *ParticipantsFacetSession) GetChainId() (uint32, error) {
	return _ParticipantsFacet.Contract.GetChainId(&_ParticipantsFacet.CallOpts)
}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint32)
func (_ParticipantsFacet *ParticipantsFacetCallerSession) GetChainId() (uint32, error) {
	return _ParticipantsFacet.Contract.GetChainId(&_ParticipantsFacet.CallOpts)
}

// GetValidatorPublicKey is a free data retrieval call binding the contract method 0x4e6f4a22.
//
// Solidity: function getValidatorPublicKey(address _validator) view returns(uint256[2])
func (_ParticipantsFacet *ParticipantsFacetCaller) GetValidatorPublicKey(opts *bind.CallOpts, _validator common.Address) ([2]*big.Int, error) {
	var out []interface{}
	err := _ParticipantsFacet.contract.Call(opts, &out, "getValidatorPublicKey", _validator)

	if err != nil {
		return *new([2]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([2]*big.Int)).(*[2]*big.Int)

	return out0, err

}

// GetValidatorPublicKey is a free data retrieval call binding the contract method 0x4e6f4a22.
//
// Solidity: function getValidatorPublicKey(address _validator) view returns(uint256[2])
func (_ParticipantsFacet *ParticipantsFacetSession) GetValidatorPublicKey(_validator common.Address) ([2]*big.Int, error) {
	return _ParticipantsFacet.Contract.GetValidatorPublicKey(&_ParticipantsFacet.CallOpts, _validator)
}

// GetValidatorPublicKey is a free data retrieval call binding the contract method 0x4e6f4a22.
//
// Solidity: function getValidatorPublicKey(address _validator) view returns(uint256[2])
func (_ParticipantsFacet *ParticipantsFacetCallerSession) GetValidatorPublicKey(_validator common.Address) ([2]*big.Int, error) {
	return _ParticipantsFacet.Contract.GetValidatorPublicKey(&_ParticipantsFacet.CallOpts, _validator)
}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_ParticipantsFacet *ParticipantsFacetCaller) GetValidators(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _ParticipantsFacet.contract.Call(opts, &out, "getValidators")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_ParticipantsFacet *ParticipantsFacetSession) GetValidators() ([]common.Address, error) {
	return _ParticipantsFacet.Contract.GetValidators(&_ParticipantsFacet.CallOpts)
}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_ParticipantsFacet *ParticipantsFacetCallerSession) GetValidators() ([]common.Address, error) {
	return _ParticipantsFacet.Contract.GetValidators(&_ParticipantsFacet.CallOpts)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_ParticipantsFacet *ParticipantsFacetCaller) IsValidator(opts *bind.CallOpts, validator common.Address) (bool, error) {
	var out []interface{}
	err := _ParticipantsFacet.contract.Call(opts, &out, "isValidator", validator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_ParticipantsFacet *ParticipantsFacetSession) IsValidator(validator common.Address) (bool, error) {
	return _ParticipantsFacet.Contract.IsValidator(&_ParticipantsFacet.CallOpts, validator)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_ParticipantsFacet *ParticipantsFacetCallerSession) IsValidator(validator common.Address) (bool, error) {
	return _ParticipantsFacet.Contract.IsValidator(&_ParticipantsFacet.CallOpts, validator)
}

// ValidatorCount is a free data retrieval call binding the contract method 0x0f43a677.
//
// Solidity: function validatorCount() view returns(uint8)
func (_ParticipantsFacet *ParticipantsFacetCaller) ValidatorCount(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _ParticipantsFacet.contract.Call(opts, &out, "validatorCount")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// ValidatorCount is a free data retrieval call binding the contract method 0x0f43a677.
//
// Solidity: function validatorCount() view returns(uint8)
func (_ParticipantsFacet *ParticipantsFacetSession) ValidatorCount() (uint8, error) {
	return _ParticipantsFacet.Contract.ValidatorCount(&_ParticipantsFacet.CallOpts)
}

// ValidatorCount is a free data retrieval call binding the contract method 0x0f43a677.
//
// Solidity: function validatorCount() view returns(uint8)
func (_ParticipantsFacet *ParticipantsFacetCallerSession) ValidatorCount() (uint8, error) {
	return _ParticipantsFacet.Contract.ValidatorCount(&_ParticipantsFacet.CallOpts)
}

// ValidatorMaxCount is a free data retrieval call binding the contract method 0x09f0d45d.
//
// Solidity: function validatorMaxCount() view returns(uint8)
func (_ParticipantsFacet *ParticipantsFacetCaller) ValidatorMaxCount(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _ParticipantsFacet.contract.Call(opts, &out, "validatorMaxCount")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// ValidatorMaxCount is a free data retrieval call binding the contract method 0x09f0d45d.
//
// Solidity: function validatorMaxCount() view returns(uint8)
func (_ParticipantsFacet *ParticipantsFacetSession) ValidatorMaxCount() (uint8, error) {
	return _ParticipantsFacet.Contract.ValidatorMaxCount(&_ParticipantsFacet.CallOpts)
}

// ValidatorMaxCount is a free data retrieval call binding the contract method 0x09f0d45d.
//
// Solidity: function validatorMaxCount() view returns(uint8)
func (_ParticipantsFacet *ParticipantsFacetCallerSession) ValidatorMaxCount() (uint8, error) {
	return _ParticipantsFacet.Contract.ValidatorMaxCount(&_ParticipantsFacet.CallOpts)
}

// AddValidator is a paid mutator transaction binding the contract method 0xeb6320c7.
//
// Solidity: function addValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_ParticipantsFacet *ParticipantsFacetTransactor) AddValidator(opts *bind.TransactOpts, _validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _ParticipantsFacet.contract.Transact(opts, "addValidator", _validator, _madID)
}

// AddValidator is a paid mutator transaction binding the contract method 0xeb6320c7.
//
// Solidity: function addValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_ParticipantsFacet *ParticipantsFacetSession) AddValidator(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.AddValidator(&_ParticipantsFacet.TransactOpts, _validator, _madID)
}

// AddValidator is a paid mutator transaction binding the contract method 0xeb6320c7.
//
// Solidity: function addValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_ParticipantsFacet *ParticipantsFacetTransactorSession) AddValidator(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.AddValidator(&_ParticipantsFacet.TransactOpts, _validator, _madID)
}

// ConfirmValidators is a paid mutator transaction binding the contract method 0x35c6a163.
//
// Solidity: function confirmValidators() returns(bool)
func (_ParticipantsFacet *ParticipantsFacetTransactor) ConfirmValidators(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ParticipantsFacet.contract.Transact(opts, "confirmValidators")
}

// ConfirmValidators is a paid mutator transaction binding the contract method 0x35c6a163.
//
// Solidity: function confirmValidators() returns(bool)
func (_ParticipantsFacet *ParticipantsFacetSession) ConfirmValidators() (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.ConfirmValidators(&_ParticipantsFacet.TransactOpts)
}

// ConfirmValidators is a paid mutator transaction binding the contract method 0x35c6a163.
//
// Solidity: function confirmValidators() returns(bool)
func (_ParticipantsFacet *ParticipantsFacetTransactorSession) ConfirmValidators() (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.ConfirmValidators(&_ParticipantsFacet.TransactOpts)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_ParticipantsFacet *ParticipantsFacetTransactor) GrantOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.contract.Transact(opts, "grantOperator", who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_ParticipantsFacet *ParticipantsFacetSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.GrantOperator(&_ParticipantsFacet.TransactOpts, who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_ParticipantsFacet *ParticipantsFacetTransactorSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.GrantOperator(&_ParticipantsFacet.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_ParticipantsFacet *ParticipantsFacetTransactor) GrantOwner(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.contract.Transact(opts, "grantOwner", who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_ParticipantsFacet *ParticipantsFacetSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.GrantOwner(&_ParticipantsFacet.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_ParticipantsFacet *ParticipantsFacetTransactorSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.GrantOwner(&_ParticipantsFacet.TransactOpts, who)
}

// InitializeParticipants is a paid mutator transaction binding the contract method 0xee8420dd.
//
// Solidity: function initializeParticipants(address registry) returns()
func (_ParticipantsFacet *ParticipantsFacetTransactor) InitializeParticipants(opts *bind.TransactOpts, registry common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.contract.Transact(opts, "initializeParticipants", registry)
}

// InitializeParticipants is a paid mutator transaction binding the contract method 0xee8420dd.
//
// Solidity: function initializeParticipants(address registry) returns()
func (_ParticipantsFacet *ParticipantsFacetSession) InitializeParticipants(registry common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.InitializeParticipants(&_ParticipantsFacet.TransactOpts, registry)
}

// InitializeParticipants is a paid mutator transaction binding the contract method 0xee8420dd.
//
// Solidity: function initializeParticipants(address registry) returns()
func (_ParticipantsFacet *ParticipantsFacetTransactorSession) InitializeParticipants(registry common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.InitializeParticipants(&_ParticipantsFacet.TransactOpts, registry)
}

// RemoveValidator is a paid mutator transaction binding the contract method 0x844469b2.
//
// Solidity: function removeValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_ParticipantsFacet *ParticipantsFacetTransactor) RemoveValidator(opts *bind.TransactOpts, _validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _ParticipantsFacet.contract.Transact(opts, "removeValidator", _validator, _madID)
}

// RemoveValidator is a paid mutator transaction binding the contract method 0x844469b2.
//
// Solidity: function removeValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_ParticipantsFacet *ParticipantsFacetSession) RemoveValidator(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.RemoveValidator(&_ParticipantsFacet.TransactOpts, _validator, _madID)
}

// RemoveValidator is a paid mutator transaction binding the contract method 0x844469b2.
//
// Solidity: function removeValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_ParticipantsFacet *ParticipantsFacetTransactorSession) RemoveValidator(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.RemoveValidator(&_ParticipantsFacet.TransactOpts, _validator, _madID)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_ParticipantsFacet *ParticipantsFacetTransactor) RevokeOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.contract.Transact(opts, "revokeOperator", who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_ParticipantsFacet *ParticipantsFacetSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.RevokeOperator(&_ParticipantsFacet.TransactOpts, who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_ParticipantsFacet *ParticipantsFacetTransactorSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.RevokeOperator(&_ParticipantsFacet.TransactOpts, who)
}

// SetChainId is a paid mutator transaction binding the contract method 0xa179f124.
//
// Solidity: function setChainId(uint32 _chainId) returns()
func (_ParticipantsFacet *ParticipantsFacetTransactor) SetChainId(opts *bind.TransactOpts, _chainId uint32) (*types.Transaction, error) {
	return _ParticipantsFacet.contract.Transact(opts, "setChainId", _chainId)
}

// SetChainId is a paid mutator transaction binding the contract method 0xa179f124.
//
// Solidity: function setChainId(uint32 _chainId) returns()
func (_ParticipantsFacet *ParticipantsFacetSession) SetChainId(_chainId uint32) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.SetChainId(&_ParticipantsFacet.TransactOpts, _chainId)
}

// SetChainId is a paid mutator transaction binding the contract method 0xa179f124.
//
// Solidity: function setChainId(uint32 _chainId) returns()
func (_ParticipantsFacet *ParticipantsFacetTransactorSession) SetChainId(_chainId uint32) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.SetChainId(&_ParticipantsFacet.TransactOpts, _chainId)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_ParticipantsFacet *ParticipantsFacetTransactor) SetGovernance(opts *bind.TransactOpts, governance_ common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.contract.Transact(opts, "setGovernance", governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_ParticipantsFacet *ParticipantsFacetSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.SetGovernance(&_ParticipantsFacet.TransactOpts, governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_ParticipantsFacet *ParticipantsFacetTransactorSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.SetGovernance(&_ParticipantsFacet.TransactOpts, governance_)
}

// SetValidatorMaxCount is a paid mutator transaction binding the contract method 0x2cab37f7.
//
// Solidity: function setValidatorMaxCount(uint8 max) returns()
func (_ParticipantsFacet *ParticipantsFacetTransactor) SetValidatorMaxCount(opts *bind.TransactOpts, max uint8) (*types.Transaction, error) {
	return _ParticipantsFacet.contract.Transact(opts, "setValidatorMaxCount", max)
}

// SetValidatorMaxCount is a paid mutator transaction binding the contract method 0x2cab37f7.
//
// Solidity: function setValidatorMaxCount(uint8 max) returns()
func (_ParticipantsFacet *ParticipantsFacetSession) SetValidatorMaxCount(max uint8) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.SetValidatorMaxCount(&_ParticipantsFacet.TransactOpts, max)
}

// SetValidatorMaxCount is a paid mutator transaction binding the contract method 0x2cab37f7.
//
// Solidity: function setValidatorMaxCount(uint8 max) returns()
func (_ParticipantsFacet *ParticipantsFacetTransactorSession) SetValidatorMaxCount(max uint8) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.SetValidatorMaxCount(&_ParticipantsFacet.TransactOpts, max)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_ParticipantsFacet *ParticipantsFacetTransactor) Start(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ParticipantsFacet.contract.Transact(opts, "start")
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_ParticipantsFacet *ParticipantsFacetSession) Start() (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.Start(&_ParticipantsFacet.TransactOpts)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_ParticipantsFacet *ParticipantsFacetTransactorSession) Start() (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.Start(&_ParticipantsFacet.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_ParticipantsFacet *ParticipantsFacetTransactor) Stop(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ParticipantsFacet.contract.Transact(opts, "stop")
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_ParticipantsFacet *ParticipantsFacetSession) Stop() (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.Stop(&_ParticipantsFacet.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_ParticipantsFacet *ParticipantsFacetTransactorSession) Stop() (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.Stop(&_ParticipantsFacet.TransactOpts)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_ParticipantsFacet *ParticipantsFacetTransactor) TakeOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ParticipantsFacet.contract.Transact(opts, "takeOwnership")
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_ParticipantsFacet *ParticipantsFacetSession) TakeOwnership() (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.TakeOwnership(&_ParticipantsFacet.TransactOpts)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_ParticipantsFacet *ParticipantsFacetTransactorSession) TakeOwnership() (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.TakeOwnership(&_ParticipantsFacet.TransactOpts)
}

// ParticipantsFacetValidatorCreatedIterator is returned from FilterValidatorCreated and is used to iterate over the raw logs and unpacked data for ValidatorCreated events raised by the ParticipantsFacet contract.
type ParticipantsFacetValidatorCreatedIterator struct {
	Event *ParticipantsFacetValidatorCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsFacetValidatorCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsFacetValidatorCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsFacetValidatorCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsFacetValidatorCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsFacetValidatorCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsFacetValidatorCreated represents a ValidatorCreated event raised by the ParticipantsFacet contract.
type ParticipantsFacetValidatorCreated struct {
	Validator common.Address
	Signer    common.Address
	MadID     [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorCreated is a free log retrieval operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_ParticipantsFacet *ParticipantsFacetFilterer) FilterValidatorCreated(opts *bind.FilterOpts, validator []common.Address, signer []common.Address) (*ParticipantsFacetValidatorCreatedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var signerRule []interface{}
	for _, signerItem := range signer {
		signerRule = append(signerRule, signerItem)
	}

	logs, sub, err := _ParticipantsFacet.contract.FilterLogs(opts, "ValidatorCreated", validatorRule, signerRule)
	if err != nil {
		return nil, err
	}
	return &ParticipantsFacetValidatorCreatedIterator{contract: _ParticipantsFacet.contract, event: "ValidatorCreated", logs: logs, sub: sub}, nil
}

// WatchValidatorCreated is a free log subscription operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_ParticipantsFacet *ParticipantsFacetFilterer) WatchValidatorCreated(opts *bind.WatchOpts, sink chan<- *ParticipantsFacetValidatorCreated, validator []common.Address, signer []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var signerRule []interface{}
	for _, signerItem := range signer {
		signerRule = append(signerRule, signerItem)
	}

	logs, sub, err := _ParticipantsFacet.contract.WatchLogs(opts, "ValidatorCreated", validatorRule, signerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsFacetValidatorCreated)
				if err := _ParticipantsFacet.contract.UnpackLog(event, "ValidatorCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorCreated is a log parse operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_ParticipantsFacet *ParticipantsFacetFilterer) ParseValidatorCreated(log types.Log) (*ParticipantsFacetValidatorCreated, error) {
	event := new(ParticipantsFacetValidatorCreated)
	if err := _ParticipantsFacet.contract.UnpackLog(event, "ValidatorCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ParticipantsFacetValidatorJoinedIterator is returned from FilterValidatorJoined and is used to iterate over the raw logs and unpacked data for ValidatorJoined events raised by the ParticipantsFacet contract.
type ParticipantsFacetValidatorJoinedIterator struct {
	Event *ParticipantsFacetValidatorJoined // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsFacetValidatorJoinedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsFacetValidatorJoined)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsFacetValidatorJoined)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsFacetValidatorJoinedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsFacetValidatorJoinedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsFacetValidatorJoined represents a ValidatorJoined event raised by the ParticipantsFacet contract.
type ParticipantsFacetValidatorJoined struct {
	Validator common.Address
	MadID     [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorJoined is a free log retrieval operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_ParticipantsFacet *ParticipantsFacetFilterer) FilterValidatorJoined(opts *bind.FilterOpts, validator []common.Address) (*ParticipantsFacetValidatorJoinedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsFacet.contract.FilterLogs(opts, "ValidatorJoined", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ParticipantsFacetValidatorJoinedIterator{contract: _ParticipantsFacet.contract, event: "ValidatorJoined", logs: logs, sub: sub}, nil
}

// WatchValidatorJoined is a free log subscription operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_ParticipantsFacet *ParticipantsFacetFilterer) WatchValidatorJoined(opts *bind.WatchOpts, sink chan<- *ParticipantsFacetValidatorJoined, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsFacet.contract.WatchLogs(opts, "ValidatorJoined", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsFacetValidatorJoined)
				if err := _ParticipantsFacet.contract.UnpackLog(event, "ValidatorJoined", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorJoined is a log parse operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_ParticipantsFacet *ParticipantsFacetFilterer) ParseValidatorJoined(log types.Log) (*ParticipantsFacetValidatorJoined, error) {
	event := new(ParticipantsFacetValidatorJoined)
	if err := _ParticipantsFacet.contract.UnpackLog(event, "ValidatorJoined", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ParticipantsFacetValidatorLeftIterator is returned from FilterValidatorLeft and is used to iterate over the raw logs and unpacked data for ValidatorLeft events raised by the ParticipantsFacet contract.
type ParticipantsFacetValidatorLeftIterator struct {
	Event *ParticipantsFacetValidatorLeft // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsFacetValidatorLeftIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsFacetValidatorLeft)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsFacetValidatorLeft)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsFacetValidatorLeftIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsFacetValidatorLeftIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsFacetValidatorLeft represents a ValidatorLeft event raised by the ParticipantsFacet contract.
type ParticipantsFacetValidatorLeft struct {
	Validator common.Address
	PkHash    [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorLeft is a free log retrieval operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_ParticipantsFacet *ParticipantsFacetFilterer) FilterValidatorLeft(opts *bind.FilterOpts, validator []common.Address) (*ParticipantsFacetValidatorLeftIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsFacet.contract.FilterLogs(opts, "ValidatorLeft", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ParticipantsFacetValidatorLeftIterator{contract: _ParticipantsFacet.contract, event: "ValidatorLeft", logs: logs, sub: sub}, nil
}

// WatchValidatorLeft is a free log subscription operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_ParticipantsFacet *ParticipantsFacetFilterer) WatchValidatorLeft(opts *bind.WatchOpts, sink chan<- *ParticipantsFacetValidatorLeft, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsFacet.contract.WatchLogs(opts, "ValidatorLeft", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsFacetValidatorLeft)
				if err := _ParticipantsFacet.contract.UnpackLog(event, "ValidatorLeft", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorLeft is a log parse operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_ParticipantsFacet *ParticipantsFacetFilterer) ParseValidatorLeft(log types.Log) (*ParticipantsFacetValidatorLeft, error) {
	event := new(ParticipantsFacetValidatorLeft)
	if err := _ParticipantsFacet.contract.UnpackLog(event, "ValidatorLeft", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ParticipantsFacetValidatorQueuedIterator is returned from FilterValidatorQueued and is used to iterate over the raw logs and unpacked data for ValidatorQueued events raised by the ParticipantsFacet contract.
type ParticipantsFacetValidatorQueuedIterator struct {
	Event *ParticipantsFacetValidatorQueued // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsFacetValidatorQueuedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsFacetValidatorQueued)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsFacetValidatorQueued)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsFacetValidatorQueuedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsFacetValidatorQueuedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsFacetValidatorQueued represents a ValidatorQueued event raised by the ParticipantsFacet contract.
type ParticipantsFacetValidatorQueued struct {
	Validator common.Address
	PkHash    [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorQueued is a free log retrieval operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_ParticipantsFacet *ParticipantsFacetFilterer) FilterValidatorQueued(opts *bind.FilterOpts, validator []common.Address) (*ParticipantsFacetValidatorQueuedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsFacet.contract.FilterLogs(opts, "ValidatorQueued", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ParticipantsFacetValidatorQueuedIterator{contract: _ParticipantsFacet.contract, event: "ValidatorQueued", logs: logs, sub: sub}, nil
}

// WatchValidatorQueued is a free log subscription operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_ParticipantsFacet *ParticipantsFacetFilterer) WatchValidatorQueued(opts *bind.WatchOpts, sink chan<- *ParticipantsFacetValidatorQueued, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsFacet.contract.WatchLogs(opts, "ValidatorQueued", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsFacetValidatorQueued)
				if err := _ParticipantsFacet.contract.UnpackLog(event, "ValidatorQueued", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorQueued is a log parse operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_ParticipantsFacet *ParticipantsFacetFilterer) ParseValidatorQueued(log types.Log) (*ParticipantsFacetValidatorQueued, error) {
	event := new(ParticipantsFacetValidatorQueued)
	if err := _ParticipantsFacet.contract.UnpackLog(event, "ValidatorQueued", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ParticipantsLibraryMetaData contains all meta data concerning the ParticipantsLibrary contract.
var ParticipantsLibraryMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"madID\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"madID\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"pkHash\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorLeft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"pkHash\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorQueued\",\"type\":\"event\"}]",
<<<<<<< Updated upstream
	Bin: "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220132504dce6369700f2460bfee79294c4517d7e55972671cd0e5da2ece3e518fe64736f6c634300080b0033",
=======
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202159458229af62d26c0bbe2b82d2f20f933e11a64a29ed401d1e55a47db5277064736f6c634300080b0033",
>>>>>>> Stashed changes
}

// ParticipantsLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use ParticipantsLibraryMetaData.ABI instead.
var ParticipantsLibraryABI = ParticipantsLibraryMetaData.ABI

// ParticipantsLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ParticipantsLibraryMetaData.Bin instead.
var ParticipantsLibraryBin = ParticipantsLibraryMetaData.Bin

// DeployParticipantsLibrary deploys a new Ethereum contract, binding an instance of ParticipantsLibrary to it.
func DeployParticipantsLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ParticipantsLibrary, error) {
	parsed, err := ParticipantsLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ParticipantsLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ParticipantsLibrary{ParticipantsLibraryCaller: ParticipantsLibraryCaller{contract: contract}, ParticipantsLibraryTransactor: ParticipantsLibraryTransactor{contract: contract}, ParticipantsLibraryFilterer: ParticipantsLibraryFilterer{contract: contract}}, nil
}

// ParticipantsLibrary is an auto generated Go binding around an Ethereum contract.
type ParticipantsLibrary struct {
	ParticipantsLibraryCaller     // Read-only binding to the contract
	ParticipantsLibraryTransactor // Write-only binding to the contract
	ParticipantsLibraryFilterer   // Log filterer for contract events
}

// ParticipantsLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type ParticipantsLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ParticipantsLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ParticipantsLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ParticipantsLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ParticipantsLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ParticipantsLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ParticipantsLibrarySession struct {
	Contract     *ParticipantsLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// ParticipantsLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ParticipantsLibraryCallerSession struct {
	Contract *ParticipantsLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// ParticipantsLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ParticipantsLibraryTransactorSession struct {
	Contract     *ParticipantsLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// ParticipantsLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type ParticipantsLibraryRaw struct {
	Contract *ParticipantsLibrary // Generic contract binding to access the raw methods on
}

// ParticipantsLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ParticipantsLibraryCallerRaw struct {
	Contract *ParticipantsLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// ParticipantsLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ParticipantsLibraryTransactorRaw struct {
	Contract *ParticipantsLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewParticipantsLibrary creates a new instance of ParticipantsLibrary, bound to a specific deployed contract.
func NewParticipantsLibrary(address common.Address, backend bind.ContractBackend) (*ParticipantsLibrary, error) {
	contract, err := bindParticipantsLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ParticipantsLibrary{ParticipantsLibraryCaller: ParticipantsLibraryCaller{contract: contract}, ParticipantsLibraryTransactor: ParticipantsLibraryTransactor{contract: contract}, ParticipantsLibraryFilterer: ParticipantsLibraryFilterer{contract: contract}}, nil
}

// NewParticipantsLibraryCaller creates a new read-only instance of ParticipantsLibrary, bound to a specific deployed contract.
func NewParticipantsLibraryCaller(address common.Address, caller bind.ContractCaller) (*ParticipantsLibraryCaller, error) {
	contract, err := bindParticipantsLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ParticipantsLibraryCaller{contract: contract}, nil
}

// NewParticipantsLibraryTransactor creates a new write-only instance of ParticipantsLibrary, bound to a specific deployed contract.
func NewParticipantsLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*ParticipantsLibraryTransactor, error) {
	contract, err := bindParticipantsLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ParticipantsLibraryTransactor{contract: contract}, nil
}

// NewParticipantsLibraryFilterer creates a new log filterer instance of ParticipantsLibrary, bound to a specific deployed contract.
func NewParticipantsLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*ParticipantsLibraryFilterer, error) {
	contract, err := bindParticipantsLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ParticipantsLibraryFilterer{contract: contract}, nil
}

// bindParticipantsLibrary binds a generic wrapper to an already deployed contract.
func bindParticipantsLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ParticipantsLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ParticipantsLibrary *ParticipantsLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ParticipantsLibrary.Contract.ParticipantsLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ParticipantsLibrary *ParticipantsLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ParticipantsLibrary.Contract.ParticipantsLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ParticipantsLibrary *ParticipantsLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ParticipantsLibrary.Contract.ParticipantsLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ParticipantsLibrary *ParticipantsLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ParticipantsLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ParticipantsLibrary *ParticipantsLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ParticipantsLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ParticipantsLibrary *ParticipantsLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ParticipantsLibrary.Contract.contract.Transact(opts, method, params...)
}

// ParticipantsLibraryValidatorCreatedIterator is returned from FilterValidatorCreated and is used to iterate over the raw logs and unpacked data for ValidatorCreated events raised by the ParticipantsLibrary contract.
type ParticipantsLibraryValidatorCreatedIterator struct {
	Event *ParticipantsLibraryValidatorCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsLibraryValidatorCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsLibraryValidatorCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsLibraryValidatorCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsLibraryValidatorCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsLibraryValidatorCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsLibraryValidatorCreated represents a ValidatorCreated event raised by the ParticipantsLibrary contract.
type ParticipantsLibraryValidatorCreated struct {
	Validator common.Address
	Signer    common.Address
	MadID     [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorCreated is a free log retrieval operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_ParticipantsLibrary *ParticipantsLibraryFilterer) FilterValidatorCreated(opts *bind.FilterOpts, validator []common.Address, signer []common.Address) (*ParticipantsLibraryValidatorCreatedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var signerRule []interface{}
	for _, signerItem := range signer {
		signerRule = append(signerRule, signerItem)
	}

	logs, sub, err := _ParticipantsLibrary.contract.FilterLogs(opts, "ValidatorCreated", validatorRule, signerRule)
	if err != nil {
		return nil, err
	}
	return &ParticipantsLibraryValidatorCreatedIterator{contract: _ParticipantsLibrary.contract, event: "ValidatorCreated", logs: logs, sub: sub}, nil
}

// WatchValidatorCreated is a free log subscription operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_ParticipantsLibrary *ParticipantsLibraryFilterer) WatchValidatorCreated(opts *bind.WatchOpts, sink chan<- *ParticipantsLibraryValidatorCreated, validator []common.Address, signer []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var signerRule []interface{}
	for _, signerItem := range signer {
		signerRule = append(signerRule, signerItem)
	}

	logs, sub, err := _ParticipantsLibrary.contract.WatchLogs(opts, "ValidatorCreated", validatorRule, signerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsLibraryValidatorCreated)
				if err := _ParticipantsLibrary.contract.UnpackLog(event, "ValidatorCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorCreated is a log parse operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_ParticipantsLibrary *ParticipantsLibraryFilterer) ParseValidatorCreated(log types.Log) (*ParticipantsLibraryValidatorCreated, error) {
	event := new(ParticipantsLibraryValidatorCreated)
	if err := _ParticipantsLibrary.contract.UnpackLog(event, "ValidatorCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ParticipantsLibraryValidatorJoinedIterator is returned from FilterValidatorJoined and is used to iterate over the raw logs and unpacked data for ValidatorJoined events raised by the ParticipantsLibrary contract.
type ParticipantsLibraryValidatorJoinedIterator struct {
	Event *ParticipantsLibraryValidatorJoined // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsLibraryValidatorJoinedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsLibraryValidatorJoined)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsLibraryValidatorJoined)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsLibraryValidatorJoinedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsLibraryValidatorJoinedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsLibraryValidatorJoined represents a ValidatorJoined event raised by the ParticipantsLibrary contract.
type ParticipantsLibraryValidatorJoined struct {
	Validator common.Address
	MadID     [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorJoined is a free log retrieval operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_ParticipantsLibrary *ParticipantsLibraryFilterer) FilterValidatorJoined(opts *bind.FilterOpts, validator []common.Address) (*ParticipantsLibraryValidatorJoinedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsLibrary.contract.FilterLogs(opts, "ValidatorJoined", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ParticipantsLibraryValidatorJoinedIterator{contract: _ParticipantsLibrary.contract, event: "ValidatorJoined", logs: logs, sub: sub}, nil
}

// WatchValidatorJoined is a free log subscription operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_ParticipantsLibrary *ParticipantsLibraryFilterer) WatchValidatorJoined(opts *bind.WatchOpts, sink chan<- *ParticipantsLibraryValidatorJoined, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsLibrary.contract.WatchLogs(opts, "ValidatorJoined", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsLibraryValidatorJoined)
				if err := _ParticipantsLibrary.contract.UnpackLog(event, "ValidatorJoined", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorJoined is a log parse operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_ParticipantsLibrary *ParticipantsLibraryFilterer) ParseValidatorJoined(log types.Log) (*ParticipantsLibraryValidatorJoined, error) {
	event := new(ParticipantsLibraryValidatorJoined)
	if err := _ParticipantsLibrary.contract.UnpackLog(event, "ValidatorJoined", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ParticipantsLibraryValidatorLeftIterator is returned from FilterValidatorLeft and is used to iterate over the raw logs and unpacked data for ValidatorLeft events raised by the ParticipantsLibrary contract.
type ParticipantsLibraryValidatorLeftIterator struct {
	Event *ParticipantsLibraryValidatorLeft // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsLibraryValidatorLeftIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsLibraryValidatorLeft)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsLibraryValidatorLeft)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsLibraryValidatorLeftIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsLibraryValidatorLeftIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsLibraryValidatorLeft represents a ValidatorLeft event raised by the ParticipantsLibrary contract.
type ParticipantsLibraryValidatorLeft struct {
	Validator common.Address
	PkHash    [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorLeft is a free log retrieval operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_ParticipantsLibrary *ParticipantsLibraryFilterer) FilterValidatorLeft(opts *bind.FilterOpts, validator []common.Address) (*ParticipantsLibraryValidatorLeftIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsLibrary.contract.FilterLogs(opts, "ValidatorLeft", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ParticipantsLibraryValidatorLeftIterator{contract: _ParticipantsLibrary.contract, event: "ValidatorLeft", logs: logs, sub: sub}, nil
}

// WatchValidatorLeft is a free log subscription operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_ParticipantsLibrary *ParticipantsLibraryFilterer) WatchValidatorLeft(opts *bind.WatchOpts, sink chan<- *ParticipantsLibraryValidatorLeft, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsLibrary.contract.WatchLogs(opts, "ValidatorLeft", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsLibraryValidatorLeft)
				if err := _ParticipantsLibrary.contract.UnpackLog(event, "ValidatorLeft", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorLeft is a log parse operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_ParticipantsLibrary *ParticipantsLibraryFilterer) ParseValidatorLeft(log types.Log) (*ParticipantsLibraryValidatorLeft, error) {
	event := new(ParticipantsLibraryValidatorLeft)
	if err := _ParticipantsLibrary.contract.UnpackLog(event, "ValidatorLeft", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ParticipantsLibraryValidatorQueuedIterator is returned from FilterValidatorQueued and is used to iterate over the raw logs and unpacked data for ValidatorQueued events raised by the ParticipantsLibrary contract.
type ParticipantsLibraryValidatorQueuedIterator struct {
	Event *ParticipantsLibraryValidatorQueued // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsLibraryValidatorQueuedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsLibraryValidatorQueued)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsLibraryValidatorQueued)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsLibraryValidatorQueuedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsLibraryValidatorQueuedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsLibraryValidatorQueued represents a ValidatorQueued event raised by the ParticipantsLibrary contract.
type ParticipantsLibraryValidatorQueued struct {
	Validator common.Address
	PkHash    [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorQueued is a free log retrieval operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_ParticipantsLibrary *ParticipantsLibraryFilterer) FilterValidatorQueued(opts *bind.FilterOpts, validator []common.Address) (*ParticipantsLibraryValidatorQueuedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsLibrary.contract.FilterLogs(opts, "ValidatorQueued", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ParticipantsLibraryValidatorQueuedIterator{contract: _ParticipantsLibrary.contract, event: "ValidatorQueued", logs: logs, sub: sub}, nil
}

// WatchValidatorQueued is a free log subscription operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_ParticipantsLibrary *ParticipantsLibraryFilterer) WatchValidatorQueued(opts *bind.WatchOpts, sink chan<- *ParticipantsLibraryValidatorQueued, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsLibrary.contract.WatchLogs(opts, "ValidatorQueued", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsLibraryValidatorQueued)
				if err := _ParticipantsLibrary.contract.UnpackLog(event, "ValidatorQueued", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorQueued is a log parse operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_ParticipantsLibrary *ParticipantsLibraryFilterer) ParseValidatorQueued(log types.Log) (*ParticipantsLibraryValidatorQueued, error) {
	event := new(ParticipantsLibraryValidatorQueued)
	if err := _ParticipantsLibrary.contract.UnpackLog(event, "ValidatorQueued", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// QueueLibraryMetaData contains all meta data concerning the QueueLibrary contract.
var QueueLibraryMetaData = &bind.MetaData{
	ABI: "[]",
<<<<<<< Updated upstream
	Bin: "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122052f590862a006b7dd38a21f8a814f40ca6af2178c3e825027254e9fdec84db3964736f6c634300080b0033",
=======
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122005eb4abdcc1d9305c0ccdf4d086070287df3900d0b29adc2cdd39babeb7db95c64736f6c634300080b0033",
>>>>>>> Stashed changes
}

// QueueLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use QueueLibraryMetaData.ABI instead.
var QueueLibraryABI = QueueLibraryMetaData.ABI

// QueueLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use QueueLibraryMetaData.Bin instead.
var QueueLibraryBin = QueueLibraryMetaData.Bin

// DeployQueueLibrary deploys a new Ethereum contract, binding an instance of QueueLibrary to it.
func DeployQueueLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *QueueLibrary, error) {
	parsed, err := QueueLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(QueueLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &QueueLibrary{QueueLibraryCaller: QueueLibraryCaller{contract: contract}, QueueLibraryTransactor: QueueLibraryTransactor{contract: contract}, QueueLibraryFilterer: QueueLibraryFilterer{contract: contract}}, nil
}

// QueueLibrary is an auto generated Go binding around an Ethereum contract.
type QueueLibrary struct {
	QueueLibraryCaller     // Read-only binding to the contract
	QueueLibraryTransactor // Write-only binding to the contract
	QueueLibraryFilterer   // Log filterer for contract events
}

// QueueLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type QueueLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// QueueLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type QueueLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// QueueLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type QueueLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// QueueLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type QueueLibrarySession struct {
	Contract     *QueueLibrary     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// QueueLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type QueueLibraryCallerSession struct {
	Contract *QueueLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// QueueLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type QueueLibraryTransactorSession struct {
	Contract     *QueueLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// QueueLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type QueueLibraryRaw struct {
	Contract *QueueLibrary // Generic contract binding to access the raw methods on
}

// QueueLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type QueueLibraryCallerRaw struct {
	Contract *QueueLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// QueueLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type QueueLibraryTransactorRaw struct {
	Contract *QueueLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewQueueLibrary creates a new instance of QueueLibrary, bound to a specific deployed contract.
func NewQueueLibrary(address common.Address, backend bind.ContractBackend) (*QueueLibrary, error) {
	contract, err := bindQueueLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &QueueLibrary{QueueLibraryCaller: QueueLibraryCaller{contract: contract}, QueueLibraryTransactor: QueueLibraryTransactor{contract: contract}, QueueLibraryFilterer: QueueLibraryFilterer{contract: contract}}, nil
}

// NewQueueLibraryCaller creates a new read-only instance of QueueLibrary, bound to a specific deployed contract.
func NewQueueLibraryCaller(address common.Address, caller bind.ContractCaller) (*QueueLibraryCaller, error) {
	contract, err := bindQueueLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &QueueLibraryCaller{contract: contract}, nil
}

// NewQueueLibraryTransactor creates a new write-only instance of QueueLibrary, bound to a specific deployed contract.
func NewQueueLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*QueueLibraryTransactor, error) {
	contract, err := bindQueueLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &QueueLibraryTransactor{contract: contract}, nil
}

// NewQueueLibraryFilterer creates a new log filterer instance of QueueLibrary, bound to a specific deployed contract.
func NewQueueLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*QueueLibraryFilterer, error) {
	contract, err := bindQueueLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &QueueLibraryFilterer{contract: contract}, nil
}

// bindQueueLibrary binds a generic wrapper to an already deployed contract.
func bindQueueLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(QueueLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_QueueLibrary *QueueLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _QueueLibrary.Contract.QueueLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_QueueLibrary *QueueLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _QueueLibrary.Contract.QueueLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_QueueLibrary *QueueLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _QueueLibrary.Contract.QueueLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_QueueLibrary *QueueLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _QueueLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_QueueLibrary *QueueLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _QueueLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_QueueLibrary *QueueLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _QueueLibrary.Contract.contract.Transact(opts, method, params...)
}

// RCertParserLibraryMetaData contains all meta data concerning the RCertParserLibrary contract.
var RCertParserLibraryMetaData = &bind.MetaData{
	ABI: "[]",
<<<<<<< Updated upstream
	Bin: "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b465165339310b0e68dd40e7fcc5e11b01b27a7c200cb64fba4e6971c4626a0a64736f6c634300080b0033",
=======
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fba04bd95699b897e8512379d59749522c4076313569b460b9805099bf38b63164736f6c634300080b0033",
>>>>>>> Stashed changes
}

// RCertParserLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use RCertParserLibraryMetaData.ABI instead.
var RCertParserLibraryABI = RCertParserLibraryMetaData.ABI

// RCertParserLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RCertParserLibraryMetaData.Bin instead.
var RCertParserLibraryBin = RCertParserLibraryMetaData.Bin

// DeployRCertParserLibrary deploys a new Ethereum contract, binding an instance of RCertParserLibrary to it.
func DeployRCertParserLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *RCertParserLibrary, error) {
	parsed, err := RCertParserLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RCertParserLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RCertParserLibrary{RCertParserLibraryCaller: RCertParserLibraryCaller{contract: contract}, RCertParserLibraryTransactor: RCertParserLibraryTransactor{contract: contract}, RCertParserLibraryFilterer: RCertParserLibraryFilterer{contract: contract}}, nil
}

// RCertParserLibrary is an auto generated Go binding around an Ethereum contract.
type RCertParserLibrary struct {
	RCertParserLibraryCaller     // Read-only binding to the contract
	RCertParserLibraryTransactor // Write-only binding to the contract
	RCertParserLibraryFilterer   // Log filterer for contract events
}

// RCertParserLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type RCertParserLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RCertParserLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RCertParserLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RCertParserLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RCertParserLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RCertParserLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RCertParserLibrarySession struct {
	Contract     *RCertParserLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// RCertParserLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RCertParserLibraryCallerSession struct {
	Contract *RCertParserLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// RCertParserLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RCertParserLibraryTransactorSession struct {
	Contract     *RCertParserLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// RCertParserLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type RCertParserLibraryRaw struct {
	Contract *RCertParserLibrary // Generic contract binding to access the raw methods on
}

// RCertParserLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RCertParserLibraryCallerRaw struct {
	Contract *RCertParserLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// RCertParserLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RCertParserLibraryTransactorRaw struct {
	Contract *RCertParserLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRCertParserLibrary creates a new instance of RCertParserLibrary, bound to a specific deployed contract.
func NewRCertParserLibrary(address common.Address, backend bind.ContractBackend) (*RCertParserLibrary, error) {
	contract, err := bindRCertParserLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RCertParserLibrary{RCertParserLibraryCaller: RCertParserLibraryCaller{contract: contract}, RCertParserLibraryTransactor: RCertParserLibraryTransactor{contract: contract}, RCertParserLibraryFilterer: RCertParserLibraryFilterer{contract: contract}}, nil
}

// NewRCertParserLibraryCaller creates a new read-only instance of RCertParserLibrary, bound to a specific deployed contract.
func NewRCertParserLibraryCaller(address common.Address, caller bind.ContractCaller) (*RCertParserLibraryCaller, error) {
	contract, err := bindRCertParserLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RCertParserLibraryCaller{contract: contract}, nil
}

// NewRCertParserLibraryTransactor creates a new write-only instance of RCertParserLibrary, bound to a specific deployed contract.
func NewRCertParserLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*RCertParserLibraryTransactor, error) {
	contract, err := bindRCertParserLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RCertParserLibraryTransactor{contract: contract}, nil
}

// NewRCertParserLibraryFilterer creates a new log filterer instance of RCertParserLibrary, bound to a specific deployed contract.
func NewRCertParserLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*RCertParserLibraryFilterer, error) {
	contract, err := bindRCertParserLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RCertParserLibraryFilterer{contract: contract}, nil
}

// bindRCertParserLibrary binds a generic wrapper to an already deployed contract.
func bindRCertParserLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RCertParserLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RCertParserLibrary *RCertParserLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RCertParserLibrary.Contract.RCertParserLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RCertParserLibrary *RCertParserLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RCertParserLibrary.Contract.RCertParserLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RCertParserLibrary *RCertParserLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RCertParserLibrary.Contract.RCertParserLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RCertParserLibrary *RCertParserLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RCertParserLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RCertParserLibrary *RCertParserLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RCertParserLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RCertParserLibrary *RCertParserLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RCertParserLibrary.Contract.contract.Transact(opts, method, params...)
}

// RClaimsParserLibraryMetaData contains all meta data concerning the RClaimsParserLibrary contract.
var RClaimsParserLibraryMetaData = &bind.MetaData{
	ABI: "[]",
<<<<<<< Updated upstream
	Bin: "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201dfc56ca584a8493376d7be1947bfdb6d656464351b58ab9c274062913fd817564736f6c634300080b0033",
=======
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220edb7e1132c64b16a02a568aa24534435f9c4b23e423c0460a145ebdb491cb10b64736f6c634300080b0033",
>>>>>>> Stashed changes
}

// RClaimsParserLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use RClaimsParserLibraryMetaData.ABI instead.
var RClaimsParserLibraryABI = RClaimsParserLibraryMetaData.ABI

// RClaimsParserLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RClaimsParserLibraryMetaData.Bin instead.
var RClaimsParserLibraryBin = RClaimsParserLibraryMetaData.Bin

// DeployRClaimsParserLibrary deploys a new Ethereum contract, binding an instance of RClaimsParserLibrary to it.
func DeployRClaimsParserLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *RClaimsParserLibrary, error) {
	parsed, err := RClaimsParserLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RClaimsParserLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RClaimsParserLibrary{RClaimsParserLibraryCaller: RClaimsParserLibraryCaller{contract: contract}, RClaimsParserLibraryTransactor: RClaimsParserLibraryTransactor{contract: contract}, RClaimsParserLibraryFilterer: RClaimsParserLibraryFilterer{contract: contract}}, nil
}

// RClaimsParserLibrary is an auto generated Go binding around an Ethereum contract.
type RClaimsParserLibrary struct {
	RClaimsParserLibraryCaller     // Read-only binding to the contract
	RClaimsParserLibraryTransactor // Write-only binding to the contract
	RClaimsParserLibraryFilterer   // Log filterer for contract events
}

// RClaimsParserLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type RClaimsParserLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RClaimsParserLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RClaimsParserLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RClaimsParserLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RClaimsParserLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RClaimsParserLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RClaimsParserLibrarySession struct {
	Contract     *RClaimsParserLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// RClaimsParserLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RClaimsParserLibraryCallerSession struct {
	Contract *RClaimsParserLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// RClaimsParserLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RClaimsParserLibraryTransactorSession struct {
	Contract     *RClaimsParserLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// RClaimsParserLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type RClaimsParserLibraryRaw struct {
	Contract *RClaimsParserLibrary // Generic contract binding to access the raw methods on
}

// RClaimsParserLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RClaimsParserLibraryCallerRaw struct {
	Contract *RClaimsParserLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// RClaimsParserLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RClaimsParserLibraryTransactorRaw struct {
	Contract *RClaimsParserLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRClaimsParserLibrary creates a new instance of RClaimsParserLibrary, bound to a specific deployed contract.
func NewRClaimsParserLibrary(address common.Address, backend bind.ContractBackend) (*RClaimsParserLibrary, error) {
	contract, err := bindRClaimsParserLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RClaimsParserLibrary{RClaimsParserLibraryCaller: RClaimsParserLibraryCaller{contract: contract}, RClaimsParserLibraryTransactor: RClaimsParserLibraryTransactor{contract: contract}, RClaimsParserLibraryFilterer: RClaimsParserLibraryFilterer{contract: contract}}, nil
}

// NewRClaimsParserLibraryCaller creates a new read-only instance of RClaimsParserLibrary, bound to a specific deployed contract.
func NewRClaimsParserLibraryCaller(address common.Address, caller bind.ContractCaller) (*RClaimsParserLibraryCaller, error) {
	contract, err := bindRClaimsParserLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RClaimsParserLibraryCaller{contract: contract}, nil
}

// NewRClaimsParserLibraryTransactor creates a new write-only instance of RClaimsParserLibrary, bound to a specific deployed contract.
func NewRClaimsParserLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*RClaimsParserLibraryTransactor, error) {
	contract, err := bindRClaimsParserLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RClaimsParserLibraryTransactor{contract: contract}, nil
}

// NewRClaimsParserLibraryFilterer creates a new log filterer instance of RClaimsParserLibrary, bound to a specific deployed contract.
func NewRClaimsParserLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*RClaimsParserLibraryFilterer, error) {
	contract, err := bindRClaimsParserLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RClaimsParserLibraryFilterer{contract: contract}, nil
}

// bindRClaimsParserLibrary binds a generic wrapper to an already deployed contract.
func bindRClaimsParserLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RClaimsParserLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RClaimsParserLibrary *RClaimsParserLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RClaimsParserLibrary.Contract.RClaimsParserLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RClaimsParserLibrary *RClaimsParserLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RClaimsParserLibrary.Contract.RClaimsParserLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RClaimsParserLibrary *RClaimsParserLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RClaimsParserLibrary.Contract.RClaimsParserLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RClaimsParserLibrary *RClaimsParserLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RClaimsParserLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RClaimsParserLibrary *RClaimsParserLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RClaimsParserLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RClaimsParserLibrary *RClaimsParserLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RClaimsParserLibrary.Contract.contract.Transact(opts, method, params...)
}

// RegistryMetaData contains all meta data concerning the Registry contract.
var RegistryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"lookup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
<<<<<<< Updated upstream
	Bin: "0x60806040523480156200001157600080fd5b5033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000086600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166200008c60201b60201c565b62000317565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806200013157506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b62000173576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200016a906200026e565b60405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060016000815480929190620001df90620002c9565b919050555050565b600082825260208201905092915050565b7f46756e6374696f6e616c697479207265737472696374656420746f206175746860008201527f6f72697a6564206f70657261746f72732e000000000000000000000000000000602082015250565b600062000256603183620001e7565b91506200026382620001f8565b604082019050919050565b60006020820190508181036000830152620002898162000247565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b6000620002d682620002bf565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156200030c576200030b62000290565b5b600182019050919050565b610bda80620003276000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063e348da1311610050578063e348da13146100a4578063f67187ac146100c0578063fad8b32a146100f057610067565b80631e59c5291461006c57806380599e4b14610088575b600080fd5b6100866004803603810190610081919061085c565b61010c565b005b6100a2600480360381019061009d91906108b8565b610250565b005b6100be60048036038101906100b99190610901565b610377565b005b6100da60048036038101906100d591906108b8565b6104cc565b6040516100e7919061093d565b60405180910390f35b61010a60048036038101906101059190610901565b610514565b005b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806101b057506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6101ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101e6906109db565b60405180910390fd5b806003836040516102009190610a75565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806102f457506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610333576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032a906109db565b60405180910390fd5b6003816040516103439190610a75565b908152602001604051809103902060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061041b57506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b61045a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610451906109db565b60405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600160008154809291906104c490610ac5565b919050555050565b60006003826040516104de9190610a75565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806105b857506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6105f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ee906109db565b60405180910390fd5b600180541161063b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063290610b5a565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff02191690556001600081548092919061069c90610b7a565b919050555050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61070b826106c2565b810181811067ffffffffffffffff8211171561072a576107296106d3565b5b80604052505050565b600061073d6106a4565b90506107498282610702565b919050565b600067ffffffffffffffff821115610769576107686106d3565b5b610772826106c2565b9050602081019050919050565b82818337600083830152505050565b60006107a161079c8461074e565b610733565b9050828152602081018484840111156107bd576107bc6106bd565b5b6107c884828561077f565b509392505050565b600082601f8301126107e5576107e46106b8565b5b81356107f584826020860161078e565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610829826107fe565b9050919050565b6108398161081e565b811461084457600080fd5b50565b60008135905061085681610830565b92915050565b60008060408385031215610873576108726106ae565b5b600083013567ffffffffffffffff811115610891576108906106b3565b5b61089d858286016107d0565b92505060206108ae85828601610847565b9150509250929050565b6000602082840312156108ce576108cd6106ae565b5b600082013567ffffffffffffffff8111156108ec576108eb6106b3565b5b6108f8848285016107d0565b91505092915050565b600060208284031215610917576109166106ae565b5b600061092584828501610847565b91505092915050565b6109378161081e565b82525050565b6000602082019050610952600083018461092e565b92915050565b600082825260208201905092915050565b7f46756e6374696f6e616c697479207265737472696374656420746f206175746860008201527f6f72697a6564206f70657261746f72732e000000000000000000000000000000602082015250565b60006109c5603183610958565b91506109d082610969565b604082019050919050565b600060208201905081810360008301526109f4816109b8565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015610a2f578082015181840152602081019050610a14565b83811115610a3e576000848401525b50505050565b6000610a4f826109fb565b610a598185610a06565b9350610a69818560208601610a11565b80840191505092915050565b6000610a818284610a44565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b6000610ad082610abb565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610b0357610b02610a8c565b5b600182019050919050565b7f43616e27742072656d6f766520616c6c206f70657261746f7273000000000000600082015250565b6000610b44601a83610958565b9150610b4f82610b0e565b602082019050919050565b60006020820190508181036000830152610b7381610b37565b9050919050565b6000610b8582610abb565b91506000821415610b9957610b98610a8c565b5b60018203905091905056fea26469706673582212202ddf48a48e2afbffbe990a4af9f8f45cee000baedaf4576bdab0fdd69f8983b464736f6c634300080b0033",
=======
	Bin: "0x608060405234801561001057600080fd5b50600280546001600160a01b0319163390811790915561002f90610034565b610129565b6002546001600160a01b031633148061005c57503360009081526020819052604090205460ff165b6100c65760405162461bcd60e51b815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527037b934bd32b21037b832b930ba37b9399760791b606482015260840160405180910390fd5b6001600160a01b0381166000908152602081905260408120805460ff191660019081179091558054916100f883610100565b919050555050565b600060001982141561012257634e487b7160e01b600052601160045260246000fd5b5060010190565b6108d5806101386000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063e348da1311610050578063e348da1314610094578063f67187ac146100a7578063fad8b32a146100e357600080fd5b80631e59c5291461006c57806380599e4b14610081575b600080fd5b61007f61007a36600461071a565b6100f6565b005b61007f61008f366004610768565b610225565b61007f6100a23660046107a5565b61032e565b6100ba6100b5366004610768565b610454565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b61007f6100f13660046107a5565b610492565b60025473ffffffffffffffffffffffffffffffffffffffff1633148061012b57503360009081526020819052604090205460ff165b6101bc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e00000000000000000000000000000060648201526084015b60405180910390fd5b806003836040516101cd91906107c7565b908152604051908190036020019020805473ffffffffffffffffffffffffffffffffffffffff929092167fffffffffffffffffffffffff00000000000000000000000000000000000000009092169190911790555050565b60025473ffffffffffffffffffffffffffffffffffffffff1633148061025a57503360009081526020819052604090205460ff165b6102e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e00000000000000000000000000000060648201526084016101b3565b6003816040516102f691906107c7565b90815260405190819003602001902080547fffffffffffffffffffffffff000000000000000000000000000000000000000016905550565b60025473ffffffffffffffffffffffffffffffffffffffff1633148061036357503360009081526020819052604090205460ff165b6103ef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e00000000000000000000000000000060648201526084016101b3565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260208190526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600190811790915580549161044c83610831565b919050555050565b600060038260405161046691906107c7565b9081526040519081900360200190205473ffffffffffffffffffffffffffffffffffffffff1692915050565b60025473ffffffffffffffffffffffffffffffffffffffff163314806104c757503360009081526020819052604090205460ff165b610553576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e00000000000000000000000000000060648201526084016101b3565b60018054116105be576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f43616e27742072656d6f766520616c6c206f70657261746f727300000000000060448201526064016101b3565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260208190526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055600180549161044c8361086a565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f83011261065757600080fd5b813567ffffffffffffffff8082111561067257610672610617565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019082821181831017156106b8576106b8610617565b816040528381528660208588010111156106d157600080fd5b836020870160208301376000602085830101528094505050505092915050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461071557600080fd5b919050565b6000806040838503121561072d57600080fd5b823567ffffffffffffffff81111561074457600080fd5b61075085828601610646565b92505061075f602084016106f1565b90509250929050565b60006020828403121561077a57600080fd5b813567ffffffffffffffff81111561079157600080fd5b61079d84828501610646565b949350505050565b6000602082840312156107b757600080fd5b6107c0826106f1565b9392505050565b6000825160005b818110156107e857602081860181015185830152016107ce565b818111156107f7576000828501525b509190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561086357610863610802565b5060010190565b60008161087957610879610802565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fea26469706673582212204993219e4d768c69803a8bae97b098fe3ed58f2533e269fea846e16e8d18e3d064736f6c634300080b0033",
>>>>>>> Stashed changes
}

// RegistryABI is the input ABI used to generate the binding from.
// Deprecated: Use RegistryMetaData.ABI instead.
var RegistryABI = RegistryMetaData.ABI

// RegistryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RegistryMetaData.Bin instead.
var RegistryBin = RegistryMetaData.Bin

// DeployRegistry deploys a new Ethereum contract, binding an instance of Registry to it.
func DeployRegistry(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Registry, error) {
	parsed, err := RegistryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RegistryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Registry{RegistryCaller: RegistryCaller{contract: contract}, RegistryTransactor: RegistryTransactor{contract: contract}, RegistryFilterer: RegistryFilterer{contract: contract}}, nil
}

// Registry is an auto generated Go binding around an Ethereum contract.
type Registry struct {
	RegistryCaller     // Read-only binding to the contract
	RegistryTransactor // Write-only binding to the contract
	RegistryFilterer   // Log filterer for contract events
}

// RegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type RegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RegistrySession struct {
	Contract     *Registry         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RegistryCallerSession struct {
	Contract *RegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// RegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RegistryTransactorSession struct {
	Contract     *RegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// RegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type RegistryRaw struct {
	Contract *Registry // Generic contract binding to access the raw methods on
}

// RegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RegistryCallerRaw struct {
	Contract *RegistryCaller // Generic read-only contract binding to access the raw methods on
}

// RegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RegistryTransactorRaw struct {
	Contract *RegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRegistry creates a new instance of Registry, bound to a specific deployed contract.
func NewRegistry(address common.Address, backend bind.ContractBackend) (*Registry, error) {
	contract, err := bindRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Registry{RegistryCaller: RegistryCaller{contract: contract}, RegistryTransactor: RegistryTransactor{contract: contract}, RegistryFilterer: RegistryFilterer{contract: contract}}, nil
}

// NewRegistryCaller creates a new read-only instance of Registry, bound to a specific deployed contract.
func NewRegistryCaller(address common.Address, caller bind.ContractCaller) (*RegistryCaller, error) {
	contract, err := bindRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryCaller{contract: contract}, nil
}

// NewRegistryTransactor creates a new write-only instance of Registry, bound to a specific deployed contract.
func NewRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*RegistryTransactor, error) {
	contract, err := bindRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryTransactor{contract: contract}, nil
}

// NewRegistryFilterer creates a new log filterer instance of Registry, bound to a specific deployed contract.
func NewRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*RegistryFilterer, error) {
	contract, err := bindRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RegistryFilterer{contract: contract}, nil
}

// bindRegistry binds a generic wrapper to an already deployed contract.
func bindRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RegistryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Registry *RegistryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Registry.Contract.RegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Registry *RegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.Contract.RegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Registry *RegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Registry.Contract.RegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Registry *RegistryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Registry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Registry *RegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Registry *RegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Registry.Contract.contract.Transact(opts, method, params...)
}

// Lookup is a free data retrieval call binding the contract method 0xf67187ac.
//
// Solidity: function lookup(string name) view returns(address)
func (_Registry *RegistryCaller) Lookup(opts *bind.CallOpts, name string) (common.Address, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "lookup", name)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Lookup is a free data retrieval call binding the contract method 0xf67187ac.
//
// Solidity: function lookup(string name) view returns(address)
func (_Registry *RegistrySession) Lookup(name string) (common.Address, error) {
	return _Registry.Contract.Lookup(&_Registry.CallOpts, name)
}

// Lookup is a free data retrieval call binding the contract method 0xf67187ac.
//
// Solidity: function lookup(string name) view returns(address)
func (_Registry *RegistryCallerSession) Lookup(name string) (common.Address, error) {
	return _Registry.Contract.Lookup(&_Registry.CallOpts, name)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_Registry *RegistryTransactor) GrantOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "grantOperator", _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_Registry *RegistrySession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _Registry.Contract.GrantOperator(&_Registry.TransactOpts, _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_Registry *RegistryTransactorSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _Registry.Contract.GrantOperator(&_Registry.TransactOpts, _operator)
}

// Register is a paid mutator transaction binding the contract method 0x1e59c529.
//
// Solidity: function register(string name, address dst) returns()
func (_Registry *RegistryTransactor) Register(opts *bind.TransactOpts, name string, dst common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "register", name, dst)
}

// Register is a paid mutator transaction binding the contract method 0x1e59c529.
//
// Solidity: function register(string name, address dst) returns()
func (_Registry *RegistrySession) Register(name string, dst common.Address) (*types.Transaction, error) {
	return _Registry.Contract.Register(&_Registry.TransactOpts, name, dst)
}

// Register is a paid mutator transaction binding the contract method 0x1e59c529.
//
// Solidity: function register(string name, address dst) returns()
func (_Registry *RegistryTransactorSession) Register(name string, dst common.Address) (*types.Transaction, error) {
	return _Registry.Contract.Register(&_Registry.TransactOpts, name, dst)
}

// Remove is a paid mutator transaction binding the contract method 0x80599e4b.
//
// Solidity: function remove(string name) returns()
func (_Registry *RegistryTransactor) Remove(opts *bind.TransactOpts, name string) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "remove", name)
}

// Remove is a paid mutator transaction binding the contract method 0x80599e4b.
//
// Solidity: function remove(string name) returns()
func (_Registry *RegistrySession) Remove(name string) (*types.Transaction, error) {
	return _Registry.Contract.Remove(&_Registry.TransactOpts, name)
}

// Remove is a paid mutator transaction binding the contract method 0x80599e4b.
//
// Solidity: function remove(string name) returns()
func (_Registry *RegistryTransactorSession) Remove(name string) (*types.Transaction, error) {
	return _Registry.Contract.Remove(&_Registry.TransactOpts, name)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_Registry *RegistryTransactor) RevokeOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "revokeOperator", _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_Registry *RegistrySession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _Registry.Contract.RevokeOperator(&_Registry.TransactOpts, _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_Registry *RegistryTransactorSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _Registry.Contract.RevokeOperator(&_Registry.TransactOpts, _operator)
}

// RegistryClientMetaData contains all meta data concerning the RegistryClient contract.
var RegistryClientMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"reloadRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// RegistryClientABI is the input ABI used to generate the binding from.
// Deprecated: Use RegistryClientMetaData.ABI instead.
var RegistryClientABI = RegistryClientMetaData.ABI

// RegistryClient is an auto generated Go binding around an Ethereum contract.
type RegistryClient struct {
	RegistryClientCaller     // Read-only binding to the contract
	RegistryClientTransactor // Write-only binding to the contract
	RegistryClientFilterer   // Log filterer for contract events
}

// RegistryClientCaller is an auto generated read-only Go binding around an Ethereum contract.
type RegistryClientCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryClientTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RegistryClientTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryClientFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RegistryClientFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryClientSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RegistryClientSession struct {
	Contract     *RegistryClient   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RegistryClientCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RegistryClientCallerSession struct {
	Contract *RegistryClientCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// RegistryClientTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RegistryClientTransactorSession struct {
	Contract     *RegistryClientTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// RegistryClientRaw is an auto generated low-level Go binding around an Ethereum contract.
type RegistryClientRaw struct {
	Contract *RegistryClient // Generic contract binding to access the raw methods on
}

// RegistryClientCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RegistryClientCallerRaw struct {
	Contract *RegistryClientCaller // Generic read-only contract binding to access the raw methods on
}

// RegistryClientTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RegistryClientTransactorRaw struct {
	Contract *RegistryClientTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRegistryClient creates a new instance of RegistryClient, bound to a specific deployed contract.
func NewRegistryClient(address common.Address, backend bind.ContractBackend) (*RegistryClient, error) {
	contract, err := bindRegistryClient(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RegistryClient{RegistryClientCaller: RegistryClientCaller{contract: contract}, RegistryClientTransactor: RegistryClientTransactor{contract: contract}, RegistryClientFilterer: RegistryClientFilterer{contract: contract}}, nil
}

// NewRegistryClientCaller creates a new read-only instance of RegistryClient, bound to a specific deployed contract.
func NewRegistryClientCaller(address common.Address, caller bind.ContractCaller) (*RegistryClientCaller, error) {
	contract, err := bindRegistryClient(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryClientCaller{contract: contract}, nil
}

// NewRegistryClientTransactor creates a new write-only instance of RegistryClient, bound to a specific deployed contract.
func NewRegistryClientTransactor(address common.Address, transactor bind.ContractTransactor) (*RegistryClientTransactor, error) {
	contract, err := bindRegistryClient(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryClientTransactor{contract: contract}, nil
}

// NewRegistryClientFilterer creates a new log filterer instance of RegistryClient, bound to a specific deployed contract.
func NewRegistryClientFilterer(address common.Address, filterer bind.ContractFilterer) (*RegistryClientFilterer, error) {
	contract, err := bindRegistryClient(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RegistryClientFilterer{contract: contract}, nil
}

// bindRegistryClient binds a generic wrapper to an already deployed contract.
func bindRegistryClient(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RegistryClientABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RegistryClient *RegistryClientRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RegistryClient.Contract.RegistryClientCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RegistryClient *RegistryClientRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryClient.Contract.RegistryClientTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RegistryClient *RegistryClientRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RegistryClient.Contract.RegistryClientTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RegistryClient *RegistryClientCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RegistryClient.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RegistryClient *RegistryClientTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryClient.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RegistryClient *RegistryClientTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RegistryClient.Contract.contract.Transact(opts, method, params...)
}

// ReloadRegistry is a paid mutator transaction binding the contract method 0x1476601d.
//
// Solidity: function reloadRegistry() returns()
func (_RegistryClient *RegistryClientTransactor) ReloadRegistry(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryClient.contract.Transact(opts, "reloadRegistry")
}

// ReloadRegistry is a paid mutator transaction binding the contract method 0x1476601d.
//
// Solidity: function reloadRegistry() returns()
func (_RegistryClient *RegistryClientSession) ReloadRegistry() (*types.Transaction, error) {
	return _RegistryClient.Contract.ReloadRegistry(&_RegistryClient.TransactOpts)
}

// ReloadRegistry is a paid mutator transaction binding the contract method 0x1476601d.
//
// Solidity: function reloadRegistry() returns()
func (_RegistryClient *RegistryClientTransactorSession) ReloadRegistry() (*types.Transaction, error) {
	return _RegistryClient.Contract.ReloadRegistry(&_RegistryClient.TransactOpts)
}

// SafeMathMetaData contains all meta data concerning the SafeMath contract.
var SafeMathMetaData = &bind.MetaData{
	ABI: "[]",
<<<<<<< Updated upstream
	Bin: "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207a4224a0234809b511519ce1a411fbd104fdb7aa392b551e1dfd2a82486114c164736f6c634300080b0033",
=======
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c58820dfd8f5a0f977f93484dfb140dca77e4743595028c67d898e8ce2c5925364736f6c634300080b0033",
>>>>>>> Stashed changes
}

// SafeMathABI is the input ABI used to generate the binding from.
// Deprecated: Use SafeMathMetaData.ABI instead.
var SafeMathABI = SafeMathMetaData.ABI

// SafeMathBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SafeMathMetaData.Bin instead.
var SafeMathBin = SafeMathMetaData.Bin

// DeploySafeMath deploys a new Ethereum contract, binding an instance of SafeMath to it.
func DeploySafeMath(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SafeMath, error) {
	parsed, err := SafeMathMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SafeMathBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SafeMath{SafeMathCaller: SafeMathCaller{contract: contract}, SafeMathTransactor: SafeMathTransactor{contract: contract}, SafeMathFilterer: SafeMathFilterer{contract: contract}}, nil
}

// SafeMath is an auto generated Go binding around an Ethereum contract.
type SafeMath struct {
	SafeMathCaller     // Read-only binding to the contract
	SafeMathTransactor // Write-only binding to the contract
	SafeMathFilterer   // Log filterer for contract events
}

// SafeMathCaller is an auto generated read-only Go binding around an Ethereum contract.
type SafeMathCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeMathTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SafeMathTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeMathFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SafeMathFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeMathSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SafeMathSession struct {
	Contract     *SafeMath         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SafeMathCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SafeMathCallerSession struct {
	Contract *SafeMathCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// SafeMathTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SafeMathTransactorSession struct {
	Contract     *SafeMathTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// SafeMathRaw is an auto generated low-level Go binding around an Ethereum contract.
type SafeMathRaw struct {
	Contract *SafeMath // Generic contract binding to access the raw methods on
}

// SafeMathCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SafeMathCallerRaw struct {
	Contract *SafeMathCaller // Generic read-only contract binding to access the raw methods on
}

// SafeMathTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SafeMathTransactorRaw struct {
	Contract *SafeMathTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSafeMath creates a new instance of SafeMath, bound to a specific deployed contract.
func NewSafeMath(address common.Address, backend bind.ContractBackend) (*SafeMath, error) {
	contract, err := bindSafeMath(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SafeMath{SafeMathCaller: SafeMathCaller{contract: contract}, SafeMathTransactor: SafeMathTransactor{contract: contract}, SafeMathFilterer: SafeMathFilterer{contract: contract}}, nil
}

// NewSafeMathCaller creates a new read-only instance of SafeMath, bound to a specific deployed contract.
func NewSafeMathCaller(address common.Address, caller bind.ContractCaller) (*SafeMathCaller, error) {
	contract, err := bindSafeMath(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SafeMathCaller{contract: contract}, nil
}

// NewSafeMathTransactor creates a new write-only instance of SafeMath, bound to a specific deployed contract.
func NewSafeMathTransactor(address common.Address, transactor bind.ContractTransactor) (*SafeMathTransactor, error) {
	contract, err := bindSafeMath(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SafeMathTransactor{contract: contract}, nil
}

// NewSafeMathFilterer creates a new log filterer instance of SafeMath, bound to a specific deployed contract.
func NewSafeMathFilterer(address common.Address, filterer bind.ContractFilterer) (*SafeMathFilterer, error) {
	contract, err := bindSafeMath(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SafeMathFilterer{contract: contract}, nil
}

// bindSafeMath binds a generic wrapper to an already deployed contract.
func bindSafeMath(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SafeMathABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SafeMath *SafeMathRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SafeMath.Contract.SafeMathCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SafeMath *SafeMathRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SafeMath.Contract.SafeMathTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SafeMath *SafeMathRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SafeMath.Contract.SafeMathTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SafeMath *SafeMathCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SafeMath.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SafeMath *SafeMathTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SafeMath.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SafeMath *SafeMathTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SafeMath.Contract.contract.Transact(opts, method, params...)
}

// SimpleAuthMetaData contains all meta data concerning the SimpleAuth contract.
var SimpleAuthMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
<<<<<<< Updated upstream
	Bin: "0x608060405234801561001057600080fd5b5033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610083600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661008860201b60201c565b610302565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061012c57506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b61016b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161016290610260565b60405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600160008154809291906101d5906102b9565b919050555050565b600082825260208201905092915050565b7f46756e6374696f6e616c697479207265737472696374656420746f206175746860008201527f6f72697a6564206f70657261746f72732e000000000000000000000000000000602082015250565b600061024a6031836101dd565b9150610255826101ee565b604082019050919050565b600060208201905081810360008301526102798161023d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b60006102c4826102af565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156102f7576102f6610280565b5b600182019050919050565b6105d9806103116000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063e348da131461003b578063fad8b32a14610057575b600080fd5b610055600480360381019061005091906103bb565b610073565b005b610071600480360381019061006c91906103bb565b6101c8565b005b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061011757506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610156576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161014d9061046b565b60405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600160008154809291906101c0906104c4565b919050555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061026c57506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6102ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a29061046b565b60405180910390fd5b60018054116102ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e690610559565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff02191690556001600081548092919061035090610579565b919050555050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103888261035d565b9050919050565b6103988161037d565b81146103a357600080fd5b50565b6000813590506103b58161038f565b92915050565b6000602082840312156103d1576103d0610358565b5b60006103df848285016103a6565b91505092915050565b600082825260208201905092915050565b7f46756e6374696f6e616c697479207265737472696374656420746f206175746860008201527f6f72697a6564206f70657261746f72732e000000000000000000000000000000602082015250565b60006104556031836103e8565b9150610460826103f9565b604082019050919050565b6000602082019050818103600083015261048481610448565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b60006104cf826104ba565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156105025761050161048b565b5b600182019050919050565b7f43616e27742072656d6f766520616c6c206f70657261746f7273000000000000600082015250565b6000610543601a836103e8565b915061054e8261050d565b602082019050919050565b6000602082019050818103600083015261057281610536565b9050919050565b6000610584826104ba565b915060008214156105985761059761048b565b5b60018203905091905056fea26469706673582212200d4633befbb83f04d62c1e6c3e0146281e2df49c9d10bd99f72b0977275dd4dc64736f6c634300080b0033",
=======
	Bin: "0x608060405234801561001057600080fd5b50600280546001600160a01b0319163390811790915561002f90610034565b610129565b6002546001600160a01b031633148061005c57503360009081526020819052604090205460ff165b6100c65760405162461bcd60e51b815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527037b934bd32b21037b832b930ba37b9399760791b606482015260840160405180910390fd5b6001600160a01b0381166000908152602081905260408120805460ff191660019081179091558054916100f883610100565b919050555050565b600060001982141561012257634e487b7160e01b600052601160045260246000fd5b5060010190565b610423806101386000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063e348da131461003b578063fad8b32a14610050575b600080fd5b61004e610049366004610313565b610063565b005b61004e61005e366004610313565b61018e565b60025473ffffffffffffffffffffffffffffffffffffffff1633148061009857503360009081526020819052604090205460ff165b610129576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e00000000000000000000000000000060648201526084015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8116600090815260208190526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091558054916101868361037f565b919050555050565b60025473ffffffffffffffffffffffffffffffffffffffff163314806101c357503360009081526020819052604090205460ff165b61024f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e0000000000000000000000000000006064820152608401610120565b60018054116102ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f43616e27742072656d6f766520616c6c206f70657261746f72730000000000006044820152606401610120565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260208190526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690556001805491610186836103b8565b60006020828403121561032557600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461034957600080fd5b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156103b1576103b1610350565b5060010190565b6000816103c7576103c7610350565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fea2646970667358221220b9dbfeb347071d25bda37b58bbf2f037636b8ee53a2236caeeda21051d2cae8664736f6c634300080b0033",
>>>>>>> Stashed changes
}

// SimpleAuthABI is the input ABI used to generate the binding from.
// Deprecated: Use SimpleAuthMetaData.ABI instead.
var SimpleAuthABI = SimpleAuthMetaData.ABI

// SimpleAuthBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SimpleAuthMetaData.Bin instead.
var SimpleAuthBin = SimpleAuthMetaData.Bin

// DeploySimpleAuth deploys a new Ethereum contract, binding an instance of SimpleAuth to it.
func DeploySimpleAuth(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SimpleAuth, error) {
	parsed, err := SimpleAuthMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SimpleAuthBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SimpleAuth{SimpleAuthCaller: SimpleAuthCaller{contract: contract}, SimpleAuthTransactor: SimpleAuthTransactor{contract: contract}, SimpleAuthFilterer: SimpleAuthFilterer{contract: contract}}, nil
}

// SimpleAuth is an auto generated Go binding around an Ethereum contract.
type SimpleAuth struct {
	SimpleAuthCaller     // Read-only binding to the contract
	SimpleAuthTransactor // Write-only binding to the contract
	SimpleAuthFilterer   // Log filterer for contract events
}

// SimpleAuthCaller is an auto generated read-only Go binding around an Ethereum contract.
type SimpleAuthCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleAuthTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SimpleAuthTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleAuthFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SimpleAuthFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleAuthSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SimpleAuthSession struct {
	Contract     *SimpleAuth       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SimpleAuthCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SimpleAuthCallerSession struct {
	Contract *SimpleAuthCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// SimpleAuthTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SimpleAuthTransactorSession struct {
	Contract     *SimpleAuthTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// SimpleAuthRaw is an auto generated low-level Go binding around an Ethereum contract.
type SimpleAuthRaw struct {
	Contract *SimpleAuth // Generic contract binding to access the raw methods on
}

// SimpleAuthCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SimpleAuthCallerRaw struct {
	Contract *SimpleAuthCaller // Generic read-only contract binding to access the raw methods on
}

// SimpleAuthTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SimpleAuthTransactorRaw struct {
	Contract *SimpleAuthTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSimpleAuth creates a new instance of SimpleAuth, bound to a specific deployed contract.
func NewSimpleAuth(address common.Address, backend bind.ContractBackend) (*SimpleAuth, error) {
	contract, err := bindSimpleAuth(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SimpleAuth{SimpleAuthCaller: SimpleAuthCaller{contract: contract}, SimpleAuthTransactor: SimpleAuthTransactor{contract: contract}, SimpleAuthFilterer: SimpleAuthFilterer{contract: contract}}, nil
}

// NewSimpleAuthCaller creates a new read-only instance of SimpleAuth, bound to a specific deployed contract.
func NewSimpleAuthCaller(address common.Address, caller bind.ContractCaller) (*SimpleAuthCaller, error) {
	contract, err := bindSimpleAuth(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SimpleAuthCaller{contract: contract}, nil
}

// NewSimpleAuthTransactor creates a new write-only instance of SimpleAuth, bound to a specific deployed contract.
func NewSimpleAuthTransactor(address common.Address, transactor bind.ContractTransactor) (*SimpleAuthTransactor, error) {
	contract, err := bindSimpleAuth(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SimpleAuthTransactor{contract: contract}, nil
}

// NewSimpleAuthFilterer creates a new log filterer instance of SimpleAuth, bound to a specific deployed contract.
func NewSimpleAuthFilterer(address common.Address, filterer bind.ContractFilterer) (*SimpleAuthFilterer, error) {
	contract, err := bindSimpleAuth(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SimpleAuthFilterer{contract: contract}, nil
}

// bindSimpleAuth binds a generic wrapper to an already deployed contract.
func bindSimpleAuth(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SimpleAuthABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SimpleAuth *SimpleAuthRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SimpleAuth.Contract.SimpleAuthCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SimpleAuth *SimpleAuthRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SimpleAuth.Contract.SimpleAuthTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SimpleAuth *SimpleAuthRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SimpleAuth.Contract.SimpleAuthTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SimpleAuth *SimpleAuthCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SimpleAuth.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SimpleAuth *SimpleAuthTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SimpleAuth.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SimpleAuth *SimpleAuthTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SimpleAuth.Contract.contract.Transact(opts, method, params...)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_SimpleAuth *SimpleAuthTransactor) GrantOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _SimpleAuth.contract.Transact(opts, "grantOperator", _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_SimpleAuth *SimpleAuthSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _SimpleAuth.Contract.GrantOperator(&_SimpleAuth.TransactOpts, _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_SimpleAuth *SimpleAuthTransactorSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _SimpleAuth.Contract.GrantOperator(&_SimpleAuth.TransactOpts, _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_SimpleAuth *SimpleAuthTransactor) RevokeOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _SimpleAuth.contract.Transact(opts, "revokeOperator", _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_SimpleAuth *SimpleAuthSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _SimpleAuth.Contract.RevokeOperator(&_SimpleAuth.TransactOpts, _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_SimpleAuth *SimpleAuthTransactorSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _SimpleAuth.Contract.RevokeOperator(&_SimpleAuth.TransactOpts, _operator)
}

// SnapshotsMetaData contains all meta data concerning the Snapshots contract.
var SnapshotsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"startingETHDKG\",\"type\":\"bool\"}],\"name\":\"SnapshotTaken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"src\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"extractUint256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"src\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"extractUint32\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"val\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getChainIdFromSnapshot\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getHeightFromSnapshot\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getMadHeightFromSnapshot\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getRawBlockClaimsSnapshot\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getRawSignatureSnapshot\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractRegistry\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"initializeSnapshots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minEthSnapshotSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minMadSnapshotSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_signatureGroup\",\"type\":\"bytes\"}],\"name\":\"parseSignatureGroup\",\"outputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"publicKey\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[2]\",\"name\":\"signature\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"orig\",\"type\":\"bytes\"}],\"name\":\"reverse\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"reversed\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ns\",\"type\":\"uint256\"}],\"name\":\"setEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minSize\",\"type\":\"uint256\"}],\"name\":\"setMinEthSnapshotSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minSize\",\"type\":\"uint256\"}],\"name\":\"setMinMadSnapshotSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_signatureGroup\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_bclaims\",\"type\":\"bytes\"}],\"name\":\"snapshot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// SnapshotsABI is the input ABI used to generate the binding from.
// Deprecated: Use SnapshotsMetaData.ABI instead.
var SnapshotsABI = SnapshotsMetaData.ABI

// Snapshots is an auto generated Go binding around an Ethereum contract.
type Snapshots struct {
	SnapshotsCaller     // Read-only binding to the contract
	SnapshotsTransactor // Write-only binding to the contract
	SnapshotsFilterer   // Log filterer for contract events
}

// SnapshotsCaller is an auto generated read-only Go binding around an Ethereum contract.
type SnapshotsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SnapshotsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SnapshotsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SnapshotsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SnapshotsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SnapshotsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SnapshotsSession struct {
	Contract     *Snapshots        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SnapshotsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SnapshotsCallerSession struct {
	Contract *SnapshotsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// SnapshotsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SnapshotsTransactorSession struct {
	Contract     *SnapshotsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// SnapshotsRaw is an auto generated low-level Go binding around an Ethereum contract.
type SnapshotsRaw struct {
	Contract *Snapshots // Generic contract binding to access the raw methods on
}

// SnapshotsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SnapshotsCallerRaw struct {
	Contract *SnapshotsCaller // Generic read-only contract binding to access the raw methods on
}

// SnapshotsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SnapshotsTransactorRaw struct {
	Contract *SnapshotsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSnapshots creates a new instance of Snapshots, bound to a specific deployed contract.
func NewSnapshots(address common.Address, backend bind.ContractBackend) (*Snapshots, error) {
	contract, err := bindSnapshots(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Snapshots{SnapshotsCaller: SnapshotsCaller{contract: contract}, SnapshotsTransactor: SnapshotsTransactor{contract: contract}, SnapshotsFilterer: SnapshotsFilterer{contract: contract}}, nil
}

// NewSnapshotsCaller creates a new read-only instance of Snapshots, bound to a specific deployed contract.
func NewSnapshotsCaller(address common.Address, caller bind.ContractCaller) (*SnapshotsCaller, error) {
	contract, err := bindSnapshots(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SnapshotsCaller{contract: contract}, nil
}

// NewSnapshotsTransactor creates a new write-only instance of Snapshots, bound to a specific deployed contract.
func NewSnapshotsTransactor(address common.Address, transactor bind.ContractTransactor) (*SnapshotsTransactor, error) {
	contract, err := bindSnapshots(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SnapshotsTransactor{contract: contract}, nil
}

// NewSnapshotsFilterer creates a new log filterer instance of Snapshots, bound to a specific deployed contract.
func NewSnapshotsFilterer(address common.Address, filterer bind.ContractFilterer) (*SnapshotsFilterer, error) {
	contract, err := bindSnapshots(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SnapshotsFilterer{contract: contract}, nil
}

// bindSnapshots binds a generic wrapper to an already deployed contract.
func bindSnapshots(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SnapshotsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Snapshots *SnapshotsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Snapshots.Contract.SnapshotsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Snapshots *SnapshotsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Snapshots.Contract.SnapshotsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Snapshots *SnapshotsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Snapshots.Contract.SnapshotsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Snapshots *SnapshotsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Snapshots.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Snapshots *SnapshotsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Snapshots.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Snapshots *SnapshotsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Snapshots.Contract.contract.Transact(opts, method, params...)
}

// Epoch is a free data retrieval call binding the contract method 0x900cf0cf.
//
// Solidity: function epoch() view returns(uint256)
func (_Snapshots *SnapshotsCaller) Epoch(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "epoch")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Epoch is a free data retrieval call binding the contract method 0x900cf0cf.
//
// Solidity: function epoch() view returns(uint256)
func (_Snapshots *SnapshotsSession) Epoch() (*big.Int, error) {
	return _Snapshots.Contract.Epoch(&_Snapshots.CallOpts)
}

// Epoch is a free data retrieval call binding the contract method 0x900cf0cf.
//
// Solidity: function epoch() view returns(uint256)
func (_Snapshots *SnapshotsCallerSession) Epoch() (*big.Int, error) {
	return _Snapshots.Contract.Epoch(&_Snapshots.CallOpts)
}

// ExtractUint256 is a free data retrieval call binding the contract method 0x1c8c8ba4.
//
// Solidity: function extractUint256(bytes src, uint256 offset) pure returns(uint256 val)
func (_Snapshots *SnapshotsCaller) ExtractUint256(opts *bind.CallOpts, src []byte, offset *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "extractUint256", src, offset)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ExtractUint256 is a free data retrieval call binding the contract method 0x1c8c8ba4.
//
// Solidity: function extractUint256(bytes src, uint256 offset) pure returns(uint256 val)
func (_Snapshots *SnapshotsSession) ExtractUint256(src []byte, offset *big.Int) (*big.Int, error) {
	return _Snapshots.Contract.ExtractUint256(&_Snapshots.CallOpts, src, offset)
}

// ExtractUint256 is a free data retrieval call binding the contract method 0x1c8c8ba4.
//
// Solidity: function extractUint256(bytes src, uint256 offset) pure returns(uint256 val)
func (_Snapshots *SnapshotsCallerSession) ExtractUint256(src []byte, offset *big.Int) (*big.Int, error) {
	return _Snapshots.Contract.ExtractUint256(&_Snapshots.CallOpts, src, offset)
}

// ExtractUint32 is a free data retrieval call binding the contract method 0xc1312f4d.
//
// Solidity: function extractUint32(bytes src, uint256 idx) pure returns(uint32 val)
func (_Snapshots *SnapshotsCaller) ExtractUint32(opts *bind.CallOpts, src []byte, idx *big.Int) (uint32, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "extractUint32", src, idx)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// ExtractUint32 is a free data retrieval call binding the contract method 0xc1312f4d.
//
// Solidity: function extractUint32(bytes src, uint256 idx) pure returns(uint32 val)
func (_Snapshots *SnapshotsSession) ExtractUint32(src []byte, idx *big.Int) (uint32, error) {
	return _Snapshots.Contract.ExtractUint32(&_Snapshots.CallOpts, src, idx)
}

// ExtractUint32 is a free data retrieval call binding the contract method 0xc1312f4d.
//
// Solidity: function extractUint32(bytes src, uint256 idx) pure returns(uint32 val)
func (_Snapshots *SnapshotsCallerSession) ExtractUint32(src []byte, idx *big.Int) (uint32, error) {
	return _Snapshots.Contract.ExtractUint32(&_Snapshots.CallOpts, src, idx)
}

// GetChainIdFromSnapshot is a free data retrieval call binding the contract method 0x19f74669.
//
// Solidity: function getChainIdFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_Snapshots *SnapshotsCaller) GetChainIdFromSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) (uint32, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "getChainIdFromSnapshot", snapshotNumber)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetChainIdFromSnapshot is a free data retrieval call binding the contract method 0x19f74669.
//
// Solidity: function getChainIdFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_Snapshots *SnapshotsSession) GetChainIdFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _Snapshots.Contract.GetChainIdFromSnapshot(&_Snapshots.CallOpts, snapshotNumber)
}

// GetChainIdFromSnapshot is a free data retrieval call binding the contract method 0x19f74669.
//
// Solidity: function getChainIdFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_Snapshots *SnapshotsCallerSession) GetChainIdFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _Snapshots.Contract.GetChainIdFromSnapshot(&_Snapshots.CallOpts, snapshotNumber)
}

// GetHeightFromSnapshot is a free data retrieval call binding the contract method 0xe380b228.
//
// Solidity: function getHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_Snapshots *SnapshotsCaller) GetHeightFromSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) (uint32, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "getHeightFromSnapshot", snapshotNumber)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetHeightFromSnapshot is a free data retrieval call binding the contract method 0xe380b228.
//
// Solidity: function getHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_Snapshots *SnapshotsSession) GetHeightFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _Snapshots.Contract.GetHeightFromSnapshot(&_Snapshots.CallOpts, snapshotNumber)
}

// GetHeightFromSnapshot is a free data retrieval call binding the contract method 0xe380b228.
//
// Solidity: function getHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_Snapshots *SnapshotsCallerSession) GetHeightFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _Snapshots.Contract.GetHeightFromSnapshot(&_Snapshots.CallOpts, snapshotNumber)
}

// GetMadHeightFromSnapshot is a free data retrieval call binding the contract method 0x4f4ea614.
//
// Solidity: function getMadHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_Snapshots *SnapshotsCaller) GetMadHeightFromSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) (uint32, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "getMadHeightFromSnapshot", snapshotNumber)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetMadHeightFromSnapshot is a free data retrieval call binding the contract method 0x4f4ea614.
//
// Solidity: function getMadHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_Snapshots *SnapshotsSession) GetMadHeightFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _Snapshots.Contract.GetMadHeightFromSnapshot(&_Snapshots.CallOpts, snapshotNumber)
}

// GetMadHeightFromSnapshot is a free data retrieval call binding the contract method 0x4f4ea614.
//
// Solidity: function getMadHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_Snapshots *SnapshotsCallerSession) GetMadHeightFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _Snapshots.Contract.GetMadHeightFromSnapshot(&_Snapshots.CallOpts, snapshotNumber)
}

// GetRawBlockClaimsSnapshot is a free data retrieval call binding the contract method 0x6372fe51.
//
// Solidity: function getRawBlockClaimsSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_Snapshots *SnapshotsCaller) GetRawBlockClaimsSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) ([]byte, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "getRawBlockClaimsSnapshot", snapshotNumber)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetRawBlockClaimsSnapshot is a free data retrieval call binding the contract method 0x6372fe51.
//
// Solidity: function getRawBlockClaimsSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_Snapshots *SnapshotsSession) GetRawBlockClaimsSnapshot(snapshotNumber *big.Int) ([]byte, error) {
	return _Snapshots.Contract.GetRawBlockClaimsSnapshot(&_Snapshots.CallOpts, snapshotNumber)
}

// GetRawBlockClaimsSnapshot is a free data retrieval call binding the contract method 0x6372fe51.
//
// Solidity: function getRawBlockClaimsSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_Snapshots *SnapshotsCallerSession) GetRawBlockClaimsSnapshot(snapshotNumber *big.Int) ([]byte, error) {
	return _Snapshots.Contract.GetRawBlockClaimsSnapshot(&_Snapshots.CallOpts, snapshotNumber)
}

// GetRawSignatureSnapshot is a free data retrieval call binding the contract method 0x35b6c632.
//
// Solidity: function getRawSignatureSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_Snapshots *SnapshotsCaller) GetRawSignatureSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) ([]byte, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "getRawSignatureSnapshot", snapshotNumber)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetRawSignatureSnapshot is a free data retrieval call binding the contract method 0x35b6c632.
//
// Solidity: function getRawSignatureSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_Snapshots *SnapshotsSession) GetRawSignatureSnapshot(snapshotNumber *big.Int) ([]byte, error) {
	return _Snapshots.Contract.GetRawSignatureSnapshot(&_Snapshots.CallOpts, snapshotNumber)
}

// GetRawSignatureSnapshot is a free data retrieval call binding the contract method 0x35b6c632.
//
// Solidity: function getRawSignatureSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_Snapshots *SnapshotsCallerSession) GetRawSignatureSnapshot(snapshotNumber *big.Int) ([]byte, error) {
	return _Snapshots.Contract.GetRawSignatureSnapshot(&_Snapshots.CallOpts, snapshotNumber)
}

// MinEthSnapshotSize is a free data retrieval call binding the contract method 0xe4b82105.
//
// Solidity: function minEthSnapshotSize() view returns(uint256)
func (_Snapshots *SnapshotsCaller) MinEthSnapshotSize(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "minEthSnapshotSize")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinEthSnapshotSize is a free data retrieval call binding the contract method 0xe4b82105.
//
// Solidity: function minEthSnapshotSize() view returns(uint256)
func (_Snapshots *SnapshotsSession) MinEthSnapshotSize() (*big.Int, error) {
	return _Snapshots.Contract.MinEthSnapshotSize(&_Snapshots.CallOpts)
}

// MinEthSnapshotSize is a free data retrieval call binding the contract method 0xe4b82105.
//
// Solidity: function minEthSnapshotSize() view returns(uint256)
func (_Snapshots *SnapshotsCallerSession) MinEthSnapshotSize() (*big.Int, error) {
	return _Snapshots.Contract.MinEthSnapshotSize(&_Snapshots.CallOpts)
}

// MinMadSnapshotSize is a free data retrieval call binding the contract method 0xc17cb9ee.
//
// Solidity: function minMadSnapshotSize() view returns(uint256)
func (_Snapshots *SnapshotsCaller) MinMadSnapshotSize(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "minMadSnapshotSize")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinMadSnapshotSize is a free data retrieval call binding the contract method 0xc17cb9ee.
//
// Solidity: function minMadSnapshotSize() view returns(uint256)
func (_Snapshots *SnapshotsSession) MinMadSnapshotSize() (*big.Int, error) {
	return _Snapshots.Contract.MinMadSnapshotSize(&_Snapshots.CallOpts)
}

// MinMadSnapshotSize is a free data retrieval call binding the contract method 0xc17cb9ee.
//
// Solidity: function minMadSnapshotSize() view returns(uint256)
func (_Snapshots *SnapshotsCallerSession) MinMadSnapshotSize() (*big.Int, error) {
	return _Snapshots.Contract.MinMadSnapshotSize(&_Snapshots.CallOpts)
}

// ParseSignatureGroup is a free data retrieval call binding the contract method 0x9be2f2df.
//
// Solidity: function parseSignatureGroup(bytes _signatureGroup) pure returns(uint256[4] publicKey, uint256[2] signature)
func (_Snapshots *SnapshotsCaller) ParseSignatureGroup(opts *bind.CallOpts, _signatureGroup []byte) (struct {
	PublicKey [4]*big.Int
	Signature [2]*big.Int
}, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "parseSignatureGroup", _signatureGroup)

	outstruct := new(struct {
		PublicKey [4]*big.Int
		Signature [2]*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.PublicKey = *abi.ConvertType(out[0], new([4]*big.Int)).(*[4]*big.Int)
	outstruct.Signature = *abi.ConvertType(out[1], new([2]*big.Int)).(*[2]*big.Int)

	return *outstruct, err

}

// ParseSignatureGroup is a free data retrieval call binding the contract method 0x9be2f2df.
//
// Solidity: function parseSignatureGroup(bytes _signatureGroup) pure returns(uint256[4] publicKey, uint256[2] signature)
func (_Snapshots *SnapshotsSession) ParseSignatureGroup(_signatureGroup []byte) (struct {
	PublicKey [4]*big.Int
	Signature [2]*big.Int
}, error) {
	return _Snapshots.Contract.ParseSignatureGroup(&_Snapshots.CallOpts, _signatureGroup)
}

// ParseSignatureGroup is a free data retrieval call binding the contract method 0x9be2f2df.
//
// Solidity: function parseSignatureGroup(bytes _signatureGroup) pure returns(uint256[4] publicKey, uint256[2] signature)
func (_Snapshots *SnapshotsCallerSession) ParseSignatureGroup(_signatureGroup []byte) (struct {
	PublicKey [4]*big.Int
	Signature [2]*big.Int
}, error) {
	return _Snapshots.Contract.ParseSignatureGroup(&_Snapshots.CallOpts, _signatureGroup)
}

// Reverse is a free data retrieval call binding the contract method 0xec11c823.
//
// Solidity: function reverse(bytes orig) pure returns(bytes reversed)
func (_Snapshots *SnapshotsCaller) Reverse(opts *bind.CallOpts, orig []byte) ([]byte, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "reverse", orig)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// Reverse is a free data retrieval call binding the contract method 0xec11c823.
//
// Solidity: function reverse(bytes orig) pure returns(bytes reversed)
func (_Snapshots *SnapshotsSession) Reverse(orig []byte) ([]byte, error) {
	return _Snapshots.Contract.Reverse(&_Snapshots.CallOpts, orig)
}

// Reverse is a free data retrieval call binding the contract method 0xec11c823.
//
// Solidity: function reverse(bytes orig) pure returns(bytes reversed)
func (_Snapshots *SnapshotsCallerSession) Reverse(orig []byte) ([]byte, error) {
	return _Snapshots.Contract.Reverse(&_Snapshots.CallOpts, orig)
}

// InitializeSnapshots is a paid mutator transaction binding the contract method 0x20d9a246.
//
// Solidity: function initializeSnapshots(address registry) returns()
func (_Snapshots *SnapshotsTransactor) InitializeSnapshots(opts *bind.TransactOpts, registry common.Address) (*types.Transaction, error) {
	return _Snapshots.contract.Transact(opts, "initializeSnapshots", registry)
}

// InitializeSnapshots is a paid mutator transaction binding the contract method 0x20d9a246.
//
// Solidity: function initializeSnapshots(address registry) returns()
func (_Snapshots *SnapshotsSession) InitializeSnapshots(registry common.Address) (*types.Transaction, error) {
	return _Snapshots.Contract.InitializeSnapshots(&_Snapshots.TransactOpts, registry)
}

// InitializeSnapshots is a paid mutator transaction binding the contract method 0x20d9a246.
//
// Solidity: function initializeSnapshots(address registry) returns()
func (_Snapshots *SnapshotsTransactorSession) InitializeSnapshots(registry common.Address) (*types.Transaction, error) {
	return _Snapshots.Contract.InitializeSnapshots(&_Snapshots.TransactOpts, registry)
}

// SetEpoch is a paid mutator transaction binding the contract method 0x0ceb2cef.
//
// Solidity: function setEpoch(uint256 ns) returns()
func (_Snapshots *SnapshotsTransactor) SetEpoch(opts *bind.TransactOpts, ns *big.Int) (*types.Transaction, error) {
	return _Snapshots.contract.Transact(opts, "setEpoch", ns)
}

// SetEpoch is a paid mutator transaction binding the contract method 0x0ceb2cef.
//
// Solidity: function setEpoch(uint256 ns) returns()
func (_Snapshots *SnapshotsSession) SetEpoch(ns *big.Int) (*types.Transaction, error) {
	return _Snapshots.Contract.SetEpoch(&_Snapshots.TransactOpts, ns)
}

// SetEpoch is a paid mutator transaction binding the contract method 0x0ceb2cef.
//
// Solidity: function setEpoch(uint256 ns) returns()
func (_Snapshots *SnapshotsTransactorSession) SetEpoch(ns *big.Int) (*types.Transaction, error) {
	return _Snapshots.Contract.SetEpoch(&_Snapshots.TransactOpts, ns)
}

// SetMinEthSnapshotSize is a paid mutator transaction binding the contract method 0x0d81dce4.
//
// Solidity: function setMinEthSnapshotSize(uint256 _minSize) returns()
func (_Snapshots *SnapshotsTransactor) SetMinEthSnapshotSize(opts *bind.TransactOpts, _minSize *big.Int) (*types.Transaction, error) {
	return _Snapshots.contract.Transact(opts, "setMinEthSnapshotSize", _minSize)
}

// SetMinEthSnapshotSize is a paid mutator transaction binding the contract method 0x0d81dce4.
//
// Solidity: function setMinEthSnapshotSize(uint256 _minSize) returns()
func (_Snapshots *SnapshotsSession) SetMinEthSnapshotSize(_minSize *big.Int) (*types.Transaction, error) {
	return _Snapshots.Contract.SetMinEthSnapshotSize(&_Snapshots.TransactOpts, _minSize)
}

// SetMinEthSnapshotSize is a paid mutator transaction binding the contract method 0x0d81dce4.
//
// Solidity: function setMinEthSnapshotSize(uint256 _minSize) returns()
func (_Snapshots *SnapshotsTransactorSession) SetMinEthSnapshotSize(_minSize *big.Int) (*types.Transaction, error) {
	return _Snapshots.Contract.SetMinEthSnapshotSize(&_Snapshots.TransactOpts, _minSize)
}

// SetMinMadSnapshotSize is a paid mutator transaction binding the contract method 0x99e33e3d.
//
// Solidity: function setMinMadSnapshotSize(uint256 _minSize) returns()
func (_Snapshots *SnapshotsTransactor) SetMinMadSnapshotSize(opts *bind.TransactOpts, _minSize *big.Int) (*types.Transaction, error) {
	return _Snapshots.contract.Transact(opts, "setMinMadSnapshotSize", _minSize)
}

// SetMinMadSnapshotSize is a paid mutator transaction binding the contract method 0x99e33e3d.
//
// Solidity: function setMinMadSnapshotSize(uint256 _minSize) returns()
func (_Snapshots *SnapshotsSession) SetMinMadSnapshotSize(_minSize *big.Int) (*types.Transaction, error) {
	return _Snapshots.Contract.SetMinMadSnapshotSize(&_Snapshots.TransactOpts, _minSize)
}

// SetMinMadSnapshotSize is a paid mutator transaction binding the contract method 0x99e33e3d.
//
// Solidity: function setMinMadSnapshotSize(uint256 _minSize) returns()
func (_Snapshots *SnapshotsTransactorSession) SetMinMadSnapshotSize(_minSize *big.Int) (*types.Transaction, error) {
	return _Snapshots.Contract.SetMinMadSnapshotSize(&_Snapshots.TransactOpts, _minSize)
}

// Snapshot is a paid mutator transaction binding the contract method 0x08ca1f25.
//
// Solidity: function snapshot(bytes _signatureGroup, bytes _bclaims) returns(bool)
func (_Snapshots *SnapshotsTransactor) Snapshot(opts *bind.TransactOpts, _signatureGroup []byte, _bclaims []byte) (*types.Transaction, error) {
	return _Snapshots.contract.Transact(opts, "snapshot", _signatureGroup, _bclaims)
}

// Snapshot is a paid mutator transaction binding the contract method 0x08ca1f25.
//
// Solidity: function snapshot(bytes _signatureGroup, bytes _bclaims) returns(bool)
func (_Snapshots *SnapshotsSession) Snapshot(_signatureGroup []byte, _bclaims []byte) (*types.Transaction, error) {
	return _Snapshots.Contract.Snapshot(&_Snapshots.TransactOpts, _signatureGroup, _bclaims)
}

// Snapshot is a paid mutator transaction binding the contract method 0x08ca1f25.
//
// Solidity: function snapshot(bytes _signatureGroup, bytes _bclaims) returns(bool)
func (_Snapshots *SnapshotsTransactorSession) Snapshot(_signatureGroup []byte, _bclaims []byte) (*types.Transaction, error) {
	return _Snapshots.Contract.Snapshot(&_Snapshots.TransactOpts, _signatureGroup, _bclaims)
}

// SnapshotsSnapshotTakenIterator is returned from FilterSnapshotTaken and is used to iterate over the raw logs and unpacked data for SnapshotTaken events raised by the Snapshots contract.
type SnapshotsSnapshotTakenIterator struct {
	Event *SnapshotsSnapshotTaken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SnapshotsSnapshotTakenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SnapshotsSnapshotTaken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SnapshotsSnapshotTaken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SnapshotsSnapshotTakenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SnapshotsSnapshotTakenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SnapshotsSnapshotTaken represents a SnapshotTaken event raised by the Snapshots contract.
type SnapshotsSnapshotTaken struct {
	ChainId        uint32
	Epoch          *big.Int
	Height         uint32
	Validator      common.Address
	StartingETHDKG bool
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterSnapshotTaken is a free log retrieval operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_Snapshots *SnapshotsFilterer) FilterSnapshotTaken(opts *bind.FilterOpts, epoch []*big.Int, validator []common.Address) (*SnapshotsSnapshotTakenIterator, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Snapshots.contract.FilterLogs(opts, "SnapshotTaken", epochRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return &SnapshotsSnapshotTakenIterator{contract: _Snapshots.contract, event: "SnapshotTaken", logs: logs, sub: sub}, nil
}

// WatchSnapshotTaken is a free log subscription operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_Snapshots *SnapshotsFilterer) WatchSnapshotTaken(opts *bind.WatchOpts, sink chan<- *SnapshotsSnapshotTaken, epoch []*big.Int, validator []common.Address) (event.Subscription, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Snapshots.contract.WatchLogs(opts, "SnapshotTaken", epochRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SnapshotsSnapshotTaken)
				if err := _Snapshots.contract.UnpackLog(event, "SnapshotTaken", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSnapshotTaken is a log parse operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_Snapshots *SnapshotsFilterer) ParseSnapshotTaken(log types.Log) (*SnapshotsSnapshotTaken, error) {
	event := new(SnapshotsSnapshotTaken)
	if err := _Snapshots.contract.UnpackLog(event, "SnapshotTaken", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SnapshotsEventsMetaData contains all meta data concerning the SnapshotsEvents contract.
var SnapshotsEventsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"startingETHDKG\",\"type\":\"bool\"}],\"name\":\"SnapshotTaken\",\"type\":\"event\"}]",
}

// SnapshotsEventsABI is the input ABI used to generate the binding from.
// Deprecated: Use SnapshotsEventsMetaData.ABI instead.
var SnapshotsEventsABI = SnapshotsEventsMetaData.ABI

// SnapshotsEvents is an auto generated Go binding around an Ethereum contract.
type SnapshotsEvents struct {
	SnapshotsEventsCaller     // Read-only binding to the contract
	SnapshotsEventsTransactor // Write-only binding to the contract
	SnapshotsEventsFilterer   // Log filterer for contract events
}

// SnapshotsEventsCaller is an auto generated read-only Go binding around an Ethereum contract.
type SnapshotsEventsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SnapshotsEventsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SnapshotsEventsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SnapshotsEventsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SnapshotsEventsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SnapshotsEventsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SnapshotsEventsSession struct {
	Contract     *SnapshotsEvents  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SnapshotsEventsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SnapshotsEventsCallerSession struct {
	Contract *SnapshotsEventsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// SnapshotsEventsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SnapshotsEventsTransactorSession struct {
	Contract     *SnapshotsEventsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// SnapshotsEventsRaw is an auto generated low-level Go binding around an Ethereum contract.
type SnapshotsEventsRaw struct {
	Contract *SnapshotsEvents // Generic contract binding to access the raw methods on
}

// SnapshotsEventsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SnapshotsEventsCallerRaw struct {
	Contract *SnapshotsEventsCaller // Generic read-only contract binding to access the raw methods on
}

// SnapshotsEventsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SnapshotsEventsTransactorRaw struct {
	Contract *SnapshotsEventsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSnapshotsEvents creates a new instance of SnapshotsEvents, bound to a specific deployed contract.
func NewSnapshotsEvents(address common.Address, backend bind.ContractBackend) (*SnapshotsEvents, error) {
	contract, err := bindSnapshotsEvents(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SnapshotsEvents{SnapshotsEventsCaller: SnapshotsEventsCaller{contract: contract}, SnapshotsEventsTransactor: SnapshotsEventsTransactor{contract: contract}, SnapshotsEventsFilterer: SnapshotsEventsFilterer{contract: contract}}, nil
}

// NewSnapshotsEventsCaller creates a new read-only instance of SnapshotsEvents, bound to a specific deployed contract.
func NewSnapshotsEventsCaller(address common.Address, caller bind.ContractCaller) (*SnapshotsEventsCaller, error) {
	contract, err := bindSnapshotsEvents(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SnapshotsEventsCaller{contract: contract}, nil
}

// NewSnapshotsEventsTransactor creates a new write-only instance of SnapshotsEvents, bound to a specific deployed contract.
func NewSnapshotsEventsTransactor(address common.Address, transactor bind.ContractTransactor) (*SnapshotsEventsTransactor, error) {
	contract, err := bindSnapshotsEvents(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SnapshotsEventsTransactor{contract: contract}, nil
}

// NewSnapshotsEventsFilterer creates a new log filterer instance of SnapshotsEvents, bound to a specific deployed contract.
func NewSnapshotsEventsFilterer(address common.Address, filterer bind.ContractFilterer) (*SnapshotsEventsFilterer, error) {
	contract, err := bindSnapshotsEvents(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SnapshotsEventsFilterer{contract: contract}, nil
}

// bindSnapshotsEvents binds a generic wrapper to an already deployed contract.
func bindSnapshotsEvents(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SnapshotsEventsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SnapshotsEvents *SnapshotsEventsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SnapshotsEvents.Contract.SnapshotsEventsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SnapshotsEvents *SnapshotsEventsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SnapshotsEvents.Contract.SnapshotsEventsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SnapshotsEvents *SnapshotsEventsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SnapshotsEvents.Contract.SnapshotsEventsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SnapshotsEvents *SnapshotsEventsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SnapshotsEvents.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SnapshotsEvents *SnapshotsEventsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SnapshotsEvents.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SnapshotsEvents *SnapshotsEventsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SnapshotsEvents.Contract.contract.Transact(opts, method, params...)
}

// SnapshotsEventsSnapshotTakenIterator is returned from FilterSnapshotTaken and is used to iterate over the raw logs and unpacked data for SnapshotTaken events raised by the SnapshotsEvents contract.
type SnapshotsEventsSnapshotTakenIterator struct {
	Event *SnapshotsEventsSnapshotTaken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SnapshotsEventsSnapshotTakenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SnapshotsEventsSnapshotTaken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SnapshotsEventsSnapshotTaken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SnapshotsEventsSnapshotTakenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SnapshotsEventsSnapshotTakenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SnapshotsEventsSnapshotTaken represents a SnapshotTaken event raised by the SnapshotsEvents contract.
type SnapshotsEventsSnapshotTaken struct {
	ChainId        uint32
	Epoch          *big.Int
	Height         uint32
	Validator      common.Address
	StartingETHDKG bool
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterSnapshotTaken is a free log retrieval operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_SnapshotsEvents *SnapshotsEventsFilterer) FilterSnapshotTaken(opts *bind.FilterOpts, epoch []*big.Int, validator []common.Address) (*SnapshotsEventsSnapshotTakenIterator, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _SnapshotsEvents.contract.FilterLogs(opts, "SnapshotTaken", epochRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return &SnapshotsEventsSnapshotTakenIterator{contract: _SnapshotsEvents.contract, event: "SnapshotTaken", logs: logs, sub: sub}, nil
}

// WatchSnapshotTaken is a free log subscription operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_SnapshotsEvents *SnapshotsEventsFilterer) WatchSnapshotTaken(opts *bind.WatchOpts, sink chan<- *SnapshotsEventsSnapshotTaken, epoch []*big.Int, validator []common.Address) (event.Subscription, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _SnapshotsEvents.contract.WatchLogs(opts, "SnapshotTaken", epochRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SnapshotsEventsSnapshotTaken)
				if err := _SnapshotsEvents.contract.UnpackLog(event, "SnapshotTaken", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSnapshotTaken is a log parse operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_SnapshotsEvents *SnapshotsEventsFilterer) ParseSnapshotTaken(log types.Log) (*SnapshotsEventsSnapshotTaken, error) {
	event := new(SnapshotsEventsSnapshotTaken)
	if err := _SnapshotsEvents.contract.UnpackLog(event, "SnapshotTaken", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SnapshotsFacetMetaData contains all meta data concerning the SnapshotsFacet contract.
var SnapshotsFacetMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"startingETHDKG\",\"type\":\"bool\"}],\"name\":\"SnapshotTaken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getChainIdFromSnapshot\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getHeightFromSnapshot\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getMadHeightFromSnapshot\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getRawBlockClaimsSnapshot\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getRawSignatureSnapshot\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractRegistry\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"initializeSnapshots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minEthSnapshotSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minMadSnapshotSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ns\",\"type\":\"uint256\"}],\"name\":\"setEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minSize\",\"type\":\"uint256\"}],\"name\":\"setMinEthSnapshotSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minSize\",\"type\":\"uint256\"}],\"name\":\"setMinMadSnapshotSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_signatureGroup\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_bclaims\",\"type\":\"bytes\"}],\"name\":\"snapshot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
<<<<<<< Updated upstream
	Bin: "0x60806040523480156200001157600080fd5b506000620000296200007560201b62000f291760201c565b9050338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620000a2565b6000807f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90508091505090565b61450a80620000b26000396000f3fe608060405234801561001057600080fd5b506004361061016c5760003560e01c8063900cf0cf116100cd578063dc97805911610081578063e380b22811610066578063e380b2281461037f578063e4b82105146103af578063fad8b32a146103cd5761016c565b8063dc97805914610347578063e348da13146103635761016c565b8063ab033ea9116100b2578063ab033ea914610303578063be9a65551461031f578063c17cb9ee146103295761016c565b8063900cf0cf146102c957806399e33e3d146102e75761016c565b806320d9a246116101245780634f4ea614116101095780634f4ea6141461025f578063605361721461028f5780636372fe51146102995761016c565b806320d9a2461461021357806335b6c6321461022f5761016c565b80630ceb2cef116101555780630ceb2cef146101ab5780630d81dce4146101c757806319f74669146101e35761016c565b806307da68f51461017157806308ca1f251461017b575b600080fd5b6101796103e9565b005b6101956004803603810190610190919061312f565b610486565b6040516101a291906131cb565b60405180910390f35b6101c560048036038101906101c0919061321c565b610548565b005b6101e160048036038101906101dc919061321c565b6105ef565b005b6101fd60048036038101906101f8919061321c565b61069d565b60405161020a9190613268565b60405180910390f35b61022d600480360381019061022891906132f3565b6106af565b005b6102496004803603810190610244919061321c565b6107bd565b60405161025691906133b9565b60405180910390f35b6102796004803603810190610274919061321c565b6107cf565b6040516102869190613268565b60405180910390f35b6102976107e1565b005b6102b360048036038101906102ae919061321c565b6108ec565b6040516102c091906133b9565b60405180910390f35b6102d16108fe565b6040516102de91906133ea565b60405180910390f35b61030160048036038101906102fc919061321c565b61090d565b005b61031d60048036038101906103189190613431565b6109bb565b005b610327610aad565b005b610331610b4a565b60405161033e91906133ea565b60405180910390f35b610361600480360381019061035c9190613431565b610b5d565b005b61037d60048036038101906103789190613431565b610c4f565b005b6103996004803603810190610394919061321c565b610dae565b6040516103a69190613268565b60405180910390f35b6103b7610dc0565b6040516103c491906133ea565b60405180910390f35b6103e760048036038101906103e29190613431565b610dd3565b005b60006103f3610f29565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610483576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047a906134e1565b60405180910390fd5b50565b600080610491610f29565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16806104f257506104f133610f56565b5b610531576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052890613573565b60405180910390fd5b61053d86868686610fd5565b915050949350505050565b6000610552610f29565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166105e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d9906134e1565b60405180910390fd5b6105eb82611777565b5050565b60006105f9610f29565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610689576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610680906134e1565b60405180910390fd5b8161069261178a565b600201819055505050565b60006106a8826117b7565b9050919050565b60006106b9610f29565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610749576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610740906134e1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156107b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b0906135df565b60405180910390fd5b5050565b60606107c8826117fb565b9050919050565b60006107da826118b8565b9050919050565b60006107eb610f29565b90508060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461087f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087690613671565b60405180910390fd5b8060020160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606108f7826118fc565b9050919050565b60006109086119b9565b905090565b6000610917610f29565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166109a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099e906134e1565b60405180910390fd5b816109b061178a565b600301819055505050565b60006109c5610f29565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610a59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5090613703565b60405180910390fd5b6000610a63610f29565b9050828160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6000610ab7610f29565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610b47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3e906134e1565b60405180910390fd5b50565b6000610b5461178a565b60030154905090565b6000610b67610f29565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610bfb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf290613703565b60405180910390fd5b6000610c05610f29565b9050828160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6000610c59610f29565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610d0457508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610d43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3a90613795565b60405180910390fd5b6000610d4d610f29565b905060018160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b6000610db9826119cc565b9050919050565b6000610dca61178a565b60020154905090565b6000610ddd610f29565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610e8857508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610ec7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ebe90613795565b60405180910390fd5b6000610ed1610f29565b90508060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff0219169055505050565b6000807f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90508091505090565b600080610f61611a10565b90508060020160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff168015610fcd5750610fc1611a3d565b610fca84611a50565b10155b915050919050565b600080610fe0611aa5565b90506000610fec61178a565b9050610ff6612f9d565b610ffe612fbf565b61104d89898080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506000611ad2565b8092508193505050600087876040516110679291906137f4565b604051809103902060405160200161107f9190613838565b6040516020818303038152906040529050600061109d828486611cb9565b9050806110df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d69061389f565b60405180910390fd5b60006111308a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506008611e72565b905060006111838b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050600c611e72565b905060008760000160008a600101548152602001908152602001600020905060018160000160006101000a81548160ff0219169083151502179055508b8b8260010191906111d2929190612fe1565b508d8d8260020191906111e6929190612fe1565b50438160030160006101000a81548163ffffffff021916908363ffffffff160217905550818160030160046101000a81548163ffffffff021916908363ffffffff160217905550828160000160016101000a81548163ffffffff021916908363ffffffff16021790555060018960010154111561151c57600088600001600060018c6001015461127691906138ee565b81526020019081526020016000206040518060c00160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016001820180546112e090613951565b80601f016020809104026020016040519081016040528092919081815260200182805461130c90613951565b80156113595780601f1061132e57610100808354040283529160200191611359565b820191906000526020600020905b81548152906001019060200180831161133c57829003601f168201915b5050505050815260200160028201805461137290613951565b80601f016020809104026020016040519081016040528092919081815260200182805461139e90613951565b80156113eb5780601f106113c0576101008083540402835291602001916113eb565b820191906000526020600020905b8154815290600101906020018083116113ce57829003601f168201915b505050505081526020016003820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016003820160049054906101000a900463ffffffff1663ffffffff1663ffffffff168152505090508060000151158061146c57508860020154816080015163ffffffff166114689190613983565b4310155b6114ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114a290613a4b565b60405180910390fd5b806000015115806114db575088600301548160a0015163ffffffff166114d19190613983565b8363ffffffff1610155b61151a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151190613add565b60405180910390fd5b505b6000611526611a10565b90506000611532611f5a565b905060005b82600001805490508110156116a25782600001818154811061155c5761155b613afd565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561162e576116288360000182815481106115d3576115d2613afd565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836004015484600301546116129190613983565b60028f600101546116239190613983565b611f87565b5061168f565b61168d83600001828154811061164757611646613afd565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836003015460028f600101546116889190613983565b611f87565b505b808061169a90613b2c565b915050611537565b5060008a60010160009054906101000a900460ff16156116c157600190505b60008b60010160006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff168c600101547f6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a88888f60010160009054906101000a900460ff1660405161173e93929190613b75565b60405180910390a38b600101600081548092919061175b90613b2c565b9190505550809c50505050505050505050505050949350505050565b80611780611aa5565b6001018190555050565b6000807fd02b08f6836233a79224d6de3c3df078574b0f84d75d2a48f85a5a3cacc7291590508091505090565b6000806117c261178a565b9050600081600001600085815260200190815260200160002090508060000160019054906101000a900463ffffffff1692505050919050565b6060600061180761178a565b90506000816000016000858152602001908152602001600020905080600201805461183190613951565b80601f016020809104026020016040519081016040528092919081815260200182805461185d90613951565b80156118aa5780601f1061187f576101008083540402835291602001916118aa565b820191906000526020600020905b81548152906001019060200180831161188d57829003601f168201915b505050505092505050919050565b6000806118c361178a565b9050600081600001600085815260200190815260200160002090508060030160049054906101000a900463ffffffff1692505050919050565b6060600061190861178a565b90506000816000016000858152602001908152602001600020905080600101805461193290613951565b80601f016020809104026020016040519081016040528092919081815260200182805461195e90613951565b80156119ab5780601f10611980576101008083540402835291602001916119ab565b820191906000526020600020905b81548152906001019060200180831161198e57829003601f168201915b505050505092505050919050565b60006119c3611aa5565b60010154905090565b6000806119d761178a565b9050600081600001600085815260200190815260200160002090508060030160009054906101000a900463ffffffff1692505050919050565b6000807f310970b1d84cbb8af371a12019b396e9511a9b44411c1dabeec3e3d59d9a50f690508091505090565b6000611a47611f5a565b60000154905090565b6000611a5a611f5a565b60090160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050919050565b6000807fa53f90683b42ecb37674e5c8c5c9cabf849818fdc2fdfb57bbe3c738f7b50d0e90508091505090565b611ada612f9d565b611ae2612fbf565b8260c084611af09190613983565b11611b30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2790613c1e565b60405180910390fd5b60c083611b3d9190613983565b84511015611b80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b7790613cb0565b60405180910390fd5b611b9684600085611b919190613983565b612136565b82600060048110611baa57611ba9613afd565b5b602002018181525050611bc984602085611bc49190613983565b612136565b82600160048110611bdd57611bdc613afd565b5b602002018181525050611bfc84604085611bf79190613983565b612136565b82600260048110611c1057611c0f613afd565b5b602002018181525050611c2f84606085611c2a9190613983565b612136565b82600360048110611c4357611c42613afd565b5b602002018181525050611c6284608085611c5d9190613983565b612136565b81600060028110611c7657611c75613afd565b5b602002018181525050611c958460a085611c909190613983565b612136565b81600160028110611ca957611ca8613afd565b5b6020020181815250509250929050565b6000611cc3612fbf565b611ccc856121e4565b9050611e6860405180610180016040528086600060028110611cf157611cf0613afd565b5b6020020151815260200186600160028110611d0f57611d0e613afd565b5b602002015181526020017f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed81526020017f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec81526020017f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d815260200183600060028110611dc557611dc4613afd565b5b6020020151815260200183600160028110611de357611de2613afd565b5b6020020151815260200185600060048110611e0157611e00613afd565b5b6020020151815260200185600160048110611e1f57611e1e613afd565b5b6020020151815260200185600260048110611e3d57611e3c613afd565b5b6020020151815260200185600360048110611e5b57611e5a613afd565b5b6020020151815250612358565b9150509392505050565b600082600383611e829190613983565b81518110611e9357611e92613afd565b5b602001015160f81c60f81b60f81c60ff16905082600283611eb49190613983565b81518110611ec557611ec4613afd565b5b602001015160f81c60f81b60f81c60ff1660088263ffffffff16901b17905082600183611ef29190613983565b81518110611f0357611f02613afd565b5b602001015160f81c60f81b60f81c60ff1660088263ffffffff16901b179050828281518110611f3557611f34613afd565b5b602001015160f81c60f81b60f81c60ff1660088263ffffffff16901b17905092915050565b6000807f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237ef90508091505090565b600080611f92611f5a565b905060008160090160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050611fe1613067565b858160000181815250508481602001818152505081600501819080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001556020820151816001015550508260080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1930886040518363ffffffff1660e01b8152600401612098929190613cdf565b600060405180830381600087803b1580156120b257600080fd5b505af11580156120c6573d6000803e3d6000fd5b505050508673ffffffffffffffffffffffffffffffffffffffff167f28dc9c0ffa672df041cad84edbee41508284600c9394bda0f8586d012c5e09158760405161211091906133ea565b60405180910390a28160010160009054906101000a900460ff1693505050509392505050565b600081601f836121469190613983565b11612186576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161217d90613da0565b60405180910390fd5b601f826121939190613983565b8351116121d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121cc90613e32565b60405180910390fd5b81602084010151905092915050565b6121ec612fbf565b600061220183600060f81b600160f81b6123d8565b9050600061221884600260f81b600360f81b6123d8565b90506000612225836124c7565b90506000612232836124c7565b90506122bd60405180608001604052808460006002811061225657612255613afd565b5b602002015181526020018460016002811061227457612273613afd565b5b602002015181526020018360006002811061229257612291613afd565b5b60200201518152602001836001600281106122b0576122af613afd565b5b6020020151815250612b51565b94506122c885612baf565b612307576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122fe90613ec4565b60405180910390fd5b61231085612cf8565b61234f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161234690613f56565b60405180910390fd5b50505050919050565b6000612362613081565b6000602082610180866008600019fa9050806123b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123aa90613fc2565b60405180910390fd5b6001826000600181106123c9576123c8613afd565b5b60200201511492505050919050565b60008083856040516020016123ee929190614060565b6040516020818303038152906040528051906020012060001c90506000838660405160200161241e929190614060565b6040516020818303038152906040528051906020012060001c90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061246857612467614088565b5b817f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061249857612497614088565b5b7f0e0a77c19a07df2f666ea36f7879462c0a78eb28f5c70b3dd35d438dc58f0d9d850908925050509392505050565b6124cf612fbf565b60008060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061250357612502614088565b5b85860992507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061253757612536614088565b5b6004840891507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061256c5761256b614088565b5b828409905061257a81612d50565b905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806125ad576125ac614088565b5b83840990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806125e1576125e0614088565b5b83820990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061261557612614614088565b5b848509935060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061264b5761264a614088565b5b8577b3c4d79d41a91759a9e4c7e359b6b89eaec68e62effffffd0990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061269757612696614088565b5b83820990506126a581612da4565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806126d6576126d5614088565b5b7759e26bcea0d48bacd4f263f1acdb5c4f5763473177fffffe8208905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061272457612723614088565b5b60018308905061273381612da4565b905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061276657612765614088565b5b847f2042def740cbc01bd03583cf0100e593ba56470b9af68708d2c05d64905353850990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806127ba576127b9614088565b5b85820990506127c881612da4565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806127f9576127f8614088565b5b60018208905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806128305761282f614088565b5b84850990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061286457612863614088565b5b84820990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061289857612897614088565b5b60038208905060006128a982612deb565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806128da576128d9614088565b5b84850991507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061290e5761290d614088565b5b84830991507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061294257612941614088565b5b600383089150600061295383612deb565b905060006001600460038461296891906140c1565b60018661297591906140c1565b61297f9190614155565b612989919061426c565b61299391906142d6565b9050600060018214156129a8578790506129be565b60028214156129b9578690506129bd565b8590505b5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806129ed576129ec614088565b5b81820994507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780612a2157612a20614088565b5b81860994507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780612a5557612a54614088565b5b600386089450612a6485612e70565b94506000612a718f612ec4565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780612aa257612aa1614088565b5b8187099550612ac4604051806040016040528084815260200188815250612baf565b612b03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612afa906143dc565b60405180910390fd5b818e600060028110612b1857612b17613afd565b5b602002018181525050858e600160028110612b3657612b35613afd565b5b60200201818152505050505050505050505050505050919050565b612b59612fbf565b60006040826080856006600019fa905080612ba9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ba090614448565b60405180910390fd5b50919050565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780612be057612bdf614088565b5b60037f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780612c1157612c10614088565b5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780612c4057612c3f614088565b5b85600060028110612c5457612c53613afd565b5b602002015186600060028110612c6d57612c6c613afd565b5b60200201510985600060028110612c8757612c86613afd565b5b602002015109087f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780612cbd57612cbc614088565b5b83600160028110612cd157612cd0613afd565b5b602002015184600160028110612cea57612ce9613afd565b5b602002015109149050919050565b60008082600060028110612d0f57612d0e613afd565b5b60200201511480612d385750600182600060028110612d3157612d30613afd565b5b6020020151145b15612d465760009050612d4b565b600190505b919050565b6000612d9d827f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd457f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47612f1b565b9050919050565b600080821415612db75760009050612de6565b817f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47612de391906138ee565b90505b919050565b600080612e39837f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea37f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47612f1b565b905060008114612e655760018082166002612e549190614155565b612e5e91906140c1565b9150612e6a565b600091505b50919050565b6000612ebd827f0c19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47612f1b565b9050919050565b6000600190507f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea3821115612f16577f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4690505b919050565b60008060405160208152602080820152602060408201528560608201528460808201528360a082015260208160c08360055afa9150805192505080612f95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f8c906144b4565b60405180910390fd5b509392505050565b6040518060800160405280600490602082028036833780820191505090505090565b6040518060400160405280600290602082028036833780820191505090505090565b828054612fed90613951565b90600052602060002090601f01602090048101928261300f5760008555613056565b82601f1061302857803560ff1916838001178555613056565b82800160010185558215613056579182015b8281111561305557823582559160200191906001019061303a565b5b50905061306391906130a3565b5090565b604051806040016040528060008152602001600081525090565b6040518060200160405280600190602082028036833780820191505090505090565b5b808211156130bc5760008160009055506001016130a4565b5090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126130ef576130ee6130ca565b5b8235905067ffffffffffffffff81111561310c5761310b6130cf565b5b602083019150836001820283011115613128576131276130d4565b5b9250929050565b60008060008060408587031215613149576131486130c0565b5b600085013567ffffffffffffffff811115613167576131666130c5565b5b613173878288016130d9565b9450945050602085013567ffffffffffffffff811115613196576131956130c5565b5b6131a2878288016130d9565b925092505092959194509250565b60008115159050919050565b6131c5816131b0565b82525050565b60006020820190506131e060008301846131bc565b92915050565b6000819050919050565b6131f9816131e6565b811461320457600080fd5b50565b600081359050613216816131f0565b92915050565b600060208284031215613232576132316130c0565b5b600061324084828501613207565b91505092915050565b600063ffffffff82169050919050565b61326281613249565b82525050565b600060208201905061327d6000830184613259565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006132ae82613283565b9050919050565b60006132c0826132a3565b9050919050565b6132d0816132b5565b81146132db57600080fd5b50565b6000813590506132ed816132c7565b92915050565b600060208284031215613309576133086130c0565b5b6000613317848285016132de565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561335a57808201518184015260208101905061333f565b83811115613369576000848401525b50505050565b6000601f19601f8301169050919050565b600061338b82613320565b613395818561332b565b93506133a581856020860161333c565b6133ae8161336f565b840191505092915050565b600060208201905081810360008301526133d38184613380565b905092915050565b6133e4816131e6565b82525050565b60006020820190506133ff60008301846133db565b92915050565b61340e816132a3565b811461341957600080fd5b50565b60008135905061342b81613405565b92915050565b600060208284031215613447576134466130c0565b5b60006134558482850161341c565b91505092915050565b600082825260208201905092915050565b7f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160008201527f6c6c6f7765640000000000000000000000000000000000000000000000000000602082015250565b60006134cb60268361345e565b91506134d68261346f565b604082019050919050565b600060208201905081810360008301526134fa816134be565b9050919050565b7f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f7220667560008201527f6c6c79207374616b6564207061727469636970616e747320616c6c6f77656400602082015250565b600061355d603f8361345e565b915061356882613501565b604082019050919050565b6000602082019050818103600083015261358c81613550565b9050919050565b7f6e696c2072656769737472792061646472657373000000000000000000000000600082015250565b60006135c960148361345e565b91506135d482613593565b602082019050919050565b600060208201905081810360008301526135f8816135bc565b9050919050565b7f41636365737320436f6e74726f6c3a206f776e657273686970206e6f7420677260008201527f616e746564000000000000000000000000000000000000000000000000000000602082015250565b600061365b60258361345e565b9150613666826135ff565b604082019050919050565b6000602082019050818103600083015261368a8161364e565b9050919050565b7f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60008201527f6c6f776564000000000000000000000000000000000000000000000000000000602082015250565b60006136ed60258361345e565b91506136f882613691565b604082019050919050565b6000602082019050818103600083015261371c816136e0565b9050919050565b7f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060008201527f657261746f7220616c6c6f776564000000000000000000000000000000000000602082015250565b600061377f602e8361345e565b915061378a82613723565b604082019050919050565b600060208201905081810360008301526137ae81613772565b9050919050565b600081905092915050565b82818337600083830152505050565b60006137db83856137b5565b93506137e88385846137c0565b82840190509392505050565b60006138018284866137cf565b91508190509392505050565b6000819050919050565b6000819050919050565b61383261382d8261380d565b613817565b82525050565b60006138448284613821565b60208201915081905092915050565b7f5369676e617475726520766572696669636174696f6e206661696c6564000000600082015250565b6000613889601d8361345e565b915061389482613853565b602082019050919050565b600060208201905081810360008301526138b88161387c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006138f9826131e6565b9150613904836131e6565b925082821015613917576139166138bf565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061396957607f821691505b6020821081141561397d5761397c613922565b5b50919050565b600061398e826131e6565b9150613999836131e6565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156139ce576139cd6138bf565b5b828201905092915050565b7f736e617073686f74206865696768747320746f6f20636c6f736520696e20457460008201527f68657265756d0000000000000000000000000000000000000000000000000000602082015250565b6000613a3560268361345e565b9150613a40826139d9565b604082019050919050565b60006020820190508181036000830152613a6481613a28565b9050919050565b7f736e617073686f74206865696768747320746f6f20636c6f736520696e204d6160008201527f644e657400000000000000000000000000000000000000000000000000000000602082015250565b6000613ac760248361345e565b9150613ad282613a6b565b604082019050919050565b60006020820190508181036000830152613af681613aba565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000613b37826131e6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613b6a57613b696138bf565b5b600182019050919050565b6000606082019050613b8a6000830186613259565b613b976020830185613259565b613ba460408301846131bc565b949350505050565b7f52436c61696d735061727365724c6962726172793a204f766572666c6f77206f60008201527f6e2074686520646174614f666673657420706172616d65746572000000000000602082015250565b6000613c08603a8361345e565b9150613c1382613bac565b604082019050919050565b60006020820190508181036000830152613c3781613bfb565b9050919050565b7f52436572745061727365724c6962726172793a204e6f7420656e6f756768206260008201527f7974657320746f20657874726163740000000000000000000000000000000000602082015250565b6000613c9a602f8361345e565b9150613ca582613c3e565b604082019050919050565b60006020820190508181036000830152613cc981613c8d565b9050919050565b613cd9816132a3565b82525050565b6000604082019050613cf46000830185613cd0565b613d0160208301846133db565b9392505050565b7f426173655061727365724c6962726172793a20416e206f766572666c6f77206860008201527f617070656e6564207769746820746865206f666673657420706172616d65746560208201527f7221000000000000000000000000000000000000000000000000000000000000604082015250565b6000613d8a60428361345e565b9150613d9582613d08565b606082019050919050565b60006020820190508181036000830152613db981613d7d565b9050919050565b7f426173655061727365724c6962726172793a20547279696e6720746f2072656160008201527f6420616e206f6666736574206f7574206f6620626f756e646172696573210000602082015250565b6000613e1c603e8361345e565b9150613e2782613dc0565b604082019050919050565b60006020820190508181036000830152613e4b81613e0f565b9050919050565b7f496e76616c6964206861736820706f696e743a206e6f74206f6e20656c6c697060008201527f7469632063757276650000000000000000000000000000000000000000000000602082015250565b6000613eae60298361345e565b9150613eb982613e52565b604082019050919050565b60006020820190508181036000830152613edd81613ea1565b9050919050565b7f44616e6765726f7573206861736820706f696e743a206e6f742073616665206660008201527f6f72207369676e696e6700000000000000000000000000000000000000000000602082015250565b6000613f40602a8361345e565b9150613f4b82613ee4565b604082019050919050565b60006020820190508181036000830152613f6f81613f33565b9050919050565b7f656c6c69707469632063757276652070616972696e67206661696c6564000000600082015250565b6000613fac601d8361345e565b9150613fb782613f76565b602082019050919050565b60006020820190508181036000830152613fdb81613f9f565b9050919050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b61402961402482613fe2565b61400e565b82525050565b600061403a82613320565b61404481856137b5565b935061405481856020860161333c565b80840191505092915050565b600061406c8285614018565b60018201915061407c828461402f565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000819050919050565b60006140cc826140b7565b91506140d7836140b7565b9250827f800000000000000000000000000000000000000000000000000000000000000001821260008412151615614112576141116138bf565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01821360008412161561414a576141496138bf565b5b828203905092915050565b6000614160826140b7565b915061416b836140b7565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156141aa576141a96138bf565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156141e7576141e66138bf565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615614224576142236138bf565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615614261576142606138bf565b5b828202905092915050565b6000614277826140b7565b9150614282836140b7565b92508261429257614291614088565b5b600160000383147f8000000000000000000000000000000000000000000000000000000000000000831416156142cb576142ca6138bf565b5b828205905092915050565b60006142e1826140b7565b91506142ec836140b7565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03831360008312151615614327576143266138bf565b5b817f800000000000000000000000000000000000000000000000000000000000000003831260008312161561435f5761435e6138bf565b5b828201905092915050565b7f496e76616c696420706f696e743a206e6f74206f6e20656c6c6970746963206360008201527f7572766500000000000000000000000000000000000000000000000000000000602082015250565b60006143c660248361345e565b91506143d18261436a565b604082019050919050565b600060208201905081810360008301526143f5816143b9565b9050919050565b7f656c6c6970746963206375727665206164646974696f6e206661696c65640000600082015250565b6000614432601e8361345e565b915061443d826143fc565b602082019050919050565b6000602082019050818103600083015261446181614425565b9050919050565b7f6d6f64756c6172206578706f6e656e74696174696f6e2066616c696564000000600082015250565b600061449e601d8361345e565b91506144a982614468565b602082019050919050565b600060208201905081810360008301526144cd81614491565b905091905056fea2646970667358221220fff4067dd4da46a07d975e920da4befeef6e1832ef12203effe82d34f751e75964736f6c634300080b0033",
=======
	Bin: "0x60806040523480156200001157600080fd5b506000620000296200004360201b620010741760201c565b60010180546001600160a01b031916331790555062000067565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90565b6134a980620000776000396000f3fe608060405234801561001057600080fd5b506004361061016c5760003560e01c8063900cf0cf116100cd578063dc97805911610081578063e380b22811610066578063e380b228146102db578063e4b82105146102ee578063fad8b32a1461031557600080fd5b8063dc978059146102b5578063e348da13146102c857600080fd5b8063ab033ea9116100b2578063ab033ea91461027b578063be9a655514610171578063c17cb9ee1461028e57600080fd5b8063900cf0cf1461025257806399e33e3d1461026857600080fd5b806320d9a246116101245780634f4ea614116101095780634f4ea6141461022457806360536172146102375780636372fe511461023f57600080fd5b806320d9a246146101f157806335b6c6321461020457600080fd5b80630ceb2cef116101555780630ceb2cef146101a35780630d81dce4146101b657806319f74669146101c957600080fd5b806307da68f51461017157806308ca1f251461017b575b600080fd5b610179610328565b005b61018e610189366004612f8f565b6103f1565b60405190151581526020015b60405180910390f35b6101796101b1366004612ffb565b6104d6565b6101796101c4366004612ffb565b6105c3565b6101dc6101d7366004612ffb565b6106a9565b60405163ffffffff909116815260200161019a565b6101796101ff366004613036565b6106e9565b610217610212366004612ffb565b610827565b60405161019a9190613083565b6101dc610232366004612ffb565b610832565b610179610876565b61021761024d366004612ffb565b61099b565b61025a6109a6565b60405190815260200161019a565b610179610276366004612ffb565b6109d5565b610179610289366004613036565b610abb565b7fd02b08f6836233a79224d6de3c3df078574b0f84d75d2a48f85a5a3cacc729185461025a565b6101796102c3366004613036565b610c0a565b6101796102d6366004613036565b610d59565b6101dc6102e9366004612ffb565b610eca565b7fd02b08f6836233a79224d6de3c3df078574b0f84d75d2a48f85a5a3cacc729175461025a565b610179610323366004613036565b610f06565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a602081905260409091205460ff166103ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f776564000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b50565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020819052604082205460ff1680610434575061043433611098565b6104c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603f60248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f7220667560448201527f6c6c79207374616b6564207061727469636970616e747320616c6c6f7765640060648201526084016103e5565b6104cc8686868661117a565b9695505050505050565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a602081905260409091205460ff16610597576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f776564000000000000000000000000000000000000000000000000000060648201526084016103e5565b6105bf827fa53f90683b42ecb37674e5c8c5c9cabf849818fdc2fdfb57bbe3c738f7b50d0f55565b5050565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a602081905260409091205460ff16610684576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f776564000000000000000000000000000000000000000000000000000060648201526084016103e5565b507fd02b08f6836233a79224d6de3c3df078574b0f84d75d2a48f85a5a3cacc7291755565b60008181527fd02b08f6836233a79224d6de3c3df078574b0f84d75d2a48f85a5a3cacc729156020526040812054610100900463ffffffff165b92915050565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a602081905260409091205460ff166107aa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f776564000000000000000000000000000000000000000000000000000060648201526084016103e5565b73ffffffffffffffffffffffffffffffffffffffff82166105bf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f6e696c207265676973747279206164647265737300000000000000000000000060448201526064016103e5565b60606106e382611946565b60008181527fd02b08f6836233a79224d6de3c3df078574b0f84d75d2a48f85a5a3cacc729156020526040812060030154640100000000900463ffffffff166106e3565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520c547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff16331461095e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f776e657273686970206e6f7420677260448201527f616e74656400000000000000000000000000000000000000000000000000000060648201526084016103e5565b6002810180547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169091556001909101805490911633179055565b60606106e382611a12565b60006109d07fa53f90683b42ecb37674e5c8c5c9cabf849818fdc2fdfb57bbe3c738f7b50d0f5490565b905090565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a602081905260409091205460ff16610a96576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f776564000000000000000000000000000000000000000000000000000060648201526084016103e5565b507fd02b08f6836233a79224d6de3c3df078574b0f84d75d2a48f85a5a3cacc7291855565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff163314610ba3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60448201527f6c6f77656400000000000000000000000000000000000000000000000000000060648201526084016103e5565b507f31434318735a8e6385da596be365952169e52986860b974818986b522d23520d80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff163314610cf2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60448201527f6c6f77656400000000000000000000000000000000000000000000000000000060648201526084016103e5565b507f31434318735a8e6385da596be365952169e52986860b974818986b522d23520c80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff16331480610dcf57503360009081526020829052604090205460ff165b610e5b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060448201527f657261746f7220616c6c6f77656400000000000000000000000000000000000060648201526084016103e5565b5073ffffffffffffffffffffffffffffffffffffffff1660009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b60008181527fd02b08f6836233a79224d6de3c3df078574b0f84d75d2a48f85a5a3cacc72915602052604081206003015463ffffffff166106e3565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff16331480610f7c57503360009081526020829052604090205460ff165b611008576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060448201527f657261746f7220616c6c6f77656400000000000000000000000000000000000060648201526084016103e5565b5073ffffffffffffffffffffffffffffffffffffffff1660009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90565b73ffffffffffffffffffffffffffffffffffffffff811660009081527f310970b1d84cbb8af371a12019b396e9511a9b44411c1dabeec3e3d59d9a50f860205260408120547f310970b1d84cbb8af371a12019b396e9511a9b44411c1dabeec3e3d59d9a50f69060ff16801561117357507f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237ef5473ffffffffffffffffffffffffffffffffffffffff841660009081527f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f8602052604090205410155b9392505050565b60007fa53f90683b42ecb37674e5c8c5c9cabf849818fdc2fdfb57bbe3c738f7b50d0e7fd02b08f6836233a79224d6de3c3df078574b0f84d75d2a48f85a5a3cacc729156111c6612e35565b6111ce612e53565b61120d89898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509250611a57915050565b604051919350915060009061122590899089906130d4565b6040805191829003822060208301520160405160208183030381529060405290506000611253828486611c1b565b9050806112bc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5369676e617475726520766572696669636174696f6e206661696c656400000060448201526064016103e5565b60006113008a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525060089250611dca915050565b905060006113468b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250600c9250611dca915050565b6001808a0154600090815260208a90526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016821781559192506113929082018d8d612e71565b506113a1600282018f8f612e71565b5060038101805463ffffffff848116640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000090921643821617919091179091558154908416610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000ff909116178155600189810154111561172d57600088600001600060018c6001015461143b9190613113565b81526020808201929092526040908101600020815160c081018352815460ff811615158252610100900463ffffffff169381019390935260018101805491928401916114869061312a565b80601f01602080910402602001604051908101604052809291908181526020018280546114b29061312a565b80156114ff5780601f106114d4576101008083540402835291602001916114ff565b820191906000526020600020905b8154815290600101906020018083116114e257829003601f168201915b505050505081526020016002820180546115189061312a565b80601f01602080910402602001604051908101604052809291908181526020018280546115449061312a565b80156115915780601f1061156657610100808354040283529160200191611591565b820191906000526020600020905b81548152906001019060200180831161157457829003601f168201915b50505091835250506003919091015463ffffffff808216602084015264010000000090910416604090910152805190915015806115e757508860020154816080015163ffffffff166115e39190613178565b4310155b611673576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f736e617073686f74206865696768747320746f6f20636c6f736520696e20457460448201527f68657265756d000000000000000000000000000000000000000000000000000060648201526084016103e5565b805115806116a0575088600301548160a0015163ffffffff166116969190613178565b8363ffffffff1610155b61172b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f736e617073686f74206865696768747320746f6f20636c6f736520696e204d6160448201527f644e65740000000000000000000000000000000000000000000000000000000060648201526084016103e5565b505b7f310970b1d84cbb8af371a12019b396e9511a9b44411c1dabeec3e3d59d9a50f67f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237ef60005b825481101561188b5782600001818154811061179057611790613190565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff163314156118255761181f8360000182815481106117d1576117d1613190565b6000918252602090912001546004840154600385015473ffffffffffffffffffffffffffffffffffffffff9092169161180a9190613178565b60018f015461181a906002613178565b611e8f565b50611879565b61187783600001828154811061183d5761183d613190565b600091825260209091200154600384015460018f015473ffffffffffffffffffffffffffffffffffffffff9092169161181a906002613178565b505b80611883816131bf565b915050611772565b5060018a015460009060ff16156118a0575060015b60018b810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690558c01546040805163ffffffff89811682528816602082015260008183015290513392917f6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a919081900360600190a360018c01805490600061192b836131bf565b90915550909c50505050505050505050505050949350505050565b60008181527fd02b08f6836233a79224d6de3c3df078574b0f84d75d2a48f85a5a3cacc729156020819052604090912060028101805460609392919061198b9061312a565b80601f01602080910402602001604051908101604052809291908181526020018280546119b79061312a565b8015611a045780601f106119d957610100808354040283529160200191611a04565b820191906000526020600020905b8154815290600101906020018083116119e757829003601f168201915b505050505092505050919050565b60008181527fd02b08f6836233a79224d6de3c3df078574b0f84d75d2a48f85a5a3cacc729156020819052604090912060018101805460609392919061198b9061312a565b611a5f612e35565b611a67612e53565b82611a7360c082613178565b11611b00576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f52436c61696d735061727365724c6962726172793a204f766572666c6f77206f60448201527f6e2074686520646174614f666673657420706172616d6574657200000000000060648201526084016103e5565b611b0b60c084613178565b84511015611b9b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f52436572745061727365724c6962726172793a204e6f7420656e6f756768206260448201527f7974657320746f2065787472616374000000000000000000000000000000000060648201526084016103e5565b611baf84611baa856000613178565b611ff2565b8252611bc084611baa856020613178565b6020830152611bd484611baa856040613178565b6040830152611be884611baa856060613178565b6060830152611bfc84611baa856080613178565b8152611c0d84611baa8560a0613178565b602082015290939092509050565b6000611c25612e53565b611c2e85612156565b9050611dc160405180610180016040528086600060028110611c5257611c52613190565b6020020151815260200186600160028110611c6f57611c6f613190565b602002015181526020017f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed81526020017f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec81526020017f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d815260200183600060028110611d2457611d24613190565b6020020151815260200183600160028110611d4157611d41613190565b6020020151815260200185600060048110611d5e57611d5e613190565b6020020151815260200185600160048110611d7b57611d7b613190565b6020020151815260200185600260048110611d9857611d98613190565b6020020151815260200185600360048110611db557611db5613190565b602002015190526123af565b95945050505050565b600082611dd8836003613178565b81518110611de857611de8613190565b016020015160f81c905082611dfe836002613178565b81518110611e0e57611e0e613190565b60209101015160f81c60089190911b64ffffffff00161782611e31836001613178565b81518110611e4157611e41613190565b602001015160f81c60f81b60f81c60ff1660088263ffffffff16901b179050828281518110611e7257611e72613190565b60209101015160f81c60089190911b64ffffffff00161792915050565b6000807f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237ef73ffffffffffffffffffffffffffffffffffffffff86811660009081526009830160209081526040808320815180830183528a81528084018a815260058301805460018082018355918852959096208251600290960201948555519390940192909255600885015490517f40c10f19000000000000000000000000000000000000000000000000000000008152306004820152602481018a90529495509093919216906340c10f1990604401600060405180830381600087803b158015611f7957600080fd5b505af1158015611f8d573d6000803e3d6000fd5b505050508673ffffffffffffffffffffffffffffffffffffffff167f28dc9c0ffa672df041cad84edbee41508284600c9394bda0f8586d012c5e091587604051611fd991815260200190565b60405180910390a2506001015460ff1695945050505050565b60008161200081601f613178565b116120b3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604260248201527f426173655061727365724c6962726172793a20416e206f766572666c6f77206860448201527f617070656e6564207769746820746865206f666673657420706172616d65746560648201527f7221000000000000000000000000000000000000000000000000000000000000608482015260a4016103e5565b6120be82601f613178565b83511161214d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603e60248201527f426173655061727365724c6962726172793a20547279696e6720746f2072656160448201527f6420616e206f6666736574206f7574206f6620626f756e64617269657321000060648201526084016103e5565b50016020015190565b61215e612e53565b600061218b83827f010000000000000000000000000000000000000000000000000000000000000061245a565b905060006121da847f02000000000000000000000000000000000000000000000000000000000000007f030000000000000000000000000000000000000000000000000000000000000061245a565b905060006121e783612563565b905060006121f483612563565b905061227a60405180608001604052808460006002811061221757612217613190565b602002015181526020018460016002811061223457612234613190565b602002015181526020018360006002811061225157612251613190565b602002015181526020018360016002811061226e5761226e613190565b60200201519052612ab7565b945061228585612b5a565b612311576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f496e76616c6964206861736820706f696e743a206e6f74206f6e20656c6c697060448201527f746963206375727665000000000000000000000000000000000000000000000060648201526084016103e5565b61231a85612bbe565b6123a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f44616e6765726f7573206861736820706f696e743a206e6f742073616665206660448201527f6f72207369676e696e670000000000000000000000000000000000000000000060648201526084016103e5565b50505050919050565b60006123b9612f13565b60006020826101808660087ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa90508061244f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f656c6c69707469632063757276652070616972696e67206661696c656400000060448201526064016103e5565b505160011492915050565b60008083856040516020016124709291906131f8565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815290829052805160209182012092506000916124ba9186918991016131f8565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052805160209091012090507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47817f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd477f0e0a77c19a07df2f666ea36f7879462c0a78eb28f5c70b3dd35d438dc58f0d9d8509089695505050505050565b61256b612e53565b600080807f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4785860992507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476004840891507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4782840990506125eb81612bea565b905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4783840990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4783820990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47848509935060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478577b3c4d79d41a91759a9e4c7e359b6b89eaec68e62effffffd0990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4783820990506126d081612c37565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd477759e26bcea0d48bacd4f263f1acdb5c4f5763473177fffffe8208905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760018308905061274281612c37565b905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47847f2042def740cbc01bd03583cf0100e593ba56470b9af68708d2c05d64905353850990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4785820990506127bb81612c37565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760018208905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4784850990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4784820990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47600382089050600061286482612c70565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4784850991507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4784830991507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760038308915060006128e483612c70565b9050600060046128f5600384613240565b612900600186613240565b61290a91906132b4565b6129149190613370565b61291f9060016133ff565b905060008160011415612933575086612946565b8160021415612943575085612946565b50845b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4781820994507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4781860994507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476003860894506129c285612cef565b945060006129cf8f612d3c565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478187099550612a14604051806040016040528084815260200188815250612b5a565b612a9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f496e76616c696420706f696e743a206e6f74206f6e20656c6c6970746963206360448201527f757276650000000000000000000000000000000000000000000000000000000060648201526084016103e5565b508c5250505060208901525095979650505050505050565b612abf612e53565b600060408260808560067ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa905080612b54576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f656c6c6970746963206375727665206164646974696f6e206661696c6564000060448201526064016103e5565b50919050565b80516000907f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47906003908290819080098551090860208301517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd479080091492915050565b80516000901580612bd0575081516001145b15612bdd57506000919050565b506001919050565b919050565b60006106e3827f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd457f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47612d8d565b600081612c4657506000919050565b6106e3827f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47613113565b600080612cbe837f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea37f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47612d8d565b90508015612ce6576001612cd582821660026132b4565b612cdf9190613240565b9150612b54565b50600092915050565b60006106e3827f0c19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47612d8d565b60017f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea3821115612be557507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd46919050565b60008060405160208152602080820152602060408201528560608201528460808201528360a082015260208160c08360055afa90519250905080612e2d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f6d6f64756c6172206578706f6e656e74696174696f6e2066616c69656400000060448201526064016103e5565b509392505050565b60405180608001604052806004906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b828054612e7d9061312a565b90600052602060002090601f016020900481019282612e9f5760008555612f03565b82601f10612ed6578280017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00823516178555612f03565b82800160010185558215612f03579182015b82811115612f03578235825591602001919060010190612ee8565b50612f0f929150612f31565b5090565b60405180602001604052806001906020820280368337509192915050565b5b80821115612f0f5760008155600101612f32565b60008083601f840112612f5857600080fd5b50813567ffffffffffffffff811115612f7057600080fd5b602083019150836020828501011115612f8857600080fd5b9250929050565b60008060008060408587031215612fa557600080fd5b843567ffffffffffffffff80821115612fbd57600080fd5b612fc988838901612f46565b90965094506020870135915080821115612fe257600080fd5b50612fef87828801612f46565b95989497509550505050565b60006020828403121561300d57600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff811681146103ee57600080fd5b60006020828403121561304857600080fd5b813561117381613014565b60005b8381101561306e578181015183820152602001613056565b8381111561307d576000848401525b50505050565b60208152600082518060208401526130a2816040850160208701613053565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b8183823760009101908152919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015613125576131256130e4565b500390565b600181811c9082168061313e57607f821691505b60208210811415612b54577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000821982111561318b5761318b6130e4565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156131f1576131f16130e4565b5060010190565b7fff000000000000000000000000000000000000000000000000000000000000008316815260008251613232816001850160208701613053565b919091016001019392505050565b6000808312837f80000000000000000000000000000000000000000000000000000000000000000183128115161561327a5761327a6130e4565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0183138116156132ae576132ae6130e4565b50500390565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6000841360008413858304851182821616156132f5576132f56130e4565b7f80000000000000000000000000000000000000000000000000000000000000006000871286820588128184161615613330576133306130e4565b6000871292508782058712848416161561334c5761334c6130e4565b87850587128184161615613362576133626130e4565b505050929093029392505050565b6000826133a6577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83147f8000000000000000000000000000000000000000000000000000000000000000831416156133fa576133fa6130e4565b500590565b6000808212827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03841381151615613439576134396130e4565b827f800000000000000000000000000000000000000000000000000000000000000003841281161561346d5761346d6130e4565b5050019056fea2646970667358221220c19e49b8324f9110fcc1e046110d4f73e158f3b216c6f6b570dfed32415f48b664736f6c634300080b0033",
>>>>>>> Stashed changes
}

// SnapshotsFacetABI is the input ABI used to generate the binding from.
// Deprecated: Use SnapshotsFacetMetaData.ABI instead.
var SnapshotsFacetABI = SnapshotsFacetMetaData.ABI

// SnapshotsFacetBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SnapshotsFacetMetaData.Bin instead.
var SnapshotsFacetBin = SnapshotsFacetMetaData.Bin

// DeploySnapshotsFacet deploys a new Ethereum contract, binding an instance of SnapshotsFacet to it.
func DeploySnapshotsFacet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SnapshotsFacet, error) {
	parsed, err := SnapshotsFacetMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SnapshotsFacetBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SnapshotsFacet{SnapshotsFacetCaller: SnapshotsFacetCaller{contract: contract}, SnapshotsFacetTransactor: SnapshotsFacetTransactor{contract: contract}, SnapshotsFacetFilterer: SnapshotsFacetFilterer{contract: contract}}, nil
}

// SnapshotsFacet is an auto generated Go binding around an Ethereum contract.
type SnapshotsFacet struct {
	SnapshotsFacetCaller     // Read-only binding to the contract
	SnapshotsFacetTransactor // Write-only binding to the contract
	SnapshotsFacetFilterer   // Log filterer for contract events
}

// SnapshotsFacetCaller is an auto generated read-only Go binding around an Ethereum contract.
type SnapshotsFacetCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SnapshotsFacetTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SnapshotsFacetTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SnapshotsFacetFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SnapshotsFacetFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SnapshotsFacetSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SnapshotsFacetSession struct {
	Contract     *SnapshotsFacet   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SnapshotsFacetCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SnapshotsFacetCallerSession struct {
	Contract *SnapshotsFacetCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// SnapshotsFacetTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SnapshotsFacetTransactorSession struct {
	Contract     *SnapshotsFacetTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// SnapshotsFacetRaw is an auto generated low-level Go binding around an Ethereum contract.
type SnapshotsFacetRaw struct {
	Contract *SnapshotsFacet // Generic contract binding to access the raw methods on
}

// SnapshotsFacetCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SnapshotsFacetCallerRaw struct {
	Contract *SnapshotsFacetCaller // Generic read-only contract binding to access the raw methods on
}

// SnapshotsFacetTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SnapshotsFacetTransactorRaw struct {
	Contract *SnapshotsFacetTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSnapshotsFacet creates a new instance of SnapshotsFacet, bound to a specific deployed contract.
func NewSnapshotsFacet(address common.Address, backend bind.ContractBackend) (*SnapshotsFacet, error) {
	contract, err := bindSnapshotsFacet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SnapshotsFacet{SnapshotsFacetCaller: SnapshotsFacetCaller{contract: contract}, SnapshotsFacetTransactor: SnapshotsFacetTransactor{contract: contract}, SnapshotsFacetFilterer: SnapshotsFacetFilterer{contract: contract}}, nil
}

// NewSnapshotsFacetCaller creates a new read-only instance of SnapshotsFacet, bound to a specific deployed contract.
func NewSnapshotsFacetCaller(address common.Address, caller bind.ContractCaller) (*SnapshotsFacetCaller, error) {
	contract, err := bindSnapshotsFacet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SnapshotsFacetCaller{contract: contract}, nil
}

// NewSnapshotsFacetTransactor creates a new write-only instance of SnapshotsFacet, bound to a specific deployed contract.
func NewSnapshotsFacetTransactor(address common.Address, transactor bind.ContractTransactor) (*SnapshotsFacetTransactor, error) {
	contract, err := bindSnapshotsFacet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SnapshotsFacetTransactor{contract: contract}, nil
}

// NewSnapshotsFacetFilterer creates a new log filterer instance of SnapshotsFacet, bound to a specific deployed contract.
func NewSnapshotsFacetFilterer(address common.Address, filterer bind.ContractFilterer) (*SnapshotsFacetFilterer, error) {
	contract, err := bindSnapshotsFacet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SnapshotsFacetFilterer{contract: contract}, nil
}

// bindSnapshotsFacet binds a generic wrapper to an already deployed contract.
func bindSnapshotsFacet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SnapshotsFacetABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SnapshotsFacet *SnapshotsFacetRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SnapshotsFacet.Contract.SnapshotsFacetCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SnapshotsFacet *SnapshotsFacetRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.SnapshotsFacetTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SnapshotsFacet *SnapshotsFacetRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.SnapshotsFacetTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SnapshotsFacet *SnapshotsFacetCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SnapshotsFacet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SnapshotsFacet *SnapshotsFacetTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SnapshotsFacet *SnapshotsFacetTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.contract.Transact(opts, method, params...)
}

// Epoch is a free data retrieval call binding the contract method 0x900cf0cf.
//
// Solidity: function epoch() view returns(uint256)
func (_SnapshotsFacet *SnapshotsFacetCaller) Epoch(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SnapshotsFacet.contract.Call(opts, &out, "epoch")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Epoch is a free data retrieval call binding the contract method 0x900cf0cf.
//
// Solidity: function epoch() view returns(uint256)
func (_SnapshotsFacet *SnapshotsFacetSession) Epoch() (*big.Int, error) {
	return _SnapshotsFacet.Contract.Epoch(&_SnapshotsFacet.CallOpts)
}

// Epoch is a free data retrieval call binding the contract method 0x900cf0cf.
//
// Solidity: function epoch() view returns(uint256)
func (_SnapshotsFacet *SnapshotsFacetCallerSession) Epoch() (*big.Int, error) {
	return _SnapshotsFacet.Contract.Epoch(&_SnapshotsFacet.CallOpts)
}

// GetChainIdFromSnapshot is a free data retrieval call binding the contract method 0x19f74669.
//
// Solidity: function getChainIdFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_SnapshotsFacet *SnapshotsFacetCaller) GetChainIdFromSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) (uint32, error) {
	var out []interface{}
	err := _SnapshotsFacet.contract.Call(opts, &out, "getChainIdFromSnapshot", snapshotNumber)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetChainIdFromSnapshot is a free data retrieval call binding the contract method 0x19f74669.
//
// Solidity: function getChainIdFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_SnapshotsFacet *SnapshotsFacetSession) GetChainIdFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _SnapshotsFacet.Contract.GetChainIdFromSnapshot(&_SnapshotsFacet.CallOpts, snapshotNumber)
}

// GetChainIdFromSnapshot is a free data retrieval call binding the contract method 0x19f74669.
//
// Solidity: function getChainIdFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_SnapshotsFacet *SnapshotsFacetCallerSession) GetChainIdFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _SnapshotsFacet.Contract.GetChainIdFromSnapshot(&_SnapshotsFacet.CallOpts, snapshotNumber)
}

// GetHeightFromSnapshot is a free data retrieval call binding the contract method 0xe380b228.
//
// Solidity: function getHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_SnapshotsFacet *SnapshotsFacetCaller) GetHeightFromSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) (uint32, error) {
	var out []interface{}
	err := _SnapshotsFacet.contract.Call(opts, &out, "getHeightFromSnapshot", snapshotNumber)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetHeightFromSnapshot is a free data retrieval call binding the contract method 0xe380b228.
//
// Solidity: function getHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_SnapshotsFacet *SnapshotsFacetSession) GetHeightFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _SnapshotsFacet.Contract.GetHeightFromSnapshot(&_SnapshotsFacet.CallOpts, snapshotNumber)
}

// GetHeightFromSnapshot is a free data retrieval call binding the contract method 0xe380b228.
//
// Solidity: function getHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_SnapshotsFacet *SnapshotsFacetCallerSession) GetHeightFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _SnapshotsFacet.Contract.GetHeightFromSnapshot(&_SnapshotsFacet.CallOpts, snapshotNumber)
}

// GetMadHeightFromSnapshot is a free data retrieval call binding the contract method 0x4f4ea614.
//
// Solidity: function getMadHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_SnapshotsFacet *SnapshotsFacetCaller) GetMadHeightFromSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) (uint32, error) {
	var out []interface{}
	err := _SnapshotsFacet.contract.Call(opts, &out, "getMadHeightFromSnapshot", snapshotNumber)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetMadHeightFromSnapshot is a free data retrieval call binding the contract method 0x4f4ea614.
//
// Solidity: function getMadHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_SnapshotsFacet *SnapshotsFacetSession) GetMadHeightFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _SnapshotsFacet.Contract.GetMadHeightFromSnapshot(&_SnapshotsFacet.CallOpts, snapshotNumber)
}

// GetMadHeightFromSnapshot is a free data retrieval call binding the contract method 0x4f4ea614.
//
// Solidity: function getMadHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_SnapshotsFacet *SnapshotsFacetCallerSession) GetMadHeightFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _SnapshotsFacet.Contract.GetMadHeightFromSnapshot(&_SnapshotsFacet.CallOpts, snapshotNumber)
}

// GetRawBlockClaimsSnapshot is a free data retrieval call binding the contract method 0x6372fe51.
//
// Solidity: function getRawBlockClaimsSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_SnapshotsFacet *SnapshotsFacetCaller) GetRawBlockClaimsSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) ([]byte, error) {
	var out []interface{}
	err := _SnapshotsFacet.contract.Call(opts, &out, "getRawBlockClaimsSnapshot", snapshotNumber)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetRawBlockClaimsSnapshot is a free data retrieval call binding the contract method 0x6372fe51.
//
// Solidity: function getRawBlockClaimsSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_SnapshotsFacet *SnapshotsFacetSession) GetRawBlockClaimsSnapshot(snapshotNumber *big.Int) ([]byte, error) {
	return _SnapshotsFacet.Contract.GetRawBlockClaimsSnapshot(&_SnapshotsFacet.CallOpts, snapshotNumber)
}

// GetRawBlockClaimsSnapshot is a free data retrieval call binding the contract method 0x6372fe51.
//
// Solidity: function getRawBlockClaimsSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_SnapshotsFacet *SnapshotsFacetCallerSession) GetRawBlockClaimsSnapshot(snapshotNumber *big.Int) ([]byte, error) {
	return _SnapshotsFacet.Contract.GetRawBlockClaimsSnapshot(&_SnapshotsFacet.CallOpts, snapshotNumber)
}

// GetRawSignatureSnapshot is a free data retrieval call binding the contract method 0x35b6c632.
//
// Solidity: function getRawSignatureSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_SnapshotsFacet *SnapshotsFacetCaller) GetRawSignatureSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) ([]byte, error) {
	var out []interface{}
	err := _SnapshotsFacet.contract.Call(opts, &out, "getRawSignatureSnapshot", snapshotNumber)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetRawSignatureSnapshot is a free data retrieval call binding the contract method 0x35b6c632.
//
// Solidity: function getRawSignatureSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_SnapshotsFacet *SnapshotsFacetSession) GetRawSignatureSnapshot(snapshotNumber *big.Int) ([]byte, error) {
	return _SnapshotsFacet.Contract.GetRawSignatureSnapshot(&_SnapshotsFacet.CallOpts, snapshotNumber)
}

// GetRawSignatureSnapshot is a free data retrieval call binding the contract method 0x35b6c632.
//
// Solidity: function getRawSignatureSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_SnapshotsFacet *SnapshotsFacetCallerSession) GetRawSignatureSnapshot(snapshotNumber *big.Int) ([]byte, error) {
	return _SnapshotsFacet.Contract.GetRawSignatureSnapshot(&_SnapshotsFacet.CallOpts, snapshotNumber)
}

// MinEthSnapshotSize is a free data retrieval call binding the contract method 0xe4b82105.
//
// Solidity: function minEthSnapshotSize() view returns(uint256)
func (_SnapshotsFacet *SnapshotsFacetCaller) MinEthSnapshotSize(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SnapshotsFacet.contract.Call(opts, &out, "minEthSnapshotSize")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinEthSnapshotSize is a free data retrieval call binding the contract method 0xe4b82105.
//
// Solidity: function minEthSnapshotSize() view returns(uint256)
func (_SnapshotsFacet *SnapshotsFacetSession) MinEthSnapshotSize() (*big.Int, error) {
	return _SnapshotsFacet.Contract.MinEthSnapshotSize(&_SnapshotsFacet.CallOpts)
}

// MinEthSnapshotSize is a free data retrieval call binding the contract method 0xe4b82105.
//
// Solidity: function minEthSnapshotSize() view returns(uint256)
func (_SnapshotsFacet *SnapshotsFacetCallerSession) MinEthSnapshotSize() (*big.Int, error) {
	return _SnapshotsFacet.Contract.MinEthSnapshotSize(&_SnapshotsFacet.CallOpts)
}

// MinMadSnapshotSize is a free data retrieval call binding the contract method 0xc17cb9ee.
//
// Solidity: function minMadSnapshotSize() view returns(uint256)
func (_SnapshotsFacet *SnapshotsFacetCaller) MinMadSnapshotSize(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SnapshotsFacet.contract.Call(opts, &out, "minMadSnapshotSize")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinMadSnapshotSize is a free data retrieval call binding the contract method 0xc17cb9ee.
//
// Solidity: function minMadSnapshotSize() view returns(uint256)
func (_SnapshotsFacet *SnapshotsFacetSession) MinMadSnapshotSize() (*big.Int, error) {
	return _SnapshotsFacet.Contract.MinMadSnapshotSize(&_SnapshotsFacet.CallOpts)
}

// MinMadSnapshotSize is a free data retrieval call binding the contract method 0xc17cb9ee.
//
// Solidity: function minMadSnapshotSize() view returns(uint256)
func (_SnapshotsFacet *SnapshotsFacetCallerSession) MinMadSnapshotSize() (*big.Int, error) {
	return _SnapshotsFacet.Contract.MinMadSnapshotSize(&_SnapshotsFacet.CallOpts)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactor) GrantOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.contract.Transact(opts, "grantOperator", who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_SnapshotsFacet *SnapshotsFacetSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.GrantOperator(&_SnapshotsFacet.TransactOpts, who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactorSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.GrantOperator(&_SnapshotsFacet.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactor) GrantOwner(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.contract.Transact(opts, "grantOwner", who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_SnapshotsFacet *SnapshotsFacetSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.GrantOwner(&_SnapshotsFacet.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactorSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.GrantOwner(&_SnapshotsFacet.TransactOpts, who)
}

// InitializeSnapshots is a paid mutator transaction binding the contract method 0x20d9a246.
//
// Solidity: function initializeSnapshots(address registry) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactor) InitializeSnapshots(opts *bind.TransactOpts, registry common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.contract.Transact(opts, "initializeSnapshots", registry)
}

// InitializeSnapshots is a paid mutator transaction binding the contract method 0x20d9a246.
//
// Solidity: function initializeSnapshots(address registry) returns()
func (_SnapshotsFacet *SnapshotsFacetSession) InitializeSnapshots(registry common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.InitializeSnapshots(&_SnapshotsFacet.TransactOpts, registry)
}

// InitializeSnapshots is a paid mutator transaction binding the contract method 0x20d9a246.
//
// Solidity: function initializeSnapshots(address registry) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactorSession) InitializeSnapshots(registry common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.InitializeSnapshots(&_SnapshotsFacet.TransactOpts, registry)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactor) RevokeOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.contract.Transact(opts, "revokeOperator", who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_SnapshotsFacet *SnapshotsFacetSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.RevokeOperator(&_SnapshotsFacet.TransactOpts, who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactorSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.RevokeOperator(&_SnapshotsFacet.TransactOpts, who)
}

// SetEpoch is a paid mutator transaction binding the contract method 0x0ceb2cef.
//
// Solidity: function setEpoch(uint256 ns) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactor) SetEpoch(opts *bind.TransactOpts, ns *big.Int) (*types.Transaction, error) {
	return _SnapshotsFacet.contract.Transact(opts, "setEpoch", ns)
}

// SetEpoch is a paid mutator transaction binding the contract method 0x0ceb2cef.
//
// Solidity: function setEpoch(uint256 ns) returns()
func (_SnapshotsFacet *SnapshotsFacetSession) SetEpoch(ns *big.Int) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.SetEpoch(&_SnapshotsFacet.TransactOpts, ns)
}

// SetEpoch is a paid mutator transaction binding the contract method 0x0ceb2cef.
//
// Solidity: function setEpoch(uint256 ns) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactorSession) SetEpoch(ns *big.Int) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.SetEpoch(&_SnapshotsFacet.TransactOpts, ns)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactor) SetGovernance(opts *bind.TransactOpts, governance_ common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.contract.Transact(opts, "setGovernance", governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_SnapshotsFacet *SnapshotsFacetSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.SetGovernance(&_SnapshotsFacet.TransactOpts, governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactorSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.SetGovernance(&_SnapshotsFacet.TransactOpts, governance_)
}

// SetMinEthSnapshotSize is a paid mutator transaction binding the contract method 0x0d81dce4.
//
// Solidity: function setMinEthSnapshotSize(uint256 _minSize) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactor) SetMinEthSnapshotSize(opts *bind.TransactOpts, _minSize *big.Int) (*types.Transaction, error) {
	return _SnapshotsFacet.contract.Transact(opts, "setMinEthSnapshotSize", _minSize)
}

// SetMinEthSnapshotSize is a paid mutator transaction binding the contract method 0x0d81dce4.
//
// Solidity: function setMinEthSnapshotSize(uint256 _minSize) returns()
func (_SnapshotsFacet *SnapshotsFacetSession) SetMinEthSnapshotSize(_minSize *big.Int) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.SetMinEthSnapshotSize(&_SnapshotsFacet.TransactOpts, _minSize)
}

// SetMinEthSnapshotSize is a paid mutator transaction binding the contract method 0x0d81dce4.
//
// Solidity: function setMinEthSnapshotSize(uint256 _minSize) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactorSession) SetMinEthSnapshotSize(_minSize *big.Int) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.SetMinEthSnapshotSize(&_SnapshotsFacet.TransactOpts, _minSize)
}

// SetMinMadSnapshotSize is a paid mutator transaction binding the contract method 0x99e33e3d.
//
// Solidity: function setMinMadSnapshotSize(uint256 _minSize) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactor) SetMinMadSnapshotSize(opts *bind.TransactOpts, _minSize *big.Int) (*types.Transaction, error) {
	return _SnapshotsFacet.contract.Transact(opts, "setMinMadSnapshotSize", _minSize)
}

// SetMinMadSnapshotSize is a paid mutator transaction binding the contract method 0x99e33e3d.
//
// Solidity: function setMinMadSnapshotSize(uint256 _minSize) returns()
func (_SnapshotsFacet *SnapshotsFacetSession) SetMinMadSnapshotSize(_minSize *big.Int) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.SetMinMadSnapshotSize(&_SnapshotsFacet.TransactOpts, _minSize)
}

// SetMinMadSnapshotSize is a paid mutator transaction binding the contract method 0x99e33e3d.
//
// Solidity: function setMinMadSnapshotSize(uint256 _minSize) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactorSession) SetMinMadSnapshotSize(_minSize *big.Int) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.SetMinMadSnapshotSize(&_SnapshotsFacet.TransactOpts, _minSize)
}

// Snapshot is a paid mutator transaction binding the contract method 0x08ca1f25.
//
// Solidity: function snapshot(bytes _signatureGroup, bytes _bclaims) returns(bool)
func (_SnapshotsFacet *SnapshotsFacetTransactor) Snapshot(opts *bind.TransactOpts, _signatureGroup []byte, _bclaims []byte) (*types.Transaction, error) {
	return _SnapshotsFacet.contract.Transact(opts, "snapshot", _signatureGroup, _bclaims)
}

// Snapshot is a paid mutator transaction binding the contract method 0x08ca1f25.
//
// Solidity: function snapshot(bytes _signatureGroup, bytes _bclaims) returns(bool)
func (_SnapshotsFacet *SnapshotsFacetSession) Snapshot(_signatureGroup []byte, _bclaims []byte) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.Snapshot(&_SnapshotsFacet.TransactOpts, _signatureGroup, _bclaims)
}

// Snapshot is a paid mutator transaction binding the contract method 0x08ca1f25.
//
// Solidity: function snapshot(bytes _signatureGroup, bytes _bclaims) returns(bool)
func (_SnapshotsFacet *SnapshotsFacetTransactorSession) Snapshot(_signatureGroup []byte, _bclaims []byte) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.Snapshot(&_SnapshotsFacet.TransactOpts, _signatureGroup, _bclaims)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_SnapshotsFacet *SnapshotsFacetTransactor) Start(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SnapshotsFacet.contract.Transact(opts, "start")
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_SnapshotsFacet *SnapshotsFacetSession) Start() (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.Start(&_SnapshotsFacet.TransactOpts)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_SnapshotsFacet *SnapshotsFacetTransactorSession) Start() (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.Start(&_SnapshotsFacet.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_SnapshotsFacet *SnapshotsFacetTransactor) Stop(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SnapshotsFacet.contract.Transact(opts, "stop")
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_SnapshotsFacet *SnapshotsFacetSession) Stop() (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.Stop(&_SnapshotsFacet.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_SnapshotsFacet *SnapshotsFacetTransactorSession) Stop() (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.Stop(&_SnapshotsFacet.TransactOpts)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_SnapshotsFacet *SnapshotsFacetTransactor) TakeOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SnapshotsFacet.contract.Transact(opts, "takeOwnership")
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_SnapshotsFacet *SnapshotsFacetSession) TakeOwnership() (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.TakeOwnership(&_SnapshotsFacet.TransactOpts)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_SnapshotsFacet *SnapshotsFacetTransactorSession) TakeOwnership() (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.TakeOwnership(&_SnapshotsFacet.TransactOpts)
}

// SnapshotsFacetSnapshotTakenIterator is returned from FilterSnapshotTaken and is used to iterate over the raw logs and unpacked data for SnapshotTaken events raised by the SnapshotsFacet contract.
type SnapshotsFacetSnapshotTakenIterator struct {
	Event *SnapshotsFacetSnapshotTaken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SnapshotsFacetSnapshotTakenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SnapshotsFacetSnapshotTaken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SnapshotsFacetSnapshotTaken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SnapshotsFacetSnapshotTakenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SnapshotsFacetSnapshotTakenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SnapshotsFacetSnapshotTaken represents a SnapshotTaken event raised by the SnapshotsFacet contract.
type SnapshotsFacetSnapshotTaken struct {
	ChainId        uint32
	Epoch          *big.Int
	Height         uint32
	Validator      common.Address
	StartingETHDKG bool
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterSnapshotTaken is a free log retrieval operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_SnapshotsFacet *SnapshotsFacetFilterer) FilterSnapshotTaken(opts *bind.FilterOpts, epoch []*big.Int, validator []common.Address) (*SnapshotsFacetSnapshotTakenIterator, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _SnapshotsFacet.contract.FilterLogs(opts, "SnapshotTaken", epochRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return &SnapshotsFacetSnapshotTakenIterator{contract: _SnapshotsFacet.contract, event: "SnapshotTaken", logs: logs, sub: sub}, nil
}

// WatchSnapshotTaken is a free log subscription operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_SnapshotsFacet *SnapshotsFacetFilterer) WatchSnapshotTaken(opts *bind.WatchOpts, sink chan<- *SnapshotsFacetSnapshotTaken, epoch []*big.Int, validator []common.Address) (event.Subscription, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _SnapshotsFacet.contract.WatchLogs(opts, "SnapshotTaken", epochRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SnapshotsFacetSnapshotTaken)
				if err := _SnapshotsFacet.contract.UnpackLog(event, "SnapshotTaken", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSnapshotTaken is a log parse operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_SnapshotsFacet *SnapshotsFacetFilterer) ParseSnapshotTaken(log types.Log) (*SnapshotsFacetSnapshotTaken, error) {
	event := new(SnapshotsFacetSnapshotTaken)
	if err := _SnapshotsFacet.contract.UnpackLog(event, "SnapshotTaken", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SnapshotsLibraryMetaData contains all meta data concerning the SnapshotsLibrary contract.
var SnapshotsLibraryMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"startingETHDKG\",\"type\":\"bool\"}],\"name\":\"SnapshotTaken\",\"type\":\"event\"}]",
<<<<<<< Updated upstream
	Bin: "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122084a0cdf447e7961c0f458df529b86f2ae14f685d44772c08c8dccbf782d98ea964736f6c634300080b0033",
=======
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200d209b5d443b11e041cde2cdb77811dddecef59ae63bf0e51915fb015b27061864736f6c634300080b0033",
>>>>>>> Stashed changes
}

// SnapshotsLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use SnapshotsLibraryMetaData.ABI instead.
var SnapshotsLibraryABI = SnapshotsLibraryMetaData.ABI

// SnapshotsLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SnapshotsLibraryMetaData.Bin instead.
var SnapshotsLibraryBin = SnapshotsLibraryMetaData.Bin

// DeploySnapshotsLibrary deploys a new Ethereum contract, binding an instance of SnapshotsLibrary to it.
func DeploySnapshotsLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SnapshotsLibrary, error) {
	parsed, err := SnapshotsLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SnapshotsLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SnapshotsLibrary{SnapshotsLibraryCaller: SnapshotsLibraryCaller{contract: contract}, SnapshotsLibraryTransactor: SnapshotsLibraryTransactor{contract: contract}, SnapshotsLibraryFilterer: SnapshotsLibraryFilterer{contract: contract}}, nil
}

// SnapshotsLibrary is an auto generated Go binding around an Ethereum contract.
type SnapshotsLibrary struct {
	SnapshotsLibraryCaller     // Read-only binding to the contract
	SnapshotsLibraryTransactor // Write-only binding to the contract
	SnapshotsLibraryFilterer   // Log filterer for contract events
}

// SnapshotsLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type SnapshotsLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SnapshotsLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SnapshotsLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SnapshotsLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SnapshotsLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SnapshotsLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SnapshotsLibrarySession struct {
	Contract     *SnapshotsLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SnapshotsLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SnapshotsLibraryCallerSession struct {
	Contract *SnapshotsLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// SnapshotsLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SnapshotsLibraryTransactorSession struct {
	Contract     *SnapshotsLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// SnapshotsLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type SnapshotsLibraryRaw struct {
	Contract *SnapshotsLibrary // Generic contract binding to access the raw methods on
}

// SnapshotsLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SnapshotsLibraryCallerRaw struct {
	Contract *SnapshotsLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// SnapshotsLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SnapshotsLibraryTransactorRaw struct {
	Contract *SnapshotsLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSnapshotsLibrary creates a new instance of SnapshotsLibrary, bound to a specific deployed contract.
func NewSnapshotsLibrary(address common.Address, backend bind.ContractBackend) (*SnapshotsLibrary, error) {
	contract, err := bindSnapshotsLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SnapshotsLibrary{SnapshotsLibraryCaller: SnapshotsLibraryCaller{contract: contract}, SnapshotsLibraryTransactor: SnapshotsLibraryTransactor{contract: contract}, SnapshotsLibraryFilterer: SnapshotsLibraryFilterer{contract: contract}}, nil
}

// NewSnapshotsLibraryCaller creates a new read-only instance of SnapshotsLibrary, bound to a specific deployed contract.
func NewSnapshotsLibraryCaller(address common.Address, caller bind.ContractCaller) (*SnapshotsLibraryCaller, error) {
	contract, err := bindSnapshotsLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SnapshotsLibraryCaller{contract: contract}, nil
}

// NewSnapshotsLibraryTransactor creates a new write-only instance of SnapshotsLibrary, bound to a specific deployed contract.
func NewSnapshotsLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*SnapshotsLibraryTransactor, error) {
	contract, err := bindSnapshotsLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SnapshotsLibraryTransactor{contract: contract}, nil
}

// NewSnapshotsLibraryFilterer creates a new log filterer instance of SnapshotsLibrary, bound to a specific deployed contract.
func NewSnapshotsLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*SnapshotsLibraryFilterer, error) {
	contract, err := bindSnapshotsLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SnapshotsLibraryFilterer{contract: contract}, nil
}

// bindSnapshotsLibrary binds a generic wrapper to an already deployed contract.
func bindSnapshotsLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SnapshotsLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SnapshotsLibrary *SnapshotsLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SnapshotsLibrary.Contract.SnapshotsLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SnapshotsLibrary *SnapshotsLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SnapshotsLibrary.Contract.SnapshotsLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SnapshotsLibrary *SnapshotsLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SnapshotsLibrary.Contract.SnapshotsLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SnapshotsLibrary *SnapshotsLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SnapshotsLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SnapshotsLibrary *SnapshotsLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SnapshotsLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SnapshotsLibrary *SnapshotsLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SnapshotsLibrary.Contract.contract.Transact(opts, method, params...)
}

// SnapshotsLibrarySnapshotTakenIterator is returned from FilterSnapshotTaken and is used to iterate over the raw logs and unpacked data for SnapshotTaken events raised by the SnapshotsLibrary contract.
type SnapshotsLibrarySnapshotTakenIterator struct {
	Event *SnapshotsLibrarySnapshotTaken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SnapshotsLibrarySnapshotTakenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SnapshotsLibrarySnapshotTaken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SnapshotsLibrarySnapshotTaken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SnapshotsLibrarySnapshotTakenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SnapshotsLibrarySnapshotTakenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SnapshotsLibrarySnapshotTaken represents a SnapshotTaken event raised by the SnapshotsLibrary contract.
type SnapshotsLibrarySnapshotTaken struct {
	ChainId        uint32
	Epoch          *big.Int
	Height         uint32
	Validator      common.Address
	StartingETHDKG bool
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterSnapshotTaken is a free log retrieval operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_SnapshotsLibrary *SnapshotsLibraryFilterer) FilterSnapshotTaken(opts *bind.FilterOpts, epoch []*big.Int, validator []common.Address) (*SnapshotsLibrarySnapshotTakenIterator, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _SnapshotsLibrary.contract.FilterLogs(opts, "SnapshotTaken", epochRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return &SnapshotsLibrarySnapshotTakenIterator{contract: _SnapshotsLibrary.contract, event: "SnapshotTaken", logs: logs, sub: sub}, nil
}

// WatchSnapshotTaken is a free log subscription operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_SnapshotsLibrary *SnapshotsLibraryFilterer) WatchSnapshotTaken(opts *bind.WatchOpts, sink chan<- *SnapshotsLibrarySnapshotTaken, epoch []*big.Int, validator []common.Address) (event.Subscription, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _SnapshotsLibrary.contract.WatchLogs(opts, "SnapshotTaken", epochRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SnapshotsLibrarySnapshotTaken)
				if err := _SnapshotsLibrary.contract.UnpackLog(event, "SnapshotTaken", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSnapshotTaken is a log parse operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_SnapshotsLibrary *SnapshotsLibraryFilterer) ParseSnapshotTaken(log types.Log) (*SnapshotsLibrarySnapshotTaken, error) {
	event := new(SnapshotsLibrarySnapshotTaken)
	if err := _SnapshotsLibrary.contract.UnpackLog(event, "SnapshotTaken", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingMetaData contains all meta data concerning the Staking contract.
var StakingMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BurntStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"why\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Fined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockedReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockedStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"RequestedUnlockStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnlockedReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnlockedStake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"balanceReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceRewardFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceStakeFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceUnlocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceUnlockedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceUnlockedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceUnlockedRewardFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fine\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractRegistry\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"initializeStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockEpoch\",\"type\":\"uint256\"}],\"name\":\"lockRewardFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lockStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lockStakeFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"majorFine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"majorStakeFine\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"minorFine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minorStakeFine\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestUnlockStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"requestUnlockStakeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochDelay\",\"type\":\"uint256\"}],\"name\":\"setEpochDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_majorStakeFine\",\"type\":\"uint256\"}],\"name\":\"setMajorStakeFine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumStake\",\"type\":\"uint256\"}],\"name\":\"setMinimumStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minorStakeFine\",\"type\":\"uint256\"}],\"name\":\"setMinorStakeFine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"}],\"name\":\"setRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardBonus\",\"type\":\"uint256\"}],\"name\":\"setRewardBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"unlockRewardFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlockStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlockStakeFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// StakingABI is the input ABI used to generate the binding from.
// Deprecated: Use StakingMetaData.ABI instead.
var StakingABI = StakingMetaData.ABI

// Staking is an auto generated Go binding around an Ethereum contract.
type Staking struct {
	StakingCaller     // Read-only binding to the contract
	StakingTransactor // Write-only binding to the contract
	StakingFilterer   // Log filterer for contract events
}

// StakingCaller is an auto generated read-only Go binding around an Ethereum contract.
type StakingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StakingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StakingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StakingSession struct {
	Contract     *Staking          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StakingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StakingCallerSession struct {
	Contract *StakingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// StakingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StakingTransactorSession struct {
	Contract     *StakingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// StakingRaw is an auto generated low-level Go binding around an Ethereum contract.
type StakingRaw struct {
	Contract *Staking // Generic contract binding to access the raw methods on
}

// StakingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StakingCallerRaw struct {
	Contract *StakingCaller // Generic read-only contract binding to access the raw methods on
}

// StakingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StakingTransactorRaw struct {
	Contract *StakingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStaking creates a new instance of Staking, bound to a specific deployed contract.
func NewStaking(address common.Address, backend bind.ContractBackend) (*Staking, error) {
	contract, err := bindStaking(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Staking{StakingCaller: StakingCaller{contract: contract}, StakingTransactor: StakingTransactor{contract: contract}, StakingFilterer: StakingFilterer{contract: contract}}, nil
}

// NewStakingCaller creates a new read-only instance of Staking, bound to a specific deployed contract.
func NewStakingCaller(address common.Address, caller bind.ContractCaller) (*StakingCaller, error) {
	contract, err := bindStaking(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StakingCaller{contract: contract}, nil
}

// NewStakingTransactor creates a new write-only instance of Staking, bound to a specific deployed contract.
func NewStakingTransactor(address common.Address, transactor bind.ContractTransactor) (*StakingTransactor, error) {
	contract, err := bindStaking(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StakingTransactor{contract: contract}, nil
}

// NewStakingFilterer creates a new log filterer instance of Staking, bound to a specific deployed contract.
func NewStakingFilterer(address common.Address, filterer bind.ContractFilterer) (*StakingFilterer, error) {
	contract, err := bindStaking(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StakingFilterer{contract: contract}, nil
}

// bindStaking binds a generic wrapper to an already deployed contract.
func bindStaking(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StakingABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Staking *StakingRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Staking.Contract.StakingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Staking *StakingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.Contract.StakingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Staking *StakingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Staking.Contract.StakingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Staking *StakingCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Staking.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Staking *StakingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Staking *StakingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Staking.Contract.contract.Transact(opts, method, params...)
}

// BalanceReward is a free data retrieval call binding the contract method 0x9fb69b43.
//
// Solidity: function balanceReward() view returns(uint256)
func (_Staking *StakingCaller) BalanceReward(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "balanceReward")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceReward is a free data retrieval call binding the contract method 0x9fb69b43.
//
// Solidity: function balanceReward() view returns(uint256)
func (_Staking *StakingSession) BalanceReward() (*big.Int, error) {
	return _Staking.Contract.BalanceReward(&_Staking.CallOpts)
}

// BalanceReward is a free data retrieval call binding the contract method 0x9fb69b43.
//
// Solidity: function balanceReward() view returns(uint256)
func (_Staking *StakingCallerSession) BalanceReward() (*big.Int, error) {
	return _Staking.Contract.BalanceReward(&_Staking.CallOpts)
}

// BalanceRewardFor is a free data retrieval call binding the contract method 0x9be5d83e.
//
// Solidity: function balanceRewardFor(address who) view returns(uint256)
func (_Staking *StakingCaller) BalanceRewardFor(opts *bind.CallOpts, who common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "balanceRewardFor", who)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceRewardFor is a free data retrieval call binding the contract method 0x9be5d83e.
//
// Solidity: function balanceRewardFor(address who) view returns(uint256)
func (_Staking *StakingSession) BalanceRewardFor(who common.Address) (*big.Int, error) {
	return _Staking.Contract.BalanceRewardFor(&_Staking.CallOpts, who)
}

// BalanceRewardFor is a free data retrieval call binding the contract method 0x9be5d83e.
//
// Solidity: function balanceRewardFor(address who) view returns(uint256)
func (_Staking *StakingCallerSession) BalanceRewardFor(who common.Address) (*big.Int, error) {
	return _Staking.Contract.BalanceRewardFor(&_Staking.CallOpts, who)
}

// BalanceStake is a free data retrieval call binding the contract method 0x8aa2799c.
//
// Solidity: function balanceStake() view returns(uint256)
func (_Staking *StakingCaller) BalanceStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "balanceStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceStake is a free data retrieval call binding the contract method 0x8aa2799c.
//
// Solidity: function balanceStake() view returns(uint256)
func (_Staking *StakingSession) BalanceStake() (*big.Int, error) {
	return _Staking.Contract.BalanceStake(&_Staking.CallOpts)
}

// BalanceStake is a free data retrieval call binding the contract method 0x8aa2799c.
//
// Solidity: function balanceStake() view returns(uint256)
func (_Staking *StakingCallerSession) BalanceStake() (*big.Int, error) {
	return _Staking.Contract.BalanceStake(&_Staking.CallOpts)
}

// BalanceStakeFor is a free data retrieval call binding the contract method 0x35ba4daf.
//
// Solidity: function balanceStakeFor(address who) view returns(uint256)
func (_Staking *StakingCaller) BalanceStakeFor(opts *bind.CallOpts, who common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "balanceStakeFor", who)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceStakeFor is a free data retrieval call binding the contract method 0x35ba4daf.
//
// Solidity: function balanceStakeFor(address who) view returns(uint256)
func (_Staking *StakingSession) BalanceStakeFor(who common.Address) (*big.Int, error) {
	return _Staking.Contract.BalanceStakeFor(&_Staking.CallOpts, who)
}

// BalanceStakeFor is a free data retrieval call binding the contract method 0x35ba4daf.
//
// Solidity: function balanceStakeFor(address who) view returns(uint256)
func (_Staking *StakingCallerSession) BalanceStakeFor(who common.Address) (*big.Int, error) {
	return _Staking.Contract.BalanceStakeFor(&_Staking.CallOpts, who)
}

// BalanceUnlocked is a free data retrieval call binding the contract method 0x5b6a0d1e.
//
// Solidity: function balanceUnlocked() view returns(uint256)
func (_Staking *StakingCaller) BalanceUnlocked(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "balanceUnlocked")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceUnlocked is a free data retrieval call binding the contract method 0x5b6a0d1e.
//
// Solidity: function balanceUnlocked() view returns(uint256)
func (_Staking *StakingSession) BalanceUnlocked() (*big.Int, error) {
	return _Staking.Contract.BalanceUnlocked(&_Staking.CallOpts)
}

// BalanceUnlocked is a free data retrieval call binding the contract method 0x5b6a0d1e.
//
// Solidity: function balanceUnlocked() view returns(uint256)
func (_Staking *StakingCallerSession) BalanceUnlocked() (*big.Int, error) {
	return _Staking.Contract.BalanceUnlocked(&_Staking.CallOpts)
}

// BalanceUnlockedFor is a free data retrieval call binding the contract method 0x2e713306.
//
// Solidity: function balanceUnlockedFor(address who) view returns(uint256)
func (_Staking *StakingCaller) BalanceUnlockedFor(opts *bind.CallOpts, who common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "balanceUnlockedFor", who)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceUnlockedFor is a free data retrieval call binding the contract method 0x2e713306.
//
// Solidity: function balanceUnlockedFor(address who) view returns(uint256)
func (_Staking *StakingSession) BalanceUnlockedFor(who common.Address) (*big.Int, error) {
	return _Staking.Contract.BalanceUnlockedFor(&_Staking.CallOpts, who)
}

// BalanceUnlockedFor is a free data retrieval call binding the contract method 0x2e713306.
//
// Solidity: function balanceUnlockedFor(address who) view returns(uint256)
func (_Staking *StakingCallerSession) BalanceUnlockedFor(who common.Address) (*big.Int, error) {
	return _Staking.Contract.BalanceUnlockedFor(&_Staking.CallOpts, who)
}

// BalanceUnlockedReward is a free data retrieval call binding the contract method 0xc328b464.
//
// Solidity: function balanceUnlockedReward() view returns(uint256)
func (_Staking *StakingCaller) BalanceUnlockedReward(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "balanceUnlockedReward")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceUnlockedReward is a free data retrieval call binding the contract method 0xc328b464.
//
// Solidity: function balanceUnlockedReward() view returns(uint256)
func (_Staking *StakingSession) BalanceUnlockedReward() (*big.Int, error) {
	return _Staking.Contract.BalanceUnlockedReward(&_Staking.CallOpts)
}

// BalanceUnlockedReward is a free data retrieval call binding the contract method 0xc328b464.
//
// Solidity: function balanceUnlockedReward() view returns(uint256)
func (_Staking *StakingCallerSession) BalanceUnlockedReward() (*big.Int, error) {
	return _Staking.Contract.BalanceUnlockedReward(&_Staking.CallOpts)
}

// BalanceUnlockedRewardFor is a free data retrieval call binding the contract method 0x515c31a1.
//
// Solidity: function balanceUnlockedRewardFor(address who) view returns(uint256)
func (_Staking *StakingCaller) BalanceUnlockedRewardFor(opts *bind.CallOpts, who common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "balanceUnlockedRewardFor", who)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceUnlockedRewardFor is a free data retrieval call binding the contract method 0x515c31a1.
//
// Solidity: function balanceUnlockedRewardFor(address who) view returns(uint256)
func (_Staking *StakingSession) BalanceUnlockedRewardFor(who common.Address) (*big.Int, error) {
	return _Staking.Contract.BalanceUnlockedRewardFor(&_Staking.CallOpts, who)
}

// BalanceUnlockedRewardFor is a free data retrieval call binding the contract method 0x515c31a1.
//
// Solidity: function balanceUnlockedRewardFor(address who) view returns(uint256)
func (_Staking *StakingCallerSession) BalanceUnlockedRewardFor(who common.Address) (*big.Int, error) {
	return _Staking.Contract.BalanceUnlockedRewardFor(&_Staking.CallOpts, who)
}

// MajorStakeFine is a free data retrieval call binding the contract method 0xad43d845.
//
// Solidity: function majorStakeFine() view returns(uint256)
func (_Staking *StakingCaller) MajorStakeFine(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "majorStakeFine")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MajorStakeFine is a free data retrieval call binding the contract method 0xad43d845.
//
// Solidity: function majorStakeFine() view returns(uint256)
func (_Staking *StakingSession) MajorStakeFine() (*big.Int, error) {
	return _Staking.Contract.MajorStakeFine(&_Staking.CallOpts)
}

// MajorStakeFine is a free data retrieval call binding the contract method 0xad43d845.
//
// Solidity: function majorStakeFine() view returns(uint256)
func (_Staking *StakingCallerSession) MajorStakeFine() (*big.Int, error) {
	return _Staking.Contract.MajorStakeFine(&_Staking.CallOpts)
}

// MinimumStake is a free data retrieval call binding the contract method 0xec5ffac2.
//
// Solidity: function minimumStake() view returns(uint256)
func (_Staking *StakingCaller) MinimumStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "minimumStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumStake is a free data retrieval call binding the contract method 0xec5ffac2.
//
// Solidity: function minimumStake() view returns(uint256)
func (_Staking *StakingSession) MinimumStake() (*big.Int, error) {
	return _Staking.Contract.MinimumStake(&_Staking.CallOpts)
}

// MinimumStake is a free data retrieval call binding the contract method 0xec5ffac2.
//
// Solidity: function minimumStake() view returns(uint256)
func (_Staking *StakingCallerSession) MinimumStake() (*big.Int, error) {
	return _Staking.Contract.MinimumStake(&_Staking.CallOpts)
}

// MinorStakeFine is a free data retrieval call binding the contract method 0x6d059126.
//
// Solidity: function minorStakeFine() view returns(uint256)
func (_Staking *StakingCaller) MinorStakeFine(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "minorStakeFine")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinorStakeFine is a free data retrieval call binding the contract method 0x6d059126.
//
// Solidity: function minorStakeFine() view returns(uint256)
func (_Staking *StakingSession) MinorStakeFine() (*big.Int, error) {
	return _Staking.Contract.MinorStakeFine(&_Staking.CallOpts)
}

// MinorStakeFine is a free data retrieval call binding the contract method 0x6d059126.
//
// Solidity: function minorStakeFine() view returns(uint256)
func (_Staking *StakingCallerSession) MinorStakeFine() (*big.Int, error) {
	return _Staking.Contract.MinorStakeFine(&_Staking.CallOpts)
}

// RewardAmount is a free data retrieval call binding the contract method 0xf7b2a7be.
//
// Solidity: function rewardAmount() view returns(uint256)
func (_Staking *StakingCaller) RewardAmount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "rewardAmount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RewardAmount is a free data retrieval call binding the contract method 0xf7b2a7be.
//
// Solidity: function rewardAmount() view returns(uint256)
func (_Staking *StakingSession) RewardAmount() (*big.Int, error) {
	return _Staking.Contract.RewardAmount(&_Staking.CallOpts)
}

// RewardAmount is a free data retrieval call binding the contract method 0xf7b2a7be.
//
// Solidity: function rewardAmount() view returns(uint256)
func (_Staking *StakingCallerSession) RewardAmount() (*big.Int, error) {
	return _Staking.Contract.RewardAmount(&_Staking.CallOpts)
}

// RewardBonus is a free data retrieval call binding the contract method 0xfdf553cf.
//
// Solidity: function rewardBonus() view returns(uint256)
func (_Staking *StakingCaller) RewardBonus(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "rewardBonus")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RewardBonus is a free data retrieval call binding the contract method 0xfdf553cf.
//
// Solidity: function rewardBonus() view returns(uint256)
func (_Staking *StakingSession) RewardBonus() (*big.Int, error) {
	return _Staking.Contract.RewardBonus(&_Staking.CallOpts)
}

// RewardBonus is a free data retrieval call binding the contract method 0xfdf553cf.
//
// Solidity: function rewardBonus() view returns(uint256)
func (_Staking *StakingCallerSession) RewardBonus() (*big.Int, error) {
	return _Staking.Contract.RewardBonus(&_Staking.CallOpts)
}

// Burn is a paid mutator transaction binding the contract method 0x89afcb44.
//
// Solidity: function burn(address who) returns()
func (_Staking *StakingTransactor) Burn(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "burn", who)
}

// Burn is a paid mutator transaction binding the contract method 0x89afcb44.
//
// Solidity: function burn(address who) returns()
func (_Staking *StakingSession) Burn(who common.Address) (*types.Transaction, error) {
	return _Staking.Contract.Burn(&_Staking.TransactOpts, who)
}

// Burn is a paid mutator transaction binding the contract method 0x89afcb44.
//
// Solidity: function burn(address who) returns()
func (_Staking *StakingTransactorSession) Burn(who common.Address) (*types.Transaction, error) {
	return _Staking.Contract.Burn(&_Staking.TransactOpts, who)
}

// Fine is a paid mutator transaction binding the contract method 0xdb1e4662.
//
// Solidity: function fine(address who, uint256 amount) returns(bool)
func (_Staking *StakingTransactor) Fine(opts *bind.TransactOpts, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "fine", who, amount)
}

// Fine is a paid mutator transaction binding the contract method 0xdb1e4662.
//
// Solidity: function fine(address who, uint256 amount) returns(bool)
func (_Staking *StakingSession) Fine(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.Fine(&_Staking.TransactOpts, who, amount)
}

// Fine is a paid mutator transaction binding the contract method 0xdb1e4662.
//
// Solidity: function fine(address who, uint256 amount) returns(bool)
func (_Staking *StakingTransactorSession) Fine(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.Fine(&_Staking.TransactOpts, who, amount)
}

// InitializeStaking is a paid mutator transaction binding the contract method 0x04ad7a83.
//
// Solidity: function initializeStaking(address registry) returns()
func (_Staking *StakingTransactor) InitializeStaking(opts *bind.TransactOpts, registry common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "initializeStaking", registry)
}

// InitializeStaking is a paid mutator transaction binding the contract method 0x04ad7a83.
//
// Solidity: function initializeStaking(address registry) returns()
func (_Staking *StakingSession) InitializeStaking(registry common.Address) (*types.Transaction, error) {
	return _Staking.Contract.InitializeStaking(&_Staking.TransactOpts, registry)
}

// InitializeStaking is a paid mutator transaction binding the contract method 0x04ad7a83.
//
// Solidity: function initializeStaking(address registry) returns()
func (_Staking *StakingTransactorSession) InitializeStaking(registry common.Address) (*types.Transaction, error) {
	return _Staking.Contract.InitializeStaking(&_Staking.TransactOpts, registry)
}

// LockRewardFor is a paid mutator transaction binding the contract method 0x0ddb07ad.
//
// Solidity: function lockRewardFor(address who, uint256 amountReward, uint256 unlockEpoch) returns(bool)
func (_Staking *StakingTransactor) LockRewardFor(opts *bind.TransactOpts, who common.Address, amountReward *big.Int, unlockEpoch *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "lockRewardFor", who, amountReward, unlockEpoch)
}

// LockRewardFor is a paid mutator transaction binding the contract method 0x0ddb07ad.
//
// Solidity: function lockRewardFor(address who, uint256 amountReward, uint256 unlockEpoch) returns(bool)
func (_Staking *StakingSession) LockRewardFor(who common.Address, amountReward *big.Int, unlockEpoch *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.LockRewardFor(&_Staking.TransactOpts, who, amountReward, unlockEpoch)
}

// LockRewardFor is a paid mutator transaction binding the contract method 0x0ddb07ad.
//
// Solidity: function lockRewardFor(address who, uint256 amountReward, uint256 unlockEpoch) returns(bool)
func (_Staking *StakingTransactorSession) LockRewardFor(who common.Address, amountReward *big.Int, unlockEpoch *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.LockRewardFor(&_Staking.TransactOpts, who, amountReward, unlockEpoch)
}

// LockStake is a paid mutator transaction binding the contract method 0xf50ddb67.
//
// Solidity: function lockStake(uint256 amount) returns(bool)
func (_Staking *StakingTransactor) LockStake(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "lockStake", amount)
}

// LockStake is a paid mutator transaction binding the contract method 0xf50ddb67.
//
// Solidity: function lockStake(uint256 amount) returns(bool)
func (_Staking *StakingSession) LockStake(amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.LockStake(&_Staking.TransactOpts, amount)
}

// LockStake is a paid mutator transaction binding the contract method 0xf50ddb67.
//
// Solidity: function lockStake(uint256 amount) returns(bool)
func (_Staking *StakingTransactorSession) LockStake(amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.LockStake(&_Staking.TransactOpts, amount)
}

// LockStakeFor is a paid mutator transaction binding the contract method 0x461cbdcf.
//
// Solidity: function lockStakeFor(address who, uint256 amount) returns(bool)
func (_Staking *StakingTransactor) LockStakeFor(opts *bind.TransactOpts, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "lockStakeFor", who, amount)
}

// LockStakeFor is a paid mutator transaction binding the contract method 0x461cbdcf.
//
// Solidity: function lockStakeFor(address who, uint256 amount) returns(bool)
func (_Staking *StakingSession) LockStakeFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.LockStakeFor(&_Staking.TransactOpts, who, amount)
}

// LockStakeFor is a paid mutator transaction binding the contract method 0x461cbdcf.
//
// Solidity: function lockStakeFor(address who, uint256 amount) returns(bool)
func (_Staking *StakingTransactorSession) LockStakeFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.LockStakeFor(&_Staking.TransactOpts, who, amount)
}

// MajorFine is a paid mutator transaction binding the contract method 0x57b4f82a.
//
// Solidity: function majorFine(address who) returns()
func (_Staking *StakingTransactor) MajorFine(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "majorFine", who)
}

// MajorFine is a paid mutator transaction binding the contract method 0x57b4f82a.
//
// Solidity: function majorFine(address who) returns()
func (_Staking *StakingSession) MajorFine(who common.Address) (*types.Transaction, error) {
	return _Staking.Contract.MajorFine(&_Staking.TransactOpts, who)
}

// MajorFine is a paid mutator transaction binding the contract method 0x57b4f82a.
//
// Solidity: function majorFine(address who) returns()
func (_Staking *StakingTransactorSession) MajorFine(who common.Address) (*types.Transaction, error) {
	return _Staking.Contract.MajorFine(&_Staking.TransactOpts, who)
}

// MinorFine is a paid mutator transaction binding the contract method 0xd2a2c55c.
//
// Solidity: function minorFine(address who) returns()
func (_Staking *StakingTransactor) MinorFine(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "minorFine", who)
}

// MinorFine is a paid mutator transaction binding the contract method 0xd2a2c55c.
//
// Solidity: function minorFine(address who) returns()
func (_Staking *StakingSession) MinorFine(who common.Address) (*types.Transaction, error) {
	return _Staking.Contract.MinorFine(&_Staking.TransactOpts, who)
}

// MinorFine is a paid mutator transaction binding the contract method 0xd2a2c55c.
//
// Solidity: function minorFine(address who) returns()
func (_Staking *StakingTransactorSession) MinorFine(who common.Address) (*types.Transaction, error) {
	return _Staking.Contract.MinorFine(&_Staking.TransactOpts, who)
}

// RequestUnlockStake is a paid mutator transaction binding the contract method 0xaeaf8812.
//
// Solidity: function requestUnlockStake() returns()
func (_Staking *StakingTransactor) RequestUnlockStake(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "requestUnlockStake")
}

// RequestUnlockStake is a paid mutator transaction binding the contract method 0xaeaf8812.
//
// Solidity: function requestUnlockStake() returns()
func (_Staking *StakingSession) RequestUnlockStake() (*types.Transaction, error) {
	return _Staking.Contract.RequestUnlockStake(&_Staking.TransactOpts)
}

// RequestUnlockStake is a paid mutator transaction binding the contract method 0xaeaf8812.
//
// Solidity: function requestUnlockStake() returns()
func (_Staking *StakingTransactorSession) RequestUnlockStake() (*types.Transaction, error) {
	return _Staking.Contract.RequestUnlockStake(&_Staking.TransactOpts)
}

// RequestUnlockStakeFor is a paid mutator transaction binding the contract method 0x4fcf2b72.
//
// Solidity: function requestUnlockStakeFor(address who) returns()
func (_Staking *StakingTransactor) RequestUnlockStakeFor(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "requestUnlockStakeFor", who)
}

// RequestUnlockStakeFor is a paid mutator transaction binding the contract method 0x4fcf2b72.
//
// Solidity: function requestUnlockStakeFor(address who) returns()
func (_Staking *StakingSession) RequestUnlockStakeFor(who common.Address) (*types.Transaction, error) {
	return _Staking.Contract.RequestUnlockStakeFor(&_Staking.TransactOpts, who)
}

// RequestUnlockStakeFor is a paid mutator transaction binding the contract method 0x4fcf2b72.
//
// Solidity: function requestUnlockStakeFor(address who) returns()
func (_Staking *StakingTransactorSession) RequestUnlockStakeFor(who common.Address) (*types.Transaction, error) {
	return _Staking.Contract.RequestUnlockStakeFor(&_Staking.TransactOpts, who)
}

// SetEpochDelay is a paid mutator transaction binding the contract method 0xbd695a43.
//
// Solidity: function setEpochDelay(uint256 _epochDelay) returns()
func (_Staking *StakingTransactor) SetEpochDelay(opts *bind.TransactOpts, _epochDelay *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "setEpochDelay", _epochDelay)
}

// SetEpochDelay is a paid mutator transaction binding the contract method 0xbd695a43.
//
// Solidity: function setEpochDelay(uint256 _epochDelay) returns()
func (_Staking *StakingSession) SetEpochDelay(_epochDelay *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetEpochDelay(&_Staking.TransactOpts, _epochDelay)
}

// SetEpochDelay is a paid mutator transaction binding the contract method 0xbd695a43.
//
// Solidity: function setEpochDelay(uint256 _epochDelay) returns()
func (_Staking *StakingTransactorSession) SetEpochDelay(_epochDelay *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetEpochDelay(&_Staking.TransactOpts, _epochDelay)
}

// SetMajorStakeFine is a paid mutator transaction binding the contract method 0x78146c2f.
//
// Solidity: function setMajorStakeFine(uint256 _majorStakeFine) returns()
func (_Staking *StakingTransactor) SetMajorStakeFine(opts *bind.TransactOpts, _majorStakeFine *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "setMajorStakeFine", _majorStakeFine)
}

// SetMajorStakeFine is a paid mutator transaction binding the contract method 0x78146c2f.
//
// Solidity: function setMajorStakeFine(uint256 _majorStakeFine) returns()
func (_Staking *StakingSession) SetMajorStakeFine(_majorStakeFine *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetMajorStakeFine(&_Staking.TransactOpts, _majorStakeFine)
}

// SetMajorStakeFine is a paid mutator transaction binding the contract method 0x78146c2f.
//
// Solidity: function setMajorStakeFine(uint256 _majorStakeFine) returns()
func (_Staking *StakingTransactorSession) SetMajorStakeFine(_majorStakeFine *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetMajorStakeFine(&_Staking.TransactOpts, _majorStakeFine)
}

// SetMinimumStake is a paid mutator transaction binding the contract method 0x233e9903.
//
// Solidity: function setMinimumStake(uint256 _minimumStake) returns()
func (_Staking *StakingTransactor) SetMinimumStake(opts *bind.TransactOpts, _minimumStake *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "setMinimumStake", _minimumStake)
}

// SetMinimumStake is a paid mutator transaction binding the contract method 0x233e9903.
//
// Solidity: function setMinimumStake(uint256 _minimumStake) returns()
func (_Staking *StakingSession) SetMinimumStake(_minimumStake *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetMinimumStake(&_Staking.TransactOpts, _minimumStake)
}

// SetMinimumStake is a paid mutator transaction binding the contract method 0x233e9903.
//
// Solidity: function setMinimumStake(uint256 _minimumStake) returns()
func (_Staking *StakingTransactorSession) SetMinimumStake(_minimumStake *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetMinimumStake(&_Staking.TransactOpts, _minimumStake)
}

// SetMinorStakeFine is a paid mutator transaction binding the contract method 0x29693c5c.
//
// Solidity: function setMinorStakeFine(uint256 _minorStakeFine) returns()
func (_Staking *StakingTransactor) SetMinorStakeFine(opts *bind.TransactOpts, _minorStakeFine *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "setMinorStakeFine", _minorStakeFine)
}

// SetMinorStakeFine is a paid mutator transaction binding the contract method 0x29693c5c.
//
// Solidity: function setMinorStakeFine(uint256 _minorStakeFine) returns()
func (_Staking *StakingSession) SetMinorStakeFine(_minorStakeFine *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetMinorStakeFine(&_Staking.TransactOpts, _minorStakeFine)
}

// SetMinorStakeFine is a paid mutator transaction binding the contract method 0x29693c5c.
//
// Solidity: function setMinorStakeFine(uint256 _minorStakeFine) returns()
func (_Staking *StakingTransactorSession) SetMinorStakeFine(_minorStakeFine *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetMinorStakeFine(&_Staking.TransactOpts, _minorStakeFine)
}

// SetRewardAmount is a paid mutator transaction binding the contract method 0xa8a65a78.
//
// Solidity: function setRewardAmount(uint256 _rewardAmount) returns()
func (_Staking *StakingTransactor) SetRewardAmount(opts *bind.TransactOpts, _rewardAmount *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "setRewardAmount", _rewardAmount)
}

// SetRewardAmount is a paid mutator transaction binding the contract method 0xa8a65a78.
//
// Solidity: function setRewardAmount(uint256 _rewardAmount) returns()
func (_Staking *StakingSession) SetRewardAmount(_rewardAmount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetRewardAmount(&_Staking.TransactOpts, _rewardAmount)
}

// SetRewardAmount is a paid mutator transaction binding the contract method 0xa8a65a78.
//
// Solidity: function setRewardAmount(uint256 _rewardAmount) returns()
func (_Staking *StakingTransactorSession) SetRewardAmount(_rewardAmount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetRewardAmount(&_Staking.TransactOpts, _rewardAmount)
}

// SetRewardBonus is a paid mutator transaction binding the contract method 0xf95d80fa.
//
// Solidity: function setRewardBonus(uint256 _rewardBonus) returns()
func (_Staking *StakingTransactor) SetRewardBonus(opts *bind.TransactOpts, _rewardBonus *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "setRewardBonus", _rewardBonus)
}

// SetRewardBonus is a paid mutator transaction binding the contract method 0xf95d80fa.
//
// Solidity: function setRewardBonus(uint256 _rewardBonus) returns()
func (_Staking *StakingSession) SetRewardBonus(_rewardBonus *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetRewardBonus(&_Staking.TransactOpts, _rewardBonus)
}

// SetRewardBonus is a paid mutator transaction binding the contract method 0xf95d80fa.
//
// Solidity: function setRewardBonus(uint256 _rewardBonus) returns()
func (_Staking *StakingTransactorSession) SetRewardBonus(_rewardBonus *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetRewardBonus(&_Staking.TransactOpts, _rewardBonus)
}

// UnlockReward is a paid mutator transaction binding the contract method 0xf1b7f4bf.
//
// Solidity: function unlockReward() returns(bool)
func (_Staking *StakingTransactor) UnlockReward(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "unlockReward")
}

// UnlockReward is a paid mutator transaction binding the contract method 0xf1b7f4bf.
//
// Solidity: function unlockReward() returns(bool)
func (_Staking *StakingSession) UnlockReward() (*types.Transaction, error) {
	return _Staking.Contract.UnlockReward(&_Staking.TransactOpts)
}

// UnlockReward is a paid mutator transaction binding the contract method 0xf1b7f4bf.
//
// Solidity: function unlockReward() returns(bool)
func (_Staking *StakingTransactorSession) UnlockReward() (*types.Transaction, error) {
	return _Staking.Contract.UnlockReward(&_Staking.TransactOpts)
}

// UnlockRewardFor is a paid mutator transaction binding the contract method 0x7f91bd69.
//
// Solidity: function unlockRewardFor(address who) returns(bool)
func (_Staking *StakingTransactor) UnlockRewardFor(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "unlockRewardFor", who)
}

// UnlockRewardFor is a paid mutator transaction binding the contract method 0x7f91bd69.
//
// Solidity: function unlockRewardFor(address who) returns(bool)
func (_Staking *StakingSession) UnlockRewardFor(who common.Address) (*types.Transaction, error) {
	return _Staking.Contract.UnlockRewardFor(&_Staking.TransactOpts, who)
}

// UnlockRewardFor is a paid mutator transaction binding the contract method 0x7f91bd69.
//
// Solidity: function unlockRewardFor(address who) returns(bool)
func (_Staking *StakingTransactorSession) UnlockRewardFor(who common.Address) (*types.Transaction, error) {
	return _Staking.Contract.UnlockRewardFor(&_Staking.TransactOpts, who)
}

// UnlockStake is a paid mutator transaction binding the contract method 0xecd8c06a.
//
// Solidity: function unlockStake(uint256 amount) returns(bool)
func (_Staking *StakingTransactor) UnlockStake(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "unlockStake", amount)
}

// UnlockStake is a paid mutator transaction binding the contract method 0xecd8c06a.
//
// Solidity: function unlockStake(uint256 amount) returns(bool)
func (_Staking *StakingSession) UnlockStake(amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.UnlockStake(&_Staking.TransactOpts, amount)
}

// UnlockStake is a paid mutator transaction binding the contract method 0xecd8c06a.
//
// Solidity: function unlockStake(uint256 amount) returns(bool)
func (_Staking *StakingTransactorSession) UnlockStake(amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.UnlockStake(&_Staking.TransactOpts, amount)
}

// UnlockStakeFor is a paid mutator transaction binding the contract method 0xe29dda92.
//
// Solidity: function unlockStakeFor(address who, uint256 amount) returns(bool)
func (_Staking *StakingTransactor) UnlockStakeFor(opts *bind.TransactOpts, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "unlockStakeFor", who, amount)
}

// UnlockStakeFor is a paid mutator transaction binding the contract method 0xe29dda92.
//
// Solidity: function unlockStakeFor(address who, uint256 amount) returns(bool)
func (_Staking *StakingSession) UnlockStakeFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.UnlockStakeFor(&_Staking.TransactOpts, who, amount)
}

// UnlockStakeFor is a paid mutator transaction binding the contract method 0xe29dda92.
//
// Solidity: function unlockStakeFor(address who, uint256 amount) returns(bool)
func (_Staking *StakingTransactorSession) UnlockStakeFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.UnlockStakeFor(&_Staking.TransactOpts, who, amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns(bool)
func (_Staking *StakingTransactor) Withdraw(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "withdraw", amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns(bool)
func (_Staking *StakingSession) Withdraw(amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.Withdraw(&_Staking.TransactOpts, amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns(bool)
func (_Staking *StakingTransactorSession) Withdraw(amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.Withdraw(&_Staking.TransactOpts, amount)
}

// WithdrawFor is a paid mutator transaction binding the contract method 0xdb518db2.
//
// Solidity: function withdrawFor(address who, uint256 amount) returns(bool)
func (_Staking *StakingTransactor) WithdrawFor(opts *bind.TransactOpts, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "withdrawFor", who, amount)
}

// WithdrawFor is a paid mutator transaction binding the contract method 0xdb518db2.
//
// Solidity: function withdrawFor(address who, uint256 amount) returns(bool)
func (_Staking *StakingSession) WithdrawFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.WithdrawFor(&_Staking.TransactOpts, who, amount)
}

// WithdrawFor is a paid mutator transaction binding the contract method 0xdb518db2.
//
// Solidity: function withdrawFor(address who, uint256 amount) returns(bool)
func (_Staking *StakingTransactorSession) WithdrawFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.WithdrawFor(&_Staking.TransactOpts, who, amount)
}

// WithdrawReward is a paid mutator transaction binding the contract method 0x523a3f08.
//
// Solidity: function withdrawReward(uint256 amount) returns(bool)
func (_Staking *StakingTransactor) WithdrawReward(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "withdrawReward", amount)
}

// WithdrawReward is a paid mutator transaction binding the contract method 0x523a3f08.
//
// Solidity: function withdrawReward(uint256 amount) returns(bool)
func (_Staking *StakingSession) WithdrawReward(amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.WithdrawReward(&_Staking.TransactOpts, amount)
}

// WithdrawReward is a paid mutator transaction binding the contract method 0x523a3f08.
//
// Solidity: function withdrawReward(uint256 amount) returns(bool)
func (_Staking *StakingTransactorSession) WithdrawReward(amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.WithdrawReward(&_Staking.TransactOpts, amount)
}

// StakingBurntStakeIterator is returned from FilterBurntStake and is used to iterate over the raw logs and unpacked data for BurntStake events raised by the Staking contract.
type StakingBurntStakeIterator struct {
	Event *StakingBurntStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingBurntStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingBurntStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingBurntStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingBurntStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingBurntStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingBurntStake represents a BurntStake event raised by the Staking contract.
type StakingBurntStake struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBurntStake is a free log retrieval operation binding the contract event 0x54420ac6a7570cfba30d2f88982f0749811f67103de3a63ad8b82cb754e8680e.
//
// Solidity: event BurntStake(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) FilterBurntStake(opts *bind.FilterOpts, who []common.Address) (*StakingBurntStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "BurntStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingBurntStakeIterator{contract: _Staking.contract, event: "BurntStake", logs: logs, sub: sub}, nil
}

// WatchBurntStake is a free log subscription operation binding the contract event 0x54420ac6a7570cfba30d2f88982f0749811f67103de3a63ad8b82cb754e8680e.
//
// Solidity: event BurntStake(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) WatchBurntStake(opts *bind.WatchOpts, sink chan<- *StakingBurntStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "BurntStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingBurntStake)
				if err := _Staking.contract.UnpackLog(event, "BurntStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurntStake is a log parse operation binding the contract event 0x54420ac6a7570cfba30d2f88982f0749811f67103de3a63ad8b82cb754e8680e.
//
// Solidity: event BurntStake(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) ParseBurntStake(log types.Log) (*StakingBurntStake, error) {
	event := new(StakingBurntStake)
	if err := _Staking.contract.UnpackLog(event, "BurntStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingFinedIterator is returned from FilterFined and is used to iterate over the raw logs and unpacked data for Fined events raised by the Staking contract.
type StakingFinedIterator struct {
	Event *StakingFined // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingFinedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingFined)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingFined)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingFinedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingFinedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingFined represents a Fined event raised by the Staking contract.
type StakingFined struct {
	Who    common.Address
	Why    [32]byte
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterFined is a free log retrieval operation binding the contract event 0xf1254bf6cf04a475bd832353c2ccfc5e0d89e7b9c0f05a153ff897b6121b91e9.
//
// Solidity: event Fined(address indexed who, bytes32 why, uint256 amount)
func (_Staking *StakingFilterer) FilterFined(opts *bind.FilterOpts, who []common.Address) (*StakingFinedIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "Fined", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingFinedIterator{contract: _Staking.contract, event: "Fined", logs: logs, sub: sub}, nil
}

// WatchFined is a free log subscription operation binding the contract event 0xf1254bf6cf04a475bd832353c2ccfc5e0d89e7b9c0f05a153ff897b6121b91e9.
//
// Solidity: event Fined(address indexed who, bytes32 why, uint256 amount)
func (_Staking *StakingFilterer) WatchFined(opts *bind.WatchOpts, sink chan<- *StakingFined, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "Fined", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingFined)
				if err := _Staking.contract.UnpackLog(event, "Fined", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFined is a log parse operation binding the contract event 0xf1254bf6cf04a475bd832353c2ccfc5e0d89e7b9c0f05a153ff897b6121b91e9.
//
// Solidity: event Fined(address indexed who, bytes32 why, uint256 amount)
func (_Staking *StakingFilterer) ParseFined(log types.Log) (*StakingFined, error) {
	event := new(StakingFined)
	if err := _Staking.contract.UnpackLog(event, "Fined", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingLockedRewardIterator is returned from FilterLockedReward and is used to iterate over the raw logs and unpacked data for LockedReward events raised by the Staking contract.
type StakingLockedRewardIterator struct {
	Event *StakingLockedReward // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingLockedRewardIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingLockedReward)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingLockedReward)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingLockedRewardIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingLockedRewardIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingLockedReward represents a LockedReward event raised by the Staking contract.
type StakingLockedReward struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLockedReward is a free log retrieval operation binding the contract event 0x28dc9c0ffa672df041cad84edbee41508284600c9394bda0f8586d012c5e0915.
//
// Solidity: event LockedReward(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) FilterLockedReward(opts *bind.FilterOpts, who []common.Address) (*StakingLockedRewardIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "LockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingLockedRewardIterator{contract: _Staking.contract, event: "LockedReward", logs: logs, sub: sub}, nil
}

// WatchLockedReward is a free log subscription operation binding the contract event 0x28dc9c0ffa672df041cad84edbee41508284600c9394bda0f8586d012c5e0915.
//
// Solidity: event LockedReward(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) WatchLockedReward(opts *bind.WatchOpts, sink chan<- *StakingLockedReward, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "LockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingLockedReward)
				if err := _Staking.contract.UnpackLog(event, "LockedReward", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLockedReward is a log parse operation binding the contract event 0x28dc9c0ffa672df041cad84edbee41508284600c9394bda0f8586d012c5e0915.
//
// Solidity: event LockedReward(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) ParseLockedReward(log types.Log) (*StakingLockedReward, error) {
	event := new(StakingLockedReward)
	if err := _Staking.contract.UnpackLog(event, "LockedReward", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingLockedStakeIterator is returned from FilterLockedStake and is used to iterate over the raw logs and unpacked data for LockedStake events raised by the Staking contract.
type StakingLockedStakeIterator struct {
	Event *StakingLockedStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingLockedStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingLockedStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingLockedStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingLockedStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingLockedStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingLockedStake represents a LockedStake event raised by the Staking contract.
type StakingLockedStake struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLockedStake is a free log retrieval operation binding the contract event 0x1de2f07b0a1c69916a8b25b889051644192307ea08444a2e11f8654d1db3ab0c.
//
// Solidity: event LockedStake(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) FilterLockedStake(opts *bind.FilterOpts, who []common.Address) (*StakingLockedStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "LockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingLockedStakeIterator{contract: _Staking.contract, event: "LockedStake", logs: logs, sub: sub}, nil
}

// WatchLockedStake is a free log subscription operation binding the contract event 0x1de2f07b0a1c69916a8b25b889051644192307ea08444a2e11f8654d1db3ab0c.
//
// Solidity: event LockedStake(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) WatchLockedStake(opts *bind.WatchOpts, sink chan<- *StakingLockedStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "LockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingLockedStake)
				if err := _Staking.contract.UnpackLog(event, "LockedStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLockedStake is a log parse operation binding the contract event 0x1de2f07b0a1c69916a8b25b889051644192307ea08444a2e11f8654d1db3ab0c.
//
// Solidity: event LockedStake(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) ParseLockedStake(log types.Log) (*StakingLockedStake, error) {
	event := new(StakingLockedStake)
	if err := _Staking.contract.UnpackLog(event, "LockedStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingRequestedUnlockStakeIterator is returned from FilterRequestedUnlockStake and is used to iterate over the raw logs and unpacked data for RequestedUnlockStake events raised by the Staking contract.
type StakingRequestedUnlockStakeIterator struct {
	Event *StakingRequestedUnlockStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingRequestedUnlockStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingRequestedUnlockStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingRequestedUnlockStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingRequestedUnlockStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingRequestedUnlockStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingRequestedUnlockStake represents a RequestedUnlockStake event raised by the Staking contract.
type StakingRequestedUnlockStake struct {
	Who common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterRequestedUnlockStake is a free log retrieval operation binding the contract event 0x1fde0d8a6620647f5c7b5632a87b23101ba553c9b474caf1134fb24d92bf6ddc.
//
// Solidity: event RequestedUnlockStake(address indexed who)
func (_Staking *StakingFilterer) FilterRequestedUnlockStake(opts *bind.FilterOpts, who []common.Address) (*StakingRequestedUnlockStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "RequestedUnlockStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingRequestedUnlockStakeIterator{contract: _Staking.contract, event: "RequestedUnlockStake", logs: logs, sub: sub}, nil
}

// WatchRequestedUnlockStake is a free log subscription operation binding the contract event 0x1fde0d8a6620647f5c7b5632a87b23101ba553c9b474caf1134fb24d92bf6ddc.
//
// Solidity: event RequestedUnlockStake(address indexed who)
func (_Staking *StakingFilterer) WatchRequestedUnlockStake(opts *bind.WatchOpts, sink chan<- *StakingRequestedUnlockStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "RequestedUnlockStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingRequestedUnlockStake)
				if err := _Staking.contract.UnpackLog(event, "RequestedUnlockStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRequestedUnlockStake is a log parse operation binding the contract event 0x1fde0d8a6620647f5c7b5632a87b23101ba553c9b474caf1134fb24d92bf6ddc.
//
// Solidity: event RequestedUnlockStake(address indexed who)
func (_Staking *StakingFilterer) ParseRequestedUnlockStake(log types.Log) (*StakingRequestedUnlockStake, error) {
	event := new(StakingRequestedUnlockStake)
	if err := _Staking.contract.UnpackLog(event, "RequestedUnlockStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingUnlockedRewardIterator is returned from FilterUnlockedReward and is used to iterate over the raw logs and unpacked data for UnlockedReward events raised by the Staking contract.
type StakingUnlockedRewardIterator struct {
	Event *StakingUnlockedReward // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingUnlockedRewardIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingUnlockedReward)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingUnlockedReward)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingUnlockedRewardIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingUnlockedRewardIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingUnlockedReward represents a UnlockedReward event raised by the Staking contract.
type StakingUnlockedReward struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterUnlockedReward is a free log retrieval operation binding the contract event 0x496a1c9a1a9ac29d87ecb4e563683ebd0ee80798869f36c86175059eb5dc7304.
//
// Solidity: event UnlockedReward(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) FilterUnlockedReward(opts *bind.FilterOpts, who []common.Address) (*StakingUnlockedRewardIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "UnlockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingUnlockedRewardIterator{contract: _Staking.contract, event: "UnlockedReward", logs: logs, sub: sub}, nil
}

// WatchUnlockedReward is a free log subscription operation binding the contract event 0x496a1c9a1a9ac29d87ecb4e563683ebd0ee80798869f36c86175059eb5dc7304.
//
// Solidity: event UnlockedReward(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) WatchUnlockedReward(opts *bind.WatchOpts, sink chan<- *StakingUnlockedReward, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "UnlockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingUnlockedReward)
				if err := _Staking.contract.UnpackLog(event, "UnlockedReward", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnlockedReward is a log parse operation binding the contract event 0x496a1c9a1a9ac29d87ecb4e563683ebd0ee80798869f36c86175059eb5dc7304.
//
// Solidity: event UnlockedReward(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) ParseUnlockedReward(log types.Log) (*StakingUnlockedReward, error) {
	event := new(StakingUnlockedReward)
	if err := _Staking.contract.UnpackLog(event, "UnlockedReward", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingUnlockedStakeIterator is returned from FilterUnlockedStake and is used to iterate over the raw logs and unpacked data for UnlockedStake events raised by the Staking contract.
type StakingUnlockedStakeIterator struct {
	Event *StakingUnlockedStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingUnlockedStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingUnlockedStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingUnlockedStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingUnlockedStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingUnlockedStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingUnlockedStake represents a UnlockedStake event raised by the Staking contract.
type StakingUnlockedStake struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterUnlockedStake is a free log retrieval operation binding the contract event 0x252a696583e35c4d61332829d3bb2a8236f2500140258f089951799c9b999a9c.
//
// Solidity: event UnlockedStake(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) FilterUnlockedStake(opts *bind.FilterOpts, who []common.Address) (*StakingUnlockedStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "UnlockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingUnlockedStakeIterator{contract: _Staking.contract, event: "UnlockedStake", logs: logs, sub: sub}, nil
}

// WatchUnlockedStake is a free log subscription operation binding the contract event 0x252a696583e35c4d61332829d3bb2a8236f2500140258f089951799c9b999a9c.
//
// Solidity: event UnlockedStake(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) WatchUnlockedStake(opts *bind.WatchOpts, sink chan<- *StakingUnlockedStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "UnlockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingUnlockedStake)
				if err := _Staking.contract.UnpackLog(event, "UnlockedStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnlockedStake is a log parse operation binding the contract event 0x252a696583e35c4d61332829d3bb2a8236f2500140258f089951799c9b999a9c.
//
// Solidity: event UnlockedStake(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) ParseUnlockedStake(log types.Log) (*StakingUnlockedStake, error) {
	event := new(StakingUnlockedStake)
	if err := _Staking.contract.UnpackLog(event, "UnlockedStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingEventsMetaData contains all meta data concerning the StakingEvents contract.
var StakingEventsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BurntStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"why\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Fined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockedReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockedStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"RequestedUnlockStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnlockedReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnlockedStake\",\"type\":\"event\"}]",
}

// StakingEventsABI is the input ABI used to generate the binding from.
// Deprecated: Use StakingEventsMetaData.ABI instead.
var StakingEventsABI = StakingEventsMetaData.ABI

// StakingEvents is an auto generated Go binding around an Ethereum contract.
type StakingEvents struct {
	StakingEventsCaller     // Read-only binding to the contract
	StakingEventsTransactor // Write-only binding to the contract
	StakingEventsFilterer   // Log filterer for contract events
}

// StakingEventsCaller is an auto generated read-only Go binding around an Ethereum contract.
type StakingEventsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingEventsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StakingEventsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingEventsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StakingEventsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingEventsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StakingEventsSession struct {
	Contract     *StakingEvents    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StakingEventsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StakingEventsCallerSession struct {
	Contract *StakingEventsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// StakingEventsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StakingEventsTransactorSession struct {
	Contract     *StakingEventsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// StakingEventsRaw is an auto generated low-level Go binding around an Ethereum contract.
type StakingEventsRaw struct {
	Contract *StakingEvents // Generic contract binding to access the raw methods on
}

// StakingEventsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StakingEventsCallerRaw struct {
	Contract *StakingEventsCaller // Generic read-only contract binding to access the raw methods on
}

// StakingEventsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StakingEventsTransactorRaw struct {
	Contract *StakingEventsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStakingEvents creates a new instance of StakingEvents, bound to a specific deployed contract.
func NewStakingEvents(address common.Address, backend bind.ContractBackend) (*StakingEvents, error) {
	contract, err := bindStakingEvents(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StakingEvents{StakingEventsCaller: StakingEventsCaller{contract: contract}, StakingEventsTransactor: StakingEventsTransactor{contract: contract}, StakingEventsFilterer: StakingEventsFilterer{contract: contract}}, nil
}

// NewStakingEventsCaller creates a new read-only instance of StakingEvents, bound to a specific deployed contract.
func NewStakingEventsCaller(address common.Address, caller bind.ContractCaller) (*StakingEventsCaller, error) {
	contract, err := bindStakingEvents(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StakingEventsCaller{contract: contract}, nil
}

// NewStakingEventsTransactor creates a new write-only instance of StakingEvents, bound to a specific deployed contract.
func NewStakingEventsTransactor(address common.Address, transactor bind.ContractTransactor) (*StakingEventsTransactor, error) {
	contract, err := bindStakingEvents(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StakingEventsTransactor{contract: contract}, nil
}

// NewStakingEventsFilterer creates a new log filterer instance of StakingEvents, bound to a specific deployed contract.
func NewStakingEventsFilterer(address common.Address, filterer bind.ContractFilterer) (*StakingEventsFilterer, error) {
	contract, err := bindStakingEvents(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StakingEventsFilterer{contract: contract}, nil
}

// bindStakingEvents binds a generic wrapper to an already deployed contract.
func bindStakingEvents(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StakingEventsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakingEvents *StakingEventsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakingEvents.Contract.StakingEventsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakingEvents *StakingEventsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingEvents.Contract.StakingEventsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakingEvents *StakingEventsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakingEvents.Contract.StakingEventsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakingEvents *StakingEventsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakingEvents.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakingEvents *StakingEventsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingEvents.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakingEvents *StakingEventsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakingEvents.Contract.contract.Transact(opts, method, params...)
}

// StakingEventsBurntStakeIterator is returned from FilterBurntStake and is used to iterate over the raw logs and unpacked data for BurntStake events raised by the StakingEvents contract.
type StakingEventsBurntStakeIterator struct {
	Event *StakingEventsBurntStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingEventsBurntStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingEventsBurntStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingEventsBurntStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingEventsBurntStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingEventsBurntStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingEventsBurntStake represents a BurntStake event raised by the StakingEvents contract.
type StakingEventsBurntStake struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBurntStake is a free log retrieval operation binding the contract event 0x54420ac6a7570cfba30d2f88982f0749811f67103de3a63ad8b82cb754e8680e.
//
// Solidity: event BurntStake(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) FilterBurntStake(opts *bind.FilterOpts, who []common.Address) (*StakingEventsBurntStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.FilterLogs(opts, "BurntStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingEventsBurntStakeIterator{contract: _StakingEvents.contract, event: "BurntStake", logs: logs, sub: sub}, nil
}

// WatchBurntStake is a free log subscription operation binding the contract event 0x54420ac6a7570cfba30d2f88982f0749811f67103de3a63ad8b82cb754e8680e.
//
// Solidity: event BurntStake(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) WatchBurntStake(opts *bind.WatchOpts, sink chan<- *StakingEventsBurntStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.WatchLogs(opts, "BurntStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingEventsBurntStake)
				if err := _StakingEvents.contract.UnpackLog(event, "BurntStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurntStake is a log parse operation binding the contract event 0x54420ac6a7570cfba30d2f88982f0749811f67103de3a63ad8b82cb754e8680e.
//
// Solidity: event BurntStake(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) ParseBurntStake(log types.Log) (*StakingEventsBurntStake, error) {
	event := new(StakingEventsBurntStake)
	if err := _StakingEvents.contract.UnpackLog(event, "BurntStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingEventsFinedIterator is returned from FilterFined and is used to iterate over the raw logs and unpacked data for Fined events raised by the StakingEvents contract.
type StakingEventsFinedIterator struct {
	Event *StakingEventsFined // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingEventsFinedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingEventsFined)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingEventsFined)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingEventsFinedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingEventsFinedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingEventsFined represents a Fined event raised by the StakingEvents contract.
type StakingEventsFined struct {
	Who    common.Address
	Why    [32]byte
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterFined is a free log retrieval operation binding the contract event 0xf1254bf6cf04a475bd832353c2ccfc5e0d89e7b9c0f05a153ff897b6121b91e9.
//
// Solidity: event Fined(address indexed who, bytes32 why, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) FilterFined(opts *bind.FilterOpts, who []common.Address) (*StakingEventsFinedIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.FilterLogs(opts, "Fined", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingEventsFinedIterator{contract: _StakingEvents.contract, event: "Fined", logs: logs, sub: sub}, nil
}

// WatchFined is a free log subscription operation binding the contract event 0xf1254bf6cf04a475bd832353c2ccfc5e0d89e7b9c0f05a153ff897b6121b91e9.
//
// Solidity: event Fined(address indexed who, bytes32 why, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) WatchFined(opts *bind.WatchOpts, sink chan<- *StakingEventsFined, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.WatchLogs(opts, "Fined", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingEventsFined)
				if err := _StakingEvents.contract.UnpackLog(event, "Fined", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFined is a log parse operation binding the contract event 0xf1254bf6cf04a475bd832353c2ccfc5e0d89e7b9c0f05a153ff897b6121b91e9.
//
// Solidity: event Fined(address indexed who, bytes32 why, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) ParseFined(log types.Log) (*StakingEventsFined, error) {
	event := new(StakingEventsFined)
	if err := _StakingEvents.contract.UnpackLog(event, "Fined", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingEventsLockedRewardIterator is returned from FilterLockedReward and is used to iterate over the raw logs and unpacked data for LockedReward events raised by the StakingEvents contract.
type StakingEventsLockedRewardIterator struct {
	Event *StakingEventsLockedReward // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingEventsLockedRewardIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingEventsLockedReward)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingEventsLockedReward)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingEventsLockedRewardIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingEventsLockedRewardIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingEventsLockedReward represents a LockedReward event raised by the StakingEvents contract.
type StakingEventsLockedReward struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLockedReward is a free log retrieval operation binding the contract event 0x28dc9c0ffa672df041cad84edbee41508284600c9394bda0f8586d012c5e0915.
//
// Solidity: event LockedReward(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) FilterLockedReward(opts *bind.FilterOpts, who []common.Address) (*StakingEventsLockedRewardIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.FilterLogs(opts, "LockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingEventsLockedRewardIterator{contract: _StakingEvents.contract, event: "LockedReward", logs: logs, sub: sub}, nil
}

// WatchLockedReward is a free log subscription operation binding the contract event 0x28dc9c0ffa672df041cad84edbee41508284600c9394bda0f8586d012c5e0915.
//
// Solidity: event LockedReward(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) WatchLockedReward(opts *bind.WatchOpts, sink chan<- *StakingEventsLockedReward, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.WatchLogs(opts, "LockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingEventsLockedReward)
				if err := _StakingEvents.contract.UnpackLog(event, "LockedReward", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLockedReward is a log parse operation binding the contract event 0x28dc9c0ffa672df041cad84edbee41508284600c9394bda0f8586d012c5e0915.
//
// Solidity: event LockedReward(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) ParseLockedReward(log types.Log) (*StakingEventsLockedReward, error) {
	event := new(StakingEventsLockedReward)
	if err := _StakingEvents.contract.UnpackLog(event, "LockedReward", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingEventsLockedStakeIterator is returned from FilterLockedStake and is used to iterate over the raw logs and unpacked data for LockedStake events raised by the StakingEvents contract.
type StakingEventsLockedStakeIterator struct {
	Event *StakingEventsLockedStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingEventsLockedStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingEventsLockedStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingEventsLockedStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingEventsLockedStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingEventsLockedStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingEventsLockedStake represents a LockedStake event raised by the StakingEvents contract.
type StakingEventsLockedStake struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLockedStake is a free log retrieval operation binding the contract event 0x1de2f07b0a1c69916a8b25b889051644192307ea08444a2e11f8654d1db3ab0c.
//
// Solidity: event LockedStake(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) FilterLockedStake(opts *bind.FilterOpts, who []common.Address) (*StakingEventsLockedStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.FilterLogs(opts, "LockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingEventsLockedStakeIterator{contract: _StakingEvents.contract, event: "LockedStake", logs: logs, sub: sub}, nil
}

// WatchLockedStake is a free log subscription operation binding the contract event 0x1de2f07b0a1c69916a8b25b889051644192307ea08444a2e11f8654d1db3ab0c.
//
// Solidity: event LockedStake(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) WatchLockedStake(opts *bind.WatchOpts, sink chan<- *StakingEventsLockedStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.WatchLogs(opts, "LockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingEventsLockedStake)
				if err := _StakingEvents.contract.UnpackLog(event, "LockedStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLockedStake is a log parse operation binding the contract event 0x1de2f07b0a1c69916a8b25b889051644192307ea08444a2e11f8654d1db3ab0c.
//
// Solidity: event LockedStake(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) ParseLockedStake(log types.Log) (*StakingEventsLockedStake, error) {
	event := new(StakingEventsLockedStake)
	if err := _StakingEvents.contract.UnpackLog(event, "LockedStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingEventsRequestedUnlockStakeIterator is returned from FilterRequestedUnlockStake and is used to iterate over the raw logs and unpacked data for RequestedUnlockStake events raised by the StakingEvents contract.
type StakingEventsRequestedUnlockStakeIterator struct {
	Event *StakingEventsRequestedUnlockStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingEventsRequestedUnlockStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingEventsRequestedUnlockStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingEventsRequestedUnlockStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingEventsRequestedUnlockStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingEventsRequestedUnlockStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingEventsRequestedUnlockStake represents a RequestedUnlockStake event raised by the StakingEvents contract.
type StakingEventsRequestedUnlockStake struct {
	Who common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterRequestedUnlockStake is a free log retrieval operation binding the contract event 0x1fde0d8a6620647f5c7b5632a87b23101ba553c9b474caf1134fb24d92bf6ddc.
//
// Solidity: event RequestedUnlockStake(address indexed who)
func (_StakingEvents *StakingEventsFilterer) FilterRequestedUnlockStake(opts *bind.FilterOpts, who []common.Address) (*StakingEventsRequestedUnlockStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.FilterLogs(opts, "RequestedUnlockStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingEventsRequestedUnlockStakeIterator{contract: _StakingEvents.contract, event: "RequestedUnlockStake", logs: logs, sub: sub}, nil
}

// WatchRequestedUnlockStake is a free log subscription operation binding the contract event 0x1fde0d8a6620647f5c7b5632a87b23101ba553c9b474caf1134fb24d92bf6ddc.
//
// Solidity: event RequestedUnlockStake(address indexed who)
func (_StakingEvents *StakingEventsFilterer) WatchRequestedUnlockStake(opts *bind.WatchOpts, sink chan<- *StakingEventsRequestedUnlockStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.WatchLogs(opts, "RequestedUnlockStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingEventsRequestedUnlockStake)
				if err := _StakingEvents.contract.UnpackLog(event, "RequestedUnlockStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRequestedUnlockStake is a log parse operation binding the contract event 0x1fde0d8a6620647f5c7b5632a87b23101ba553c9b474caf1134fb24d92bf6ddc.
//
// Solidity: event RequestedUnlockStake(address indexed who)
func (_StakingEvents *StakingEventsFilterer) ParseRequestedUnlockStake(log types.Log) (*StakingEventsRequestedUnlockStake, error) {
	event := new(StakingEventsRequestedUnlockStake)
	if err := _StakingEvents.contract.UnpackLog(event, "RequestedUnlockStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingEventsUnlockedRewardIterator is returned from FilterUnlockedReward and is used to iterate over the raw logs and unpacked data for UnlockedReward events raised by the StakingEvents contract.
type StakingEventsUnlockedRewardIterator struct {
	Event *StakingEventsUnlockedReward // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingEventsUnlockedRewardIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingEventsUnlockedReward)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingEventsUnlockedReward)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingEventsUnlockedRewardIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingEventsUnlockedRewardIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingEventsUnlockedReward represents a UnlockedReward event raised by the StakingEvents contract.
type StakingEventsUnlockedReward struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterUnlockedReward is a free log retrieval operation binding the contract event 0x496a1c9a1a9ac29d87ecb4e563683ebd0ee80798869f36c86175059eb5dc7304.
//
// Solidity: event UnlockedReward(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) FilterUnlockedReward(opts *bind.FilterOpts, who []common.Address) (*StakingEventsUnlockedRewardIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.FilterLogs(opts, "UnlockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingEventsUnlockedRewardIterator{contract: _StakingEvents.contract, event: "UnlockedReward", logs: logs, sub: sub}, nil
}

// WatchUnlockedReward is a free log subscription operation binding the contract event 0x496a1c9a1a9ac29d87ecb4e563683ebd0ee80798869f36c86175059eb5dc7304.
//
// Solidity: event UnlockedReward(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) WatchUnlockedReward(opts *bind.WatchOpts, sink chan<- *StakingEventsUnlockedReward, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.WatchLogs(opts, "UnlockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingEventsUnlockedReward)
				if err := _StakingEvents.contract.UnpackLog(event, "UnlockedReward", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnlockedReward is a log parse operation binding the contract event 0x496a1c9a1a9ac29d87ecb4e563683ebd0ee80798869f36c86175059eb5dc7304.
//
// Solidity: event UnlockedReward(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) ParseUnlockedReward(log types.Log) (*StakingEventsUnlockedReward, error) {
	event := new(StakingEventsUnlockedReward)
	if err := _StakingEvents.contract.UnpackLog(event, "UnlockedReward", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingEventsUnlockedStakeIterator is returned from FilterUnlockedStake and is used to iterate over the raw logs and unpacked data for UnlockedStake events raised by the StakingEvents contract.
type StakingEventsUnlockedStakeIterator struct {
	Event *StakingEventsUnlockedStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingEventsUnlockedStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingEventsUnlockedStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingEventsUnlockedStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingEventsUnlockedStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingEventsUnlockedStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingEventsUnlockedStake represents a UnlockedStake event raised by the StakingEvents contract.
type StakingEventsUnlockedStake struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterUnlockedStake is a free log retrieval operation binding the contract event 0x252a696583e35c4d61332829d3bb2a8236f2500140258f089951799c9b999a9c.
//
// Solidity: event UnlockedStake(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) FilterUnlockedStake(opts *bind.FilterOpts, who []common.Address) (*StakingEventsUnlockedStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.FilterLogs(opts, "UnlockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingEventsUnlockedStakeIterator{contract: _StakingEvents.contract, event: "UnlockedStake", logs: logs, sub: sub}, nil
}

// WatchUnlockedStake is a free log subscription operation binding the contract event 0x252a696583e35c4d61332829d3bb2a8236f2500140258f089951799c9b999a9c.
//
// Solidity: event UnlockedStake(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) WatchUnlockedStake(opts *bind.WatchOpts, sink chan<- *StakingEventsUnlockedStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.WatchLogs(opts, "UnlockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingEventsUnlockedStake)
				if err := _StakingEvents.contract.UnpackLog(event, "UnlockedStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnlockedStake is a log parse operation binding the contract event 0x252a696583e35c4d61332829d3bb2a8236f2500140258f089951799c9b999a9c.
//
// Solidity: event UnlockedStake(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) ParseUnlockedStake(log types.Log) (*StakingEventsUnlockedStake, error) {
	event := new(StakingEventsUnlockedStake)
	if err := _StakingEvents.contract.UnpackLog(event, "UnlockedStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingFacetMetaData contains all meta data concerning the StakingFacet contract.
var StakingFacetMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"balanceReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceRewardFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceStakeFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceUnlocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceUnlockedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceUnlockedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceUnlockedRewardFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"why\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fine\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractRegistry\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"initializeStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockEpoch\",\"type\":\"uint256\"}],\"name\":\"lockRewardFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lockStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lockStakeFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"majorFine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"majorStakeFine\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"minorFine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minorStakeFine\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestUnlockStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"requestUnlockStakeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochDelay\",\"type\":\"uint256\"}],\"name\":\"setEpochDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_majorStakeFine\",\"type\":\"uint256\"}],\"name\":\"setMajorStakeFine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumStake\",\"type\":\"uint256\"}],\"name\":\"setMinimumStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minorStakeFine\",\"type\":\"uint256\"}],\"name\":\"setMinorStakeFine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"}],\"name\":\"setRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardBonus\",\"type\":\"uint256\"}],\"name\":\"setRewardBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"unlockRewardFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlockStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlockStakeFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
<<<<<<< Updated upstream
	Bin: "0x60806040523480156200001157600080fd5b506000620000296200007560201b620025c11760201c565b9050338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620000a2565b6000807f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90508091505090565b61444180620000b26000396000f3fe608060405234801561001057600080fd5b50600436106102e95760003560e01c80639fb69b4311610191578063e29dda92116100e3578063f1b7f4bf11610097578063f95d80fa11610071578063f95d80fa14610844578063fad8b32a14610860578063fdf553cf1461087c576102e9565b8063f1b7f4bf146107d8578063f50ddb67146107f6578063f7b2a7be14610826576102e9565b8063ec5ffac2116100c8578063ec5ffac21461075a578063ecd8c06a14610778578063ee220d8d146107a8576102e9565b8063e29dda921461070e578063e348da131461073e576102e9565b8063bd695a4311610145578063d2a2c55c1161011f578063d2a2c55c146106a6578063db518db2146106c2578063dc978059146106f2576102e9565b8063bd695a4314610662578063be9a65551461067e578063c328b46414610688576102e9565b8063ab033ea911610176578063ab033ea91461061e578063ad43d8451461063a578063aeaf881214610658576102e9565b80639fb69b43146105e4578063a8a65a7814610602576102e9565b8063515c31a11161024a5780636d059126116101fe57806389afcb44116101d857806389afcb44146105665780638aa2799c146105965780639be5d83e146105b4576102e9565b80636d059126146104fc57806378146c2f1461051a5780637f91bd6914610536576102e9565b806357b4f82a1161022f57806357b4f82a146104b85780635b6a0d1e146104d457806360536172146104f2576102e9565b8063515c31a114610458578063523a3f0814610488576102e9565b80632e1a7d4d116102a157806335ba4daf1161028657806335ba4daf146103dc578063461cbdcf1461040c5780634fcf2b721461043c576102e9565b80632e1a7d4d1461037c5780632e713306146103ac576102e9565b80630ddb07ad116102d25780630ddb07ad14610314578063233e99031461034457806329693c5c14610360576102e9565b806304ad7a83146102ee57806307da68f51461030a575b600080fd5b610308600480360381019061030391906135f3565b61089a565b005b610312610dea565b005b61032e60048036038101906103299190613682565b610e87565b60405161033b91906136f0565b60405180910390f35b61035e6004803603810190610359919061370b565b610f96565b005b61037a6004803603810190610375919061370b565b611044565b005b6103966004803603810190610391919061370b565b6110f2565b6040516103a391906136f0565b60405180910390f35b6103c660048036038101906103c19190613738565b611163565b6040516103d39190613774565b60405180910390f35b6103f660048036038101906103f19190613738565b611175565b6040516104039190613774565b60405180910390f35b6104266004803603810190610421919061378f565b611187565b60405161043391906136f0565b60405180910390f35b61045660048036038101906104519190613738565b611294565b005b610472600480360381019061046d9190613738565b61139a565b60405161047f9190613774565b60405180910390f35b6104a2600480360381019061049d919061370b565b6113ac565b6040516104af91906136f0565b60405180910390f35b6104d260048036038101906104cd9190613738565b61141c565b005b6104dc6114ee565b6040516104e99190613774565b60405180910390f35b6104fa6114fe565b005b610504611609565b6040516105119190613774565b60405180910390f35b610534600480360381019061052f919061370b565b61161c565b005b610550600480360381019061054b9190613738565b6116ca565b60405161055d91906136f0565b60405180910390f35b610580600480360381019061057b9190613738565b6117d5565b60405161058d91906136f0565b60405180910390f35b61059e6118e0565b6040516105ab9190613774565b60405180910390f35b6105ce60048036038101906105c99190613738565b6118f0565b6040516105db9190613774565b60405180910390f35b6105ec611902565b6040516105f99190613774565b60405180910390f35b61061c6004803603810190610617919061370b565b611912565b005b61063860048036038101906106339190613738565b6119c0565b005b610642611ab2565b60405161064f9190613774565b60405180910390f35b610660611ac5565b005b61067c6004803603810190610677919061370b565b611b2f565b005b610686611bd6565b005b610690611c73565b60405161069d9190613774565b60405180910390f35b6106c060048036038101906106bb9190613738565b611c83565b005b6106dc60048036038101906106d7919061378f565b611d55565b6040516106e991906136f0565b60405180910390f35b61070c60048036038101906107079190613738565b611dc7565b005b6107286004803603810190610723919061378f565b611eb9565b60405161073591906136f0565b60405180910390f35b61075860048036038101906107539190613738565b611fc6565b005b610762612125565b60405161076f9190613774565b60405180910390f35b610792600480360381019061078d919061370b565b612138565b60405161079f91906136f0565b60405180910390f35b6107c260048036038101906107bd9190613805565b6121a9565b6040516107cf91906136f0565b60405180910390f35b6107e06122b8565b6040516107ed91906136f0565b60405180910390f35b610810600480360381019061080b919061370b565b612326565b60405161081d91906136f0565b60405180910390f35b61082e612397565b60405161083b9190613774565b60405180910390f35b61085e6004803603810190610859919061370b565b6123aa565b005b61087a60048036038101906108759190613738565b612458565b005b6108846125ae565b6040516108919190613774565b60405180910390f35b60006108a46125c1565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610934576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092b906138db565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156109a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099b90613947565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff1663f67187ac6040518060400160405280600981526020017f657468646b672f763100000000000000000000000000000000000000000000008152506040518263ffffffff1660e01b8152600401610a1491906139ef565b602060405180830381865afa158015610a31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a559190613a26565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610ac7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610abe90613a9f565b60405180910390fd5b60008373ffffffffffffffffffffffffffffffffffffffff1663f67187ac6040518060400160405280600f81526020017f7374616b696e67546f6b656e2f763100000000000000000000000000000000008152506040518263ffffffff1660e01b8152600401610b3791906139ef565b602060405180830381865afa158015610b54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b789190613a26565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610bea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be190613b0b565b60405180910390fd5b60008473ffffffffffffffffffffffffffffffffffffffff1663f67187ac6040518060400160405280600f81526020017f7574696c697479546f6b656e2f763100000000000000000000000000000000008152506040518263ffffffff1660e01b8152600401610c5a91906139ef565b602060405180830381865afa158015610c77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9b9190613a26565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610d0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0490613b77565b60405180910390fd5b6000610d176125ee565b90508381600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550828160070160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818160080160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505050565b6000610df46125c1565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610e84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7b906138db565b60405180910390fd5b50565b600080610e926125c1565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610f22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f19906138db565b60405180910390fd5b6000610f2c61261b565b90508060000160009054906101000a900460ff1615610f80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7790613be3565b60405180910390fd5b610f8b868686612648565b925050509392505050565b6000610fa06125c1565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611030576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611027906138db565b60405180910390fd5b816110396125ee565b600001819055505050565b600061104e6125c1565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166110de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d5906138db565b60405180910390fd5b816110e76125ee565b600201819055505050565b6000806110fd61261b565b90508060000160009054906101000a900460ff1615611151576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114890613be3565b60405180910390fd5b61115b33846127f7565b915050919050565b600061116e8261295e565b9050919050565b6000611180826129b3565b9050919050565b6000806111926125c1565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611222576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611219906138db565b60405180910390fd5b600061122c61261b565b90508060000160009054906101000a900460ff1615611280576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127790613be3565b60405180910390fd5b61128a8585612a08565b9250505092915050565b600061129e6125c1565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661132e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611325906138db565b60405180910390fd5b600061133861261b565b90508060000160009054906101000a900460ff161561138c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138390613be3565b60405180910390fd5b61139583612bb6565b505050565b60006113a582612cd2565b9050919050565b6000806113b761261b565b90508060000160009054906101000a900460ff161561140b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161140290613be3565b60405180910390fd5b61141483612d27565b915050919050565b60006114266125ee565b905080600a0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146114ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114b190613c4f565b60405180910390fd5b6114e9827f6d616a6f720000000000000000000000000000000000000000000000000000008360010154612e8d565b505050565b60006114f93361295e565b905090565b60006115086125c1565b90508060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461159c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159390613ce1565b60405180910390fd5b8060020160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006116136125ee565b60020154905090565b60006116266125c1565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166116b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ad906138db565b60405180910390fd5b816116bf6125ee565b600101819055505050565b6000806116d56125c1565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611765576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161175c906138db565b60405180910390fd5b600061176f61261b565b90508060000160009054906101000a900460ff16156117c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117ba90613be3565b60405180910390fd5b6117cc84612f5b565b92505050919050565b6000806117e06125c1565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611870576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611867906138db565b60405180910390fd5b600061187a61261b565b90508060000160009054906101000a900460ff16156118ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118c590613be3565b60405180910390fd5b6118d7846130f5565b92505050919050565b60006118eb336129b3565b905090565b60006118fb826131b4565b9050919050565b600061190d336131b4565b905090565b600061191c6125c1565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166119ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119a3906138db565b60405180910390fd5b816119b56125ee565b600301819055505050565b60006119ca6125c1565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611a5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a5590613d73565b60405180910390fd5b6000611a686125c1565b9050828160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6000611abc6125ee565b60010154905090565b6000611acf61261b565b90508060000160009054906101000a900460ff1615611b23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b1a90613be3565b60405180910390fd5b611b2c33612bb6565b50565b6000611b396125c1565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611bc9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bc0906138db565b60405180910390fd5b611bd28261326c565b5050565b6000611be06125c1565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611c70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c67906138db565b60405180910390fd5b50565b6000611c7e33612cd2565b905090565b6000611c8d6125ee565b905080600a0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611d21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d1890613c4f565b60405180910390fd5b611d50827f6d696e6f720000000000000000000000000000000000000000000000000000008360020154612e8d565b505050565b600080611d6061261b565b90508060000160009054906101000a900460ff1615611db4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dab90613be3565b60405180910390fd5b611dbe84846127f7565b91505092915050565b6000611dd16125c1565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611e65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e5c90613d73565b60405180910390fd5b6000611e6f6125c1565b9050828160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b600080611ec46125c1565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611f54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f4b906138db565b60405180910390fd5b6000611f5e61261b565b90508060000160009054906101000a900460ff1615611fb2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fa990613be3565b60405180910390fd5b611fbc8585613285565b9250505092915050565b6000611fd06125c1565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061207b57508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6120ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120b190613e05565b60405180910390fd5b60006120c46125c1565b905060018160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b600061212f6125ee565b60000154905090565b60008061214361261b565b90508060000160009054906101000a900460ff1615612197576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161218e90613be3565b60405180910390fd5b6121a13384613285565b915050919050565b6000806121b46125c1565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16612244576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161223b906138db565b60405180910390fd5b600061224e61261b565b90508060000160009054906101000a900460ff16156122a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161229990613be3565b60405180910390fd5b6122ad868686612e8d565b925050509392505050565b6000806122c361261b565b90508060000160009054906101000a900460ff1615612317576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161230e90613be3565b60405180910390fd5b61232033612f5b565b91505090565b60008061233161261b565b90508060000160009054906101000a900460ff1615612385576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161237c90613be3565b60405180910390fd5b61238f3384612a08565b915050919050565b60006123a16125ee565b60030154905090565b60006123b46125c1565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16612444576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161243b906138db565b60405180910390fd5b8161244d6125ee565b600401819055505050565b60006124626125c1565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061250d57508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b61254c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161254390613e05565b60405180910390fd5b60006125566125c1565b90508060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff0219169055505050565b60006125b86125ee565b60040154905090565b6000807f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90508091505090565b6000807f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237ef90508091505090565b6000807fcab1f840c5079216f50ee5ceadd06b2639a4db685e2943cdfe10511c4e47eee490508091505090565b6000806126536125ee565b905060008160090160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506126a2613564565b858160000181815250508481602001818152505081600501819080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001556020820151816001015550508260080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1930886040518363ffffffff1660e01b8152600401612759929190613e34565b600060405180830381600087803b15801561277357600080fd5b505af1158015612787573d6000803e3d6000fd5b505050508673ffffffffffffffffffffffffffffffffffffffff167f28dc9c0ffa672df041cad84edbee41508284600c9394bda0f8586d012c5e0915876040516127d19190613774565b60405180910390a28160010160009054906101000a900460ff1693505050509392505050565b6000806128026125ee565b905060008160090160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508381600401541015612890576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161288790613ea9565b60405180910390fd5b6128a784826004015461347290919063ffffffff16565b81600401819055508160070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb86866040518363ffffffff1660e01b815260040161290e929190613e34565b6020604051808303816000875af115801561292d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129519190613ef5565b5060019250505092915050565b60006129686125ee565b60090160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401549050919050565b60006129bd6125ee565b60090160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050919050565b600080612a136125ee565b905060008160090160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050612a718482600001546134cb90919063ffffffff16565b81600001819055508473ffffffffffffffffffffffffffffffffffffffff167f1de2f07b0a1c69916a8b25b889051644192307ea08444a2e11f8654d1db3ab0c85604051612abf9190613774565b60405180910390a28160070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8630876040518463ffffffff1660e01b8152600401612b2893929190613f22565b6020604051808303816000875af1158015612b47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b6b9190613ef5565b612baa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ba190613fa5565b60405180910390fd5b60019250505092915050565b6000612bc06125ee565b905060008160090160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816000015411612c4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c4590614011565b60405180910390fd5b60018160010160006101000a81548160ff0219169083151502179055508160050154612c78613524565b612c829190614060565b81600201819055508273ffffffffffffffffffffffffffffffffffffffff167f1fde0d8a6620647f5c7b5632a87b23101ba553c9b474caf1134fb24d92bf6ddc60405160405180910390a2505050565b6000612cdc6125ee565b60090160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301549050919050565b600080612d326125ee565b905060008160090160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508381600301541015612dc0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612db790613ea9565b60405180910390fd5b612dd784826003015461347290919063ffffffff16565b81600301819055508160080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33866040518363ffffffff1660e01b8152600401612e3e929190613e34565b6020604051808303816000875af1158015612e5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e819190613ef5565b50600192505050919050565b600080612e986125ee565b905060008160090160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050612ef684826000015461347290919063ffffffff16565b81600001819055508573ffffffffffffffffffffffffffffffffffffffff167ff1254bf6cf04a475bd832353c2ccfc5e0d89e7b9c0f05a153ff897b6121b91e98686604051612f469291906140c5565b60405180910390a26001925050509392505050565b600080612f666125ee565b905060008160090160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816005019050600080600090505b82805490508110156130cf576000838281548110612fde57612fdd6140ee565b5b90600052602060002090600202019050612ff6613524565b8160010154116130bb578060000154836130109190614060565b92508360018580549050613024919061411d565b81548110613035576130346140ee565b5b9060005260206000209060020201848381548110613056576130556140ee565b5b906000526020600020906002020160008201548160000155600182015481600101559050508380548061308c5761308b614151565b5b600190038181906000526020600020906002020160008082016000905560018201600090555050905550612fbd565b81806130c690614180565b92505050612fbd565b8184600301546130df9190614060565b8460030181905550600195505050505050919050565b6000806131006125ee565b905060008160090160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600001549050600082600001819055508473ffffffffffffffffffffffffffffffffffffffff167f919f7e2092ffcc9d09f599be18d8152860b0c054df788a33bc549cdd9d0f15b1826040516131a09190613774565b60405180910390a260019350505050919050565b6000806131bf6125ee565b905060008160090160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600501905060005b81805490508110156132645761324f82828154811061322e5761322d6140ee565b5b906000526020600020906002020160000154856134cb90919063ffffffff16565b9350808061325c90614180565b91505061320c565b505050919050565b60006132766125ee565b90508181600501819055505050565b6000806132906125ee565b905060008160090160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060010160009054906101000a900460ff16613328576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161331f90614215565b60405180910390fd5b838160000154101561336f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613366906142a7565b60405180910390fd5b613377613524565b816002015411156133bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133b490614313565b60405180910390fd5b6133d48482600401546134cb90919063ffffffff16565b81600401819055506133f384826000015461347290919063ffffffff16565b816000018190555060008160010160006101000a81548160ff0219169083151502179055508473ffffffffffffffffffffffffffffffffffffffff167f252a696583e35c4d61332829d3bb2a8236f2500140258f089951799c9b999a9c8560405161345e9190613774565b60405180910390a260019250505092915050565b6000828284613481919061411d565b91508111156134c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134bc9061437f565b60405180910390fd5b92915050565b60008282846134da9190614060565b915081101561351e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613515906143eb565b60405180910390fd5b92915050565b600061352e613537565b60010154905090565b6000807fa53f90683b42ecb37674e5c8c5c9cabf849818fdc2fdfb57bbe3c738f7b50d0e90508091505090565b604051806040016040528060008152602001600081525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006135ae82613583565b9050919050565b60006135c0826135a3565b9050919050565b6135d0816135b5565b81146135db57600080fd5b50565b6000813590506135ed816135c7565b92915050565b6000602082840312156136095761360861357e565b5b6000613617848285016135de565b91505092915050565b613629816135a3565b811461363457600080fd5b50565b60008135905061364681613620565b92915050565b6000819050919050565b61365f8161364c565b811461366a57600080fd5b50565b60008135905061367c81613656565b92915050565b60008060006060848603121561369b5761369a61357e565b5b60006136a986828701613637565b93505060206136ba8682870161366d565b92505060406136cb8682870161366d565b9150509250925092565b60008115159050919050565b6136ea816136d5565b82525050565b600060208201905061370560008301846136e1565b92915050565b6000602082840312156137215761372061357e565b5b600061372f8482850161366d565b91505092915050565b60006020828403121561374e5761374d61357e565b5b600061375c84828501613637565b91505092915050565b61376e8161364c565b82525050565b60006020820190506137896000830184613765565b92915050565b600080604083850312156137a6576137a561357e565b5b60006137b485828601613637565b92505060206137c58582860161366d565b9150509250929050565b6000819050919050565b6137e2816137cf565b81146137ed57600080fd5b50565b6000813590506137ff816137d9565b92915050565b60008060006060848603121561381e5761381d61357e565b5b600061382c86828701613637565b935050602061383d868287016137f0565b925050604061384e8682870161366d565b9150509250925092565b600082825260208201905092915050565b7f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160008201527f6c6c6f7765640000000000000000000000000000000000000000000000000000602082015250565b60006138c5602683613858565b91506138d082613869565b604082019050919050565b600060208201905081810360008301526138f4816138b8565b9050919050565b7f6e696c2072656769737472792061646472657373000000000000000000000000600082015250565b6000613931601483613858565b915061393c826138fb565b602082019050919050565b6000602082019050818103600083015261396081613924565b9050919050565b600081519050919050565b60005b83811015613990578082015181840152602081019050613975565b8381111561399f576000848401525b50505050565b6000601f19601f8301169050919050565b60006139c182613967565b6139cb8185613858565b93506139db818560208601613972565b6139e4816139a5565b840191505092915050565b60006020820190508181036000830152613a0981846139b6565b905092915050565b600081519050613a2081613620565b92915050565b600060208284031215613a3c57613a3b61357e565b5b6000613a4a84828501613a11565b91505092915050565b7f6e696c20657468646b6720616464726573730000000000000000000000000000600082015250565b6000613a89601283613858565b9150613a9482613a53565b602082019050919050565b60006020820190508181036000830152613ab881613a7c565b9050919050565b7f6e696c207374616b696e6720546f6b656e000000000000000000000000000000600082015250565b6000613af5601183613858565b9150613b0082613abf565b602082019050919050565b60006020820190508181036000830152613b2481613ae8565b9050919050565b7f6e696c207574696c69747920546f6b656e000000000000000000000000000000600082015250565b6000613b61601183613858565b9150613b6c82613b2b565b602082019050919050565b60006020820190508181036000830152613b9081613b54565b9050919050565b7f69732073746f7070656400000000000000000000000000000000000000000000600082015250565b6000613bcd600a83613858565b9150613bd882613b97565b602082019050919050565b60006020820190508181036000830152613bfc81613bc0565b9050919050565b7f6f6e6c7920616c6c6f7765642066726f6d20657468646b670000000000000000600082015250565b6000613c39601883613858565b9150613c4482613c03565b602082019050919050565b60006020820190508181036000830152613c6881613c2c565b9050919050565b7f41636365737320436f6e74726f6c3a206f776e657273686970206e6f7420677260008201527f616e746564000000000000000000000000000000000000000000000000000000602082015250565b6000613ccb602583613858565b9150613cd682613c6f565b604082019050919050565b60006020820190508181036000830152613cfa81613cbe565b9050919050565b7f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60008201527f6c6f776564000000000000000000000000000000000000000000000000000000602082015250565b6000613d5d602583613858565b9150613d6882613d01565b604082019050919050565b60006020820190508181036000830152613d8c81613d50565b9050919050565b7f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060008201527f657261746f7220616c6c6f776564000000000000000000000000000000000000602082015250565b6000613def602e83613858565b9150613dfa82613d93565b604082019050919050565b60006020820190508181036000830152613e1e81613de2565b9050919050565b613e2e816135a3565b82525050565b6000604082019050613e496000830185613e25565b613e566020830184613765565b9392505050565b7f496e73756666696369656e7420756e6c6f636b65642062616c616e63652e0000600082015250565b6000613e93601e83613858565b9150613e9e82613e5d565b602082019050919050565b60006020820190508181036000830152613ec281613e86565b9050919050565b613ed2816136d5565b8114613edd57600080fd5b50565b600081519050613eef81613ec9565b92915050565b600060208284031215613f0b57613f0a61357e565b5b6000613f1984828501613ee0565b91505092915050565b6000606082019050613f376000830186613e25565b613f446020830185613e25565b613f516040830184613765565b949350505050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b6000613f8f600f83613858565b9150613f9a82613f59565b602082019050919050565b60006020820190508181036000830152613fbe81613f82565b9050919050565b7f4e6f207374616b65000000000000000000000000000000000000000000000000600082015250565b6000613ffb600883613858565b915061400682613fc5565b602082019050919050565b6000602082019050818103600083015261402a81613fee565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061406b8261364c565b91506140768361364c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156140ab576140aa614031565b5b828201905092915050565b6140bf816137cf565b82525050565b60006040820190506140da60008301856140b6565b6140e76020830184613765565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006141288261364c565b91506141338361364c565b92508282101561414657614145614031565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600061418b8261364c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156141be576141bd614031565b5b600182019050919050565b7f5374616b6520756e6c6f636b206e6f7420726571756573746564000000000000600082015250565b60006141ff601a83613858565b915061420a826141c9565b602082019050919050565b6000602082019050818103600083015261422e816141f2565b9050919050565b7f5374616b6520756e6c6f636b207265717565737465642067726561746572207460008201527f68616e207374616b650000000000000000000000000000000000000000000000602082015250565b6000614291602983613858565b915061429c82614235565b604082019050919050565b600060208201905081810360008301526142c081614284565b9050919050565b7f4e6f742072656164790000000000000000000000000000000000000000000000600082015250565b60006142fd600983613858565b9150614308826142c7565b602082019050919050565b6000602082019050818103600083015261432c816142f0565b9050919050565b7f64732d6d6174682d7375622d756e646572666c6f770000000000000000000000600082015250565b6000614369601583613858565b915061437482614333565b602082019050919050565b600060208201905081810360008301526143988161435c565b9050919050565b7f64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000600082015250565b60006143d5601483613858565b91506143e08261439f565b602082019050919050565b60006020820190508181036000830152614404816143c8565b905091905056fea2646970667358221220341ff06f540903a4b0c98512a9d3f67bc9f17b253fa1b0c9a32dad4c67e0614064736f6c634300080b0033",
=======
	Bin: "0x60806040523480156200001157600080fd5b506000620000296200004360201b62002a221760201c565b60010180546001600160a01b031916331790555062000067565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90565b613bda80620000776000396000f3fe608060405234801561001057600080fd5b50600436106102e95760003560e01c80639fb69b4311610191578063e29dda92116100e3578063f1b7f4bf11610097578063f95d80fa11610071578063f95d80fa1461065b578063fad8b32a1461066e578063fdf553cf1461068157600080fd5b8063f1b7f4bf14610619578063f50ddb6714610621578063f7b2a7be1461063457600080fd5b8063ec5ffac2116100c8578063ec5ffac2146105cc578063ecd8c06a146105f3578063ee220d8d1461060657600080fd5b8063e29dda92146105a6578063e348da13146105b957600080fd5b8063bd695a4311610145578063d2a2c55c1161011f578063d2a2c55c1461056d578063db518db214610580578063dc9780591461059357600080fd5b8063bd695a4314610523578063be9a655514610303578063c328b4641461053657600080fd5b8063ab033ea911610176578063ab033ea914610500578063ad43d84514610513578063aeaf88121461051b57600080fd5b80639fb69b43146104e5578063a8a65a78146104ed57600080fd5b8063515c31a11161024a5780636d059126116101fe57806389afcb44116101d857806389afcb441461048b5780638aa2799c1461049e5780639be5d83e146104d257600080fd5b80636d0591261461043e57806378146c2f146104655780637f91bd691461047857600080fd5b806357b4f82a1161022f57806357b4f82a146103ec5780635b6a0d1e146103ff578063605361721461043657600080fd5b8063515c31a1146103c6578063523a3f08146103d957600080fd5b80632e1a7d4d116102a157806335ba4daf1161028657806335ba4daf1461038d578063461cbdcf146103a05780634fcf2b72146103b357600080fd5b80632e1a7d4d146103595780632e7133061461036c57600080fd5b80630ddb07ad116102d25780630ddb07ad1461030b578063233e99031461033357806329693c5c1461034657600080fd5b806304ad7a83146102ee57806307da68f514610303575b600080fd5b6103016102fc366004613966565b6106a8565b005b610301610c7d565b61031e610319366004613983565b610d41565b60405190151581526020015b60405180910390f35b6103016103413660046139b8565b610ea3565b6103016103543660046139b8565b610f89565b61031e6103673660046139b8565b61106f565b61037f61037a366004613966565b611111565b60405190815260200161032a565b61037f61039b366004613966565b611160565b61031e6103ae3660046139d1565b6111aa565b6103016103c1366004613966565b61130a565b61037f6103d4366004613966565b611466565b61031e6103e73660046139b8565b6114b3565b6103016103fa366004613966565b61154d565b3360009081527f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f8602052604090206004015461037f565b610301611643565b7f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f15461037f565b6103016104733660046139b8565b611768565b61031e610486366004613966565b61184e565b61031e610499366004613966565b6119ac565b3360009081527f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f8602052604090205461037f565b61037f6104e0366004613966565b611b02565b61037f611b0d565b6103016104fb3660046139b8565b611b18565b61030161050e366004613966565b611bfe565b61037f611d4d565b610301611d7a565b6103016105313660046139b8565b611e10565b3360009081527f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f8602052604090206003015461037f565b61030161057b366004613966565b611efd565b61031e61058e3660046139d1565b611fee565b6103016105a1366004613966565b612089565b61031e6105b43660046139d1565b6121d8565b6103016105c7366004613966565b61232f565b7f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237ef5461037f565b61031e6106013660046139b8565b6124a0565b61031e610614366004613983565b61253b565b61031e612693565b61031e61062f3660046139b8565b612733565b7f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f25461037f565b6103016106693660046139b8565b6127ce565b61030161067c366004613966565b6128b4565b7f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f35461037f565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a602081905260409091205460ff1661076e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f776564000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82166107eb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f6e696c20726567697374727920616464726573730000000000000000000000006044820152606401610765565b604080518082018252600981527f657468646b672f76310000000000000000000000000000000000000000000000602082015290517ff67187ac00000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff85169163f67187ac91610870916004016139fd565b602060405180830381865afa15801561088d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b19190613a70565b905073ffffffffffffffffffffffffffffffffffffffff8116610930576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f6e696c20657468646b67206164647265737300000000000000000000000000006044820152606401610765565b604080518082018252600f81527f7374616b696e67546f6b656e2f76310000000000000000000000000000000000602082015290517ff67187ac00000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff86169163f67187ac916109b5916004016139fd565b602060405180830381865afa1580156109d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f69190613a70565b905073ffffffffffffffffffffffffffffffffffffffff8116610a75576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6e696c207374616b696e6720546f6b656e0000000000000000000000000000006044820152606401610765565b604080518082018252600f81527f7574696c697479546f6b656e2f76310000000000000000000000000000000000602082015290517ff67187ac00000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff87169163f67187ac91610afa916004016139fd565b602060405180830381865afa158015610b17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3b9190613a70565b905073ffffffffffffffffffffffffffffffffffffffff8116610bba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6e696c207574696c69747920546f6b656e0000000000000000000000000000006044820152606401610765565b7f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f9805473ffffffffffffffffffffffffffffffffffffffff9485167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216179091557f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f68054938516938216939093179092557f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f780549190931691161790555050565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a602081905260409091205460ff16610d3e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f77656400000000000000000000000000000000000000000000000000006064820152608401610765565b50565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020819052604082205460ff16610e01576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f77656400000000000000000000000000000000000000000000000000006064820152608401610765565b7fcab1f840c5079216f50ee5ceadd06b2639a4db685e2943cdfe10511c4e47eee4805460ff1615610e8e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f69732073746f70706564000000000000000000000000000000000000000000006044820152606401610765565b610e99868686612a46565b9695505050505050565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a602081905260409091205460ff16610f64576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f77656400000000000000000000000000000000000000000000000000006064820152608401610765565b507f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237ef55565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a602081905260409091205460ff1661104a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f77656400000000000000000000000000000000000000000000000000006064820152608401610765565b507f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f155565b7fcab1f840c5079216f50ee5ceadd06b2639a4db685e2943cdfe10511c4e47eee480546000919060ff1615611100576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f69732073746f70706564000000000000000000000000000000000000000000006044820152606401610765565b61110a3384612ba9565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081527f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f860205260408120600401545b92915050565b73ffffffffffffffffffffffffffffffffffffffff811660009081527f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f8602052604081205461115a565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020819052604082205460ff1661126a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f77656400000000000000000000000000000000000000000000000000006064820152608401610765565b7fcab1f840c5079216f50ee5ceadd06b2639a4db685e2943cdfe10511c4e47eee4805460ff16156112f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f69732073746f70706564000000000000000000000000000000000000000000006044820152606401610765565b6113018585612d42565b95945050505050565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a602081905260409091205460ff166113cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f77656400000000000000000000000000000000000000000000000000006064820152608401610765565b7fcab1f840c5079216f50ee5ceadd06b2639a4db685e2943cdfe10511c4e47eee4805460ff1615611458576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f69732073746f70706564000000000000000000000000000000000000000000006044820152606401610765565b61146183612f18565b505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081527f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f8602052604081206003015461115a565b7fcab1f840c5079216f50ee5ceadd06b2639a4db685e2943cdfe10511c4e47eee480546000919060ff1615611544576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f69732073746f70706564000000000000000000000000000000000000000000006044820152606401610765565b61110a83613077565b7f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f9547f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237ef9073ffffffffffffffffffffffffffffffffffffffff16331461160f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6f6e6c7920616c6c6f7765642066726f6d20657468646b6700000000000000006044820152606401610765565b611461827f6d616a6f7200000000000000000000000000000000000000000000000000000083600101546131e7565b905090565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520c547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff16331461172b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f776e657273686970206e6f7420677260448201527f616e7465640000000000000000000000000000000000000000000000000000006064820152608401610765565b6002810180547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169091556001909101805490911633179055565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a602081905260409091205460ff16611829576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f77656400000000000000000000000000000000000000000000000000006064820152608401610765565b507f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f055565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020819052604082205460ff1661190e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f77656400000000000000000000000000000000000000000000000000006064820152608401610765565b7fcab1f840c5079216f50ee5ceadd06b2639a4db685e2943cdfe10511c4e47eee4805460ff161561199b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f69732073746f70706564000000000000000000000000000000000000000000006044820152606401610765565b6119a4846132b9565b949350505050565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020819052604082205460ff16611a6c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f77656400000000000000000000000000000000000000000000000000006064820152608401610765565b7fcab1f840c5079216f50ee5ceadd06b2639a4db685e2943cdfe10511c4e47eee4805460ff1615611af9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f69732073746f70706564000000000000000000000000000000000000000000006044820152606401610765565b6119a48461345d565b600061115a826134f2565b600061163e336134f2565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a602081905260409091205460ff16611bd9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f77656400000000000000000000000000000000000000000000000000006064820152608401610765565b507f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f255565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff163314611ce6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60448201527f6c6f7765640000000000000000000000000000000000000000000000000000006064820152608401610765565b507f31434318735a8e6385da596be365952169e52986860b974818986b522d23520d80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60007f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237ef5b60010154905090565b7fcab1f840c5079216f50ee5ceadd06b2639a4db685e2943cdfe10511c4e47eee4805460ff1615611e07576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f69732073746f70706564000000000000000000000000000000000000000000006044820152606401610765565b610d3e33612f18565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a602081905260409091205460ff16611ed1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f77656400000000000000000000000000000000000000000000000000006064820152608401610765565b611ef9827f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f455565b5050565b7f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f9547f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237ef9073ffffffffffffffffffffffffffffffffffffffff163314611fbf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6f6e6c7920616c6c6f7765642066726f6d20657468646b6700000000000000006044820152606401610765565b611461827f6d696e6f7200000000000000000000000000000000000000000000000000000083600201546131e7565b7fcab1f840c5079216f50ee5ceadd06b2639a4db685e2943cdfe10511c4e47eee480546000919060ff161561207f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f69732073746f70706564000000000000000000000000000000000000000000006044820152606401610765565b6119a48484612ba9565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff163314612171576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60448201527f6c6f7765640000000000000000000000000000000000000000000000000000006064820152608401610765565b507f31434318735a8e6385da596be365952169e52986860b974818986b522d23520c80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020819052604082205460ff16612298576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f77656400000000000000000000000000000000000000000000000000006064820152608401610765565b7fcab1f840c5079216f50ee5ceadd06b2639a4db685e2943cdfe10511c4e47eee4805460ff1615612325576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f69732073746f70706564000000000000000000000000000000000000000000006044820152606401610765565b61130185856135af565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff163314806123a557503360009081526020829052604090205460ff165b612431576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060448201527f657261746f7220616c6c6f7765640000000000000000000000000000000000006064820152608401610765565b5073ffffffffffffffffffffffffffffffffffffffff1660009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b7fcab1f840c5079216f50ee5ceadd06b2639a4db685e2943cdfe10511c4e47eee480546000919060ff1615612531576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f69732073746f70706564000000000000000000000000000000000000000000006044820152606401610765565b61110a33846135af565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020819052604082205460ff166125fb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f77656400000000000000000000000000000000000000000000000000006064820152608401610765565b7fcab1f840c5079216f50ee5ceadd06b2639a4db685e2943cdfe10511c4e47eee4805460ff1615612688576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f69732073746f70706564000000000000000000000000000000000000000000006044820152606401610765565b610e998686866131e7565b7fcab1f840c5079216f50ee5ceadd06b2639a4db685e2943cdfe10511c4e47eee480546000919060ff1615612724576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f69732073746f70706564000000000000000000000000000000000000000000006044820152606401610765565b61272d336132b9565b91505090565b7fcab1f840c5079216f50ee5ceadd06b2639a4db685e2943cdfe10511c4e47eee480546000919060ff16156127c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f69732073746f70706564000000000000000000000000000000000000000000006044820152606401610765565b61110a3384612d42565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a602081905260409091205460ff1661288f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f77656400000000000000000000000000000000000000000000000000006064820152608401610765565b507f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f355565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff1633148061292a57503360009081526020829052604090205460ff165b6129b6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060448201527f657261746f7220616c6c6f7765640000000000000000000000000000000000006064820152608401610765565b5073ffffffffffffffffffffffffffffffffffffffff1660009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90565b6000807f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237ef73ffffffffffffffffffffffffffffffffffffffff86811660009081526009830160209081526040808320815180830183528a81528084018a815260058301805460018082018355918852959096208251600290960201948555519390940192909255600885015490517f40c10f19000000000000000000000000000000000000000000000000000000008152306004820152602481018a90529495509093919216906340c10f1990604401600060405180830381600087803b158015612b3057600080fd5b505af1158015612b44573d6000803e3d6000fd5b505050508673ffffffffffffffffffffffffffffffffffffffff167f28dc9c0ffa672df041cad84edbee41508284600c9394bda0f8586d012c5e091587604051612b9091815260200190565b60405180910390a2506001015460ff1695945050505050565b73ffffffffffffffffffffffffffffffffffffffff821660009081527f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f86020526040812060048101547f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237ef9190841115612c7e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f496e73756666696369656e7420756e6c6f636b65642062616c616e63652e00006044820152606401610765565b6004810154612c8d908561382c565b60048281019190915560078301546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff888116938201939093526024810187905291169063a9059cbb906044016020604051808303816000875af1158015612d12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d369190613a8d565b50600195945050505050565b73ffffffffffffffffffffffffffffffffffffffff821660009081527f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f86020526040812080547f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237ef9190612db590856138a4565b815560405184815273ffffffffffffffffffffffffffffffffffffffff8616907f1de2f07b0a1c69916a8b25b889051644192307ea08444a2e11f8654d1db3ab0c9060200160405180910390a260078201546040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015230602483015260448201879052909116906323b872dd906064016020604051808303816000875af1158015612e83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ea79190613a8d565b612f0d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5472616e73666572206661696c656400000000000000000000000000000000006044820152606401610765565b506001949350505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081527f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f86020526040902080547f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237ef9190612fe7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4e6f207374616b650000000000000000000000000000000000000000000000006044820152606401610765565b600181810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169091179055600582015461302261391c565b61302c9190613ade565b600282015560405173ffffffffffffffffffffffffffffffffffffffff8416907f1fde0d8a6620647f5c7b5632a87b23101ba553c9b474caf1134fb24d92bf6ddc90600090a2505050565b3360009081527f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f86020526040812060038101547f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237ef9190841115613136576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f496e73756666696369656e7420756e6c6f636b65642062616c616e63652e00006044820152606401610765565b6003810154613145908561382c565b600382015560088201546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810186905273ffffffffffffffffffffffffffffffffffffffff9091169063a9059cbb906044016020604051808303816000875af11580156131c3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f0d9190613a8d565b73ffffffffffffffffffffffffffffffffffffffff831660009081527f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f86020526040812080547f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237ef919061325a908561382c565b8155604080518681526020810186905273ffffffffffffffffffffffffffffffffffffffff8816917ff1254bf6cf04a475bd832353c2ccfc5e0d89e7b9c0f05a153ff897b6121b91e9910160405180910390a250600195945050505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081527f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f8602052604081207f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237ef906005810183805b825481101561343857600083828154811061334357613343613af6565b9060005260206000209060020201905061335b61391c565b8160010154116134255780546133719084613ade565b8454909350849061338490600190613b25565b8154811061339457613394613af6565b90600052602060002090600202018483815481106133b4576133b4613af6565b60009182526020909120825460029092020190815560019182015491015583548490806133e3576133e3613b3c565b60008281526020812060027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9093019283020181815560010155905550613326565b8161342f81613b6b565b92505050613326565b8184600301546134489190613ade565b60039094019390935550600195945050505050565b6000807f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237ef73ffffffffffffffffffffffffffffffffffffffff84166000818152600983016020908152604080832080549381559051838152949550939192917f919f7e2092ffcc9d09f599be18d8152860b0c054df788a33bc549cdd9d0f15b1910160405180910390a2506001949350505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081527f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f8602052604081207f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237ef90600501825b81548110156135a75761359382828154811061357b5761357b613af6565b600091825260209091206002909102015485906138a4565b93508061359f81613b6b565b91505061355d565b505050919050565b73ffffffffffffffffffffffffffffffffffffffff821660009081527f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f86020526040812060018101547f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237ef919060ff16613684576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f5374616b6520756e6c6f636b206e6f74207265717565737465640000000000006044820152606401610765565b8054841115613715576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f5374616b6520756e6c6f636b207265717565737465642067726561746572207460448201527f68616e207374616b6500000000000000000000000000000000000000000000006064820152608401610765565b61371d61391c565b8160020154111561378a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f7420726561647900000000000000000000000000000000000000000000006044820152606401610765565b600481015461379990856138a4565b600482015580546137aa908561382c565b81556001810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905560405184815273ffffffffffffffffffffffffffffffffffffffff8616907f252a696583e35c4d61332829d3bb2a8236f2500140258f089951799c9b999a9c9060200160405180910390a2506001949350505050565b6000826138398382613b25565b915081111561115a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f64732d6d6174682d7375622d756e646572666c6f7700000000000000000000006044820152606401610765565b6000826138b18382613ade565b915081101561115a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f770000000000000000000000006044820152606401610765565b60007fa53f90683b42ecb37674e5c8c5c9cabf849818fdc2fdfb57bbe3c738f7b50d0e611d71565b73ffffffffffffffffffffffffffffffffffffffff81168114610d3e57600080fd5b60006020828403121561397857600080fd5b813561110a81613944565b60008060006060848603121561399857600080fd5b83356139a381613944565b95602085013595506040909401359392505050565b6000602082840312156139ca57600080fd5b5035919050565b600080604083850312156139e457600080fd5b82356139ef81613944565b946020939093013593505050565b600060208083528351808285015260005b81811015613a2a57858101830151858201604001528201613a0e565b81811115613a3c576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b600060208284031215613a8257600080fd5b815161110a81613944565b600060208284031215613a9f57600080fd5b8151801515811461110a57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115613af157613af1613aaf565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082821015613b3757613b37613aaf565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613b9d57613b9d613aaf565b506001019056fea2646970667358221220e8ccf6fa441ea2370780e4af18677c568a5de51361938867e8c92e33f1b2940564736f6c634300080b0033",
>>>>>>> Stashed changes
}

// StakingFacetABI is the input ABI used to generate the binding from.
// Deprecated: Use StakingFacetMetaData.ABI instead.
var StakingFacetABI = StakingFacetMetaData.ABI

// StakingFacetBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StakingFacetMetaData.Bin instead.
var StakingFacetBin = StakingFacetMetaData.Bin

// DeployStakingFacet deploys a new Ethereum contract, binding an instance of StakingFacet to it.
func DeployStakingFacet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *StakingFacet, error) {
	parsed, err := StakingFacetMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StakingFacetBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StakingFacet{StakingFacetCaller: StakingFacetCaller{contract: contract}, StakingFacetTransactor: StakingFacetTransactor{contract: contract}, StakingFacetFilterer: StakingFacetFilterer{contract: contract}}, nil
}

// StakingFacet is an auto generated Go binding around an Ethereum contract.
type StakingFacet struct {
	StakingFacetCaller     // Read-only binding to the contract
	StakingFacetTransactor // Write-only binding to the contract
	StakingFacetFilterer   // Log filterer for contract events
}

// StakingFacetCaller is an auto generated read-only Go binding around an Ethereum contract.
type StakingFacetCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingFacetTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StakingFacetTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingFacetFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StakingFacetFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingFacetSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StakingFacetSession struct {
	Contract     *StakingFacet     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StakingFacetCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StakingFacetCallerSession struct {
	Contract *StakingFacetCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// StakingFacetTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StakingFacetTransactorSession struct {
	Contract     *StakingFacetTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// StakingFacetRaw is an auto generated low-level Go binding around an Ethereum contract.
type StakingFacetRaw struct {
	Contract *StakingFacet // Generic contract binding to access the raw methods on
}

// StakingFacetCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StakingFacetCallerRaw struct {
	Contract *StakingFacetCaller // Generic read-only contract binding to access the raw methods on
}

// StakingFacetTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StakingFacetTransactorRaw struct {
	Contract *StakingFacetTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStakingFacet creates a new instance of StakingFacet, bound to a specific deployed contract.
func NewStakingFacet(address common.Address, backend bind.ContractBackend) (*StakingFacet, error) {
	contract, err := bindStakingFacet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StakingFacet{StakingFacetCaller: StakingFacetCaller{contract: contract}, StakingFacetTransactor: StakingFacetTransactor{contract: contract}, StakingFacetFilterer: StakingFacetFilterer{contract: contract}}, nil
}

// NewStakingFacetCaller creates a new read-only instance of StakingFacet, bound to a specific deployed contract.
func NewStakingFacetCaller(address common.Address, caller bind.ContractCaller) (*StakingFacetCaller, error) {
	contract, err := bindStakingFacet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StakingFacetCaller{contract: contract}, nil
}

// NewStakingFacetTransactor creates a new write-only instance of StakingFacet, bound to a specific deployed contract.
func NewStakingFacetTransactor(address common.Address, transactor bind.ContractTransactor) (*StakingFacetTransactor, error) {
	contract, err := bindStakingFacet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StakingFacetTransactor{contract: contract}, nil
}

// NewStakingFacetFilterer creates a new log filterer instance of StakingFacet, bound to a specific deployed contract.
func NewStakingFacetFilterer(address common.Address, filterer bind.ContractFilterer) (*StakingFacetFilterer, error) {
	contract, err := bindStakingFacet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StakingFacetFilterer{contract: contract}, nil
}

// bindStakingFacet binds a generic wrapper to an already deployed contract.
func bindStakingFacet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StakingFacetABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakingFacet *StakingFacetRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakingFacet.Contract.StakingFacetCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakingFacet *StakingFacetRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingFacet.Contract.StakingFacetTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakingFacet *StakingFacetRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakingFacet.Contract.StakingFacetTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakingFacet *StakingFacetCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakingFacet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakingFacet *StakingFacetTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingFacet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakingFacet *StakingFacetTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakingFacet.Contract.contract.Transact(opts, method, params...)
}

// BalanceReward is a free data retrieval call binding the contract method 0x9fb69b43.
//
// Solidity: function balanceReward() view returns(uint256)
func (_StakingFacet *StakingFacetCaller) BalanceReward(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakingFacet.contract.Call(opts, &out, "balanceReward")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceReward is a free data retrieval call binding the contract method 0x9fb69b43.
//
// Solidity: function balanceReward() view returns(uint256)
func (_StakingFacet *StakingFacetSession) BalanceReward() (*big.Int, error) {
	return _StakingFacet.Contract.BalanceReward(&_StakingFacet.CallOpts)
}

// BalanceReward is a free data retrieval call binding the contract method 0x9fb69b43.
//
// Solidity: function balanceReward() view returns(uint256)
func (_StakingFacet *StakingFacetCallerSession) BalanceReward() (*big.Int, error) {
	return _StakingFacet.Contract.BalanceReward(&_StakingFacet.CallOpts)
}

// BalanceRewardFor is a free data retrieval call binding the contract method 0x9be5d83e.
//
// Solidity: function balanceRewardFor(address who) view returns(uint256)
func (_StakingFacet *StakingFacetCaller) BalanceRewardFor(opts *bind.CallOpts, who common.Address) (*big.Int, error) {
	var out []interface{}
	err := _StakingFacet.contract.Call(opts, &out, "balanceRewardFor", who)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceRewardFor is a free data retrieval call binding the contract method 0x9be5d83e.
//
// Solidity: function balanceRewardFor(address who) view returns(uint256)
func (_StakingFacet *StakingFacetSession) BalanceRewardFor(who common.Address) (*big.Int, error) {
	return _StakingFacet.Contract.BalanceRewardFor(&_StakingFacet.CallOpts, who)
}

// BalanceRewardFor is a free data retrieval call binding the contract method 0x9be5d83e.
//
// Solidity: function balanceRewardFor(address who) view returns(uint256)
func (_StakingFacet *StakingFacetCallerSession) BalanceRewardFor(who common.Address) (*big.Int, error) {
	return _StakingFacet.Contract.BalanceRewardFor(&_StakingFacet.CallOpts, who)
}

// BalanceStake is a free data retrieval call binding the contract method 0x8aa2799c.
//
// Solidity: function balanceStake() view returns(uint256)
func (_StakingFacet *StakingFacetCaller) BalanceStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakingFacet.contract.Call(opts, &out, "balanceStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceStake is a free data retrieval call binding the contract method 0x8aa2799c.
//
// Solidity: function balanceStake() view returns(uint256)
func (_StakingFacet *StakingFacetSession) BalanceStake() (*big.Int, error) {
	return _StakingFacet.Contract.BalanceStake(&_StakingFacet.CallOpts)
}

// BalanceStake is a free data retrieval call binding the contract method 0x8aa2799c.
//
// Solidity: function balanceStake() view returns(uint256)
func (_StakingFacet *StakingFacetCallerSession) BalanceStake() (*big.Int, error) {
	return _StakingFacet.Contract.BalanceStake(&_StakingFacet.CallOpts)
}

// BalanceStakeFor is a free data retrieval call binding the contract method 0x35ba4daf.
//
// Solidity: function balanceStakeFor(address who) view returns(uint256)
func (_StakingFacet *StakingFacetCaller) BalanceStakeFor(opts *bind.CallOpts, who common.Address) (*big.Int, error) {
	var out []interface{}
	err := _StakingFacet.contract.Call(opts, &out, "balanceStakeFor", who)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceStakeFor is a free data retrieval call binding the contract method 0x35ba4daf.
//
// Solidity: function balanceStakeFor(address who) view returns(uint256)
func (_StakingFacet *StakingFacetSession) BalanceStakeFor(who common.Address) (*big.Int, error) {
	return _StakingFacet.Contract.BalanceStakeFor(&_StakingFacet.CallOpts, who)
}

// BalanceStakeFor is a free data retrieval call binding the contract method 0x35ba4daf.
//
// Solidity: function balanceStakeFor(address who) view returns(uint256)
func (_StakingFacet *StakingFacetCallerSession) BalanceStakeFor(who common.Address) (*big.Int, error) {
	return _StakingFacet.Contract.BalanceStakeFor(&_StakingFacet.CallOpts, who)
}

// BalanceUnlocked is a free data retrieval call binding the contract method 0x5b6a0d1e.
//
// Solidity: function balanceUnlocked() view returns(uint256)
func (_StakingFacet *StakingFacetCaller) BalanceUnlocked(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakingFacet.contract.Call(opts, &out, "balanceUnlocked")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceUnlocked is a free data retrieval call binding the contract method 0x5b6a0d1e.
//
// Solidity: function balanceUnlocked() view returns(uint256)
func (_StakingFacet *StakingFacetSession) BalanceUnlocked() (*big.Int, error) {
	return _StakingFacet.Contract.BalanceUnlocked(&_StakingFacet.CallOpts)
}

// BalanceUnlocked is a free data retrieval call binding the contract method 0x5b6a0d1e.
//
// Solidity: function balanceUnlocked() view returns(uint256)
func (_StakingFacet *StakingFacetCallerSession) BalanceUnlocked() (*big.Int, error) {
	return _StakingFacet.Contract.BalanceUnlocked(&_StakingFacet.CallOpts)
}

// BalanceUnlockedFor is a free data retrieval call binding the contract method 0x2e713306.
//
// Solidity: function balanceUnlockedFor(address who) view returns(uint256)
func (_StakingFacet *StakingFacetCaller) BalanceUnlockedFor(opts *bind.CallOpts, who common.Address) (*big.Int, error) {
	var out []interface{}
	err := _StakingFacet.contract.Call(opts, &out, "balanceUnlockedFor", who)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceUnlockedFor is a free data retrieval call binding the contract method 0x2e713306.
//
// Solidity: function balanceUnlockedFor(address who) view returns(uint256)
func (_StakingFacet *StakingFacetSession) BalanceUnlockedFor(who common.Address) (*big.Int, error) {
	return _StakingFacet.Contract.BalanceUnlockedFor(&_StakingFacet.CallOpts, who)
}

// BalanceUnlockedFor is a free data retrieval call binding the contract method 0x2e713306.
//
// Solidity: function balanceUnlockedFor(address who) view returns(uint256)
func (_StakingFacet *StakingFacetCallerSession) BalanceUnlockedFor(who common.Address) (*big.Int, error) {
	return _StakingFacet.Contract.BalanceUnlockedFor(&_StakingFacet.CallOpts, who)
}

// BalanceUnlockedReward is a free data retrieval call binding the contract method 0xc328b464.
//
// Solidity: function balanceUnlockedReward() view returns(uint256)
func (_StakingFacet *StakingFacetCaller) BalanceUnlockedReward(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakingFacet.contract.Call(opts, &out, "balanceUnlockedReward")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceUnlockedReward is a free data retrieval call binding the contract method 0xc328b464.
//
// Solidity: function balanceUnlockedReward() view returns(uint256)
func (_StakingFacet *StakingFacetSession) BalanceUnlockedReward() (*big.Int, error) {
	return _StakingFacet.Contract.BalanceUnlockedReward(&_StakingFacet.CallOpts)
}

// BalanceUnlockedReward is a free data retrieval call binding the contract method 0xc328b464.
//
// Solidity: function balanceUnlockedReward() view returns(uint256)
func (_StakingFacet *StakingFacetCallerSession) BalanceUnlockedReward() (*big.Int, error) {
	return _StakingFacet.Contract.BalanceUnlockedReward(&_StakingFacet.CallOpts)
}

// BalanceUnlockedRewardFor is a free data retrieval call binding the contract method 0x515c31a1.
//
// Solidity: function balanceUnlockedRewardFor(address who) view returns(uint256)
func (_StakingFacet *StakingFacetCaller) BalanceUnlockedRewardFor(opts *bind.CallOpts, who common.Address) (*big.Int, error) {
	var out []interface{}
	err := _StakingFacet.contract.Call(opts, &out, "balanceUnlockedRewardFor", who)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceUnlockedRewardFor is a free data retrieval call binding the contract method 0x515c31a1.
//
// Solidity: function balanceUnlockedRewardFor(address who) view returns(uint256)
func (_StakingFacet *StakingFacetSession) BalanceUnlockedRewardFor(who common.Address) (*big.Int, error) {
	return _StakingFacet.Contract.BalanceUnlockedRewardFor(&_StakingFacet.CallOpts, who)
}

// BalanceUnlockedRewardFor is a free data retrieval call binding the contract method 0x515c31a1.
//
// Solidity: function balanceUnlockedRewardFor(address who) view returns(uint256)
func (_StakingFacet *StakingFacetCallerSession) BalanceUnlockedRewardFor(who common.Address) (*big.Int, error) {
	return _StakingFacet.Contract.BalanceUnlockedRewardFor(&_StakingFacet.CallOpts, who)
}

// MajorStakeFine is a free data retrieval call binding the contract method 0xad43d845.
//
// Solidity: function majorStakeFine() view returns(uint256)
func (_StakingFacet *StakingFacetCaller) MajorStakeFine(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakingFacet.contract.Call(opts, &out, "majorStakeFine")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MajorStakeFine is a free data retrieval call binding the contract method 0xad43d845.
//
// Solidity: function majorStakeFine() view returns(uint256)
func (_StakingFacet *StakingFacetSession) MajorStakeFine() (*big.Int, error) {
	return _StakingFacet.Contract.MajorStakeFine(&_StakingFacet.CallOpts)
}

// MajorStakeFine is a free data retrieval call binding the contract method 0xad43d845.
//
// Solidity: function majorStakeFine() view returns(uint256)
func (_StakingFacet *StakingFacetCallerSession) MajorStakeFine() (*big.Int, error) {
	return _StakingFacet.Contract.MajorStakeFine(&_StakingFacet.CallOpts)
}

// MinimumStake is a free data retrieval call binding the contract method 0xec5ffac2.
//
// Solidity: function minimumStake() view returns(uint256)
func (_StakingFacet *StakingFacetCaller) MinimumStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakingFacet.contract.Call(opts, &out, "minimumStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumStake is a free data retrieval call binding the contract method 0xec5ffac2.
//
// Solidity: function minimumStake() view returns(uint256)
func (_StakingFacet *StakingFacetSession) MinimumStake() (*big.Int, error) {
	return _StakingFacet.Contract.MinimumStake(&_StakingFacet.CallOpts)
}

// MinimumStake is a free data retrieval call binding the contract method 0xec5ffac2.
//
// Solidity: function minimumStake() view returns(uint256)
func (_StakingFacet *StakingFacetCallerSession) MinimumStake() (*big.Int, error) {
	return _StakingFacet.Contract.MinimumStake(&_StakingFacet.CallOpts)
}

// MinorStakeFine is a free data retrieval call binding the contract method 0x6d059126.
//
// Solidity: function minorStakeFine() view returns(uint256)
func (_StakingFacet *StakingFacetCaller) MinorStakeFine(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakingFacet.contract.Call(opts, &out, "minorStakeFine")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinorStakeFine is a free data retrieval call binding the contract method 0x6d059126.
//
// Solidity: function minorStakeFine() view returns(uint256)
func (_StakingFacet *StakingFacetSession) MinorStakeFine() (*big.Int, error) {
	return _StakingFacet.Contract.MinorStakeFine(&_StakingFacet.CallOpts)
}

// MinorStakeFine is a free data retrieval call binding the contract method 0x6d059126.
//
// Solidity: function minorStakeFine() view returns(uint256)
func (_StakingFacet *StakingFacetCallerSession) MinorStakeFine() (*big.Int, error) {
	return _StakingFacet.Contract.MinorStakeFine(&_StakingFacet.CallOpts)
}

// RewardAmount is a free data retrieval call binding the contract method 0xf7b2a7be.
//
// Solidity: function rewardAmount() view returns(uint256)
func (_StakingFacet *StakingFacetCaller) RewardAmount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakingFacet.contract.Call(opts, &out, "rewardAmount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RewardAmount is a free data retrieval call binding the contract method 0xf7b2a7be.
//
// Solidity: function rewardAmount() view returns(uint256)
func (_StakingFacet *StakingFacetSession) RewardAmount() (*big.Int, error) {
	return _StakingFacet.Contract.RewardAmount(&_StakingFacet.CallOpts)
}

// RewardAmount is a free data retrieval call binding the contract method 0xf7b2a7be.
//
// Solidity: function rewardAmount() view returns(uint256)
func (_StakingFacet *StakingFacetCallerSession) RewardAmount() (*big.Int, error) {
	return _StakingFacet.Contract.RewardAmount(&_StakingFacet.CallOpts)
}

// RewardBonus is a free data retrieval call binding the contract method 0xfdf553cf.
//
// Solidity: function rewardBonus() view returns(uint256)
func (_StakingFacet *StakingFacetCaller) RewardBonus(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakingFacet.contract.Call(opts, &out, "rewardBonus")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RewardBonus is a free data retrieval call binding the contract method 0xfdf553cf.
//
// Solidity: function rewardBonus() view returns(uint256)
func (_StakingFacet *StakingFacetSession) RewardBonus() (*big.Int, error) {
	return _StakingFacet.Contract.RewardBonus(&_StakingFacet.CallOpts)
}

// RewardBonus is a free data retrieval call binding the contract method 0xfdf553cf.
//
// Solidity: function rewardBonus() view returns(uint256)
func (_StakingFacet *StakingFacetCallerSession) RewardBonus() (*big.Int, error) {
	return _StakingFacet.Contract.RewardBonus(&_StakingFacet.CallOpts)
}

// Burn is a paid mutator transaction binding the contract method 0x89afcb44.
//
// Solidity: function burn(address who) returns(bool)
func (_StakingFacet *StakingFacetTransactor) Burn(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "burn", who)
}

// Burn is a paid mutator transaction binding the contract method 0x89afcb44.
//
// Solidity: function burn(address who) returns(bool)
func (_StakingFacet *StakingFacetSession) Burn(who common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.Burn(&_StakingFacet.TransactOpts, who)
}

// Burn is a paid mutator transaction binding the contract method 0x89afcb44.
//
// Solidity: function burn(address who) returns(bool)
func (_StakingFacet *StakingFacetTransactorSession) Burn(who common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.Burn(&_StakingFacet.TransactOpts, who)
}

// Fine is a paid mutator transaction binding the contract method 0xee220d8d.
//
// Solidity: function fine(address who, bytes32 why, uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetTransactor) Fine(opts *bind.TransactOpts, who common.Address, why [32]byte, amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "fine", who, why, amount)
}

// Fine is a paid mutator transaction binding the contract method 0xee220d8d.
//
// Solidity: function fine(address who, bytes32 why, uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetSession) Fine(who common.Address, why [32]byte, amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.Fine(&_StakingFacet.TransactOpts, who, why, amount)
}

// Fine is a paid mutator transaction binding the contract method 0xee220d8d.
//
// Solidity: function fine(address who, bytes32 why, uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetTransactorSession) Fine(who common.Address, why [32]byte, amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.Fine(&_StakingFacet.TransactOpts, who, why, amount)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_StakingFacet *StakingFacetTransactor) GrantOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "grantOperator", who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_StakingFacet *StakingFacetSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.GrantOperator(&_StakingFacet.TransactOpts, who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_StakingFacet *StakingFacetTransactorSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.GrantOperator(&_StakingFacet.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_StakingFacet *StakingFacetTransactor) GrantOwner(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "grantOwner", who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_StakingFacet *StakingFacetSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.GrantOwner(&_StakingFacet.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_StakingFacet *StakingFacetTransactorSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.GrantOwner(&_StakingFacet.TransactOpts, who)
}

// InitializeStaking is a paid mutator transaction binding the contract method 0x04ad7a83.
//
// Solidity: function initializeStaking(address registry) returns()
func (_StakingFacet *StakingFacetTransactor) InitializeStaking(opts *bind.TransactOpts, registry common.Address) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "initializeStaking", registry)
}

// InitializeStaking is a paid mutator transaction binding the contract method 0x04ad7a83.
//
// Solidity: function initializeStaking(address registry) returns()
func (_StakingFacet *StakingFacetSession) InitializeStaking(registry common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.InitializeStaking(&_StakingFacet.TransactOpts, registry)
}

// InitializeStaking is a paid mutator transaction binding the contract method 0x04ad7a83.
//
// Solidity: function initializeStaking(address registry) returns()
func (_StakingFacet *StakingFacetTransactorSession) InitializeStaking(registry common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.InitializeStaking(&_StakingFacet.TransactOpts, registry)
}

// LockRewardFor is a paid mutator transaction binding the contract method 0x0ddb07ad.
//
// Solidity: function lockRewardFor(address who, uint256 amountReward, uint256 unlockEpoch) returns(bool)
func (_StakingFacet *StakingFacetTransactor) LockRewardFor(opts *bind.TransactOpts, who common.Address, amountReward *big.Int, unlockEpoch *big.Int) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "lockRewardFor", who, amountReward, unlockEpoch)
}

// LockRewardFor is a paid mutator transaction binding the contract method 0x0ddb07ad.
//
// Solidity: function lockRewardFor(address who, uint256 amountReward, uint256 unlockEpoch) returns(bool)
func (_StakingFacet *StakingFacetSession) LockRewardFor(who common.Address, amountReward *big.Int, unlockEpoch *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.LockRewardFor(&_StakingFacet.TransactOpts, who, amountReward, unlockEpoch)
}

// LockRewardFor is a paid mutator transaction binding the contract method 0x0ddb07ad.
//
// Solidity: function lockRewardFor(address who, uint256 amountReward, uint256 unlockEpoch) returns(bool)
func (_StakingFacet *StakingFacetTransactorSession) LockRewardFor(who common.Address, amountReward *big.Int, unlockEpoch *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.LockRewardFor(&_StakingFacet.TransactOpts, who, amountReward, unlockEpoch)
}

// LockStake is a paid mutator transaction binding the contract method 0xf50ddb67.
//
// Solidity: function lockStake(uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetTransactor) LockStake(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "lockStake", amount)
}

// LockStake is a paid mutator transaction binding the contract method 0xf50ddb67.
//
// Solidity: function lockStake(uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetSession) LockStake(amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.LockStake(&_StakingFacet.TransactOpts, amount)
}

// LockStake is a paid mutator transaction binding the contract method 0xf50ddb67.
//
// Solidity: function lockStake(uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetTransactorSession) LockStake(amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.LockStake(&_StakingFacet.TransactOpts, amount)
}

// LockStakeFor is a paid mutator transaction binding the contract method 0x461cbdcf.
//
// Solidity: function lockStakeFor(address who, uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetTransactor) LockStakeFor(opts *bind.TransactOpts, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "lockStakeFor", who, amount)
}

// LockStakeFor is a paid mutator transaction binding the contract method 0x461cbdcf.
//
// Solidity: function lockStakeFor(address who, uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetSession) LockStakeFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.LockStakeFor(&_StakingFacet.TransactOpts, who, amount)
}

// LockStakeFor is a paid mutator transaction binding the contract method 0x461cbdcf.
//
// Solidity: function lockStakeFor(address who, uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetTransactorSession) LockStakeFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.LockStakeFor(&_StakingFacet.TransactOpts, who, amount)
}

// MajorFine is a paid mutator transaction binding the contract method 0x57b4f82a.
//
// Solidity: function majorFine(address who) returns()
func (_StakingFacet *StakingFacetTransactor) MajorFine(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "majorFine", who)
}

// MajorFine is a paid mutator transaction binding the contract method 0x57b4f82a.
//
// Solidity: function majorFine(address who) returns()
func (_StakingFacet *StakingFacetSession) MajorFine(who common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.MajorFine(&_StakingFacet.TransactOpts, who)
}

// MajorFine is a paid mutator transaction binding the contract method 0x57b4f82a.
//
// Solidity: function majorFine(address who) returns()
func (_StakingFacet *StakingFacetTransactorSession) MajorFine(who common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.MajorFine(&_StakingFacet.TransactOpts, who)
}

// MinorFine is a paid mutator transaction binding the contract method 0xd2a2c55c.
//
// Solidity: function minorFine(address who) returns()
func (_StakingFacet *StakingFacetTransactor) MinorFine(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "minorFine", who)
}

// MinorFine is a paid mutator transaction binding the contract method 0xd2a2c55c.
//
// Solidity: function minorFine(address who) returns()
func (_StakingFacet *StakingFacetSession) MinorFine(who common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.MinorFine(&_StakingFacet.TransactOpts, who)
}

// MinorFine is a paid mutator transaction binding the contract method 0xd2a2c55c.
//
// Solidity: function minorFine(address who) returns()
func (_StakingFacet *StakingFacetTransactorSession) MinorFine(who common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.MinorFine(&_StakingFacet.TransactOpts, who)
}

// RequestUnlockStake is a paid mutator transaction binding the contract method 0xaeaf8812.
//
// Solidity: function requestUnlockStake() returns()
func (_StakingFacet *StakingFacetTransactor) RequestUnlockStake(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "requestUnlockStake")
}

// RequestUnlockStake is a paid mutator transaction binding the contract method 0xaeaf8812.
//
// Solidity: function requestUnlockStake() returns()
func (_StakingFacet *StakingFacetSession) RequestUnlockStake() (*types.Transaction, error) {
	return _StakingFacet.Contract.RequestUnlockStake(&_StakingFacet.TransactOpts)
}

// RequestUnlockStake is a paid mutator transaction binding the contract method 0xaeaf8812.
//
// Solidity: function requestUnlockStake() returns()
func (_StakingFacet *StakingFacetTransactorSession) RequestUnlockStake() (*types.Transaction, error) {
	return _StakingFacet.Contract.RequestUnlockStake(&_StakingFacet.TransactOpts)
}

// RequestUnlockStakeFor is a paid mutator transaction binding the contract method 0x4fcf2b72.
//
// Solidity: function requestUnlockStakeFor(address who) returns()
func (_StakingFacet *StakingFacetTransactor) RequestUnlockStakeFor(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "requestUnlockStakeFor", who)
}

// RequestUnlockStakeFor is a paid mutator transaction binding the contract method 0x4fcf2b72.
//
// Solidity: function requestUnlockStakeFor(address who) returns()
func (_StakingFacet *StakingFacetSession) RequestUnlockStakeFor(who common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.RequestUnlockStakeFor(&_StakingFacet.TransactOpts, who)
}

// RequestUnlockStakeFor is a paid mutator transaction binding the contract method 0x4fcf2b72.
//
// Solidity: function requestUnlockStakeFor(address who) returns()
func (_StakingFacet *StakingFacetTransactorSession) RequestUnlockStakeFor(who common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.RequestUnlockStakeFor(&_StakingFacet.TransactOpts, who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_StakingFacet *StakingFacetTransactor) RevokeOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "revokeOperator", who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_StakingFacet *StakingFacetSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.RevokeOperator(&_StakingFacet.TransactOpts, who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_StakingFacet *StakingFacetTransactorSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.RevokeOperator(&_StakingFacet.TransactOpts, who)
}

// SetEpochDelay is a paid mutator transaction binding the contract method 0xbd695a43.
//
// Solidity: function setEpochDelay(uint256 _epochDelay) returns()
func (_StakingFacet *StakingFacetTransactor) SetEpochDelay(opts *bind.TransactOpts, _epochDelay *big.Int) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "setEpochDelay", _epochDelay)
}

// SetEpochDelay is a paid mutator transaction binding the contract method 0xbd695a43.
//
// Solidity: function setEpochDelay(uint256 _epochDelay) returns()
func (_StakingFacet *StakingFacetSession) SetEpochDelay(_epochDelay *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.SetEpochDelay(&_StakingFacet.TransactOpts, _epochDelay)
}

// SetEpochDelay is a paid mutator transaction binding the contract method 0xbd695a43.
//
// Solidity: function setEpochDelay(uint256 _epochDelay) returns()
func (_StakingFacet *StakingFacetTransactorSession) SetEpochDelay(_epochDelay *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.SetEpochDelay(&_StakingFacet.TransactOpts, _epochDelay)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_StakingFacet *StakingFacetTransactor) SetGovernance(opts *bind.TransactOpts, governance_ common.Address) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "setGovernance", governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_StakingFacet *StakingFacetSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.SetGovernance(&_StakingFacet.TransactOpts, governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_StakingFacet *StakingFacetTransactorSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.SetGovernance(&_StakingFacet.TransactOpts, governance_)
}

// SetMajorStakeFine is a paid mutator transaction binding the contract method 0x78146c2f.
//
// Solidity: function setMajorStakeFine(uint256 _majorStakeFine) returns()
func (_StakingFacet *StakingFacetTransactor) SetMajorStakeFine(opts *bind.TransactOpts, _majorStakeFine *big.Int) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "setMajorStakeFine", _majorStakeFine)
}

// SetMajorStakeFine is a paid mutator transaction binding the contract method 0x78146c2f.
//
// Solidity: function setMajorStakeFine(uint256 _majorStakeFine) returns()
func (_StakingFacet *StakingFacetSession) SetMajorStakeFine(_majorStakeFine *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.SetMajorStakeFine(&_StakingFacet.TransactOpts, _majorStakeFine)
}

// SetMajorStakeFine is a paid mutator transaction binding the contract method 0x78146c2f.
//
// Solidity: function setMajorStakeFine(uint256 _majorStakeFine) returns()
func (_StakingFacet *StakingFacetTransactorSession) SetMajorStakeFine(_majorStakeFine *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.SetMajorStakeFine(&_StakingFacet.TransactOpts, _majorStakeFine)
}

// SetMinimumStake is a paid mutator transaction binding the contract method 0x233e9903.
//
// Solidity: function setMinimumStake(uint256 _minimumStake) returns()
func (_StakingFacet *StakingFacetTransactor) SetMinimumStake(opts *bind.TransactOpts, _minimumStake *big.Int) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "setMinimumStake", _minimumStake)
}

// SetMinimumStake is a paid mutator transaction binding the contract method 0x233e9903.
//
// Solidity: function setMinimumStake(uint256 _minimumStake) returns()
func (_StakingFacet *StakingFacetSession) SetMinimumStake(_minimumStake *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.SetMinimumStake(&_StakingFacet.TransactOpts, _minimumStake)
}

// SetMinimumStake is a paid mutator transaction binding the contract method 0x233e9903.
//
// Solidity: function setMinimumStake(uint256 _minimumStake) returns()
func (_StakingFacet *StakingFacetTransactorSession) SetMinimumStake(_minimumStake *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.SetMinimumStake(&_StakingFacet.TransactOpts, _minimumStake)
}

// SetMinorStakeFine is a paid mutator transaction binding the contract method 0x29693c5c.
//
// Solidity: function setMinorStakeFine(uint256 _minorStakeFine) returns()
func (_StakingFacet *StakingFacetTransactor) SetMinorStakeFine(opts *bind.TransactOpts, _minorStakeFine *big.Int) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "setMinorStakeFine", _minorStakeFine)
}

// SetMinorStakeFine is a paid mutator transaction binding the contract method 0x29693c5c.
//
// Solidity: function setMinorStakeFine(uint256 _minorStakeFine) returns()
func (_StakingFacet *StakingFacetSession) SetMinorStakeFine(_minorStakeFine *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.SetMinorStakeFine(&_StakingFacet.TransactOpts, _minorStakeFine)
}

// SetMinorStakeFine is a paid mutator transaction binding the contract method 0x29693c5c.
//
// Solidity: function setMinorStakeFine(uint256 _minorStakeFine) returns()
func (_StakingFacet *StakingFacetTransactorSession) SetMinorStakeFine(_minorStakeFine *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.SetMinorStakeFine(&_StakingFacet.TransactOpts, _minorStakeFine)
}

// SetRewardAmount is a paid mutator transaction binding the contract method 0xa8a65a78.
//
// Solidity: function setRewardAmount(uint256 _rewardAmount) returns()
func (_StakingFacet *StakingFacetTransactor) SetRewardAmount(opts *bind.TransactOpts, _rewardAmount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "setRewardAmount", _rewardAmount)
}

// SetRewardAmount is a paid mutator transaction binding the contract method 0xa8a65a78.
//
// Solidity: function setRewardAmount(uint256 _rewardAmount) returns()
func (_StakingFacet *StakingFacetSession) SetRewardAmount(_rewardAmount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.SetRewardAmount(&_StakingFacet.TransactOpts, _rewardAmount)
}

// SetRewardAmount is a paid mutator transaction binding the contract method 0xa8a65a78.
//
// Solidity: function setRewardAmount(uint256 _rewardAmount) returns()
func (_StakingFacet *StakingFacetTransactorSession) SetRewardAmount(_rewardAmount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.SetRewardAmount(&_StakingFacet.TransactOpts, _rewardAmount)
}

// SetRewardBonus is a paid mutator transaction binding the contract method 0xf95d80fa.
//
// Solidity: function setRewardBonus(uint256 _rewardBonus) returns()
func (_StakingFacet *StakingFacetTransactor) SetRewardBonus(opts *bind.TransactOpts, _rewardBonus *big.Int) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "setRewardBonus", _rewardBonus)
}

// SetRewardBonus is a paid mutator transaction binding the contract method 0xf95d80fa.
//
// Solidity: function setRewardBonus(uint256 _rewardBonus) returns()
func (_StakingFacet *StakingFacetSession) SetRewardBonus(_rewardBonus *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.SetRewardBonus(&_StakingFacet.TransactOpts, _rewardBonus)
}

// SetRewardBonus is a paid mutator transaction binding the contract method 0xf95d80fa.
//
// Solidity: function setRewardBonus(uint256 _rewardBonus) returns()
func (_StakingFacet *StakingFacetTransactorSession) SetRewardBonus(_rewardBonus *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.SetRewardBonus(&_StakingFacet.TransactOpts, _rewardBonus)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_StakingFacet *StakingFacetTransactor) Start(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "start")
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_StakingFacet *StakingFacetSession) Start() (*types.Transaction, error) {
	return _StakingFacet.Contract.Start(&_StakingFacet.TransactOpts)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_StakingFacet *StakingFacetTransactorSession) Start() (*types.Transaction, error) {
	return _StakingFacet.Contract.Start(&_StakingFacet.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_StakingFacet *StakingFacetTransactor) Stop(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "stop")
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_StakingFacet *StakingFacetSession) Stop() (*types.Transaction, error) {
	return _StakingFacet.Contract.Stop(&_StakingFacet.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_StakingFacet *StakingFacetTransactorSession) Stop() (*types.Transaction, error) {
	return _StakingFacet.Contract.Stop(&_StakingFacet.TransactOpts)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_StakingFacet *StakingFacetTransactor) TakeOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "takeOwnership")
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_StakingFacet *StakingFacetSession) TakeOwnership() (*types.Transaction, error) {
	return _StakingFacet.Contract.TakeOwnership(&_StakingFacet.TransactOpts)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_StakingFacet *StakingFacetTransactorSession) TakeOwnership() (*types.Transaction, error) {
	return _StakingFacet.Contract.TakeOwnership(&_StakingFacet.TransactOpts)
}

// UnlockReward is a paid mutator transaction binding the contract method 0xf1b7f4bf.
//
// Solidity: function unlockReward() returns(bool)
func (_StakingFacet *StakingFacetTransactor) UnlockReward(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "unlockReward")
}

// UnlockReward is a paid mutator transaction binding the contract method 0xf1b7f4bf.
//
// Solidity: function unlockReward() returns(bool)
func (_StakingFacet *StakingFacetSession) UnlockReward() (*types.Transaction, error) {
	return _StakingFacet.Contract.UnlockReward(&_StakingFacet.TransactOpts)
}

// UnlockReward is a paid mutator transaction binding the contract method 0xf1b7f4bf.
//
// Solidity: function unlockReward() returns(bool)
func (_StakingFacet *StakingFacetTransactorSession) UnlockReward() (*types.Transaction, error) {
	return _StakingFacet.Contract.UnlockReward(&_StakingFacet.TransactOpts)
}

// UnlockRewardFor is a paid mutator transaction binding the contract method 0x7f91bd69.
//
// Solidity: function unlockRewardFor(address who) returns(bool)
func (_StakingFacet *StakingFacetTransactor) UnlockRewardFor(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "unlockRewardFor", who)
}

// UnlockRewardFor is a paid mutator transaction binding the contract method 0x7f91bd69.
//
// Solidity: function unlockRewardFor(address who) returns(bool)
func (_StakingFacet *StakingFacetSession) UnlockRewardFor(who common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.UnlockRewardFor(&_StakingFacet.TransactOpts, who)
}

// UnlockRewardFor is a paid mutator transaction binding the contract method 0x7f91bd69.
//
// Solidity: function unlockRewardFor(address who) returns(bool)
func (_StakingFacet *StakingFacetTransactorSession) UnlockRewardFor(who common.Address) (*types.Transaction, error) {
	return _StakingFacet.Contract.UnlockRewardFor(&_StakingFacet.TransactOpts, who)
}

// UnlockStake is a paid mutator transaction binding the contract method 0xecd8c06a.
//
// Solidity: function unlockStake(uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetTransactor) UnlockStake(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "unlockStake", amount)
}

// UnlockStake is a paid mutator transaction binding the contract method 0xecd8c06a.
//
// Solidity: function unlockStake(uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetSession) UnlockStake(amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.UnlockStake(&_StakingFacet.TransactOpts, amount)
}

// UnlockStake is a paid mutator transaction binding the contract method 0xecd8c06a.
//
// Solidity: function unlockStake(uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetTransactorSession) UnlockStake(amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.UnlockStake(&_StakingFacet.TransactOpts, amount)
}

// UnlockStakeFor is a paid mutator transaction binding the contract method 0xe29dda92.
//
// Solidity: function unlockStakeFor(address who, uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetTransactor) UnlockStakeFor(opts *bind.TransactOpts, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "unlockStakeFor", who, amount)
}

// UnlockStakeFor is a paid mutator transaction binding the contract method 0xe29dda92.
//
// Solidity: function unlockStakeFor(address who, uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetSession) UnlockStakeFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.UnlockStakeFor(&_StakingFacet.TransactOpts, who, amount)
}

// UnlockStakeFor is a paid mutator transaction binding the contract method 0xe29dda92.
//
// Solidity: function unlockStakeFor(address who, uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetTransactorSession) UnlockStakeFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.UnlockStakeFor(&_StakingFacet.TransactOpts, who, amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetTransactor) Withdraw(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "withdraw", amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetSession) Withdraw(amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.Withdraw(&_StakingFacet.TransactOpts, amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetTransactorSession) Withdraw(amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.Withdraw(&_StakingFacet.TransactOpts, amount)
}

// WithdrawFor is a paid mutator transaction binding the contract method 0xdb518db2.
//
// Solidity: function withdrawFor(address who, uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetTransactor) WithdrawFor(opts *bind.TransactOpts, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "withdrawFor", who, amount)
}

// WithdrawFor is a paid mutator transaction binding the contract method 0xdb518db2.
//
// Solidity: function withdrawFor(address who, uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetSession) WithdrawFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.WithdrawFor(&_StakingFacet.TransactOpts, who, amount)
}

// WithdrawFor is a paid mutator transaction binding the contract method 0xdb518db2.
//
// Solidity: function withdrawFor(address who, uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetTransactorSession) WithdrawFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.WithdrawFor(&_StakingFacet.TransactOpts, who, amount)
}

// WithdrawReward is a paid mutator transaction binding the contract method 0x523a3f08.
//
// Solidity: function withdrawReward(uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetTransactor) WithdrawReward(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.contract.Transact(opts, "withdrawReward", amount)
}

// WithdrawReward is a paid mutator transaction binding the contract method 0x523a3f08.
//
// Solidity: function withdrawReward(uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetSession) WithdrawReward(amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.WithdrawReward(&_StakingFacet.TransactOpts, amount)
}

// WithdrawReward is a paid mutator transaction binding the contract method 0x523a3f08.
//
// Solidity: function withdrawReward(uint256 amount) returns(bool)
func (_StakingFacet *StakingFacetTransactorSession) WithdrawReward(amount *big.Int) (*types.Transaction, error) {
	return _StakingFacet.Contract.WithdrawReward(&_StakingFacet.TransactOpts, amount)
}

// StakingLibraryMetaData contains all meta data concerning the StakingLibrary contract.
var StakingLibraryMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burnt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"why\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Fined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockedReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockedStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"RequestedUnlockStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnlockedReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnlockedStake\",\"type\":\"event\"}]",
<<<<<<< Updated upstream
	Bin: "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122055ebc45a75cb857b0e6ca8fc3df95d5fb1bbb7dbd09d3ceb905f1d47f60cd65b64736f6c634300080b0033",
=======
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220000a0ed9293750d4812187c4ed4a99dbf93e0c6d17cd39a72f6443a2f98fa11d64736f6c634300080b0033",
>>>>>>> Stashed changes
}

// StakingLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use StakingLibraryMetaData.ABI instead.
var StakingLibraryABI = StakingLibraryMetaData.ABI

// StakingLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StakingLibraryMetaData.Bin instead.
var StakingLibraryBin = StakingLibraryMetaData.Bin

// DeployStakingLibrary deploys a new Ethereum contract, binding an instance of StakingLibrary to it.
func DeployStakingLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *StakingLibrary, error) {
	parsed, err := StakingLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StakingLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StakingLibrary{StakingLibraryCaller: StakingLibraryCaller{contract: contract}, StakingLibraryTransactor: StakingLibraryTransactor{contract: contract}, StakingLibraryFilterer: StakingLibraryFilterer{contract: contract}}, nil
}

// StakingLibrary is an auto generated Go binding around an Ethereum contract.
type StakingLibrary struct {
	StakingLibraryCaller     // Read-only binding to the contract
	StakingLibraryTransactor // Write-only binding to the contract
	StakingLibraryFilterer   // Log filterer for contract events
}

// StakingLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type StakingLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StakingLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StakingLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StakingLibrarySession struct {
	Contract     *StakingLibrary   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StakingLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StakingLibraryCallerSession struct {
	Contract *StakingLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// StakingLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StakingLibraryTransactorSession struct {
	Contract     *StakingLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// StakingLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type StakingLibraryRaw struct {
	Contract *StakingLibrary // Generic contract binding to access the raw methods on
}

// StakingLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StakingLibraryCallerRaw struct {
	Contract *StakingLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// StakingLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StakingLibraryTransactorRaw struct {
	Contract *StakingLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStakingLibrary creates a new instance of StakingLibrary, bound to a specific deployed contract.
func NewStakingLibrary(address common.Address, backend bind.ContractBackend) (*StakingLibrary, error) {
	contract, err := bindStakingLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StakingLibrary{StakingLibraryCaller: StakingLibraryCaller{contract: contract}, StakingLibraryTransactor: StakingLibraryTransactor{contract: contract}, StakingLibraryFilterer: StakingLibraryFilterer{contract: contract}}, nil
}

// NewStakingLibraryCaller creates a new read-only instance of StakingLibrary, bound to a specific deployed contract.
func NewStakingLibraryCaller(address common.Address, caller bind.ContractCaller) (*StakingLibraryCaller, error) {
	contract, err := bindStakingLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StakingLibraryCaller{contract: contract}, nil
}

// NewStakingLibraryTransactor creates a new write-only instance of StakingLibrary, bound to a specific deployed contract.
func NewStakingLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*StakingLibraryTransactor, error) {
	contract, err := bindStakingLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StakingLibraryTransactor{contract: contract}, nil
}

// NewStakingLibraryFilterer creates a new log filterer instance of StakingLibrary, bound to a specific deployed contract.
func NewStakingLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*StakingLibraryFilterer, error) {
	contract, err := bindStakingLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StakingLibraryFilterer{contract: contract}, nil
}

// bindStakingLibrary binds a generic wrapper to an already deployed contract.
func bindStakingLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StakingLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakingLibrary *StakingLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakingLibrary.Contract.StakingLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakingLibrary *StakingLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingLibrary.Contract.StakingLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakingLibrary *StakingLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakingLibrary.Contract.StakingLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakingLibrary *StakingLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakingLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakingLibrary *StakingLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakingLibrary *StakingLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakingLibrary.Contract.contract.Transact(opts, method, params...)
}

// StakingLibraryBurntIterator is returned from FilterBurnt and is used to iterate over the raw logs and unpacked data for Burnt events raised by the StakingLibrary contract.
type StakingLibraryBurntIterator struct {
	Event *StakingLibraryBurnt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingLibraryBurntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingLibraryBurnt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingLibraryBurnt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingLibraryBurntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingLibraryBurntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingLibraryBurnt represents a Burnt event raised by the StakingLibrary contract.
type StakingLibraryBurnt struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBurnt is a free log retrieval operation binding the contract event 0x919f7e2092ffcc9d09f599be18d8152860b0c054df788a33bc549cdd9d0f15b1.
//
// Solidity: event Burnt(address indexed who, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) FilterBurnt(opts *bind.FilterOpts, who []common.Address) (*StakingLibraryBurntIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingLibrary.contract.FilterLogs(opts, "Burnt", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingLibraryBurntIterator{contract: _StakingLibrary.contract, event: "Burnt", logs: logs, sub: sub}, nil
}

// WatchBurnt is a free log subscription operation binding the contract event 0x919f7e2092ffcc9d09f599be18d8152860b0c054df788a33bc549cdd9d0f15b1.
//
// Solidity: event Burnt(address indexed who, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) WatchBurnt(opts *bind.WatchOpts, sink chan<- *StakingLibraryBurnt, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingLibrary.contract.WatchLogs(opts, "Burnt", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingLibraryBurnt)
				if err := _StakingLibrary.contract.UnpackLog(event, "Burnt", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurnt is a log parse operation binding the contract event 0x919f7e2092ffcc9d09f599be18d8152860b0c054df788a33bc549cdd9d0f15b1.
//
// Solidity: event Burnt(address indexed who, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) ParseBurnt(log types.Log) (*StakingLibraryBurnt, error) {
	event := new(StakingLibraryBurnt)
	if err := _StakingLibrary.contract.UnpackLog(event, "Burnt", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingLibraryFinedIterator is returned from FilterFined and is used to iterate over the raw logs and unpacked data for Fined events raised by the StakingLibrary contract.
type StakingLibraryFinedIterator struct {
	Event *StakingLibraryFined // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingLibraryFinedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingLibraryFined)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingLibraryFined)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingLibraryFinedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingLibraryFinedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingLibraryFined represents a Fined event raised by the StakingLibrary contract.
type StakingLibraryFined struct {
	Who    common.Address
	Why    [32]byte
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterFined is a free log retrieval operation binding the contract event 0xf1254bf6cf04a475bd832353c2ccfc5e0d89e7b9c0f05a153ff897b6121b91e9.
//
// Solidity: event Fined(address indexed who, bytes32 why, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) FilterFined(opts *bind.FilterOpts, who []common.Address) (*StakingLibraryFinedIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingLibrary.contract.FilterLogs(opts, "Fined", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingLibraryFinedIterator{contract: _StakingLibrary.contract, event: "Fined", logs: logs, sub: sub}, nil
}

// WatchFined is a free log subscription operation binding the contract event 0xf1254bf6cf04a475bd832353c2ccfc5e0d89e7b9c0f05a153ff897b6121b91e9.
//
// Solidity: event Fined(address indexed who, bytes32 why, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) WatchFined(opts *bind.WatchOpts, sink chan<- *StakingLibraryFined, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingLibrary.contract.WatchLogs(opts, "Fined", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingLibraryFined)
				if err := _StakingLibrary.contract.UnpackLog(event, "Fined", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFined is a log parse operation binding the contract event 0xf1254bf6cf04a475bd832353c2ccfc5e0d89e7b9c0f05a153ff897b6121b91e9.
//
// Solidity: event Fined(address indexed who, bytes32 why, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) ParseFined(log types.Log) (*StakingLibraryFined, error) {
	event := new(StakingLibraryFined)
	if err := _StakingLibrary.contract.UnpackLog(event, "Fined", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingLibraryLockedRewardIterator is returned from FilterLockedReward and is used to iterate over the raw logs and unpacked data for LockedReward events raised by the StakingLibrary contract.
type StakingLibraryLockedRewardIterator struct {
	Event *StakingLibraryLockedReward // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingLibraryLockedRewardIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingLibraryLockedReward)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingLibraryLockedReward)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingLibraryLockedRewardIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingLibraryLockedRewardIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingLibraryLockedReward represents a LockedReward event raised by the StakingLibrary contract.
type StakingLibraryLockedReward struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLockedReward is a free log retrieval operation binding the contract event 0x28dc9c0ffa672df041cad84edbee41508284600c9394bda0f8586d012c5e0915.
//
// Solidity: event LockedReward(address indexed who, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) FilterLockedReward(opts *bind.FilterOpts, who []common.Address) (*StakingLibraryLockedRewardIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingLibrary.contract.FilterLogs(opts, "LockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingLibraryLockedRewardIterator{contract: _StakingLibrary.contract, event: "LockedReward", logs: logs, sub: sub}, nil
}

// WatchLockedReward is a free log subscription operation binding the contract event 0x28dc9c0ffa672df041cad84edbee41508284600c9394bda0f8586d012c5e0915.
//
// Solidity: event LockedReward(address indexed who, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) WatchLockedReward(opts *bind.WatchOpts, sink chan<- *StakingLibraryLockedReward, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingLibrary.contract.WatchLogs(opts, "LockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingLibraryLockedReward)
				if err := _StakingLibrary.contract.UnpackLog(event, "LockedReward", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLockedReward is a log parse operation binding the contract event 0x28dc9c0ffa672df041cad84edbee41508284600c9394bda0f8586d012c5e0915.
//
// Solidity: event LockedReward(address indexed who, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) ParseLockedReward(log types.Log) (*StakingLibraryLockedReward, error) {
	event := new(StakingLibraryLockedReward)
	if err := _StakingLibrary.contract.UnpackLog(event, "LockedReward", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingLibraryLockedStakeIterator is returned from FilterLockedStake and is used to iterate over the raw logs and unpacked data for LockedStake events raised by the StakingLibrary contract.
type StakingLibraryLockedStakeIterator struct {
	Event *StakingLibraryLockedStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingLibraryLockedStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingLibraryLockedStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingLibraryLockedStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingLibraryLockedStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingLibraryLockedStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingLibraryLockedStake represents a LockedStake event raised by the StakingLibrary contract.
type StakingLibraryLockedStake struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLockedStake is a free log retrieval operation binding the contract event 0x1de2f07b0a1c69916a8b25b889051644192307ea08444a2e11f8654d1db3ab0c.
//
// Solidity: event LockedStake(address indexed who, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) FilterLockedStake(opts *bind.FilterOpts, who []common.Address) (*StakingLibraryLockedStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingLibrary.contract.FilterLogs(opts, "LockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingLibraryLockedStakeIterator{contract: _StakingLibrary.contract, event: "LockedStake", logs: logs, sub: sub}, nil
}

// WatchLockedStake is a free log subscription operation binding the contract event 0x1de2f07b0a1c69916a8b25b889051644192307ea08444a2e11f8654d1db3ab0c.
//
// Solidity: event LockedStake(address indexed who, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) WatchLockedStake(opts *bind.WatchOpts, sink chan<- *StakingLibraryLockedStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingLibrary.contract.WatchLogs(opts, "LockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingLibraryLockedStake)
				if err := _StakingLibrary.contract.UnpackLog(event, "LockedStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLockedStake is a log parse operation binding the contract event 0x1de2f07b0a1c69916a8b25b889051644192307ea08444a2e11f8654d1db3ab0c.
//
// Solidity: event LockedStake(address indexed who, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) ParseLockedStake(log types.Log) (*StakingLibraryLockedStake, error) {
	event := new(StakingLibraryLockedStake)
	if err := _StakingLibrary.contract.UnpackLog(event, "LockedStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingLibraryRequestedUnlockStakeIterator is returned from FilterRequestedUnlockStake and is used to iterate over the raw logs and unpacked data for RequestedUnlockStake events raised by the StakingLibrary contract.
type StakingLibraryRequestedUnlockStakeIterator struct {
	Event *StakingLibraryRequestedUnlockStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingLibraryRequestedUnlockStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingLibraryRequestedUnlockStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingLibraryRequestedUnlockStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingLibraryRequestedUnlockStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingLibraryRequestedUnlockStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingLibraryRequestedUnlockStake represents a RequestedUnlockStake event raised by the StakingLibrary contract.
type StakingLibraryRequestedUnlockStake struct {
	Who common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterRequestedUnlockStake is a free log retrieval operation binding the contract event 0x1fde0d8a6620647f5c7b5632a87b23101ba553c9b474caf1134fb24d92bf6ddc.
//
// Solidity: event RequestedUnlockStake(address indexed who)
func (_StakingLibrary *StakingLibraryFilterer) FilterRequestedUnlockStake(opts *bind.FilterOpts, who []common.Address) (*StakingLibraryRequestedUnlockStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingLibrary.contract.FilterLogs(opts, "RequestedUnlockStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingLibraryRequestedUnlockStakeIterator{contract: _StakingLibrary.contract, event: "RequestedUnlockStake", logs: logs, sub: sub}, nil
}

// WatchRequestedUnlockStake is a free log subscription operation binding the contract event 0x1fde0d8a6620647f5c7b5632a87b23101ba553c9b474caf1134fb24d92bf6ddc.
//
// Solidity: event RequestedUnlockStake(address indexed who)
func (_StakingLibrary *StakingLibraryFilterer) WatchRequestedUnlockStake(opts *bind.WatchOpts, sink chan<- *StakingLibraryRequestedUnlockStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingLibrary.contract.WatchLogs(opts, "RequestedUnlockStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingLibraryRequestedUnlockStake)
				if err := _StakingLibrary.contract.UnpackLog(event, "RequestedUnlockStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRequestedUnlockStake is a log parse operation binding the contract event 0x1fde0d8a6620647f5c7b5632a87b23101ba553c9b474caf1134fb24d92bf6ddc.
//
// Solidity: event RequestedUnlockStake(address indexed who)
func (_StakingLibrary *StakingLibraryFilterer) ParseRequestedUnlockStake(log types.Log) (*StakingLibraryRequestedUnlockStake, error) {
	event := new(StakingLibraryRequestedUnlockStake)
	if err := _StakingLibrary.contract.UnpackLog(event, "RequestedUnlockStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingLibraryUnlockedRewardIterator is returned from FilterUnlockedReward and is used to iterate over the raw logs and unpacked data for UnlockedReward events raised by the StakingLibrary contract.
type StakingLibraryUnlockedRewardIterator struct {
	Event *StakingLibraryUnlockedReward // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingLibraryUnlockedRewardIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingLibraryUnlockedReward)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingLibraryUnlockedReward)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingLibraryUnlockedRewardIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingLibraryUnlockedRewardIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingLibraryUnlockedReward represents a UnlockedReward event raised by the StakingLibrary contract.
type StakingLibraryUnlockedReward struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterUnlockedReward is a free log retrieval operation binding the contract event 0x496a1c9a1a9ac29d87ecb4e563683ebd0ee80798869f36c86175059eb5dc7304.
//
// Solidity: event UnlockedReward(address indexed who, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) FilterUnlockedReward(opts *bind.FilterOpts, who []common.Address) (*StakingLibraryUnlockedRewardIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingLibrary.contract.FilterLogs(opts, "UnlockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingLibraryUnlockedRewardIterator{contract: _StakingLibrary.contract, event: "UnlockedReward", logs: logs, sub: sub}, nil
}

// WatchUnlockedReward is a free log subscription operation binding the contract event 0x496a1c9a1a9ac29d87ecb4e563683ebd0ee80798869f36c86175059eb5dc7304.
//
// Solidity: event UnlockedReward(address indexed who, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) WatchUnlockedReward(opts *bind.WatchOpts, sink chan<- *StakingLibraryUnlockedReward, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingLibrary.contract.WatchLogs(opts, "UnlockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingLibraryUnlockedReward)
				if err := _StakingLibrary.contract.UnpackLog(event, "UnlockedReward", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnlockedReward is a log parse operation binding the contract event 0x496a1c9a1a9ac29d87ecb4e563683ebd0ee80798869f36c86175059eb5dc7304.
//
// Solidity: event UnlockedReward(address indexed who, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) ParseUnlockedReward(log types.Log) (*StakingLibraryUnlockedReward, error) {
	event := new(StakingLibraryUnlockedReward)
	if err := _StakingLibrary.contract.UnpackLog(event, "UnlockedReward", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingLibraryUnlockedStakeIterator is returned from FilterUnlockedStake and is used to iterate over the raw logs and unpacked data for UnlockedStake events raised by the StakingLibrary contract.
type StakingLibraryUnlockedStakeIterator struct {
	Event *StakingLibraryUnlockedStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingLibraryUnlockedStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingLibraryUnlockedStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingLibraryUnlockedStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingLibraryUnlockedStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingLibraryUnlockedStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingLibraryUnlockedStake represents a UnlockedStake event raised by the StakingLibrary contract.
type StakingLibraryUnlockedStake struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterUnlockedStake is a free log retrieval operation binding the contract event 0x252a696583e35c4d61332829d3bb2a8236f2500140258f089951799c9b999a9c.
//
// Solidity: event UnlockedStake(address indexed who, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) FilterUnlockedStake(opts *bind.FilterOpts, who []common.Address) (*StakingLibraryUnlockedStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingLibrary.contract.FilterLogs(opts, "UnlockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingLibraryUnlockedStakeIterator{contract: _StakingLibrary.contract, event: "UnlockedStake", logs: logs, sub: sub}, nil
}

// WatchUnlockedStake is a free log subscription operation binding the contract event 0x252a696583e35c4d61332829d3bb2a8236f2500140258f089951799c9b999a9c.
//
// Solidity: event UnlockedStake(address indexed who, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) WatchUnlockedStake(opts *bind.WatchOpts, sink chan<- *StakingLibraryUnlockedStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingLibrary.contract.WatchLogs(opts, "UnlockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingLibraryUnlockedStake)
				if err := _StakingLibrary.contract.UnpackLog(event, "UnlockedStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnlockedStake is a log parse operation binding the contract event 0x252a696583e35c4d61332829d3bb2a8236f2500140258f089951799c9b999a9c.
//
// Solidity: event UnlockedStake(address indexed who, uint256 amount)
func (_StakingLibrary *StakingLibraryFilterer) ParseUnlockedStake(log types.Log) (*StakingLibraryUnlockedStake, error) {
	event := new(StakingLibraryUnlockedStake)
	if err := _StakingLibrary.contract.UnpackLog(event, "UnlockedStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StopLibraryMetaData contains all meta data concerning the StopLibrary contract.
var StopLibraryMetaData = &bind.MetaData{
	ABI: "[]",
<<<<<<< Updated upstream
	Bin: "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c73a08a3573baf788141a96f74a922f1f895507c2a46f223dca108b66471fb2764736f6c634300080b0033",
=======
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c5b874248d7ef0e6567b03623d529520408874d272f34efa7451fc5cfc25541964736f6c634300080b0033",
>>>>>>> Stashed changes
}

// StopLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use StopLibraryMetaData.ABI instead.
var StopLibraryABI = StopLibraryMetaData.ABI

// StopLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StopLibraryMetaData.Bin instead.
var StopLibraryBin = StopLibraryMetaData.Bin

// DeployStopLibrary deploys a new Ethereum contract, binding an instance of StopLibrary to it.
func DeployStopLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *StopLibrary, error) {
	parsed, err := StopLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StopLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StopLibrary{StopLibraryCaller: StopLibraryCaller{contract: contract}, StopLibraryTransactor: StopLibraryTransactor{contract: contract}, StopLibraryFilterer: StopLibraryFilterer{contract: contract}}, nil
}

// StopLibrary is an auto generated Go binding around an Ethereum contract.
type StopLibrary struct {
	StopLibraryCaller     // Read-only binding to the contract
	StopLibraryTransactor // Write-only binding to the contract
	StopLibraryFilterer   // Log filterer for contract events
}

// StopLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type StopLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StopLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StopLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StopLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StopLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StopLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StopLibrarySession struct {
	Contract     *StopLibrary      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StopLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StopLibraryCallerSession struct {
	Contract *StopLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// StopLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StopLibraryTransactorSession struct {
	Contract     *StopLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// StopLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type StopLibraryRaw struct {
	Contract *StopLibrary // Generic contract binding to access the raw methods on
}

// StopLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StopLibraryCallerRaw struct {
	Contract *StopLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// StopLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StopLibraryTransactorRaw struct {
	Contract *StopLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStopLibrary creates a new instance of StopLibrary, bound to a specific deployed contract.
func NewStopLibrary(address common.Address, backend bind.ContractBackend) (*StopLibrary, error) {
	contract, err := bindStopLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StopLibrary{StopLibraryCaller: StopLibraryCaller{contract: contract}, StopLibraryTransactor: StopLibraryTransactor{contract: contract}, StopLibraryFilterer: StopLibraryFilterer{contract: contract}}, nil
}

// NewStopLibraryCaller creates a new read-only instance of StopLibrary, bound to a specific deployed contract.
func NewStopLibraryCaller(address common.Address, caller bind.ContractCaller) (*StopLibraryCaller, error) {
	contract, err := bindStopLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StopLibraryCaller{contract: contract}, nil
}

// NewStopLibraryTransactor creates a new write-only instance of StopLibrary, bound to a specific deployed contract.
func NewStopLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*StopLibraryTransactor, error) {
	contract, err := bindStopLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StopLibraryTransactor{contract: contract}, nil
}

// NewStopLibraryFilterer creates a new log filterer instance of StopLibrary, bound to a specific deployed contract.
func NewStopLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*StopLibraryFilterer, error) {
	contract, err := bindStopLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StopLibraryFilterer{contract: contract}, nil
}

// bindStopLibrary binds a generic wrapper to an already deployed contract.
func bindStopLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StopLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StopLibrary *StopLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StopLibrary.Contract.StopLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StopLibrary *StopLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StopLibrary.Contract.StopLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StopLibrary *StopLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StopLibrary.Contract.StopLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StopLibrary *StopLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StopLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StopLibrary *StopLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StopLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StopLibrary *StopLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StopLibrary.Contract.contract.Transact(opts, method, params...)
}

// StoppableMetaData contains all meta data concerning the Stoppable contract.
var StoppableMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
<<<<<<< Updated upstream
	Bin: "0x608060405234801561001057600080fd5b50600061002561007060201b6107ee1760201c565b9050338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061009d565b6000807f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90508091505090565b610b3a806100ac6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063be9a65551161005b578063be9a6555146100b2578063dc978059146100bc578063e348da13146100d8578063fad8b32a146100f45761007d565b806307da68f514610082578063605361721461008c578063ab033ea914610096575b600080fd5b61008a610110565b005b6100946101ad565b005b6100b060048036038101906100ab919061087e565b6102b8565b005b6100ba6103aa565b005b6100d660048036038101906100d1919061087e565b610447565b005b6100f260048036038101906100ed919061087e565b610539565b005b61010e6004803603810190610109919061087e565b610698565b005b600061011a6107ee565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166101aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a19061092e565b60405180910390fd5b50565b60006101b76107ee565b90508060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461024b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610242906109c0565b60405180910390fd5b8060020160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006102c26107ee565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610356576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034d90610a52565b60405180910390fd5b60006103606107ee565b9050828160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b60006103b46107ee565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610444576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043b9061092e565b60405180910390fd5b50565b60006104516107ee565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146104e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc90610a52565b60405180910390fd5b60006104ef6107ee565b9050828160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b60006105436107ee565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806105ee57508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b61062d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062490610ae4565b60405180910390fd5b60006106376107ee565b905060018160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b60006106a26107ee565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061074d57508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b61078c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078390610ae4565b60405180910390fd5b60006107966107ee565b90508060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff0219169055505050565b6000807f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90508091505090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061084b82610820565b9050919050565b61085b81610840565b811461086657600080fd5b50565b60008135905061087881610852565b92915050565b6000602082840312156108945761089361081b565b5b60006108a284828501610869565b91505092915050565b600082825260208201905092915050565b7f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160008201527f6c6c6f7765640000000000000000000000000000000000000000000000000000602082015250565b60006109186026836108ab565b9150610923826108bc565b604082019050919050565b600060208201905081810360008301526109478161090b565b9050919050565b7f41636365737320436f6e74726f6c3a206f776e657273686970206e6f7420677260008201527f616e746564000000000000000000000000000000000000000000000000000000602082015250565b60006109aa6025836108ab565b91506109b58261094e565b604082019050919050565b600060208201905081810360008301526109d98161099d565b9050919050565b7f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60008201527f6c6f776564000000000000000000000000000000000000000000000000000000602082015250565b6000610a3c6025836108ab565b9150610a47826109e0565b604082019050919050565b60006020820190508181036000830152610a6b81610a2f565b9050919050565b7f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060008201527f657261746f7220616c6c6f776564000000000000000000000000000000000000602082015250565b6000610ace602e836108ab565b9150610ad982610a72565b604082019050919050565b60006020820190508181036000830152610afd81610ac1565b905091905056fea2646970667358221220d08e1ada664145e6bc5eceee17d7dc4c6be4076ba5d660ab16d1efc50adae96764736f6c634300080b0033",
=======
	Bin: "0x608060405234801561001057600080fd5b50600061002561003e60201b61084b1760201c565b60010180546001600160a01b0319163317905550610062565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90565b6108e2806100716000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063be9a65551161005b578063be9a655514610082578063dc978059146100a7578063e348da13146100ba578063fad8b32a146100cd57600080fd5b806307da68f514610082578063605361721461008c578063ab033ea914610094575b600080fd5b61008a6100e0565b005b61008a6101a9565b61008a6100a236600461086f565b6102ce565b61008a6100b536600461086f565b61041d565b61008a6100c836600461086f565b61056c565b61008a6100db36600461086f565b6106dd565b3360009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a602081905260409091205460ff166101a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160448201527f6c6c6f776564000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b50565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520c547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff163314610291576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f776e657273686970206e6f7420677260448201527f616e746564000000000000000000000000000000000000000000000000000000606482015260840161019d565b6002810180547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169091556001909101805490911633179055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff1633146103b6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60448201527f6c6f776564000000000000000000000000000000000000000000000000000000606482015260840161019d565b507f31434318735a8e6385da596be365952169e52986860b974818986b522d23520d80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff163314610505576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60448201527f6c6f776564000000000000000000000000000000000000000000000000000000606482015260840161019d565b507f31434318735a8e6385da596be365952169e52986860b974818986b522d23520c80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff163314806105e257503360009081526020829052604090205460ff165b61066e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060448201527f657261746f7220616c6c6f776564000000000000000000000000000000000000606482015260840161019d565b5073ffffffffffffffffffffffffffffffffffffffff1660009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520b547f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9073ffffffffffffffffffffffffffffffffffffffff1633148061075357503360009081526020829052604090205460ff165b6107df576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060448201527f657261746f7220616c6c6f776564000000000000000000000000000000000000606482015260840161019d565b5073ffffffffffffffffffffffffffffffffffffffff1660009081527f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b7f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90565b60006020828403121561088157600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146108a557600080fd5b939250505056fea264697066735822122004d6bd67a2e841f1b79b873bd4fc5e5fd006c720f4a1634dea13829df52af6fb64736f6c634300080b0033",
>>>>>>> Stashed changes
}

// StoppableABI is the input ABI used to generate the binding from.
// Deprecated: Use StoppableMetaData.ABI instead.
var StoppableABI = StoppableMetaData.ABI

// StoppableBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StoppableMetaData.Bin instead.
var StoppableBin = StoppableMetaData.Bin

// DeployStoppable deploys a new Ethereum contract, binding an instance of Stoppable to it.
func DeployStoppable(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Stoppable, error) {
	parsed, err := StoppableMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StoppableBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Stoppable{StoppableCaller: StoppableCaller{contract: contract}, StoppableTransactor: StoppableTransactor{contract: contract}, StoppableFilterer: StoppableFilterer{contract: contract}}, nil
}

// Stoppable is an auto generated Go binding around an Ethereum contract.
type Stoppable struct {
	StoppableCaller     // Read-only binding to the contract
	StoppableTransactor // Write-only binding to the contract
	StoppableFilterer   // Log filterer for contract events
}

// StoppableCaller is an auto generated read-only Go binding around an Ethereum contract.
type StoppableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StoppableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StoppableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StoppableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StoppableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StoppableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StoppableSession struct {
	Contract     *Stoppable        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StoppableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StoppableCallerSession struct {
	Contract *StoppableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// StoppableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StoppableTransactorSession struct {
	Contract     *StoppableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// StoppableRaw is an auto generated low-level Go binding around an Ethereum contract.
type StoppableRaw struct {
	Contract *Stoppable // Generic contract binding to access the raw methods on
}

// StoppableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StoppableCallerRaw struct {
	Contract *StoppableCaller // Generic read-only contract binding to access the raw methods on
}

// StoppableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StoppableTransactorRaw struct {
	Contract *StoppableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStoppable creates a new instance of Stoppable, bound to a specific deployed contract.
func NewStoppable(address common.Address, backend bind.ContractBackend) (*Stoppable, error) {
	contract, err := bindStoppable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Stoppable{StoppableCaller: StoppableCaller{contract: contract}, StoppableTransactor: StoppableTransactor{contract: contract}, StoppableFilterer: StoppableFilterer{contract: contract}}, nil
}

// NewStoppableCaller creates a new read-only instance of Stoppable, bound to a specific deployed contract.
func NewStoppableCaller(address common.Address, caller bind.ContractCaller) (*StoppableCaller, error) {
	contract, err := bindStoppable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StoppableCaller{contract: contract}, nil
}

// NewStoppableTransactor creates a new write-only instance of Stoppable, bound to a specific deployed contract.
func NewStoppableTransactor(address common.Address, transactor bind.ContractTransactor) (*StoppableTransactor, error) {
	contract, err := bindStoppable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StoppableTransactor{contract: contract}, nil
}

// NewStoppableFilterer creates a new log filterer instance of Stoppable, bound to a specific deployed contract.
func NewStoppableFilterer(address common.Address, filterer bind.ContractFilterer) (*StoppableFilterer, error) {
	contract, err := bindStoppable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StoppableFilterer{contract: contract}, nil
}

// bindStoppable binds a generic wrapper to an already deployed contract.
func bindStoppable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StoppableABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Stoppable *StoppableRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Stoppable.Contract.StoppableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Stoppable *StoppableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Stoppable.Contract.StoppableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Stoppable *StoppableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Stoppable.Contract.StoppableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Stoppable *StoppableCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Stoppable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Stoppable *StoppableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Stoppable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Stoppable *StoppableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Stoppable.Contract.contract.Transact(opts, method, params...)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_Stoppable *StoppableTransactor) GrantOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _Stoppable.contract.Transact(opts, "grantOperator", who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_Stoppable *StoppableSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _Stoppable.Contract.GrantOperator(&_Stoppable.TransactOpts, who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_Stoppable *StoppableTransactorSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _Stoppable.Contract.GrantOperator(&_Stoppable.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_Stoppable *StoppableTransactor) GrantOwner(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _Stoppable.contract.Transact(opts, "grantOwner", who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_Stoppable *StoppableSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _Stoppable.Contract.GrantOwner(&_Stoppable.TransactOpts, who)
}

// GrantOwner is a paid mutator transaction binding the contract method 0xdc978059.
//
// Solidity: function grantOwner(address who) returns()
func (_Stoppable *StoppableTransactorSession) GrantOwner(who common.Address) (*types.Transaction, error) {
	return _Stoppable.Contract.GrantOwner(&_Stoppable.TransactOpts, who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_Stoppable *StoppableTransactor) RevokeOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _Stoppable.contract.Transact(opts, "revokeOperator", who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_Stoppable *StoppableSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _Stoppable.Contract.RevokeOperator(&_Stoppable.TransactOpts, who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_Stoppable *StoppableTransactorSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _Stoppable.Contract.RevokeOperator(&_Stoppable.TransactOpts, who)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_Stoppable *StoppableTransactor) SetGovernance(opts *bind.TransactOpts, governance_ common.Address) (*types.Transaction, error) {
	return _Stoppable.contract.Transact(opts, "setGovernance", governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_Stoppable *StoppableSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _Stoppable.Contract.SetGovernance(&_Stoppable.TransactOpts, governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_Stoppable *StoppableTransactorSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _Stoppable.Contract.SetGovernance(&_Stoppable.TransactOpts, governance_)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_Stoppable *StoppableTransactor) Start(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Stoppable.contract.Transact(opts, "start")
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_Stoppable *StoppableSession) Start() (*types.Transaction, error) {
	return _Stoppable.Contract.Start(&_Stoppable.TransactOpts)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_Stoppable *StoppableTransactorSession) Start() (*types.Transaction, error) {
	return _Stoppable.Contract.Start(&_Stoppable.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_Stoppable *StoppableTransactor) Stop(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Stoppable.contract.Transact(opts, "stop")
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_Stoppable *StoppableSession) Stop() (*types.Transaction, error) {
	return _Stoppable.Contract.Stop(&_Stoppable.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_Stoppable *StoppableTransactorSession) Stop() (*types.Transaction, error) {
	return _Stoppable.Contract.Stop(&_Stoppable.TransactOpts)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_Stoppable *StoppableTransactor) TakeOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Stoppable.contract.Transact(opts, "takeOwnership")
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_Stoppable *StoppableSession) TakeOwnership() (*types.Transaction, error) {
	return _Stoppable.Contract.TakeOwnership(&_Stoppable.TransactOpts)
}

// TakeOwnership is a paid mutator transaction binding the contract method 0x60536172.
//
// Solidity: function takeOwnership() returns()
func (_Stoppable *StoppableTransactorSession) TakeOwnership() (*types.Transaction, error) {
	return _Stoppable.Contract.TakeOwnership(&_Stoppable.TransactOpts)
}

// TXInPreImageParserLibraryMetaData contains all meta data concerning the TXInPreImageParserLibrary contract.
var TXInPreImageParserLibraryMetaData = &bind.MetaData{
	ABI: "[]",
<<<<<<< Updated upstream
	Bin: "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122026f4dd2038d7581b2c522eb77f91775ac58c7ae66204a029b41e0e4d63e9d71664736f6c634300080b0033",
=======
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220be5615d9044860a4420115a9ff882623a82cb9ba5d084fdc3df589db5942460664736f6c634300080b0033",
>>>>>>> Stashed changes
}

// TXInPreImageParserLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use TXInPreImageParserLibraryMetaData.ABI instead.
var TXInPreImageParserLibraryABI = TXInPreImageParserLibraryMetaData.ABI

// TXInPreImageParserLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TXInPreImageParserLibraryMetaData.Bin instead.
var TXInPreImageParserLibraryBin = TXInPreImageParserLibraryMetaData.Bin

// DeployTXInPreImageParserLibrary deploys a new Ethereum contract, binding an instance of TXInPreImageParserLibrary to it.
func DeployTXInPreImageParserLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TXInPreImageParserLibrary, error) {
	parsed, err := TXInPreImageParserLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TXInPreImageParserLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TXInPreImageParserLibrary{TXInPreImageParserLibraryCaller: TXInPreImageParserLibraryCaller{contract: contract}, TXInPreImageParserLibraryTransactor: TXInPreImageParserLibraryTransactor{contract: contract}, TXInPreImageParserLibraryFilterer: TXInPreImageParserLibraryFilterer{contract: contract}}, nil
}

// TXInPreImageParserLibrary is an auto generated Go binding around an Ethereum contract.
type TXInPreImageParserLibrary struct {
	TXInPreImageParserLibraryCaller     // Read-only binding to the contract
	TXInPreImageParserLibraryTransactor // Write-only binding to the contract
	TXInPreImageParserLibraryFilterer   // Log filterer for contract events
}

// TXInPreImageParserLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type TXInPreImageParserLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TXInPreImageParserLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TXInPreImageParserLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TXInPreImageParserLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TXInPreImageParserLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TXInPreImageParserLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TXInPreImageParserLibrarySession struct {
	Contract     *TXInPreImageParserLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts              // Call options to use throughout this session
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// TXInPreImageParserLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TXInPreImageParserLibraryCallerSession struct {
	Contract *TXInPreImageParserLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                    // Call options to use throughout this session
}

// TXInPreImageParserLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TXInPreImageParserLibraryTransactorSession struct {
	Contract     *TXInPreImageParserLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                    // Transaction auth options to use throughout this session
}

// TXInPreImageParserLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type TXInPreImageParserLibraryRaw struct {
	Contract *TXInPreImageParserLibrary // Generic contract binding to access the raw methods on
}

// TXInPreImageParserLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TXInPreImageParserLibraryCallerRaw struct {
	Contract *TXInPreImageParserLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// TXInPreImageParserLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TXInPreImageParserLibraryTransactorRaw struct {
	Contract *TXInPreImageParserLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTXInPreImageParserLibrary creates a new instance of TXInPreImageParserLibrary, bound to a specific deployed contract.
func NewTXInPreImageParserLibrary(address common.Address, backend bind.ContractBackend) (*TXInPreImageParserLibrary, error) {
	contract, err := bindTXInPreImageParserLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TXInPreImageParserLibrary{TXInPreImageParserLibraryCaller: TXInPreImageParserLibraryCaller{contract: contract}, TXInPreImageParserLibraryTransactor: TXInPreImageParserLibraryTransactor{contract: contract}, TXInPreImageParserLibraryFilterer: TXInPreImageParserLibraryFilterer{contract: contract}}, nil
}

// NewTXInPreImageParserLibraryCaller creates a new read-only instance of TXInPreImageParserLibrary, bound to a specific deployed contract.
func NewTXInPreImageParserLibraryCaller(address common.Address, caller bind.ContractCaller) (*TXInPreImageParserLibraryCaller, error) {
	contract, err := bindTXInPreImageParserLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TXInPreImageParserLibraryCaller{contract: contract}, nil
}

// NewTXInPreImageParserLibraryTransactor creates a new write-only instance of TXInPreImageParserLibrary, bound to a specific deployed contract.
func NewTXInPreImageParserLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*TXInPreImageParserLibraryTransactor, error) {
	contract, err := bindTXInPreImageParserLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TXInPreImageParserLibraryTransactor{contract: contract}, nil
}

// NewTXInPreImageParserLibraryFilterer creates a new log filterer instance of TXInPreImageParserLibrary, bound to a specific deployed contract.
func NewTXInPreImageParserLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*TXInPreImageParserLibraryFilterer, error) {
	contract, err := bindTXInPreImageParserLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TXInPreImageParserLibraryFilterer{contract: contract}, nil
}

// bindTXInPreImageParserLibrary binds a generic wrapper to an already deployed contract.
func bindTXInPreImageParserLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TXInPreImageParserLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TXInPreImageParserLibrary *TXInPreImageParserLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TXInPreImageParserLibrary.Contract.TXInPreImageParserLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TXInPreImageParserLibrary *TXInPreImageParserLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TXInPreImageParserLibrary.Contract.TXInPreImageParserLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TXInPreImageParserLibrary *TXInPreImageParserLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TXInPreImageParserLibrary.Contract.TXInPreImageParserLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TXInPreImageParserLibrary *TXInPreImageParserLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TXInPreImageParserLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TXInPreImageParserLibrary *TXInPreImageParserLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TXInPreImageParserLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TXInPreImageParserLibrary *TXInPreImageParserLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TXInPreImageParserLibrary.Contract.contract.Transact(opts, method, params...)
}

// TokenMetaData contains all meta data concerning the Token contract.
var TokenMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbol_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name_\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Start\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Stop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contractDSAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"move\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"pull\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"push\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractDSAuthority\",\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"name_\",\"type\":\"bytes32\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
<<<<<<< Updated upstream
	Bin: "",
=======
	Bin: "0x6080604052601260065560006007556040516200001c9062000689565b604051809103906000f08015801562000039573d6000803e3d6000fd5b50600b80546001600160a01b0319166001600160a01b03929092169190911790553480156200006757600080fd5b5060405162002b1638038062002b168339810160408190526200008a9162000697565b600180546001600160a01b031916339081179091556040518391907fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a2600555600a80546001600160a01b03191633908117909155620000ee9062000190565b600b5462000105906001600160a01b03166200028e565b6007819055600b5460405163e348da1360e01b81523360048201526001600160a01b039091169063e348da1390602401600060405180830381600087803b1580156200015057600080fd5b505af115801562000165573d6000803e3d6000fd5b5050601260065550620001889050336c0c9f2c9cd04674edea400000006200033c565b505062000736565b600a546001600160a01b0316331480620001b957503360009081526008602052604090205460ff165b620002145760405162461bcd60e51b8152602060048201526031602482015260008051602062002af683398151915260448201527037b934bd32b21037b832b930ba37b9399760791b60648201526084015b60405180910390fd5b600b5460405163e348da1360e01b81526001600160a01b0383811660048301529091169063e348da1390602401600060405180830381600087803b1580156200025c57600080fd5b505af115801562000271573d6000803e3d6000fd5b505050506200028b816200048560201b620015dd1760201c565b50565b620002a6336001600160e01b03196000351662000540565b620002f45760405162461bcd60e51b815260206004820152601460248201527f64732d617574682d756e617574686f72697a656400000000000000000000000060448201526064016200020b565b600080546001600160a01b0319166001600160a01b038316908117825560405190917f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada491a250565b62000354336001600160e01b03196000351662000540565b620003a25760405162461bcd60e51b815260206004820152601460248201527f64732d617574682d756e617574686f72697a656400000000000000000000000060448201526064016200020b565b600154600160a01b900460ff1615620003f35760405162461bcd60e51b8152602060048201526012602482015271191ccb5cdd1bdc0b5a5ccb5cdd1bdc1c195960721b60448201526064016200020b565b6001600160a01b03821660009081526003602052604090205462000418908262000627565b6001600160a01b03831660009081526003602052604090205560025462000440908262000627565b6002556040518181526001600160a01b038316907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859060200160405180910390a25050565b600a546001600160a01b0316331480620004ae57503360009081526008602052604090205460ff165b620005055760405162461bcd60e51b8152602060048201526031602482015260008051602062002af683398151915260448201527037b934bd32b21037b832b930ba37b9399760791b60648201526084016200020b565b6001600160a01b0381166000908152600860205260408120805460ff1916600117905560098054916200053883620006d2565b919050555050565b60006001600160a01b0383163014156200055d5750600162000621565b6001546001600160a01b03848116911614156200057d5750600162000621565b6000546001600160a01b0316620005975750600062000621565b60005460405163b700961360e01b81526001600160a01b0385811660048301523060248301526001600160e01b0319851660448301529091169063b700961390606401602060405180830381865afa158015620005f8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200061e9190620006f0565b90505b92915050565b6000826200063683826200071b565b9150811015620006215760405162461bcd60e51b815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f7700000000000000000000000060448201526064016200020b565b6106d5806200242183390190565b60008060408385031215620006ab57600080fd5b505080516020909101519092909150565b634e487b7160e01b600052601160045260246000fd5b6000600019821415620006e957620006e9620006bc565b5060010190565b6000602082840312156200070357600080fd5b815180151581146200071457600080fd5b9392505050565b60008219821115620007315762000731620006bc565b500190565b611cdb80620007466000396000f3fe608060405234801561001057600080fd5b50600436106101b95760003560e01c80638da5cb5b116100f9578063be9a655511610097578063dd62ed3e11610071578063dd62ed3e146103b8578063e348da13146103e3578063f2d5d56b146103f6578063fad8b32a1461040957600080fd5b8063be9a65551461037d578063bf7e214f14610385578063daea85c5146103a557600080fd5b8063a0712d68116100d3578063a0712d6814610331578063a9059cbb14610344578063b753a98c14610357578063bb35783b1461036a57600080fd5b80638da5cb5b146102d057806395d89b41146103155780639dc29fac1461031e57600080fd5b8063313ce567116101665780635ac801fe116101405780635ac801fe1461026557806370a082311461027857806375f12b21146102985780637a9e5e4b146102bd57600080fd5b8063313ce5671461023657806340c10f191461023f57806342966c681461025257600080fd5b806313af40351161019757806313af40351461020757806318160ddd1461021a57806323b872dd1461022357600080fd5b806306fdde03146101be57806307da68f5146101da578063095ea7b3146101e4575b600080fd5b6101c760075481565b6040519081526020015b60405180910390f35b6101e261041c565b005b6101f76101f2366004611adb565b61051f565b60405190151581526020016101d1565b6101e2610215366004611b07565b610619565b6101c760025481565b6101f7610231366004611b24565b61071c565b6101c760065481565b6101e261024d366004611adb565b610a94565b6101e2610260366004611b65565b610c63565b6101e2610273366004611b65565b610c70565b6101c7610286366004611b07565b60036020526000908152604090205481565b6001546101f79074010000000000000000000000000000000000000000900460ff1681565b6101e26102cb366004611b07565b610d09565b6001546102f09073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101d1565b6101c760055481565b6101e261032c366004611adb565b610e0a565b6101e261033f366004611b65565b6111e2565b6101f7610352366004611adb565b6111ec565b6101e2610365366004611adb565b611200565b6101e2610378366004611b24565b611210565b6101e2611221565b6000546102f09073ffffffffffffffffffffffffffffffffffffffff1681565b6101f76103b3366004611b07565b611308565b6101c76103c6366004611b7e565b600460209081526000928352604080842090915290825290205481565b6101e26103f1366004611b07565b611334565b6101e2610404366004611adb565b611483565b6101e2610417366004611b07565b61148e565b61044a336000357fffffffff0000000000000000000000000000000000000000000000000000000016611702565b6104b5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d617574682d756e617574686f72697a656400000000000000000000000060448201526064015b60405180910390fd5b600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790556040517fbedf0f4abfe86d4ffad593d9607fe70e83ea706033d44d24b3b6283cf3fc4f6b90600090a1565b60015460009074010000000000000000000000000000000000000000900460ff16156105a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f64732d73746f702d69732d73746f70706564000000000000000000000000000060448201526064016104ac565b33600081815260046020908152604080832073ffffffffffffffffffffffffffffffffffffffff881680855290835292819020869055518581529192917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a35060015b92915050565b610647336000357fffffffff0000000000000000000000000000000000000000000000000000000016611702565b6106ad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d617574682d756e617574686f72697a656400000000000000000000000060448201526064016104ac565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a250565b60015460009074010000000000000000000000000000000000000000900460ff16156107a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f64732d73746f702d69732d73746f70706564000000000000000000000000000060448201526064016104ac565b73ffffffffffffffffffffffffffffffffffffffff8416331480159061081a575073ffffffffffffffffffffffffffffffffffffffff841660009081526004602090815260408083203384529091529020547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14155b156109265773ffffffffffffffffffffffffffffffffffffffff841660009081526004602090815260408083203384529091529020548211156108b9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f64732d746f6b656e2d696e73756666696369656e742d617070726f76616c000060448201526064016104ac565b73ffffffffffffffffffffffffffffffffffffffff841660009081526004602090815260408083203384529091529020546108f49083611843565b73ffffffffffffffffffffffffffffffffffffffff851660009081526004602090815260408083203384529091529020555b73ffffffffffffffffffffffffffffffffffffffff84166000908152600360205260409020548211156109b5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f64732d746f6b656e2d696e73756666696369656e742d62616c616e636500000060448201526064016104ac565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600360205260409020546109e59083611843565b73ffffffffffffffffffffffffffffffffffffffff8086166000908152600360205260408082209390935590851681522054610a2190836118bb565b73ffffffffffffffffffffffffffffffffffffffff80851660008181526003602052604090819020939093559151908616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610a829086815260200190565b60405180910390a35060019392505050565b610ac2336000357fffffffff0000000000000000000000000000000000000000000000000000000016611702565b610b28576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d617574682d756e617574686f72697a656400000000000000000000000060448201526064016104ac565b60015474010000000000000000000000000000000000000000900460ff1615610bad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f64732d73746f702d69732d73746f70706564000000000000000000000000000060448201526064016104ac565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260036020526040902054610bdd90826118bb565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260036020526040902055600254610c1090826118bb565b60025560405181815273ffffffffffffffffffffffffffffffffffffffff8316907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885906020015b60405180910390a25050565b610c6d3382610e0a565b50565b610c9e336000357fffffffff0000000000000000000000000000000000000000000000000000000016611702565b610d04576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d617574682d756e617574686f72697a656400000000000000000000000060448201526064016104ac565b600755565b610d37336000357fffffffff0000000000000000000000000000000000000000000000000000000016611702565b610d9d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d617574682d756e617574686f72697a656400000000000000000000000060448201526064016104ac565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316908117825560405190917f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada491a250565b610e38336000357fffffffff0000000000000000000000000000000000000000000000000000000016611702565b610e9e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d617574682d756e617574686f72697a656400000000000000000000000060448201526064016104ac565b60015474010000000000000000000000000000000000000000900460ff1615610f23576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f64732d73746f702d69732d73746f70706564000000000000000000000000000060448201526064016104ac565b73ffffffffffffffffffffffffffffffffffffffff82163314801590610f99575073ffffffffffffffffffffffffffffffffffffffff821660009081526004602090815260408083203384529091529020547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14155b156110a55773ffffffffffffffffffffffffffffffffffffffff82166000908152600460209081526040808320338452909152902054811115611038576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f64732d746f6b656e2d696e73756666696369656e742d617070726f76616c000060448201526064016104ac565b73ffffffffffffffffffffffffffffffffffffffff821660009081526004602090815260408083203384529091529020546110739082611843565b73ffffffffffffffffffffffffffffffffffffffff831660009081526004602090815260408083203384529091529020555b73ffffffffffffffffffffffffffffffffffffffff8216600090815260036020526040902054811115611134576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f64732d746f6b656e2d696e73756666696369656e742d62616c616e636500000060448201526064016104ac565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600360205260409020546111649082611843565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600360205260409020556002546111979082611843565b60025560405181815273ffffffffffffffffffffffffffffffffffffffff8316907fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca590602001610c57565b610c6d3382610a94565b60006111f933848461071c565b9392505050565b61120b33838361071c565b505050565b61121b83838361071c565b50505050565b61124f336000357fffffffff0000000000000000000000000000000000000000000000000000000016611702565b6112b5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d617574682d756e617574686f72697a656400000000000000000000000060448201526064016104ac565b600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690556040517f1b55ba3aa851a46be3b365aee5b5c140edd620d578922f3e8466d2cbd96f954b90600090a1565b6000610613827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61051f565b600a5473ffffffffffffffffffffffffffffffffffffffff1633148061136957503360009081526008602052604090205460ff165b6113f5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e00000000000000000000000000000060648201526084016104ac565b600b546040517fe348da1300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301529091169063e348da1390602401600060405180830381600087803b15801561146257600080fd5b505af1158015611476573d6000803e3d6000fd5b50505050610c6d816115dd565b61120b82338361071c565b600a5473ffffffffffffffffffffffffffffffffffffffff163314806114c357503360009081526008602052604090205460ff165b61154f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e00000000000000000000000000000060648201526084016104ac565b600b546040517ffad8b32a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301529091169063fad8b32a90602401600060405180830381600087803b1580156115bc57600080fd5b505af11580156115d0573d6000803e3d6000fd5b50505050610c6d81611933565b600a5473ffffffffffffffffffffffffffffffffffffffff1633148061161257503360009081526008602052604090205460ff165b61169e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e00000000000000000000000000000060648201526084016104ac565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260086020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905560098054916116fa83611be6565b919050555050565b600073ffffffffffffffffffffffffffffffffffffffff831630141561172a57506001610613565b60015473ffffffffffffffffffffffffffffffffffffffff8481169116141561175557506001610613565b60005473ffffffffffffffffffffffffffffffffffffffff1661177a57506000610613565b6000546040517fb700961300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301523060248301527fffffffff00000000000000000000000000000000000000000000000000000000851660448301529091169063b700961390606401602060405180830381865afa158015611818573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183c9190611c1f565b9050610613565b6000826118508382611c41565b9150811115610613576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f64732d6d6174682d7375622d756e646572666c6f77000000000000000000000060448201526064016104ac565b6000826118c88382611c58565b9150811015610613576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f7700000000000000000000000060448201526064016104ac565b600a5473ffffffffffffffffffffffffffffffffffffffff1633148061196857503360009081526008602052604090205460ff165b6119f4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e00000000000000000000000000000060648201526084016104ac565b600160095411611a60576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f43616e27742072656d6f766520616c6c206f70657261746f727300000000000060448201526064016104ac565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260086020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905560098054916116fa83611c70565b73ffffffffffffffffffffffffffffffffffffffff81168114610c6d57600080fd5b60008060408385031215611aee57600080fd5b8235611af981611ab9565b946020939093013593505050565b600060208284031215611b1957600080fd5b81356111f981611ab9565b600080600060608486031215611b3957600080fd5b8335611b4481611ab9565b92506020840135611b5481611ab9565b929592945050506040919091013590565b600060208284031215611b7757600080fd5b5035919050565b60008060408385031215611b9157600080fd5b8235611b9c81611ab9565b91506020830135611bac81611ab9565b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611c1857611c18611bb7565b5060010190565b600060208284031215611c3157600080fd5b815180151581146111f957600080fd5b600082821015611c5357611c53611bb7565b500390565b60008219821115611c6b57611c6b611bb7565b500190565b600081611c7f57611c7f611bb7565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fea2646970667358221220201334a86712251d2e0201ee9bdc04dbe8f04bc0b97b7ae5b8509a817df4409b64736f6c634300080b0033608060405234801561001057600080fd5b50600280546001600160a01b0319163390811790915561002f90610034565b610129565b6002546001600160a01b031633148061005c57503360009081526020819052604090205460ff165b6100c65760405162461bcd60e51b815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527037b934bd32b21037b832b930ba37b9399760791b606482015260840160405180910390fd5b6001600160a01b0381166000908152602081905260408120805460ff191660019081179091558054916100f883610100565b919050555050565b600060001982141561012257634e487b7160e01b600052601160045260246000fd5b5060010190565b61059d806101386000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063b700961314610046578063e348da131461006d578063fad8b32a14610082575b600080fd5b61005961005436600461043c565b610095565b604051901515815260200160405180910390f35b61008061007b3660046104a8565b610168565b005b6100806100903660046104a8565b61028e565b60025460009073ffffffffffffffffffffffffffffffffffffffff163314806100cd57503360009081526020819052604090205460ff165b61015e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e00000000000000000000000000000060648201526084015b60405180910390fd5b5060019392505050565b60025473ffffffffffffffffffffffffffffffffffffffff1633148061019d57503360009081526020819052604090205460ff165b610229576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e0000000000000000000000000000006064820152608401610155565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260208190526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001908117909155805491610286836104f9565b919050555050565b60025473ffffffffffffffffffffffffffffffffffffffff163314806102c357503360009081526020819052604090205460ff165b61034f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e0000000000000000000000000000006064820152608401610155565b60018054116103ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f43616e27742072656d6f766520616c6c206f70657261746f72730000000000006044820152606401610155565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260208190526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055600180549161028683610532565b803573ffffffffffffffffffffffffffffffffffffffff8116811461043757600080fd5b919050565b60008060006060848603121561045157600080fd5b61045a84610413565b925061046860208501610413565b915060408401357fffffffff000000000000000000000000000000000000000000000000000000008116811461049d57600080fd5b809150509250925092565b6000602082840312156104ba57600080fd5b6104c382610413565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561052b5761052b6104ca565b5060010190565b600081610541576105416104ca565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fea2646970667358221220849b79a235187040c0384716f9228587c0638b17222f3587723991bfe1f44f3064736f6c634300080b003346756e6374696f6e616c697479207265737472696374656420746f2061757468",
>>>>>>> Stashed changes
}

// TokenABI is the input ABI used to generate the binding from.
// Deprecated: Use TokenMetaData.ABI instead.
var TokenABI = TokenMetaData.ABI

// TokenBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TokenMetaData.Bin instead.
var TokenBin = TokenMetaData.Bin

// DeployToken deploys a new Ethereum contract, binding an instance of Token to it.
func DeployToken(auth *bind.TransactOpts, backend bind.ContractBackend, symbol_ [32]byte, name_ [32]byte) (common.Address, *types.Transaction, *Token, error) {
	parsed, err := TokenMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TokenBin), backend, symbol_, name_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Token{TokenCaller: TokenCaller{contract: contract}, TokenTransactor: TokenTransactor{contract: contract}, TokenFilterer: TokenFilterer{contract: contract}}, nil
}

// Token is an auto generated Go binding around an Ethereum contract.
type Token struct {
	TokenCaller     // Read-only binding to the contract
	TokenTransactor // Write-only binding to the contract
	TokenFilterer   // Log filterer for contract events
}

// TokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type TokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TokenSession struct {
	Contract     *Token            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TokenCallerSession struct {
	Contract *TokenCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// TokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TokenTransactorSession struct {
	Contract     *TokenTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type TokenRaw struct {
	Contract *Token // Generic contract binding to access the raw methods on
}

// TokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TokenCallerRaw struct {
	Contract *TokenCaller // Generic read-only contract binding to access the raw methods on
}

// TokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TokenTransactorRaw struct {
	Contract *TokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewToken creates a new instance of Token, bound to a specific deployed contract.
func NewToken(address common.Address, backend bind.ContractBackend) (*Token, error) {
	contract, err := bindToken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Token{TokenCaller: TokenCaller{contract: contract}, TokenTransactor: TokenTransactor{contract: contract}, TokenFilterer: TokenFilterer{contract: contract}}, nil
}

// NewTokenCaller creates a new read-only instance of Token, bound to a specific deployed contract.
func NewTokenCaller(address common.Address, caller bind.ContractCaller) (*TokenCaller, error) {
	contract, err := bindToken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TokenCaller{contract: contract}, nil
}

// NewTokenTransactor creates a new write-only instance of Token, bound to a specific deployed contract.
func NewTokenTransactor(address common.Address, transactor bind.ContractTransactor) (*TokenTransactor, error) {
	contract, err := bindToken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TokenTransactor{contract: contract}, nil
}

// NewTokenFilterer creates a new log filterer instance of Token, bound to a specific deployed contract.
func NewTokenFilterer(address common.Address, filterer bind.ContractFilterer) (*TokenFilterer, error) {
	contract, err := bindToken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TokenFilterer{contract: contract}, nil
}

// bindToken binds a generic wrapper to an already deployed contract.
func bindToken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TokenABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Token *TokenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Token.Contract.TokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Token *TokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Token.Contract.TokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Token *TokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Token.Contract.TokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Token *TokenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Token.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Token *TokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Token.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Token *TokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Token.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address , address ) view returns(uint256)
func (_Token *TokenCaller) Allowance(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "allowance", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address , address ) view returns(uint256)
func (_Token *TokenSession) Allowance(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Token.Contract.Allowance(&_Token.CallOpts, arg0, arg1)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address , address ) view returns(uint256)
func (_Token *TokenCallerSession) Allowance(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Token.Contract.Allowance(&_Token.CallOpts, arg0, arg1)
}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_Token *TokenCaller) Authority(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "authority")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_Token *TokenSession) Authority() (common.Address, error) {
	return _Token.Contract.Authority(&_Token.CallOpts)
}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_Token *TokenCallerSession) Authority() (common.Address, error) {
	return _Token.Contract.Authority(&_Token.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address ) view returns(uint256)
func (_Token *TokenCaller) BalanceOf(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "balanceOf", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address ) view returns(uint256)
func (_Token *TokenSession) BalanceOf(arg0 common.Address) (*big.Int, error) {
	return _Token.Contract.BalanceOf(&_Token.CallOpts, arg0)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address ) view returns(uint256)
func (_Token *TokenCallerSession) BalanceOf(arg0 common.Address) (*big.Int, error) {
	return _Token.Contract.BalanceOf(&_Token.CallOpts, arg0)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint256)
func (_Token *TokenCaller) Decimals(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint256)
func (_Token *TokenSession) Decimals() (*big.Int, error) {
	return _Token.Contract.Decimals(&_Token.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint256)
func (_Token *TokenCallerSession) Decimals() (*big.Int, error) {
	return _Token.Contract.Decimals(&_Token.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(bytes32)
func (_Token *TokenCaller) Name(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "name")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(bytes32)
func (_Token *TokenSession) Name() ([32]byte, error) {
	return _Token.Contract.Name(&_Token.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(bytes32)
func (_Token *TokenCallerSession) Name() ([32]byte, error) {
	return _Token.Contract.Name(&_Token.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Token *TokenCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Token *TokenSession) Owner() (common.Address, error) {
	return _Token.Contract.Owner(&_Token.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Token *TokenCallerSession) Owner() (common.Address, error) {
	return _Token.Contract.Owner(&_Token.CallOpts)
}

// Stopped is a free data retrieval call binding the contract method 0x75f12b21.
//
// Solidity: function stopped() view returns(bool)
func (_Token *TokenCaller) Stopped(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "stopped")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Stopped is a free data retrieval call binding the contract method 0x75f12b21.
//
// Solidity: function stopped() view returns(bool)
func (_Token *TokenSession) Stopped() (bool, error) {
	return _Token.Contract.Stopped(&_Token.CallOpts)
}

// Stopped is a free data retrieval call binding the contract method 0x75f12b21.
//
// Solidity: function stopped() view returns(bool)
func (_Token *TokenCallerSession) Stopped() (bool, error) {
	return _Token.Contract.Stopped(&_Token.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(bytes32)
func (_Token *TokenCaller) Symbol(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(bytes32)
func (_Token *TokenSession) Symbol() ([32]byte, error) {
	return _Token.Contract.Symbol(&_Token.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(bytes32)
func (_Token *TokenCallerSession) Symbol() ([32]byte, error) {
	return _Token.Contract.Symbol(&_Token.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Token *TokenCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Token *TokenSession) TotalSupply() (*big.Int, error) {
	return _Token.Contract.TotalSupply(&_Token.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Token *TokenCallerSession) TotalSupply() (*big.Int, error) {
	return _Token.Contract.TotalSupply(&_Token.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address guy, uint256 wad) returns(bool)
func (_Token *TokenTransactor) Approve(opts *bind.TransactOpts, guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "approve", guy, wad)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address guy, uint256 wad) returns(bool)
func (_Token *TokenSession) Approve(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Approve(&_Token.TransactOpts, guy, wad)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address guy, uint256 wad) returns(bool)
func (_Token *TokenTransactorSession) Approve(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Approve(&_Token.TransactOpts, guy, wad)
}

// Approve0 is a paid mutator transaction binding the contract method 0xdaea85c5.
//
// Solidity: function approve(address guy) returns(bool)
func (_Token *TokenTransactor) Approve0(opts *bind.TransactOpts, guy common.Address) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "approve0", guy)
}

// Approve0 is a paid mutator transaction binding the contract method 0xdaea85c5.
//
// Solidity: function approve(address guy) returns(bool)
func (_Token *TokenSession) Approve0(guy common.Address) (*types.Transaction, error) {
	return _Token.Contract.Approve0(&_Token.TransactOpts, guy)
}

// Approve0 is a paid mutator transaction binding the contract method 0xdaea85c5.
//
// Solidity: function approve(address guy) returns(bool)
func (_Token *TokenTransactorSession) Approve0(guy common.Address) (*types.Transaction, error) {
	return _Token.Contract.Approve0(&_Token.TransactOpts, guy)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 wad) returns()
func (_Token *TokenTransactor) Burn(opts *bind.TransactOpts, wad *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "burn", wad)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 wad) returns()
func (_Token *TokenSession) Burn(wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Burn(&_Token.TransactOpts, wad)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 wad) returns()
func (_Token *TokenTransactorSession) Burn(wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Burn(&_Token.TransactOpts, wad)
}

// Burn0 is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address guy, uint256 wad) returns()
func (_Token *TokenTransactor) Burn0(opts *bind.TransactOpts, guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "burn0", guy, wad)
}

// Burn0 is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address guy, uint256 wad) returns()
func (_Token *TokenSession) Burn0(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Burn0(&_Token.TransactOpts, guy, wad)
}

// Burn0 is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address guy, uint256 wad) returns()
func (_Token *TokenTransactorSession) Burn0(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Burn0(&_Token.TransactOpts, guy, wad)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_Token *TokenTransactor) GrantOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "grantOperator", _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_Token *TokenSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _Token.Contract.GrantOperator(&_Token.TransactOpts, _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_Token *TokenTransactorSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _Token.Contract.GrantOperator(&_Token.TransactOpts, _operator)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address guy, uint256 wad) returns()
func (_Token *TokenTransactor) Mint(opts *bind.TransactOpts, guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "mint", guy, wad)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address guy, uint256 wad) returns()
func (_Token *TokenSession) Mint(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Mint(&_Token.TransactOpts, guy, wad)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address guy, uint256 wad) returns()
func (_Token *TokenTransactorSession) Mint(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Mint(&_Token.TransactOpts, guy, wad)
}

// Mint0 is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 wad) returns()
func (_Token *TokenTransactor) Mint0(opts *bind.TransactOpts, wad *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "mint0", wad)
}

// Mint0 is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 wad) returns()
func (_Token *TokenSession) Mint0(wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Mint0(&_Token.TransactOpts, wad)
}

// Mint0 is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 wad) returns()
func (_Token *TokenTransactorSession) Mint0(wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Mint0(&_Token.TransactOpts, wad)
}

// Move is a paid mutator transaction binding the contract method 0xbb35783b.
//
// Solidity: function move(address src, address dst, uint256 wad) returns()
func (_Token *TokenTransactor) Move(opts *bind.TransactOpts, src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "move", src, dst, wad)
}

// Move is a paid mutator transaction binding the contract method 0xbb35783b.
//
// Solidity: function move(address src, address dst, uint256 wad) returns()
func (_Token *TokenSession) Move(src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Move(&_Token.TransactOpts, src, dst, wad)
}

// Move is a paid mutator transaction binding the contract method 0xbb35783b.
//
// Solidity: function move(address src, address dst, uint256 wad) returns()
func (_Token *TokenTransactorSession) Move(src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Move(&_Token.TransactOpts, src, dst, wad)
}

// Pull is a paid mutator transaction binding the contract method 0xf2d5d56b.
//
// Solidity: function pull(address src, uint256 wad) returns()
func (_Token *TokenTransactor) Pull(opts *bind.TransactOpts, src common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "pull", src, wad)
}

// Pull is a paid mutator transaction binding the contract method 0xf2d5d56b.
//
// Solidity: function pull(address src, uint256 wad) returns()
func (_Token *TokenSession) Pull(src common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Pull(&_Token.TransactOpts, src, wad)
}

// Pull is a paid mutator transaction binding the contract method 0xf2d5d56b.
//
// Solidity: function pull(address src, uint256 wad) returns()
func (_Token *TokenTransactorSession) Pull(src common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Pull(&_Token.TransactOpts, src, wad)
}

// Push is a paid mutator transaction binding the contract method 0xb753a98c.
//
// Solidity: function push(address dst, uint256 wad) returns()
func (_Token *TokenTransactor) Push(opts *bind.TransactOpts, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "push", dst, wad)
}

// Push is a paid mutator transaction binding the contract method 0xb753a98c.
//
// Solidity: function push(address dst, uint256 wad) returns()
func (_Token *TokenSession) Push(dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Push(&_Token.TransactOpts, dst, wad)
}

// Push is a paid mutator transaction binding the contract method 0xb753a98c.
//
// Solidity: function push(address dst, uint256 wad) returns()
func (_Token *TokenTransactorSession) Push(dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Push(&_Token.TransactOpts, dst, wad)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_Token *TokenTransactor) RevokeOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "revokeOperator", _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_Token *TokenSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _Token.Contract.RevokeOperator(&_Token.TransactOpts, _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_Token *TokenTransactorSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _Token.Contract.RevokeOperator(&_Token.TransactOpts, _operator)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_Token *TokenTransactor) SetAuthority(opts *bind.TransactOpts, authority_ common.Address) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "setAuthority", authority_)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_Token *TokenSession) SetAuthority(authority_ common.Address) (*types.Transaction, error) {
	return _Token.Contract.SetAuthority(&_Token.TransactOpts, authority_)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_Token *TokenTransactorSession) SetAuthority(authority_ common.Address) (*types.Transaction, error) {
	return _Token.Contract.SetAuthority(&_Token.TransactOpts, authority_)
}

// SetName is a paid mutator transaction binding the contract method 0x5ac801fe.
//
// Solidity: function setName(bytes32 name_) returns()
func (_Token *TokenTransactor) SetName(opts *bind.TransactOpts, name_ [32]byte) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "setName", name_)
}

// SetName is a paid mutator transaction binding the contract method 0x5ac801fe.
//
// Solidity: function setName(bytes32 name_) returns()
func (_Token *TokenSession) SetName(name_ [32]byte) (*types.Transaction, error) {
	return _Token.Contract.SetName(&_Token.TransactOpts, name_)
}

// SetName is a paid mutator transaction binding the contract method 0x5ac801fe.
//
// Solidity: function setName(bytes32 name_) returns()
func (_Token *TokenTransactorSession) SetName(name_ [32]byte) (*types.Transaction, error) {
	return _Token.Contract.SetName(&_Token.TransactOpts, name_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_Token *TokenTransactor) SetOwner(opts *bind.TransactOpts, owner_ common.Address) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "setOwner", owner_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_Token *TokenSession) SetOwner(owner_ common.Address) (*types.Transaction, error) {
	return _Token.Contract.SetOwner(&_Token.TransactOpts, owner_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_Token *TokenTransactorSession) SetOwner(owner_ common.Address) (*types.Transaction, error) {
	return _Token.Contract.SetOwner(&_Token.TransactOpts, owner_)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_Token *TokenTransactor) Start(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "start")
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_Token *TokenSession) Start() (*types.Transaction, error) {
	return _Token.Contract.Start(&_Token.TransactOpts)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_Token *TokenTransactorSession) Start() (*types.Transaction, error) {
	return _Token.Contract.Start(&_Token.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_Token *TokenTransactor) Stop(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "stop")
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_Token *TokenSession) Stop() (*types.Transaction, error) {
	return _Token.Contract.Stop(&_Token.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_Token *TokenTransactorSession) Stop() (*types.Transaction, error) {
	return _Token.Contract.Stop(&_Token.TransactOpts)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 wad) returns(bool)
func (_Token *TokenTransactor) Transfer(opts *bind.TransactOpts, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "transfer", dst, wad)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 wad) returns(bool)
func (_Token *TokenSession) Transfer(dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Transfer(&_Token.TransactOpts, dst, wad)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 wad) returns(bool)
func (_Token *TokenTransactorSession) Transfer(dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Transfer(&_Token.TransactOpts, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_Token *TokenTransactor) TransferFrom(opts *bind.TransactOpts, src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "transferFrom", src, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_Token *TokenSession) TransferFrom(src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.TransferFrom(&_Token.TransactOpts, src, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_Token *TokenTransactorSession) TransferFrom(src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.TransferFrom(&_Token.TransactOpts, src, dst, wad)
}

// TokenApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Token contract.
type TokenApprovalIterator struct {
	Event *TokenApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenApproval represents a Approval event raised by the Token contract.
type TokenApproval struct {
	Src common.Address
	Guy common.Address
	Wad *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed src, address indexed guy, uint256 wad)
func (_Token *TokenFilterer) FilterApproval(opts *bind.FilterOpts, src []common.Address, guy []common.Address) (*TokenApprovalIterator, error) {

	var srcRule []interface{}
	for _, srcItem := range src {
		srcRule = append(srcRule, srcItem)
	}
	var guyRule []interface{}
	for _, guyItem := range guy {
		guyRule = append(guyRule, guyItem)
	}

	logs, sub, err := _Token.contract.FilterLogs(opts, "Approval", srcRule, guyRule)
	if err != nil {
		return nil, err
	}
	return &TokenApprovalIterator{contract: _Token.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed src, address indexed guy, uint256 wad)
func (_Token *TokenFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *TokenApproval, src []common.Address, guy []common.Address) (event.Subscription, error) {

	var srcRule []interface{}
	for _, srcItem := range src {
		srcRule = append(srcRule, srcItem)
	}
	var guyRule []interface{}
	for _, guyItem := range guy {
		guyRule = append(guyRule, guyItem)
	}

	logs, sub, err := _Token.contract.WatchLogs(opts, "Approval", srcRule, guyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenApproval)
				if err := _Token.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed src, address indexed guy, uint256 wad)
func (_Token *TokenFilterer) ParseApproval(log types.Log) (*TokenApproval, error) {
	event := new(TokenApproval)
	if err := _Token.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenBurnIterator is returned from FilterBurn and is used to iterate over the raw logs and unpacked data for Burn events raised by the Token contract.
type TokenBurnIterator struct {
	Event *TokenBurn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenBurnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenBurn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenBurn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenBurnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenBurnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenBurn represents a Burn event raised by the Token contract.
type TokenBurn struct {
	Guy common.Address
	Wad *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterBurn is a free log retrieval operation binding the contract event 0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5.
//
// Solidity: event Burn(address indexed guy, uint256 wad)
func (_Token *TokenFilterer) FilterBurn(opts *bind.FilterOpts, guy []common.Address) (*TokenBurnIterator, error) {

	var guyRule []interface{}
	for _, guyItem := range guy {
		guyRule = append(guyRule, guyItem)
	}

	logs, sub, err := _Token.contract.FilterLogs(opts, "Burn", guyRule)
	if err != nil {
		return nil, err
	}
	return &TokenBurnIterator{contract: _Token.contract, event: "Burn", logs: logs, sub: sub}, nil
}

// WatchBurn is a free log subscription operation binding the contract event 0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5.
//
// Solidity: event Burn(address indexed guy, uint256 wad)
func (_Token *TokenFilterer) WatchBurn(opts *bind.WatchOpts, sink chan<- *TokenBurn, guy []common.Address) (event.Subscription, error) {

	var guyRule []interface{}
	for _, guyItem := range guy {
		guyRule = append(guyRule, guyItem)
	}

	logs, sub, err := _Token.contract.WatchLogs(opts, "Burn", guyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenBurn)
				if err := _Token.contract.UnpackLog(event, "Burn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurn is a log parse operation binding the contract event 0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5.
//
// Solidity: event Burn(address indexed guy, uint256 wad)
func (_Token *TokenFilterer) ParseBurn(log types.Log) (*TokenBurn, error) {
	event := new(TokenBurn)
	if err := _Token.contract.UnpackLog(event, "Burn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenLogSetAuthorityIterator is returned from FilterLogSetAuthority and is used to iterate over the raw logs and unpacked data for LogSetAuthority events raised by the Token contract.
type TokenLogSetAuthorityIterator struct {
	Event *TokenLogSetAuthority // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenLogSetAuthorityIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenLogSetAuthority)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenLogSetAuthority)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenLogSetAuthorityIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenLogSetAuthorityIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenLogSetAuthority represents a LogSetAuthority event raised by the Token contract.
type TokenLogSetAuthority struct {
	Authority common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterLogSetAuthority is a free log retrieval operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_Token *TokenFilterer) FilterLogSetAuthority(opts *bind.FilterOpts, authority []common.Address) (*TokenLogSetAuthorityIterator, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}

	logs, sub, err := _Token.contract.FilterLogs(opts, "LogSetAuthority", authorityRule)
	if err != nil {
		return nil, err
	}
	return &TokenLogSetAuthorityIterator{contract: _Token.contract, event: "LogSetAuthority", logs: logs, sub: sub}, nil
}

// WatchLogSetAuthority is a free log subscription operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_Token *TokenFilterer) WatchLogSetAuthority(opts *bind.WatchOpts, sink chan<- *TokenLogSetAuthority, authority []common.Address) (event.Subscription, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}

	logs, sub, err := _Token.contract.WatchLogs(opts, "LogSetAuthority", authorityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenLogSetAuthority)
				if err := _Token.contract.UnpackLog(event, "LogSetAuthority", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogSetAuthority is a log parse operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_Token *TokenFilterer) ParseLogSetAuthority(log types.Log) (*TokenLogSetAuthority, error) {
	event := new(TokenLogSetAuthority)
	if err := _Token.contract.UnpackLog(event, "LogSetAuthority", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenLogSetOwnerIterator is returned from FilterLogSetOwner and is used to iterate over the raw logs and unpacked data for LogSetOwner events raised by the Token contract.
type TokenLogSetOwnerIterator struct {
	Event *TokenLogSetOwner // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenLogSetOwnerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenLogSetOwner)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenLogSetOwner)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenLogSetOwnerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenLogSetOwnerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenLogSetOwner represents a LogSetOwner event raised by the Token contract.
type TokenLogSetOwner struct {
	Owner common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogSetOwner is a free log retrieval operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_Token *TokenFilterer) FilterLogSetOwner(opts *bind.FilterOpts, owner []common.Address) (*TokenLogSetOwnerIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Token.contract.FilterLogs(opts, "LogSetOwner", ownerRule)
	if err != nil {
		return nil, err
	}
	return &TokenLogSetOwnerIterator{contract: _Token.contract, event: "LogSetOwner", logs: logs, sub: sub}, nil
}

// WatchLogSetOwner is a free log subscription operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_Token *TokenFilterer) WatchLogSetOwner(opts *bind.WatchOpts, sink chan<- *TokenLogSetOwner, owner []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Token.contract.WatchLogs(opts, "LogSetOwner", ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenLogSetOwner)
				if err := _Token.contract.UnpackLog(event, "LogSetOwner", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogSetOwner is a log parse operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_Token *TokenFilterer) ParseLogSetOwner(log types.Log) (*TokenLogSetOwner, error) {
	event := new(TokenLogSetOwner)
	if err := _Token.contract.UnpackLog(event, "LogSetOwner", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenMintIterator is returned from FilterMint and is used to iterate over the raw logs and unpacked data for Mint events raised by the Token contract.
type TokenMintIterator struct {
	Event *TokenMint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenMintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenMint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenMint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenMintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenMintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenMint represents a Mint event raised by the Token contract.
type TokenMint struct {
	Guy common.Address
	Wad *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterMint is a free log retrieval operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: event Mint(address indexed guy, uint256 wad)
func (_Token *TokenFilterer) FilterMint(opts *bind.FilterOpts, guy []common.Address) (*TokenMintIterator, error) {

	var guyRule []interface{}
	for _, guyItem := range guy {
		guyRule = append(guyRule, guyItem)
	}

	logs, sub, err := _Token.contract.FilterLogs(opts, "Mint", guyRule)
	if err != nil {
		return nil, err
	}
	return &TokenMintIterator{contract: _Token.contract, event: "Mint", logs: logs, sub: sub}, nil
}

// WatchMint is a free log subscription operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: event Mint(address indexed guy, uint256 wad)
func (_Token *TokenFilterer) WatchMint(opts *bind.WatchOpts, sink chan<- *TokenMint, guy []common.Address) (event.Subscription, error) {

	var guyRule []interface{}
	for _, guyItem := range guy {
		guyRule = append(guyRule, guyItem)
	}

	logs, sub, err := _Token.contract.WatchLogs(opts, "Mint", guyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenMint)
				if err := _Token.contract.UnpackLog(event, "Mint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMint is a log parse operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: event Mint(address indexed guy, uint256 wad)
func (_Token *TokenFilterer) ParseMint(log types.Log) (*TokenMint, error) {
	event := new(TokenMint)
	if err := _Token.contract.UnpackLog(event, "Mint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenStartIterator is returned from FilterStart and is used to iterate over the raw logs and unpacked data for Start events raised by the Token contract.
type TokenStartIterator struct {
	Event *TokenStart // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenStartIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenStart)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenStart)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenStartIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenStartIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenStart represents a Start event raised by the Token contract.
type TokenStart struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterStart is a free log retrieval operation binding the contract event 0x1b55ba3aa851a46be3b365aee5b5c140edd620d578922f3e8466d2cbd96f954b.
//
// Solidity: event Start()
func (_Token *TokenFilterer) FilterStart(opts *bind.FilterOpts) (*TokenStartIterator, error) {

	logs, sub, err := _Token.contract.FilterLogs(opts, "Start")
	if err != nil {
		return nil, err
	}
	return &TokenStartIterator{contract: _Token.contract, event: "Start", logs: logs, sub: sub}, nil
}

// WatchStart is a free log subscription operation binding the contract event 0x1b55ba3aa851a46be3b365aee5b5c140edd620d578922f3e8466d2cbd96f954b.
//
// Solidity: event Start()
func (_Token *TokenFilterer) WatchStart(opts *bind.WatchOpts, sink chan<- *TokenStart) (event.Subscription, error) {

	logs, sub, err := _Token.contract.WatchLogs(opts, "Start")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenStart)
				if err := _Token.contract.UnpackLog(event, "Start", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStart is a log parse operation binding the contract event 0x1b55ba3aa851a46be3b365aee5b5c140edd620d578922f3e8466d2cbd96f954b.
//
// Solidity: event Start()
func (_Token *TokenFilterer) ParseStart(log types.Log) (*TokenStart, error) {
	event := new(TokenStart)
	if err := _Token.contract.UnpackLog(event, "Start", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenStopIterator is returned from FilterStop and is used to iterate over the raw logs and unpacked data for Stop events raised by the Token contract.
type TokenStopIterator struct {
	Event *TokenStop // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenStopIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenStop)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenStop)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenStopIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenStopIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenStop represents a Stop event raised by the Token contract.
type TokenStop struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterStop is a free log retrieval operation binding the contract event 0xbedf0f4abfe86d4ffad593d9607fe70e83ea706033d44d24b3b6283cf3fc4f6b.
//
// Solidity: event Stop()
func (_Token *TokenFilterer) FilterStop(opts *bind.FilterOpts) (*TokenStopIterator, error) {

	logs, sub, err := _Token.contract.FilterLogs(opts, "Stop")
	if err != nil {
		return nil, err
	}
	return &TokenStopIterator{contract: _Token.contract, event: "Stop", logs: logs, sub: sub}, nil
}

// WatchStop is a free log subscription operation binding the contract event 0xbedf0f4abfe86d4ffad593d9607fe70e83ea706033d44d24b3b6283cf3fc4f6b.
//
// Solidity: event Stop()
func (_Token *TokenFilterer) WatchStop(opts *bind.WatchOpts, sink chan<- *TokenStop) (event.Subscription, error) {

	logs, sub, err := _Token.contract.WatchLogs(opts, "Stop")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenStop)
				if err := _Token.contract.UnpackLog(event, "Stop", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStop is a log parse operation binding the contract event 0xbedf0f4abfe86d4ffad593d9607fe70e83ea706033d44d24b3b6283cf3fc4f6b.
//
// Solidity: event Stop()
func (_Token *TokenFilterer) ParseStop(log types.Log) (*TokenStop, error) {
	event := new(TokenStop)
	if err := _Token.contract.UnpackLog(event, "Stop", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Token contract.
type TokenTransferIterator struct {
	Event *TokenTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenTransfer represents a Transfer event raised by the Token contract.
type TokenTransfer struct {
	Src common.Address
	Dst common.Address
	Wad *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed src, address indexed dst, uint256 wad)
func (_Token *TokenFilterer) FilterTransfer(opts *bind.FilterOpts, src []common.Address, dst []common.Address) (*TokenTransferIterator, error) {

	var srcRule []interface{}
	for _, srcItem := range src {
		srcRule = append(srcRule, srcItem)
	}
	var dstRule []interface{}
	for _, dstItem := range dst {
		dstRule = append(dstRule, dstItem)
	}

	logs, sub, err := _Token.contract.FilterLogs(opts, "Transfer", srcRule, dstRule)
	if err != nil {
		return nil, err
	}
	return &TokenTransferIterator{contract: _Token.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed src, address indexed dst, uint256 wad)
func (_Token *TokenFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *TokenTransfer, src []common.Address, dst []common.Address) (event.Subscription, error) {

	var srcRule []interface{}
	for _, srcItem := range src {
		srcRule = append(srcRule, srcItem)
	}
	var dstRule []interface{}
	for _, dstItem := range dst {
		dstRule = append(dstRule, dstItem)
	}

	logs, sub, err := _Token.contract.WatchLogs(opts, "Transfer", srcRule, dstRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenTransfer)
				if err := _Token.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed src, address indexed dst, uint256 wad)
func (_Token *TokenFilterer) ParseTransfer(log types.Log) (*TokenTransfer, error) {
	event := new(TokenTransfer)
	if err := _Token.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenAuthorityMetaData contains all meta data concerning the TokenAuthority contract.
var TokenAuthorityMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"canCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
<<<<<<< Updated upstream
	Bin: "0x608060405234801561001057600080fd5b5033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610083600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661008860201b60201c565b610302565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061012c57506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b61016b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161016290610260565b60405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600160008154809291906101d5906102b9565b919050555050565b600082825260208201905092915050565b7f46756e6374696f6e616c697479207265737472696374656420746f206175746860008201527f6f72697a6564206f70657261746f72732e000000000000000000000000000000602082015250565b600061024a6031836101dd565b9150610255826101ee565b604082019050919050565b600060208201905081810360008301526102798161023d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b60006102c4826102af565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156102f7576102f6610280565b5b600182019050919050565b6107e5806103116000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063b700961314610046578063e348da1314610076578063fad8b32a14610092575b600080fd5b610060600480360381019061005b919061053e565b6100ae565b60405161006d91906105ac565b60405180910390f35b610090600480360381019061008b91906105c7565b61019e565b005b6100ac60048036038101906100a791906105c7565b6102f3565b005b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061015457506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610193576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018a90610677565b60405180910390fd5b600190509392505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061024257506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610281576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027890610677565b60405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600160008154809291906102eb906106d0565b919050555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061039757506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6103d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103cd90610677565b60405180910390fd5b600180541161041a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041190610765565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff02191690556001600081548092919061047b90610785565b919050555050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104b382610488565b9050919050565b6104c3816104a8565b81146104ce57600080fd5b50565b6000813590506104e0816104ba565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61051b816104e6565b811461052657600080fd5b50565b60008135905061053881610512565b92915050565b60008060006060848603121561055757610556610483565b5b6000610565868287016104d1565b9350506020610576868287016104d1565b925050604061058786828701610529565b9150509250925092565b60008115159050919050565b6105a681610591565b82525050565b60006020820190506105c1600083018461059d565b92915050565b6000602082840312156105dd576105dc610483565b5b60006105eb848285016104d1565b91505092915050565b600082825260208201905092915050565b7f46756e6374696f6e616c697479207265737472696374656420746f206175746860008201527f6f72697a6564206f70657261746f72732e000000000000000000000000000000602082015250565b60006106616031836105f4565b915061066c82610605565b604082019050919050565b6000602082019050818103600083015261069081610654565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b60006106db826106c6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561070e5761070d610697565b5b600182019050919050565b7f43616e27742072656d6f766520616c6c206f70657261746f7273000000000000600082015250565b600061074f601a836105f4565b915061075a82610719565b602082019050919050565b6000602082019050818103600083015261077e81610742565b9050919050565b6000610790826106c6565b915060008214156107a4576107a3610697565b5b60018203905091905056fea2646970667358221220e3deb66d1c4f0ae21c8345fc7fa61257cddc0209d3835855fcc86d40bc6273e564736f6c634300080b0033",
=======
	Bin: "0x608060405234801561001057600080fd5b50600280546001600160a01b0319163390811790915561002f90610034565b610129565b6002546001600160a01b031633148061005c57503360009081526020819052604090205460ff165b6100c65760405162461bcd60e51b815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527037b934bd32b21037b832b930ba37b9399760791b606482015260840160405180910390fd5b6001600160a01b0381166000908152602081905260408120805460ff191660019081179091558054916100f883610100565b919050555050565b600060001982141561012257634e487b7160e01b600052601160045260246000fd5b5060010190565b61059d806101386000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063b700961314610046578063e348da131461006d578063fad8b32a14610082575b600080fd5b61005961005436600461043c565b610095565b604051901515815260200160405180910390f35b61008061007b3660046104a8565b610168565b005b6100806100903660046104a8565b61028e565b60025460009073ffffffffffffffffffffffffffffffffffffffff163314806100cd57503360009081526020819052604090205460ff165b61015e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e00000000000000000000000000000060648201526084015b60405180910390fd5b5060019392505050565b60025473ffffffffffffffffffffffffffffffffffffffff1633148061019d57503360009081526020819052604090205460ff165b610229576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e0000000000000000000000000000006064820152608401610155565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260208190526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001908117909155805491610286836104f9565b919050555050565b60025473ffffffffffffffffffffffffffffffffffffffff163314806102c357503360009081526020819052604090205460ff165b61034f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e0000000000000000000000000000006064820152608401610155565b60018054116103ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f43616e27742072656d6f766520616c6c206f70657261746f72730000000000006044820152606401610155565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260208190526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055600180549161028683610532565b803573ffffffffffffffffffffffffffffffffffffffff8116811461043757600080fd5b919050565b60008060006060848603121561045157600080fd5b61045a84610413565b925061046860208501610413565b915060408401357fffffffff000000000000000000000000000000000000000000000000000000008116811461049d57600080fd5b809150509250925092565b6000602082840312156104ba57600080fd5b6104c382610413565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561052b5761052b6104ca565b5060010190565b600081610541576105416104ca565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fea2646970667358221220849b79a235187040c0384716f9228587c0638b17222f3587723991bfe1f44f3064736f6c634300080b0033",
>>>>>>> Stashed changes
}

// TokenAuthorityABI is the input ABI used to generate the binding from.
// Deprecated: Use TokenAuthorityMetaData.ABI instead.
var TokenAuthorityABI = TokenAuthorityMetaData.ABI

// TokenAuthorityBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TokenAuthorityMetaData.Bin instead.
var TokenAuthorityBin = TokenAuthorityMetaData.Bin

// DeployTokenAuthority deploys a new Ethereum contract, binding an instance of TokenAuthority to it.
func DeployTokenAuthority(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TokenAuthority, error) {
	parsed, err := TokenAuthorityMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TokenAuthorityBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TokenAuthority{TokenAuthorityCaller: TokenAuthorityCaller{contract: contract}, TokenAuthorityTransactor: TokenAuthorityTransactor{contract: contract}, TokenAuthorityFilterer: TokenAuthorityFilterer{contract: contract}}, nil
}

// TokenAuthority is an auto generated Go binding around an Ethereum contract.
type TokenAuthority struct {
	TokenAuthorityCaller     // Read-only binding to the contract
	TokenAuthorityTransactor // Write-only binding to the contract
	TokenAuthorityFilterer   // Log filterer for contract events
}

// TokenAuthorityCaller is an auto generated read-only Go binding around an Ethereum contract.
type TokenAuthorityCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenAuthorityTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TokenAuthorityTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenAuthorityFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TokenAuthorityFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenAuthoritySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TokenAuthoritySession struct {
	Contract     *TokenAuthority   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TokenAuthorityCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TokenAuthorityCallerSession struct {
	Contract *TokenAuthorityCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// TokenAuthorityTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TokenAuthorityTransactorSession struct {
	Contract     *TokenAuthorityTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// TokenAuthorityRaw is an auto generated low-level Go binding around an Ethereum contract.
type TokenAuthorityRaw struct {
	Contract *TokenAuthority // Generic contract binding to access the raw methods on
}

// TokenAuthorityCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TokenAuthorityCallerRaw struct {
	Contract *TokenAuthorityCaller // Generic read-only contract binding to access the raw methods on
}

// TokenAuthorityTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TokenAuthorityTransactorRaw struct {
	Contract *TokenAuthorityTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTokenAuthority creates a new instance of TokenAuthority, bound to a specific deployed contract.
func NewTokenAuthority(address common.Address, backend bind.ContractBackend) (*TokenAuthority, error) {
	contract, err := bindTokenAuthority(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TokenAuthority{TokenAuthorityCaller: TokenAuthorityCaller{contract: contract}, TokenAuthorityTransactor: TokenAuthorityTransactor{contract: contract}, TokenAuthorityFilterer: TokenAuthorityFilterer{contract: contract}}, nil
}

// NewTokenAuthorityCaller creates a new read-only instance of TokenAuthority, bound to a specific deployed contract.
func NewTokenAuthorityCaller(address common.Address, caller bind.ContractCaller) (*TokenAuthorityCaller, error) {
	contract, err := bindTokenAuthority(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TokenAuthorityCaller{contract: contract}, nil
}

// NewTokenAuthorityTransactor creates a new write-only instance of TokenAuthority, bound to a specific deployed contract.
func NewTokenAuthorityTransactor(address common.Address, transactor bind.ContractTransactor) (*TokenAuthorityTransactor, error) {
	contract, err := bindTokenAuthority(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TokenAuthorityTransactor{contract: contract}, nil
}

// NewTokenAuthorityFilterer creates a new log filterer instance of TokenAuthority, bound to a specific deployed contract.
func NewTokenAuthorityFilterer(address common.Address, filterer bind.ContractFilterer) (*TokenAuthorityFilterer, error) {
	contract, err := bindTokenAuthority(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TokenAuthorityFilterer{contract: contract}, nil
}

// bindTokenAuthority binds a generic wrapper to an already deployed contract.
func bindTokenAuthority(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TokenAuthorityABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TokenAuthority *TokenAuthorityRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TokenAuthority.Contract.TokenAuthorityCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TokenAuthority *TokenAuthorityRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenAuthority.Contract.TokenAuthorityTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TokenAuthority *TokenAuthorityRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TokenAuthority.Contract.TokenAuthorityTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TokenAuthority *TokenAuthorityCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TokenAuthority.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TokenAuthority *TokenAuthorityTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenAuthority.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TokenAuthority *TokenAuthorityTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TokenAuthority.Contract.contract.Transact(opts, method, params...)
}

// CanCall is a free data retrieval call binding the contract method 0xb7009613.
//
// Solidity: function canCall(address , address , bytes4 ) view returns(bool)
func (_TokenAuthority *TokenAuthorityCaller) CanCall(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address, arg2 [4]byte) (bool, error) {
	var out []interface{}
	err := _TokenAuthority.contract.Call(opts, &out, "canCall", arg0, arg1, arg2)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanCall is a free data retrieval call binding the contract method 0xb7009613.
//
// Solidity: function canCall(address , address , bytes4 ) view returns(bool)
func (_TokenAuthority *TokenAuthoritySession) CanCall(arg0 common.Address, arg1 common.Address, arg2 [4]byte) (bool, error) {
	return _TokenAuthority.Contract.CanCall(&_TokenAuthority.CallOpts, arg0, arg1, arg2)
}

// CanCall is a free data retrieval call binding the contract method 0xb7009613.
//
// Solidity: function canCall(address , address , bytes4 ) view returns(bool)
func (_TokenAuthority *TokenAuthorityCallerSession) CanCall(arg0 common.Address, arg1 common.Address, arg2 [4]byte) (bool, error) {
	return _TokenAuthority.Contract.CanCall(&_TokenAuthority.CallOpts, arg0, arg1, arg2)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_TokenAuthority *TokenAuthorityTransactor) GrantOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _TokenAuthority.contract.Transact(opts, "grantOperator", _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_TokenAuthority *TokenAuthoritySession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _TokenAuthority.Contract.GrantOperator(&_TokenAuthority.TransactOpts, _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_TokenAuthority *TokenAuthorityTransactorSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _TokenAuthority.Contract.GrantOperator(&_TokenAuthority.TransactOpts, _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_TokenAuthority *TokenAuthorityTransactor) RevokeOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _TokenAuthority.contract.Transact(opts, "revokeOperator", _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_TokenAuthority *TokenAuthoritySession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _TokenAuthority.Contract.RevokeOperator(&_TokenAuthority.TransactOpts, _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_TokenAuthority *TokenAuthorityTransactorSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _TokenAuthority.Contract.RevokeOperator(&_TokenAuthority.TransactOpts, _operator)
}

// TokenMigratorMetaData contains all meta data concerning the TokenMigrator contract.
var TokenMigratorMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"Started\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"Stopped\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSource\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrateAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"}],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
<<<<<<< Updated upstream
	Bin: "0x60806040523480156200001157600080fd5b5033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000086600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166200008c60201b60201c565b62000317565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806200013157506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b62000173576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200016a906200026e565b60405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060016000815480929190620001df90620002c9565b919050555050565b600082825260208201905092915050565b7f46756e6374696f6e616c697479207265737472696374656420746f206175746860008201527f6f72697a6564206f70657261746f72732e000000000000000000000000000000602082015250565b600062000256603183620001e7565b91506200026382620001f8565b604082019050919050565b60006020820190508181036000830152620002898162000247565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b6000620002d682620002bf565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156200030c576200030b62000290565b5b600182019050919050565b61171b80620003276000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80634a77f8701161005b5780634a77f870146100ed578063afa293d4146100f7578063e348da1314610115578063fad8b32a1461013157610088565b806307da68f51461008d57806316ad9542146100975780633ccfe887146100b5578063454b0608146100d1575b600080fd5b61009561014d565b005b61009f610357565b6040516100ac9190610f07565b60405180910390f35b6100cf60048036038101906100ca9190610f53565b610381565b005b6100eb60048036038101906100e69190610fc9565b610620565b005b6100f561062d565b005b6100ff6107de565b60405161010c9190610f07565b60405180910390f35b61012f600480360381019061012a9190610ff6565b610808565b005b61014b60048036038101906101469190610ff6565b61095d565b005b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806101f157506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610230576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610227906110a6565b60405180910390fd5b600260149054906101000a900460ff1661027f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027690611112565b60405180910390fd5b6000600260146101000a81548160ff0219169083151502179055506000600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f55c4adf1f68f084b809304657594a92ba835ada8d3b5340955bf05746723c05b3360405161034d9190610f07565b60405180910390a1565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061042557506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610464576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045b906110a6565b60405180910390fd5b61046d82610aed565b6104ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a3906111ca565b60405180910390fd5b6104b581610aed565b6104f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104eb90611282565b60405180910390fd5b600260149054906101000a900460ff1615610544576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053b906112ee565b60405180910390fd5b6001600260146101000a81548160ff02191690831515021790555081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fe7ccbdddf2d84fab545fb1aad35fd684ef7cce1df6df25facfb32fe3de037f1d8282336040516106149392919061130e565b60405180910390a15050565b61062a3382610c13565b50565b60003390506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b815260040161068f9190610f07565b602060405180830381865afa1580156106ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d0919061135a565b90506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e84306040518363ffffffff1660e01b8152600401610731929190611387565b602060405180830381865afa15801561074e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610772919061135a565b905060006107898383610eac90919063ffffffff16565b9050600081116107ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c5906113fc565b60405180910390fd5b6107d88482610c13565b50505050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806108ac57506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6108eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e2906110a6565b60405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600160008154809291906109559061144b565b919050555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610a0157506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610a40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a37906110a6565b60405180910390fd5b6001805411610a84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7b906114e0565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff021916905560016000815480929190610ae590611500565b919050555050565b60008060608373ffffffffffffffffffffffffffffffffffffffff166040516024016040516020818303038152906040527f18160ddd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610b9991906115a4565b6000604051808303816000865af19150503d8060008114610bd6576040519150601f19603f3d011682016040523d82523d6000602084013e610bdb565b606091505b508092508193505050600081806020019051810190610bfa919061135a565b9050828015610c095750600081115b9350505050919050565b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610d20576003339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b80600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610d6f91906115bb565b92505081905550600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8330846040518463ffffffff1660e01b8152600401610dd593929190611620565b6020604051808303816000875af1158015610df4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e18919061168f565b50600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1983836040518363ffffffff1660e01b8152600401610e769291906116bc565b600060405180830381600087803b158015610e9057600080fd5b505af1158015610ea4573d6000803e3d6000fd5b505050505050565b600081831115610ebc5781610ebe565b825b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ef182610ec6565b9050919050565b610f0181610ee6565b82525050565b6000602082019050610f1c6000830184610ef8565b92915050565b600080fd5b610f3081610ee6565b8114610f3b57600080fd5b50565b600081359050610f4d81610f27565b92915050565b60008060408385031215610f6a57610f69610f22565b5b6000610f7885828601610f3e565b9250506020610f8985828601610f3e565b9150509250929050565b6000819050919050565b610fa681610f93565b8114610fb157600080fd5b50565b600081359050610fc381610f9d565b92915050565b600060208284031215610fdf57610fde610f22565b5b6000610fed84828501610fb4565b91505092915050565b60006020828403121561100c5761100b610f22565b5b600061101a84828501610f3e565b91505092915050565b600082825260208201905092915050565b7f46756e6374696f6e616c697479207265737472696374656420746f206175746860008201527f6f72697a6564206f70657261746f72732e000000000000000000000000000000602082015250565b6000611090603183611023565b915061109b82611034565b604082019050919050565b600060208201905081810360008301526110bf81611083565b9050919050565b7f6d6967726174696f6e206e6f7420737461727465640000000000000000000000600082015250565b60006110fc601583611023565b9150611107826110c6565b602082019050919050565b6000602082019050818103600083015261112b816110ef565b9050919050565b7f736f7572636520646f6573206e6f742061707065617220746f20626520616e2060008201527f455243323020286661696c65642063616c6c20746f20746f74616c537570706c60208201527f7928292900000000000000000000000000000000000000000000000000000000604082015250565b60006111b4604483611023565b91506111bf82611132565b606082019050919050565b600060208201905081810360008301526111e3816111a7565b9050919050565b7f64657374696e6174696f6e20646f6573206e6f742061707065617220746f206260008201527f6520616e20455243323020286661696c65642063616c6c20746f20746f74616c60208201527f537570706c792829290000000000000000000000000000000000000000000000604082015250565b600061126c604983611023565b9150611277826111ea565b606082019050919050565b6000602082019050818103600083015261129b8161125f565b9050919050565b7f6d6967726174696f6e2068617320616c72656164792073746172746564000000600082015250565b60006112d8601d83611023565b91506112e3826112a2565b602082019050919050565b60006020820190508181036000830152611307816112cb565b9050919050565b60006060820190506113236000830186610ef8565b6113306020830185610ef8565b61133d6040830184610ef8565b949350505050565b60008151905061135481610f9d565b92915050565b6000602082840312156113705761136f610f22565b5b600061137e84828501611345565b91505092915050565b600060408201905061139c6000830185610ef8565b6113a96020830184610ef8565b9392505050565b7f6e6f20746f6b656e7320617661696c61626c6520746f206d6967726174650000600082015250565b60006113e6601e83611023565b91506113f1826113b0565b602082019050919050565b60006020820190508181036000830152611415816113d9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061145682610f93565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156114895761148861141c565b5b600182019050919050565b7f43616e27742072656d6f766520616c6c206f70657261746f7273000000000000600082015250565b60006114ca601a83611023565b91506114d582611494565b602082019050919050565b600060208201905081810360008301526114f9816114bd565b9050919050565b600061150b82610f93565b9150600082141561151f5761151e61141c565b5b600182039050919050565b600081519050919050565b600081905092915050565b60005b8381101561155e578082015181840152602081019050611543565b8381111561156d576000848401525b50505050565b600061157e8261152a565b6115888185611535565b9350611598818560208601611540565b80840191505092915050565b60006115b08284611573565b915081905092915050565b60006115c682610f93565b91506115d183610f93565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156116065761160561141c565b5b828201905092915050565b61161a81610f93565b82525050565b60006060820190506116356000830186610ef8565b6116426020830185610ef8565b61164f6040830184611611565b949350505050565b60008115159050919050565b61166c81611657565b811461167757600080fd5b50565b60008151905061168981611663565b92915050565b6000602082840312156116a5576116a4610f22565b5b60006116b38482850161167a565b91505092915050565b60006040820190506116d16000830185610ef8565b6116de6020830184611611565b939250505056fea2646970667358221220f357e26f8c7c57ae7644c78b72027b338cfa7c57f6f8774cf5d0fb408a67906264736f6c634300080b0033",
=======
	Bin: "0x608060405234801561001057600080fd5b50600280546001600160a01b0319163390811790915561002f90610034565b610129565b6002546001600160a01b031633148061005c57503360009081526020819052604090205460ff165b6100c65760405162461bcd60e51b815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527037b934bd32b21037b832b930ba37b9399760791b606482015260840160405180910390fd5b6001600160a01b0381166000908152602081905260408120805460ff191660019081179091558054916100f883610100565b919050555050565b600060001982141561012257634e487b7160e01b600052601160045260246000fd5b5060010190565b61107b806101386000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80634a77f8701161005b5780634a77f87014610100578063afa293d414610108578063e348da1314610126578063fad8b32a1461013957600080fd5b806307da68f51461008d57806316ad9542146100975780633ccfe887146100da578063454b0608146100ed575b600080fd5b61009561014c565b005b60075473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6100956100e8366004610eb3565b610327565b6100956100fb366004610ee6565b6106bd565b6100956106ca565b60065473ffffffffffffffffffffffffffffffffffffffff166100b1565b610095610134366004610eff565b61088c565b610095610147366004610eff565b6109b2565b60025473ffffffffffffffffffffffffffffffffffffffff1633148061018157503360009081526020819052604090205460ff165b610212576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e00000000000000000000000000000060648201526084015b60405180910390fd5b60025474010000000000000000000000000000000000000000900460ff16610296576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f6d6967726174696f6e206e6f74207374617274656400000000000000000000006044820152606401610209565b600280547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff169055600680547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169091556007805490911690556040513381527f55c4adf1f68f084b809304657594a92ba835ada8d3b5340955bf05746723c05b9060200160405180910390a1565b60025473ffffffffffffffffffffffffffffffffffffffff1633148061035c57503360009081526020819052604090205460ff165b6103e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e0000000000000000000000000000006064820152608401610209565b6103f182610b37565b6104a4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526044602482018190527f736f7572636520646f6573206e6f742061707065617220746f20626520616e20908201527f455243323020286661696c65642063616c6c20746f20746f74616c537570706c60648201527f7928292900000000000000000000000000000000000000000000000000000000608482015260a401610209565b6104ad81610b37565b61055f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604960248201527f64657374696e6174696f6e20646f6573206e6f742061707065617220746f206260448201527f6520616e20455243323020286661696c65642063616c6c20746f20746f74616c60648201527f537570706c792829290000000000000000000000000000000000000000000000608482015260a401610209565b60025474010000000000000000000000000000000000000000900460ff16156105e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f6d6967726174696f6e2068617320616c726561647920737461727465640000006044820152606401610209565b600280547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790556006805473ffffffffffffffffffffffffffffffffffffffff8481167fffffffffffffffffffffffff000000000000000000000000000000000000000092831681179093556007805491851691909216811790915560408051928352602083019190915233908201527fe7ccbdddf2d84fab545fb1aad35fd684ef7cce1df6df25facfb32fe3de037f1d9060600160405180910390a15050565b6106c73382610c31565b50565b6006546040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482018190529160009173ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa15801561073e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107629190610f1a565b6006546040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301523060248301529293506000929091169063dd62ed3e90604401602060405180830381865afa1580156107de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108029190610f1a565b905060006108108284610e71565b90506000811161087c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f6e6f20746f6b656e7320617661696c61626c6520746f206d69677261746500006044820152606401610209565b6108868482610c31565b50505050565b60025473ffffffffffffffffffffffffffffffffffffffff163314806108c157503360009081526020819052604090205460ff165b61094d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e0000000000000000000000000000006064820152608401610209565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260208190526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091558054916109aa83610f62565b919050555050565b60025473ffffffffffffffffffffffffffffffffffffffff163314806109e757503360009081526020819052604090205460ff165b610a73576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e0000000000000000000000000000006064820152608401610209565b6001805411610ade576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f43616e27742072656d6f766520616c6c206f70657261746f72730000000000006044820152606401610209565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260208190526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905560018054916109aa83610f9b565b60408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f18160ddd000000000000000000000000000000000000000000000000000000001790529051600091829160609173ffffffffffffffffffffffffffffffffffffffff861691610bb99190610fd0565b6000604051808303816000865af19150503d8060008114610bf6576040519150601f19603f3d011682016040523d82523d6000602084013e610bfb565b606091505b5080519193509150600090610c199083016020908101908401610f1a565b9050828015610c285750600081115b95945050505050565b73ffffffffffffffffffffffffffffffffffffffff821660009081526004602052604090205460ff16610d03576003805460018181019092557fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180547fffffffffffffffffffffffff0000000000000000000000000000000000000000163317905573ffffffffffffffffffffffffffffffffffffffff8316600090815260046020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690911790555b73ffffffffffffffffffffffffffffffffffffffff821660009081526005602052604081208054839290610d3890849061100b565b90915550506006546040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015230602483015260448201849052909116906323b872dd906064016020604051808303816000875af1158015610dbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de09190611023565b506007546040517f40c10f1900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015260248201849052909116906340c10f1990604401600060405180830381600087803b158015610e5557600080fd5b505af1158015610e69573d6000803e3d6000fd5b505050505050565b600081831115610e815781610e83565b825b9392505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610eae57600080fd5b919050565b60008060408385031215610ec657600080fd5b610ecf83610e8a565b9150610edd60208401610e8a565b90509250929050565b600060208284031215610ef857600080fd5b5035919050565b600060208284031215610f1157600080fd5b610e8382610e8a565b600060208284031215610f2c57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610f9457610f94610f33565b5060010190565b600081610faa57610faa610f33565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b6000825160005b81811015610ff15760208186018101518583015201610fd7565b81811115611000576000828501525b509190910192915050565b6000821982111561101e5761101e610f33565b500190565b60006020828403121561103557600080fd5b81518015158114610e8357600080fdfea264697066735822122096eedbcca11be17beb0b84f4bb6a5f0ca6d144495d061e6a9ce793f59cbf951064736f6c634300080b0033",
>>>>>>> Stashed changes
}

// TokenMigratorABI is the input ABI used to generate the binding from.
// Deprecated: Use TokenMigratorMetaData.ABI instead.
var TokenMigratorABI = TokenMigratorMetaData.ABI

// TokenMigratorBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TokenMigratorMetaData.Bin instead.
var TokenMigratorBin = TokenMigratorMetaData.Bin

// DeployTokenMigrator deploys a new Ethereum contract, binding an instance of TokenMigrator to it.
func DeployTokenMigrator(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TokenMigrator, error) {
	parsed, err := TokenMigratorMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TokenMigratorBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TokenMigrator{TokenMigratorCaller: TokenMigratorCaller{contract: contract}, TokenMigratorTransactor: TokenMigratorTransactor{contract: contract}, TokenMigratorFilterer: TokenMigratorFilterer{contract: contract}}, nil
}

// TokenMigrator is an auto generated Go binding around an Ethereum contract.
type TokenMigrator struct {
	TokenMigratorCaller     // Read-only binding to the contract
	TokenMigratorTransactor // Write-only binding to the contract
	TokenMigratorFilterer   // Log filterer for contract events
}

// TokenMigratorCaller is an auto generated read-only Go binding around an Ethereum contract.
type TokenMigratorCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenMigratorTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TokenMigratorTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenMigratorFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TokenMigratorFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenMigratorSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TokenMigratorSession struct {
	Contract     *TokenMigrator    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TokenMigratorCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TokenMigratorCallerSession struct {
	Contract *TokenMigratorCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// TokenMigratorTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TokenMigratorTransactorSession struct {
	Contract     *TokenMigratorTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// TokenMigratorRaw is an auto generated low-level Go binding around an Ethereum contract.
type TokenMigratorRaw struct {
	Contract *TokenMigrator // Generic contract binding to access the raw methods on
}

// TokenMigratorCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TokenMigratorCallerRaw struct {
	Contract *TokenMigratorCaller // Generic read-only contract binding to access the raw methods on
}

// TokenMigratorTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TokenMigratorTransactorRaw struct {
	Contract *TokenMigratorTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTokenMigrator creates a new instance of TokenMigrator, bound to a specific deployed contract.
func NewTokenMigrator(address common.Address, backend bind.ContractBackend) (*TokenMigrator, error) {
	contract, err := bindTokenMigrator(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TokenMigrator{TokenMigratorCaller: TokenMigratorCaller{contract: contract}, TokenMigratorTransactor: TokenMigratorTransactor{contract: contract}, TokenMigratorFilterer: TokenMigratorFilterer{contract: contract}}, nil
}

// NewTokenMigratorCaller creates a new read-only instance of TokenMigrator, bound to a specific deployed contract.
func NewTokenMigratorCaller(address common.Address, caller bind.ContractCaller) (*TokenMigratorCaller, error) {
	contract, err := bindTokenMigrator(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TokenMigratorCaller{contract: contract}, nil
}

// NewTokenMigratorTransactor creates a new write-only instance of TokenMigrator, bound to a specific deployed contract.
func NewTokenMigratorTransactor(address common.Address, transactor bind.ContractTransactor) (*TokenMigratorTransactor, error) {
	contract, err := bindTokenMigrator(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TokenMigratorTransactor{contract: contract}, nil
}

// NewTokenMigratorFilterer creates a new log filterer instance of TokenMigrator, bound to a specific deployed contract.
func NewTokenMigratorFilterer(address common.Address, filterer bind.ContractFilterer) (*TokenMigratorFilterer, error) {
	contract, err := bindTokenMigrator(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TokenMigratorFilterer{contract: contract}, nil
}

// bindTokenMigrator binds a generic wrapper to an already deployed contract.
func bindTokenMigrator(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TokenMigratorABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TokenMigrator *TokenMigratorRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TokenMigrator.Contract.TokenMigratorCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TokenMigrator *TokenMigratorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenMigrator.Contract.TokenMigratorTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TokenMigrator *TokenMigratorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TokenMigrator.Contract.TokenMigratorTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TokenMigrator *TokenMigratorCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TokenMigrator.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TokenMigrator *TokenMigratorTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenMigrator.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TokenMigrator *TokenMigratorTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TokenMigrator.Contract.contract.Transact(opts, method, params...)
}

// GetDestination is a free data retrieval call binding the contract method 0x16ad9542.
//
// Solidity: function getDestination() view returns(address)
func (_TokenMigrator *TokenMigratorCaller) GetDestination(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TokenMigrator.contract.Call(opts, &out, "getDestination")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetDestination is a free data retrieval call binding the contract method 0x16ad9542.
//
// Solidity: function getDestination() view returns(address)
func (_TokenMigrator *TokenMigratorSession) GetDestination() (common.Address, error) {
	return _TokenMigrator.Contract.GetDestination(&_TokenMigrator.CallOpts)
}

// GetDestination is a free data retrieval call binding the contract method 0x16ad9542.
//
// Solidity: function getDestination() view returns(address)
func (_TokenMigrator *TokenMigratorCallerSession) GetDestination() (common.Address, error) {
	return _TokenMigrator.Contract.GetDestination(&_TokenMigrator.CallOpts)
}

// GetSource is a free data retrieval call binding the contract method 0xafa293d4.
//
// Solidity: function getSource() view returns(address)
func (_TokenMigrator *TokenMigratorCaller) GetSource(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TokenMigrator.contract.Call(opts, &out, "getSource")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetSource is a free data retrieval call binding the contract method 0xafa293d4.
//
// Solidity: function getSource() view returns(address)
func (_TokenMigrator *TokenMigratorSession) GetSource() (common.Address, error) {
	return _TokenMigrator.Contract.GetSource(&_TokenMigrator.CallOpts)
}

// GetSource is a free data retrieval call binding the contract method 0xafa293d4.
//
// Solidity: function getSource() view returns(address)
func (_TokenMigrator *TokenMigratorCallerSession) GetSource() (common.Address, error) {
	return _TokenMigrator.Contract.GetSource(&_TokenMigrator.CallOpts)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_TokenMigrator *TokenMigratorTransactor) GrantOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _TokenMigrator.contract.Transact(opts, "grantOperator", _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_TokenMigrator *TokenMigratorSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _TokenMigrator.Contract.GrantOperator(&_TokenMigrator.TransactOpts, _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_TokenMigrator *TokenMigratorTransactorSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _TokenMigrator.Contract.GrantOperator(&_TokenMigrator.TransactOpts, _operator)
}

// Migrate is a paid mutator transaction binding the contract method 0x454b0608.
//
// Solidity: function migrate(uint256 amount) returns()
func (_TokenMigrator *TokenMigratorTransactor) Migrate(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _TokenMigrator.contract.Transact(opts, "migrate", amount)
}

// Migrate is a paid mutator transaction binding the contract method 0x454b0608.
//
// Solidity: function migrate(uint256 amount) returns()
func (_TokenMigrator *TokenMigratorSession) Migrate(amount *big.Int) (*types.Transaction, error) {
	return _TokenMigrator.Contract.Migrate(&_TokenMigrator.TransactOpts, amount)
}

// Migrate is a paid mutator transaction binding the contract method 0x454b0608.
//
// Solidity: function migrate(uint256 amount) returns()
func (_TokenMigrator *TokenMigratorTransactorSession) Migrate(amount *big.Int) (*types.Transaction, error) {
	return _TokenMigrator.Contract.Migrate(&_TokenMigrator.TransactOpts, amount)
}

// MigrateAll is a paid mutator transaction binding the contract method 0x4a77f870.
//
// Solidity: function migrateAll() returns()
func (_TokenMigrator *TokenMigratorTransactor) MigrateAll(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenMigrator.contract.Transact(opts, "migrateAll")
}

// MigrateAll is a paid mutator transaction binding the contract method 0x4a77f870.
//
// Solidity: function migrateAll() returns()
func (_TokenMigrator *TokenMigratorSession) MigrateAll() (*types.Transaction, error) {
	return _TokenMigrator.Contract.MigrateAll(&_TokenMigrator.TransactOpts)
}

// MigrateAll is a paid mutator transaction binding the contract method 0x4a77f870.
//
// Solidity: function migrateAll() returns()
func (_TokenMigrator *TokenMigratorTransactorSession) MigrateAll() (*types.Transaction, error) {
	return _TokenMigrator.Contract.MigrateAll(&_TokenMigrator.TransactOpts)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_TokenMigrator *TokenMigratorTransactor) RevokeOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _TokenMigrator.contract.Transact(opts, "revokeOperator", _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_TokenMigrator *TokenMigratorSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _TokenMigrator.Contract.RevokeOperator(&_TokenMigrator.TransactOpts, _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_TokenMigrator *TokenMigratorTransactorSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _TokenMigrator.Contract.RevokeOperator(&_TokenMigrator.TransactOpts, _operator)
}

// Start is a paid mutator transaction binding the contract method 0x3ccfe887.
//
// Solidity: function start(address src, address dst) returns()
func (_TokenMigrator *TokenMigratorTransactor) Start(opts *bind.TransactOpts, src common.Address, dst common.Address) (*types.Transaction, error) {
	return _TokenMigrator.contract.Transact(opts, "start", src, dst)
}

// Start is a paid mutator transaction binding the contract method 0x3ccfe887.
//
// Solidity: function start(address src, address dst) returns()
func (_TokenMigrator *TokenMigratorSession) Start(src common.Address, dst common.Address) (*types.Transaction, error) {
	return _TokenMigrator.Contract.Start(&_TokenMigrator.TransactOpts, src, dst)
}

// Start is a paid mutator transaction binding the contract method 0x3ccfe887.
//
// Solidity: function start(address src, address dst) returns()
func (_TokenMigrator *TokenMigratorTransactorSession) Start(src common.Address, dst common.Address) (*types.Transaction, error) {
	return _TokenMigrator.Contract.Start(&_TokenMigrator.TransactOpts, src, dst)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_TokenMigrator *TokenMigratorTransactor) Stop(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenMigrator.contract.Transact(opts, "stop")
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_TokenMigrator *TokenMigratorSession) Stop() (*types.Transaction, error) {
	return _TokenMigrator.Contract.Stop(&_TokenMigrator.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_TokenMigrator *TokenMigratorTransactorSession) Stop() (*types.Transaction, error) {
	return _TokenMigrator.Contract.Stop(&_TokenMigrator.TransactOpts)
}

// TokenMigratorStartedIterator is returned from FilterStarted and is used to iterate over the raw logs and unpacked data for Started events raised by the TokenMigrator contract.
type TokenMigratorStartedIterator struct {
	Event *TokenMigratorStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenMigratorStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenMigratorStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenMigratorStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenMigratorStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenMigratorStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenMigratorStarted represents a Started event raised by the TokenMigrator contract.
type TokenMigratorStarted struct {
	Source      common.Address
	Destination common.Address
	Who         common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterStarted is a free log retrieval operation binding the contract event 0xe7ccbdddf2d84fab545fb1aad35fd684ef7cce1df6df25facfb32fe3de037f1d.
//
// Solidity: event Started(address source, address destination, address who)
func (_TokenMigrator *TokenMigratorFilterer) FilterStarted(opts *bind.FilterOpts) (*TokenMigratorStartedIterator, error) {

	logs, sub, err := _TokenMigrator.contract.FilterLogs(opts, "Started")
	if err != nil {
		return nil, err
	}
	return &TokenMigratorStartedIterator{contract: _TokenMigrator.contract, event: "Started", logs: logs, sub: sub}, nil
}

// WatchStarted is a free log subscription operation binding the contract event 0xe7ccbdddf2d84fab545fb1aad35fd684ef7cce1df6df25facfb32fe3de037f1d.
//
// Solidity: event Started(address source, address destination, address who)
func (_TokenMigrator *TokenMigratorFilterer) WatchStarted(opts *bind.WatchOpts, sink chan<- *TokenMigratorStarted) (event.Subscription, error) {

	logs, sub, err := _TokenMigrator.contract.WatchLogs(opts, "Started")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenMigratorStarted)
				if err := _TokenMigrator.contract.UnpackLog(event, "Started", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStarted is a log parse operation binding the contract event 0xe7ccbdddf2d84fab545fb1aad35fd684ef7cce1df6df25facfb32fe3de037f1d.
//
// Solidity: event Started(address source, address destination, address who)
func (_TokenMigrator *TokenMigratorFilterer) ParseStarted(log types.Log) (*TokenMigratorStarted, error) {
	event := new(TokenMigratorStarted)
	if err := _TokenMigrator.contract.UnpackLog(event, "Started", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenMigratorStoppedIterator is returned from FilterStopped and is used to iterate over the raw logs and unpacked data for Stopped events raised by the TokenMigrator contract.
type TokenMigratorStoppedIterator struct {
	Event *TokenMigratorStopped // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenMigratorStoppedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenMigratorStopped)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenMigratorStopped)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenMigratorStoppedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenMigratorStoppedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenMigratorStopped represents a Stopped event raised by the TokenMigrator contract.
type TokenMigratorStopped struct {
	Who common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterStopped is a free log retrieval operation binding the contract event 0x55c4adf1f68f084b809304657594a92ba835ada8d3b5340955bf05746723c05b.
//
// Solidity: event Stopped(address who)
func (_TokenMigrator *TokenMigratorFilterer) FilterStopped(opts *bind.FilterOpts) (*TokenMigratorStoppedIterator, error) {

	logs, sub, err := _TokenMigrator.contract.FilterLogs(opts, "Stopped")
	if err != nil {
		return nil, err
	}
	return &TokenMigratorStoppedIterator{contract: _TokenMigrator.contract, event: "Stopped", logs: logs, sub: sub}, nil
}

// WatchStopped is a free log subscription operation binding the contract event 0x55c4adf1f68f084b809304657594a92ba835ada8d3b5340955bf05746723c05b.
//
// Solidity: event Stopped(address who)
func (_TokenMigrator *TokenMigratorFilterer) WatchStopped(opts *bind.WatchOpts, sink chan<- *TokenMigratorStopped) (event.Subscription, error) {

	logs, sub, err := _TokenMigrator.contract.WatchLogs(opts, "Stopped")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenMigratorStopped)
				if err := _TokenMigrator.contract.UnpackLog(event, "Stopped", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStopped is a log parse operation binding the contract event 0x55c4adf1f68f084b809304657594a92ba835ada8d3b5340955bf05746723c05b.
//
// Solidity: event Stopped(address who)
func (_TokenMigrator *TokenMigratorFilterer) ParseStopped(log types.Log) (*TokenMigratorStopped, error) {
	event := new(TokenMigratorStopped)
	if err := _TokenMigrator.contract.UnpackLog(event, "Stopped", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenMigratorEventsMetaData contains all meta data concerning the TokenMigratorEvents contract.
var TokenMigratorEventsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"Started\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"Stopped\",\"type\":\"event\"}]",
<<<<<<< Updated upstream
	Bin: "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212200043346c34bfbd310645ced8b8d264791be340a8384e2abb7eff4496ead343f964736f6c634300080b0033",
=======
	Bin: "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea264697066735822122093f29d2b5c3130fe6071d003c521e86a23657437a6d5e656e7f1bb628726e38164736f6c634300080b0033",
>>>>>>> Stashed changes
}

// TokenMigratorEventsABI is the input ABI used to generate the binding from.
// Deprecated: Use TokenMigratorEventsMetaData.ABI instead.
var TokenMigratorEventsABI = TokenMigratorEventsMetaData.ABI

// TokenMigratorEventsBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TokenMigratorEventsMetaData.Bin instead.
var TokenMigratorEventsBin = TokenMigratorEventsMetaData.Bin

// DeployTokenMigratorEvents deploys a new Ethereum contract, binding an instance of TokenMigratorEvents to it.
func DeployTokenMigratorEvents(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TokenMigratorEvents, error) {
	parsed, err := TokenMigratorEventsMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TokenMigratorEventsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TokenMigratorEvents{TokenMigratorEventsCaller: TokenMigratorEventsCaller{contract: contract}, TokenMigratorEventsTransactor: TokenMigratorEventsTransactor{contract: contract}, TokenMigratorEventsFilterer: TokenMigratorEventsFilterer{contract: contract}}, nil
}

// TokenMigratorEvents is an auto generated Go binding around an Ethereum contract.
type TokenMigratorEvents struct {
	TokenMigratorEventsCaller     // Read-only binding to the contract
	TokenMigratorEventsTransactor // Write-only binding to the contract
	TokenMigratorEventsFilterer   // Log filterer for contract events
}

// TokenMigratorEventsCaller is an auto generated read-only Go binding around an Ethereum contract.
type TokenMigratorEventsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenMigratorEventsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TokenMigratorEventsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenMigratorEventsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TokenMigratorEventsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenMigratorEventsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TokenMigratorEventsSession struct {
	Contract     *TokenMigratorEvents // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// TokenMigratorEventsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TokenMigratorEventsCallerSession struct {
	Contract *TokenMigratorEventsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// TokenMigratorEventsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TokenMigratorEventsTransactorSession struct {
	Contract     *TokenMigratorEventsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// TokenMigratorEventsRaw is an auto generated low-level Go binding around an Ethereum contract.
type TokenMigratorEventsRaw struct {
	Contract *TokenMigratorEvents // Generic contract binding to access the raw methods on
}

// TokenMigratorEventsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TokenMigratorEventsCallerRaw struct {
	Contract *TokenMigratorEventsCaller // Generic read-only contract binding to access the raw methods on
}

// TokenMigratorEventsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TokenMigratorEventsTransactorRaw struct {
	Contract *TokenMigratorEventsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTokenMigratorEvents creates a new instance of TokenMigratorEvents, bound to a specific deployed contract.
func NewTokenMigratorEvents(address common.Address, backend bind.ContractBackend) (*TokenMigratorEvents, error) {
	contract, err := bindTokenMigratorEvents(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TokenMigratorEvents{TokenMigratorEventsCaller: TokenMigratorEventsCaller{contract: contract}, TokenMigratorEventsTransactor: TokenMigratorEventsTransactor{contract: contract}, TokenMigratorEventsFilterer: TokenMigratorEventsFilterer{contract: contract}}, nil
}

// NewTokenMigratorEventsCaller creates a new read-only instance of TokenMigratorEvents, bound to a specific deployed contract.
func NewTokenMigratorEventsCaller(address common.Address, caller bind.ContractCaller) (*TokenMigratorEventsCaller, error) {
	contract, err := bindTokenMigratorEvents(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TokenMigratorEventsCaller{contract: contract}, nil
}

// NewTokenMigratorEventsTransactor creates a new write-only instance of TokenMigratorEvents, bound to a specific deployed contract.
func NewTokenMigratorEventsTransactor(address common.Address, transactor bind.ContractTransactor) (*TokenMigratorEventsTransactor, error) {
	contract, err := bindTokenMigratorEvents(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TokenMigratorEventsTransactor{contract: contract}, nil
}

// NewTokenMigratorEventsFilterer creates a new log filterer instance of TokenMigratorEvents, bound to a specific deployed contract.
func NewTokenMigratorEventsFilterer(address common.Address, filterer bind.ContractFilterer) (*TokenMigratorEventsFilterer, error) {
	contract, err := bindTokenMigratorEvents(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TokenMigratorEventsFilterer{contract: contract}, nil
}

// bindTokenMigratorEvents binds a generic wrapper to an already deployed contract.
func bindTokenMigratorEvents(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TokenMigratorEventsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TokenMigratorEvents *TokenMigratorEventsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TokenMigratorEvents.Contract.TokenMigratorEventsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TokenMigratorEvents *TokenMigratorEventsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenMigratorEvents.Contract.TokenMigratorEventsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TokenMigratorEvents *TokenMigratorEventsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TokenMigratorEvents.Contract.TokenMigratorEventsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TokenMigratorEvents *TokenMigratorEventsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TokenMigratorEvents.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TokenMigratorEvents *TokenMigratorEventsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenMigratorEvents.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TokenMigratorEvents *TokenMigratorEventsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TokenMigratorEvents.Contract.contract.Transact(opts, method, params...)
}

// TokenMigratorEventsStartedIterator is returned from FilterStarted and is used to iterate over the raw logs and unpacked data for Started events raised by the TokenMigratorEvents contract.
type TokenMigratorEventsStartedIterator struct {
	Event *TokenMigratorEventsStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenMigratorEventsStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenMigratorEventsStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenMigratorEventsStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenMigratorEventsStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenMigratorEventsStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenMigratorEventsStarted represents a Started event raised by the TokenMigratorEvents contract.
type TokenMigratorEventsStarted struct {
	Source      common.Address
	Destination common.Address
	Who         common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterStarted is a free log retrieval operation binding the contract event 0xe7ccbdddf2d84fab545fb1aad35fd684ef7cce1df6df25facfb32fe3de037f1d.
//
// Solidity: event Started(address source, address destination, address who)
func (_TokenMigratorEvents *TokenMigratorEventsFilterer) FilterStarted(opts *bind.FilterOpts) (*TokenMigratorEventsStartedIterator, error) {

	logs, sub, err := _TokenMigratorEvents.contract.FilterLogs(opts, "Started")
	if err != nil {
		return nil, err
	}
	return &TokenMigratorEventsStartedIterator{contract: _TokenMigratorEvents.contract, event: "Started", logs: logs, sub: sub}, nil
}

// WatchStarted is a free log subscription operation binding the contract event 0xe7ccbdddf2d84fab545fb1aad35fd684ef7cce1df6df25facfb32fe3de037f1d.
//
// Solidity: event Started(address source, address destination, address who)
func (_TokenMigratorEvents *TokenMigratorEventsFilterer) WatchStarted(opts *bind.WatchOpts, sink chan<- *TokenMigratorEventsStarted) (event.Subscription, error) {

	logs, sub, err := _TokenMigratorEvents.contract.WatchLogs(opts, "Started")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenMigratorEventsStarted)
				if err := _TokenMigratorEvents.contract.UnpackLog(event, "Started", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStarted is a log parse operation binding the contract event 0xe7ccbdddf2d84fab545fb1aad35fd684ef7cce1df6df25facfb32fe3de037f1d.
//
// Solidity: event Started(address source, address destination, address who)
func (_TokenMigratorEvents *TokenMigratorEventsFilterer) ParseStarted(log types.Log) (*TokenMigratorEventsStarted, error) {
	event := new(TokenMigratorEventsStarted)
	if err := _TokenMigratorEvents.contract.UnpackLog(event, "Started", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenMigratorEventsStoppedIterator is returned from FilterStopped and is used to iterate over the raw logs and unpacked data for Stopped events raised by the TokenMigratorEvents contract.
type TokenMigratorEventsStoppedIterator struct {
	Event *TokenMigratorEventsStopped // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenMigratorEventsStoppedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenMigratorEventsStopped)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenMigratorEventsStopped)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenMigratorEventsStoppedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenMigratorEventsStoppedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenMigratorEventsStopped represents a Stopped event raised by the TokenMigratorEvents contract.
type TokenMigratorEventsStopped struct {
	Who common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterStopped is a free log retrieval operation binding the contract event 0x55c4adf1f68f084b809304657594a92ba835ada8d3b5340955bf05746723c05b.
//
// Solidity: event Stopped(address who)
func (_TokenMigratorEvents *TokenMigratorEventsFilterer) FilterStopped(opts *bind.FilterOpts) (*TokenMigratorEventsStoppedIterator, error) {

	logs, sub, err := _TokenMigratorEvents.contract.FilterLogs(opts, "Stopped")
	if err != nil {
		return nil, err
	}
	return &TokenMigratorEventsStoppedIterator{contract: _TokenMigratorEvents.contract, event: "Stopped", logs: logs, sub: sub}, nil
}

// WatchStopped is a free log subscription operation binding the contract event 0x55c4adf1f68f084b809304657594a92ba835ada8d3b5340955bf05746723c05b.
//
// Solidity: event Stopped(address who)
func (_TokenMigratorEvents *TokenMigratorEventsFilterer) WatchStopped(opts *bind.WatchOpts, sink chan<- *TokenMigratorEventsStopped) (event.Subscription, error) {

	logs, sub, err := _TokenMigratorEvents.contract.WatchLogs(opts, "Stopped")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenMigratorEventsStopped)
				if err := _TokenMigratorEvents.contract.UnpackLog(event, "Stopped", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStopped is a log parse operation binding the contract event 0x55c4adf1f68f084b809304657594a92ba835ada8d3b5340955bf05746723c05b.
//
// Solidity: event Stopped(address who)
func (_TokenMigratorEvents *TokenMigratorEventsFilterer) ParseStopped(log types.Log) (*TokenMigratorEventsStopped, error) {
	event := new(TokenMigratorEventsStopped)
	if err := _TokenMigratorEvents.contract.UnpackLog(event, "Stopped", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorLocationsMetaData contains all meta data concerning the ValidatorLocations contract.
var ValidatorLocationsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"ip\",\"type\":\"string\"}],\"name\":\"MyLocation\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"getLocation\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"a\",\"type\":\"address[]\"}],\"name\":\"getLocations\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyLocation\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ip\",\"type\":\"string\"}],\"name\":\"setMyLocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// ValidatorLocationsABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorLocationsMetaData.ABI instead.
var ValidatorLocationsABI = ValidatorLocationsMetaData.ABI

// ValidatorLocations is an auto generated Go binding around an Ethereum contract.
type ValidatorLocations struct {
	ValidatorLocationsCaller     // Read-only binding to the contract
	ValidatorLocationsTransactor // Write-only binding to the contract
	ValidatorLocationsFilterer   // Log filterer for contract events
}

// ValidatorLocationsCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorLocationsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorLocationsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorLocationsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorLocationsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorLocationsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorLocationsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorLocationsSession struct {
	Contract     *ValidatorLocations // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ValidatorLocationsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorLocationsCallerSession struct {
	Contract *ValidatorLocationsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// ValidatorLocationsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorLocationsTransactorSession struct {
	Contract     *ValidatorLocationsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// ValidatorLocationsRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorLocationsRaw struct {
	Contract *ValidatorLocations // Generic contract binding to access the raw methods on
}

// ValidatorLocationsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorLocationsCallerRaw struct {
	Contract *ValidatorLocationsCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorLocationsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorLocationsTransactorRaw struct {
	Contract *ValidatorLocationsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorLocations creates a new instance of ValidatorLocations, bound to a specific deployed contract.
func NewValidatorLocations(address common.Address, backend bind.ContractBackend) (*ValidatorLocations, error) {
	contract, err := bindValidatorLocations(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocations{ValidatorLocationsCaller: ValidatorLocationsCaller{contract: contract}, ValidatorLocationsTransactor: ValidatorLocationsTransactor{contract: contract}, ValidatorLocationsFilterer: ValidatorLocationsFilterer{contract: contract}}, nil
}

// NewValidatorLocationsCaller creates a new read-only instance of ValidatorLocations, bound to a specific deployed contract.
func NewValidatorLocationsCaller(address common.Address, caller bind.ContractCaller) (*ValidatorLocationsCaller, error) {
	contract, err := bindValidatorLocations(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsCaller{contract: contract}, nil
}

// NewValidatorLocationsTransactor creates a new write-only instance of ValidatorLocations, bound to a specific deployed contract.
func NewValidatorLocationsTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorLocationsTransactor, error) {
	contract, err := bindValidatorLocations(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsTransactor{contract: contract}, nil
}

// NewValidatorLocationsFilterer creates a new log filterer instance of ValidatorLocations, bound to a specific deployed contract.
func NewValidatorLocationsFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorLocationsFilterer, error) {
	contract, err := bindValidatorLocations(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsFilterer{contract: contract}, nil
}

// bindValidatorLocations binds a generic wrapper to an already deployed contract.
func bindValidatorLocations(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorLocationsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorLocations *ValidatorLocationsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorLocations.Contract.ValidatorLocationsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorLocations *ValidatorLocationsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorLocations.Contract.ValidatorLocationsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorLocations *ValidatorLocationsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorLocations.Contract.ValidatorLocationsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorLocations *ValidatorLocationsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorLocations.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorLocations *ValidatorLocationsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorLocations.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorLocations *ValidatorLocationsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorLocations.Contract.contract.Transact(opts, method, params...)
}

// GetLocation is a free data retrieval call binding the contract method 0xd9e0dc59.
//
// Solidity: function getLocation(address a) view returns(string)
func (_ValidatorLocations *ValidatorLocationsCaller) GetLocation(opts *bind.CallOpts, a common.Address) (string, error) {
	var out []interface{}
	err := _ValidatorLocations.contract.Call(opts, &out, "getLocation", a)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetLocation is a free data retrieval call binding the contract method 0xd9e0dc59.
//
// Solidity: function getLocation(address a) view returns(string)
func (_ValidatorLocations *ValidatorLocationsSession) GetLocation(a common.Address) (string, error) {
	return _ValidatorLocations.Contract.GetLocation(&_ValidatorLocations.CallOpts, a)
}

// GetLocation is a free data retrieval call binding the contract method 0xd9e0dc59.
//
// Solidity: function getLocation(address a) view returns(string)
func (_ValidatorLocations *ValidatorLocationsCallerSession) GetLocation(a common.Address) (string, error) {
	return _ValidatorLocations.Contract.GetLocation(&_ValidatorLocations.CallOpts, a)
}

// GetLocations is a free data retrieval call binding the contract method 0x76207f9c.
//
// Solidity: function getLocations(address[] a) view returns(string[])
func (_ValidatorLocations *ValidatorLocationsCaller) GetLocations(opts *bind.CallOpts, a []common.Address) ([]string, error) {
	var out []interface{}
	err := _ValidatorLocations.contract.Call(opts, &out, "getLocations", a)

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// GetLocations is a free data retrieval call binding the contract method 0x76207f9c.
//
// Solidity: function getLocations(address[] a) view returns(string[])
func (_ValidatorLocations *ValidatorLocationsSession) GetLocations(a []common.Address) ([]string, error) {
	return _ValidatorLocations.Contract.GetLocations(&_ValidatorLocations.CallOpts, a)
}

// GetLocations is a free data retrieval call binding the contract method 0x76207f9c.
//
// Solidity: function getLocations(address[] a) view returns(string[])
func (_ValidatorLocations *ValidatorLocationsCallerSession) GetLocations(a []common.Address) ([]string, error) {
	return _ValidatorLocations.Contract.GetLocations(&_ValidatorLocations.CallOpts, a)
}

// GetMyLocation is a free data retrieval call binding the contract method 0x59a8b416.
//
// Solidity: function getMyLocation() view returns(string)
func (_ValidatorLocations *ValidatorLocationsCaller) GetMyLocation(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ValidatorLocations.contract.Call(opts, &out, "getMyLocation")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetMyLocation is a free data retrieval call binding the contract method 0x59a8b416.
//
// Solidity: function getMyLocation() view returns(string)
func (_ValidatorLocations *ValidatorLocationsSession) GetMyLocation() (string, error) {
	return _ValidatorLocations.Contract.GetMyLocation(&_ValidatorLocations.CallOpts)
}

// GetMyLocation is a free data retrieval call binding the contract method 0x59a8b416.
//
// Solidity: function getMyLocation() view returns(string)
func (_ValidatorLocations *ValidatorLocationsCallerSession) GetMyLocation() (string, error) {
	return _ValidatorLocations.Contract.GetMyLocation(&_ValidatorLocations.CallOpts)
}

// SetMyLocation is a paid mutator transaction binding the contract method 0xed7a558c.
//
// Solidity: function setMyLocation(string ip) returns()
func (_ValidatorLocations *ValidatorLocationsTransactor) SetMyLocation(opts *bind.TransactOpts, ip string) (*types.Transaction, error) {
	return _ValidatorLocations.contract.Transact(opts, "setMyLocation", ip)
}

// SetMyLocation is a paid mutator transaction binding the contract method 0xed7a558c.
//
// Solidity: function setMyLocation(string ip) returns()
func (_ValidatorLocations *ValidatorLocationsSession) SetMyLocation(ip string) (*types.Transaction, error) {
	return _ValidatorLocations.Contract.SetMyLocation(&_ValidatorLocations.TransactOpts, ip)
}

// SetMyLocation is a paid mutator transaction binding the contract method 0xed7a558c.
//
// Solidity: function setMyLocation(string ip) returns()
func (_ValidatorLocations *ValidatorLocationsTransactorSession) SetMyLocation(ip string) (*types.Transaction, error) {
	return _ValidatorLocations.Contract.SetMyLocation(&_ValidatorLocations.TransactOpts, ip)
}

// ValidatorLocationsMyLocationIterator is returned from FilterMyLocation and is used to iterate over the raw logs and unpacked data for MyLocation events raised by the ValidatorLocations contract.
type ValidatorLocationsMyLocationIterator struct {
	Event *ValidatorLocationsMyLocation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorLocationsMyLocationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorLocationsMyLocation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorLocationsMyLocation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorLocationsMyLocationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorLocationsMyLocationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorLocationsMyLocation represents a MyLocation event raised by the ValidatorLocations contract.
type ValidatorLocationsMyLocation struct {
	Ip  common.Hash
	Raw types.Log // Blockchain specific contextual infos
}

// FilterMyLocation is a free log retrieval operation binding the contract event 0x94f42dfacdc77a25a5e03baf01c6438d29ae4923eed7742bb1269da152e2470d.
//
// Solidity: event MyLocation(string indexed ip)
func (_ValidatorLocations *ValidatorLocationsFilterer) FilterMyLocation(opts *bind.FilterOpts, ip []string) (*ValidatorLocationsMyLocationIterator, error) {

	var ipRule []interface{}
	for _, ipItem := range ip {
		ipRule = append(ipRule, ipItem)
	}

	logs, sub, err := _ValidatorLocations.contract.FilterLogs(opts, "MyLocation", ipRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsMyLocationIterator{contract: _ValidatorLocations.contract, event: "MyLocation", logs: logs, sub: sub}, nil
}

// WatchMyLocation is a free log subscription operation binding the contract event 0x94f42dfacdc77a25a5e03baf01c6438d29ae4923eed7742bb1269da152e2470d.
//
// Solidity: event MyLocation(string indexed ip)
func (_ValidatorLocations *ValidatorLocationsFilterer) WatchMyLocation(opts *bind.WatchOpts, sink chan<- *ValidatorLocationsMyLocation, ip []string) (event.Subscription, error) {

	var ipRule []interface{}
	for _, ipItem := range ip {
		ipRule = append(ipRule, ipItem)
	}

	logs, sub, err := _ValidatorLocations.contract.WatchLogs(opts, "MyLocation", ipRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorLocationsMyLocation)
				if err := _ValidatorLocations.contract.UnpackLog(event, "MyLocation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMyLocation is a log parse operation binding the contract event 0x94f42dfacdc77a25a5e03baf01c6438d29ae4923eed7742bb1269da152e2470d.
//
// Solidity: event MyLocation(string indexed ip)
func (_ValidatorLocations *ValidatorLocationsFilterer) ParseMyLocation(log types.Log) (*ValidatorLocationsMyLocation, error) {
	event := new(ValidatorLocationsMyLocation)
	if err := _ValidatorLocations.contract.UnpackLog(event, "MyLocation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorLocationsEventsMetaData contains all meta data concerning the ValidatorLocationsEvents contract.
var ValidatorLocationsEventsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"ip\",\"type\":\"string\"}],\"name\":\"MyLocation\",\"type\":\"event\"}]",
}

// ValidatorLocationsEventsABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorLocationsEventsMetaData.ABI instead.
var ValidatorLocationsEventsABI = ValidatorLocationsEventsMetaData.ABI

// ValidatorLocationsEvents is an auto generated Go binding around an Ethereum contract.
type ValidatorLocationsEvents struct {
	ValidatorLocationsEventsCaller     // Read-only binding to the contract
	ValidatorLocationsEventsTransactor // Write-only binding to the contract
	ValidatorLocationsEventsFilterer   // Log filterer for contract events
}

// ValidatorLocationsEventsCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorLocationsEventsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorLocationsEventsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorLocationsEventsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorLocationsEventsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorLocationsEventsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorLocationsEventsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorLocationsEventsSession struct {
	Contract     *ValidatorLocationsEvents // Generic contract binding to set the session for
	CallOpts     bind.CallOpts             // Call options to use throughout this session
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// ValidatorLocationsEventsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorLocationsEventsCallerSession struct {
	Contract *ValidatorLocationsEventsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                   // Call options to use throughout this session
}

// ValidatorLocationsEventsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorLocationsEventsTransactorSession struct {
	Contract     *ValidatorLocationsEventsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                   // Transaction auth options to use throughout this session
}

// ValidatorLocationsEventsRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorLocationsEventsRaw struct {
	Contract *ValidatorLocationsEvents // Generic contract binding to access the raw methods on
}

// ValidatorLocationsEventsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorLocationsEventsCallerRaw struct {
	Contract *ValidatorLocationsEventsCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorLocationsEventsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorLocationsEventsTransactorRaw struct {
	Contract *ValidatorLocationsEventsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorLocationsEvents creates a new instance of ValidatorLocationsEvents, bound to a specific deployed contract.
func NewValidatorLocationsEvents(address common.Address, backend bind.ContractBackend) (*ValidatorLocationsEvents, error) {
	contract, err := bindValidatorLocationsEvents(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsEvents{ValidatorLocationsEventsCaller: ValidatorLocationsEventsCaller{contract: contract}, ValidatorLocationsEventsTransactor: ValidatorLocationsEventsTransactor{contract: contract}, ValidatorLocationsEventsFilterer: ValidatorLocationsEventsFilterer{contract: contract}}, nil
}

// NewValidatorLocationsEventsCaller creates a new read-only instance of ValidatorLocationsEvents, bound to a specific deployed contract.
func NewValidatorLocationsEventsCaller(address common.Address, caller bind.ContractCaller) (*ValidatorLocationsEventsCaller, error) {
	contract, err := bindValidatorLocationsEvents(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsEventsCaller{contract: contract}, nil
}

// NewValidatorLocationsEventsTransactor creates a new write-only instance of ValidatorLocationsEvents, bound to a specific deployed contract.
func NewValidatorLocationsEventsTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorLocationsEventsTransactor, error) {
	contract, err := bindValidatorLocationsEvents(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsEventsTransactor{contract: contract}, nil
}

// NewValidatorLocationsEventsFilterer creates a new log filterer instance of ValidatorLocationsEvents, bound to a specific deployed contract.
func NewValidatorLocationsEventsFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorLocationsEventsFilterer, error) {
	contract, err := bindValidatorLocationsEvents(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsEventsFilterer{contract: contract}, nil
}

// bindValidatorLocationsEvents binds a generic wrapper to an already deployed contract.
func bindValidatorLocationsEvents(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorLocationsEventsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorLocationsEvents *ValidatorLocationsEventsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorLocationsEvents.Contract.ValidatorLocationsEventsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorLocationsEvents *ValidatorLocationsEventsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorLocationsEvents.Contract.ValidatorLocationsEventsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorLocationsEvents *ValidatorLocationsEventsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorLocationsEvents.Contract.ValidatorLocationsEventsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorLocationsEvents *ValidatorLocationsEventsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorLocationsEvents.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorLocationsEvents *ValidatorLocationsEventsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorLocationsEvents.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorLocationsEvents *ValidatorLocationsEventsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorLocationsEvents.Contract.contract.Transact(opts, method, params...)
}

// ValidatorLocationsEventsMyLocationIterator is returned from FilterMyLocation and is used to iterate over the raw logs and unpacked data for MyLocation events raised by the ValidatorLocationsEvents contract.
type ValidatorLocationsEventsMyLocationIterator struct {
	Event *ValidatorLocationsEventsMyLocation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorLocationsEventsMyLocationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorLocationsEventsMyLocation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorLocationsEventsMyLocation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorLocationsEventsMyLocationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorLocationsEventsMyLocationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorLocationsEventsMyLocation represents a MyLocation event raised by the ValidatorLocationsEvents contract.
type ValidatorLocationsEventsMyLocation struct {
	Ip  common.Hash
	Raw types.Log // Blockchain specific contextual infos
}

// FilterMyLocation is a free log retrieval operation binding the contract event 0x94f42dfacdc77a25a5e03baf01c6438d29ae4923eed7742bb1269da152e2470d.
//
// Solidity: event MyLocation(string indexed ip)
func (_ValidatorLocationsEvents *ValidatorLocationsEventsFilterer) FilterMyLocation(opts *bind.FilterOpts, ip []string) (*ValidatorLocationsEventsMyLocationIterator, error) {

	var ipRule []interface{}
	for _, ipItem := range ip {
		ipRule = append(ipRule, ipItem)
	}

	logs, sub, err := _ValidatorLocationsEvents.contract.FilterLogs(opts, "MyLocation", ipRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsEventsMyLocationIterator{contract: _ValidatorLocationsEvents.contract, event: "MyLocation", logs: logs, sub: sub}, nil
}

// WatchMyLocation is a free log subscription operation binding the contract event 0x94f42dfacdc77a25a5e03baf01c6438d29ae4923eed7742bb1269da152e2470d.
//
// Solidity: event MyLocation(string indexed ip)
func (_ValidatorLocationsEvents *ValidatorLocationsEventsFilterer) WatchMyLocation(opts *bind.WatchOpts, sink chan<- *ValidatorLocationsEventsMyLocation, ip []string) (event.Subscription, error) {

	var ipRule []interface{}
	for _, ipItem := range ip {
		ipRule = append(ipRule, ipItem)
	}

	logs, sub, err := _ValidatorLocationsEvents.contract.WatchLogs(opts, "MyLocation", ipRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorLocationsEventsMyLocation)
				if err := _ValidatorLocationsEvents.contract.UnpackLog(event, "MyLocation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMyLocation is a log parse operation binding the contract event 0x94f42dfacdc77a25a5e03baf01c6438d29ae4923eed7742bb1269da152e2470d.
//
// Solidity: event MyLocation(string indexed ip)
func (_ValidatorLocationsEvents *ValidatorLocationsEventsFilterer) ParseMyLocation(log types.Log) (*ValidatorLocationsEventsMyLocation, error) {
	event := new(ValidatorLocationsEventsMyLocation)
	if err := _ValidatorLocationsEvents.contract.UnpackLog(event, "MyLocation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorLocationsFacetMetaData contains all meta data concerning the ValidatorLocationsFacet contract.
var ValidatorLocationsFacetMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"ip\",\"type\":\"string\"}],\"name\":\"MyLocation\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"getLocation\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"a\",\"type\":\"address[]\"}],\"name\":\"getLocations\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyLocation\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ip\",\"type\":\"string\"}],\"name\":\"setMyLocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
<<<<<<< Updated upstream
	Bin: "0x608060405234801561001057600080fd5b50610dbe806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806359a8b4161461005157806376207f9c1461006f578063d9e0dc591461009f578063ed7a558c146100cf575b600080fd5b6100596100eb565b6040516100669190610823565b60405180910390f35b610089600480360381019061008491906108b4565b6100fa565b6040516100969190610a0d565b60405180910390f35b6100b960048036038101906100b49190610a8d565b61010e565b6040516100c69190610823565b60405180910390f35b6100e960048036038101906100e49190610b10565b610120565b005b60606100f5610172565b905090565b60606101068383610250565b905092915050565b6060610119826103ef565b9050919050565b61012a82826104cf565b818160405161013a929190610b9c565b60405180910390207f94f42dfacdc77a25a5e03baf01c6438d29ae4923eed7742bb1269da152e2470d60405160405180910390a25050565b6060600061017e610579565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080546101cc90610be4565b80601f01602080910402602001604051908101604052809291908181526020018280546101f890610be4565b80156102455780601f1061021a57610100808354040283529160200191610245565b820191906000526020600020905b81548152906001019060200180831161022857829003601f168201915b505050505091505090565b6060600061025c610579565b905060008484905067ffffffffffffffff81111561027d5761027c610c16565b5b6040519080825280602002602001820160405280156102b057816020015b606081526020019060019003908161029b5790505b50905060005b858590508110156103e3578260000160008787848181106102da576102d9610c45565b5b90506020020160208101906102ef9190610a8d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805461033490610be4565b80601f016020809104026020016040519081016040528092919081815260200182805461036090610be4565b80156103ad5780601f10610382576101008083540402835291602001916103ad565b820191906000526020600020905b81548152906001019060200180831161039057829003601f168201915b50505050508282815181106103c5576103c4610c45565b5b602002602001018190525080806103db90610cad565b9150506102b6565b50809250505092915050565b606060006103fb610579565b90508060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805461044990610be4565b80601f016020809104026020016040519081016040528092919081815260200182805461047590610be4565b80156104c25780601f10610497576101008083540402835291602001916104c2565b820191906000526020600020905b8154815290600101906020018083116104a557829003601f168201915b5050505050915050919050565b6104d8336105a6565b610517576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050e90610d68565b60405180910390fd5b6000610521610579565b905082828260000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002091906105739291906106e7565b50505050565b6000807fd6a809ef2e033c9356226f38ff793e00cfb3b2fc9a21fbb6d92b5183cecec87b90508091505090565b6000806105b1610625565b90508060020160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16801561061d5750610611610652565b61061a84610665565b10155b915050919050565b6000807f310970b1d84cbb8af371a12019b396e9511a9b44411c1dabeec3e3d59d9a50f690508091505090565b600061065c6106ba565b60000154905090565b600061066f6106ba565b60090160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050919050565b6000807f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237ef90508091505090565b8280546106f390610be4565b90600052602060002090601f016020900481019282610715576000855561075c565b82601f1061072e57803560ff191683800117855561075c565b8280016001018555821561075c579182015b8281111561075b578235825591602001919060010190610740565b5b509050610769919061076d565b5090565b5b8082111561078657600081600090555060010161076e565b5090565b600081519050919050565b600082825260208201905092915050565b60005b838110156107c45780820151818401526020810190506107a9565b838111156107d3576000848401525b50505050565b6000601f19601f8301169050919050565b60006107f58261078a565b6107ff8185610795565b935061080f8185602086016107a6565b610818816107d9565b840191505092915050565b6000602082019050818103600083015261083d81846107ea565b905092915050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126108745761087361084f565b5b8235905067ffffffffffffffff81111561089157610890610854565b5b6020830191508360208202830111156108ad576108ac610859565b5b9250929050565b600080602083850312156108cb576108ca610845565b5b600083013567ffffffffffffffff8111156108e9576108e861084a565b5b6108f58582860161085e565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b60006109498261078a565b610953818561092d565b93506109638185602086016107a6565b61096c816107d9565b840191505092915050565b6000610983838361093e565b905092915050565b6000602082019050919050565b60006109a382610901565b6109ad818561090c565b9350836020820285016109bf8561091d565b8060005b858110156109fb57848403895281516109dc8582610977565b94506109e78361098b565b925060208a019950506001810190506109c3565b50829750879550505050505092915050565b60006020820190508181036000830152610a278184610998565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a5a82610a2f565b9050919050565b610a6a81610a4f565b8114610a7557600080fd5b50565b600081359050610a8781610a61565b92915050565b600060208284031215610aa357610aa2610845565b5b6000610ab184828501610a78565b91505092915050565b60008083601f840112610ad057610acf61084f565b5b8235905067ffffffffffffffff811115610aed57610aec610854565b5b602083019150836001820283011115610b0957610b08610859565b5b9250929050565b60008060208385031215610b2757610b26610845565b5b600083013567ffffffffffffffff811115610b4557610b4461084a565b5b610b5185828601610aba565b92509250509250929050565b600081905092915050565b82818337600083830152505050565b6000610b838385610b5d565b9350610b90838584610b68565b82840190509392505050565b6000610ba9828486610b77565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610bfc57607f821691505b60208210811415610c1057610c0f610bb5565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b6000610cb882610ca3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ceb57610cea610c74565b5b600182019050919050565b7f6f6e6c792066756c6c79207374616b6564207061727469636970616e7473206160008201527f6c6c6f7765640000000000000000000000000000000000000000000000000000602082015250565b6000610d52602683610795565b9150610d5d82610cf6565b604082019050919050565b60006020820190508181036000830152610d8181610d45565b905091905056fea26469706673582212203c00242e6d5b690a974603ddda1fd2bdb196caaee69b67b138b40896eea04f8e64736f6c634300080b0033",
=======
	Bin: "0x608060405234801561001057600080fd5b50610a53806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806359a8b4161461005157806376207f9c1461006f578063d9e0dc591461008f578063ed7a558c146100a2575b600080fd5b6100596100b7565b604051610066919061075d565b60405180910390f35b61008261007d366004610770565b6100c6565b60405161006691906107e5565b61005961009d366004610865565b6100d9565b6100b56100b036600461089b565b6100ea565b005b60606100c1610138565b905090565b60606100d283836101fd565b9392505050565b60606100e4826103a2565b92915050565b6100f4828261047f565b81816040516101049291906108fb565b604051908190038120907f94f42dfacdc77a25a5e03baf01c6438d29ae4923eed7742bb1269da152e2470d90600090a25050565b3360009081527fd6a809ef2e033c9356226f38ff793e00cfb3b2fc9a21fbb6d92b5183cecec87b60208190526040909120805460609291906101799061090b565b80601f01602080910402602001604051908101604052809291908181526020018280546101a59061090b565b80156101f25780601f106101c7576101008083540402835291602001916101f2565b820191906000526020600020905b8154815290600101906020018083116101d557829003601f168201915b505050505091505090565b60607fd6a809ef2e033c9356226f38ff793e00cfb3b2fc9a21fbb6d92b5183cecec87b60008367ffffffffffffffff81111561023b5761023b61095f565b60405190808252806020026020018201604052801561026e57816020015b60608152602001906001900390816102595790505b50905060005b84811015610399578260008787848181106102915761029161098e565b90506020020160208101906102a69190610865565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080546102eb9061090b565b80601f01602080910402602001604051908101604052809291908181526020018280546103179061090b565b80156103645780601f1061033957610100808354040283529160200191610364565b820191906000526020600020905b81548152906001019060200180831161034757829003601f168201915b505050505082828151811061037b5761037b61098e565b60200260200101819052508080610391906109bd565b915050610274565b50949350505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081527fd6a809ef2e033c9356226f38ff793e00cfb3b2fc9a21fbb6d92b5183cecec87b60208190526040909120805460609291906103f99061090b565b80601f01602080910402602001604051908101604052809291908181526020018280546104259061090b565b80156104725780601f1061044757610100808354040283529160200191610472565b820191906000526020600020905b81548152906001019060200180831161045557829003601f168201915b5050505050915050919050565b6104883361055a565b610518576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f6f6e6c792066756c6c79207374616b6564207061727469636970616e7473206160448201527f6c6c6f7765640000000000000000000000000000000000000000000000000000606482015260840160405180910390fd5b3360009081527fd6a809ef2e033c9356226f38ff793e00cfb3b2fc9a21fbb6d92b5183cecec87b6020819052604090912061055490848461063b565b50505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081527f310970b1d84cbb8af371a12019b396e9511a9b44411c1dabeec3e3d59d9a50f860205260408120547f310970b1d84cbb8af371a12019b396e9511a9b44411c1dabeec3e3d59d9a50f69060ff1680156100d257507f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237ef5473ffffffffffffffffffffffffffffffffffffffff841660009081527f959f5d3bd7338cbbb967371aad5c50fefecff8acddc391792439bc468f2237f8602052604090205410159392505050565b8280546106479061090b565b90600052602060002090601f01602090048101928261066957600085556106cd565b82601f106106a0578280017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008235161785556106cd565b828001600101855582156106cd579182015b828111156106cd5782358255916020019190600101906106b2565b506106d99291506106dd565b5090565b5b808211156106d957600081556001016106de565b6000815180845260005b81811015610718576020818501810151868301820152016106fc565b8181111561072a576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006100d260208301846106f2565b6000806020838503121561078357600080fd5b823567ffffffffffffffff8082111561079b57600080fd5b818501915085601f8301126107af57600080fd5b8135818111156107be57600080fd5b8660208260051b85010111156107d357600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610858577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526108468583516106f2565b9450928501929085019060010161080c565b5092979650505050505050565b60006020828403121561087757600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146100d257600080fd5b600080602083850312156108ae57600080fd5b823567ffffffffffffffff808211156108c657600080fd5b818501915085601f8301126108da57600080fd5b8135818111156108e957600080fd5b8660208285010111156107d357600080fd5b8183823760009101908152919050565b600181811c9082168061091f57607f821691505b60208210811415610959577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610a16577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b506001019056fea2646970667358221220dfecfe3bdd3843096920a178149e209e363ea18cae357d5d6c782b41ba81813f64736f6c634300080b0033",
>>>>>>> Stashed changes
}

// ValidatorLocationsFacetABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorLocationsFacetMetaData.ABI instead.
var ValidatorLocationsFacetABI = ValidatorLocationsFacetMetaData.ABI

// ValidatorLocationsFacetBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ValidatorLocationsFacetMetaData.Bin instead.
var ValidatorLocationsFacetBin = ValidatorLocationsFacetMetaData.Bin

// DeployValidatorLocationsFacet deploys a new Ethereum contract, binding an instance of ValidatorLocationsFacet to it.
func DeployValidatorLocationsFacet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ValidatorLocationsFacet, error) {
	parsed, err := ValidatorLocationsFacetMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ValidatorLocationsFacetBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ValidatorLocationsFacet{ValidatorLocationsFacetCaller: ValidatorLocationsFacetCaller{contract: contract}, ValidatorLocationsFacetTransactor: ValidatorLocationsFacetTransactor{contract: contract}, ValidatorLocationsFacetFilterer: ValidatorLocationsFacetFilterer{contract: contract}}, nil
}

// ValidatorLocationsFacet is an auto generated Go binding around an Ethereum contract.
type ValidatorLocationsFacet struct {
	ValidatorLocationsFacetCaller     // Read-only binding to the contract
	ValidatorLocationsFacetTransactor // Write-only binding to the contract
	ValidatorLocationsFacetFilterer   // Log filterer for contract events
}

// ValidatorLocationsFacetCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorLocationsFacetCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorLocationsFacetTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorLocationsFacetTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorLocationsFacetFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorLocationsFacetFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorLocationsFacetSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorLocationsFacetSession struct {
	Contract     *ValidatorLocationsFacet // Generic contract binding to set the session for
	CallOpts     bind.CallOpts            // Call options to use throughout this session
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// ValidatorLocationsFacetCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorLocationsFacetCallerSession struct {
	Contract *ValidatorLocationsFacetCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                  // Call options to use throughout this session
}

// ValidatorLocationsFacetTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorLocationsFacetTransactorSession struct {
	Contract     *ValidatorLocationsFacetTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                  // Transaction auth options to use throughout this session
}

// ValidatorLocationsFacetRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorLocationsFacetRaw struct {
	Contract *ValidatorLocationsFacet // Generic contract binding to access the raw methods on
}

// ValidatorLocationsFacetCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorLocationsFacetCallerRaw struct {
	Contract *ValidatorLocationsFacetCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorLocationsFacetTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorLocationsFacetTransactorRaw struct {
	Contract *ValidatorLocationsFacetTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorLocationsFacet creates a new instance of ValidatorLocationsFacet, bound to a specific deployed contract.
func NewValidatorLocationsFacet(address common.Address, backend bind.ContractBackend) (*ValidatorLocationsFacet, error) {
	contract, err := bindValidatorLocationsFacet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsFacet{ValidatorLocationsFacetCaller: ValidatorLocationsFacetCaller{contract: contract}, ValidatorLocationsFacetTransactor: ValidatorLocationsFacetTransactor{contract: contract}, ValidatorLocationsFacetFilterer: ValidatorLocationsFacetFilterer{contract: contract}}, nil
}

// NewValidatorLocationsFacetCaller creates a new read-only instance of ValidatorLocationsFacet, bound to a specific deployed contract.
func NewValidatorLocationsFacetCaller(address common.Address, caller bind.ContractCaller) (*ValidatorLocationsFacetCaller, error) {
	contract, err := bindValidatorLocationsFacet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsFacetCaller{contract: contract}, nil
}

// NewValidatorLocationsFacetTransactor creates a new write-only instance of ValidatorLocationsFacet, bound to a specific deployed contract.
func NewValidatorLocationsFacetTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorLocationsFacetTransactor, error) {
	contract, err := bindValidatorLocationsFacet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsFacetTransactor{contract: contract}, nil
}

// NewValidatorLocationsFacetFilterer creates a new log filterer instance of ValidatorLocationsFacet, bound to a specific deployed contract.
func NewValidatorLocationsFacetFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorLocationsFacetFilterer, error) {
	contract, err := bindValidatorLocationsFacet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsFacetFilterer{contract: contract}, nil
}

// bindValidatorLocationsFacet binds a generic wrapper to an already deployed contract.
func bindValidatorLocationsFacet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorLocationsFacetABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorLocationsFacet *ValidatorLocationsFacetRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorLocationsFacet.Contract.ValidatorLocationsFacetCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorLocationsFacet *ValidatorLocationsFacetRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorLocationsFacet.Contract.ValidatorLocationsFacetTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorLocationsFacet *ValidatorLocationsFacetRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorLocationsFacet.Contract.ValidatorLocationsFacetTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorLocationsFacet *ValidatorLocationsFacetCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorLocationsFacet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorLocationsFacet *ValidatorLocationsFacetTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorLocationsFacet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorLocationsFacet *ValidatorLocationsFacetTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorLocationsFacet.Contract.contract.Transact(opts, method, params...)
}

// GetLocation is a free data retrieval call binding the contract method 0xd9e0dc59.
//
// Solidity: function getLocation(address a) view returns(string)
func (_ValidatorLocationsFacet *ValidatorLocationsFacetCaller) GetLocation(opts *bind.CallOpts, a common.Address) (string, error) {
	var out []interface{}
	err := _ValidatorLocationsFacet.contract.Call(opts, &out, "getLocation", a)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetLocation is a free data retrieval call binding the contract method 0xd9e0dc59.
//
// Solidity: function getLocation(address a) view returns(string)
func (_ValidatorLocationsFacet *ValidatorLocationsFacetSession) GetLocation(a common.Address) (string, error) {
	return _ValidatorLocationsFacet.Contract.GetLocation(&_ValidatorLocationsFacet.CallOpts, a)
}

// GetLocation is a free data retrieval call binding the contract method 0xd9e0dc59.
//
// Solidity: function getLocation(address a) view returns(string)
func (_ValidatorLocationsFacet *ValidatorLocationsFacetCallerSession) GetLocation(a common.Address) (string, error) {
	return _ValidatorLocationsFacet.Contract.GetLocation(&_ValidatorLocationsFacet.CallOpts, a)
}

// GetLocations is a free data retrieval call binding the contract method 0x76207f9c.
//
// Solidity: function getLocations(address[] a) view returns(string[])
func (_ValidatorLocationsFacet *ValidatorLocationsFacetCaller) GetLocations(opts *bind.CallOpts, a []common.Address) ([]string, error) {
	var out []interface{}
	err := _ValidatorLocationsFacet.contract.Call(opts, &out, "getLocations", a)

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// GetLocations is a free data retrieval call binding the contract method 0x76207f9c.
//
// Solidity: function getLocations(address[] a) view returns(string[])
func (_ValidatorLocationsFacet *ValidatorLocationsFacetSession) GetLocations(a []common.Address) ([]string, error) {
	return _ValidatorLocationsFacet.Contract.GetLocations(&_ValidatorLocationsFacet.CallOpts, a)
}

// GetLocations is a free data retrieval call binding the contract method 0x76207f9c.
//
// Solidity: function getLocations(address[] a) view returns(string[])
func (_ValidatorLocationsFacet *ValidatorLocationsFacetCallerSession) GetLocations(a []common.Address) ([]string, error) {
	return _ValidatorLocationsFacet.Contract.GetLocations(&_ValidatorLocationsFacet.CallOpts, a)
}

// GetMyLocation is a free data retrieval call binding the contract method 0x59a8b416.
//
// Solidity: function getMyLocation() view returns(string)
func (_ValidatorLocationsFacet *ValidatorLocationsFacetCaller) GetMyLocation(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ValidatorLocationsFacet.contract.Call(opts, &out, "getMyLocation")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetMyLocation is a free data retrieval call binding the contract method 0x59a8b416.
//
// Solidity: function getMyLocation() view returns(string)
func (_ValidatorLocationsFacet *ValidatorLocationsFacetSession) GetMyLocation() (string, error) {
	return _ValidatorLocationsFacet.Contract.GetMyLocation(&_ValidatorLocationsFacet.CallOpts)
}

// GetMyLocation is a free data retrieval call binding the contract method 0x59a8b416.
//
// Solidity: function getMyLocation() view returns(string)
func (_ValidatorLocationsFacet *ValidatorLocationsFacetCallerSession) GetMyLocation() (string, error) {
	return _ValidatorLocationsFacet.Contract.GetMyLocation(&_ValidatorLocationsFacet.CallOpts)
}

// SetMyLocation is a paid mutator transaction binding the contract method 0xed7a558c.
//
// Solidity: function setMyLocation(string ip) returns()
func (_ValidatorLocationsFacet *ValidatorLocationsFacetTransactor) SetMyLocation(opts *bind.TransactOpts, ip string) (*types.Transaction, error) {
	return _ValidatorLocationsFacet.contract.Transact(opts, "setMyLocation", ip)
}

// SetMyLocation is a paid mutator transaction binding the contract method 0xed7a558c.
//
// Solidity: function setMyLocation(string ip) returns()
func (_ValidatorLocationsFacet *ValidatorLocationsFacetSession) SetMyLocation(ip string) (*types.Transaction, error) {
	return _ValidatorLocationsFacet.Contract.SetMyLocation(&_ValidatorLocationsFacet.TransactOpts, ip)
}

// SetMyLocation is a paid mutator transaction binding the contract method 0xed7a558c.
//
// Solidity: function setMyLocation(string ip) returns()
func (_ValidatorLocationsFacet *ValidatorLocationsFacetTransactorSession) SetMyLocation(ip string) (*types.Transaction, error) {
	return _ValidatorLocationsFacet.Contract.SetMyLocation(&_ValidatorLocationsFacet.TransactOpts, ip)
}

// ValidatorLocationsFacetMyLocationIterator is returned from FilterMyLocation and is used to iterate over the raw logs and unpacked data for MyLocation events raised by the ValidatorLocationsFacet contract.
type ValidatorLocationsFacetMyLocationIterator struct {
	Event *ValidatorLocationsFacetMyLocation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorLocationsFacetMyLocationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorLocationsFacetMyLocation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorLocationsFacetMyLocation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorLocationsFacetMyLocationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorLocationsFacetMyLocationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorLocationsFacetMyLocation represents a MyLocation event raised by the ValidatorLocationsFacet contract.
type ValidatorLocationsFacetMyLocation struct {
	Ip  common.Hash
	Raw types.Log // Blockchain specific contextual infos
}

// FilterMyLocation is a free log retrieval operation binding the contract event 0x94f42dfacdc77a25a5e03baf01c6438d29ae4923eed7742bb1269da152e2470d.
//
// Solidity: event MyLocation(string indexed ip)
func (_ValidatorLocationsFacet *ValidatorLocationsFacetFilterer) FilterMyLocation(opts *bind.FilterOpts, ip []string) (*ValidatorLocationsFacetMyLocationIterator, error) {

	var ipRule []interface{}
	for _, ipItem := range ip {
		ipRule = append(ipRule, ipItem)
	}

	logs, sub, err := _ValidatorLocationsFacet.contract.FilterLogs(opts, "MyLocation", ipRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsFacetMyLocationIterator{contract: _ValidatorLocationsFacet.contract, event: "MyLocation", logs: logs, sub: sub}, nil
}

// WatchMyLocation is a free log subscription operation binding the contract event 0x94f42dfacdc77a25a5e03baf01c6438d29ae4923eed7742bb1269da152e2470d.
//
// Solidity: event MyLocation(string indexed ip)
func (_ValidatorLocationsFacet *ValidatorLocationsFacetFilterer) WatchMyLocation(opts *bind.WatchOpts, sink chan<- *ValidatorLocationsFacetMyLocation, ip []string) (event.Subscription, error) {

	var ipRule []interface{}
	for _, ipItem := range ip {
		ipRule = append(ipRule, ipItem)
	}

	logs, sub, err := _ValidatorLocationsFacet.contract.WatchLogs(opts, "MyLocation", ipRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorLocationsFacetMyLocation)
				if err := _ValidatorLocationsFacet.contract.UnpackLog(event, "MyLocation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMyLocation is a log parse operation binding the contract event 0x94f42dfacdc77a25a5e03baf01c6438d29ae4923eed7742bb1269da152e2470d.
//
// Solidity: event MyLocation(string indexed ip)
func (_ValidatorLocationsFacet *ValidatorLocationsFacetFilterer) ParseMyLocation(log types.Log) (*ValidatorLocationsFacetMyLocation, error) {
	event := new(ValidatorLocationsFacetMyLocation)
	if err := _ValidatorLocationsFacet.contract.UnpackLog(event, "MyLocation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorLocationsLibraryMetaData contains all meta data concerning the ValidatorLocationsLibrary contract.
var ValidatorLocationsLibraryMetaData = &bind.MetaData{
	ABI: "[]",
<<<<<<< Updated upstream
	Bin: "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201f06eade27e9884ccfb7b078c57095b09db55e46a23bd4395fdc12ae2654d7b564736f6c634300080b0033",
=======
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c5ad4b3a6624149170d83e106499c188a4838de44da8a67581aa06e4b6d980e964736f6c634300080b0033",
>>>>>>> Stashed changes
}

// ValidatorLocationsLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorLocationsLibraryMetaData.ABI instead.
var ValidatorLocationsLibraryABI = ValidatorLocationsLibraryMetaData.ABI

// ValidatorLocationsLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ValidatorLocationsLibraryMetaData.Bin instead.
var ValidatorLocationsLibraryBin = ValidatorLocationsLibraryMetaData.Bin

// DeployValidatorLocationsLibrary deploys a new Ethereum contract, binding an instance of ValidatorLocationsLibrary to it.
func DeployValidatorLocationsLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ValidatorLocationsLibrary, error) {
	parsed, err := ValidatorLocationsLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ValidatorLocationsLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ValidatorLocationsLibrary{ValidatorLocationsLibraryCaller: ValidatorLocationsLibraryCaller{contract: contract}, ValidatorLocationsLibraryTransactor: ValidatorLocationsLibraryTransactor{contract: contract}, ValidatorLocationsLibraryFilterer: ValidatorLocationsLibraryFilterer{contract: contract}}, nil
}

// ValidatorLocationsLibrary is an auto generated Go binding around an Ethereum contract.
type ValidatorLocationsLibrary struct {
	ValidatorLocationsLibraryCaller     // Read-only binding to the contract
	ValidatorLocationsLibraryTransactor // Write-only binding to the contract
	ValidatorLocationsLibraryFilterer   // Log filterer for contract events
}

// ValidatorLocationsLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorLocationsLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorLocationsLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorLocationsLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorLocationsLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorLocationsLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorLocationsLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorLocationsLibrarySession struct {
	Contract     *ValidatorLocationsLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts              // Call options to use throughout this session
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// ValidatorLocationsLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorLocationsLibraryCallerSession struct {
	Contract *ValidatorLocationsLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                    // Call options to use throughout this session
}

// ValidatorLocationsLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorLocationsLibraryTransactorSession struct {
	Contract     *ValidatorLocationsLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                    // Transaction auth options to use throughout this session
}

// ValidatorLocationsLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorLocationsLibraryRaw struct {
	Contract *ValidatorLocationsLibrary // Generic contract binding to access the raw methods on
}

// ValidatorLocationsLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorLocationsLibraryCallerRaw struct {
	Contract *ValidatorLocationsLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorLocationsLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorLocationsLibraryTransactorRaw struct {
	Contract *ValidatorLocationsLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorLocationsLibrary creates a new instance of ValidatorLocationsLibrary, bound to a specific deployed contract.
func NewValidatorLocationsLibrary(address common.Address, backend bind.ContractBackend) (*ValidatorLocationsLibrary, error) {
	contract, err := bindValidatorLocationsLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsLibrary{ValidatorLocationsLibraryCaller: ValidatorLocationsLibraryCaller{contract: contract}, ValidatorLocationsLibraryTransactor: ValidatorLocationsLibraryTransactor{contract: contract}, ValidatorLocationsLibraryFilterer: ValidatorLocationsLibraryFilterer{contract: contract}}, nil
}

// NewValidatorLocationsLibraryCaller creates a new read-only instance of ValidatorLocationsLibrary, bound to a specific deployed contract.
func NewValidatorLocationsLibraryCaller(address common.Address, caller bind.ContractCaller) (*ValidatorLocationsLibraryCaller, error) {
	contract, err := bindValidatorLocationsLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsLibraryCaller{contract: contract}, nil
}

// NewValidatorLocationsLibraryTransactor creates a new write-only instance of ValidatorLocationsLibrary, bound to a specific deployed contract.
func NewValidatorLocationsLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorLocationsLibraryTransactor, error) {
	contract, err := bindValidatorLocationsLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsLibraryTransactor{contract: contract}, nil
}

// NewValidatorLocationsLibraryFilterer creates a new log filterer instance of ValidatorLocationsLibrary, bound to a specific deployed contract.
func NewValidatorLocationsLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorLocationsLibraryFilterer, error) {
	contract, err := bindValidatorLocationsLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorLocationsLibraryFilterer{contract: contract}, nil
}

// bindValidatorLocationsLibrary binds a generic wrapper to an already deployed contract.
func bindValidatorLocationsLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorLocationsLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorLocationsLibrary *ValidatorLocationsLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorLocationsLibrary.Contract.ValidatorLocationsLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorLocationsLibrary *ValidatorLocationsLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorLocationsLibrary.Contract.ValidatorLocationsLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorLocationsLibrary *ValidatorLocationsLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorLocationsLibrary.Contract.ValidatorLocationsLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorLocationsLibrary *ValidatorLocationsLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorLocationsLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorLocationsLibrary *ValidatorLocationsLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorLocationsLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorLocationsLibrary *ValidatorLocationsLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorLocationsLibrary.Contract.contract.Transact(opts, method, params...)
}

<<<<<<< Updated upstream
// ValidatorPoolMockMetaData contains all meta data concerning the ValidatorPoolMock contract.
var ValidatorPoolMockMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"hook\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"v\",\"type\":\"address\"}],\"name\":\"addValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getValidator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidatorsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeETHDKG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"majorSlash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"minorSlash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeAllValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"removeValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ethdkg\",\"type\":\"address\"}],\"name\":\"setETHDKG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6080604052600080553480156200001557600080fd5b506040516200113f3803806200113f83398181016040528101906200003b9190620001e6565b600080819055505062000237565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620000b28262000067565b810181811067ffffffffffffffff82111715620000d457620000d362000078565b5b80604052505050565b6000620000e962000049565b9050620000f78282620000a7565b919050565b600067ffffffffffffffff8211156200011a576200011962000078565b5b620001258262000067565b9050602081019050919050565b60005b838110156200015257808201518184015260208101905062000135565b8381111562000162576000848401525b50505050565b60006200017f6200017984620000fc565b620000dd565b9050828152602081018484840111156200019e576200019d62000062565b5b620001ab84828562000132565b509392505050565b600082601f830112620001cb57620001ca6200005d565b5b8151620001dd84826020860162000168565b91505092915050565b600060208284031215620001ff57620001fe62000053565b5b600082015167ffffffffffffffff81111562000220576200021f62000058565b5b6200022e84828501620001b3565b91505092915050565b610ef880620002476000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c80638785a46011610076578063a74a97b11161005b578063a74a97b114610177578063b5d8962714610181578063facd743b146101b1576100be565b80638785a4601461013f578063a19ebb211461015b576100be565b806340a141ff116100a757806340a141ff146100fd5780634d238c8e1461011957806357b51c9c14610135576100be565b8063150ef01b146100c357806327498240146100df575b600080fd5b6100dd60048036038101906100d89190610ba8565b6101e1565b005b6100e76101ed565b6040516100f49190610bee565b60405180910390f35b61011760048036038101906101129190610ba8565b6101fa565b005b610133600480360381019061012e9190610ba8565b610206565b005b61013d610391565b005b61015960048036038101906101549190610ba8565b610415565b005b61017560048036038101906101709190610ba8565b610459565b005b61017f610465565b005b61019b60048036038101906101969190610c35565b610599565b6040516101a89190610c71565b60405180910390f35b6101cb60048036038101906101c69190610ba8565b610628565b6040516101d89190610ca7565b60405180910390f35b6101ea8161063a565b50565b6000600280549050905090565b6102038161063a565b50565b600060016000546102179190610cf1565b90506002829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604051806040016040528060016002805490506102999190610d47565b6fffffffffffffffffffffffffffffffff168152602001826fffffffffffffffffffffffffffffffff16815250600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060208201518160000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550905050806000819055505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166357b51c9c6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156103fb57600080fd5b505af115801561040f573d6000803e3d6000fd5b50505050565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6104628161063a565b50565b5b6000600280549050111561059757600360006002600160028054905061048c9190610d47565b8154811061049d5761049c610d7b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160006101000a8154906fffffffffffffffffffffffffffffffff02191690556000820160106101000a8154906fffffffffffffffffffffffffffffffff02191690555050600280548061055d5761055c610daa565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055610466565b565b600060028054905082106105e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d990610e36565b60405180910390fd5b600282815481106105f6576105f5610d7b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006106338261098e565b9050919050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060400160405290816000820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016000820160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815250509050600081602001516fffffffffffffffffffffffffffffffff161415610776576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076d90610ea2565b60405180910390fd5b60006002600160028054905061078c9190610d47565b8154811061079d5761079c610d7b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600283600001516fffffffffffffffffffffffffffffffff16815481106107f5576107f4610d7b565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160000151600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060028054806108cc576108cb610daa565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160006101000a8154906fffffffffffffffffffffffffffffffff02191690556000820160106101000a8154906fffffffffffffffffffffffffffffffff02191690555050505050565b600080600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060400160405290816000820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016000820160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815250509050600081602001516fffffffffffffffffffffffffffffffff1614158015610ab2575060028054905081600001516fffffffffffffffffffffffffffffffff16105b8015610b3d57508273ffffffffffffffffffffffffffffffffffffffff16600282600001516fffffffffffffffffffffffffffffffff1681548110610afa57610af9610d7b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b915050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b7582610b4a565b9050919050565b610b8581610b6a565b8114610b9057600080fd5b50565b600081359050610ba281610b7c565b92915050565b600060208284031215610bbe57610bbd610b45565b5b6000610bcc84828501610b93565b91505092915050565b6000819050919050565b610be881610bd5565b82525050565b6000602082019050610c036000830184610bdf565b92915050565b610c1281610bd5565b8114610c1d57600080fd5b50565b600081359050610c2f81610c09565b92915050565b600060208284031215610c4b57610c4a610b45565b5b6000610c5984828501610c20565b91505092915050565b610c6b81610b6a565b82525050565b6000602082019050610c866000830184610c62565b92915050565b60008115159050919050565b610ca181610c8c565b82525050565b6000602082019050610cbc6000830184610c98565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cfc82610bd5565b9150610d0783610bd5565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d3c57610d3b610cc2565b5b828201905092915050565b6000610d5282610bd5565b9150610d5d83610bd5565b925082821015610d7057610d6f610cc2565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600082825260208201905092915050565b7f496e646578206f757420626f756e646172696573210000000000000000000000600082015250565b6000610e20601583610dd9565b9150610e2b82610dea565b602082019050919050565b60006020820190508181036000830152610e4f81610e13565b9050919050565b7f56616c696461746f72506f6f6c3a20696e76616c69642076616c696461746f72600082015250565b6000610e8c602083610dd9565b9150610e9782610e56565b602082019050919050565b60006020820190508181036000830152610ebb81610e7f565b905091905056fea2646970667358221220a6f3422d697fb28ab009797fa5a3b37d766931e7846f63f9284e30c4a82d5eeb64736f6c634300080b0033",
}

// ValidatorPoolMockABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorPoolMockMetaData.ABI instead.
var ValidatorPoolMockABI = ValidatorPoolMockMetaData.ABI

// ValidatorPoolMockBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ValidatorPoolMockMetaData.Bin instead.
var ValidatorPoolMockBin = ValidatorPoolMockMetaData.Bin

// DeployValidatorPoolMock deploys a new Ethereum contract, binding an instance of ValidatorPoolMock to it.
func DeployValidatorPoolMock(auth *bind.TransactOpts, backend bind.ContractBackend, hook []byte) (common.Address, *types.Transaction, *ValidatorPoolMock, error) {
	parsed, err := ValidatorPoolMockMetaData.GetAbi()
=======
// ValidatorPoolMetaData contains all meta data concerning the ValidatorPool contract.
var ValidatorPoolMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"hook\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"v\",\"type\":\"address\"}],\"name\":\"addValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getValidator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidatorsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeETHDKG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"majorSlash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"minorSlash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeAllValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"removeValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ethdkg\",\"type\":\"address\"}],\"name\":\"setETHDKG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040526000805534801561001457600080fd5b50604051610ac4380380610ac483398101604081905261003391610053565b5060008055610122565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561006657600080fd5b82516001600160401b038082111561007d57600080fd5b818501915085601f83011261009157600080fd5b8151818111156100a3576100a361003d565b604051601f8201601f19908116603f011681019083821181831017156100cb576100cb61003d565b8160405282815288868487010111156100e357600080fd5b600093505b8284101561010557848401860151818501870152928501926100e8565b828411156101165760008684830101525b98975050505050505050565b610993806101316000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c80638785a46011610076578063a74a97b11161005b578063a74a97b11461015e578063b5d8962714610166578063facd743b1461019e57600080fd5b80638785a46014610109578063a19ebb21146100c357600080fd5b806340a141ff116100a757806340a141ff146100c35780634d238c8e146100ee57806357b51c9c1461010157600080fd5b8063150ef01b146100c357806327498240146100d8575b600080fd5b6100d66100d1366004610852565b6101c1565b005b6002546040519081526020015b60405180910390f35b6100d66100fc366004610852565b6101cd565b6100d66102d8565b6100d6610117366004610852565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6100d661035c565b610179610174366004610888565b61042c565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100e5565b6101b16101ac366004610852565b6104da565b60405190151581526020016100e5565b6101ca816104eb565b50565b600080546101dc9060016108d0565b600280546001808201835560008390527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff87161790556040805180820190915291549293509091829161026a916108e8565b6fffffffffffffffffffffffffffffffff908116825283811660209283015273ffffffffffffffffffffffffffffffffffffffff9094166000908152600382526040812083519390920151851670010000000000000000000000000000000002929094169190911790559055565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166357b51c9c6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561034257600080fd5b505af1158015610356573d6000803e3d6000fd5b50505050565b6002541561042a576002805460039160009161037a906001906108e8565b8154811061038a5761038a6108ff565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16835282019290925260400181205560028054806103cd576103cd61092e565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905501905561035c565b565b600254600090821061049f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f496e646578206f757420626f756e64617269657321000000000000000000000060448201526064015b60405180910390fd5b600282815481106104b2576104b26108ff565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1692915050565b60006104e58261075a565b92915050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600360209081526040918290208251808401909352546fffffffffffffffffffffffffffffffff8082168452700100000000000000000000000000000000909104169082018190526105b5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f56616c696461746f72506f6f6c3a20696e76616c69642076616c696461746f726044820152606401610496565b60028054600091906105c9906001906108e8565b815481106105d9576105d96108ff565b60009182526020909120015482516002805473ffffffffffffffffffffffffffffffffffffffff9093169350839290916fffffffffffffffffffffffffffffffff1690811061062a5761062a6108ff565b600091825260208083209190910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff94851617905584519284168252600390526040902080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff90921691909117905560028054806106d5576106d561092e565b6000828152602080822083017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905590920190925573ffffffffffffffffffffffffffffffffffffffff949094168152600390935250506040812055565b73ffffffffffffffffffffffffffffffffffffffff811660009081526003602090815260408083208151808301909252546fffffffffffffffffffffffffffffffff80821683527001000000000000000000000000000000009091041691810182905290158015906107e0575060025481516fffffffffffffffffffffffffffffffff16105b801561084b57508273ffffffffffffffffffffffffffffffffffffffff16600282600001516fffffffffffffffffffffffffffffffff1681548110610827576108276108ff565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16145b9392505050565b60006020828403121561086457600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461084b57600080fd5b60006020828403121561089a57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082198211156108e3576108e36108a1565b500190565b6000828210156108fa576108fa6108a1565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220df5f9d804ff718177866360e17fb0d7a0178a40702f83449c64f3aeb88dc245b64736f6c634300080b0033",
}

// ValidatorPoolABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorPoolMetaData.ABI instead.
var ValidatorPoolABI = ValidatorPoolMetaData.ABI

// ValidatorPoolBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ValidatorPoolMetaData.Bin instead.
var ValidatorPoolBin = ValidatorPoolMetaData.Bin

// DeployValidatorPool deploys a new Ethereum contract, binding an instance of ValidatorPool to it.
func DeployValidatorPool(auth *bind.TransactOpts, backend bind.ContractBackend, hook []byte) (common.Address, *types.Transaction, *ValidatorPool, error) {
	parsed, err := ValidatorPoolMetaData.GetAbi()
>>>>>>> Stashed changes
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

<<<<<<< Updated upstream
	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ValidatorPoolMockBin), backend, hook)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ValidatorPoolMock{ValidatorPoolMockCaller: ValidatorPoolMockCaller{contract: contract}, ValidatorPoolMockTransactor: ValidatorPoolMockTransactor{contract: contract}, ValidatorPoolMockFilterer: ValidatorPoolMockFilterer{contract: contract}}, nil
}

// ValidatorPoolMock is an auto generated Go binding around an Ethereum contract.
type ValidatorPoolMock struct {
	ValidatorPoolMockCaller     // Read-only binding to the contract
	ValidatorPoolMockTransactor // Write-only binding to the contract
	ValidatorPoolMockFilterer   // Log filterer for contract events
}

// ValidatorPoolMockCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorPoolMockCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorPoolMockTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorPoolMockTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorPoolMockFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorPoolMockFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorPoolMockSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorPoolMockSession struct {
	Contract     *ValidatorPoolMock // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// ValidatorPoolMockCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorPoolMockCallerSession struct {
	Contract *ValidatorPoolMockCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// ValidatorPoolMockTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorPoolMockTransactorSession struct {
	Contract     *ValidatorPoolMockTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// ValidatorPoolMockRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorPoolMockRaw struct {
	Contract *ValidatorPoolMock // Generic contract binding to access the raw methods on
}

// ValidatorPoolMockCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorPoolMockCallerRaw struct {
	Contract *ValidatorPoolMockCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorPoolMockTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorPoolMockTransactorRaw struct {
	Contract *ValidatorPoolMockTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorPoolMock creates a new instance of ValidatorPoolMock, bound to a specific deployed contract.
func NewValidatorPoolMock(address common.Address, backend bind.ContractBackend) (*ValidatorPoolMock, error) {
	contract, err := bindValidatorPoolMock(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorPoolMock{ValidatorPoolMockCaller: ValidatorPoolMockCaller{contract: contract}, ValidatorPoolMockTransactor: ValidatorPoolMockTransactor{contract: contract}, ValidatorPoolMockFilterer: ValidatorPoolMockFilterer{contract: contract}}, nil
}

// NewValidatorPoolMockCaller creates a new read-only instance of ValidatorPoolMock, bound to a specific deployed contract.
func NewValidatorPoolMockCaller(address common.Address, caller bind.ContractCaller) (*ValidatorPoolMockCaller, error) {
	contract, err := bindValidatorPoolMock(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorPoolMockCaller{contract: contract}, nil
}

// NewValidatorPoolMockTransactor creates a new write-only instance of ValidatorPoolMock, bound to a specific deployed contract.
func NewValidatorPoolMockTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorPoolMockTransactor, error) {
	contract, err := bindValidatorPoolMock(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorPoolMockTransactor{contract: contract}, nil
}

// NewValidatorPoolMockFilterer creates a new log filterer instance of ValidatorPoolMock, bound to a specific deployed contract.
func NewValidatorPoolMockFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorPoolMockFilterer, error) {
	contract, err := bindValidatorPoolMock(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorPoolMockFilterer{contract: contract}, nil
}

// bindValidatorPoolMock binds a generic wrapper to an already deployed contract.
func bindValidatorPoolMock(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorPoolMockABI))
=======
	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ValidatorPoolBin), backend, hook)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ValidatorPool{ValidatorPoolCaller: ValidatorPoolCaller{contract: contract}, ValidatorPoolTransactor: ValidatorPoolTransactor{contract: contract}, ValidatorPoolFilterer: ValidatorPoolFilterer{contract: contract}}, nil
}

// ValidatorPool is an auto generated Go binding around an Ethereum contract.
type ValidatorPool struct {
	ValidatorPoolCaller     // Read-only binding to the contract
	ValidatorPoolTransactor // Write-only binding to the contract
	ValidatorPoolFilterer   // Log filterer for contract events
}

// ValidatorPoolCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorPoolCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorPoolTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorPoolTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorPoolFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorPoolFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorPoolSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorPoolSession struct {
	Contract     *ValidatorPool    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ValidatorPoolCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorPoolCallerSession struct {
	Contract *ValidatorPoolCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// ValidatorPoolTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorPoolTransactorSession struct {
	Contract     *ValidatorPoolTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// ValidatorPoolRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorPoolRaw struct {
	Contract *ValidatorPool // Generic contract binding to access the raw methods on
}

// ValidatorPoolCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorPoolCallerRaw struct {
	Contract *ValidatorPoolCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorPoolTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorPoolTransactorRaw struct {
	Contract *ValidatorPoolTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorPool creates a new instance of ValidatorPool, bound to a specific deployed contract.
func NewValidatorPool(address common.Address, backend bind.ContractBackend) (*ValidatorPool, error) {
	contract, err := bindValidatorPool(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorPool{ValidatorPoolCaller: ValidatorPoolCaller{contract: contract}, ValidatorPoolTransactor: ValidatorPoolTransactor{contract: contract}, ValidatorPoolFilterer: ValidatorPoolFilterer{contract: contract}}, nil
}

// NewValidatorPoolCaller creates a new read-only instance of ValidatorPool, bound to a specific deployed contract.
func NewValidatorPoolCaller(address common.Address, caller bind.ContractCaller) (*ValidatorPoolCaller, error) {
	contract, err := bindValidatorPool(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorPoolCaller{contract: contract}, nil
}

// NewValidatorPoolTransactor creates a new write-only instance of ValidatorPool, bound to a specific deployed contract.
func NewValidatorPoolTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorPoolTransactor, error) {
	contract, err := bindValidatorPool(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorPoolTransactor{contract: contract}, nil
}

// NewValidatorPoolFilterer creates a new log filterer instance of ValidatorPool, bound to a specific deployed contract.
func NewValidatorPoolFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorPoolFilterer, error) {
	contract, err := bindValidatorPool(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorPoolFilterer{contract: contract}, nil
}

// bindValidatorPool binds a generic wrapper to an already deployed contract.
func bindValidatorPool(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorPoolABI))
>>>>>>> Stashed changes
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
<<<<<<< Updated upstream
func (_ValidatorPoolMock *ValidatorPoolMockRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorPoolMock.Contract.ValidatorPoolMockCaller.contract.Call(opts, result, method, params...)
=======
func (_ValidatorPool *ValidatorPoolRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorPool.Contract.ValidatorPoolCaller.contract.Call(opts, result, method, params...)
>>>>>>> Stashed changes
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
<<<<<<< Updated upstream
func (_ValidatorPoolMock *ValidatorPoolMockRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorPoolMock.Contract.ValidatorPoolMockTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorPoolMock *ValidatorPoolMockRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorPoolMock.Contract.ValidatorPoolMockTransactor.contract.Transact(opts, method, params...)
=======
func (_ValidatorPool *ValidatorPoolRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorPool.Contract.ValidatorPoolTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorPool *ValidatorPoolRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorPool.Contract.ValidatorPoolTransactor.contract.Transact(opts, method, params...)
>>>>>>> Stashed changes
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
<<<<<<< Updated upstream
func (_ValidatorPoolMock *ValidatorPoolMockCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorPoolMock.Contract.contract.Call(opts, result, method, params...)
=======
func (_ValidatorPool *ValidatorPoolCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorPool.Contract.contract.Call(opts, result, method, params...)
>>>>>>> Stashed changes
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
<<<<<<< Updated upstream
func (_ValidatorPoolMock *ValidatorPoolMockTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorPoolMock.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorPoolMock *ValidatorPoolMockTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorPoolMock.Contract.contract.Transact(opts, method, params...)
=======
func (_ValidatorPool *ValidatorPoolTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorPool.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorPool *ValidatorPoolTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorPool.Contract.contract.Transact(opts, method, params...)
>>>>>>> Stashed changes
}

// GetValidator is a free data retrieval call binding the contract method 0xb5d89627.
//
// Solidity: function getValidator(uint256 index) view returns(address)
<<<<<<< Updated upstream
func (_ValidatorPoolMock *ValidatorPoolMockCaller) GetValidator(opts *bind.CallOpts, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ValidatorPoolMock.contract.Call(opts, &out, "getValidator", index)
=======
func (_ValidatorPool *ValidatorPoolCaller) GetValidator(opts *bind.CallOpts, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ValidatorPool.contract.Call(opts, &out, "getValidator", index)
>>>>>>> Stashed changes

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetValidator is a free data retrieval call binding the contract method 0xb5d89627.
//
// Solidity: function getValidator(uint256 index) view returns(address)
<<<<<<< Updated upstream
func (_ValidatorPoolMock *ValidatorPoolMockSession) GetValidator(index *big.Int) (common.Address, error) {
	return _ValidatorPoolMock.Contract.GetValidator(&_ValidatorPoolMock.CallOpts, index)
=======
func (_ValidatorPool *ValidatorPoolSession) GetValidator(index *big.Int) (common.Address, error) {
	return _ValidatorPool.Contract.GetValidator(&_ValidatorPool.CallOpts, index)
>>>>>>> Stashed changes
}

// GetValidator is a free data retrieval call binding the contract method 0xb5d89627.
//
// Solidity: function getValidator(uint256 index) view returns(address)
<<<<<<< Updated upstream
func (_ValidatorPoolMock *ValidatorPoolMockCallerSession) GetValidator(index *big.Int) (common.Address, error) {
	return _ValidatorPoolMock.Contract.GetValidator(&_ValidatorPoolMock.CallOpts, index)
=======
func (_ValidatorPool *ValidatorPoolCallerSession) GetValidator(index *big.Int) (common.Address, error) {
	return _ValidatorPool.Contract.GetValidator(&_ValidatorPool.CallOpts, index)
>>>>>>> Stashed changes
}

// GetValidatorsCount is a free data retrieval call binding the contract method 0x27498240.
//
// Solidity: function getValidatorsCount() view returns(uint256)
<<<<<<< Updated upstream
func (_ValidatorPoolMock *ValidatorPoolMockCaller) GetValidatorsCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorPoolMock.contract.Call(opts, &out, "getValidatorsCount")
=======
func (_ValidatorPool *ValidatorPoolCaller) GetValidatorsCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorPool.contract.Call(opts, &out, "getValidatorsCount")
>>>>>>> Stashed changes

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetValidatorsCount is a free data retrieval call binding the contract method 0x27498240.
//
// Solidity: function getValidatorsCount() view returns(uint256)
<<<<<<< Updated upstream
func (_ValidatorPoolMock *ValidatorPoolMockSession) GetValidatorsCount() (*big.Int, error) {
	return _ValidatorPoolMock.Contract.GetValidatorsCount(&_ValidatorPoolMock.CallOpts)
=======
func (_ValidatorPool *ValidatorPoolSession) GetValidatorsCount() (*big.Int, error) {
	return _ValidatorPool.Contract.GetValidatorsCount(&_ValidatorPool.CallOpts)
>>>>>>> Stashed changes
}

// GetValidatorsCount is a free data retrieval call binding the contract method 0x27498240.
//
// Solidity: function getValidatorsCount() view returns(uint256)
<<<<<<< Updated upstream
func (_ValidatorPoolMock *ValidatorPoolMockCallerSession) GetValidatorsCount() (*big.Int, error) {
	return _ValidatorPoolMock.Contract.GetValidatorsCount(&_ValidatorPoolMock.CallOpts)
=======
func (_ValidatorPool *ValidatorPoolCallerSession) GetValidatorsCount() (*big.Int, error) {
	return _ValidatorPool.Contract.GetValidatorsCount(&_ValidatorPool.CallOpts)
>>>>>>> Stashed changes
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address participant) view returns(bool)
<<<<<<< Updated upstream
func (_ValidatorPoolMock *ValidatorPoolMockCaller) IsValidator(opts *bind.CallOpts, participant common.Address) (bool, error) {
	var out []interface{}
	err := _ValidatorPoolMock.contract.Call(opts, &out, "isValidator", participant)
=======
func (_ValidatorPool *ValidatorPoolCaller) IsValidator(opts *bind.CallOpts, participant common.Address) (bool, error) {
	var out []interface{}
	err := _ValidatorPool.contract.Call(opts, &out, "isValidator", participant)
>>>>>>> Stashed changes

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address participant) view returns(bool)
<<<<<<< Updated upstream
func (_ValidatorPoolMock *ValidatorPoolMockSession) IsValidator(participant common.Address) (bool, error) {
	return _ValidatorPoolMock.Contract.IsValidator(&_ValidatorPoolMock.CallOpts, participant)
=======
func (_ValidatorPool *ValidatorPoolSession) IsValidator(participant common.Address) (bool, error) {
	return _ValidatorPool.Contract.IsValidator(&_ValidatorPool.CallOpts, participant)
>>>>>>> Stashed changes
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address participant) view returns(bool)
<<<<<<< Updated upstream
func (_ValidatorPoolMock *ValidatorPoolMockCallerSession) IsValidator(participant common.Address) (bool, error) {
	return _ValidatorPoolMock.Contract.IsValidator(&_ValidatorPoolMock.CallOpts, participant)
=======
func (_ValidatorPool *ValidatorPoolCallerSession) IsValidator(participant common.Address) (bool, error) {
	return _ValidatorPool.Contract.IsValidator(&_ValidatorPool.CallOpts, participant)
>>>>>>> Stashed changes
}

// AddValidator is a paid mutator transaction binding the contract method 0x4d238c8e.
//
// Solidity: function addValidator(address v) returns()
<<<<<<< Updated upstream
func (_ValidatorPoolMock *ValidatorPoolMockTransactor) AddValidator(opts *bind.TransactOpts, v common.Address) (*types.Transaction, error) {
	return _ValidatorPoolMock.contract.Transact(opts, "addValidator", v)
=======
func (_ValidatorPool *ValidatorPoolTransactor) AddValidator(opts *bind.TransactOpts, v common.Address) (*types.Transaction, error) {
	return _ValidatorPool.contract.Transact(opts, "addValidator", v)
>>>>>>> Stashed changes
}

// AddValidator is a paid mutator transaction binding the contract method 0x4d238c8e.
//
// Solidity: function addValidator(address v) returns()
<<<<<<< Updated upstream
func (_ValidatorPoolMock *ValidatorPoolMockSession) AddValidator(v common.Address) (*types.Transaction, error) {
	return _ValidatorPoolMock.Contract.AddValidator(&_ValidatorPoolMock.TransactOpts, v)
=======
func (_ValidatorPool *ValidatorPoolSession) AddValidator(v common.Address) (*types.Transaction, error) {
	return _ValidatorPool.Contract.AddValidator(&_ValidatorPool.TransactOpts, v)
>>>>>>> Stashed changes
}

// AddValidator is a paid mutator transaction binding the contract method 0x4d238c8e.
//
// Solidity: function addValidator(address v) returns()
<<<<<<< Updated upstream
func (_ValidatorPoolMock *ValidatorPoolMockTransactorSession) AddValidator(v common.Address) (*types.Transaction, error) {
	return _ValidatorPoolMock.Contract.AddValidator(&_ValidatorPoolMock.TransactOpts, v)
=======
func (_ValidatorPool *ValidatorPoolTransactorSession) AddValidator(v common.Address) (*types.Transaction, error) {
	return _ValidatorPool.Contract.AddValidator(&_ValidatorPool.TransactOpts, v)
>>>>>>> Stashed changes
}

// InitializeETHDKG is a paid mutator transaction binding the contract method 0x57b51c9c.
//
// Solidity: function initializeETHDKG() returns()
<<<<<<< Updated upstream
func (_ValidatorPoolMock *ValidatorPoolMockTransactor) InitializeETHDKG(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorPoolMock.contract.Transact(opts, "initializeETHDKG")
=======
func (_ValidatorPool *ValidatorPoolTransactor) InitializeETHDKG(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorPool.contract.Transact(opts, "initializeETHDKG")
>>>>>>> Stashed changes
}

// InitializeETHDKG is a paid mutator transaction binding the contract method 0x57b51c9c.
//
// Solidity: function initializeETHDKG() returns()
<<<<<<< Updated upstream
func (_ValidatorPoolMock *ValidatorPoolMockSession) InitializeETHDKG() (*types.Transaction, error) {
	return _ValidatorPoolMock.Contract.InitializeETHDKG(&_ValidatorPoolMock.TransactOpts)
=======
func (_ValidatorPool *ValidatorPoolSession) InitializeETHDKG() (*types.Transaction, error) {
	return _ValidatorPool.Contract.InitializeETHDKG(&_ValidatorPool.TransactOpts)
>>>>>>> Stashed changes
}

// InitializeETHDKG is a paid mutator transaction binding the contract method 0x57b51c9c.
//
// Solidity: function initializeETHDKG() returns()
<<<<<<< Updated upstream
func (_ValidatorPoolMock *ValidatorPoolMockTransactorSession) InitializeETHDKG() (*types.Transaction, error) {
	return _ValidatorPoolMock.Contract.InitializeETHDKG(&_ValidatorPoolMock.TransactOpts)
=======
func (_ValidatorPool *ValidatorPoolTransactorSession) InitializeETHDKG() (*types.Transaction, error) {
	return _ValidatorPool.Contract.InitializeETHDKG(&_ValidatorPool.TransactOpts)
>>>>>>> Stashed changes
}

// MajorSlash is a paid mutator transaction binding the contract method 0x150ef01b.
//
// Solidity: function majorSlash(address validator) returns()
<<<<<<< Updated upstream
func (_ValidatorPoolMock *ValidatorPoolMockTransactor) MajorSlash(opts *bind.TransactOpts, validator common.Address) (*types.Transaction, error) {
	return _ValidatorPoolMock.contract.Transact(opts, "majorSlash", validator)
=======
func (_ValidatorPool *ValidatorPoolTransactor) MajorSlash(opts *bind.TransactOpts, validator common.Address) (*types.Transaction, error) {
	return _ValidatorPool.contract.Transact(opts, "majorSlash", validator)
>>>>>>> Stashed changes
}

// MajorSlash is a paid mutator transaction binding the contract method 0x150ef01b.
//
// Solidity: function majorSlash(address validator) returns()
<<<<<<< Updated upstream
func (_ValidatorPoolMock *ValidatorPoolMockSession) MajorSlash(validator common.Address) (*types.Transaction, error) {
	return _ValidatorPoolMock.Contract.MajorSlash(&_ValidatorPoolMock.TransactOpts, validator)
=======
func (_ValidatorPool *ValidatorPoolSession) MajorSlash(validator common.Address) (*types.Transaction, error) {
	return _ValidatorPool.Contract.MajorSlash(&_ValidatorPool.TransactOpts, validator)
>>>>>>> Stashed changes
}

// MajorSlash is a paid mutator transaction binding the contract method 0x150ef01b.
//
// Solidity: function majorSlash(address validator) returns()
<<<<<<< Updated upstream
func (_ValidatorPoolMock *ValidatorPoolMockTransactorSession) MajorSlash(validator common.Address) (*types.Transaction, error) {
	return _ValidatorPoolMock.Contract.MajorSlash(&_ValidatorPoolMock.TransactOpts, validator)
=======
func (_ValidatorPool *ValidatorPoolTransactorSession) MajorSlash(validator common.Address) (*types.Transaction, error) {
	return _ValidatorPool.Contract.MajorSlash(&_ValidatorPool.TransactOpts, validator)
>>>>>>> Stashed changes
}

// MinorSlash is a paid mutator transaction binding the contract method 0xa19ebb21.
//
// Solidity: function minorSlash(address validator) returns()
<<<<<<< Updated upstream
func (_ValidatorPoolMock *ValidatorPoolMockTransactor) MinorSlash(opts *bind.TransactOpts, validator common.Address) (*types.Transaction, error) {
	return _ValidatorPoolMock.contract.Transact(opts, "minorSlash", validator)
=======
func (_ValidatorPool *ValidatorPoolTransactor) MinorSlash(opts *bind.TransactOpts, validator common.Address) (*types.Transaction, error) {
	return _ValidatorPool.contract.Transact(opts, "minorSlash", validator)
>>>>>>> Stashed changes
}

// MinorSlash is a paid mutator transaction binding the contract method 0xa19ebb21.
//
// Solidity: function minorSlash(address validator) returns()
<<<<<<< Updated upstream
func (_ValidatorPoolMock *ValidatorPoolMockSession) MinorSlash(validator common.Address) (*types.Transaction, error) {
	return _ValidatorPoolMock.Contract.MinorSlash(&_ValidatorPoolMock.TransactOpts, validator)
=======
func (_ValidatorPool *ValidatorPoolSession) MinorSlash(validator common.Address) (*types.Transaction, error) {
	return _ValidatorPool.Contract.MinorSlash(&_ValidatorPool.TransactOpts, validator)
>>>>>>> Stashed changes
}

// MinorSlash is a paid mutator transaction binding the contract method 0xa19ebb21.
//
// Solidity: function minorSlash(address validator) returns()
<<<<<<< Updated upstream
func (_ValidatorPoolMock *ValidatorPoolMockTransactorSession) MinorSlash(validator common.Address) (*types.Transaction, error) {
	return _ValidatorPoolMock.Contract.MinorSlash(&_ValidatorPoolMock.TransactOpts, validator)
=======
func (_ValidatorPool *ValidatorPoolTransactorSession) MinorSlash(validator common.Address) (*types.Transaction, error) {
	return _ValidatorPool.Contract.MinorSlash(&_ValidatorPool.TransactOpts, validator)
>>>>>>> Stashed changes
}

// RemoveAllValidators is a paid mutator transaction binding the contract method 0xa74a97b1.
//
// Solidity: function removeAllValidators() returns()
<<<<<<< Updated upstream
func (_ValidatorPoolMock *ValidatorPoolMockTransactor) RemoveAllValidators(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorPoolMock.contract.Transact(opts, "removeAllValidators")
=======
func (_ValidatorPool *ValidatorPoolTransactor) RemoveAllValidators(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorPool.contract.Transact(opts, "removeAllValidators")
>>>>>>> Stashed changes
}

// RemoveAllValidators is a paid mutator transaction binding the contract method 0xa74a97b1.
//
// Solidity: function removeAllValidators() returns()
<<<<<<< Updated upstream
func (_ValidatorPoolMock *ValidatorPoolMockSession) RemoveAllValidators() (*types.Transaction, error) {
	return _ValidatorPoolMock.Contract.RemoveAllValidators(&_ValidatorPoolMock.TransactOpts)
=======
func (_ValidatorPool *ValidatorPoolSession) RemoveAllValidators() (*types.Transaction, error) {
	return _ValidatorPool.Contract.RemoveAllValidators(&_ValidatorPool.TransactOpts)
>>>>>>> Stashed changes
}

// RemoveAllValidators is a paid mutator transaction binding the contract method 0xa74a97b1.
//
// Solidity: function removeAllValidators() returns()
<<<<<<< Updated upstream
func (_ValidatorPoolMock *ValidatorPoolMockTransactorSession) RemoveAllValidators() (*types.Transaction, error) {
	return _ValidatorPoolMock.Contract.RemoveAllValidators(&_ValidatorPoolMock.TransactOpts)
=======
func (_ValidatorPool *ValidatorPoolTransactorSession) RemoveAllValidators() (*types.Transaction, error) {
	return _ValidatorPool.Contract.RemoveAllValidators(&_ValidatorPool.TransactOpts)
>>>>>>> Stashed changes
}

// RemoveValidator is a paid mutator transaction binding the contract method 0x40a141ff.
//
// Solidity: function removeValidator(address validator) returns()
<<<<<<< Updated upstream
func (_ValidatorPoolMock *ValidatorPoolMockTransactor) RemoveValidator(opts *bind.TransactOpts, validator common.Address) (*types.Transaction, error) {
	return _ValidatorPoolMock.contract.Transact(opts, "removeValidator", validator)
=======
func (_ValidatorPool *ValidatorPoolTransactor) RemoveValidator(opts *bind.TransactOpts, validator common.Address) (*types.Transaction, error) {
	return _ValidatorPool.contract.Transact(opts, "removeValidator", validator)
>>>>>>> Stashed changes
}

// RemoveValidator is a paid mutator transaction binding the contract method 0x40a141ff.
//
// Solidity: function removeValidator(address validator) returns()
<<<<<<< Updated upstream
func (_ValidatorPoolMock *ValidatorPoolMockSession) RemoveValidator(validator common.Address) (*types.Transaction, error) {
	return _ValidatorPoolMock.Contract.RemoveValidator(&_ValidatorPoolMock.TransactOpts, validator)
=======
func (_ValidatorPool *ValidatorPoolSession) RemoveValidator(validator common.Address) (*types.Transaction, error) {
	return _ValidatorPool.Contract.RemoveValidator(&_ValidatorPool.TransactOpts, validator)
>>>>>>> Stashed changes
}

// RemoveValidator is a paid mutator transaction binding the contract method 0x40a141ff.
//
// Solidity: function removeValidator(address validator) returns()
<<<<<<< Updated upstream
func (_ValidatorPoolMock *ValidatorPoolMockTransactorSession) RemoveValidator(validator common.Address) (*types.Transaction, error) {
	return _ValidatorPoolMock.Contract.RemoveValidator(&_ValidatorPoolMock.TransactOpts, validator)
=======
func (_ValidatorPool *ValidatorPoolTransactorSession) RemoveValidator(validator common.Address) (*types.Transaction, error) {
	return _ValidatorPool.Contract.RemoveValidator(&_ValidatorPool.TransactOpts, validator)
>>>>>>> Stashed changes
}

// SetETHDKG is a paid mutator transaction binding the contract method 0x8785a460.
//
// Solidity: function setETHDKG(address ethdkg) returns()
<<<<<<< Updated upstream
func (_ValidatorPoolMock *ValidatorPoolMockTransactor) SetETHDKG(opts *bind.TransactOpts, ethdkg common.Address) (*types.Transaction, error) {
	return _ValidatorPoolMock.contract.Transact(opts, "setETHDKG", ethdkg)
=======
func (_ValidatorPool *ValidatorPoolTransactor) SetETHDKG(opts *bind.TransactOpts, ethdkg common.Address) (*types.Transaction, error) {
	return _ValidatorPool.contract.Transact(opts, "setETHDKG", ethdkg)
>>>>>>> Stashed changes
}

// SetETHDKG is a paid mutator transaction binding the contract method 0x8785a460.
//
// Solidity: function setETHDKG(address ethdkg) returns()
<<<<<<< Updated upstream
func (_ValidatorPoolMock *ValidatorPoolMockSession) SetETHDKG(ethdkg common.Address) (*types.Transaction, error) {
	return _ValidatorPoolMock.Contract.SetETHDKG(&_ValidatorPoolMock.TransactOpts, ethdkg)
=======
func (_ValidatorPool *ValidatorPoolSession) SetETHDKG(ethdkg common.Address) (*types.Transaction, error) {
	return _ValidatorPool.Contract.SetETHDKG(&_ValidatorPool.TransactOpts, ethdkg)
>>>>>>> Stashed changes
}

// SetETHDKG is a paid mutator transaction binding the contract method 0x8785a460.
//
// Solidity: function setETHDKG(address ethdkg) returns()
<<<<<<< Updated upstream
func (_ValidatorPoolMock *ValidatorPoolMockTransactorSession) SetETHDKG(ethdkg common.Address) (*types.Transaction, error) {
	return _ValidatorPoolMock.Contract.SetETHDKG(&_ValidatorPoolMock.TransactOpts, ethdkg)
=======
func (_ValidatorPool *ValidatorPoolTransactorSession) SetETHDKG(ethdkg common.Address) (*types.Transaction, error) {
	return _ValidatorPool.Contract.SetETHDKG(&_ValidatorPool.TransactOpts, ethdkg)
>>>>>>> Stashed changes
}

// ValidatorsMetaData contains all meta data concerning the Validators contract.
var ValidatorsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BurntStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"why\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Fined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"key_share_G1\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"key_share_G1_correctness_proof\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"key_share_G2\",\"type\":\"uint256[4]\"}],\"name\":\"KeyShareSubmission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockedReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockedStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dkgStarts\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"registrationEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shareDistributionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disputeEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"keyShareSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mpkSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gpkjSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gpkjDisputeEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dkgComplete\",\"type\":\"uint256\"}],\"name\":\"RegistrationOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"RequestedUnlockStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"encrypted_shares\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"}],\"name\":\"ShareDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"startingETHDKG\",\"type\":\"bool\"}],\"name\":\"SnapshotTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnlockedReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnlockedStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"madID\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"madID\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"pkHash\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorLeft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share3\",\"type\":\"uint256\"}],\"name\":\"ValidatorMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"pkHash\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"validatorCount\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"ethHeight\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"madHeight\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey3\",\"type\":\"uint256\"}],\"name\":\"ValidatorSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"_madID\",\"type\":\"uint256[2]\"}],\"name\":\"addValidator\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceRewardFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceStakeFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceUnlocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceUnlockedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceUnlockedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceUnlockedRewardFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmValidators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"src\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"extractUint256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"src\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"extractUint32\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"val\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fine\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getChainIdFromSnapshot\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getHeightFromSnapshot\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getMadHeightFromSnapshot\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getRawBlockClaimsSnapshot\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getRawSignatureSnapshot\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"getValidatorPublicKey\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractRegistry\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"initializeParticipants\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractRegistry\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"initializeSnapshots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractRegistry\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"initializeStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockEpoch\",\"type\":\"uint256\"}],\"name\":\"lockRewardFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lockStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lockStakeFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"majorFine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"majorStakeFine\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minEthSnapshotSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minMadSnapshotSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"minorFine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minorStakeFine\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_signatureGroup\",\"type\":\"bytes\"}],\"name\":\"parseSignatureGroup\",\"outputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"publicKey\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[2]\",\"name\":\"signature\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"_madID\",\"type\":\"uint256[2]\"}],\"name\":\"removeValidator\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestUnlockStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"requestUnlockStakeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"orig\",\"type\":\"bytes\"}],\"name\":\"reverse\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"reversed\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"}],\"name\":\"setChainId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ns\",\"type\":\"uint256\"}],\"name\":\"setEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochDelay\",\"type\":\"uint256\"}],\"name\":\"setEpochDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_majorStakeFine\",\"type\":\"uint256\"}],\"name\":\"setMajorStakeFine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minSize\",\"type\":\"uint256\"}],\"name\":\"setMinEthSnapshotSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minSize\",\"type\":\"uint256\"}],\"name\":\"setMinMadSnapshotSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumStake\",\"type\":\"uint256\"}],\"name\":\"setMinimumStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minorStakeFine\",\"type\":\"uint256\"}],\"name\":\"setMinorStakeFine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"}],\"name\":\"setRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardBonus\",\"type\":\"uint256\"}],\"name\":\"setRewardBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"max\",\"type\":\"uint8\"}],\"name\":\"setValidatorMaxCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_signatureGroup\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_bclaims\",\"type\":\"bytes\"}],\"name\":\"snapshot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"unlockRewardFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlockStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlockStakeFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorMaxCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// ValidatorsABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorsMetaData.ABI instead.
var ValidatorsABI = ValidatorsMetaData.ABI

// Validators is an auto generated Go binding around an Ethereum contract.
type Validators struct {
	ValidatorsCaller     // Read-only binding to the contract
	ValidatorsTransactor // Write-only binding to the contract
	ValidatorsFilterer   // Log filterer for contract events
}

// ValidatorsCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorsSession struct {
	Contract     *Validators       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ValidatorsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorsCallerSession struct {
	Contract *ValidatorsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// ValidatorsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorsTransactorSession struct {
	Contract     *ValidatorsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// ValidatorsRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorsRaw struct {
	Contract *Validators // Generic contract binding to access the raw methods on
}

// ValidatorsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorsCallerRaw struct {
	Contract *ValidatorsCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorsTransactorRaw struct {
	Contract *ValidatorsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidators creates a new instance of Validators, bound to a specific deployed contract.
func NewValidators(address common.Address, backend bind.ContractBackend) (*Validators, error) {
	contract, err := bindValidators(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Validators{ValidatorsCaller: ValidatorsCaller{contract: contract}, ValidatorsTransactor: ValidatorsTransactor{contract: contract}, ValidatorsFilterer: ValidatorsFilterer{contract: contract}}, nil
}

// NewValidatorsCaller creates a new read-only instance of Validators, bound to a specific deployed contract.
func NewValidatorsCaller(address common.Address, caller bind.ContractCaller) (*ValidatorsCaller, error) {
	contract, err := bindValidators(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorsCaller{contract: contract}, nil
}

// NewValidatorsTransactor creates a new write-only instance of Validators, bound to a specific deployed contract.
func NewValidatorsTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorsTransactor, error) {
	contract, err := bindValidators(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorsTransactor{contract: contract}, nil
}

// NewValidatorsFilterer creates a new log filterer instance of Validators, bound to a specific deployed contract.
func NewValidatorsFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorsFilterer, error) {
	contract, err := bindValidators(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorsFilterer{contract: contract}, nil
}

// bindValidators binds a generic wrapper to an already deployed contract.
func bindValidators(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Validators *ValidatorsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Validators.Contract.ValidatorsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Validators *ValidatorsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Validators.Contract.ValidatorsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Validators *ValidatorsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Validators.Contract.ValidatorsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Validators *ValidatorsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Validators.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Validators *ValidatorsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Validators.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Validators *ValidatorsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Validators.Contract.contract.Transact(opts, method, params...)
}

// BalanceReward is a free data retrieval call binding the contract method 0x9fb69b43.
//
// Solidity: function balanceReward() view returns(uint256)
func (_Validators *ValidatorsCaller) BalanceReward(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "balanceReward")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceReward is a free data retrieval call binding the contract method 0x9fb69b43.
//
// Solidity: function balanceReward() view returns(uint256)
func (_Validators *ValidatorsSession) BalanceReward() (*big.Int, error) {
	return _Validators.Contract.BalanceReward(&_Validators.CallOpts)
}

// BalanceReward is a free data retrieval call binding the contract method 0x9fb69b43.
//
// Solidity: function balanceReward() view returns(uint256)
func (_Validators *ValidatorsCallerSession) BalanceReward() (*big.Int, error) {
	return _Validators.Contract.BalanceReward(&_Validators.CallOpts)
}

// BalanceRewardFor is a free data retrieval call binding the contract method 0x9be5d83e.
//
// Solidity: function balanceRewardFor(address who) view returns(uint256)
func (_Validators *ValidatorsCaller) BalanceRewardFor(opts *bind.CallOpts, who common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "balanceRewardFor", who)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceRewardFor is a free data retrieval call binding the contract method 0x9be5d83e.
//
// Solidity: function balanceRewardFor(address who) view returns(uint256)
func (_Validators *ValidatorsSession) BalanceRewardFor(who common.Address) (*big.Int, error) {
	return _Validators.Contract.BalanceRewardFor(&_Validators.CallOpts, who)
}

// BalanceRewardFor is a free data retrieval call binding the contract method 0x9be5d83e.
//
// Solidity: function balanceRewardFor(address who) view returns(uint256)
func (_Validators *ValidatorsCallerSession) BalanceRewardFor(who common.Address) (*big.Int, error) {
	return _Validators.Contract.BalanceRewardFor(&_Validators.CallOpts, who)
}

// BalanceStake is a free data retrieval call binding the contract method 0x8aa2799c.
//
// Solidity: function balanceStake() view returns(uint256)
func (_Validators *ValidatorsCaller) BalanceStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "balanceStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceStake is a free data retrieval call binding the contract method 0x8aa2799c.
//
// Solidity: function balanceStake() view returns(uint256)
func (_Validators *ValidatorsSession) BalanceStake() (*big.Int, error) {
	return _Validators.Contract.BalanceStake(&_Validators.CallOpts)
}

// BalanceStake is a free data retrieval call binding the contract method 0x8aa2799c.
//
// Solidity: function balanceStake() view returns(uint256)
func (_Validators *ValidatorsCallerSession) BalanceStake() (*big.Int, error) {
	return _Validators.Contract.BalanceStake(&_Validators.CallOpts)
}

// BalanceStakeFor is a free data retrieval call binding the contract method 0x35ba4daf.
//
// Solidity: function balanceStakeFor(address who) view returns(uint256)
func (_Validators *ValidatorsCaller) BalanceStakeFor(opts *bind.CallOpts, who common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "balanceStakeFor", who)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceStakeFor is a free data retrieval call binding the contract method 0x35ba4daf.
//
// Solidity: function balanceStakeFor(address who) view returns(uint256)
func (_Validators *ValidatorsSession) BalanceStakeFor(who common.Address) (*big.Int, error) {
	return _Validators.Contract.BalanceStakeFor(&_Validators.CallOpts, who)
}

// BalanceStakeFor is a free data retrieval call binding the contract method 0x35ba4daf.
//
// Solidity: function balanceStakeFor(address who) view returns(uint256)
func (_Validators *ValidatorsCallerSession) BalanceStakeFor(who common.Address) (*big.Int, error) {
	return _Validators.Contract.BalanceStakeFor(&_Validators.CallOpts, who)
}

// BalanceUnlocked is a free data retrieval call binding the contract method 0x5b6a0d1e.
//
// Solidity: function balanceUnlocked() view returns(uint256)
func (_Validators *ValidatorsCaller) BalanceUnlocked(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "balanceUnlocked")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceUnlocked is a free data retrieval call binding the contract method 0x5b6a0d1e.
//
// Solidity: function balanceUnlocked() view returns(uint256)
func (_Validators *ValidatorsSession) BalanceUnlocked() (*big.Int, error) {
	return _Validators.Contract.BalanceUnlocked(&_Validators.CallOpts)
}

// BalanceUnlocked is a free data retrieval call binding the contract method 0x5b6a0d1e.
//
// Solidity: function balanceUnlocked() view returns(uint256)
func (_Validators *ValidatorsCallerSession) BalanceUnlocked() (*big.Int, error) {
	return _Validators.Contract.BalanceUnlocked(&_Validators.CallOpts)
}

// BalanceUnlockedFor is a free data retrieval call binding the contract method 0x2e713306.
//
// Solidity: function balanceUnlockedFor(address who) view returns(uint256)
func (_Validators *ValidatorsCaller) BalanceUnlockedFor(opts *bind.CallOpts, who common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "balanceUnlockedFor", who)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceUnlockedFor is a free data retrieval call binding the contract method 0x2e713306.
//
// Solidity: function balanceUnlockedFor(address who) view returns(uint256)
func (_Validators *ValidatorsSession) BalanceUnlockedFor(who common.Address) (*big.Int, error) {
	return _Validators.Contract.BalanceUnlockedFor(&_Validators.CallOpts, who)
}

// BalanceUnlockedFor is a free data retrieval call binding the contract method 0x2e713306.
//
// Solidity: function balanceUnlockedFor(address who) view returns(uint256)
func (_Validators *ValidatorsCallerSession) BalanceUnlockedFor(who common.Address) (*big.Int, error) {
	return _Validators.Contract.BalanceUnlockedFor(&_Validators.CallOpts, who)
}

// BalanceUnlockedReward is a free data retrieval call binding the contract method 0xc328b464.
//
// Solidity: function balanceUnlockedReward() view returns(uint256)
func (_Validators *ValidatorsCaller) BalanceUnlockedReward(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "balanceUnlockedReward")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceUnlockedReward is a free data retrieval call binding the contract method 0xc328b464.
//
// Solidity: function balanceUnlockedReward() view returns(uint256)
func (_Validators *ValidatorsSession) BalanceUnlockedReward() (*big.Int, error) {
	return _Validators.Contract.BalanceUnlockedReward(&_Validators.CallOpts)
}

// BalanceUnlockedReward is a free data retrieval call binding the contract method 0xc328b464.
//
// Solidity: function balanceUnlockedReward() view returns(uint256)
func (_Validators *ValidatorsCallerSession) BalanceUnlockedReward() (*big.Int, error) {
	return _Validators.Contract.BalanceUnlockedReward(&_Validators.CallOpts)
}

// BalanceUnlockedRewardFor is a free data retrieval call binding the contract method 0x515c31a1.
//
// Solidity: function balanceUnlockedRewardFor(address who) view returns(uint256)
func (_Validators *ValidatorsCaller) BalanceUnlockedRewardFor(opts *bind.CallOpts, who common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "balanceUnlockedRewardFor", who)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceUnlockedRewardFor is a free data retrieval call binding the contract method 0x515c31a1.
//
// Solidity: function balanceUnlockedRewardFor(address who) view returns(uint256)
func (_Validators *ValidatorsSession) BalanceUnlockedRewardFor(who common.Address) (*big.Int, error) {
	return _Validators.Contract.BalanceUnlockedRewardFor(&_Validators.CallOpts, who)
}

// BalanceUnlockedRewardFor is a free data retrieval call binding the contract method 0x515c31a1.
//
// Solidity: function balanceUnlockedRewardFor(address who) view returns(uint256)
func (_Validators *ValidatorsCallerSession) BalanceUnlockedRewardFor(who common.Address) (*big.Int, error) {
	return _Validators.Contract.BalanceUnlockedRewardFor(&_Validators.CallOpts, who)
}

// Epoch is a free data retrieval call binding the contract method 0x900cf0cf.
//
// Solidity: function epoch() view returns(uint256)
func (_Validators *ValidatorsCaller) Epoch(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "epoch")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Epoch is a free data retrieval call binding the contract method 0x900cf0cf.
//
// Solidity: function epoch() view returns(uint256)
func (_Validators *ValidatorsSession) Epoch() (*big.Int, error) {
	return _Validators.Contract.Epoch(&_Validators.CallOpts)
}

// Epoch is a free data retrieval call binding the contract method 0x900cf0cf.
//
// Solidity: function epoch() view returns(uint256)
func (_Validators *ValidatorsCallerSession) Epoch() (*big.Int, error) {
	return _Validators.Contract.Epoch(&_Validators.CallOpts)
}

// ExtractUint256 is a free data retrieval call binding the contract method 0x1c8c8ba4.
//
// Solidity: function extractUint256(bytes src, uint256 offset) pure returns(uint256 val)
func (_Validators *ValidatorsCaller) ExtractUint256(opts *bind.CallOpts, src []byte, offset *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "extractUint256", src, offset)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ExtractUint256 is a free data retrieval call binding the contract method 0x1c8c8ba4.
//
// Solidity: function extractUint256(bytes src, uint256 offset) pure returns(uint256 val)
func (_Validators *ValidatorsSession) ExtractUint256(src []byte, offset *big.Int) (*big.Int, error) {
	return _Validators.Contract.ExtractUint256(&_Validators.CallOpts, src, offset)
}

// ExtractUint256 is a free data retrieval call binding the contract method 0x1c8c8ba4.
//
// Solidity: function extractUint256(bytes src, uint256 offset) pure returns(uint256 val)
func (_Validators *ValidatorsCallerSession) ExtractUint256(src []byte, offset *big.Int) (*big.Int, error) {
	return _Validators.Contract.ExtractUint256(&_Validators.CallOpts, src, offset)
}

// ExtractUint32 is a free data retrieval call binding the contract method 0xc1312f4d.
//
// Solidity: function extractUint32(bytes src, uint256 idx) pure returns(uint32 val)
func (_Validators *ValidatorsCaller) ExtractUint32(opts *bind.CallOpts, src []byte, idx *big.Int) (uint32, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "extractUint32", src, idx)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// ExtractUint32 is a free data retrieval call binding the contract method 0xc1312f4d.
//
// Solidity: function extractUint32(bytes src, uint256 idx) pure returns(uint32 val)
func (_Validators *ValidatorsSession) ExtractUint32(src []byte, idx *big.Int) (uint32, error) {
	return _Validators.Contract.ExtractUint32(&_Validators.CallOpts, src, idx)
}

// ExtractUint32 is a free data retrieval call binding the contract method 0xc1312f4d.
//
// Solidity: function extractUint32(bytes src, uint256 idx) pure returns(uint32 val)
func (_Validators *ValidatorsCallerSession) ExtractUint32(src []byte, idx *big.Int) (uint32, error) {
	return _Validators.Contract.ExtractUint32(&_Validators.CallOpts, src, idx)
}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint32)
func (_Validators *ValidatorsCaller) GetChainId(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "getChainId")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint32)
func (_Validators *ValidatorsSession) GetChainId() (uint32, error) {
	return _Validators.Contract.GetChainId(&_Validators.CallOpts)
}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint32)
func (_Validators *ValidatorsCallerSession) GetChainId() (uint32, error) {
	return _Validators.Contract.GetChainId(&_Validators.CallOpts)
}

// GetChainIdFromSnapshot is a free data retrieval call binding the contract method 0x19f74669.
//
// Solidity: function getChainIdFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_Validators *ValidatorsCaller) GetChainIdFromSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) (uint32, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "getChainIdFromSnapshot", snapshotNumber)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetChainIdFromSnapshot is a free data retrieval call binding the contract method 0x19f74669.
//
// Solidity: function getChainIdFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_Validators *ValidatorsSession) GetChainIdFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _Validators.Contract.GetChainIdFromSnapshot(&_Validators.CallOpts, snapshotNumber)
}

// GetChainIdFromSnapshot is a free data retrieval call binding the contract method 0x19f74669.
//
// Solidity: function getChainIdFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_Validators *ValidatorsCallerSession) GetChainIdFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _Validators.Contract.GetChainIdFromSnapshot(&_Validators.CallOpts, snapshotNumber)
}

// GetHeightFromSnapshot is a free data retrieval call binding the contract method 0xe380b228.
//
// Solidity: function getHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_Validators *ValidatorsCaller) GetHeightFromSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) (uint32, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "getHeightFromSnapshot", snapshotNumber)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetHeightFromSnapshot is a free data retrieval call binding the contract method 0xe380b228.
//
// Solidity: function getHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_Validators *ValidatorsSession) GetHeightFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _Validators.Contract.GetHeightFromSnapshot(&_Validators.CallOpts, snapshotNumber)
}

// GetHeightFromSnapshot is a free data retrieval call binding the contract method 0xe380b228.
//
// Solidity: function getHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_Validators *ValidatorsCallerSession) GetHeightFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _Validators.Contract.GetHeightFromSnapshot(&_Validators.CallOpts, snapshotNumber)
}

// GetMadHeightFromSnapshot is a free data retrieval call binding the contract method 0x4f4ea614.
//
// Solidity: function getMadHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_Validators *ValidatorsCaller) GetMadHeightFromSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) (uint32, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "getMadHeightFromSnapshot", snapshotNumber)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetMadHeightFromSnapshot is a free data retrieval call binding the contract method 0x4f4ea614.
//
// Solidity: function getMadHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_Validators *ValidatorsSession) GetMadHeightFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _Validators.Contract.GetMadHeightFromSnapshot(&_Validators.CallOpts, snapshotNumber)
}

// GetMadHeightFromSnapshot is a free data retrieval call binding the contract method 0x4f4ea614.
//
// Solidity: function getMadHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_Validators *ValidatorsCallerSession) GetMadHeightFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _Validators.Contract.GetMadHeightFromSnapshot(&_Validators.CallOpts, snapshotNumber)
}

// GetRawBlockClaimsSnapshot is a free data retrieval call binding the contract method 0x6372fe51.
//
// Solidity: function getRawBlockClaimsSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_Validators *ValidatorsCaller) GetRawBlockClaimsSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) ([]byte, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "getRawBlockClaimsSnapshot", snapshotNumber)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetRawBlockClaimsSnapshot is a free data retrieval call binding the contract method 0x6372fe51.
//
// Solidity: function getRawBlockClaimsSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_Validators *ValidatorsSession) GetRawBlockClaimsSnapshot(snapshotNumber *big.Int) ([]byte, error) {
	return _Validators.Contract.GetRawBlockClaimsSnapshot(&_Validators.CallOpts, snapshotNumber)
}

// GetRawBlockClaimsSnapshot is a free data retrieval call binding the contract method 0x6372fe51.
//
// Solidity: function getRawBlockClaimsSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_Validators *ValidatorsCallerSession) GetRawBlockClaimsSnapshot(snapshotNumber *big.Int) ([]byte, error) {
	return _Validators.Contract.GetRawBlockClaimsSnapshot(&_Validators.CallOpts, snapshotNumber)
}

// GetRawSignatureSnapshot is a free data retrieval call binding the contract method 0x35b6c632.
//
// Solidity: function getRawSignatureSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_Validators *ValidatorsCaller) GetRawSignatureSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) ([]byte, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "getRawSignatureSnapshot", snapshotNumber)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetRawSignatureSnapshot is a free data retrieval call binding the contract method 0x35b6c632.
//
// Solidity: function getRawSignatureSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_Validators *ValidatorsSession) GetRawSignatureSnapshot(snapshotNumber *big.Int) ([]byte, error) {
	return _Validators.Contract.GetRawSignatureSnapshot(&_Validators.CallOpts, snapshotNumber)
}

// GetRawSignatureSnapshot is a free data retrieval call binding the contract method 0x35b6c632.
//
// Solidity: function getRawSignatureSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_Validators *ValidatorsCallerSession) GetRawSignatureSnapshot(snapshotNumber *big.Int) ([]byte, error) {
	return _Validators.Contract.GetRawSignatureSnapshot(&_Validators.CallOpts, snapshotNumber)
}

// GetValidatorPublicKey is a free data retrieval call binding the contract method 0x4e6f4a22.
//
// Solidity: function getValidatorPublicKey(address _validator) view returns(uint256[2])
func (_Validators *ValidatorsCaller) GetValidatorPublicKey(opts *bind.CallOpts, _validator common.Address) ([2]*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "getValidatorPublicKey", _validator)

	if err != nil {
		return *new([2]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([2]*big.Int)).(*[2]*big.Int)

	return out0, err

}

// GetValidatorPublicKey is a free data retrieval call binding the contract method 0x4e6f4a22.
//
// Solidity: function getValidatorPublicKey(address _validator) view returns(uint256[2])
func (_Validators *ValidatorsSession) GetValidatorPublicKey(_validator common.Address) ([2]*big.Int, error) {
	return _Validators.Contract.GetValidatorPublicKey(&_Validators.CallOpts, _validator)
}

// GetValidatorPublicKey is a free data retrieval call binding the contract method 0x4e6f4a22.
//
// Solidity: function getValidatorPublicKey(address _validator) view returns(uint256[2])
func (_Validators *ValidatorsCallerSession) GetValidatorPublicKey(_validator common.Address) ([2]*big.Int, error) {
	return _Validators.Contract.GetValidatorPublicKey(&_Validators.CallOpts, _validator)
}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_Validators *ValidatorsCaller) GetValidators(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "getValidators")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_Validators *ValidatorsSession) GetValidators() ([]common.Address, error) {
	return _Validators.Contract.GetValidators(&_Validators.CallOpts)
}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_Validators *ValidatorsCallerSession) GetValidators() ([]common.Address, error) {
	return _Validators.Contract.GetValidators(&_Validators.CallOpts)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_Validators *ValidatorsCaller) IsValidator(opts *bind.CallOpts, validator common.Address) (bool, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "isValidator", validator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_Validators *ValidatorsSession) IsValidator(validator common.Address) (bool, error) {
	return _Validators.Contract.IsValidator(&_Validators.CallOpts, validator)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_Validators *ValidatorsCallerSession) IsValidator(validator common.Address) (bool, error) {
	return _Validators.Contract.IsValidator(&_Validators.CallOpts, validator)
}

// MajorStakeFine is a free data retrieval call binding the contract method 0xad43d845.
//
// Solidity: function majorStakeFine() view returns(uint256)
func (_Validators *ValidatorsCaller) MajorStakeFine(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "majorStakeFine")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MajorStakeFine is a free data retrieval call binding the contract method 0xad43d845.
//
// Solidity: function majorStakeFine() view returns(uint256)
func (_Validators *ValidatorsSession) MajorStakeFine() (*big.Int, error) {
	return _Validators.Contract.MajorStakeFine(&_Validators.CallOpts)
}

// MajorStakeFine is a free data retrieval call binding the contract method 0xad43d845.
//
// Solidity: function majorStakeFine() view returns(uint256)
func (_Validators *ValidatorsCallerSession) MajorStakeFine() (*big.Int, error) {
	return _Validators.Contract.MajorStakeFine(&_Validators.CallOpts)
}

// MinEthSnapshotSize is a free data retrieval call binding the contract method 0xe4b82105.
//
// Solidity: function minEthSnapshotSize() view returns(uint256)
func (_Validators *ValidatorsCaller) MinEthSnapshotSize(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "minEthSnapshotSize")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinEthSnapshotSize is a free data retrieval call binding the contract method 0xe4b82105.
//
// Solidity: function minEthSnapshotSize() view returns(uint256)
func (_Validators *ValidatorsSession) MinEthSnapshotSize() (*big.Int, error) {
	return _Validators.Contract.MinEthSnapshotSize(&_Validators.CallOpts)
}

// MinEthSnapshotSize is a free data retrieval call binding the contract method 0xe4b82105.
//
// Solidity: function minEthSnapshotSize() view returns(uint256)
func (_Validators *ValidatorsCallerSession) MinEthSnapshotSize() (*big.Int, error) {
	return _Validators.Contract.MinEthSnapshotSize(&_Validators.CallOpts)
}

// MinMadSnapshotSize is a free data retrieval call binding the contract method 0xc17cb9ee.
//
// Solidity: function minMadSnapshotSize() view returns(uint256)
func (_Validators *ValidatorsCaller) MinMadSnapshotSize(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "minMadSnapshotSize")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinMadSnapshotSize is a free data retrieval call binding the contract method 0xc17cb9ee.
//
// Solidity: function minMadSnapshotSize() view returns(uint256)
func (_Validators *ValidatorsSession) MinMadSnapshotSize() (*big.Int, error) {
	return _Validators.Contract.MinMadSnapshotSize(&_Validators.CallOpts)
}

// MinMadSnapshotSize is a free data retrieval call binding the contract method 0xc17cb9ee.
//
// Solidity: function minMadSnapshotSize() view returns(uint256)
func (_Validators *ValidatorsCallerSession) MinMadSnapshotSize() (*big.Int, error) {
	return _Validators.Contract.MinMadSnapshotSize(&_Validators.CallOpts)
}

// MinimumStake is a free data retrieval call binding the contract method 0xec5ffac2.
//
// Solidity: function minimumStake() view returns(uint256)
func (_Validators *ValidatorsCaller) MinimumStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "minimumStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumStake is a free data retrieval call binding the contract method 0xec5ffac2.
//
// Solidity: function minimumStake() view returns(uint256)
func (_Validators *ValidatorsSession) MinimumStake() (*big.Int, error) {
	return _Validators.Contract.MinimumStake(&_Validators.CallOpts)
}

// MinimumStake is a free data retrieval call binding the contract method 0xec5ffac2.
//
// Solidity: function minimumStake() view returns(uint256)
func (_Validators *ValidatorsCallerSession) MinimumStake() (*big.Int, error) {
	return _Validators.Contract.MinimumStake(&_Validators.CallOpts)
}

// MinorStakeFine is a free data retrieval call binding the contract method 0x6d059126.
//
// Solidity: function minorStakeFine() view returns(uint256)
func (_Validators *ValidatorsCaller) MinorStakeFine(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "minorStakeFine")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinorStakeFine is a free data retrieval call binding the contract method 0x6d059126.
//
// Solidity: function minorStakeFine() view returns(uint256)
func (_Validators *ValidatorsSession) MinorStakeFine() (*big.Int, error) {
	return _Validators.Contract.MinorStakeFine(&_Validators.CallOpts)
}

// MinorStakeFine is a free data retrieval call binding the contract method 0x6d059126.
//
// Solidity: function minorStakeFine() view returns(uint256)
func (_Validators *ValidatorsCallerSession) MinorStakeFine() (*big.Int, error) {
	return _Validators.Contract.MinorStakeFine(&_Validators.CallOpts)
}

// ParseSignatureGroup is a free data retrieval call binding the contract method 0x9be2f2df.
//
// Solidity: function parseSignatureGroup(bytes _signatureGroup) pure returns(uint256[4] publicKey, uint256[2] signature)
func (_Validators *ValidatorsCaller) ParseSignatureGroup(opts *bind.CallOpts, _signatureGroup []byte) (struct {
	PublicKey [4]*big.Int
	Signature [2]*big.Int
}, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "parseSignatureGroup", _signatureGroup)

	outstruct := new(struct {
		PublicKey [4]*big.Int
		Signature [2]*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.PublicKey = *abi.ConvertType(out[0], new([4]*big.Int)).(*[4]*big.Int)
	outstruct.Signature = *abi.ConvertType(out[1], new([2]*big.Int)).(*[2]*big.Int)

	return *outstruct, err

}

// ParseSignatureGroup is a free data retrieval call binding the contract method 0x9be2f2df.
//
// Solidity: function parseSignatureGroup(bytes _signatureGroup) pure returns(uint256[4] publicKey, uint256[2] signature)
func (_Validators *ValidatorsSession) ParseSignatureGroup(_signatureGroup []byte) (struct {
	PublicKey [4]*big.Int
	Signature [2]*big.Int
}, error) {
	return _Validators.Contract.ParseSignatureGroup(&_Validators.CallOpts, _signatureGroup)
}

// ParseSignatureGroup is a free data retrieval call binding the contract method 0x9be2f2df.
//
// Solidity: function parseSignatureGroup(bytes _signatureGroup) pure returns(uint256[4] publicKey, uint256[2] signature)
func (_Validators *ValidatorsCallerSession) ParseSignatureGroup(_signatureGroup []byte) (struct {
	PublicKey [4]*big.Int
	Signature [2]*big.Int
}, error) {
	return _Validators.Contract.ParseSignatureGroup(&_Validators.CallOpts, _signatureGroup)
}

// Reverse is a free data retrieval call binding the contract method 0xec11c823.
//
// Solidity: function reverse(bytes orig) pure returns(bytes reversed)
func (_Validators *ValidatorsCaller) Reverse(opts *bind.CallOpts, orig []byte) ([]byte, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "reverse", orig)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// Reverse is a free data retrieval call binding the contract method 0xec11c823.
//
// Solidity: function reverse(bytes orig) pure returns(bytes reversed)
func (_Validators *ValidatorsSession) Reverse(orig []byte) ([]byte, error) {
	return _Validators.Contract.Reverse(&_Validators.CallOpts, orig)
}

// Reverse is a free data retrieval call binding the contract method 0xec11c823.
//
// Solidity: function reverse(bytes orig) pure returns(bytes reversed)
func (_Validators *ValidatorsCallerSession) Reverse(orig []byte) ([]byte, error) {
	return _Validators.Contract.Reverse(&_Validators.CallOpts, orig)
}

// RewardAmount is a free data retrieval call binding the contract method 0xf7b2a7be.
//
// Solidity: function rewardAmount() view returns(uint256)
func (_Validators *ValidatorsCaller) RewardAmount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "rewardAmount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RewardAmount is a free data retrieval call binding the contract method 0xf7b2a7be.
//
// Solidity: function rewardAmount() view returns(uint256)
func (_Validators *ValidatorsSession) RewardAmount() (*big.Int, error) {
	return _Validators.Contract.RewardAmount(&_Validators.CallOpts)
}

// RewardAmount is a free data retrieval call binding the contract method 0xf7b2a7be.
//
// Solidity: function rewardAmount() view returns(uint256)
func (_Validators *ValidatorsCallerSession) RewardAmount() (*big.Int, error) {
	return _Validators.Contract.RewardAmount(&_Validators.CallOpts)
}

// RewardBonus is a free data retrieval call binding the contract method 0xfdf553cf.
//
// Solidity: function rewardBonus() view returns(uint256)
func (_Validators *ValidatorsCaller) RewardBonus(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Validators.contract.Call(opts, &out, "rewardBonus")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RewardBonus is a free data retrieval call binding the contract method 0xfdf553cf.
//
// Solidity: function rewardBonus() view returns(uint256)
func (_Validators *ValidatorsSession) RewardBonus() (*big.Int, error) {
	return _Validators.Contract.RewardBonus(&_Validators.CallOpts)
}

// RewardBonus is a free data retrieval call binding the contract method 0xfdf553cf.
//
// Solidity: function rewardBonus() view returns(uint256)
func (_Validators *ValidatorsCallerSession) RewardBonus() (*big.Int, error) {
	return _Validators.Contract.RewardBonus(&_Validators.CallOpts)
}

// AddValidator is a paid mutator transaction binding the contract method 0xeb6320c7.
//
// Solidity: function addValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_Validators *ValidatorsTransactor) AddValidator(opts *bind.TransactOpts, _validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "addValidator", _validator, _madID)
}

// AddValidator is a paid mutator transaction binding the contract method 0xeb6320c7.
//
// Solidity: function addValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_Validators *ValidatorsSession) AddValidator(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _Validators.Contract.AddValidator(&_Validators.TransactOpts, _validator, _madID)
}

// AddValidator is a paid mutator transaction binding the contract method 0xeb6320c7.
//
// Solidity: function addValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_Validators *ValidatorsTransactorSession) AddValidator(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _Validators.Contract.AddValidator(&_Validators.TransactOpts, _validator, _madID)
}

// Burn is a paid mutator transaction binding the contract method 0x89afcb44.
//
// Solidity: function burn(address who) returns()
func (_Validators *ValidatorsTransactor) Burn(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "burn", who)
}

// Burn is a paid mutator transaction binding the contract method 0x89afcb44.
//
// Solidity: function burn(address who) returns()
func (_Validators *ValidatorsSession) Burn(who common.Address) (*types.Transaction, error) {
	return _Validators.Contract.Burn(&_Validators.TransactOpts, who)
}

// Burn is a paid mutator transaction binding the contract method 0x89afcb44.
//
// Solidity: function burn(address who) returns()
func (_Validators *ValidatorsTransactorSession) Burn(who common.Address) (*types.Transaction, error) {
	return _Validators.Contract.Burn(&_Validators.TransactOpts, who)
}

// ConfirmValidators is a paid mutator transaction binding the contract method 0x35c6a163.
//
// Solidity: function confirmValidators() returns(bool)
func (_Validators *ValidatorsTransactor) ConfirmValidators(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "confirmValidators")
}

// ConfirmValidators is a paid mutator transaction binding the contract method 0x35c6a163.
//
// Solidity: function confirmValidators() returns(bool)
func (_Validators *ValidatorsSession) ConfirmValidators() (*types.Transaction, error) {
	return _Validators.Contract.ConfirmValidators(&_Validators.TransactOpts)
}

// ConfirmValidators is a paid mutator transaction binding the contract method 0x35c6a163.
//
// Solidity: function confirmValidators() returns(bool)
func (_Validators *ValidatorsTransactorSession) ConfirmValidators() (*types.Transaction, error) {
	return _Validators.Contract.ConfirmValidators(&_Validators.TransactOpts)
}

// Fine is a paid mutator transaction binding the contract method 0xdb1e4662.
//
// Solidity: function fine(address who, uint256 amount) returns(bool)
func (_Validators *ValidatorsTransactor) Fine(opts *bind.TransactOpts, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "fine", who, amount)
}

// Fine is a paid mutator transaction binding the contract method 0xdb1e4662.
//
// Solidity: function fine(address who, uint256 amount) returns(bool)
func (_Validators *ValidatorsSession) Fine(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.Fine(&_Validators.TransactOpts, who, amount)
}

// Fine is a paid mutator transaction binding the contract method 0xdb1e4662.
//
// Solidity: function fine(address who, uint256 amount) returns(bool)
func (_Validators *ValidatorsTransactorSession) Fine(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.Fine(&_Validators.TransactOpts, who, amount)
}

// InitializeParticipants is a paid mutator transaction binding the contract method 0xee8420dd.
//
// Solidity: function initializeParticipants(address registry) returns()
func (_Validators *ValidatorsTransactor) InitializeParticipants(opts *bind.TransactOpts, registry common.Address) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "initializeParticipants", registry)
}

// InitializeParticipants is a paid mutator transaction binding the contract method 0xee8420dd.
//
// Solidity: function initializeParticipants(address registry) returns()
func (_Validators *ValidatorsSession) InitializeParticipants(registry common.Address) (*types.Transaction, error) {
	return _Validators.Contract.InitializeParticipants(&_Validators.TransactOpts, registry)
}

// InitializeParticipants is a paid mutator transaction binding the contract method 0xee8420dd.
//
// Solidity: function initializeParticipants(address registry) returns()
func (_Validators *ValidatorsTransactorSession) InitializeParticipants(registry common.Address) (*types.Transaction, error) {
	return _Validators.Contract.InitializeParticipants(&_Validators.TransactOpts, registry)
}

// InitializeSnapshots is a paid mutator transaction binding the contract method 0x20d9a246.
//
// Solidity: function initializeSnapshots(address registry) returns()
func (_Validators *ValidatorsTransactor) InitializeSnapshots(opts *bind.TransactOpts, registry common.Address) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "initializeSnapshots", registry)
}

// InitializeSnapshots is a paid mutator transaction binding the contract method 0x20d9a246.
//
// Solidity: function initializeSnapshots(address registry) returns()
func (_Validators *ValidatorsSession) InitializeSnapshots(registry common.Address) (*types.Transaction, error) {
	return _Validators.Contract.InitializeSnapshots(&_Validators.TransactOpts, registry)
}

// InitializeSnapshots is a paid mutator transaction binding the contract method 0x20d9a246.
//
// Solidity: function initializeSnapshots(address registry) returns()
func (_Validators *ValidatorsTransactorSession) InitializeSnapshots(registry common.Address) (*types.Transaction, error) {
	return _Validators.Contract.InitializeSnapshots(&_Validators.TransactOpts, registry)
}

// InitializeStaking is a paid mutator transaction binding the contract method 0x04ad7a83.
//
// Solidity: function initializeStaking(address registry) returns()
func (_Validators *ValidatorsTransactor) InitializeStaking(opts *bind.TransactOpts, registry common.Address) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "initializeStaking", registry)
}

// InitializeStaking is a paid mutator transaction binding the contract method 0x04ad7a83.
//
// Solidity: function initializeStaking(address registry) returns()
func (_Validators *ValidatorsSession) InitializeStaking(registry common.Address) (*types.Transaction, error) {
	return _Validators.Contract.InitializeStaking(&_Validators.TransactOpts, registry)
}

// InitializeStaking is a paid mutator transaction binding the contract method 0x04ad7a83.
//
// Solidity: function initializeStaking(address registry) returns()
func (_Validators *ValidatorsTransactorSession) InitializeStaking(registry common.Address) (*types.Transaction, error) {
	return _Validators.Contract.InitializeStaking(&_Validators.TransactOpts, registry)
}

// LockRewardFor is a paid mutator transaction binding the contract method 0x0ddb07ad.
//
// Solidity: function lockRewardFor(address who, uint256 amountReward, uint256 unlockEpoch) returns(bool)
func (_Validators *ValidatorsTransactor) LockRewardFor(opts *bind.TransactOpts, who common.Address, amountReward *big.Int, unlockEpoch *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "lockRewardFor", who, amountReward, unlockEpoch)
}

// LockRewardFor is a paid mutator transaction binding the contract method 0x0ddb07ad.
//
// Solidity: function lockRewardFor(address who, uint256 amountReward, uint256 unlockEpoch) returns(bool)
func (_Validators *ValidatorsSession) LockRewardFor(who common.Address, amountReward *big.Int, unlockEpoch *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.LockRewardFor(&_Validators.TransactOpts, who, amountReward, unlockEpoch)
}

// LockRewardFor is a paid mutator transaction binding the contract method 0x0ddb07ad.
//
// Solidity: function lockRewardFor(address who, uint256 amountReward, uint256 unlockEpoch) returns(bool)
func (_Validators *ValidatorsTransactorSession) LockRewardFor(who common.Address, amountReward *big.Int, unlockEpoch *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.LockRewardFor(&_Validators.TransactOpts, who, amountReward, unlockEpoch)
}

// LockStake is a paid mutator transaction binding the contract method 0xf50ddb67.
//
// Solidity: function lockStake(uint256 amount) returns(bool)
func (_Validators *ValidatorsTransactor) LockStake(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "lockStake", amount)
}

// LockStake is a paid mutator transaction binding the contract method 0xf50ddb67.
//
// Solidity: function lockStake(uint256 amount) returns(bool)
func (_Validators *ValidatorsSession) LockStake(amount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.LockStake(&_Validators.TransactOpts, amount)
}

// LockStake is a paid mutator transaction binding the contract method 0xf50ddb67.
//
// Solidity: function lockStake(uint256 amount) returns(bool)
func (_Validators *ValidatorsTransactorSession) LockStake(amount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.LockStake(&_Validators.TransactOpts, amount)
}

// LockStakeFor is a paid mutator transaction binding the contract method 0x461cbdcf.
//
// Solidity: function lockStakeFor(address who, uint256 amount) returns(bool)
func (_Validators *ValidatorsTransactor) LockStakeFor(opts *bind.TransactOpts, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "lockStakeFor", who, amount)
}

// LockStakeFor is a paid mutator transaction binding the contract method 0x461cbdcf.
//
// Solidity: function lockStakeFor(address who, uint256 amount) returns(bool)
func (_Validators *ValidatorsSession) LockStakeFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.LockStakeFor(&_Validators.TransactOpts, who, amount)
}

// LockStakeFor is a paid mutator transaction binding the contract method 0x461cbdcf.
//
// Solidity: function lockStakeFor(address who, uint256 amount) returns(bool)
func (_Validators *ValidatorsTransactorSession) LockStakeFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.LockStakeFor(&_Validators.TransactOpts, who, amount)
}

// MajorFine is a paid mutator transaction binding the contract method 0x57b4f82a.
//
// Solidity: function majorFine(address who) returns()
func (_Validators *ValidatorsTransactor) MajorFine(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "majorFine", who)
}

// MajorFine is a paid mutator transaction binding the contract method 0x57b4f82a.
//
// Solidity: function majorFine(address who) returns()
func (_Validators *ValidatorsSession) MajorFine(who common.Address) (*types.Transaction, error) {
	return _Validators.Contract.MajorFine(&_Validators.TransactOpts, who)
}

// MajorFine is a paid mutator transaction binding the contract method 0x57b4f82a.
//
// Solidity: function majorFine(address who) returns()
func (_Validators *ValidatorsTransactorSession) MajorFine(who common.Address) (*types.Transaction, error) {
	return _Validators.Contract.MajorFine(&_Validators.TransactOpts, who)
}

// MinorFine is a paid mutator transaction binding the contract method 0xd2a2c55c.
//
// Solidity: function minorFine(address who) returns()
func (_Validators *ValidatorsTransactor) MinorFine(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "minorFine", who)
}

// MinorFine is a paid mutator transaction binding the contract method 0xd2a2c55c.
//
// Solidity: function minorFine(address who) returns()
func (_Validators *ValidatorsSession) MinorFine(who common.Address) (*types.Transaction, error) {
	return _Validators.Contract.MinorFine(&_Validators.TransactOpts, who)
}

// MinorFine is a paid mutator transaction binding the contract method 0xd2a2c55c.
//
// Solidity: function minorFine(address who) returns()
func (_Validators *ValidatorsTransactorSession) MinorFine(who common.Address) (*types.Transaction, error) {
	return _Validators.Contract.MinorFine(&_Validators.TransactOpts, who)
}

// RemoveValidator is a paid mutator transaction binding the contract method 0x844469b2.
//
// Solidity: function removeValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_Validators *ValidatorsTransactor) RemoveValidator(opts *bind.TransactOpts, _validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "removeValidator", _validator, _madID)
}

// RemoveValidator is a paid mutator transaction binding the contract method 0x844469b2.
//
// Solidity: function removeValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_Validators *ValidatorsSession) RemoveValidator(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _Validators.Contract.RemoveValidator(&_Validators.TransactOpts, _validator, _madID)
}

// RemoveValidator is a paid mutator transaction binding the contract method 0x844469b2.
//
// Solidity: function removeValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_Validators *ValidatorsTransactorSession) RemoveValidator(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _Validators.Contract.RemoveValidator(&_Validators.TransactOpts, _validator, _madID)
}

// RequestUnlockStake is a paid mutator transaction binding the contract method 0xaeaf8812.
//
// Solidity: function requestUnlockStake() returns()
func (_Validators *ValidatorsTransactor) RequestUnlockStake(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "requestUnlockStake")
}

// RequestUnlockStake is a paid mutator transaction binding the contract method 0xaeaf8812.
//
// Solidity: function requestUnlockStake() returns()
func (_Validators *ValidatorsSession) RequestUnlockStake() (*types.Transaction, error) {
	return _Validators.Contract.RequestUnlockStake(&_Validators.TransactOpts)
}

// RequestUnlockStake is a paid mutator transaction binding the contract method 0xaeaf8812.
//
// Solidity: function requestUnlockStake() returns()
func (_Validators *ValidatorsTransactorSession) RequestUnlockStake() (*types.Transaction, error) {
	return _Validators.Contract.RequestUnlockStake(&_Validators.TransactOpts)
}

// RequestUnlockStakeFor is a paid mutator transaction binding the contract method 0x4fcf2b72.
//
// Solidity: function requestUnlockStakeFor(address who) returns()
func (_Validators *ValidatorsTransactor) RequestUnlockStakeFor(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "requestUnlockStakeFor", who)
}

// RequestUnlockStakeFor is a paid mutator transaction binding the contract method 0x4fcf2b72.
//
// Solidity: function requestUnlockStakeFor(address who) returns()
func (_Validators *ValidatorsSession) RequestUnlockStakeFor(who common.Address) (*types.Transaction, error) {
	return _Validators.Contract.RequestUnlockStakeFor(&_Validators.TransactOpts, who)
}

// RequestUnlockStakeFor is a paid mutator transaction binding the contract method 0x4fcf2b72.
//
// Solidity: function requestUnlockStakeFor(address who) returns()
func (_Validators *ValidatorsTransactorSession) RequestUnlockStakeFor(who common.Address) (*types.Transaction, error) {
	return _Validators.Contract.RequestUnlockStakeFor(&_Validators.TransactOpts, who)
}

// SetChainId is a paid mutator transaction binding the contract method 0xa179f124.
//
// Solidity: function setChainId(uint32 _chainId) returns()
func (_Validators *ValidatorsTransactor) SetChainId(opts *bind.TransactOpts, _chainId uint32) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "setChainId", _chainId)
}

// SetChainId is a paid mutator transaction binding the contract method 0xa179f124.
//
// Solidity: function setChainId(uint32 _chainId) returns()
func (_Validators *ValidatorsSession) SetChainId(_chainId uint32) (*types.Transaction, error) {
	return _Validators.Contract.SetChainId(&_Validators.TransactOpts, _chainId)
}

// SetChainId is a paid mutator transaction binding the contract method 0xa179f124.
//
// Solidity: function setChainId(uint32 _chainId) returns()
func (_Validators *ValidatorsTransactorSession) SetChainId(_chainId uint32) (*types.Transaction, error) {
	return _Validators.Contract.SetChainId(&_Validators.TransactOpts, _chainId)
}

// SetEpoch is a paid mutator transaction binding the contract method 0x0ceb2cef.
//
// Solidity: function setEpoch(uint256 ns) returns()
func (_Validators *ValidatorsTransactor) SetEpoch(opts *bind.TransactOpts, ns *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "setEpoch", ns)
}

// SetEpoch is a paid mutator transaction binding the contract method 0x0ceb2cef.
//
// Solidity: function setEpoch(uint256 ns) returns()
func (_Validators *ValidatorsSession) SetEpoch(ns *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetEpoch(&_Validators.TransactOpts, ns)
}

// SetEpoch is a paid mutator transaction binding the contract method 0x0ceb2cef.
//
// Solidity: function setEpoch(uint256 ns) returns()
func (_Validators *ValidatorsTransactorSession) SetEpoch(ns *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetEpoch(&_Validators.TransactOpts, ns)
}

// SetEpochDelay is a paid mutator transaction binding the contract method 0xbd695a43.
//
// Solidity: function setEpochDelay(uint256 _epochDelay) returns()
func (_Validators *ValidatorsTransactor) SetEpochDelay(opts *bind.TransactOpts, _epochDelay *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "setEpochDelay", _epochDelay)
}

// SetEpochDelay is a paid mutator transaction binding the contract method 0xbd695a43.
//
// Solidity: function setEpochDelay(uint256 _epochDelay) returns()
func (_Validators *ValidatorsSession) SetEpochDelay(_epochDelay *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetEpochDelay(&_Validators.TransactOpts, _epochDelay)
}

// SetEpochDelay is a paid mutator transaction binding the contract method 0xbd695a43.
//
// Solidity: function setEpochDelay(uint256 _epochDelay) returns()
func (_Validators *ValidatorsTransactorSession) SetEpochDelay(_epochDelay *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetEpochDelay(&_Validators.TransactOpts, _epochDelay)
}

// SetMajorStakeFine is a paid mutator transaction binding the contract method 0x78146c2f.
//
// Solidity: function setMajorStakeFine(uint256 _majorStakeFine) returns()
func (_Validators *ValidatorsTransactor) SetMajorStakeFine(opts *bind.TransactOpts, _majorStakeFine *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "setMajorStakeFine", _majorStakeFine)
}

// SetMajorStakeFine is a paid mutator transaction binding the contract method 0x78146c2f.
//
// Solidity: function setMajorStakeFine(uint256 _majorStakeFine) returns()
func (_Validators *ValidatorsSession) SetMajorStakeFine(_majorStakeFine *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetMajorStakeFine(&_Validators.TransactOpts, _majorStakeFine)
}

// SetMajorStakeFine is a paid mutator transaction binding the contract method 0x78146c2f.
//
// Solidity: function setMajorStakeFine(uint256 _majorStakeFine) returns()
func (_Validators *ValidatorsTransactorSession) SetMajorStakeFine(_majorStakeFine *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetMajorStakeFine(&_Validators.TransactOpts, _majorStakeFine)
}

// SetMinEthSnapshotSize is a paid mutator transaction binding the contract method 0x0d81dce4.
//
// Solidity: function setMinEthSnapshotSize(uint256 _minSize) returns()
func (_Validators *ValidatorsTransactor) SetMinEthSnapshotSize(opts *bind.TransactOpts, _minSize *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "setMinEthSnapshotSize", _minSize)
}

// SetMinEthSnapshotSize is a paid mutator transaction binding the contract method 0x0d81dce4.
//
// Solidity: function setMinEthSnapshotSize(uint256 _minSize) returns()
func (_Validators *ValidatorsSession) SetMinEthSnapshotSize(_minSize *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetMinEthSnapshotSize(&_Validators.TransactOpts, _minSize)
}

// SetMinEthSnapshotSize is a paid mutator transaction binding the contract method 0x0d81dce4.
//
// Solidity: function setMinEthSnapshotSize(uint256 _minSize) returns()
func (_Validators *ValidatorsTransactorSession) SetMinEthSnapshotSize(_minSize *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetMinEthSnapshotSize(&_Validators.TransactOpts, _minSize)
}

// SetMinMadSnapshotSize is a paid mutator transaction binding the contract method 0x99e33e3d.
//
// Solidity: function setMinMadSnapshotSize(uint256 _minSize) returns()
func (_Validators *ValidatorsTransactor) SetMinMadSnapshotSize(opts *bind.TransactOpts, _minSize *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "setMinMadSnapshotSize", _minSize)
}

// SetMinMadSnapshotSize is a paid mutator transaction binding the contract method 0x99e33e3d.
//
// Solidity: function setMinMadSnapshotSize(uint256 _minSize) returns()
func (_Validators *ValidatorsSession) SetMinMadSnapshotSize(_minSize *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetMinMadSnapshotSize(&_Validators.TransactOpts, _minSize)
}

// SetMinMadSnapshotSize is a paid mutator transaction binding the contract method 0x99e33e3d.
//
// Solidity: function setMinMadSnapshotSize(uint256 _minSize) returns()
func (_Validators *ValidatorsTransactorSession) SetMinMadSnapshotSize(_minSize *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetMinMadSnapshotSize(&_Validators.TransactOpts, _minSize)
}

// SetMinimumStake is a paid mutator transaction binding the contract method 0x233e9903.
//
// Solidity: function setMinimumStake(uint256 _minimumStake) returns()
func (_Validators *ValidatorsTransactor) SetMinimumStake(opts *bind.TransactOpts, _minimumStake *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "setMinimumStake", _minimumStake)
}

// SetMinimumStake is a paid mutator transaction binding the contract method 0x233e9903.
//
// Solidity: function setMinimumStake(uint256 _minimumStake) returns()
func (_Validators *ValidatorsSession) SetMinimumStake(_minimumStake *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetMinimumStake(&_Validators.TransactOpts, _minimumStake)
}

// SetMinimumStake is a paid mutator transaction binding the contract method 0x233e9903.
//
// Solidity: function setMinimumStake(uint256 _minimumStake) returns()
func (_Validators *ValidatorsTransactorSession) SetMinimumStake(_minimumStake *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetMinimumStake(&_Validators.TransactOpts, _minimumStake)
}

// SetMinorStakeFine is a paid mutator transaction binding the contract method 0x29693c5c.
//
// Solidity: function setMinorStakeFine(uint256 _minorStakeFine) returns()
func (_Validators *ValidatorsTransactor) SetMinorStakeFine(opts *bind.TransactOpts, _minorStakeFine *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "setMinorStakeFine", _minorStakeFine)
}

// SetMinorStakeFine is a paid mutator transaction binding the contract method 0x29693c5c.
//
// Solidity: function setMinorStakeFine(uint256 _minorStakeFine) returns()
func (_Validators *ValidatorsSession) SetMinorStakeFine(_minorStakeFine *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetMinorStakeFine(&_Validators.TransactOpts, _minorStakeFine)
}

// SetMinorStakeFine is a paid mutator transaction binding the contract method 0x29693c5c.
//
// Solidity: function setMinorStakeFine(uint256 _minorStakeFine) returns()
func (_Validators *ValidatorsTransactorSession) SetMinorStakeFine(_minorStakeFine *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetMinorStakeFine(&_Validators.TransactOpts, _minorStakeFine)
}

// SetRewardAmount is a paid mutator transaction binding the contract method 0xa8a65a78.
//
// Solidity: function setRewardAmount(uint256 _rewardAmount) returns()
func (_Validators *ValidatorsTransactor) SetRewardAmount(opts *bind.TransactOpts, _rewardAmount *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "setRewardAmount", _rewardAmount)
}

// SetRewardAmount is a paid mutator transaction binding the contract method 0xa8a65a78.
//
// Solidity: function setRewardAmount(uint256 _rewardAmount) returns()
func (_Validators *ValidatorsSession) SetRewardAmount(_rewardAmount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetRewardAmount(&_Validators.TransactOpts, _rewardAmount)
}

// SetRewardAmount is a paid mutator transaction binding the contract method 0xa8a65a78.
//
// Solidity: function setRewardAmount(uint256 _rewardAmount) returns()
func (_Validators *ValidatorsTransactorSession) SetRewardAmount(_rewardAmount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetRewardAmount(&_Validators.TransactOpts, _rewardAmount)
}

// SetRewardBonus is a paid mutator transaction binding the contract method 0xf95d80fa.
//
// Solidity: function setRewardBonus(uint256 _rewardBonus) returns()
func (_Validators *ValidatorsTransactor) SetRewardBonus(opts *bind.TransactOpts, _rewardBonus *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "setRewardBonus", _rewardBonus)
}

// SetRewardBonus is a paid mutator transaction binding the contract method 0xf95d80fa.
//
// Solidity: function setRewardBonus(uint256 _rewardBonus) returns()
func (_Validators *ValidatorsSession) SetRewardBonus(_rewardBonus *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetRewardBonus(&_Validators.TransactOpts, _rewardBonus)
}

// SetRewardBonus is a paid mutator transaction binding the contract method 0xf95d80fa.
//
// Solidity: function setRewardBonus(uint256 _rewardBonus) returns()
func (_Validators *ValidatorsTransactorSession) SetRewardBonus(_rewardBonus *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetRewardBonus(&_Validators.TransactOpts, _rewardBonus)
}

// SetValidatorMaxCount is a paid mutator transaction binding the contract method 0x2cab37f7.
//
// Solidity: function setValidatorMaxCount(uint8 max) returns()
func (_Validators *ValidatorsTransactor) SetValidatorMaxCount(opts *bind.TransactOpts, max uint8) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "setValidatorMaxCount", max)
}

// SetValidatorMaxCount is a paid mutator transaction binding the contract method 0x2cab37f7.
//
// Solidity: function setValidatorMaxCount(uint8 max) returns()
func (_Validators *ValidatorsSession) SetValidatorMaxCount(max uint8) (*types.Transaction, error) {
	return _Validators.Contract.SetValidatorMaxCount(&_Validators.TransactOpts, max)
}

// SetValidatorMaxCount is a paid mutator transaction binding the contract method 0x2cab37f7.
//
// Solidity: function setValidatorMaxCount(uint8 max) returns()
func (_Validators *ValidatorsTransactorSession) SetValidatorMaxCount(max uint8) (*types.Transaction, error) {
	return _Validators.Contract.SetValidatorMaxCount(&_Validators.TransactOpts, max)
}

// Snapshot is a paid mutator transaction binding the contract method 0x08ca1f25.
//
// Solidity: function snapshot(bytes _signatureGroup, bytes _bclaims) returns(bool)
func (_Validators *ValidatorsTransactor) Snapshot(opts *bind.TransactOpts, _signatureGroup []byte, _bclaims []byte) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "snapshot", _signatureGroup, _bclaims)
}

// Snapshot is a paid mutator transaction binding the contract method 0x08ca1f25.
//
// Solidity: function snapshot(bytes _signatureGroup, bytes _bclaims) returns(bool)
func (_Validators *ValidatorsSession) Snapshot(_signatureGroup []byte, _bclaims []byte) (*types.Transaction, error) {
	return _Validators.Contract.Snapshot(&_Validators.TransactOpts, _signatureGroup, _bclaims)
}

// Snapshot is a paid mutator transaction binding the contract method 0x08ca1f25.
//
// Solidity: function snapshot(bytes _signatureGroup, bytes _bclaims) returns(bool)
func (_Validators *ValidatorsTransactorSession) Snapshot(_signatureGroup []byte, _bclaims []byte) (*types.Transaction, error) {
	return _Validators.Contract.Snapshot(&_Validators.TransactOpts, _signatureGroup, _bclaims)
}

// UnlockReward is a paid mutator transaction binding the contract method 0xf1b7f4bf.
//
// Solidity: function unlockReward() returns(bool)
func (_Validators *ValidatorsTransactor) UnlockReward(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "unlockReward")
}

// UnlockReward is a paid mutator transaction binding the contract method 0xf1b7f4bf.
//
// Solidity: function unlockReward() returns(bool)
func (_Validators *ValidatorsSession) UnlockReward() (*types.Transaction, error) {
	return _Validators.Contract.UnlockReward(&_Validators.TransactOpts)
}

// UnlockReward is a paid mutator transaction binding the contract method 0xf1b7f4bf.
//
// Solidity: function unlockReward() returns(bool)
func (_Validators *ValidatorsTransactorSession) UnlockReward() (*types.Transaction, error) {
	return _Validators.Contract.UnlockReward(&_Validators.TransactOpts)
}

// UnlockRewardFor is a paid mutator transaction binding the contract method 0x7f91bd69.
//
// Solidity: function unlockRewardFor(address who) returns(bool)
func (_Validators *ValidatorsTransactor) UnlockRewardFor(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "unlockRewardFor", who)
}

// UnlockRewardFor is a paid mutator transaction binding the contract method 0x7f91bd69.
//
// Solidity: function unlockRewardFor(address who) returns(bool)
func (_Validators *ValidatorsSession) UnlockRewardFor(who common.Address) (*types.Transaction, error) {
	return _Validators.Contract.UnlockRewardFor(&_Validators.TransactOpts, who)
}

// UnlockRewardFor is a paid mutator transaction binding the contract method 0x7f91bd69.
//
// Solidity: function unlockRewardFor(address who) returns(bool)
func (_Validators *ValidatorsTransactorSession) UnlockRewardFor(who common.Address) (*types.Transaction, error) {
	return _Validators.Contract.UnlockRewardFor(&_Validators.TransactOpts, who)
}

// UnlockStake is a paid mutator transaction binding the contract method 0xecd8c06a.
//
// Solidity: function unlockStake(uint256 amount) returns(bool)
func (_Validators *ValidatorsTransactor) UnlockStake(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "unlockStake", amount)
}

// UnlockStake is a paid mutator transaction binding the contract method 0xecd8c06a.
//
// Solidity: function unlockStake(uint256 amount) returns(bool)
func (_Validators *ValidatorsSession) UnlockStake(amount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.UnlockStake(&_Validators.TransactOpts, amount)
}

// UnlockStake is a paid mutator transaction binding the contract method 0xecd8c06a.
//
// Solidity: function unlockStake(uint256 amount) returns(bool)
func (_Validators *ValidatorsTransactorSession) UnlockStake(amount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.UnlockStake(&_Validators.TransactOpts, amount)
}

// UnlockStakeFor is a paid mutator transaction binding the contract method 0xe29dda92.
//
// Solidity: function unlockStakeFor(address who, uint256 amount) returns(bool)
func (_Validators *ValidatorsTransactor) UnlockStakeFor(opts *bind.TransactOpts, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "unlockStakeFor", who, amount)
}

// UnlockStakeFor is a paid mutator transaction binding the contract method 0xe29dda92.
//
// Solidity: function unlockStakeFor(address who, uint256 amount) returns(bool)
func (_Validators *ValidatorsSession) UnlockStakeFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.UnlockStakeFor(&_Validators.TransactOpts, who, amount)
}

// UnlockStakeFor is a paid mutator transaction binding the contract method 0xe29dda92.
//
// Solidity: function unlockStakeFor(address who, uint256 amount) returns(bool)
func (_Validators *ValidatorsTransactorSession) UnlockStakeFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.UnlockStakeFor(&_Validators.TransactOpts, who, amount)
}

// ValidatorCount is a paid mutator transaction binding the contract method 0x0f43a677.
//
// Solidity: function validatorCount() returns(uint8)
func (_Validators *ValidatorsTransactor) ValidatorCount(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "validatorCount")
}

// ValidatorCount is a paid mutator transaction binding the contract method 0x0f43a677.
//
// Solidity: function validatorCount() returns(uint8)
func (_Validators *ValidatorsSession) ValidatorCount() (*types.Transaction, error) {
	return _Validators.Contract.ValidatorCount(&_Validators.TransactOpts)
}

// ValidatorCount is a paid mutator transaction binding the contract method 0x0f43a677.
//
// Solidity: function validatorCount() returns(uint8)
func (_Validators *ValidatorsTransactorSession) ValidatorCount() (*types.Transaction, error) {
	return _Validators.Contract.ValidatorCount(&_Validators.TransactOpts)
}

// ValidatorMaxCount is a paid mutator transaction binding the contract method 0x09f0d45d.
//
// Solidity: function validatorMaxCount() returns(uint8)
func (_Validators *ValidatorsTransactor) ValidatorMaxCount(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "validatorMaxCount")
}

// ValidatorMaxCount is a paid mutator transaction binding the contract method 0x09f0d45d.
//
// Solidity: function validatorMaxCount() returns(uint8)
func (_Validators *ValidatorsSession) ValidatorMaxCount() (*types.Transaction, error) {
	return _Validators.Contract.ValidatorMaxCount(&_Validators.TransactOpts)
}

// ValidatorMaxCount is a paid mutator transaction binding the contract method 0x09f0d45d.
//
// Solidity: function validatorMaxCount() returns(uint8)
func (_Validators *ValidatorsTransactorSession) ValidatorMaxCount() (*types.Transaction, error) {
	return _Validators.Contract.ValidatorMaxCount(&_Validators.TransactOpts)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns(bool)
func (_Validators *ValidatorsTransactor) Withdraw(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "withdraw", amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns(bool)
func (_Validators *ValidatorsSession) Withdraw(amount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.Withdraw(&_Validators.TransactOpts, amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns(bool)
func (_Validators *ValidatorsTransactorSession) Withdraw(amount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.Withdraw(&_Validators.TransactOpts, amount)
}

// WithdrawFor is a paid mutator transaction binding the contract method 0xdb518db2.
//
// Solidity: function withdrawFor(address who, uint256 amount) returns(bool)
func (_Validators *ValidatorsTransactor) WithdrawFor(opts *bind.TransactOpts, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "withdrawFor", who, amount)
}

// WithdrawFor is a paid mutator transaction binding the contract method 0xdb518db2.
//
// Solidity: function withdrawFor(address who, uint256 amount) returns(bool)
func (_Validators *ValidatorsSession) WithdrawFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.WithdrawFor(&_Validators.TransactOpts, who, amount)
}

// WithdrawFor is a paid mutator transaction binding the contract method 0xdb518db2.
//
// Solidity: function withdrawFor(address who, uint256 amount) returns(bool)
func (_Validators *ValidatorsTransactorSession) WithdrawFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.WithdrawFor(&_Validators.TransactOpts, who, amount)
}

// WithdrawReward is a paid mutator transaction binding the contract method 0x523a3f08.
//
// Solidity: function withdrawReward(uint256 amount) returns(bool)
func (_Validators *ValidatorsTransactor) WithdrawReward(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "withdrawReward", amount)
}

// WithdrawReward is a paid mutator transaction binding the contract method 0x523a3f08.
//
// Solidity: function withdrawReward(uint256 amount) returns(bool)
func (_Validators *ValidatorsSession) WithdrawReward(amount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.WithdrawReward(&_Validators.TransactOpts, amount)
}

// WithdrawReward is a paid mutator transaction binding the contract method 0x523a3f08.
//
// Solidity: function withdrawReward(uint256 amount) returns(bool)
func (_Validators *ValidatorsTransactorSession) WithdrawReward(amount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.WithdrawReward(&_Validators.TransactOpts, amount)
}

// ValidatorsBurntStakeIterator is returned from FilterBurntStake and is used to iterate over the raw logs and unpacked data for BurntStake events raised by the Validators contract.
type ValidatorsBurntStakeIterator struct {
	Event *ValidatorsBurntStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsBurntStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsBurntStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsBurntStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsBurntStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsBurntStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsBurntStake represents a BurntStake event raised by the Validators contract.
type ValidatorsBurntStake struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBurntStake is a free log retrieval operation binding the contract event 0x54420ac6a7570cfba30d2f88982f0749811f67103de3a63ad8b82cb754e8680e.
//
// Solidity: event BurntStake(address indexed who, uint256 amount)
func (_Validators *ValidatorsFilterer) FilterBurntStake(opts *bind.FilterOpts, who []common.Address) (*ValidatorsBurntStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Validators.contract.FilterLogs(opts, "BurntStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsBurntStakeIterator{contract: _Validators.contract, event: "BurntStake", logs: logs, sub: sub}, nil
}

// WatchBurntStake is a free log subscription operation binding the contract event 0x54420ac6a7570cfba30d2f88982f0749811f67103de3a63ad8b82cb754e8680e.
//
// Solidity: event BurntStake(address indexed who, uint256 amount)
func (_Validators *ValidatorsFilterer) WatchBurntStake(opts *bind.WatchOpts, sink chan<- *ValidatorsBurntStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Validators.contract.WatchLogs(opts, "BurntStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsBurntStake)
				if err := _Validators.contract.UnpackLog(event, "BurntStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurntStake is a log parse operation binding the contract event 0x54420ac6a7570cfba30d2f88982f0749811f67103de3a63ad8b82cb754e8680e.
//
// Solidity: event BurntStake(address indexed who, uint256 amount)
func (_Validators *ValidatorsFilterer) ParseBurntStake(log types.Log) (*ValidatorsBurntStake, error) {
	event := new(ValidatorsBurntStake)
	if err := _Validators.contract.UnpackLog(event, "BurntStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsFinedIterator is returned from FilterFined and is used to iterate over the raw logs and unpacked data for Fined events raised by the Validators contract.
type ValidatorsFinedIterator struct {
	Event *ValidatorsFined // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsFinedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsFined)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsFined)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsFinedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsFinedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsFined represents a Fined event raised by the Validators contract.
type ValidatorsFined struct {
	Who    common.Address
	Why    [32]byte
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterFined is a free log retrieval operation binding the contract event 0xf1254bf6cf04a475bd832353c2ccfc5e0d89e7b9c0f05a153ff897b6121b91e9.
//
// Solidity: event Fined(address indexed who, bytes32 why, uint256 amount)
func (_Validators *ValidatorsFilterer) FilterFined(opts *bind.FilterOpts, who []common.Address) (*ValidatorsFinedIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Validators.contract.FilterLogs(opts, "Fined", whoRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsFinedIterator{contract: _Validators.contract, event: "Fined", logs: logs, sub: sub}, nil
}

// WatchFined is a free log subscription operation binding the contract event 0xf1254bf6cf04a475bd832353c2ccfc5e0d89e7b9c0f05a153ff897b6121b91e9.
//
// Solidity: event Fined(address indexed who, bytes32 why, uint256 amount)
func (_Validators *ValidatorsFilterer) WatchFined(opts *bind.WatchOpts, sink chan<- *ValidatorsFined, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Validators.contract.WatchLogs(opts, "Fined", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsFined)
				if err := _Validators.contract.UnpackLog(event, "Fined", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFined is a log parse operation binding the contract event 0xf1254bf6cf04a475bd832353c2ccfc5e0d89e7b9c0f05a153ff897b6121b91e9.
//
// Solidity: event Fined(address indexed who, bytes32 why, uint256 amount)
func (_Validators *ValidatorsFilterer) ParseFined(log types.Log) (*ValidatorsFined, error) {
	event := new(ValidatorsFined)
	if err := _Validators.contract.UnpackLog(event, "Fined", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsKeyShareSubmissionIterator is returned from FilterKeyShareSubmission and is used to iterate over the raw logs and unpacked data for KeyShareSubmission events raised by the Validators contract.
type ValidatorsKeyShareSubmissionIterator struct {
	Event *ValidatorsKeyShareSubmission // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsKeyShareSubmissionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsKeyShareSubmission)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsKeyShareSubmission)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsKeyShareSubmissionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsKeyShareSubmissionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsKeyShareSubmission represents a KeyShareSubmission event raised by the Validators contract.
type ValidatorsKeyShareSubmission struct {
	Issuer                     common.Address
	KeyShareG1                 [2]*big.Int
	KeyShareG1CorrectnessProof [2]*big.Int
	KeyShareG2                 [4]*big.Int
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterKeyShareSubmission is a free log retrieval operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_Validators *ValidatorsFilterer) FilterKeyShareSubmission(opts *bind.FilterOpts) (*ValidatorsKeyShareSubmissionIterator, error) {

	logs, sub, err := _Validators.contract.FilterLogs(opts, "KeyShareSubmission")
	if err != nil {
		return nil, err
	}
	return &ValidatorsKeyShareSubmissionIterator{contract: _Validators.contract, event: "KeyShareSubmission", logs: logs, sub: sub}, nil
}

// WatchKeyShareSubmission is a free log subscription operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_Validators *ValidatorsFilterer) WatchKeyShareSubmission(opts *bind.WatchOpts, sink chan<- *ValidatorsKeyShareSubmission) (event.Subscription, error) {

	logs, sub, err := _Validators.contract.WatchLogs(opts, "KeyShareSubmission")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsKeyShareSubmission)
				if err := _Validators.contract.UnpackLog(event, "KeyShareSubmission", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyShareSubmission is a log parse operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_Validators *ValidatorsFilterer) ParseKeyShareSubmission(log types.Log) (*ValidatorsKeyShareSubmission, error) {
	event := new(ValidatorsKeyShareSubmission)
	if err := _Validators.contract.UnpackLog(event, "KeyShareSubmission", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsLockedRewardIterator is returned from FilterLockedReward and is used to iterate over the raw logs and unpacked data for LockedReward events raised by the Validators contract.
type ValidatorsLockedRewardIterator struct {
	Event *ValidatorsLockedReward // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsLockedRewardIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsLockedReward)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsLockedReward)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsLockedRewardIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsLockedRewardIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsLockedReward represents a LockedReward event raised by the Validators contract.
type ValidatorsLockedReward struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLockedReward is a free log retrieval operation binding the contract event 0x28dc9c0ffa672df041cad84edbee41508284600c9394bda0f8586d012c5e0915.
//
// Solidity: event LockedReward(address indexed who, uint256 amount)
func (_Validators *ValidatorsFilterer) FilterLockedReward(opts *bind.FilterOpts, who []common.Address) (*ValidatorsLockedRewardIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Validators.contract.FilterLogs(opts, "LockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsLockedRewardIterator{contract: _Validators.contract, event: "LockedReward", logs: logs, sub: sub}, nil
}

// WatchLockedReward is a free log subscription operation binding the contract event 0x28dc9c0ffa672df041cad84edbee41508284600c9394bda0f8586d012c5e0915.
//
// Solidity: event LockedReward(address indexed who, uint256 amount)
func (_Validators *ValidatorsFilterer) WatchLockedReward(opts *bind.WatchOpts, sink chan<- *ValidatorsLockedReward, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Validators.contract.WatchLogs(opts, "LockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsLockedReward)
				if err := _Validators.contract.UnpackLog(event, "LockedReward", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLockedReward is a log parse operation binding the contract event 0x28dc9c0ffa672df041cad84edbee41508284600c9394bda0f8586d012c5e0915.
//
// Solidity: event LockedReward(address indexed who, uint256 amount)
func (_Validators *ValidatorsFilterer) ParseLockedReward(log types.Log) (*ValidatorsLockedReward, error) {
	event := new(ValidatorsLockedReward)
	if err := _Validators.contract.UnpackLog(event, "LockedReward", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsLockedStakeIterator is returned from FilterLockedStake and is used to iterate over the raw logs and unpacked data for LockedStake events raised by the Validators contract.
type ValidatorsLockedStakeIterator struct {
	Event *ValidatorsLockedStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsLockedStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsLockedStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsLockedStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsLockedStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsLockedStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsLockedStake represents a LockedStake event raised by the Validators contract.
type ValidatorsLockedStake struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLockedStake is a free log retrieval operation binding the contract event 0x1de2f07b0a1c69916a8b25b889051644192307ea08444a2e11f8654d1db3ab0c.
//
// Solidity: event LockedStake(address indexed who, uint256 amount)
func (_Validators *ValidatorsFilterer) FilterLockedStake(opts *bind.FilterOpts, who []common.Address) (*ValidatorsLockedStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Validators.contract.FilterLogs(opts, "LockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsLockedStakeIterator{contract: _Validators.contract, event: "LockedStake", logs: logs, sub: sub}, nil
}

// WatchLockedStake is a free log subscription operation binding the contract event 0x1de2f07b0a1c69916a8b25b889051644192307ea08444a2e11f8654d1db3ab0c.
//
// Solidity: event LockedStake(address indexed who, uint256 amount)
func (_Validators *ValidatorsFilterer) WatchLockedStake(opts *bind.WatchOpts, sink chan<- *ValidatorsLockedStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Validators.contract.WatchLogs(opts, "LockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsLockedStake)
				if err := _Validators.contract.UnpackLog(event, "LockedStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLockedStake is a log parse operation binding the contract event 0x1de2f07b0a1c69916a8b25b889051644192307ea08444a2e11f8654d1db3ab0c.
//
// Solidity: event LockedStake(address indexed who, uint256 amount)
func (_Validators *ValidatorsFilterer) ParseLockedStake(log types.Log) (*ValidatorsLockedStake, error) {
	event := new(ValidatorsLockedStake)
	if err := _Validators.contract.UnpackLog(event, "LockedStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsRegistrationOpenIterator is returned from FilterRegistrationOpen and is used to iterate over the raw logs and unpacked data for RegistrationOpen events raised by the Validators contract.
type ValidatorsRegistrationOpenIterator struct {
	Event *ValidatorsRegistrationOpen // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsRegistrationOpenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsRegistrationOpen)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsRegistrationOpen)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsRegistrationOpenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsRegistrationOpenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsRegistrationOpen represents a RegistrationOpen event raised by the Validators contract.
type ValidatorsRegistrationOpen struct {
	DkgStarts              *big.Int
	RegistrationEnds       *big.Int
	ShareDistributionEnds  *big.Int
	DisputeEnds            *big.Int
	KeyShareSubmissionEnds *big.Int
	MpkSubmissionEnds      *big.Int
	GpkjSubmissionEnds     *big.Int
	GpkjDisputeEnds        *big.Int
	DkgComplete            *big.Int
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterRegistrationOpen is a free log retrieval operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_Validators *ValidatorsFilterer) FilterRegistrationOpen(opts *bind.FilterOpts) (*ValidatorsRegistrationOpenIterator, error) {

	logs, sub, err := _Validators.contract.FilterLogs(opts, "RegistrationOpen")
	if err != nil {
		return nil, err
	}
	return &ValidatorsRegistrationOpenIterator{contract: _Validators.contract, event: "RegistrationOpen", logs: logs, sub: sub}, nil
}

// WatchRegistrationOpen is a free log subscription operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_Validators *ValidatorsFilterer) WatchRegistrationOpen(opts *bind.WatchOpts, sink chan<- *ValidatorsRegistrationOpen) (event.Subscription, error) {

	logs, sub, err := _Validators.contract.WatchLogs(opts, "RegistrationOpen")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsRegistrationOpen)
				if err := _Validators.contract.UnpackLog(event, "RegistrationOpen", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistrationOpen is a log parse operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_Validators *ValidatorsFilterer) ParseRegistrationOpen(log types.Log) (*ValidatorsRegistrationOpen, error) {
	event := new(ValidatorsRegistrationOpen)
	if err := _Validators.contract.UnpackLog(event, "RegistrationOpen", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsRequestedUnlockStakeIterator is returned from FilterRequestedUnlockStake and is used to iterate over the raw logs and unpacked data for RequestedUnlockStake events raised by the Validators contract.
type ValidatorsRequestedUnlockStakeIterator struct {
	Event *ValidatorsRequestedUnlockStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsRequestedUnlockStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsRequestedUnlockStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsRequestedUnlockStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsRequestedUnlockStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsRequestedUnlockStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsRequestedUnlockStake represents a RequestedUnlockStake event raised by the Validators contract.
type ValidatorsRequestedUnlockStake struct {
	Who common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterRequestedUnlockStake is a free log retrieval operation binding the contract event 0x1fde0d8a6620647f5c7b5632a87b23101ba553c9b474caf1134fb24d92bf6ddc.
//
// Solidity: event RequestedUnlockStake(address indexed who)
func (_Validators *ValidatorsFilterer) FilterRequestedUnlockStake(opts *bind.FilterOpts, who []common.Address) (*ValidatorsRequestedUnlockStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Validators.contract.FilterLogs(opts, "RequestedUnlockStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsRequestedUnlockStakeIterator{contract: _Validators.contract, event: "RequestedUnlockStake", logs: logs, sub: sub}, nil
}

// WatchRequestedUnlockStake is a free log subscription operation binding the contract event 0x1fde0d8a6620647f5c7b5632a87b23101ba553c9b474caf1134fb24d92bf6ddc.
//
// Solidity: event RequestedUnlockStake(address indexed who)
func (_Validators *ValidatorsFilterer) WatchRequestedUnlockStake(opts *bind.WatchOpts, sink chan<- *ValidatorsRequestedUnlockStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Validators.contract.WatchLogs(opts, "RequestedUnlockStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsRequestedUnlockStake)
				if err := _Validators.contract.UnpackLog(event, "RequestedUnlockStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRequestedUnlockStake is a log parse operation binding the contract event 0x1fde0d8a6620647f5c7b5632a87b23101ba553c9b474caf1134fb24d92bf6ddc.
//
// Solidity: event RequestedUnlockStake(address indexed who)
func (_Validators *ValidatorsFilterer) ParseRequestedUnlockStake(log types.Log) (*ValidatorsRequestedUnlockStake, error) {
	event := new(ValidatorsRequestedUnlockStake)
	if err := _Validators.contract.UnpackLog(event, "RequestedUnlockStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsShareDistributionIterator is returned from FilterShareDistribution and is used to iterate over the raw logs and unpacked data for ShareDistribution events raised by the Validators contract.
type ValidatorsShareDistributionIterator struct {
	Event *ValidatorsShareDistribution // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsShareDistributionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsShareDistribution)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsShareDistribution)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsShareDistributionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsShareDistributionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsShareDistribution represents a ShareDistribution event raised by the Validators contract.
type ValidatorsShareDistribution struct {
	Issuer          common.Address
	Index           *big.Int
	EncryptedShares []*big.Int
	Commitments     [][2]*big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterShareDistribution is a free log retrieval operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_Validators *ValidatorsFilterer) FilterShareDistribution(opts *bind.FilterOpts) (*ValidatorsShareDistributionIterator, error) {

	logs, sub, err := _Validators.contract.FilterLogs(opts, "ShareDistribution")
	if err != nil {
		return nil, err
	}
	return &ValidatorsShareDistributionIterator{contract: _Validators.contract, event: "ShareDistribution", logs: logs, sub: sub}, nil
}

// WatchShareDistribution is a free log subscription operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_Validators *ValidatorsFilterer) WatchShareDistribution(opts *bind.WatchOpts, sink chan<- *ValidatorsShareDistribution) (event.Subscription, error) {

	logs, sub, err := _Validators.contract.WatchLogs(opts, "ShareDistribution")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsShareDistribution)
				if err := _Validators.contract.UnpackLog(event, "ShareDistribution", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseShareDistribution is a log parse operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_Validators *ValidatorsFilterer) ParseShareDistribution(log types.Log) (*ValidatorsShareDistribution, error) {
	event := new(ValidatorsShareDistribution)
	if err := _Validators.contract.UnpackLog(event, "ShareDistribution", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsSnapshotTakenIterator is returned from FilterSnapshotTaken and is used to iterate over the raw logs and unpacked data for SnapshotTaken events raised by the Validators contract.
type ValidatorsSnapshotTakenIterator struct {
	Event *ValidatorsSnapshotTaken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsSnapshotTakenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsSnapshotTaken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsSnapshotTaken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsSnapshotTakenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsSnapshotTakenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsSnapshotTaken represents a SnapshotTaken event raised by the Validators contract.
type ValidatorsSnapshotTaken struct {
	ChainId        uint32
	Epoch          *big.Int
	Height         uint32
	Validator      common.Address
	StartingETHDKG bool
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterSnapshotTaken is a free log retrieval operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_Validators *ValidatorsFilterer) FilterSnapshotTaken(opts *bind.FilterOpts, epoch []*big.Int, validator []common.Address) (*ValidatorsSnapshotTakenIterator, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Validators.contract.FilterLogs(opts, "SnapshotTaken", epochRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsSnapshotTakenIterator{contract: _Validators.contract, event: "SnapshotTaken", logs: logs, sub: sub}, nil
}

// WatchSnapshotTaken is a free log subscription operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_Validators *ValidatorsFilterer) WatchSnapshotTaken(opts *bind.WatchOpts, sink chan<- *ValidatorsSnapshotTaken, epoch []*big.Int, validator []common.Address) (event.Subscription, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Validators.contract.WatchLogs(opts, "SnapshotTaken", epochRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsSnapshotTaken)
				if err := _Validators.contract.UnpackLog(event, "SnapshotTaken", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSnapshotTaken is a log parse operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_Validators *ValidatorsFilterer) ParseSnapshotTaken(log types.Log) (*ValidatorsSnapshotTaken, error) {
	event := new(ValidatorsSnapshotTaken)
	if err := _Validators.contract.UnpackLog(event, "SnapshotTaken", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsUnlockedRewardIterator is returned from FilterUnlockedReward and is used to iterate over the raw logs and unpacked data for UnlockedReward events raised by the Validators contract.
type ValidatorsUnlockedRewardIterator struct {
	Event *ValidatorsUnlockedReward // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsUnlockedRewardIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsUnlockedReward)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsUnlockedReward)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsUnlockedRewardIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsUnlockedRewardIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsUnlockedReward represents a UnlockedReward event raised by the Validators contract.
type ValidatorsUnlockedReward struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterUnlockedReward is a free log retrieval operation binding the contract event 0x496a1c9a1a9ac29d87ecb4e563683ebd0ee80798869f36c86175059eb5dc7304.
//
// Solidity: event UnlockedReward(address indexed who, uint256 amount)
func (_Validators *ValidatorsFilterer) FilterUnlockedReward(opts *bind.FilterOpts, who []common.Address) (*ValidatorsUnlockedRewardIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Validators.contract.FilterLogs(opts, "UnlockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsUnlockedRewardIterator{contract: _Validators.contract, event: "UnlockedReward", logs: logs, sub: sub}, nil
}

// WatchUnlockedReward is a free log subscription operation binding the contract event 0x496a1c9a1a9ac29d87ecb4e563683ebd0ee80798869f36c86175059eb5dc7304.
//
// Solidity: event UnlockedReward(address indexed who, uint256 amount)
func (_Validators *ValidatorsFilterer) WatchUnlockedReward(opts *bind.WatchOpts, sink chan<- *ValidatorsUnlockedReward, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Validators.contract.WatchLogs(opts, "UnlockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsUnlockedReward)
				if err := _Validators.contract.UnpackLog(event, "UnlockedReward", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnlockedReward is a log parse operation binding the contract event 0x496a1c9a1a9ac29d87ecb4e563683ebd0ee80798869f36c86175059eb5dc7304.
//
// Solidity: event UnlockedReward(address indexed who, uint256 amount)
func (_Validators *ValidatorsFilterer) ParseUnlockedReward(log types.Log) (*ValidatorsUnlockedReward, error) {
	event := new(ValidatorsUnlockedReward)
	if err := _Validators.contract.UnpackLog(event, "UnlockedReward", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsUnlockedStakeIterator is returned from FilterUnlockedStake and is used to iterate over the raw logs and unpacked data for UnlockedStake events raised by the Validators contract.
type ValidatorsUnlockedStakeIterator struct {
	Event *ValidatorsUnlockedStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsUnlockedStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsUnlockedStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsUnlockedStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsUnlockedStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsUnlockedStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsUnlockedStake represents a UnlockedStake event raised by the Validators contract.
type ValidatorsUnlockedStake struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterUnlockedStake is a free log retrieval operation binding the contract event 0x252a696583e35c4d61332829d3bb2a8236f2500140258f089951799c9b999a9c.
//
// Solidity: event UnlockedStake(address indexed who, uint256 amount)
func (_Validators *ValidatorsFilterer) FilterUnlockedStake(opts *bind.FilterOpts, who []common.Address) (*ValidatorsUnlockedStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Validators.contract.FilterLogs(opts, "UnlockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsUnlockedStakeIterator{contract: _Validators.contract, event: "UnlockedStake", logs: logs, sub: sub}, nil
}

// WatchUnlockedStake is a free log subscription operation binding the contract event 0x252a696583e35c4d61332829d3bb2a8236f2500140258f089951799c9b999a9c.
//
// Solidity: event UnlockedStake(address indexed who, uint256 amount)
func (_Validators *ValidatorsFilterer) WatchUnlockedStake(opts *bind.WatchOpts, sink chan<- *ValidatorsUnlockedStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Validators.contract.WatchLogs(opts, "UnlockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsUnlockedStake)
				if err := _Validators.contract.UnpackLog(event, "UnlockedStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnlockedStake is a log parse operation binding the contract event 0x252a696583e35c4d61332829d3bb2a8236f2500140258f089951799c9b999a9c.
//
// Solidity: event UnlockedStake(address indexed who, uint256 amount)
func (_Validators *ValidatorsFilterer) ParseUnlockedStake(log types.Log) (*ValidatorsUnlockedStake, error) {
	event := new(ValidatorsUnlockedStake)
	if err := _Validators.contract.UnpackLog(event, "UnlockedStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsValidatorCreatedIterator is returned from FilterValidatorCreated and is used to iterate over the raw logs and unpacked data for ValidatorCreated events raised by the Validators contract.
type ValidatorsValidatorCreatedIterator struct {
	Event *ValidatorsValidatorCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsValidatorCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsValidatorCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsValidatorCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsValidatorCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsValidatorCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsValidatorCreated represents a ValidatorCreated event raised by the Validators contract.
type ValidatorsValidatorCreated struct {
	Validator common.Address
	Signer    common.Address
	MadID     [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorCreated is a free log retrieval operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_Validators *ValidatorsFilterer) FilterValidatorCreated(opts *bind.FilterOpts, validator []common.Address, signer []common.Address) (*ValidatorsValidatorCreatedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var signerRule []interface{}
	for _, signerItem := range signer {
		signerRule = append(signerRule, signerItem)
	}

	logs, sub, err := _Validators.contract.FilterLogs(opts, "ValidatorCreated", validatorRule, signerRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsValidatorCreatedIterator{contract: _Validators.contract, event: "ValidatorCreated", logs: logs, sub: sub}, nil
}

// WatchValidatorCreated is a free log subscription operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_Validators *ValidatorsFilterer) WatchValidatorCreated(opts *bind.WatchOpts, sink chan<- *ValidatorsValidatorCreated, validator []common.Address, signer []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var signerRule []interface{}
	for _, signerItem := range signer {
		signerRule = append(signerRule, signerItem)
	}

	logs, sub, err := _Validators.contract.WatchLogs(opts, "ValidatorCreated", validatorRule, signerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsValidatorCreated)
				if err := _Validators.contract.UnpackLog(event, "ValidatorCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorCreated is a log parse operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_Validators *ValidatorsFilterer) ParseValidatorCreated(log types.Log) (*ValidatorsValidatorCreated, error) {
	event := new(ValidatorsValidatorCreated)
	if err := _Validators.contract.UnpackLog(event, "ValidatorCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsValidatorJoinedIterator is returned from FilterValidatorJoined and is used to iterate over the raw logs and unpacked data for ValidatorJoined events raised by the Validators contract.
type ValidatorsValidatorJoinedIterator struct {
	Event *ValidatorsValidatorJoined // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsValidatorJoinedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsValidatorJoined)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsValidatorJoined)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsValidatorJoinedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsValidatorJoinedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsValidatorJoined represents a ValidatorJoined event raised by the Validators contract.
type ValidatorsValidatorJoined struct {
	Validator common.Address
	MadID     [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorJoined is a free log retrieval operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_Validators *ValidatorsFilterer) FilterValidatorJoined(opts *bind.FilterOpts, validator []common.Address) (*ValidatorsValidatorJoinedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Validators.contract.FilterLogs(opts, "ValidatorJoined", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsValidatorJoinedIterator{contract: _Validators.contract, event: "ValidatorJoined", logs: logs, sub: sub}, nil
}

// WatchValidatorJoined is a free log subscription operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_Validators *ValidatorsFilterer) WatchValidatorJoined(opts *bind.WatchOpts, sink chan<- *ValidatorsValidatorJoined, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Validators.contract.WatchLogs(opts, "ValidatorJoined", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsValidatorJoined)
				if err := _Validators.contract.UnpackLog(event, "ValidatorJoined", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorJoined is a log parse operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_Validators *ValidatorsFilterer) ParseValidatorJoined(log types.Log) (*ValidatorsValidatorJoined, error) {
	event := new(ValidatorsValidatorJoined)
	if err := _Validators.contract.UnpackLog(event, "ValidatorJoined", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsValidatorLeftIterator is returned from FilterValidatorLeft and is used to iterate over the raw logs and unpacked data for ValidatorLeft events raised by the Validators contract.
type ValidatorsValidatorLeftIterator struct {
	Event *ValidatorsValidatorLeft // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsValidatorLeftIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsValidatorLeft)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsValidatorLeft)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsValidatorLeftIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsValidatorLeftIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsValidatorLeft represents a ValidatorLeft event raised by the Validators contract.
type ValidatorsValidatorLeft struct {
	Validator common.Address
	PkHash    [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorLeft is a free log retrieval operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_Validators *ValidatorsFilterer) FilterValidatorLeft(opts *bind.FilterOpts, validator []common.Address) (*ValidatorsValidatorLeftIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Validators.contract.FilterLogs(opts, "ValidatorLeft", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsValidatorLeftIterator{contract: _Validators.contract, event: "ValidatorLeft", logs: logs, sub: sub}, nil
}

// WatchValidatorLeft is a free log subscription operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_Validators *ValidatorsFilterer) WatchValidatorLeft(opts *bind.WatchOpts, sink chan<- *ValidatorsValidatorLeft, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Validators.contract.WatchLogs(opts, "ValidatorLeft", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsValidatorLeft)
				if err := _Validators.contract.UnpackLog(event, "ValidatorLeft", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorLeft is a log parse operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_Validators *ValidatorsFilterer) ParseValidatorLeft(log types.Log) (*ValidatorsValidatorLeft, error) {
	event := new(ValidatorsValidatorLeft)
	if err := _Validators.contract.UnpackLog(event, "ValidatorLeft", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsValidatorMemberIterator is returned from FilterValidatorMember and is used to iterate over the raw logs and unpacked data for ValidatorMember events raised by the Validators contract.
type ValidatorsValidatorMemberIterator struct {
	Event *ValidatorsValidatorMember // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsValidatorMemberIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsValidatorMember)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsValidatorMember)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsValidatorMemberIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsValidatorMemberIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsValidatorMember represents a ValidatorMember event raised by the Validators contract.
type ValidatorsValidatorMember struct {
	Account common.Address
	Epoch   *big.Int
	Index   *big.Int
	Share0  *big.Int
	Share1  *big.Int
	Share2  *big.Int
	Share3  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterValidatorMember is a free log retrieval operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_Validators *ValidatorsFilterer) FilterValidatorMember(opts *bind.FilterOpts) (*ValidatorsValidatorMemberIterator, error) {

	logs, sub, err := _Validators.contract.FilterLogs(opts, "ValidatorMember")
	if err != nil {
		return nil, err
	}
	return &ValidatorsValidatorMemberIterator{contract: _Validators.contract, event: "ValidatorMember", logs: logs, sub: sub}, nil
}

// WatchValidatorMember is a free log subscription operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_Validators *ValidatorsFilterer) WatchValidatorMember(opts *bind.WatchOpts, sink chan<- *ValidatorsValidatorMember) (event.Subscription, error) {

	logs, sub, err := _Validators.contract.WatchLogs(opts, "ValidatorMember")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsValidatorMember)
				if err := _Validators.contract.UnpackLog(event, "ValidatorMember", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorMember is a log parse operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_Validators *ValidatorsFilterer) ParseValidatorMember(log types.Log) (*ValidatorsValidatorMember, error) {
	event := new(ValidatorsValidatorMember)
	if err := _Validators.contract.UnpackLog(event, "ValidatorMember", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsValidatorQueuedIterator is returned from FilterValidatorQueued and is used to iterate over the raw logs and unpacked data for ValidatorQueued events raised by the Validators contract.
type ValidatorsValidatorQueuedIterator struct {
	Event *ValidatorsValidatorQueued // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsValidatorQueuedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsValidatorQueued)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsValidatorQueued)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsValidatorQueuedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsValidatorQueuedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsValidatorQueued represents a ValidatorQueued event raised by the Validators contract.
type ValidatorsValidatorQueued struct {
	Validator common.Address
	PkHash    [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorQueued is a free log retrieval operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_Validators *ValidatorsFilterer) FilterValidatorQueued(opts *bind.FilterOpts, validator []common.Address) (*ValidatorsValidatorQueuedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Validators.contract.FilterLogs(opts, "ValidatorQueued", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsValidatorQueuedIterator{contract: _Validators.contract, event: "ValidatorQueued", logs: logs, sub: sub}, nil
}

// WatchValidatorQueued is a free log subscription operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_Validators *ValidatorsFilterer) WatchValidatorQueued(opts *bind.WatchOpts, sink chan<- *ValidatorsValidatorQueued, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Validators.contract.WatchLogs(opts, "ValidatorQueued", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsValidatorQueued)
				if err := _Validators.contract.UnpackLog(event, "ValidatorQueued", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorQueued is a log parse operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_Validators *ValidatorsFilterer) ParseValidatorQueued(log types.Log) (*ValidatorsValidatorQueued, error) {
	event := new(ValidatorsValidatorQueued)
	if err := _Validators.contract.UnpackLog(event, "ValidatorQueued", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsValidatorSetIterator is returned from FilterValidatorSet and is used to iterate over the raw logs and unpacked data for ValidatorSet events raised by the Validators contract.
type ValidatorsValidatorSetIterator struct {
	Event *ValidatorsValidatorSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsValidatorSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsValidatorSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsValidatorSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsValidatorSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsValidatorSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsValidatorSet represents a ValidatorSet event raised by the Validators contract.
type ValidatorsValidatorSet struct {
	ValidatorCount uint8
	Epoch          *big.Int
	EthHeight      uint32
	MadHeight      uint32
	GroupKey0      *big.Int
	GroupKey1      *big.Int
	GroupKey2      *big.Int
	GroupKey3      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterValidatorSet is a free log retrieval operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_Validators *ValidatorsFilterer) FilterValidatorSet(opts *bind.FilterOpts) (*ValidatorsValidatorSetIterator, error) {

	logs, sub, err := _Validators.contract.FilterLogs(opts, "ValidatorSet")
	if err != nil {
		return nil, err
	}
	return &ValidatorsValidatorSetIterator{contract: _Validators.contract, event: "ValidatorSet", logs: logs, sub: sub}, nil
}

// WatchValidatorSet is a free log subscription operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_Validators *ValidatorsFilterer) WatchValidatorSet(opts *bind.WatchOpts, sink chan<- *ValidatorsValidatorSet) (event.Subscription, error) {

	logs, sub, err := _Validators.contract.WatchLogs(opts, "ValidatorSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsValidatorSet)
				if err := _Validators.contract.UnpackLog(event, "ValidatorSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorSet is a log parse operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_Validators *ValidatorsFilterer) ParseValidatorSet(log types.Log) (*ValidatorsValidatorSet, error) {
	event := new(ValidatorsValidatorSet)
	if err := _Validators.contract.UnpackLog(event, "ValidatorSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsDiamondMetaData contains all meta data concerning the ValidatorsDiamond contract.
var ValidatorsDiamondMetaData = &bind.MetaData{
	ABI: "[{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
<<<<<<< Updated upstream
	Bin: "0x608060405234801561001057600080fd5b5060006100256102da60201b6101751760201c565b9050338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018160000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060006100d861030760201b6101481760201c565b905060006040516100e890610334565b604051809103906000f080158015610104573d6000803e3d6000fd5b5090508082600001600063208865cc60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508082600001600063ca5a0fae60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508082600001600063de380fbf60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050610341565b6000807f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90508091505090565b6000807f2031468f0c30f7087de4da9398818763b546d7f89935fa65485c24ff1df26bf390508091505090565b611306806105a583390190565b610255806103506000396000f3fe60806040523661000b57005b6000610015610148565b9050600081600001600080357fffffffff00000000000000000000000000000000000000000000000000000000167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610122576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610119906101ff565b60405180910390fd5b3660008037600080366000845af43d6000803e8060008114610143573d6000f35b3d6000fd5b6000807f2031468f0c30f7087de4da9398818763b546d7f89935fa65485c24ff1df26bf390508091505090565b6000807f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90508091505090565b600082825260208201905092915050565b7f6e6f20666163657420666f722073656c6563746f720000000000000000000000600082015250565b60006101e96015836101a2565b91506101f4826101b3565b602082019050919050565b60006020820190508181036000830152610218816101dc565b905091905056fea2646970667358221220161778328d874111992a885f98af4e4db7e048e68d6540c67821cab760cb790c64736f6c634300080b0033608060405234801561001057600080fd5b50600061002561007060201b610d441760201c565b9050338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061009d565b6000807f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90508091505090565b61125a806100ac6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063dc9780591161005b578063dc978059146100eb578063de380fbf14610107578063e348da1314610123578063fad8b32a1461013f57610088565b8063208865cc1461008d57806360536172146100a9578063ab033ea9146100b3578063ca5a0fae146100cf575b600080fd5b6100a760048036038101906100a29190610e59565b61015b565b005b6100b161037b565b005b6100cd60048036038101906100c89190610e99565b610486565b005b6100e960048036038101906100e49190610ec6565b610578565b005b61010560048036038101906101009190610e99565b61077c565b005b610121600480360381019061011c9190610e59565b61086e565b005b61013d60048036038101906101389190610e99565b610a8f565b005b61015960048036038101906101549190610e99565b610bee565b005b6000610165610d44565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166101f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ec90610f76565b60405180910390fd5b60006101ff610d71565b9050600073ffffffffffffffffffffffffffffffffffffffff16816000016000867bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146102e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102da90610fe2565b60405180910390fd5b82816000016000867bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b6000610385610d44565b90508060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610419576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041090611074565b60405180910390fd5b8060020160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000610490610d44565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610524576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051b90611106565b60405180910390fd5b600061052e610d44565b9050828160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6000610582610d44565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610612576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060990610f76565b60405180910390fd5b600061061c610d71565b9050600073ffffffffffffffffffffffffffffffffffffffff16816000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610701576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f890611172565b60405180910390fd5b806000016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055505050565b6000610786610d44565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461081a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081190611106565b60405180910390fd5b6000610824610d44565b9050828160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6000610878610d44565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610908576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ff90610f76565b60405180910390fd5b6000610912610d71565b9050600073ffffffffffffffffffffffffffffffffffffffff16816000016000867bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156109f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ee90611172565b60405180910390fd5b82816000016000867bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b6000610a99610d44565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610b4457508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610b83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7a90611204565b60405180910390fd5b6000610b8d610d44565b905060018160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b6000610bf8610d44565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610ca357508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610ce2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd990611204565b60405180910390fd5b6000610cec610d44565b90508060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff0219169055505050565b6000807f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90508091505090565b6000807f2031468f0c30f7087de4da9398818763b546d7f89935fa65485c24ff1df26bf390508091505090565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610dd881610da3565b8114610de357600080fd5b50565b600081359050610df581610dcf565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e2682610dfb565b9050919050565b610e3681610e1b565b8114610e4157600080fd5b50565b600081359050610e5381610e2d565b92915050565b60008060408385031215610e7057610e6f610d9e565b5b6000610e7e85828601610de6565b9250506020610e8f85828601610e44565b9150509250929050565b600060208284031215610eaf57610eae610d9e565b5b6000610ebd84828501610e44565b91505092915050565b600060208284031215610edc57610edb610d9e565b5b6000610eea84828501610de6565b91505092915050565b600082825260208201905092915050565b7f41636365737320436f6e74726f6c3a206f6e6c79206f70657261746f7273206160008201527f6c6c6f7765640000000000000000000000000000000000000000000000000000602082015250565b6000610f60602683610ef3565b9150610f6b82610f04565b604082019050919050565b60006020820190508181036000830152610f8f81610f53565b9050919050565b7f73656c6563746f7220616c726561647920657869737473000000000000000000600082015250565b6000610fcc601783610ef3565b9150610fd782610f96565b602082019050919050565b60006020820190508181036000830152610ffb81610fbf565b9050919050565b7f41636365737320436f6e74726f6c3a206f776e657273686970206e6f7420677260008201527f616e746564000000000000000000000000000000000000000000000000000000602082015250565b600061105e602583610ef3565b915061106982611002565b604082019050919050565b6000602082019050818103600083015261108d81611051565b9050919050565b7f41636365737320436f6e74726f6c3a206f6e6c79206f776e657220697320616c60008201527f6c6f776564000000000000000000000000000000000000000000000000000000602082015250565b60006110f0602583610ef3565b91506110fb82611094565b604082019050919050565b6000602082019050818103600083015261111f816110e3565b9050919050565b7f73656c6563746f7220646f6573206e6f74206578697374000000000000000000600082015250565b600061115c601783610ef3565b915061116782611126565b602082019050919050565b6000602082019050818103600083015261118b8161114f565b9050919050565b7f41636365737320436f6e74726f6c3a206f6e6c79206f776e6572206f72206f7060008201527f657261746f7220616c6c6f776564000000000000000000000000000000000000602082015250565b60006111ee602e83610ef3565b91506111f982611192565b604082019050919050565b6000602082019050818103600083015261121d816111e1565b905091905056fea26469706673582212209d2ad2d31589cce54f7a74e03ccef824e210849114897898efae2783108ab86b64736f6c634300080b0033",
=======
	Bin: "",
>>>>>>> Stashed changes
}

// ValidatorsDiamondABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorsDiamondMetaData.ABI instead.
var ValidatorsDiamondABI = ValidatorsDiamondMetaData.ABI

// ValidatorsDiamondBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ValidatorsDiamondMetaData.Bin instead.
var ValidatorsDiamondBin = ValidatorsDiamondMetaData.Bin

// DeployValidatorsDiamond deploys a new Ethereum contract, binding an instance of ValidatorsDiamond to it.
func DeployValidatorsDiamond(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ValidatorsDiamond, error) {
	parsed, err := ValidatorsDiamondMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ValidatorsDiamondBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ValidatorsDiamond{ValidatorsDiamondCaller: ValidatorsDiamondCaller{contract: contract}, ValidatorsDiamondTransactor: ValidatorsDiamondTransactor{contract: contract}, ValidatorsDiamondFilterer: ValidatorsDiamondFilterer{contract: contract}}, nil
}

// ValidatorsDiamond is an auto generated Go binding around an Ethereum contract.
type ValidatorsDiamond struct {
	ValidatorsDiamondCaller     // Read-only binding to the contract
	ValidatorsDiamondTransactor // Write-only binding to the contract
	ValidatorsDiamondFilterer   // Log filterer for contract events
}

// ValidatorsDiamondCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorsDiamondCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorsDiamondTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorsDiamondTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorsDiamondFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorsDiamondFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorsDiamondSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorsDiamondSession struct {
	Contract     *ValidatorsDiamond // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// ValidatorsDiamondCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorsDiamondCallerSession struct {
	Contract *ValidatorsDiamondCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// ValidatorsDiamondTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorsDiamondTransactorSession struct {
	Contract     *ValidatorsDiamondTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// ValidatorsDiamondRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorsDiamondRaw struct {
	Contract *ValidatorsDiamond // Generic contract binding to access the raw methods on
}

// ValidatorsDiamondCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorsDiamondCallerRaw struct {
	Contract *ValidatorsDiamondCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorsDiamondTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorsDiamondTransactorRaw struct {
	Contract *ValidatorsDiamondTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorsDiamond creates a new instance of ValidatorsDiamond, bound to a specific deployed contract.
func NewValidatorsDiamond(address common.Address, backend bind.ContractBackend) (*ValidatorsDiamond, error) {
	contract, err := bindValidatorsDiamond(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorsDiamond{ValidatorsDiamondCaller: ValidatorsDiamondCaller{contract: contract}, ValidatorsDiamondTransactor: ValidatorsDiamondTransactor{contract: contract}, ValidatorsDiamondFilterer: ValidatorsDiamondFilterer{contract: contract}}, nil
}

// NewValidatorsDiamondCaller creates a new read-only instance of ValidatorsDiamond, bound to a specific deployed contract.
func NewValidatorsDiamondCaller(address common.Address, caller bind.ContractCaller) (*ValidatorsDiamondCaller, error) {
	contract, err := bindValidatorsDiamond(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorsDiamondCaller{contract: contract}, nil
}

// NewValidatorsDiamondTransactor creates a new write-only instance of ValidatorsDiamond, bound to a specific deployed contract.
func NewValidatorsDiamondTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorsDiamondTransactor, error) {
	contract, err := bindValidatorsDiamond(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorsDiamondTransactor{contract: contract}, nil
}

// NewValidatorsDiamondFilterer creates a new log filterer instance of ValidatorsDiamond, bound to a specific deployed contract.
func NewValidatorsDiamondFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorsDiamondFilterer, error) {
	contract, err := bindValidatorsDiamond(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorsDiamondFilterer{contract: contract}, nil
}

// bindValidatorsDiamond binds a generic wrapper to an already deployed contract.
func bindValidatorsDiamond(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorsDiamondABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorsDiamond *ValidatorsDiamondRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorsDiamond.Contract.ValidatorsDiamondCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorsDiamond *ValidatorsDiamondRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorsDiamond.Contract.ValidatorsDiamondTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorsDiamond *ValidatorsDiamondRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorsDiamond.Contract.ValidatorsDiamondTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorsDiamond *ValidatorsDiamondCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorsDiamond.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorsDiamond *ValidatorsDiamondTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorsDiamond.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorsDiamond *ValidatorsDiamondTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorsDiamond.Contract.contract.Transact(opts, method, params...)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_ValidatorsDiamond *ValidatorsDiamondTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _ValidatorsDiamond.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_ValidatorsDiamond *ValidatorsDiamondSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _ValidatorsDiamond.Contract.Fallback(&_ValidatorsDiamond.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_ValidatorsDiamond *ValidatorsDiamondTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _ValidatorsDiamond.Contract.Fallback(&_ValidatorsDiamond.TransactOpts, calldata)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ValidatorsDiamond *ValidatorsDiamondTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorsDiamond.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ValidatorsDiamond *ValidatorsDiamondSession) Receive() (*types.Transaction, error) {
	return _ValidatorsDiamond.Contract.Receive(&_ValidatorsDiamond.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ValidatorsDiamond *ValidatorsDiamondTransactorSession) Receive() (*types.Transaction, error) {
	return _ValidatorsDiamond.Contract.Receive(&_ValidatorsDiamond.TransactOpts)
}

// ValidatorsEventsMetaData contains all meta data concerning the ValidatorsEvents contract.
var ValidatorsEventsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"key_share_G1\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"key_share_G1_correctness_proof\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"key_share_G2\",\"type\":\"uint256[4]\"}],\"name\":\"KeyShareSubmission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dkgStarts\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"registrationEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shareDistributionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disputeEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"keyShareSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mpkSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gpkjSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gpkjDisputeEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dkgComplete\",\"type\":\"uint256\"}],\"name\":\"RegistrationOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"encrypted_shares\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"}],\"name\":\"ShareDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share3\",\"type\":\"uint256\"}],\"name\":\"ValidatorMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"validatorCount\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"ethHeight\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"madHeight\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey3\",\"type\":\"uint256\"}],\"name\":\"ValidatorSet\",\"type\":\"event\"}]",
}

// ValidatorsEventsABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorsEventsMetaData.ABI instead.
var ValidatorsEventsABI = ValidatorsEventsMetaData.ABI

// ValidatorsEvents is an auto generated Go binding around an Ethereum contract.
type ValidatorsEvents struct {
	ValidatorsEventsCaller     // Read-only binding to the contract
	ValidatorsEventsTransactor // Write-only binding to the contract
	ValidatorsEventsFilterer   // Log filterer for contract events
}

// ValidatorsEventsCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorsEventsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorsEventsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorsEventsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorsEventsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorsEventsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorsEventsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorsEventsSession struct {
	Contract     *ValidatorsEvents // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ValidatorsEventsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorsEventsCallerSession struct {
	Contract *ValidatorsEventsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// ValidatorsEventsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorsEventsTransactorSession struct {
	Contract     *ValidatorsEventsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// ValidatorsEventsRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorsEventsRaw struct {
	Contract *ValidatorsEvents // Generic contract binding to access the raw methods on
}

// ValidatorsEventsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorsEventsCallerRaw struct {
	Contract *ValidatorsEventsCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorsEventsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorsEventsTransactorRaw struct {
	Contract *ValidatorsEventsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorsEvents creates a new instance of ValidatorsEvents, bound to a specific deployed contract.
func NewValidatorsEvents(address common.Address, backend bind.ContractBackend) (*ValidatorsEvents, error) {
	contract, err := bindValidatorsEvents(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorsEvents{ValidatorsEventsCaller: ValidatorsEventsCaller{contract: contract}, ValidatorsEventsTransactor: ValidatorsEventsTransactor{contract: contract}, ValidatorsEventsFilterer: ValidatorsEventsFilterer{contract: contract}}, nil
}

// NewValidatorsEventsCaller creates a new read-only instance of ValidatorsEvents, bound to a specific deployed contract.
func NewValidatorsEventsCaller(address common.Address, caller bind.ContractCaller) (*ValidatorsEventsCaller, error) {
	contract, err := bindValidatorsEvents(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorsEventsCaller{contract: contract}, nil
}

// NewValidatorsEventsTransactor creates a new write-only instance of ValidatorsEvents, bound to a specific deployed contract.
func NewValidatorsEventsTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorsEventsTransactor, error) {
	contract, err := bindValidatorsEvents(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorsEventsTransactor{contract: contract}, nil
}

// NewValidatorsEventsFilterer creates a new log filterer instance of ValidatorsEvents, bound to a specific deployed contract.
func NewValidatorsEventsFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorsEventsFilterer, error) {
	contract, err := bindValidatorsEvents(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorsEventsFilterer{contract: contract}, nil
}

// bindValidatorsEvents binds a generic wrapper to an already deployed contract.
func bindValidatorsEvents(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorsEventsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorsEvents *ValidatorsEventsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorsEvents.Contract.ValidatorsEventsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorsEvents *ValidatorsEventsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorsEvents.Contract.ValidatorsEventsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorsEvents *ValidatorsEventsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorsEvents.Contract.ValidatorsEventsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorsEvents *ValidatorsEventsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorsEvents.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorsEvents *ValidatorsEventsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorsEvents.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorsEvents *ValidatorsEventsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorsEvents.Contract.contract.Transact(opts, method, params...)
}

// ValidatorsEventsKeyShareSubmissionIterator is returned from FilterKeyShareSubmission and is used to iterate over the raw logs and unpacked data for KeyShareSubmission events raised by the ValidatorsEvents contract.
type ValidatorsEventsKeyShareSubmissionIterator struct {
	Event *ValidatorsEventsKeyShareSubmission // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsEventsKeyShareSubmissionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsEventsKeyShareSubmission)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsEventsKeyShareSubmission)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsEventsKeyShareSubmissionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsEventsKeyShareSubmissionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsEventsKeyShareSubmission represents a KeyShareSubmission event raised by the ValidatorsEvents contract.
type ValidatorsEventsKeyShareSubmission struct {
	Issuer                     common.Address
	KeyShareG1                 [2]*big.Int
	KeyShareG1CorrectnessProof [2]*big.Int
	KeyShareG2                 [4]*big.Int
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterKeyShareSubmission is a free log retrieval operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_ValidatorsEvents *ValidatorsEventsFilterer) FilterKeyShareSubmission(opts *bind.FilterOpts) (*ValidatorsEventsKeyShareSubmissionIterator, error) {

	logs, sub, err := _ValidatorsEvents.contract.FilterLogs(opts, "KeyShareSubmission")
	if err != nil {
		return nil, err
	}
	return &ValidatorsEventsKeyShareSubmissionIterator{contract: _ValidatorsEvents.contract, event: "KeyShareSubmission", logs: logs, sub: sub}, nil
}

// WatchKeyShareSubmission is a free log subscription operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_ValidatorsEvents *ValidatorsEventsFilterer) WatchKeyShareSubmission(opts *bind.WatchOpts, sink chan<- *ValidatorsEventsKeyShareSubmission) (event.Subscription, error) {

	logs, sub, err := _ValidatorsEvents.contract.WatchLogs(opts, "KeyShareSubmission")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsEventsKeyShareSubmission)
				if err := _ValidatorsEvents.contract.UnpackLog(event, "KeyShareSubmission", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyShareSubmission is a log parse operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_ValidatorsEvents *ValidatorsEventsFilterer) ParseKeyShareSubmission(log types.Log) (*ValidatorsEventsKeyShareSubmission, error) {
	event := new(ValidatorsEventsKeyShareSubmission)
	if err := _ValidatorsEvents.contract.UnpackLog(event, "KeyShareSubmission", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsEventsRegistrationOpenIterator is returned from FilterRegistrationOpen and is used to iterate over the raw logs and unpacked data for RegistrationOpen events raised by the ValidatorsEvents contract.
type ValidatorsEventsRegistrationOpenIterator struct {
	Event *ValidatorsEventsRegistrationOpen // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsEventsRegistrationOpenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsEventsRegistrationOpen)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsEventsRegistrationOpen)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsEventsRegistrationOpenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsEventsRegistrationOpenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsEventsRegistrationOpen represents a RegistrationOpen event raised by the ValidatorsEvents contract.
type ValidatorsEventsRegistrationOpen struct {
	DkgStarts              *big.Int
	RegistrationEnds       *big.Int
	ShareDistributionEnds  *big.Int
	DisputeEnds            *big.Int
	KeyShareSubmissionEnds *big.Int
	MpkSubmissionEnds      *big.Int
	GpkjSubmissionEnds     *big.Int
	GpkjDisputeEnds        *big.Int
	DkgComplete            *big.Int
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterRegistrationOpen is a free log retrieval operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_ValidatorsEvents *ValidatorsEventsFilterer) FilterRegistrationOpen(opts *bind.FilterOpts) (*ValidatorsEventsRegistrationOpenIterator, error) {

	logs, sub, err := _ValidatorsEvents.contract.FilterLogs(opts, "RegistrationOpen")
	if err != nil {
		return nil, err
	}
	return &ValidatorsEventsRegistrationOpenIterator{contract: _ValidatorsEvents.contract, event: "RegistrationOpen", logs: logs, sub: sub}, nil
}

// WatchRegistrationOpen is a free log subscription operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_ValidatorsEvents *ValidatorsEventsFilterer) WatchRegistrationOpen(opts *bind.WatchOpts, sink chan<- *ValidatorsEventsRegistrationOpen) (event.Subscription, error) {

	logs, sub, err := _ValidatorsEvents.contract.WatchLogs(opts, "RegistrationOpen")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsEventsRegistrationOpen)
				if err := _ValidatorsEvents.contract.UnpackLog(event, "RegistrationOpen", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistrationOpen is a log parse operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_ValidatorsEvents *ValidatorsEventsFilterer) ParseRegistrationOpen(log types.Log) (*ValidatorsEventsRegistrationOpen, error) {
	event := new(ValidatorsEventsRegistrationOpen)
	if err := _ValidatorsEvents.contract.UnpackLog(event, "RegistrationOpen", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsEventsShareDistributionIterator is returned from FilterShareDistribution and is used to iterate over the raw logs and unpacked data for ShareDistribution events raised by the ValidatorsEvents contract.
type ValidatorsEventsShareDistributionIterator struct {
	Event *ValidatorsEventsShareDistribution // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsEventsShareDistributionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsEventsShareDistribution)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsEventsShareDistribution)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsEventsShareDistributionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsEventsShareDistributionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsEventsShareDistribution represents a ShareDistribution event raised by the ValidatorsEvents contract.
type ValidatorsEventsShareDistribution struct {
	Issuer          common.Address
	Index           *big.Int
	EncryptedShares []*big.Int
	Commitments     [][2]*big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterShareDistribution is a free log retrieval operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_ValidatorsEvents *ValidatorsEventsFilterer) FilterShareDistribution(opts *bind.FilterOpts) (*ValidatorsEventsShareDistributionIterator, error) {

	logs, sub, err := _ValidatorsEvents.contract.FilterLogs(opts, "ShareDistribution")
	if err != nil {
		return nil, err
	}
	return &ValidatorsEventsShareDistributionIterator{contract: _ValidatorsEvents.contract, event: "ShareDistribution", logs: logs, sub: sub}, nil
}

// WatchShareDistribution is a free log subscription operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_ValidatorsEvents *ValidatorsEventsFilterer) WatchShareDistribution(opts *bind.WatchOpts, sink chan<- *ValidatorsEventsShareDistribution) (event.Subscription, error) {

	logs, sub, err := _ValidatorsEvents.contract.WatchLogs(opts, "ShareDistribution")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsEventsShareDistribution)
				if err := _ValidatorsEvents.contract.UnpackLog(event, "ShareDistribution", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseShareDistribution is a log parse operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_ValidatorsEvents *ValidatorsEventsFilterer) ParseShareDistribution(log types.Log) (*ValidatorsEventsShareDistribution, error) {
	event := new(ValidatorsEventsShareDistribution)
	if err := _ValidatorsEvents.contract.UnpackLog(event, "ShareDistribution", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsEventsValidatorMemberIterator is returned from FilterValidatorMember and is used to iterate over the raw logs and unpacked data for ValidatorMember events raised by the ValidatorsEvents contract.
type ValidatorsEventsValidatorMemberIterator struct {
	Event *ValidatorsEventsValidatorMember // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsEventsValidatorMemberIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsEventsValidatorMember)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsEventsValidatorMember)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsEventsValidatorMemberIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsEventsValidatorMemberIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsEventsValidatorMember represents a ValidatorMember event raised by the ValidatorsEvents contract.
type ValidatorsEventsValidatorMember struct {
	Account common.Address
	Epoch   *big.Int
	Index   *big.Int
	Share0  *big.Int
	Share1  *big.Int
	Share2  *big.Int
	Share3  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterValidatorMember is a free log retrieval operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ValidatorsEvents *ValidatorsEventsFilterer) FilterValidatorMember(opts *bind.FilterOpts) (*ValidatorsEventsValidatorMemberIterator, error) {

	logs, sub, err := _ValidatorsEvents.contract.FilterLogs(opts, "ValidatorMember")
	if err != nil {
		return nil, err
	}
	return &ValidatorsEventsValidatorMemberIterator{contract: _ValidatorsEvents.contract, event: "ValidatorMember", logs: logs, sub: sub}, nil
}

// WatchValidatorMember is a free log subscription operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ValidatorsEvents *ValidatorsEventsFilterer) WatchValidatorMember(opts *bind.WatchOpts, sink chan<- *ValidatorsEventsValidatorMember) (event.Subscription, error) {

	logs, sub, err := _ValidatorsEvents.contract.WatchLogs(opts, "ValidatorMember")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsEventsValidatorMember)
				if err := _ValidatorsEvents.contract.UnpackLog(event, "ValidatorMember", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorMember is a log parse operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ValidatorsEvents *ValidatorsEventsFilterer) ParseValidatorMember(log types.Log) (*ValidatorsEventsValidatorMember, error) {
	event := new(ValidatorsEventsValidatorMember)
	if err := _ValidatorsEvents.contract.UnpackLog(event, "ValidatorMember", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorsEventsValidatorSetIterator is returned from FilterValidatorSet and is used to iterate over the raw logs and unpacked data for ValidatorSet events raised by the ValidatorsEvents contract.
type ValidatorsEventsValidatorSetIterator struct {
	Event *ValidatorsEventsValidatorSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsEventsValidatorSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsEventsValidatorSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsEventsValidatorSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsEventsValidatorSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsEventsValidatorSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsEventsValidatorSet represents a ValidatorSet event raised by the ValidatorsEvents contract.
type ValidatorsEventsValidatorSet struct {
	ValidatorCount uint8
	Epoch          *big.Int
	EthHeight      uint32
	MadHeight      uint32
	GroupKey0      *big.Int
	GroupKey1      *big.Int
	GroupKey2      *big.Int
	GroupKey3      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterValidatorSet is a free log retrieval operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ValidatorsEvents *ValidatorsEventsFilterer) FilterValidatorSet(opts *bind.FilterOpts) (*ValidatorsEventsValidatorSetIterator, error) {

	logs, sub, err := _ValidatorsEvents.contract.FilterLogs(opts, "ValidatorSet")
	if err != nil {
		return nil, err
	}
	return &ValidatorsEventsValidatorSetIterator{contract: _ValidatorsEvents.contract, event: "ValidatorSet", logs: logs, sub: sub}, nil
}

// WatchValidatorSet is a free log subscription operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ValidatorsEvents *ValidatorsEventsFilterer) WatchValidatorSet(opts *bind.WatchOpts, sink chan<- *ValidatorsEventsValidatorSet) (event.Subscription, error) {

	logs, sub, err := _ValidatorsEvents.contract.WatchLogs(opts, "ValidatorSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsEventsValidatorSet)
				if err := _ValidatorsEvents.contract.UnpackLog(event, "ValidatorSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorSet is a log parse operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ValidatorsEvents *ValidatorsEventsFilterer) ParseValidatorSet(log types.Log) (*ValidatorsEventsValidatorSet, error) {
	event := new(ValidatorsEventsValidatorSet)
	if err := _ValidatorsEvents.contract.UnpackLog(event, "ValidatorSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
