const {expect} = require("chai");
const { ethers } = require("hardhat");
const { factory } = require("typescript");
const Factory = artifacts.require("Factory");
const EndPoint = artifacts.require("endPoint");
let MNaddress;

contract("MADNET FACTORY", function (accounts){
    before(async function () {
        
        const provider = new ethers.providers.JsonRpcProvider();

        const transactionCount = await provider.getTransactionCount(accounts[0])
        const futureAddress = ethers.utils.getContractAddress({
            from: accounts[0],
            nonce: transactionCount
        })
        this.factory = await Factory.new(futureAddress);
        console.log(futureAddress)
        console.log(this.factory.address)
        
    })

    it("DEPLOYMENT OF FACTORY: SUCCESS", async function(){
        const salt = ethers.utils.formatBytes32String("foo")
        console.log("here")
        const pAddr = await this.factory.deployProxy(salt)

        this.endPoint = await EndPoint.new(this.factory.address);
        await this.factory.upgradeProxy(salt, this.endPoint.address)
        const LogicCaller = await EndPoint.at(this.endPoint.address)
        const l = await LogicCaller.addTwo()  
        console.log(l)
        const tx = await LogicCaller.i.call();
        console.log(tx.toNumber())
        expect(tx.toNumber()).to.equal(2)
        this.endPoint2 = await EndPoint.new(this.factory.address);
        await this.factory.upgradeProxy(salt, this.endPoint2.address)
        const l0 = await LogicCaller.addOne()  
        console.log(l0)
        const tx0 = await LogicCaller.i.call();
        console.log(tx0.toNumber())
        expect(tx0.toNumber()).to.equal(3)
    });

    it("DEPLOYMENT OF FACTORY2: SUCCESS", async function(){
        i = 0
        console.log(i++)
        const salt = ethers.utils.formatBytes32String("bar")
        console.log(i++)
        const pAddr = await this.factory.deployTemplate(EndPoint.bytecode)
        console.log(i++)
        console.log(pAddr)
        const tmpl = await this.factory.implementation_.call()
        console.log(i++)
        console.log(tmpl)
        const stat = await this.factory.deployStatic(/*tmpl, */salt)
        console.log(i++)
        console.log("----------------------------------\n")
        console.log(stat)
        console.log("----------------------------------\n")
        const tmpl0 = await this.factory.implementation_.call()
        console.log(i++)
        this.endPoint = await EndPoint.at(tmpl0);
        console.log(i++)
        const fa = await this.endPoint.factory.call();
        console.log(i++)
        console.log(fa)
        // await this.factory.upgradeProxy(salt, this.endPoint.address)
        // const LogicCaller = await EndPoint.at(this.endPoint.address)
        // const l = await LogicCaller.addTwo()  
        // console.log(l)
        // const tx = await LogicCaller.i.call();
        // console.log(tx.toNumber())
        // expect(tx.toNumber()).to.equal(2)
        // this.endPoint2 = await EndPoint.new(this.factory.address);
        // await this.factory.upgradeProxy(salt, this.endPoint2.address)
        // const l0 = await LogicCaller.addOne()  
        // console.log(l0)
        // const tx0 = await LogicCaller.i.call();
        // console.log(tx0.toNumber())
        // expect(tx0.toNumber()).to.equal(3)
    });


    /*
    //deploy a contract
    it("should return address of contract", async function(){
        //get the instance of madnetFactory
        const MadnetFactory = await ethers.getContractFactory("MadnetFactory");
        //get the bytecode of the implementation contract
        //const Implementation = await ethers.getContractFactory("foo");
        //connect to the deployed factory contract
        const madnetFactory = await MadnetFactory.attach(MNaddress);
        //deployTemplate 
        let deployTemp = MadnetFactory.interface.encodeFunctionData("deployTemplate", ["0x67363D3D373D3D3D733D526060331B6008527833146031573D363D30545af43D3D92803D603557fd5b5130555bf3601c52601c3Df3fe00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000"]);
        //deployTemp = deployTemp + "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000"
        //deploy, inputs salt, initiator
        let deploy = MadnetFactory.interface.encodeFunctionData("deploy", ["0x0000000000000000000000000000000000000000", ethers.utils.formatBytes32String("foo"), "0x"]);
        //destroy
        let  destroy = MadnetFactory.interface.encodeFunctionData("destroy", ["0x0000000000000000000000000000000000000000"]);
        //let implementationInstance = await Implementation.deploy("0xf22EC8b8Fe42cc72A269eC588a13CfE312EE0B73", "0x");
        //expect(implementationInstance.deployed());
        expect(await madnetFactory.multiCall([deployTemp, deploy, destroy]));
        //expect(await madnetFactory.deployTemplate(Implementation.bytecode));
    });
    */
});
