// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// BClaimsParserLibraryBClaims is an auto generated low-level Go binding around an user-defined struct.
type BClaimsParserLibraryBClaims struct {
	ChainId    uint32
	Height     uint32
	TxCount    uint32
	PrevBlock  [32]byte
	TxRoot     [32]byte
	StateRoot  [32]byte
	HeaderRoot [32]byte
}

// GovernanceStorageProposal is an auto generated low-level Go binding around an user-defined struct.
type GovernanceStorageProposal struct {
	Executed     bool
	Logic        common.Address
	VoteCount    *big.Int
	BlockEndVote *big.Int
}

// MadByteBNAddress is an auto generated low-level Go binding around an user-defined struct.
type MadByteBNAddress struct {
	To0 *big.Int
	To1 *big.Int
	To2 *big.Int
	To3 *big.Int
}

// Participant is an auto generated low-level Go binding around an user-defined struct.
type Participant struct {
	PublicKey                   [2]*big.Int
	Nonce                       uint64
	Index                       uint64
	Phase                       uint8
	DistributedSharesHash       [32]byte
	CommitmentsFirstCoefficient [2]*big.Int
	KeyShares                   [2]*big.Int
	Gpkj                        [4]*big.Int
}

// Snapshot is an auto generated low-level Go binding around an user-defined struct.
type Snapshot struct {
	CommittedAt *big.Int
	BlockClaims BClaimsParserLibraryBClaims
	Signature   [2]*big.Int
}

// ValidatorData is an auto generated low-level Go binding around an user-defined struct.
type ValidatorData struct {
	Address common.Address
	TokenID *big.Int
}

// AddressUpgradeableMetaData contains all meta data concerning the AddressUpgradeable contract.
var AddressUpgradeableMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122087bc4420551f6b67a443d291617399414138cc78e7f8cdb002d968f07518ad2b64736f6c634300080c0033",
}

// AddressUpgradeableABI is the input ABI used to generate the binding from.
// Deprecated: Use AddressUpgradeableMetaData.ABI instead.
var AddressUpgradeableABI = AddressUpgradeableMetaData.ABI

// AddressUpgradeableBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AddressUpgradeableMetaData.Bin instead.
var AddressUpgradeableBin = AddressUpgradeableMetaData.Bin

// DeployAddressUpgradeable deploys a new Ethereum contract, binding an instance of AddressUpgradeable to it.
func DeployAddressUpgradeable(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *AddressUpgradeable, error) {
	parsed, err := AddressUpgradeableMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AddressUpgradeableBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &AddressUpgradeable{AddressUpgradeableCaller: AddressUpgradeableCaller{contract: contract}, AddressUpgradeableTransactor: AddressUpgradeableTransactor{contract: contract}, AddressUpgradeableFilterer: AddressUpgradeableFilterer{contract: contract}}, nil
}

// AddressUpgradeable is an auto generated Go binding around an Ethereum contract.
type AddressUpgradeable struct {
	AddressUpgradeableCaller     // Read-only binding to the contract
	AddressUpgradeableTransactor // Write-only binding to the contract
	AddressUpgradeableFilterer   // Log filterer for contract events
}

// AddressUpgradeableCaller is an auto generated read-only Go binding around an Ethereum contract.
type AddressUpgradeableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AddressUpgradeableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AddressUpgradeableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AddressUpgradeableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AddressUpgradeableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AddressUpgradeableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AddressUpgradeableSession struct {
	Contract     *AddressUpgradeable // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// AddressUpgradeableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AddressUpgradeableCallerSession struct {
	Contract *AddressUpgradeableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// AddressUpgradeableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AddressUpgradeableTransactorSession struct {
	Contract     *AddressUpgradeableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// AddressUpgradeableRaw is an auto generated low-level Go binding around an Ethereum contract.
type AddressUpgradeableRaw struct {
	Contract *AddressUpgradeable // Generic contract binding to access the raw methods on
}

// AddressUpgradeableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AddressUpgradeableCallerRaw struct {
	Contract *AddressUpgradeableCaller // Generic read-only contract binding to access the raw methods on
}

// AddressUpgradeableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AddressUpgradeableTransactorRaw struct {
	Contract *AddressUpgradeableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAddressUpgradeable creates a new instance of AddressUpgradeable, bound to a specific deployed contract.
func NewAddressUpgradeable(address common.Address, backend bind.ContractBackend) (*AddressUpgradeable, error) {
	contract, err := bindAddressUpgradeable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AddressUpgradeable{AddressUpgradeableCaller: AddressUpgradeableCaller{contract: contract}, AddressUpgradeableTransactor: AddressUpgradeableTransactor{contract: contract}, AddressUpgradeableFilterer: AddressUpgradeableFilterer{contract: contract}}, nil
}

// NewAddressUpgradeableCaller creates a new read-only instance of AddressUpgradeable, bound to a specific deployed contract.
func NewAddressUpgradeableCaller(address common.Address, caller bind.ContractCaller) (*AddressUpgradeableCaller, error) {
	contract, err := bindAddressUpgradeable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AddressUpgradeableCaller{contract: contract}, nil
}

// NewAddressUpgradeableTransactor creates a new write-only instance of AddressUpgradeable, bound to a specific deployed contract.
func NewAddressUpgradeableTransactor(address common.Address, transactor bind.ContractTransactor) (*AddressUpgradeableTransactor, error) {
	contract, err := bindAddressUpgradeable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AddressUpgradeableTransactor{contract: contract}, nil
}

// NewAddressUpgradeableFilterer creates a new log filterer instance of AddressUpgradeable, bound to a specific deployed contract.
func NewAddressUpgradeableFilterer(address common.Address, filterer bind.ContractFilterer) (*AddressUpgradeableFilterer, error) {
	contract, err := bindAddressUpgradeable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AddressUpgradeableFilterer{contract: contract}, nil
}

// bindAddressUpgradeable binds a generic wrapper to an already deployed contract.
func bindAddressUpgradeable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AddressUpgradeableABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AddressUpgradeable *AddressUpgradeableRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AddressUpgradeable.Contract.AddressUpgradeableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AddressUpgradeable *AddressUpgradeableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AddressUpgradeable.Contract.AddressUpgradeableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AddressUpgradeable *AddressUpgradeableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AddressUpgradeable.Contract.AddressUpgradeableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AddressUpgradeable *AddressUpgradeableCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AddressUpgradeable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AddressUpgradeable *AddressUpgradeableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AddressUpgradeable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AddressUpgradeable *AddressUpgradeableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AddressUpgradeable.Contract.contract.Transact(opts, method, params...)
}

// AdminMetaData contains all meta data concerning the Admin contract.
var AdminMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// AdminABI is the input ABI used to generate the binding from.
// Deprecated: Use AdminMetaData.ABI instead.
var AdminABI = AdminMetaData.ABI

// Admin is an auto generated Go binding around an Ethereum contract.
type Admin struct {
	AdminCaller     // Read-only binding to the contract
	AdminTransactor // Write-only binding to the contract
	AdminFilterer   // Log filterer for contract events
}

// AdminCaller is an auto generated read-only Go binding around an Ethereum contract.
type AdminCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AdminTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AdminTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AdminFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AdminFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AdminSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AdminSession struct {
	Contract     *Admin            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AdminCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AdminCallerSession struct {
	Contract *AdminCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// AdminTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AdminTransactorSession struct {
	Contract     *AdminTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AdminRaw is an auto generated low-level Go binding around an Ethereum contract.
type AdminRaw struct {
	Contract *Admin // Generic contract binding to access the raw methods on
}

// AdminCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AdminCallerRaw struct {
	Contract *AdminCaller // Generic read-only contract binding to access the raw methods on
}

// AdminTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AdminTransactorRaw struct {
	Contract *AdminTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAdmin creates a new instance of Admin, bound to a specific deployed contract.
func NewAdmin(address common.Address, backend bind.ContractBackend) (*Admin, error) {
	contract, err := bindAdmin(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Admin{AdminCaller: AdminCaller{contract: contract}, AdminTransactor: AdminTransactor{contract: contract}, AdminFilterer: AdminFilterer{contract: contract}}, nil
}

// NewAdminCaller creates a new read-only instance of Admin, bound to a specific deployed contract.
func NewAdminCaller(address common.Address, caller bind.ContractCaller) (*AdminCaller, error) {
	contract, err := bindAdmin(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AdminCaller{contract: contract}, nil
}

// NewAdminTransactor creates a new write-only instance of Admin, bound to a specific deployed contract.
func NewAdminTransactor(address common.Address, transactor bind.ContractTransactor) (*AdminTransactor, error) {
	contract, err := bindAdmin(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AdminTransactor{contract: contract}, nil
}

// NewAdminFilterer creates a new log filterer instance of Admin, bound to a specific deployed contract.
func NewAdminFilterer(address common.Address, filterer bind.ContractFilterer) (*AdminFilterer, error) {
	contract, err := bindAdmin(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AdminFilterer{contract: contract}, nil
}

// bindAdmin binds a generic wrapper to an already deployed contract.
func bindAdmin(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AdminABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Admin *AdminRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Admin.Contract.AdminCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Admin *AdminRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Admin.Contract.AdminTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Admin *AdminRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Admin.Contract.AdminTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Admin *AdminCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Admin.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Admin *AdminTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Admin.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Admin *AdminTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Admin.Contract.contract.Transact(opts, method, params...)
}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_Admin *AdminCaller) GetAdmin(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Admin.contract.Call(opts, &out, "getAdmin")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_Admin *AdminSession) GetAdmin() (common.Address, error) {
	return _Admin.Contract.GetAdmin(&_Admin.CallOpts)
}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_Admin *AdminCallerSession) GetAdmin() (common.Address, error) {
	return _Admin.Contract.GetAdmin(&_Admin.CallOpts)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_Admin *AdminTransactor) SetAdmin(opts *bind.TransactOpts, admin_ common.Address) (*types.Transaction, error) {
	return _Admin.contract.Transact(opts, "setAdmin", admin_)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_Admin *AdminSession) SetAdmin(admin_ common.Address) (*types.Transaction, error) {
	return _Admin.Contract.SetAdmin(&_Admin.TransactOpts, admin_)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_Admin *AdminTransactorSession) SetAdmin(admin_ common.Address) (*types.Transaction, error) {
	return _Admin.Contract.SetAdmin(&_Admin.TransactOpts, admin_)
}

// AtomicCounterMetaData contains all meta data concerning the AtomicCounter contract.
var AtomicCounterMetaData = &bind.MetaData{
	ABI: "[]",
}

// AtomicCounterABI is the input ABI used to generate the binding from.
// Deprecated: Use AtomicCounterMetaData.ABI instead.
var AtomicCounterABI = AtomicCounterMetaData.ABI

// AtomicCounter is an auto generated Go binding around an Ethereum contract.
type AtomicCounter struct {
	AtomicCounterCaller     // Read-only binding to the contract
	AtomicCounterTransactor // Write-only binding to the contract
	AtomicCounterFilterer   // Log filterer for contract events
}

// AtomicCounterCaller is an auto generated read-only Go binding around an Ethereum contract.
type AtomicCounterCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AtomicCounterTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AtomicCounterTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AtomicCounterFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AtomicCounterFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AtomicCounterSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AtomicCounterSession struct {
	Contract     *AtomicCounter    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AtomicCounterCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AtomicCounterCallerSession struct {
	Contract *AtomicCounterCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// AtomicCounterTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AtomicCounterTransactorSession struct {
	Contract     *AtomicCounterTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// AtomicCounterRaw is an auto generated low-level Go binding around an Ethereum contract.
type AtomicCounterRaw struct {
	Contract *AtomicCounter // Generic contract binding to access the raw methods on
}

// AtomicCounterCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AtomicCounterCallerRaw struct {
	Contract *AtomicCounterCaller // Generic read-only contract binding to access the raw methods on
}

// AtomicCounterTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AtomicCounterTransactorRaw struct {
	Contract *AtomicCounterTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAtomicCounter creates a new instance of AtomicCounter, bound to a specific deployed contract.
func NewAtomicCounter(address common.Address, backend bind.ContractBackend) (*AtomicCounter, error) {
	contract, err := bindAtomicCounter(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AtomicCounter{AtomicCounterCaller: AtomicCounterCaller{contract: contract}, AtomicCounterTransactor: AtomicCounterTransactor{contract: contract}, AtomicCounterFilterer: AtomicCounterFilterer{contract: contract}}, nil
}

// NewAtomicCounterCaller creates a new read-only instance of AtomicCounter, bound to a specific deployed contract.
func NewAtomicCounterCaller(address common.Address, caller bind.ContractCaller) (*AtomicCounterCaller, error) {
	contract, err := bindAtomicCounter(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AtomicCounterCaller{contract: contract}, nil
}

// NewAtomicCounterTransactor creates a new write-only instance of AtomicCounter, bound to a specific deployed contract.
func NewAtomicCounterTransactor(address common.Address, transactor bind.ContractTransactor) (*AtomicCounterTransactor, error) {
	contract, err := bindAtomicCounter(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AtomicCounterTransactor{contract: contract}, nil
}

// NewAtomicCounterFilterer creates a new log filterer instance of AtomicCounter, bound to a specific deployed contract.
func NewAtomicCounterFilterer(address common.Address, filterer bind.ContractFilterer) (*AtomicCounterFilterer, error) {
	contract, err := bindAtomicCounter(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AtomicCounterFilterer{contract: contract}, nil
}

// bindAtomicCounter binds a generic wrapper to an already deployed contract.
func bindAtomicCounter(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AtomicCounterABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AtomicCounter *AtomicCounterRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AtomicCounter.Contract.AtomicCounterCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AtomicCounter *AtomicCounterRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AtomicCounter.Contract.AtomicCounterTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AtomicCounter *AtomicCounterRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AtomicCounter.Contract.AtomicCounterTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AtomicCounter *AtomicCounterCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AtomicCounter.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AtomicCounter *AtomicCounterTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AtomicCounter.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AtomicCounter *AtomicCounterTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AtomicCounter.Contract.contract.Transact(opts, method, params...)
}

// BClaimsParserLibraryMetaData contains all meta data concerning the BClaimsParserLibrary contract.
var BClaimsParserLibraryMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f9e062777495d3bc2912c9854c8c5d4c3d3f6c755559c5762e4429ad88a428f264736f6c634300080c0033",
}

// BClaimsParserLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use BClaimsParserLibraryMetaData.ABI instead.
var BClaimsParserLibraryABI = BClaimsParserLibraryMetaData.ABI

// BClaimsParserLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BClaimsParserLibraryMetaData.Bin instead.
var BClaimsParserLibraryBin = BClaimsParserLibraryMetaData.Bin

// DeployBClaimsParserLibrary deploys a new Ethereum contract, binding an instance of BClaimsParserLibrary to it.
func DeployBClaimsParserLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BClaimsParserLibrary, error) {
	parsed, err := BClaimsParserLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BClaimsParserLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BClaimsParserLibrary{BClaimsParserLibraryCaller: BClaimsParserLibraryCaller{contract: contract}, BClaimsParserLibraryTransactor: BClaimsParserLibraryTransactor{contract: contract}, BClaimsParserLibraryFilterer: BClaimsParserLibraryFilterer{contract: contract}}, nil
}

// BClaimsParserLibrary is an auto generated Go binding around an Ethereum contract.
type BClaimsParserLibrary struct {
	BClaimsParserLibraryCaller     // Read-only binding to the contract
	BClaimsParserLibraryTransactor // Write-only binding to the contract
	BClaimsParserLibraryFilterer   // Log filterer for contract events
}

// BClaimsParserLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type BClaimsParserLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BClaimsParserLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BClaimsParserLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BClaimsParserLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BClaimsParserLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BClaimsParserLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BClaimsParserLibrarySession struct {
	Contract     *BClaimsParserLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// BClaimsParserLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BClaimsParserLibraryCallerSession struct {
	Contract *BClaimsParserLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// BClaimsParserLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BClaimsParserLibraryTransactorSession struct {
	Contract     *BClaimsParserLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// BClaimsParserLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type BClaimsParserLibraryRaw struct {
	Contract *BClaimsParserLibrary // Generic contract binding to access the raw methods on
}

// BClaimsParserLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BClaimsParserLibraryCallerRaw struct {
	Contract *BClaimsParserLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// BClaimsParserLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BClaimsParserLibraryTransactorRaw struct {
	Contract *BClaimsParserLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBClaimsParserLibrary creates a new instance of BClaimsParserLibrary, bound to a specific deployed contract.
func NewBClaimsParserLibrary(address common.Address, backend bind.ContractBackend) (*BClaimsParserLibrary, error) {
	contract, err := bindBClaimsParserLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BClaimsParserLibrary{BClaimsParserLibraryCaller: BClaimsParserLibraryCaller{contract: contract}, BClaimsParserLibraryTransactor: BClaimsParserLibraryTransactor{contract: contract}, BClaimsParserLibraryFilterer: BClaimsParserLibraryFilterer{contract: contract}}, nil
}

// NewBClaimsParserLibraryCaller creates a new read-only instance of BClaimsParserLibrary, bound to a specific deployed contract.
func NewBClaimsParserLibraryCaller(address common.Address, caller bind.ContractCaller) (*BClaimsParserLibraryCaller, error) {
	contract, err := bindBClaimsParserLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BClaimsParserLibraryCaller{contract: contract}, nil
}

// NewBClaimsParserLibraryTransactor creates a new write-only instance of BClaimsParserLibrary, bound to a specific deployed contract.
func NewBClaimsParserLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*BClaimsParserLibraryTransactor, error) {
	contract, err := bindBClaimsParserLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BClaimsParserLibraryTransactor{contract: contract}, nil
}

// NewBClaimsParserLibraryFilterer creates a new log filterer instance of BClaimsParserLibrary, bound to a specific deployed contract.
func NewBClaimsParserLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*BClaimsParserLibraryFilterer, error) {
	contract, err := bindBClaimsParserLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BClaimsParserLibraryFilterer{contract: contract}, nil
}

// bindBClaimsParserLibrary binds a generic wrapper to an already deployed contract.
func bindBClaimsParserLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BClaimsParserLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BClaimsParserLibrary *BClaimsParserLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BClaimsParserLibrary.Contract.BClaimsParserLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BClaimsParserLibrary *BClaimsParserLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BClaimsParserLibrary.Contract.BClaimsParserLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BClaimsParserLibrary *BClaimsParserLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BClaimsParserLibrary.Contract.BClaimsParserLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BClaimsParserLibrary *BClaimsParserLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BClaimsParserLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BClaimsParserLibrary *BClaimsParserLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BClaimsParserLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BClaimsParserLibrary *BClaimsParserLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BClaimsParserLibrary.Contract.contract.Transact(opts, method, params...)
}

// BaseParserLibraryMetaData contains all meta data concerning the BaseParserLibrary contract.
var BaseParserLibraryMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e6dfdbce7d7607675749cdd8c93a20d07759c3ae0354eeecbe1c392dbd9ebb0b64736f6c634300080c0033",
}

// BaseParserLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use BaseParserLibraryMetaData.ABI instead.
var BaseParserLibraryABI = BaseParserLibraryMetaData.ABI

// BaseParserLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BaseParserLibraryMetaData.Bin instead.
var BaseParserLibraryBin = BaseParserLibraryMetaData.Bin

// DeployBaseParserLibrary deploys a new Ethereum contract, binding an instance of BaseParserLibrary to it.
func DeployBaseParserLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BaseParserLibrary, error) {
	parsed, err := BaseParserLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BaseParserLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseParserLibrary{BaseParserLibraryCaller: BaseParserLibraryCaller{contract: contract}, BaseParserLibraryTransactor: BaseParserLibraryTransactor{contract: contract}, BaseParserLibraryFilterer: BaseParserLibraryFilterer{contract: contract}}, nil
}

// BaseParserLibrary is an auto generated Go binding around an Ethereum contract.
type BaseParserLibrary struct {
	BaseParserLibraryCaller     // Read-only binding to the contract
	BaseParserLibraryTransactor // Write-only binding to the contract
	BaseParserLibraryFilterer   // Log filterer for contract events
}

// BaseParserLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseParserLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseParserLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseParserLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseParserLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseParserLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseParserLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaseParserLibrarySession struct {
	Contract     *BaseParserLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// BaseParserLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaseParserLibraryCallerSession struct {
	Contract *BaseParserLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// BaseParserLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaseParserLibraryTransactorSession struct {
	Contract     *BaseParserLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// BaseParserLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaseParserLibraryRaw struct {
	Contract *BaseParserLibrary // Generic contract binding to access the raw methods on
}

// BaseParserLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaseParserLibraryCallerRaw struct {
	Contract *BaseParserLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// BaseParserLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaseParserLibraryTransactorRaw struct {
	Contract *BaseParserLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBaseParserLibrary creates a new instance of BaseParserLibrary, bound to a specific deployed contract.
func NewBaseParserLibrary(address common.Address, backend bind.ContractBackend) (*BaseParserLibrary, error) {
	contract, err := bindBaseParserLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseParserLibrary{BaseParserLibraryCaller: BaseParserLibraryCaller{contract: contract}, BaseParserLibraryTransactor: BaseParserLibraryTransactor{contract: contract}, BaseParserLibraryFilterer: BaseParserLibraryFilterer{contract: contract}}, nil
}

// NewBaseParserLibraryCaller creates a new read-only instance of BaseParserLibrary, bound to a specific deployed contract.
func NewBaseParserLibraryCaller(address common.Address, caller bind.ContractCaller) (*BaseParserLibraryCaller, error) {
	contract, err := bindBaseParserLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseParserLibraryCaller{contract: contract}, nil
}

// NewBaseParserLibraryTransactor creates a new write-only instance of BaseParserLibrary, bound to a specific deployed contract.
func NewBaseParserLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseParserLibraryTransactor, error) {
	contract, err := bindBaseParserLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseParserLibraryTransactor{contract: contract}, nil
}

// NewBaseParserLibraryFilterer creates a new log filterer instance of BaseParserLibrary, bound to a specific deployed contract.
func NewBaseParserLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseParserLibraryFilterer, error) {
	contract, err := bindBaseParserLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseParserLibraryFilterer{contract: contract}, nil
}

// bindBaseParserLibrary binds a generic wrapper to an already deployed contract.
func bindBaseParserLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BaseParserLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseParserLibrary *BaseParserLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BaseParserLibrary.Contract.BaseParserLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseParserLibrary *BaseParserLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseParserLibrary.Contract.BaseParserLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseParserLibrary *BaseParserLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseParserLibrary.Contract.BaseParserLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseParserLibrary *BaseParserLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BaseParserLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseParserLibrary *BaseParserLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseParserLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseParserLibrary *BaseParserLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseParserLibrary.Contract.contract.Transact(opts, method, params...)
}

// ContextUpgradeableMetaData contains all meta data concerning the ContextUpgradeable contract.
var ContextUpgradeableMetaData = &bind.MetaData{
	ABI: "[]",
}

// ContextUpgradeableABI is the input ABI used to generate the binding from.
// Deprecated: Use ContextUpgradeableMetaData.ABI instead.
var ContextUpgradeableABI = ContextUpgradeableMetaData.ABI

// ContextUpgradeable is an auto generated Go binding around an Ethereum contract.
type ContextUpgradeable struct {
	ContextUpgradeableCaller     // Read-only binding to the contract
	ContextUpgradeableTransactor // Write-only binding to the contract
	ContextUpgradeableFilterer   // Log filterer for contract events
}

// ContextUpgradeableCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContextUpgradeableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContextUpgradeableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContextUpgradeableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContextUpgradeableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContextUpgradeableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContextUpgradeableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContextUpgradeableSession struct {
	Contract     *ContextUpgradeable // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ContextUpgradeableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContextUpgradeableCallerSession struct {
	Contract *ContextUpgradeableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// ContextUpgradeableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContextUpgradeableTransactorSession struct {
	Contract     *ContextUpgradeableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// ContextUpgradeableRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContextUpgradeableRaw struct {
	Contract *ContextUpgradeable // Generic contract binding to access the raw methods on
}

// ContextUpgradeableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContextUpgradeableCallerRaw struct {
	Contract *ContextUpgradeableCaller // Generic read-only contract binding to access the raw methods on
}

// ContextUpgradeableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContextUpgradeableTransactorRaw struct {
	Contract *ContextUpgradeableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContextUpgradeable creates a new instance of ContextUpgradeable, bound to a specific deployed contract.
func NewContextUpgradeable(address common.Address, backend bind.ContractBackend) (*ContextUpgradeable, error) {
	contract, err := bindContextUpgradeable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ContextUpgradeable{ContextUpgradeableCaller: ContextUpgradeableCaller{contract: contract}, ContextUpgradeableTransactor: ContextUpgradeableTransactor{contract: contract}, ContextUpgradeableFilterer: ContextUpgradeableFilterer{contract: contract}}, nil
}

// NewContextUpgradeableCaller creates a new read-only instance of ContextUpgradeable, bound to a specific deployed contract.
func NewContextUpgradeableCaller(address common.Address, caller bind.ContractCaller) (*ContextUpgradeableCaller, error) {
	contract, err := bindContextUpgradeable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContextUpgradeableCaller{contract: contract}, nil
}

// NewContextUpgradeableTransactor creates a new write-only instance of ContextUpgradeable, bound to a specific deployed contract.
func NewContextUpgradeableTransactor(address common.Address, transactor bind.ContractTransactor) (*ContextUpgradeableTransactor, error) {
	contract, err := bindContextUpgradeable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContextUpgradeableTransactor{contract: contract}, nil
}

// NewContextUpgradeableFilterer creates a new log filterer instance of ContextUpgradeable, bound to a specific deployed contract.
func NewContextUpgradeableFilterer(address common.Address, filterer bind.ContractFilterer) (*ContextUpgradeableFilterer, error) {
	contract, err := bindContextUpgradeable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContextUpgradeableFilterer{contract: contract}, nil
}

// bindContextUpgradeable binds a generic wrapper to an already deployed contract.
func bindContextUpgradeable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ContextUpgradeableABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContextUpgradeable *ContextUpgradeableRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContextUpgradeable.Contract.ContextUpgradeableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContextUpgradeable *ContextUpgradeableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContextUpgradeable.Contract.ContextUpgradeableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContextUpgradeable *ContextUpgradeableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContextUpgradeable.Contract.ContextUpgradeableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContextUpgradeable *ContextUpgradeableCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContextUpgradeable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContextUpgradeable *ContextUpgradeableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContextUpgradeable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContextUpgradeable *ContextUpgradeableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContextUpgradeable.Contract.contract.Transact(opts, method, params...)
}

// CryptoLibraryMetaData contains all meta data concerning the CryptoLibrary contract.
var CryptoLibraryMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220644779b6e38caa769d2fb7c05960c83246c0ba98de3877e8fdffe6b0a008e03a64736f6c634300080c0033",
}

// CryptoLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use CryptoLibraryMetaData.ABI instead.
var CryptoLibraryABI = CryptoLibraryMetaData.ABI

// CryptoLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CryptoLibraryMetaData.Bin instead.
var CryptoLibraryBin = CryptoLibraryMetaData.Bin

// DeployCryptoLibrary deploys a new Ethereum contract, binding an instance of CryptoLibrary to it.
func DeployCryptoLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *CryptoLibrary, error) {
	parsed, err := CryptoLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CryptoLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CryptoLibrary{CryptoLibraryCaller: CryptoLibraryCaller{contract: contract}, CryptoLibraryTransactor: CryptoLibraryTransactor{contract: contract}, CryptoLibraryFilterer: CryptoLibraryFilterer{contract: contract}}, nil
}

// CryptoLibrary is an auto generated Go binding around an Ethereum contract.
type CryptoLibrary struct {
	CryptoLibraryCaller     // Read-only binding to the contract
	CryptoLibraryTransactor // Write-only binding to the contract
	CryptoLibraryFilterer   // Log filterer for contract events
}

// CryptoLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type CryptoLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CryptoLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CryptoLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CryptoLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CryptoLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CryptoLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CryptoLibrarySession struct {
	Contract     *CryptoLibrary    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CryptoLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CryptoLibraryCallerSession struct {
	Contract *CryptoLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// CryptoLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CryptoLibraryTransactorSession struct {
	Contract     *CryptoLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// CryptoLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type CryptoLibraryRaw struct {
	Contract *CryptoLibrary // Generic contract binding to access the raw methods on
}

// CryptoLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CryptoLibraryCallerRaw struct {
	Contract *CryptoLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// CryptoLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CryptoLibraryTransactorRaw struct {
	Contract *CryptoLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCryptoLibrary creates a new instance of CryptoLibrary, bound to a specific deployed contract.
func NewCryptoLibrary(address common.Address, backend bind.ContractBackend) (*CryptoLibrary, error) {
	contract, err := bindCryptoLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CryptoLibrary{CryptoLibraryCaller: CryptoLibraryCaller{contract: contract}, CryptoLibraryTransactor: CryptoLibraryTransactor{contract: contract}, CryptoLibraryFilterer: CryptoLibraryFilterer{contract: contract}}, nil
}

// NewCryptoLibraryCaller creates a new read-only instance of CryptoLibrary, bound to a specific deployed contract.
func NewCryptoLibraryCaller(address common.Address, caller bind.ContractCaller) (*CryptoLibraryCaller, error) {
	contract, err := bindCryptoLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CryptoLibraryCaller{contract: contract}, nil
}

// NewCryptoLibraryTransactor creates a new write-only instance of CryptoLibrary, bound to a specific deployed contract.
func NewCryptoLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*CryptoLibraryTransactor, error) {
	contract, err := bindCryptoLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CryptoLibraryTransactor{contract: contract}, nil
}

// NewCryptoLibraryFilterer creates a new log filterer instance of CryptoLibrary, bound to a specific deployed contract.
func NewCryptoLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*CryptoLibraryFilterer, error) {
	contract, err := bindCryptoLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CryptoLibraryFilterer{contract: contract}, nil
}

// bindCryptoLibrary binds a generic wrapper to an already deployed contract.
func bindCryptoLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(CryptoLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CryptoLibrary *CryptoLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CryptoLibrary.Contract.CryptoLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CryptoLibrary *CryptoLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CryptoLibrary.Contract.CryptoLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CryptoLibrary *CryptoLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CryptoLibrary.Contract.CryptoLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CryptoLibrary *CryptoLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CryptoLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CryptoLibrary *CryptoLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CryptoLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CryptoLibrary *CryptoLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CryptoLibrary.Contract.contract.Transact(opts, method, params...)
}

// CustomEnumerableMapsMetaData contains all meta data concerning the CustomEnumerableMaps contract.
var CustomEnumerableMapsMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208e426e6be0a88d39077c247281eac7542a746aa3ec1512282f4ccb44182e5efc64736f6c634300080c0033",
}

// CustomEnumerableMapsABI is the input ABI used to generate the binding from.
// Deprecated: Use CustomEnumerableMapsMetaData.ABI instead.
var CustomEnumerableMapsABI = CustomEnumerableMapsMetaData.ABI

// CustomEnumerableMapsBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CustomEnumerableMapsMetaData.Bin instead.
var CustomEnumerableMapsBin = CustomEnumerableMapsMetaData.Bin

// DeployCustomEnumerableMaps deploys a new Ethereum contract, binding an instance of CustomEnumerableMaps to it.
func DeployCustomEnumerableMaps(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *CustomEnumerableMaps, error) {
	parsed, err := CustomEnumerableMapsMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CustomEnumerableMapsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CustomEnumerableMaps{CustomEnumerableMapsCaller: CustomEnumerableMapsCaller{contract: contract}, CustomEnumerableMapsTransactor: CustomEnumerableMapsTransactor{contract: contract}, CustomEnumerableMapsFilterer: CustomEnumerableMapsFilterer{contract: contract}}, nil
}

// CustomEnumerableMaps is an auto generated Go binding around an Ethereum contract.
type CustomEnumerableMaps struct {
	CustomEnumerableMapsCaller     // Read-only binding to the contract
	CustomEnumerableMapsTransactor // Write-only binding to the contract
	CustomEnumerableMapsFilterer   // Log filterer for contract events
}

// CustomEnumerableMapsCaller is an auto generated read-only Go binding around an Ethereum contract.
type CustomEnumerableMapsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CustomEnumerableMapsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CustomEnumerableMapsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CustomEnumerableMapsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CustomEnumerableMapsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CustomEnumerableMapsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CustomEnumerableMapsSession struct {
	Contract     *CustomEnumerableMaps // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// CustomEnumerableMapsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CustomEnumerableMapsCallerSession struct {
	Contract *CustomEnumerableMapsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// CustomEnumerableMapsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CustomEnumerableMapsTransactorSession struct {
	Contract     *CustomEnumerableMapsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// CustomEnumerableMapsRaw is an auto generated low-level Go binding around an Ethereum contract.
type CustomEnumerableMapsRaw struct {
	Contract *CustomEnumerableMaps // Generic contract binding to access the raw methods on
}

// CustomEnumerableMapsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CustomEnumerableMapsCallerRaw struct {
	Contract *CustomEnumerableMapsCaller // Generic read-only contract binding to access the raw methods on
}

// CustomEnumerableMapsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CustomEnumerableMapsTransactorRaw struct {
	Contract *CustomEnumerableMapsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCustomEnumerableMaps creates a new instance of CustomEnumerableMaps, bound to a specific deployed contract.
func NewCustomEnumerableMaps(address common.Address, backend bind.ContractBackend) (*CustomEnumerableMaps, error) {
	contract, err := bindCustomEnumerableMaps(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CustomEnumerableMaps{CustomEnumerableMapsCaller: CustomEnumerableMapsCaller{contract: contract}, CustomEnumerableMapsTransactor: CustomEnumerableMapsTransactor{contract: contract}, CustomEnumerableMapsFilterer: CustomEnumerableMapsFilterer{contract: contract}}, nil
}

// NewCustomEnumerableMapsCaller creates a new read-only instance of CustomEnumerableMaps, bound to a specific deployed contract.
func NewCustomEnumerableMapsCaller(address common.Address, caller bind.ContractCaller) (*CustomEnumerableMapsCaller, error) {
	contract, err := bindCustomEnumerableMaps(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CustomEnumerableMapsCaller{contract: contract}, nil
}

// NewCustomEnumerableMapsTransactor creates a new write-only instance of CustomEnumerableMaps, bound to a specific deployed contract.
func NewCustomEnumerableMapsTransactor(address common.Address, transactor bind.ContractTransactor) (*CustomEnumerableMapsTransactor, error) {
	contract, err := bindCustomEnumerableMaps(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CustomEnumerableMapsTransactor{contract: contract}, nil
}

// NewCustomEnumerableMapsFilterer creates a new log filterer instance of CustomEnumerableMaps, bound to a specific deployed contract.
func NewCustomEnumerableMapsFilterer(address common.Address, filterer bind.ContractFilterer) (*CustomEnumerableMapsFilterer, error) {
	contract, err := bindCustomEnumerableMaps(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CustomEnumerableMapsFilterer{contract: contract}, nil
}

// bindCustomEnumerableMaps binds a generic wrapper to an already deployed contract.
func bindCustomEnumerableMaps(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(CustomEnumerableMapsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CustomEnumerableMaps *CustomEnumerableMapsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CustomEnumerableMaps.Contract.CustomEnumerableMapsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CustomEnumerableMaps *CustomEnumerableMapsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CustomEnumerableMaps.Contract.CustomEnumerableMapsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CustomEnumerableMaps *CustomEnumerableMapsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CustomEnumerableMaps.Contract.CustomEnumerableMapsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CustomEnumerableMaps *CustomEnumerableMapsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CustomEnumerableMaps.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CustomEnumerableMaps *CustomEnumerableMapsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CustomEnumerableMaps.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CustomEnumerableMaps *CustomEnumerableMapsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CustomEnumerableMaps.Contract.contract.Transact(opts, method, params...)
}

// DeterministicAddressMetaData contains all meta data concerning the DeterministicAddress contract.
var DeterministicAddressMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"getMetamorphicContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
}

// DeterministicAddressABI is the input ABI used to generate the binding from.
// Deprecated: Use DeterministicAddressMetaData.ABI instead.
var DeterministicAddressABI = DeterministicAddressMetaData.ABI

// DeterministicAddress is an auto generated Go binding around an Ethereum contract.
type DeterministicAddress struct {
	DeterministicAddressCaller     // Read-only binding to the contract
	DeterministicAddressTransactor // Write-only binding to the contract
	DeterministicAddressFilterer   // Log filterer for contract events
}

// DeterministicAddressCaller is an auto generated read-only Go binding around an Ethereum contract.
type DeterministicAddressCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DeterministicAddressTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DeterministicAddressTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DeterministicAddressFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DeterministicAddressFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DeterministicAddressSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DeterministicAddressSession struct {
	Contract     *DeterministicAddress // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// DeterministicAddressCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DeterministicAddressCallerSession struct {
	Contract *DeterministicAddressCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// DeterministicAddressTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DeterministicAddressTransactorSession struct {
	Contract     *DeterministicAddressTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// DeterministicAddressRaw is an auto generated low-level Go binding around an Ethereum contract.
type DeterministicAddressRaw struct {
	Contract *DeterministicAddress // Generic contract binding to access the raw methods on
}

// DeterministicAddressCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DeterministicAddressCallerRaw struct {
	Contract *DeterministicAddressCaller // Generic read-only contract binding to access the raw methods on
}

// DeterministicAddressTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DeterministicAddressTransactorRaw struct {
	Contract *DeterministicAddressTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDeterministicAddress creates a new instance of DeterministicAddress, bound to a specific deployed contract.
func NewDeterministicAddress(address common.Address, backend bind.ContractBackend) (*DeterministicAddress, error) {
	contract, err := bindDeterministicAddress(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DeterministicAddress{DeterministicAddressCaller: DeterministicAddressCaller{contract: contract}, DeterministicAddressTransactor: DeterministicAddressTransactor{contract: contract}, DeterministicAddressFilterer: DeterministicAddressFilterer{contract: contract}}, nil
}

// NewDeterministicAddressCaller creates a new read-only instance of DeterministicAddress, bound to a specific deployed contract.
func NewDeterministicAddressCaller(address common.Address, caller bind.ContractCaller) (*DeterministicAddressCaller, error) {
	contract, err := bindDeterministicAddress(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DeterministicAddressCaller{contract: contract}, nil
}

// NewDeterministicAddressTransactor creates a new write-only instance of DeterministicAddress, bound to a specific deployed contract.
func NewDeterministicAddressTransactor(address common.Address, transactor bind.ContractTransactor) (*DeterministicAddressTransactor, error) {
	contract, err := bindDeterministicAddress(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DeterministicAddressTransactor{contract: contract}, nil
}

// NewDeterministicAddressFilterer creates a new log filterer instance of DeterministicAddress, bound to a specific deployed contract.
func NewDeterministicAddressFilterer(address common.Address, filterer bind.ContractFilterer) (*DeterministicAddressFilterer, error) {
	contract, err := bindDeterministicAddress(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DeterministicAddressFilterer{contract: contract}, nil
}

// bindDeterministicAddress binds a generic wrapper to an already deployed contract.
func bindDeterministicAddress(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DeterministicAddressABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DeterministicAddress *DeterministicAddressRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DeterministicAddress.Contract.DeterministicAddressCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DeterministicAddress *DeterministicAddressRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DeterministicAddress.Contract.DeterministicAddressTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DeterministicAddress *DeterministicAddressRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DeterministicAddress.Contract.DeterministicAddressTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DeterministicAddress *DeterministicAddressCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DeterministicAddress.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DeterministicAddress *DeterministicAddressTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DeterministicAddress.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DeterministicAddress *DeterministicAddressTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DeterministicAddress.Contract.contract.Transact(opts, method, params...)
}

// GetMetamorphicContractAddress is a free data retrieval call binding the contract method 0x8653a465.
//
// Solidity: function getMetamorphicContractAddress(bytes32 _salt, address _factory) pure returns(address)
func (_DeterministicAddress *DeterministicAddressCaller) GetMetamorphicContractAddress(opts *bind.CallOpts, _salt [32]byte, _factory common.Address) (common.Address, error) {
	var out []interface{}
	err := _DeterministicAddress.contract.Call(opts, &out, "getMetamorphicContractAddress", _salt, _factory)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetMetamorphicContractAddress is a free data retrieval call binding the contract method 0x8653a465.
//
// Solidity: function getMetamorphicContractAddress(bytes32 _salt, address _factory) pure returns(address)
func (_DeterministicAddress *DeterministicAddressSession) GetMetamorphicContractAddress(_salt [32]byte, _factory common.Address) (common.Address, error) {
	return _DeterministicAddress.Contract.GetMetamorphicContractAddress(&_DeterministicAddress.CallOpts, _salt, _factory)
}

// GetMetamorphicContractAddress is a free data retrieval call binding the contract method 0x8653a465.
//
// Solidity: function getMetamorphicContractAddress(bytes32 _salt, address _factory) pure returns(address)
func (_DeterministicAddress *DeterministicAddressCallerSession) GetMetamorphicContractAddress(_salt [32]byte, _factory common.Address) (common.Address, error) {
	return _DeterministicAddress.Contract.GetMetamorphicContractAddress(&_DeterministicAddress.CallOpts, _salt, _factory)
}

// ERC165UpgradeableMetaData contains all meta data concerning the ERC165Upgradeable contract.
var ERC165UpgradeableMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// ERC165UpgradeableABI is the input ABI used to generate the binding from.
// Deprecated: Use ERC165UpgradeableMetaData.ABI instead.
var ERC165UpgradeableABI = ERC165UpgradeableMetaData.ABI

// ERC165Upgradeable is an auto generated Go binding around an Ethereum contract.
type ERC165Upgradeable struct {
	ERC165UpgradeableCaller     // Read-only binding to the contract
	ERC165UpgradeableTransactor // Write-only binding to the contract
	ERC165UpgradeableFilterer   // Log filterer for contract events
}

// ERC165UpgradeableCaller is an auto generated read-only Go binding around an Ethereum contract.
type ERC165UpgradeableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC165UpgradeableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC165UpgradeableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC165UpgradeableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC165UpgradeableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC165UpgradeableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC165UpgradeableSession struct {
	Contract     *ERC165Upgradeable // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// ERC165UpgradeableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC165UpgradeableCallerSession struct {
	Contract *ERC165UpgradeableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// ERC165UpgradeableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC165UpgradeableTransactorSession struct {
	Contract     *ERC165UpgradeableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// ERC165UpgradeableRaw is an auto generated low-level Go binding around an Ethereum contract.
type ERC165UpgradeableRaw struct {
	Contract *ERC165Upgradeable // Generic contract binding to access the raw methods on
}

// ERC165UpgradeableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC165UpgradeableCallerRaw struct {
	Contract *ERC165UpgradeableCaller // Generic read-only contract binding to access the raw methods on
}

// ERC165UpgradeableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC165UpgradeableTransactorRaw struct {
	Contract *ERC165UpgradeableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewERC165Upgradeable creates a new instance of ERC165Upgradeable, bound to a specific deployed contract.
func NewERC165Upgradeable(address common.Address, backend bind.ContractBackend) (*ERC165Upgradeable, error) {
	contract, err := bindERC165Upgradeable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC165Upgradeable{ERC165UpgradeableCaller: ERC165UpgradeableCaller{contract: contract}, ERC165UpgradeableTransactor: ERC165UpgradeableTransactor{contract: contract}, ERC165UpgradeableFilterer: ERC165UpgradeableFilterer{contract: contract}}, nil
}

// NewERC165UpgradeableCaller creates a new read-only instance of ERC165Upgradeable, bound to a specific deployed contract.
func NewERC165UpgradeableCaller(address common.Address, caller bind.ContractCaller) (*ERC165UpgradeableCaller, error) {
	contract, err := bindERC165Upgradeable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC165UpgradeableCaller{contract: contract}, nil
}

// NewERC165UpgradeableTransactor creates a new write-only instance of ERC165Upgradeable, bound to a specific deployed contract.
func NewERC165UpgradeableTransactor(address common.Address, transactor bind.ContractTransactor) (*ERC165UpgradeableTransactor, error) {
	contract, err := bindERC165Upgradeable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC165UpgradeableTransactor{contract: contract}, nil
}

// NewERC165UpgradeableFilterer creates a new log filterer instance of ERC165Upgradeable, bound to a specific deployed contract.
func NewERC165UpgradeableFilterer(address common.Address, filterer bind.ContractFilterer) (*ERC165UpgradeableFilterer, error) {
	contract, err := bindERC165Upgradeable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC165UpgradeableFilterer{contract: contract}, nil
}

// bindERC165Upgradeable binds a generic wrapper to an already deployed contract.
func bindERC165Upgradeable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ERC165UpgradeableABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC165Upgradeable *ERC165UpgradeableRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC165Upgradeable.Contract.ERC165UpgradeableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC165Upgradeable *ERC165UpgradeableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC165Upgradeable.Contract.ERC165UpgradeableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC165Upgradeable *ERC165UpgradeableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC165Upgradeable.Contract.ERC165UpgradeableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC165Upgradeable *ERC165UpgradeableCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC165Upgradeable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC165Upgradeable *ERC165UpgradeableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC165Upgradeable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC165Upgradeable *ERC165UpgradeableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC165Upgradeable.Contract.contract.Transact(opts, method, params...)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ERC165Upgradeable *ERC165UpgradeableCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _ERC165Upgradeable.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ERC165Upgradeable *ERC165UpgradeableSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ERC165Upgradeable.Contract.SupportsInterface(&_ERC165Upgradeable.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ERC165Upgradeable *ERC165UpgradeableCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ERC165Upgradeable.Contract.SupportsInterface(&_ERC165Upgradeable.CallOpts, interfaceId)
}

// ERC20SafeTransferMetaData contains all meta data concerning the ERC20SafeTransfer contract.
var ERC20SafeTransferMetaData = &bind.MetaData{
	ABI: "[]",
}

// ERC20SafeTransferABI is the input ABI used to generate the binding from.
// Deprecated: Use ERC20SafeTransferMetaData.ABI instead.
var ERC20SafeTransferABI = ERC20SafeTransferMetaData.ABI

// ERC20SafeTransfer is an auto generated Go binding around an Ethereum contract.
type ERC20SafeTransfer struct {
	ERC20SafeTransferCaller     // Read-only binding to the contract
	ERC20SafeTransferTransactor // Write-only binding to the contract
	ERC20SafeTransferFilterer   // Log filterer for contract events
}

// ERC20SafeTransferCaller is an auto generated read-only Go binding around an Ethereum contract.
type ERC20SafeTransferCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20SafeTransferTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC20SafeTransferTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20SafeTransferFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC20SafeTransferFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20SafeTransferSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC20SafeTransferSession struct {
	Contract     *ERC20SafeTransfer // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// ERC20SafeTransferCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC20SafeTransferCallerSession struct {
	Contract *ERC20SafeTransferCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// ERC20SafeTransferTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC20SafeTransferTransactorSession struct {
	Contract     *ERC20SafeTransferTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// ERC20SafeTransferRaw is an auto generated low-level Go binding around an Ethereum contract.
type ERC20SafeTransferRaw struct {
	Contract *ERC20SafeTransfer // Generic contract binding to access the raw methods on
}

// ERC20SafeTransferCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC20SafeTransferCallerRaw struct {
	Contract *ERC20SafeTransferCaller // Generic read-only contract binding to access the raw methods on
}

// ERC20SafeTransferTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC20SafeTransferTransactorRaw struct {
	Contract *ERC20SafeTransferTransactor // Generic write-only contract binding to access the raw methods on
}

// NewERC20SafeTransfer creates a new instance of ERC20SafeTransfer, bound to a specific deployed contract.
func NewERC20SafeTransfer(address common.Address, backend bind.ContractBackend) (*ERC20SafeTransfer, error) {
	contract, err := bindERC20SafeTransfer(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC20SafeTransfer{ERC20SafeTransferCaller: ERC20SafeTransferCaller{contract: contract}, ERC20SafeTransferTransactor: ERC20SafeTransferTransactor{contract: contract}, ERC20SafeTransferFilterer: ERC20SafeTransferFilterer{contract: contract}}, nil
}

// NewERC20SafeTransferCaller creates a new read-only instance of ERC20SafeTransfer, bound to a specific deployed contract.
func NewERC20SafeTransferCaller(address common.Address, caller bind.ContractCaller) (*ERC20SafeTransferCaller, error) {
	contract, err := bindERC20SafeTransfer(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20SafeTransferCaller{contract: contract}, nil
}

// NewERC20SafeTransferTransactor creates a new write-only instance of ERC20SafeTransfer, bound to a specific deployed contract.
func NewERC20SafeTransferTransactor(address common.Address, transactor bind.ContractTransactor) (*ERC20SafeTransferTransactor, error) {
	contract, err := bindERC20SafeTransfer(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20SafeTransferTransactor{contract: contract}, nil
}

// NewERC20SafeTransferFilterer creates a new log filterer instance of ERC20SafeTransfer, bound to a specific deployed contract.
func NewERC20SafeTransferFilterer(address common.Address, filterer bind.ContractFilterer) (*ERC20SafeTransferFilterer, error) {
	contract, err := bindERC20SafeTransfer(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC20SafeTransferFilterer{contract: contract}, nil
}

// bindERC20SafeTransfer binds a generic wrapper to an already deployed contract.
func bindERC20SafeTransfer(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ERC20SafeTransferABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20SafeTransfer *ERC20SafeTransferRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20SafeTransfer.Contract.ERC20SafeTransferCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20SafeTransfer *ERC20SafeTransferRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20SafeTransfer.Contract.ERC20SafeTransferTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20SafeTransfer *ERC20SafeTransferRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20SafeTransfer.Contract.ERC20SafeTransferTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20SafeTransfer *ERC20SafeTransferCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20SafeTransfer.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20SafeTransfer *ERC20SafeTransferTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20SafeTransfer.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20SafeTransfer *ERC20SafeTransferTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20SafeTransfer.Contract.contract.Transact(opts, method, params...)
}

// ERC20UpgradeableMetaData contains all meta data concerning the ERC20Upgradeable contract.
var ERC20UpgradeableMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50610b6a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80633950935111610081578063a457c2d71161005b578063a457c2d714610194578063a9059cbb146101a7578063dd62ed3e146101ba57600080fd5b8063395093511461014357806370a082311461015657806395d89b411461018c57600080fd5b806318160ddd116100b257806318160ddd1461010f57806323b872dd14610121578063313ce5671461013457600080fd5b806306fdde03146100ce578063095ea7b3146100ec575b600080fd5b6100d6610200565b6040516100e3919061094a565b60405180910390f35b6100ff6100fa3660046109e6565b610292565b60405190151581526020016100e3565b6035545b6040519081526020016100e3565b6100ff61012f366004610a10565b6102aa565b604051601281526020016100e3565b6100ff6101513660046109e6565b6102ce565b610113610164366004610a4c565b73ffffffffffffffffffffffffffffffffffffffff1660009081526033602052604090205490565b6100d661031a565b6100ff6101a23660046109e6565b610329565b6100ff6101b53660046109e6565b6103ff565b6101136101c8366004610a6e565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260346020908152604080832093909416825291909152205490565b60606036805461020f90610aa1565b80601f016020809104026020016040519081016040528092919081815260200182805461023b90610aa1565b80156102885780601f1061025d57610100808354040283529160200191610288565b820191906000526020600020905b81548152906001019060200180831161026b57829003601f168201915b5050505050905090565b6000336102a081858561040d565b5060019392505050565b6000336102b88582856105c0565b6102c3858585610697565b506001949350505050565b33600081815260346020908152604080832073ffffffffffffffffffffffffffffffffffffffff871684529091528120549091906102a09082908690610315908790610af5565b61040d565b60606037805461020f90610aa1565b33600081815260346020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152812054909190838110156103f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6102c3828686840361040d565b6000336102a0818585610697565b73ffffffffffffffffffffffffffffffffffffffff83166104af576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016103e9565b73ffffffffffffffffffffffffffffffffffffffff8216610552576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016103e9565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152603460209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146106915781811015610684576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016103e9565b610691848484840361040d565b50505050565b73ffffffffffffffffffffffffffffffffffffffff831661073a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016103e9565b73ffffffffffffffffffffffffffffffffffffffff82166107dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016103e9565b73ffffffffffffffffffffffffffffffffffffffff831660009081526033602052604090205481811015610893576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016103e9565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152603360205260408082208585039055918516815290812080548492906108d7908490610af5565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161093d91815260200190565b60405180910390a3610691565b600060208083528351808285015260005b818110156109775785810183015185820160400152820161095b565b81811115610989576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146109e157600080fd5b919050565b600080604083850312156109f957600080fd5b610a02836109bd565b946020939093013593505050565b600080600060608486031215610a2557600080fd5b610a2e846109bd565b9250610a3c602085016109bd565b9150604084013590509250925092565b600060208284031215610a5e57600080fd5b610a67826109bd565b9392505050565b60008060408385031215610a8157600080fd5b610a8a836109bd565b9150610a98602084016109bd565b90509250929050565b600181811c90821680610ab557607f821691505b60208210811415610aef577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60008219821115610b2f577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b50019056fea2646970667358221220071f0adac74a2a5d6ae965c5ac3ad808b581c13ac6fd9d63726422caea65950164736f6c634300080c0033",
}

// ERC20UpgradeableABI is the input ABI used to generate the binding from.
// Deprecated: Use ERC20UpgradeableMetaData.ABI instead.
var ERC20UpgradeableABI = ERC20UpgradeableMetaData.ABI

// ERC20UpgradeableBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ERC20UpgradeableMetaData.Bin instead.
var ERC20UpgradeableBin = ERC20UpgradeableMetaData.Bin

// DeployERC20Upgradeable deploys a new Ethereum contract, binding an instance of ERC20Upgradeable to it.
func DeployERC20Upgradeable(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ERC20Upgradeable, error) {
	parsed, err := ERC20UpgradeableMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ERC20UpgradeableBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ERC20Upgradeable{ERC20UpgradeableCaller: ERC20UpgradeableCaller{contract: contract}, ERC20UpgradeableTransactor: ERC20UpgradeableTransactor{contract: contract}, ERC20UpgradeableFilterer: ERC20UpgradeableFilterer{contract: contract}}, nil
}

// ERC20Upgradeable is an auto generated Go binding around an Ethereum contract.
type ERC20Upgradeable struct {
	ERC20UpgradeableCaller     // Read-only binding to the contract
	ERC20UpgradeableTransactor // Write-only binding to the contract
	ERC20UpgradeableFilterer   // Log filterer for contract events
}

// ERC20UpgradeableCaller is an auto generated read-only Go binding around an Ethereum contract.
type ERC20UpgradeableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20UpgradeableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC20UpgradeableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20UpgradeableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC20UpgradeableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20UpgradeableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC20UpgradeableSession struct {
	Contract     *ERC20Upgradeable // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC20UpgradeableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC20UpgradeableCallerSession struct {
	Contract *ERC20UpgradeableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// ERC20UpgradeableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC20UpgradeableTransactorSession struct {
	Contract     *ERC20UpgradeableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// ERC20UpgradeableRaw is an auto generated low-level Go binding around an Ethereum contract.
type ERC20UpgradeableRaw struct {
	Contract *ERC20Upgradeable // Generic contract binding to access the raw methods on
}

// ERC20UpgradeableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC20UpgradeableCallerRaw struct {
	Contract *ERC20UpgradeableCaller // Generic read-only contract binding to access the raw methods on
}

// ERC20UpgradeableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC20UpgradeableTransactorRaw struct {
	Contract *ERC20UpgradeableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewERC20Upgradeable creates a new instance of ERC20Upgradeable, bound to a specific deployed contract.
func NewERC20Upgradeable(address common.Address, backend bind.ContractBackend) (*ERC20Upgradeable, error) {
	contract, err := bindERC20Upgradeable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC20Upgradeable{ERC20UpgradeableCaller: ERC20UpgradeableCaller{contract: contract}, ERC20UpgradeableTransactor: ERC20UpgradeableTransactor{contract: contract}, ERC20UpgradeableFilterer: ERC20UpgradeableFilterer{contract: contract}}, nil
}

// NewERC20UpgradeableCaller creates a new read-only instance of ERC20Upgradeable, bound to a specific deployed contract.
func NewERC20UpgradeableCaller(address common.Address, caller bind.ContractCaller) (*ERC20UpgradeableCaller, error) {
	contract, err := bindERC20Upgradeable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20UpgradeableCaller{contract: contract}, nil
}

// NewERC20UpgradeableTransactor creates a new write-only instance of ERC20Upgradeable, bound to a specific deployed contract.
func NewERC20UpgradeableTransactor(address common.Address, transactor bind.ContractTransactor) (*ERC20UpgradeableTransactor, error) {
	contract, err := bindERC20Upgradeable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20UpgradeableTransactor{contract: contract}, nil
}

// NewERC20UpgradeableFilterer creates a new log filterer instance of ERC20Upgradeable, bound to a specific deployed contract.
func NewERC20UpgradeableFilterer(address common.Address, filterer bind.ContractFilterer) (*ERC20UpgradeableFilterer, error) {
	contract, err := bindERC20Upgradeable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC20UpgradeableFilterer{contract: contract}, nil
}

// bindERC20Upgradeable binds a generic wrapper to an already deployed contract.
func bindERC20Upgradeable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ERC20UpgradeableABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20Upgradeable *ERC20UpgradeableRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20Upgradeable.Contract.ERC20UpgradeableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20Upgradeable *ERC20UpgradeableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20Upgradeable.Contract.ERC20UpgradeableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20Upgradeable *ERC20UpgradeableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20Upgradeable.Contract.ERC20UpgradeableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20Upgradeable *ERC20UpgradeableCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20Upgradeable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20Upgradeable *ERC20UpgradeableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20Upgradeable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20Upgradeable *ERC20UpgradeableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20Upgradeable.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20Upgradeable *ERC20UpgradeableCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ERC20Upgradeable.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20Upgradeable *ERC20UpgradeableSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _ERC20Upgradeable.Contract.Allowance(&_ERC20Upgradeable.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20Upgradeable *ERC20UpgradeableCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _ERC20Upgradeable.Contract.Allowance(&_ERC20Upgradeable.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20Upgradeable *ERC20UpgradeableCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ERC20Upgradeable.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20Upgradeable *ERC20UpgradeableSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _ERC20Upgradeable.Contract.BalanceOf(&_ERC20Upgradeable.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20Upgradeable *ERC20UpgradeableCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _ERC20Upgradeable.Contract.BalanceOf(&_ERC20Upgradeable.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_ERC20Upgradeable *ERC20UpgradeableCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _ERC20Upgradeable.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_ERC20Upgradeable *ERC20UpgradeableSession) Decimals() (uint8, error) {
	return _ERC20Upgradeable.Contract.Decimals(&_ERC20Upgradeable.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_ERC20Upgradeable *ERC20UpgradeableCallerSession) Decimals() (uint8, error) {
	return _ERC20Upgradeable.Contract.Decimals(&_ERC20Upgradeable.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC20Upgradeable *ERC20UpgradeableCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ERC20Upgradeable.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC20Upgradeable *ERC20UpgradeableSession) Name() (string, error) {
	return _ERC20Upgradeable.Contract.Name(&_ERC20Upgradeable.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC20Upgradeable *ERC20UpgradeableCallerSession) Name() (string, error) {
	return _ERC20Upgradeable.Contract.Name(&_ERC20Upgradeable.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC20Upgradeable *ERC20UpgradeableCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ERC20Upgradeable.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC20Upgradeable *ERC20UpgradeableSession) Symbol() (string, error) {
	return _ERC20Upgradeable.Contract.Symbol(&_ERC20Upgradeable.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC20Upgradeable *ERC20UpgradeableCallerSession) Symbol() (string, error) {
	return _ERC20Upgradeable.Contract.Symbol(&_ERC20Upgradeable.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20Upgradeable *ERC20UpgradeableCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20Upgradeable.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20Upgradeable *ERC20UpgradeableSession) TotalSupply() (*big.Int, error) {
	return _ERC20Upgradeable.Contract.TotalSupply(&_ERC20Upgradeable.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20Upgradeable *ERC20UpgradeableCallerSession) TotalSupply() (*big.Int, error) {
	return _ERC20Upgradeable.Contract.TotalSupply(&_ERC20Upgradeable.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ERC20Upgradeable *ERC20UpgradeableTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Upgradeable.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ERC20Upgradeable *ERC20UpgradeableSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Upgradeable.Contract.Approve(&_ERC20Upgradeable.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ERC20Upgradeable *ERC20UpgradeableTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Upgradeable.Contract.Approve(&_ERC20Upgradeable.TransactOpts, spender, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ERC20Upgradeable *ERC20UpgradeableTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ERC20Upgradeable.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ERC20Upgradeable *ERC20UpgradeableSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ERC20Upgradeable.Contract.DecreaseAllowance(&_ERC20Upgradeable.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ERC20Upgradeable *ERC20UpgradeableTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ERC20Upgradeable.Contract.DecreaseAllowance(&_ERC20Upgradeable.TransactOpts, spender, subtractedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ERC20Upgradeable *ERC20UpgradeableTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ERC20Upgradeable.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ERC20Upgradeable *ERC20UpgradeableSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ERC20Upgradeable.Contract.IncreaseAllowance(&_ERC20Upgradeable.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ERC20Upgradeable *ERC20UpgradeableTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ERC20Upgradeable.Contract.IncreaseAllowance(&_ERC20Upgradeable.TransactOpts, spender, addedValue)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_ERC20Upgradeable *ERC20UpgradeableTransactor) Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Upgradeable.contract.Transact(opts, "transfer", to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_ERC20Upgradeable *ERC20UpgradeableSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Upgradeable.Contract.Transfer(&_ERC20Upgradeable.TransactOpts, to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_ERC20Upgradeable *ERC20UpgradeableTransactorSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Upgradeable.Contract.Transfer(&_ERC20Upgradeable.TransactOpts, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_ERC20Upgradeable *ERC20UpgradeableTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Upgradeable.contract.Transact(opts, "transferFrom", from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_ERC20Upgradeable *ERC20UpgradeableSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Upgradeable.Contract.TransferFrom(&_ERC20Upgradeable.TransactOpts, from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_ERC20Upgradeable *ERC20UpgradeableTransactorSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Upgradeable.Contract.TransferFrom(&_ERC20Upgradeable.TransactOpts, from, to, amount)
}

// ERC20UpgradeableApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the ERC20Upgradeable contract.
type ERC20UpgradeableApprovalIterator struct {
	Event *ERC20UpgradeableApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20UpgradeableApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20UpgradeableApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20UpgradeableApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20UpgradeableApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20UpgradeableApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20UpgradeableApproval represents a Approval event raised by the ERC20Upgradeable contract.
type ERC20UpgradeableApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20Upgradeable *ERC20UpgradeableFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*ERC20UpgradeableApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _ERC20Upgradeable.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &ERC20UpgradeableApprovalIterator{contract: _ERC20Upgradeable.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20Upgradeable *ERC20UpgradeableFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ERC20UpgradeableApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _ERC20Upgradeable.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20UpgradeableApproval)
				if err := _ERC20Upgradeable.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20Upgradeable *ERC20UpgradeableFilterer) ParseApproval(log types.Log) (*ERC20UpgradeableApproval, error) {
	event := new(ERC20UpgradeableApproval)
	if err := _ERC20Upgradeable.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20UpgradeableTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the ERC20Upgradeable contract.
type ERC20UpgradeableTransferIterator struct {
	Event *ERC20UpgradeableTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20UpgradeableTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20UpgradeableTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20UpgradeableTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20UpgradeableTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20UpgradeableTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20UpgradeableTransfer represents a Transfer event raised by the ERC20Upgradeable contract.
type ERC20UpgradeableTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20Upgradeable *ERC20UpgradeableFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ERC20UpgradeableTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ERC20Upgradeable.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ERC20UpgradeableTransferIterator{contract: _ERC20Upgradeable.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20Upgradeable *ERC20UpgradeableFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ERC20UpgradeableTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ERC20Upgradeable.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20UpgradeableTransfer)
				if err := _ERC20Upgradeable.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20Upgradeable *ERC20UpgradeableFilterer) ParseTransfer(log types.Log) (*ERC20UpgradeableTransfer, error) {
	event := new(ERC20UpgradeableTransfer)
	if err := _ERC20Upgradeable.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC721HolderMetaData contains all meta data concerning the ERC721Holder contract.
var ERC721HolderMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50610224806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063150b7a0214610030575b600080fd5b61006761003e3660046100f4565b7f150b7a0200000000000000000000000000000000000000000000000000000000949350505050565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200160405180910390f35b803573ffffffffffffffffffffffffffffffffffffffff811681146100c057600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806000806080858703121561010a57600080fd5b6101138561009c565b93506101216020860161009c565b925060408501359150606085013567ffffffffffffffff8082111561014557600080fd5b818701915087601f83011261015957600080fd5b81358181111561016b5761016b6100c5565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156101b1576101b16100c5565b816040528281528a60208487010111156101ca57600080fd5b8260208601602083013760006020848301015280955050505050509295919450925056fea264697066735822122051c7bc569f4ab10134db2e7938e43fc9309817407e0286f60d00703178caa18164736f6c634300080c0033",
}

// ERC721HolderABI is the input ABI used to generate the binding from.
// Deprecated: Use ERC721HolderMetaData.ABI instead.
var ERC721HolderABI = ERC721HolderMetaData.ABI

// ERC721HolderBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ERC721HolderMetaData.Bin instead.
var ERC721HolderBin = ERC721HolderMetaData.Bin

// DeployERC721Holder deploys a new Ethereum contract, binding an instance of ERC721Holder to it.
func DeployERC721Holder(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ERC721Holder, error) {
	parsed, err := ERC721HolderMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ERC721HolderBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ERC721Holder{ERC721HolderCaller: ERC721HolderCaller{contract: contract}, ERC721HolderTransactor: ERC721HolderTransactor{contract: contract}, ERC721HolderFilterer: ERC721HolderFilterer{contract: contract}}, nil
}

// ERC721Holder is an auto generated Go binding around an Ethereum contract.
type ERC721Holder struct {
	ERC721HolderCaller     // Read-only binding to the contract
	ERC721HolderTransactor // Write-only binding to the contract
	ERC721HolderFilterer   // Log filterer for contract events
}

// ERC721HolderCaller is an auto generated read-only Go binding around an Ethereum contract.
type ERC721HolderCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC721HolderTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC721HolderTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC721HolderFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC721HolderFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC721HolderSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC721HolderSession struct {
	Contract     *ERC721Holder     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC721HolderCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC721HolderCallerSession struct {
	Contract *ERC721HolderCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// ERC721HolderTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC721HolderTransactorSession struct {
	Contract     *ERC721HolderTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// ERC721HolderRaw is an auto generated low-level Go binding around an Ethereum contract.
type ERC721HolderRaw struct {
	Contract *ERC721Holder // Generic contract binding to access the raw methods on
}

// ERC721HolderCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC721HolderCallerRaw struct {
	Contract *ERC721HolderCaller // Generic read-only contract binding to access the raw methods on
}

// ERC721HolderTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC721HolderTransactorRaw struct {
	Contract *ERC721HolderTransactor // Generic write-only contract binding to access the raw methods on
}

// NewERC721Holder creates a new instance of ERC721Holder, bound to a specific deployed contract.
func NewERC721Holder(address common.Address, backend bind.ContractBackend) (*ERC721Holder, error) {
	contract, err := bindERC721Holder(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC721Holder{ERC721HolderCaller: ERC721HolderCaller{contract: contract}, ERC721HolderTransactor: ERC721HolderTransactor{contract: contract}, ERC721HolderFilterer: ERC721HolderFilterer{contract: contract}}, nil
}

// NewERC721HolderCaller creates a new read-only instance of ERC721Holder, bound to a specific deployed contract.
func NewERC721HolderCaller(address common.Address, caller bind.ContractCaller) (*ERC721HolderCaller, error) {
	contract, err := bindERC721Holder(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC721HolderCaller{contract: contract}, nil
}

// NewERC721HolderTransactor creates a new write-only instance of ERC721Holder, bound to a specific deployed contract.
func NewERC721HolderTransactor(address common.Address, transactor bind.ContractTransactor) (*ERC721HolderTransactor, error) {
	contract, err := bindERC721Holder(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC721HolderTransactor{contract: contract}, nil
}

// NewERC721HolderFilterer creates a new log filterer instance of ERC721Holder, bound to a specific deployed contract.
func NewERC721HolderFilterer(address common.Address, filterer bind.ContractFilterer) (*ERC721HolderFilterer, error) {
	contract, err := bindERC721Holder(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC721HolderFilterer{contract: contract}, nil
}

// bindERC721Holder binds a generic wrapper to an already deployed contract.
func bindERC721Holder(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ERC721HolderABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC721Holder *ERC721HolderRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC721Holder.Contract.ERC721HolderCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC721Holder *ERC721HolderRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC721Holder.Contract.ERC721HolderTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC721Holder *ERC721HolderRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC721Holder.Contract.ERC721HolderTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC721Holder *ERC721HolderCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC721Holder.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC721Holder *ERC721HolderTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC721Holder.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC721Holder *ERC721HolderTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC721Holder.Contract.contract.Transact(opts, method, params...)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address , uint256 , bytes ) returns(bytes4)
func (_ERC721Holder *ERC721HolderTransactor) OnERC721Received(opts *bind.TransactOpts, arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 []byte) (*types.Transaction, error) {
	return _ERC721Holder.contract.Transact(opts, "onERC721Received", arg0, arg1, arg2, arg3)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address , uint256 , bytes ) returns(bytes4)
func (_ERC721Holder *ERC721HolderSession) OnERC721Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 []byte) (*types.Transaction, error) {
	return _ERC721Holder.Contract.OnERC721Received(&_ERC721Holder.TransactOpts, arg0, arg1, arg2, arg3)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address , uint256 , bytes ) returns(bytes4)
func (_ERC721Holder *ERC721HolderTransactorSession) OnERC721Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 []byte) (*types.Transaction, error) {
	return _ERC721Holder.Contract.OnERC721Received(&_ERC721Holder.TransactOpts, arg0, arg1, arg2, arg3)
}

// ERC721UpgradeableMetaData contains all meta data concerning the ERC721Upgradeable contract.
var ERC721UpgradeableMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

// ERC721UpgradeableABI is the input ABI used to generate the binding from.
// Deprecated: Use ERC721UpgradeableMetaData.ABI instead.
var ERC721UpgradeableABI = ERC721UpgradeableMetaData.ABI

// ERC721UpgradeableBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ERC721UpgradeableMetaData.Bin instead.
var ERC721UpgradeableBin = ERC721UpgradeableMetaData.Bin

// DeployERC721Upgradeable deploys a new Ethereum contract, binding an instance of ERC721Upgradeable to it.
func DeployERC721Upgradeable(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ERC721Upgradeable, error) {
	parsed, err := ERC721UpgradeableMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ERC721UpgradeableBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ERC721Upgradeable{ERC721UpgradeableCaller: ERC721UpgradeableCaller{contract: contract}, ERC721UpgradeableTransactor: ERC721UpgradeableTransactor{contract: contract}, ERC721UpgradeableFilterer: ERC721UpgradeableFilterer{contract: contract}}, nil
}

// ERC721Upgradeable is an auto generated Go binding around an Ethereum contract.
type ERC721Upgradeable struct {
	ERC721UpgradeableCaller     // Read-only binding to the contract
	ERC721UpgradeableTransactor // Write-only binding to the contract
	ERC721UpgradeableFilterer   // Log filterer for contract events
}

// ERC721UpgradeableCaller is an auto generated read-only Go binding around an Ethereum contract.
type ERC721UpgradeableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC721UpgradeableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC721UpgradeableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC721UpgradeableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC721UpgradeableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC721UpgradeableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC721UpgradeableSession struct {
	Contract     *ERC721Upgradeable // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// ERC721UpgradeableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC721UpgradeableCallerSession struct {
	Contract *ERC721UpgradeableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// ERC721UpgradeableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC721UpgradeableTransactorSession struct {
	Contract     *ERC721UpgradeableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// ERC721UpgradeableRaw is an auto generated low-level Go binding around an Ethereum contract.
type ERC721UpgradeableRaw struct {
	Contract *ERC721Upgradeable // Generic contract binding to access the raw methods on
}

// ERC721UpgradeableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC721UpgradeableCallerRaw struct {
	Contract *ERC721UpgradeableCaller // Generic read-only contract binding to access the raw methods on
}

// ERC721UpgradeableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC721UpgradeableTransactorRaw struct {
	Contract *ERC721UpgradeableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewERC721Upgradeable creates a new instance of ERC721Upgradeable, bound to a specific deployed contract.
func NewERC721Upgradeable(address common.Address, backend bind.ContractBackend) (*ERC721Upgradeable, error) {
	contract, err := bindERC721Upgradeable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC721Upgradeable{ERC721UpgradeableCaller: ERC721UpgradeableCaller{contract: contract}, ERC721UpgradeableTransactor: ERC721UpgradeableTransactor{contract: contract}, ERC721UpgradeableFilterer: ERC721UpgradeableFilterer{contract: contract}}, nil
}

// NewERC721UpgradeableCaller creates a new read-only instance of ERC721Upgradeable, bound to a specific deployed contract.
func NewERC721UpgradeableCaller(address common.Address, caller bind.ContractCaller) (*ERC721UpgradeableCaller, error) {
	contract, err := bindERC721Upgradeable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC721UpgradeableCaller{contract: contract}, nil
}

// NewERC721UpgradeableTransactor creates a new write-only instance of ERC721Upgradeable, bound to a specific deployed contract.
func NewERC721UpgradeableTransactor(address common.Address, transactor bind.ContractTransactor) (*ERC721UpgradeableTransactor, error) {
	contract, err := bindERC721Upgradeable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC721UpgradeableTransactor{contract: contract}, nil
}

// NewERC721UpgradeableFilterer creates a new log filterer instance of ERC721Upgradeable, bound to a specific deployed contract.
func NewERC721UpgradeableFilterer(address common.Address, filterer bind.ContractFilterer) (*ERC721UpgradeableFilterer, error) {
	contract, err := bindERC721Upgradeable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC721UpgradeableFilterer{contract: contract}, nil
}

// bindERC721Upgradeable binds a generic wrapper to an already deployed contract.
func bindERC721Upgradeable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ERC721UpgradeableABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC721Upgradeable *ERC721UpgradeableRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC721Upgradeable.Contract.ERC721UpgradeableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC721Upgradeable *ERC721UpgradeableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC721Upgradeable.Contract.ERC721UpgradeableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC721Upgradeable *ERC721UpgradeableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC721Upgradeable.Contract.ERC721UpgradeableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC721Upgradeable *ERC721UpgradeableCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC721Upgradeable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC721Upgradeable *ERC721UpgradeableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC721Upgradeable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC721Upgradeable *ERC721UpgradeableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC721Upgradeable.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_ERC721Upgradeable *ERC721UpgradeableCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ERC721Upgradeable.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_ERC721Upgradeable *ERC721UpgradeableSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _ERC721Upgradeable.Contract.BalanceOf(&_ERC721Upgradeable.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_ERC721Upgradeable *ERC721UpgradeableCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _ERC721Upgradeable.Contract.BalanceOf(&_ERC721Upgradeable.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_ERC721Upgradeable *ERC721UpgradeableCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ERC721Upgradeable.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_ERC721Upgradeable *ERC721UpgradeableSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _ERC721Upgradeable.Contract.GetApproved(&_ERC721Upgradeable.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_ERC721Upgradeable *ERC721UpgradeableCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _ERC721Upgradeable.Contract.GetApproved(&_ERC721Upgradeable.CallOpts, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ERC721Upgradeable *ERC721UpgradeableCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _ERC721Upgradeable.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ERC721Upgradeable *ERC721UpgradeableSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _ERC721Upgradeable.Contract.IsApprovedForAll(&_ERC721Upgradeable.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ERC721Upgradeable *ERC721UpgradeableCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _ERC721Upgradeable.Contract.IsApprovedForAll(&_ERC721Upgradeable.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC721Upgradeable *ERC721UpgradeableCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ERC721Upgradeable.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC721Upgradeable *ERC721UpgradeableSession) Name() (string, error) {
	return _ERC721Upgradeable.Contract.Name(&_ERC721Upgradeable.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC721Upgradeable *ERC721UpgradeableCallerSession) Name() (string, error) {
	return _ERC721Upgradeable.Contract.Name(&_ERC721Upgradeable.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_ERC721Upgradeable *ERC721UpgradeableCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ERC721Upgradeable.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_ERC721Upgradeable *ERC721UpgradeableSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _ERC721Upgradeable.Contract.OwnerOf(&_ERC721Upgradeable.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_ERC721Upgradeable *ERC721UpgradeableCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _ERC721Upgradeable.Contract.OwnerOf(&_ERC721Upgradeable.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ERC721Upgradeable *ERC721UpgradeableCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _ERC721Upgradeable.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ERC721Upgradeable *ERC721UpgradeableSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ERC721Upgradeable.Contract.SupportsInterface(&_ERC721Upgradeable.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ERC721Upgradeable *ERC721UpgradeableCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ERC721Upgradeable.Contract.SupportsInterface(&_ERC721Upgradeable.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC721Upgradeable *ERC721UpgradeableCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ERC721Upgradeable.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC721Upgradeable *ERC721UpgradeableSession) Symbol() (string, error) {
	return _ERC721Upgradeable.Contract.Symbol(&_ERC721Upgradeable.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC721Upgradeable *ERC721UpgradeableCallerSession) Symbol() (string, error) {
	return _ERC721Upgradeable.Contract.Symbol(&_ERC721Upgradeable.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ERC721Upgradeable *ERC721UpgradeableCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _ERC721Upgradeable.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ERC721Upgradeable *ERC721UpgradeableSession) TokenURI(tokenId *big.Int) (string, error) {
	return _ERC721Upgradeable.Contract.TokenURI(&_ERC721Upgradeable.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ERC721Upgradeable *ERC721UpgradeableCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _ERC721Upgradeable.Contract.TokenURI(&_ERC721Upgradeable.CallOpts, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_ERC721Upgradeable *ERC721UpgradeableTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721Upgradeable.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_ERC721Upgradeable *ERC721UpgradeableSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721Upgradeable.Contract.Approve(&_ERC721Upgradeable.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_ERC721Upgradeable *ERC721UpgradeableTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721Upgradeable.Contract.Approve(&_ERC721Upgradeable.TransactOpts, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_ERC721Upgradeable *ERC721UpgradeableTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721Upgradeable.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_ERC721Upgradeable *ERC721UpgradeableSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721Upgradeable.Contract.SafeTransferFrom(&_ERC721Upgradeable.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_ERC721Upgradeable *ERC721UpgradeableTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721Upgradeable.Contract.SafeTransferFrom(&_ERC721Upgradeable.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_ERC721Upgradeable *ERC721UpgradeableTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _ERC721Upgradeable.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_ERC721Upgradeable *ERC721UpgradeableSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _ERC721Upgradeable.Contract.SafeTransferFrom0(&_ERC721Upgradeable.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_ERC721Upgradeable *ERC721UpgradeableTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _ERC721Upgradeable.Contract.SafeTransferFrom0(&_ERC721Upgradeable.TransactOpts, from, to, tokenId, _data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ERC721Upgradeable *ERC721UpgradeableTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _ERC721Upgradeable.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ERC721Upgradeable *ERC721UpgradeableSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _ERC721Upgradeable.Contract.SetApprovalForAll(&_ERC721Upgradeable.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ERC721Upgradeable *ERC721UpgradeableTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _ERC721Upgradeable.Contract.SetApprovalForAll(&_ERC721Upgradeable.TransactOpts, operator, approved)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_ERC721Upgradeable *ERC721UpgradeableTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721Upgradeable.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_ERC721Upgradeable *ERC721UpgradeableSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721Upgradeable.Contract.TransferFrom(&_ERC721Upgradeable.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_ERC721Upgradeable *ERC721UpgradeableTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721Upgradeable.Contract.TransferFrom(&_ERC721Upgradeable.TransactOpts, from, to, tokenId)
}

// ERC721UpgradeableApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the ERC721Upgradeable contract.
type ERC721UpgradeableApprovalIterator struct {
	Event *ERC721UpgradeableApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC721UpgradeableApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC721UpgradeableApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC721UpgradeableApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC721UpgradeableApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC721UpgradeableApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC721UpgradeableApproval represents a Approval event raised by the ERC721Upgradeable contract.
type ERC721UpgradeableApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_ERC721Upgradeable *ERC721UpgradeableFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*ERC721UpgradeableApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ERC721Upgradeable.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ERC721UpgradeableApprovalIterator{contract: _ERC721Upgradeable.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_ERC721Upgradeable *ERC721UpgradeableFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ERC721UpgradeableApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ERC721Upgradeable.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC721UpgradeableApproval)
				if err := _ERC721Upgradeable.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_ERC721Upgradeable *ERC721UpgradeableFilterer) ParseApproval(log types.Log) (*ERC721UpgradeableApproval, error) {
	event := new(ERC721UpgradeableApproval)
	if err := _ERC721Upgradeable.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC721UpgradeableApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the ERC721Upgradeable contract.
type ERC721UpgradeableApprovalForAllIterator struct {
	Event *ERC721UpgradeableApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC721UpgradeableApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC721UpgradeableApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC721UpgradeableApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC721UpgradeableApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC721UpgradeableApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC721UpgradeableApprovalForAll represents a ApprovalForAll event raised by the ERC721Upgradeable contract.
type ERC721UpgradeableApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ERC721Upgradeable *ERC721UpgradeableFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*ERC721UpgradeableApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ERC721Upgradeable.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &ERC721UpgradeableApprovalForAllIterator{contract: _ERC721Upgradeable.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ERC721Upgradeable *ERC721UpgradeableFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *ERC721UpgradeableApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ERC721Upgradeable.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC721UpgradeableApprovalForAll)
				if err := _ERC721Upgradeable.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ERC721Upgradeable *ERC721UpgradeableFilterer) ParseApprovalForAll(log types.Log) (*ERC721UpgradeableApprovalForAll, error) {
	event := new(ERC721UpgradeableApprovalForAll)
	if err := _ERC721Upgradeable.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC721UpgradeableTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the ERC721Upgradeable contract.
type ERC721UpgradeableTransferIterator struct {
	Event *ERC721UpgradeableTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC721UpgradeableTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC721UpgradeableTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC721UpgradeableTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC721UpgradeableTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC721UpgradeableTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC721UpgradeableTransfer represents a Transfer event raised by the ERC721Upgradeable contract.
type ERC721UpgradeableTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_ERC721Upgradeable *ERC721UpgradeableFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*ERC721UpgradeableTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ERC721Upgradeable.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ERC721UpgradeableTransferIterator{contract: _ERC721Upgradeable.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_ERC721Upgradeable *ERC721UpgradeableFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ERC721UpgradeableTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ERC721Upgradeable.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC721UpgradeableTransfer)
				if err := _ERC721Upgradeable.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_ERC721Upgradeable *ERC721UpgradeableFilterer) ParseTransfer(log types.Log) (*ERC721UpgradeableTransfer, error) {
	event := new(ERC721UpgradeableTransfer)
	if err := _ERC721Upgradeable.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGMetaData contains all meta data concerning the ETHDKG contract.
var ETHDKGMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"publicKey\",\"type\":\"uint256[2]\"}],\"name\":\"AddressRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"GPKJSubmissionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"KeyShareSubmissionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1CorrectnessProof\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"keyShareG2\",\"type\":\"uint256[4]\"}],\"name\":\"KeyShareSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"mpk\",\"type\":\"uint256[4]\"}],\"name\":\"MPKSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"RegistrationComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberValidators\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"phaseLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"confirmationLength\",\"type\":\"uint256\"}],\"name\":\"RegistrationOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"ShareDistributionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"encryptedShares\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"}],\"name\":\"SharesDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share3\",\"type\":\"uint256\"}],\"name\":\"ValidatorMemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethHeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"madHeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey3\",\"type\":\"uint256\"}],\"name\":\"ValidatorSetCompleted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dishonestAddresses\",\"type\":\"address[]\"}],\"name\":\"accuseParticipantDidNotDistributeShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dishonestAddresses\",\"type\":\"address[]\"}],\"name\":\"accuseParticipantDidNotSubmitGPKJ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dishonestAddresses\",\"type\":\"address[]\"}],\"name\":\"accuseParticipantDidNotSubmitKeyShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dishonestAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"encryptedShares\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"},{\"internalType\":\"uint256[2]\",\"name\":\"sharedKey\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"sharedKeyCorrectnessProof\",\"type\":\"uint256[2]\"}],\"name\":\"accuseParticipantDistributedBadShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dishonestAddresses\",\"type\":\"address[]\"}],\"name\":\"accuseParticipantNotRegistered\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"encryptedSharesHash\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[2][][]\",\"name\":\"commitments\",\"type\":\"uint256[2][][]\"},{\"internalType\":\"address\",\"name\":\"dishonestAddress\",\"type\":\"address\"}],\"name\":\"accuseParticipantSubmittedBadGPKJ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"complete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"encryptedShares\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"}],\"name\":\"distributeShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBadParticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfirmationLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getETHDKGPhase\",\"outputs\":[{\"internalType\":\"enumPhase\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMasterPublicKey\",\"outputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"\",\"type\":\"uint256[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"getMetamorphicContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinValidators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumParticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"getParticipantInternalState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"publicKey\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"enumPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"distributedSharesHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[2]\",\"name\":\"commitmentsFirstCoefficient\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"keyShares\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"gpkj\",\"type\":\"uint256[4]\"}],\"internalType\":\"structParticipant\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"participantAddresses\",\"type\":\"address[]\"}],\"name\":\"getParticipantsInternalState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"publicKey\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"enumPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"distributedSharesHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[2]\",\"name\":\"commitmentsFirstCoefficient\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"keyShares\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"gpkj\",\"type\":\"uint256[4]\"}],\"internalType\":\"structParticipant[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPhaseLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPhaseStartBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeETHDKG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isETHDKGCompleted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isETHDKGHalted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isETHDKGRunning\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMasterPublicKeySet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"publicKey\",\"type\":\"uint256[2]\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"confirmationLength_\",\"type\":\"uint16\"}],\"name\":\"setConfirmationLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"madnetHeight\",\"type\":\"uint256\"}],\"name\":\"setCustomMadnetHeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"phaseLength_\",\"type\":\"uint16\"}],\"name\":\"setPhaseLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"gpkj\",\"type\":\"uint256[4]\"}],\"name\":\"submitGPKJ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1CorrectnessProof\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"keyShareG2\",\"type\":\"uint256[4]\"}],\"name\":\"submitKeyShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"masterPublicKey_\",\"type\":\"uint256[4]\"}],\"name\":\"submitMasterPublicKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"tryGetParticipantIndex\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x61012060405234801561001157600080fd5b5033610100818152604080517fff0000000000000000000000000000000000000000000000000000000000000060208083018290526001600160601b0319606087811b8216602186015268536e617073686f747360b81b60358601527f1c0bf703a3415cada9785e89e9d70314c3111ae7d8e04f33bb42eb1d264088be6055808701829052875180880390910181526075870188528051908501206001600160a01b039081166080908152895160958901889052841b851660968901526c15985b1a59185d1bdc941bdbdb609a1b60aa89015260ca8089018490528951808a03909101815260ea89018a52805190870120821660a09081528a5161010a8a01899052851b861661010b8a01526b455448444b4750686173657360a01b61011f8a015261013f808a018590528a51808b03909101815261015f8a018b52805190880120831660c09081528b5161017f8b01999099529790941b90941661018088015270455448444b4741636375736174696f6e7360781b6101948801526101b480880192909252875180880390920182526101d49096019096528551959092019490942090921660e0819052600280546001600160a01b03191690961790955591519051915192519093919291906135e161025560003960005050600061236f015260006122c701526000818161068401528181610818015281816109a701528181610b0801528181610bed015281816110ef015281816112810152818161155c01528181611f32015261255a01526000818161164b01526116da01526135e16000f3fe608060405234801561001057600080fd5b506004361061025c5760003560e01c806380b97e0111610145578063d087d288116100bd578063ecbadb361161008c578063f72c45b611610071578063f72c45b614610565578063fd478ca914610578578063ff3e5e451461059d57600080fd5b8063ecbadb361461054b578063edbe7bf71461055257600080fd5b8063d087d288146104f8578063dae681bc14610510578063e146372a14610523578063e83232241461053857600080fd5b80638a3c24cc11610114578063a2bc9c78116100f9578063a2bc9c7814610498578063bf7786b6146104b8578063c016baee146104d857600080fd5b80638a3c24cc1461045a5780638c848d321461046d57600080fd5b806380b97e01146104195780638129fc1c1461042c5780638328cdf7146104345780638653a4651461044757600080fd5b8063522e1177116101d85780636e9960c3116101a7578063747b217c1161018c578063747b217c146103eb5780637df24ee9146103f3578063800012641461040657600080fd5b80636e9960c314610399578063704b6c02146103d857600080fd5b8063522e11771461034c57806357b51c9c1461035457806362a6523e1461035c57806365e62b9b1461036f57600080fd5b80632958e81c1161022f57806332d4d5701161021457806332d4d5701461030a5780633442af5c1461033157806343ced5341461034457600080fd5b80632958e81c146102d95780632b7c67241461030257600080fd5b8063043a6f121461026157806308efcf1614610276578063101f49c114610293578063106da57d146102a6575b600080fd5b61027461026f366004612a7a565b6105b0565b005b61027e610625565b60405190151581526020015b60405180910390f35b6102746102a1366004612b25565b610656565b600054790100000000000000000000000000000000000000000000000000900461ffff165b60405190815260200161028a565b6000547201000000000000000000000000000000000000900460ff1660405161028a9190612bab565b61027e6107e0565b60005477010000000000000000000000000000000000000000000000900461ffff166102cb565b61027461033f366004612c04565b6107ea565b61027e61096f565b610274610979565b610274610af0565b61027461036a366004612c20565b610bbf565b61038261037d366004612c67565b610d4e565b60408051921515835260208301919091520161028a565b60025473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161028a565b6102746103e6366004612c67565b610f58565b61027e611046565b610274610401366004612a7a565b611050565b610274610414366004612d66565b6110c1565b610274610427366004612eae565b611253565b6102746113df565b610274610442366004612f12565b611544565b6103b3610455366004612f2b565b6117bc565b610274610468366004612f57565b611866565b6000547b01000000000000000000000000000000000000000000000000000000900461ffff166102cb565b6000546a0100000000000000000000900467ffffffffffffffff166102cb565b6104cb6104c6366004612c67565b611a1a565b60405161028a9190613047565b6104eb6104e6366004613056565b611ba4565b60405161028a91906130cb565b60005462010000900467ffffffffffffffff166102cb565b61027461051e366004612a7a565b611de7565b61052b611e58565b60405161028a919061311a565b610274610546366004612b25565b611e93565b60046102cb565b610274610560366004613128565b611f04565b610274610573366004612a7a565b612099565b600054730100000000000000000000000000000000000000900463ffffffff166102cb565b6102746105ab366004612f57565b61210a565b610621816040516024016105c49190613211565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f043a6f12000000000000000000000000000000000000000000000000000000001790526122c0565b5050565b600354600090151580610639575060045415155b80610645575060055415155b80610651575060065415155b905090565b6040517ffacd743b0000000000000000000000000000000000000000000000000000000081523360048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063facd743b90602401602060405180830381865afa1580156106e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107049190613253565b61076f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f455448444b473a204f6e6c792076616c696461746f727320616c6c6f7765642160448201526064015b60405180910390fd5b61062181604051602401610783919061311a565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f101f49c100000000000000000000000000000000000000000000000000000000179052612368565b60006106516123b2565b6040517ffacd743b0000000000000000000000000000000000000000000000000000000081523360048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063facd743b90602401602060405180830381865afa158015610874573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108989190613253565b6108fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f455448444b473a204f6e6c792076616c696461746f727320616c6c6f776564216044820152606401610766565b610621816040516024016109129190613275565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f3442af5c00000000000000000000000000000000000000000000000000000000179052612368565b60006106516123e9565b6040517ffacd743b0000000000000000000000000000000000000000000000000000000081523360048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063facd743b90602401602060405180830381865afa158015610a03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a279190613253565b610a8d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f455448444b473a204f6e6c792076616c696461746f727320616c6c6f776564216044820152606401610766565b6040805160048152602481019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f522e117700000000000000000000000000000000000000000000000000000000179052610aed90612368565b50565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610bb5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f455448444b473a204f6e6c792076616c696461746f72506f6f6c20636f6e747260448201527f61637420616c6c6f7765642100000000000000000000000000000000000000006064820152608401610766565b610bbd612556565b565b6040517ffacd743b0000000000000000000000000000000000000000000000000000000081523360048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063facd743b90602401602060405180830381865afa158015610c49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6d9190613253565b610cd3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f455448444b473a204f6e6c792076616c696461746f727320616c6c6f776564216044820152606401610766565b610d48838383604051602401610ceb93929190613283565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f62a6523e00000000000000000000000000000000000000000000000000000000179052612368565b50505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526009602052604080822081516101408101909252829182918161010081018260028282826020028201915b815481526020019060010190808311610d95575050509183525050600282015467ffffffffffffffff8082166020840152680100000000000000008204166040830152606090910190700100000000000000000000000000000000900460ff166007811115610e0657610e06612b41565b6007811115610e1757610e17612b41565b8152600382015460208201526040805180820182529101906004830160028282826020028201915b815481526020019060010190808311610e3f575050509183525050604080518082019182905260209092019190600684019060029082845b815481526020019060010190808311610e7757505050918352505060408051608081019182905260209092019190600884019060049082845b815481526020019060010190808311610eb0575050505050815250509050600060029054906101000a900467ffffffffffffffff1667ffffffffffffffff16816020015167ffffffffffffffff161415610f4c5750505073ffffffffffffffffffffffffffffffffffffffff166000908152600960205260409020600201546001916801000000000000000090910467ffffffffffffffff1690565b50600093849350915050565b60025473ffffffffffffffffffffffffffffffffffffffff163314610fff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f455448444b473a2072657175697265732061646d696e2070726976696c65676560448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610766565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6000610651612821565b610621816040516024016110649190613211565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f7df24ee9000000000000000000000000000000000000000000000000000000001790526122c0565b6040517ffacd743b0000000000000000000000000000000000000000000000000000000081523360048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063facd743b90602401602060405180830381865afa15801561114b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116f9190613253565b6111d5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f455448444b473a204f6e6c792076616c696461746f727320616c6c6f776564216044820152606401610766565b61124c848484846040516024016111ef94939291906132e6565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f80001264000000000000000000000000000000000000000000000000000000001790526122c0565b5050505050565b6040517ffacd743b0000000000000000000000000000000000000000000000000000000081523360048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063facd743b90602401602060405180830381865afa1580156112dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113019190613253565b611367576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f455448444b473a204f6e6c792076616c696461746f727320616c6c6f776564216044820152606401610766565b6113da828260405160240161137d9291906133e4565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f80b97e0100000000000000000000000000000000000000000000000000000000179052612368565b505050565b600054610100900460ff166113fa5760005460ff1615611402565b611402612865565b61148e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610766565b600054610100900460ff161580156114cd57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b600080547fffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffffff167b060028000000000000000000000000000000000000000000000000001790558015610aed57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614611609576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f455448444b473a204f6e6c792076616c696461746f72506f6f6c20636f6e747260448201527f61637420616c6c6f7765642100000000000000000000000000000000000000006064820152608401610766565b806001819055507fd7237b781669fa700ecf77be6cd8fa0f4b98b1a24ac584a9b6b44c509216718a60008060029054906101000a900467ffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663757991a86040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d89190613409565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663026c2b7e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611743573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117679190613409565b6040805194855267ffffffffffffffff909316602085015291830152606082015260808101839052600060a0820181905260c0820181905260e08201819052610100820152610120015b60405180910390a150565b6040517fff0000000000000000000000000000000000000000000000000000000000000060208201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606083901b166021820152603581018390527f1c0bf703a3415cada9785e89e9d70314c3111ae7d8e04f33bb42eb1d264088be60558201526000906075016040516020818303038152906040528051906020012060001c90505b92915050565b60025473ffffffffffffffffffffffffffffffffffffffff16331461190d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f455448444b473a2072657175697265732061646d696e2070726976696c65676560448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610766565b611915612821565b156119c8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604260248201527f455448444b473a2054686973207661726961626c652063616e6e6f742062652060448201527f73657420696620616e20455448444b4720726f756e642069732072756e6e696e60648201527f6721000000000000000000000000000000000000000000000000000000000000608482015260a401610766565b6000805461ffff909216790100000000000000000000000000000000000000000000000000027fffffffffff0000ffffffffffffffffffffffffffffffffffffffffffffffffff909216919091179055565b611a22612870565b73ffffffffffffffffffffffffffffffffffffffff821660009081526009602052604090819020815161014081019092528161010081018260028282826020028201915b815481526020019060010190808311611a66575050509183525050600282015467ffffffffffffffff8082166020840152680100000000000000008204166040830152606090910190700100000000000000000000000000000000900460ff166007811115611ad757611ad7612b41565b6007811115611ae857611ae8612b41565b8152600382015460208201526040805180820182529101906004830160028282826020028201915b815481526020019060010190808311611b10575050509183525050604080518082019182905260209092019190600684019060029082845b815481526020019060010190808311611b4857505050918352505060408051608081019182905260209092019190600884019060049082845b815481526020019060010190808311611b81575050505050815250509050919050565b606060008267ffffffffffffffff811115611bc157611bc161295b565b604051908082528060200260200182016040528015611bfa57816020015b611be7612870565b815260200190600190039081611bdf5790505b50905060005b83811015611ddf5760096000868684818110611c1e57611c1e613224565b9050602002016020810190611c339190612c67565b73ffffffffffffffffffffffffffffffffffffffff16815260208101919091526040908101600020815161014081019092528161010081018260028282826020028201915b815481526020019060010190808311611c78575050509183525050600282015467ffffffffffffffff8082166020840152680100000000000000008204166040830152606090910190700100000000000000000000000000000000900460ff166007811115611ce957611ce9612b41565b6007811115611cfa57611cfa612b41565b8152600382015460208201526040805180820182529101906004830160028282826020028201915b815481526020019060010190808311611d22575050509183525050604080518082019182905260209092019190600684019060029082845b815481526020019060010190808311611d5a57505050918352505060408051608081019182905260209092019190600884019060049082845b815481526020019060010190808311611d9357505050505081525050828281518110611dc157611dc1613224565b60200260200101819052508080611dd790613451565b915050611c00565b509392505050565b61062181604051602401611dfb9190613211565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fdae681bc000000000000000000000000000000000000000000000000000000001790526122c0565b611e606128cc565b6040805160808101918290529060039060049082845b815481526020019060010190808311611e76575050505050905090565b61062181604051602401611ea7919061311a565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fe832322400000000000000000000000000000000000000000000000000000000179052612368565b6040517ffacd743b0000000000000000000000000000000000000000000000000000000081523360048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063facd743b90602401602060405180830381865afa158015611f8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fb29190613253565b612018576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f455448444b473a204f6e6c792076616c696461746f727320616c6c6f776564216044820152606401610766565b612091858585858560405160240161203495949392919061348a565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fedbe7bf7000000000000000000000000000000000000000000000000000000001790526122c0565b505050505050565b610621816040516024016120ad9190613211565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167ff72c45b6000000000000000000000000000000000000000000000000000000001790526122c0565b60025473ffffffffffffffffffffffffffffffffffffffff1633146121b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f455448444b473a2072657175697265732061646d696e2070726976696c65676560448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610766565b6121b9612821565b1561226c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604260248201527f455448444b473a2054686973207661726961626c652063616e6e6f742062652060448201527f73657420696620616e20455448444b4720726f756e642069732072756e6e696e60648201527f6721000000000000000000000000000000000000000000000000000000000000608482015260a401610766565b6000805461ffff9092167b01000000000000000000000000000000000000000000000000000000027fffffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffffff909216919091179055565b60606000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168460405161230a91906134f2565b600060405180830381855af49150503d8060008114612345576040519150601f19603f3d011682016040523d82523d6000602084013e61234a565b606091505b509150915081612361576040513d806000833e8082fd5b9392505050565b60606000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168460405161230a91906134f2565b600060076000547201000000000000000000000000000000000000900460ff1660078111156123e3576123e3612b41565b14905090565b60008060026000547201000000000000000000000000000000000000900460ff16600781111561241b5761241b612b41565b1480612453575060066000547201000000000000000000000000000000000000900460ff16600781111561245157612451612b41565b145b80156124ae57506000546124a090790100000000000000000000000000000000000000000000000000810461ffff16906a0100000000000000000000900467ffffffffffffffff1661352d565b67ffffffffffffffff164310155b80156124da575060005477010000000000000000000000000000000000000000000000900461ffff1615155b600080549192509061250e90790100000000000000000000000000000000000000000000000000900461ffff166002613559565b6000546125379161ffff16906a0100000000000000000000900467ffffffffffffffff1661352d565b67ffffffffffffffff164310159050808061254f5750815b9250505090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663274982406040518163ffffffff1660e01b8152600401602060405180830381865afa1580156125c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125e79190613409565b9050600481101561267a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603460248201527f455448444b473a204d696e696d756d206e756d626572206f662076616c69646160448201527f746f7273207374616b6564206e6f74206d6574210000000000000000000000006064820152608401610766565b6000805467ffffffffffffffff4381166a0100000000000000000000027fffffffffffffffffffffffffffff0000000000000000ffffffffffffffffffff90921691909117808355620100009004169060026126d583613583565b825467ffffffffffffffff9182166101009390930a928302919092021990911617905550600080547fffffffffffffff000000000000ffffffffffffffffffffffffffffffffffffff1681556040805180820190915281815260208101919091526127449060079060026128ea565b50600080547fffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffff16808255600382905560048290556005829055600691909155604080514381526020810184905267ffffffffffffffff620100008404169181019190915261ffff7901000000000000000000000000000000000000000000000000008304811660608301527b0100000000000000000000000000000000000000000000000000000090920490911660808201527fbda431b9b63510f1398bf33d700e013315bcba905507078a1780f13ea5b354b99060a0016117b1565b600080546a0100000000000000000000900467ffffffffffffffff166128475750600090565b61284f6123b2565b158015610651575061285f6123e9565b15905090565b6000303b151561285f565b604051806101000160405280612884612928565b81526000602082018190526040820181905260608201819052608082015260a0016128ad612928565b81526020016128ba612928565b81526020016128c76128cc565b905290565b60405180608001604052806004906020820280368337509192915050565b8260028101928215612918579160200282015b828111156129185782518255916020019190600101906128fd565b50612924929150612946565b5090565b60405180604001604052806002906020820280368337509192915050565b5b808211156129245760008155600101612947565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156129b3576129b361295b565b604052919050565b600067ffffffffffffffff8211156129d5576129d561295b565b5060051b60200190565b803573ffffffffffffffffffffffffffffffffffffffff81168114612a0357600080fd5b919050565b600082601f830112612a1957600080fd5b81356020612a2e612a29836129bb565b61298a565b82815260059290921b84018101918181019086841115612a4d57600080fd5b8286015b84811015612a6f57612a62816129df565b8352918301918301612a51565b509695505050505050565b600060208284031215612a8c57600080fd5b813567ffffffffffffffff811115612aa357600080fd5b612aaf84828501612a08565b949350505050565b600082601f830112612ac857600080fd5b6040516080810181811067ffffffffffffffff82111715612aeb57612aeb61295b565b604052806080840185811115612b0057600080fd5b845b81811015612b1a578035835260209283019201612b02565b509195945050505050565b600060808284031215612b3757600080fd5b6123618383612ab7565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60088110612ba7577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b602081016118608284612b70565b600082601f830112612bca57600080fd5b6040516040810181811067ffffffffffffffff82111715612bed57612bed61295b565b8060405250806040840185811115612b0057600080fd5b600060408284031215612c1657600080fd5b6123618383612bb9565b60008060006101008486031215612c3657600080fd5b612c408585612bb9565b9250612c4f8560408601612bb9565b9150612c5e8560808601612ab7565b90509250925092565b600060208284031215612c7957600080fd5b612361826129df565b600082601f830112612c9357600080fd5b81356020612ca3612a29836129bb565b82815260069290921b84018101918181019086841115612cc257600080fd5b8286015b84811015612a6f57612cd88882612bb9565b835291830191604001612cc6565b600082601f830112612cf757600080fd5b81356020612d07612a29836129bb565b82815260059290921b84018101918181019086841115612d2657600080fd5b8286015b84811015612a6f57803567ffffffffffffffff811115612d4a5760008081fd5b612d588986838b0101612c82565b845250918301918301612d2a565b60008060008060808587031215612d7c57600080fd5b843567ffffffffffffffff80821115612d9457600080fd5b612da088838901612a08565b9550602091508187013581811115612db757600080fd5b8701601f81018913612dc857600080fd5b8035612dd6612a29826129bb565b81815260059190911b8201840190848101908b831115612df557600080fd5b928501925b82841015612e1357833582529285019290850190612dfa565b97505050506040870135915080821115612e2c57600080fd5b50612e3987828801612ce6565b925050612e48606086016129df565b905092959194509250565b600082601f830112612e6457600080fd5b81356020612e74612a29836129bb565b82815260059290921b84018101918181019086841115612e9357600080fd5b8286015b84811015612a6f5780358352918301918301612e97565b60008060408385031215612ec157600080fd5b823567ffffffffffffffff80821115612ed957600080fd5b612ee586838701612e53565b93506020850135915080821115612efb57600080fd5b50612f0885828601612c82565b9150509250929050565b600060208284031215612f2457600080fd5b5035919050565b60008060408385031215612f3e57600080fd5b82359150612f4e602084016129df565b90509250929050565b600060208284031215612f6957600080fd5b813561ffff8116811461236157600080fd5b8060005b6002811015610d48578151845260209384019390910190600101612f7f565b8060005b6004811015610d48578151845260209384019390910190600101612fa2565b612fcc828251612f7b565b602081015167ffffffffffffffff8082166040850152806040840151166060850152505060608101516130026080840182612b70565b50608081015160a083015260a081015161301f60c0840182612f7b565b5060c0810151613033610100840182612f7b565b5060e08101516113da610140840182612f9e565b6101c081016118608284612fc1565b6000806020838503121561306957600080fd5b823567ffffffffffffffff8082111561308157600080fd5b818501915085601f83011261309557600080fd5b8135818111156130a457600080fd5b8660208260051b85010111156130b957600080fd5b60209290920196919550909350505050565b6020808252825182820181905260009190848201906040850190845b8181101561310e576130fa838551612fc1565b928401926101c092909201916001016130e7565b50909695505050505050565b608081016118608284612f9e565b600080600080600060e0868803121561314057600080fd5b613149866129df565b9450602086013567ffffffffffffffff8082111561316657600080fd5b61317289838a01612e53565b9550604088013591508082111561318857600080fd5b5061319588828901612c82565b9350506131a58760608801612bb9565b91506131b48760a08801612bb9565b90509295509295909350565b600081518084526020808501945080840160005b8381101561320657815173ffffffffffffffffffffffffffffffffffffffff16875295820195908201906001016131d4565b509495945050505050565b60208152600061236160208301846131c0565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561326557600080fd5b8151801515811461236157600080fd5b604081016118608284612f7b565b61010081016132928286612f7b565b61329f6040830185612f7b565b612aaf6080830184612f9e565b600081518084526020808501945080840160005b83811015613206576132d3878351612f7b565b60409690960195908201906001016132c0565b6080815260006132f960808301876131c0565b82810360208481019190915286518083528782019282019060005b8181101561333057845183529383019391830191600101613314565b5050848103604086015286518082528282019350600581901b8201830183890160005b8381101561338157601f1985840301875261336f8383516132ac565b96860196925090850190600101613353565b505073ffffffffffffffffffffffffffffffffffffffff8816606088015294506133ab9350505050565b95945050505050565b600081518084526020808501945080840160005b83811015613206578151875295820195908201906001016133c8565b6040815260006133f760408301856133b4565b82810360208401526133ab81856132ac565b60006020828403121561341b57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561348357613483613422565b5060010190565b73ffffffffffffffffffffffffffffffffffffffff8616815260e0602082015260006134b960e08301876133b4565b82810360408401526134cb81876132ac565b9150506134db6060830185612f7b565b6134e860a0830184612f7b565b9695505050505050565b6000825160005b8181101561351357602081860181015185830152016134f9565b81811115613522576000828501525b509190910192915050565b600067ffffffffffffffff80831681851680830382111561355057613550613422565b01949350505050565b600061ffff8083168185168183048111821515161561357a5761357a613422565b02949350505050565b600067ffffffffffffffff808316818114156135a1576135a1613422565b600101939250505056fea26469706673582212202b7485e8bebea0d21081143cd2a6366e05e4c2b65cc2bdf24f3c84d36fcef6f964736f6c634300080c0033",
}

// ETHDKGABI is the input ABI used to generate the binding from.
// Deprecated: Use ETHDKGMetaData.ABI instead.
var ETHDKGABI = ETHDKGMetaData.ABI

// ETHDKGBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ETHDKGMetaData.Bin instead.
var ETHDKGBin = ETHDKGMetaData.Bin

// DeployETHDKG deploys a new Ethereum contract, binding an instance of ETHDKG to it.
func DeployETHDKG(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ETHDKG, error) {
	parsed, err := ETHDKGMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ETHDKGBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ETHDKG{ETHDKGCaller: ETHDKGCaller{contract: contract}, ETHDKGTransactor: ETHDKGTransactor{contract: contract}, ETHDKGFilterer: ETHDKGFilterer{contract: contract}}, nil
}

// ETHDKG is an auto generated Go binding around an Ethereum contract.
type ETHDKG struct {
	ETHDKGCaller     // Read-only binding to the contract
	ETHDKGTransactor // Write-only binding to the contract
	ETHDKGFilterer   // Log filterer for contract events
}

// ETHDKGCaller is an auto generated read-only Go binding around an Ethereum contract.
type ETHDKGCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ETHDKGTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ETHDKGFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ETHDKGSession struct {
	Contract     *ETHDKG           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ETHDKGCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ETHDKGCallerSession struct {
	Contract *ETHDKGCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ETHDKGTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ETHDKGTransactorSession struct {
	Contract     *ETHDKGTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ETHDKGRaw is an auto generated low-level Go binding around an Ethereum contract.
type ETHDKGRaw struct {
	Contract *ETHDKG // Generic contract binding to access the raw methods on
}

// ETHDKGCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ETHDKGCallerRaw struct {
	Contract *ETHDKGCaller // Generic read-only contract binding to access the raw methods on
}

// ETHDKGTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ETHDKGTransactorRaw struct {
	Contract *ETHDKGTransactor // Generic write-only contract binding to access the raw methods on
}

// NewETHDKG creates a new instance of ETHDKG, bound to a specific deployed contract.
func NewETHDKG(address common.Address, backend bind.ContractBackend) (*ETHDKG, error) {
	contract, err := bindETHDKG(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ETHDKG{ETHDKGCaller: ETHDKGCaller{contract: contract}, ETHDKGTransactor: ETHDKGTransactor{contract: contract}, ETHDKGFilterer: ETHDKGFilterer{contract: contract}}, nil
}

// NewETHDKGCaller creates a new read-only instance of ETHDKG, bound to a specific deployed contract.
func NewETHDKGCaller(address common.Address, caller bind.ContractCaller) (*ETHDKGCaller, error) {
	contract, err := bindETHDKG(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ETHDKGCaller{contract: contract}, nil
}

// NewETHDKGTransactor creates a new write-only instance of ETHDKG, bound to a specific deployed contract.
func NewETHDKGTransactor(address common.Address, transactor bind.ContractTransactor) (*ETHDKGTransactor, error) {
	contract, err := bindETHDKG(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ETHDKGTransactor{contract: contract}, nil
}

// NewETHDKGFilterer creates a new log filterer instance of ETHDKG, bound to a specific deployed contract.
func NewETHDKGFilterer(address common.Address, filterer bind.ContractFilterer) (*ETHDKGFilterer, error) {
	contract, err := bindETHDKG(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ETHDKGFilterer{contract: contract}, nil
}

// bindETHDKG binds a generic wrapper to an already deployed contract.
func bindETHDKG(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ETHDKGABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETHDKG *ETHDKGRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ETHDKG.Contract.ETHDKGCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETHDKG *ETHDKGRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKG.Contract.ETHDKGTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETHDKG *ETHDKGRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETHDKG.Contract.ETHDKGTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETHDKG *ETHDKGCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ETHDKG.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETHDKG *ETHDKGTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKG.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETHDKG *ETHDKGTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETHDKG.Contract.contract.Transact(opts, method, params...)
}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_ETHDKG *ETHDKGCaller) GetAdmin(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "getAdmin")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_ETHDKG *ETHDKGSession) GetAdmin() (common.Address, error) {
	return _ETHDKG.Contract.GetAdmin(&_ETHDKG.CallOpts)
}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_ETHDKG *ETHDKGCallerSession) GetAdmin() (common.Address, error) {
	return _ETHDKG.Contract.GetAdmin(&_ETHDKG.CallOpts)
}

// GetBadParticipants is a free data retrieval call binding the contract method 0x32d4d570.
//
// Solidity: function getBadParticipants() view returns(uint256)
func (_ETHDKG *ETHDKGCaller) GetBadParticipants(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "getBadParticipants")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetBadParticipants is a free data retrieval call binding the contract method 0x32d4d570.
//
// Solidity: function getBadParticipants() view returns(uint256)
func (_ETHDKG *ETHDKGSession) GetBadParticipants() (*big.Int, error) {
	return _ETHDKG.Contract.GetBadParticipants(&_ETHDKG.CallOpts)
}

// GetBadParticipants is a free data retrieval call binding the contract method 0x32d4d570.
//
// Solidity: function getBadParticipants() view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) GetBadParticipants() (*big.Int, error) {
	return _ETHDKG.Contract.GetBadParticipants(&_ETHDKG.CallOpts)
}

// GetConfirmationLength is a free data retrieval call binding the contract method 0x8c848d32.
//
// Solidity: function getConfirmationLength() view returns(uint256)
func (_ETHDKG *ETHDKGCaller) GetConfirmationLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "getConfirmationLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetConfirmationLength is a free data retrieval call binding the contract method 0x8c848d32.
//
// Solidity: function getConfirmationLength() view returns(uint256)
func (_ETHDKG *ETHDKGSession) GetConfirmationLength() (*big.Int, error) {
	return _ETHDKG.Contract.GetConfirmationLength(&_ETHDKG.CallOpts)
}

// GetConfirmationLength is a free data retrieval call binding the contract method 0x8c848d32.
//
// Solidity: function getConfirmationLength() view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) GetConfirmationLength() (*big.Int, error) {
	return _ETHDKG.Contract.GetConfirmationLength(&_ETHDKG.CallOpts)
}

// GetETHDKGPhase is a free data retrieval call binding the contract method 0x2958e81c.
//
// Solidity: function getETHDKGPhase() view returns(uint8)
func (_ETHDKG *ETHDKGCaller) GetETHDKGPhase(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "getETHDKGPhase")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetETHDKGPhase is a free data retrieval call binding the contract method 0x2958e81c.
//
// Solidity: function getETHDKGPhase() view returns(uint8)
func (_ETHDKG *ETHDKGSession) GetETHDKGPhase() (uint8, error) {
	return _ETHDKG.Contract.GetETHDKGPhase(&_ETHDKG.CallOpts)
}

// GetETHDKGPhase is a free data retrieval call binding the contract method 0x2958e81c.
//
// Solidity: function getETHDKGPhase() view returns(uint8)
func (_ETHDKG *ETHDKGCallerSession) GetETHDKGPhase() (uint8, error) {
	return _ETHDKG.Contract.GetETHDKGPhase(&_ETHDKG.CallOpts)
}

// GetMasterPublicKey is a free data retrieval call binding the contract method 0xe146372a.
//
// Solidity: function getMasterPublicKey() view returns(uint256[4])
func (_ETHDKG *ETHDKGCaller) GetMasterPublicKey(opts *bind.CallOpts) ([4]*big.Int, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "getMasterPublicKey")

	if err != nil {
		return *new([4]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([4]*big.Int)).(*[4]*big.Int)

	return out0, err

}

// GetMasterPublicKey is a free data retrieval call binding the contract method 0xe146372a.
//
// Solidity: function getMasterPublicKey() view returns(uint256[4])
func (_ETHDKG *ETHDKGSession) GetMasterPublicKey() ([4]*big.Int, error) {
	return _ETHDKG.Contract.GetMasterPublicKey(&_ETHDKG.CallOpts)
}

// GetMasterPublicKey is a free data retrieval call binding the contract method 0xe146372a.
//
// Solidity: function getMasterPublicKey() view returns(uint256[4])
func (_ETHDKG *ETHDKGCallerSession) GetMasterPublicKey() ([4]*big.Int, error) {
	return _ETHDKG.Contract.GetMasterPublicKey(&_ETHDKG.CallOpts)
}

// GetMetamorphicContractAddress is a free data retrieval call binding the contract method 0x8653a465.
//
// Solidity: function getMetamorphicContractAddress(bytes32 _salt, address _factory) pure returns(address)
func (_ETHDKG *ETHDKGCaller) GetMetamorphicContractAddress(opts *bind.CallOpts, _salt [32]byte, _factory common.Address) (common.Address, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "getMetamorphicContractAddress", _salt, _factory)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetMetamorphicContractAddress is a free data retrieval call binding the contract method 0x8653a465.
//
// Solidity: function getMetamorphicContractAddress(bytes32 _salt, address _factory) pure returns(address)
func (_ETHDKG *ETHDKGSession) GetMetamorphicContractAddress(_salt [32]byte, _factory common.Address) (common.Address, error) {
	return _ETHDKG.Contract.GetMetamorphicContractAddress(&_ETHDKG.CallOpts, _salt, _factory)
}

// GetMetamorphicContractAddress is a free data retrieval call binding the contract method 0x8653a465.
//
// Solidity: function getMetamorphicContractAddress(bytes32 _salt, address _factory) pure returns(address)
func (_ETHDKG *ETHDKGCallerSession) GetMetamorphicContractAddress(_salt [32]byte, _factory common.Address) (common.Address, error) {
	return _ETHDKG.Contract.GetMetamorphicContractAddress(&_ETHDKG.CallOpts, _salt, _factory)
}

// GetMinValidators is a free data retrieval call binding the contract method 0xecbadb36.
//
// Solidity: function getMinValidators() pure returns(uint256)
func (_ETHDKG *ETHDKGCaller) GetMinValidators(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "getMinValidators")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMinValidators is a free data retrieval call binding the contract method 0xecbadb36.
//
// Solidity: function getMinValidators() pure returns(uint256)
func (_ETHDKG *ETHDKGSession) GetMinValidators() (*big.Int, error) {
	return _ETHDKG.Contract.GetMinValidators(&_ETHDKG.CallOpts)
}

// GetMinValidators is a free data retrieval call binding the contract method 0xecbadb36.
//
// Solidity: function getMinValidators() pure returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) GetMinValidators() (*big.Int, error) {
	return _ETHDKG.Contract.GetMinValidators(&_ETHDKG.CallOpts)
}

// GetNonce is a free data retrieval call binding the contract method 0xd087d288.
//
// Solidity: function getNonce() view returns(uint256)
func (_ETHDKG *ETHDKGCaller) GetNonce(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "getNonce")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNonce is a free data retrieval call binding the contract method 0xd087d288.
//
// Solidity: function getNonce() view returns(uint256)
func (_ETHDKG *ETHDKGSession) GetNonce() (*big.Int, error) {
	return _ETHDKG.Contract.GetNonce(&_ETHDKG.CallOpts)
}

// GetNonce is a free data retrieval call binding the contract method 0xd087d288.
//
// Solidity: function getNonce() view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) GetNonce() (*big.Int, error) {
	return _ETHDKG.Contract.GetNonce(&_ETHDKG.CallOpts)
}

// GetNumParticipants is a free data retrieval call binding the contract method 0xfd478ca9.
//
// Solidity: function getNumParticipants() view returns(uint256)
func (_ETHDKG *ETHDKGCaller) GetNumParticipants(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "getNumParticipants")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNumParticipants is a free data retrieval call binding the contract method 0xfd478ca9.
//
// Solidity: function getNumParticipants() view returns(uint256)
func (_ETHDKG *ETHDKGSession) GetNumParticipants() (*big.Int, error) {
	return _ETHDKG.Contract.GetNumParticipants(&_ETHDKG.CallOpts)
}

// GetNumParticipants is a free data retrieval call binding the contract method 0xfd478ca9.
//
// Solidity: function getNumParticipants() view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) GetNumParticipants() (*big.Int, error) {
	return _ETHDKG.Contract.GetNumParticipants(&_ETHDKG.CallOpts)
}

// GetParticipantInternalState is a free data retrieval call binding the contract method 0xbf7786b6.
//
// Solidity: function getParticipantInternalState(address participant) view returns((uint256[2],uint64,uint64,uint8,bytes32,uint256[2],uint256[2],uint256[4]))
func (_ETHDKG *ETHDKGCaller) GetParticipantInternalState(opts *bind.CallOpts, participant common.Address) (Participant, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "getParticipantInternalState", participant)

	if err != nil {
		return *new(Participant), err
	}

	out0 := *abi.ConvertType(out[0], new(Participant)).(*Participant)

	return out0, err

}

// GetParticipantInternalState is a free data retrieval call binding the contract method 0xbf7786b6.
//
// Solidity: function getParticipantInternalState(address participant) view returns((uint256[2],uint64,uint64,uint8,bytes32,uint256[2],uint256[2],uint256[4]))
func (_ETHDKG *ETHDKGSession) GetParticipantInternalState(participant common.Address) (Participant, error) {
	return _ETHDKG.Contract.GetParticipantInternalState(&_ETHDKG.CallOpts, participant)
}

// GetParticipantInternalState is a free data retrieval call binding the contract method 0xbf7786b6.
//
// Solidity: function getParticipantInternalState(address participant) view returns((uint256[2],uint64,uint64,uint8,bytes32,uint256[2],uint256[2],uint256[4]))
func (_ETHDKG *ETHDKGCallerSession) GetParticipantInternalState(participant common.Address) (Participant, error) {
	return _ETHDKG.Contract.GetParticipantInternalState(&_ETHDKG.CallOpts, participant)
}

// GetParticipantsInternalState is a free data retrieval call binding the contract method 0xc016baee.
//
// Solidity: function getParticipantsInternalState(address[] participantAddresses) view returns((uint256[2],uint64,uint64,uint8,bytes32,uint256[2],uint256[2],uint256[4])[])
func (_ETHDKG *ETHDKGCaller) GetParticipantsInternalState(opts *bind.CallOpts, participantAddresses []common.Address) ([]Participant, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "getParticipantsInternalState", participantAddresses)

	if err != nil {
		return *new([]Participant), err
	}

	out0 := *abi.ConvertType(out[0], new([]Participant)).(*[]Participant)

	return out0, err

}

// GetParticipantsInternalState is a free data retrieval call binding the contract method 0xc016baee.
//
// Solidity: function getParticipantsInternalState(address[] participantAddresses) view returns((uint256[2],uint64,uint64,uint8,bytes32,uint256[2],uint256[2],uint256[4])[])
func (_ETHDKG *ETHDKGSession) GetParticipantsInternalState(participantAddresses []common.Address) ([]Participant, error) {
	return _ETHDKG.Contract.GetParticipantsInternalState(&_ETHDKG.CallOpts, participantAddresses)
}

// GetParticipantsInternalState is a free data retrieval call binding the contract method 0xc016baee.
//
// Solidity: function getParticipantsInternalState(address[] participantAddresses) view returns((uint256[2],uint64,uint64,uint8,bytes32,uint256[2],uint256[2],uint256[4])[])
func (_ETHDKG *ETHDKGCallerSession) GetParticipantsInternalState(participantAddresses []common.Address) ([]Participant, error) {
	return _ETHDKG.Contract.GetParticipantsInternalState(&_ETHDKG.CallOpts, participantAddresses)
}

// GetPhaseLength is a free data retrieval call binding the contract method 0x106da57d.
//
// Solidity: function getPhaseLength() view returns(uint256)
func (_ETHDKG *ETHDKGCaller) GetPhaseLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "getPhaseLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPhaseLength is a free data retrieval call binding the contract method 0x106da57d.
//
// Solidity: function getPhaseLength() view returns(uint256)
func (_ETHDKG *ETHDKGSession) GetPhaseLength() (*big.Int, error) {
	return _ETHDKG.Contract.GetPhaseLength(&_ETHDKG.CallOpts)
}

// GetPhaseLength is a free data retrieval call binding the contract method 0x106da57d.
//
// Solidity: function getPhaseLength() view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) GetPhaseLength() (*big.Int, error) {
	return _ETHDKG.Contract.GetPhaseLength(&_ETHDKG.CallOpts)
}

// GetPhaseStartBlock is a free data retrieval call binding the contract method 0xa2bc9c78.
//
// Solidity: function getPhaseStartBlock() view returns(uint256)
func (_ETHDKG *ETHDKGCaller) GetPhaseStartBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "getPhaseStartBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPhaseStartBlock is a free data retrieval call binding the contract method 0xa2bc9c78.
//
// Solidity: function getPhaseStartBlock() view returns(uint256)
func (_ETHDKG *ETHDKGSession) GetPhaseStartBlock() (*big.Int, error) {
	return _ETHDKG.Contract.GetPhaseStartBlock(&_ETHDKG.CallOpts)
}

// GetPhaseStartBlock is a free data retrieval call binding the contract method 0xa2bc9c78.
//
// Solidity: function getPhaseStartBlock() view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) GetPhaseStartBlock() (*big.Int, error) {
	return _ETHDKG.Contract.GetPhaseStartBlock(&_ETHDKG.CallOpts)
}

// IsETHDKGCompleted is a free data retrieval call binding the contract method 0x2b7c6724.
//
// Solidity: function isETHDKGCompleted() view returns(bool)
func (_ETHDKG *ETHDKGCaller) IsETHDKGCompleted(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "isETHDKGCompleted")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsETHDKGCompleted is a free data retrieval call binding the contract method 0x2b7c6724.
//
// Solidity: function isETHDKGCompleted() view returns(bool)
func (_ETHDKG *ETHDKGSession) IsETHDKGCompleted() (bool, error) {
	return _ETHDKG.Contract.IsETHDKGCompleted(&_ETHDKG.CallOpts)
}

// IsETHDKGCompleted is a free data retrieval call binding the contract method 0x2b7c6724.
//
// Solidity: function isETHDKGCompleted() view returns(bool)
func (_ETHDKG *ETHDKGCallerSession) IsETHDKGCompleted() (bool, error) {
	return _ETHDKG.Contract.IsETHDKGCompleted(&_ETHDKG.CallOpts)
}

// IsETHDKGHalted is a free data retrieval call binding the contract method 0x43ced534.
//
// Solidity: function isETHDKGHalted() view returns(bool)
func (_ETHDKG *ETHDKGCaller) IsETHDKGHalted(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "isETHDKGHalted")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsETHDKGHalted is a free data retrieval call binding the contract method 0x43ced534.
//
// Solidity: function isETHDKGHalted() view returns(bool)
func (_ETHDKG *ETHDKGSession) IsETHDKGHalted() (bool, error) {
	return _ETHDKG.Contract.IsETHDKGHalted(&_ETHDKG.CallOpts)
}

// IsETHDKGHalted is a free data retrieval call binding the contract method 0x43ced534.
//
// Solidity: function isETHDKGHalted() view returns(bool)
func (_ETHDKG *ETHDKGCallerSession) IsETHDKGHalted() (bool, error) {
	return _ETHDKG.Contract.IsETHDKGHalted(&_ETHDKG.CallOpts)
}

// IsETHDKGRunning is a free data retrieval call binding the contract method 0x747b217c.
//
// Solidity: function isETHDKGRunning() view returns(bool)
func (_ETHDKG *ETHDKGCaller) IsETHDKGRunning(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "isETHDKGRunning")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsETHDKGRunning is a free data retrieval call binding the contract method 0x747b217c.
//
// Solidity: function isETHDKGRunning() view returns(bool)
func (_ETHDKG *ETHDKGSession) IsETHDKGRunning() (bool, error) {
	return _ETHDKG.Contract.IsETHDKGRunning(&_ETHDKG.CallOpts)
}

// IsETHDKGRunning is a free data retrieval call binding the contract method 0x747b217c.
//
// Solidity: function isETHDKGRunning() view returns(bool)
func (_ETHDKG *ETHDKGCallerSession) IsETHDKGRunning() (bool, error) {
	return _ETHDKG.Contract.IsETHDKGRunning(&_ETHDKG.CallOpts)
}

// IsMasterPublicKeySet is a free data retrieval call binding the contract method 0x08efcf16.
//
// Solidity: function isMasterPublicKeySet() view returns(bool)
func (_ETHDKG *ETHDKGCaller) IsMasterPublicKeySet(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "isMasterPublicKeySet")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsMasterPublicKeySet is a free data retrieval call binding the contract method 0x08efcf16.
//
// Solidity: function isMasterPublicKeySet() view returns(bool)
func (_ETHDKG *ETHDKGSession) IsMasterPublicKeySet() (bool, error) {
	return _ETHDKG.Contract.IsMasterPublicKeySet(&_ETHDKG.CallOpts)
}

// IsMasterPublicKeySet is a free data retrieval call binding the contract method 0x08efcf16.
//
// Solidity: function isMasterPublicKeySet() view returns(bool)
func (_ETHDKG *ETHDKGCallerSession) IsMasterPublicKeySet() (bool, error) {
	return _ETHDKG.Contract.IsMasterPublicKeySet(&_ETHDKG.CallOpts)
}

// TryGetParticipantIndex is a free data retrieval call binding the contract method 0x65e62b9b.
//
// Solidity: function tryGetParticipantIndex(address participant) view returns(bool, uint256)
func (_ETHDKG *ETHDKGCaller) TryGetParticipantIndex(opts *bind.CallOpts, participant common.Address) (bool, *big.Int, error) {
	var out []interface{}
	err := _ETHDKG.contract.Call(opts, &out, "tryGetParticipantIndex", participant)

	if err != nil {
		return *new(bool), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// TryGetParticipantIndex is a free data retrieval call binding the contract method 0x65e62b9b.
//
// Solidity: function tryGetParticipantIndex(address participant) view returns(bool, uint256)
func (_ETHDKG *ETHDKGSession) TryGetParticipantIndex(participant common.Address) (bool, *big.Int, error) {
	return _ETHDKG.Contract.TryGetParticipantIndex(&_ETHDKG.CallOpts, participant)
}

// TryGetParticipantIndex is a free data retrieval call binding the contract method 0x65e62b9b.
//
// Solidity: function tryGetParticipantIndex(address participant) view returns(bool, uint256)
func (_ETHDKG *ETHDKGCallerSession) TryGetParticipantIndex(participant common.Address) (bool, *big.Int, error) {
	return _ETHDKG.Contract.TryGetParticipantIndex(&_ETHDKG.CallOpts, participant)
}

// AccuseParticipantDidNotDistributeShares is a paid mutator transaction binding the contract method 0xdae681bc.
//
// Solidity: function accuseParticipantDidNotDistributeShares(address[] dishonestAddresses) returns()
func (_ETHDKG *ETHDKGTransactor) AccuseParticipantDidNotDistributeShares(opts *bind.TransactOpts, dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "accuseParticipantDidNotDistributeShares", dishonestAddresses)
}

// AccuseParticipantDidNotDistributeShares is a paid mutator transaction binding the contract method 0xdae681bc.
//
// Solidity: function accuseParticipantDidNotDistributeShares(address[] dishonestAddresses) returns()
func (_ETHDKG *ETHDKGSession) AccuseParticipantDidNotDistributeShares(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.AccuseParticipantDidNotDistributeShares(&_ETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDidNotDistributeShares is a paid mutator transaction binding the contract method 0xdae681bc.
//
// Solidity: function accuseParticipantDidNotDistributeShares(address[] dishonestAddresses) returns()
func (_ETHDKG *ETHDKGTransactorSession) AccuseParticipantDidNotDistributeShares(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.AccuseParticipantDidNotDistributeShares(&_ETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDidNotSubmitGPKJ is a paid mutator transaction binding the contract method 0x7df24ee9.
//
// Solidity: function accuseParticipantDidNotSubmitGPKJ(address[] dishonestAddresses) returns()
func (_ETHDKG *ETHDKGTransactor) AccuseParticipantDidNotSubmitGPKJ(opts *bind.TransactOpts, dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "accuseParticipantDidNotSubmitGPKJ", dishonestAddresses)
}

// AccuseParticipantDidNotSubmitGPKJ is a paid mutator transaction binding the contract method 0x7df24ee9.
//
// Solidity: function accuseParticipantDidNotSubmitGPKJ(address[] dishonestAddresses) returns()
func (_ETHDKG *ETHDKGSession) AccuseParticipantDidNotSubmitGPKJ(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.AccuseParticipantDidNotSubmitGPKJ(&_ETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDidNotSubmitGPKJ is a paid mutator transaction binding the contract method 0x7df24ee9.
//
// Solidity: function accuseParticipantDidNotSubmitGPKJ(address[] dishonestAddresses) returns()
func (_ETHDKG *ETHDKGTransactorSession) AccuseParticipantDidNotSubmitGPKJ(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.AccuseParticipantDidNotSubmitGPKJ(&_ETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDidNotSubmitKeyShares is a paid mutator transaction binding the contract method 0x043a6f12.
//
// Solidity: function accuseParticipantDidNotSubmitKeyShares(address[] dishonestAddresses) returns()
func (_ETHDKG *ETHDKGTransactor) AccuseParticipantDidNotSubmitKeyShares(opts *bind.TransactOpts, dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "accuseParticipantDidNotSubmitKeyShares", dishonestAddresses)
}

// AccuseParticipantDidNotSubmitKeyShares is a paid mutator transaction binding the contract method 0x043a6f12.
//
// Solidity: function accuseParticipantDidNotSubmitKeyShares(address[] dishonestAddresses) returns()
func (_ETHDKG *ETHDKGSession) AccuseParticipantDidNotSubmitKeyShares(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.AccuseParticipantDidNotSubmitKeyShares(&_ETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDidNotSubmitKeyShares is a paid mutator transaction binding the contract method 0x043a6f12.
//
// Solidity: function accuseParticipantDidNotSubmitKeyShares(address[] dishonestAddresses) returns()
func (_ETHDKG *ETHDKGTransactorSession) AccuseParticipantDidNotSubmitKeyShares(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.AccuseParticipantDidNotSubmitKeyShares(&_ETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDistributedBadShares is a paid mutator transaction binding the contract method 0xedbe7bf7.
//
// Solidity: function accuseParticipantDistributedBadShares(address dishonestAddress, uint256[] encryptedShares, uint256[2][] commitments, uint256[2] sharedKey, uint256[2] sharedKeyCorrectnessProof) returns()
func (_ETHDKG *ETHDKGTransactor) AccuseParticipantDistributedBadShares(opts *bind.TransactOpts, dishonestAddress common.Address, encryptedShares []*big.Int, commitments [][2]*big.Int, sharedKey [2]*big.Int, sharedKeyCorrectnessProof [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "accuseParticipantDistributedBadShares", dishonestAddress, encryptedShares, commitments, sharedKey, sharedKeyCorrectnessProof)
}

// AccuseParticipantDistributedBadShares is a paid mutator transaction binding the contract method 0xedbe7bf7.
//
// Solidity: function accuseParticipantDistributedBadShares(address dishonestAddress, uint256[] encryptedShares, uint256[2][] commitments, uint256[2] sharedKey, uint256[2] sharedKeyCorrectnessProof) returns()
func (_ETHDKG *ETHDKGSession) AccuseParticipantDistributedBadShares(dishonestAddress common.Address, encryptedShares []*big.Int, commitments [][2]*big.Int, sharedKey [2]*big.Int, sharedKeyCorrectnessProof [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.AccuseParticipantDistributedBadShares(&_ETHDKG.TransactOpts, dishonestAddress, encryptedShares, commitments, sharedKey, sharedKeyCorrectnessProof)
}

// AccuseParticipantDistributedBadShares is a paid mutator transaction binding the contract method 0xedbe7bf7.
//
// Solidity: function accuseParticipantDistributedBadShares(address dishonestAddress, uint256[] encryptedShares, uint256[2][] commitments, uint256[2] sharedKey, uint256[2] sharedKeyCorrectnessProof) returns()
func (_ETHDKG *ETHDKGTransactorSession) AccuseParticipantDistributedBadShares(dishonestAddress common.Address, encryptedShares []*big.Int, commitments [][2]*big.Int, sharedKey [2]*big.Int, sharedKeyCorrectnessProof [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.AccuseParticipantDistributedBadShares(&_ETHDKG.TransactOpts, dishonestAddress, encryptedShares, commitments, sharedKey, sharedKeyCorrectnessProof)
}

// AccuseParticipantNotRegistered is a paid mutator transaction binding the contract method 0xf72c45b6.
//
// Solidity: function accuseParticipantNotRegistered(address[] dishonestAddresses) returns()
func (_ETHDKG *ETHDKGTransactor) AccuseParticipantNotRegistered(opts *bind.TransactOpts, dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "accuseParticipantNotRegistered", dishonestAddresses)
}

// AccuseParticipantNotRegistered is a paid mutator transaction binding the contract method 0xf72c45b6.
//
// Solidity: function accuseParticipantNotRegistered(address[] dishonestAddresses) returns()
func (_ETHDKG *ETHDKGSession) AccuseParticipantNotRegistered(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.AccuseParticipantNotRegistered(&_ETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantNotRegistered is a paid mutator transaction binding the contract method 0xf72c45b6.
//
// Solidity: function accuseParticipantNotRegistered(address[] dishonestAddresses) returns()
func (_ETHDKG *ETHDKGTransactorSession) AccuseParticipantNotRegistered(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.AccuseParticipantNotRegistered(&_ETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantSubmittedBadGPKJ is a paid mutator transaction binding the contract method 0x80001264.
//
// Solidity: function accuseParticipantSubmittedBadGPKJ(address[] validators, bytes32[] encryptedSharesHash, uint256[2][][] commitments, address dishonestAddress) returns()
func (_ETHDKG *ETHDKGTransactor) AccuseParticipantSubmittedBadGPKJ(opts *bind.TransactOpts, validators []common.Address, encryptedSharesHash [][32]byte, commitments [][][2]*big.Int, dishonestAddress common.Address) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "accuseParticipantSubmittedBadGPKJ", validators, encryptedSharesHash, commitments, dishonestAddress)
}

// AccuseParticipantSubmittedBadGPKJ is a paid mutator transaction binding the contract method 0x80001264.
//
// Solidity: function accuseParticipantSubmittedBadGPKJ(address[] validators, bytes32[] encryptedSharesHash, uint256[2][][] commitments, address dishonestAddress) returns()
func (_ETHDKG *ETHDKGSession) AccuseParticipantSubmittedBadGPKJ(validators []common.Address, encryptedSharesHash [][32]byte, commitments [][][2]*big.Int, dishonestAddress common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.AccuseParticipantSubmittedBadGPKJ(&_ETHDKG.TransactOpts, validators, encryptedSharesHash, commitments, dishonestAddress)
}

// AccuseParticipantSubmittedBadGPKJ is a paid mutator transaction binding the contract method 0x80001264.
//
// Solidity: function accuseParticipantSubmittedBadGPKJ(address[] validators, bytes32[] encryptedSharesHash, uint256[2][][] commitments, address dishonestAddress) returns()
func (_ETHDKG *ETHDKGTransactorSession) AccuseParticipantSubmittedBadGPKJ(validators []common.Address, encryptedSharesHash [][32]byte, commitments [][][2]*big.Int, dishonestAddress common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.AccuseParticipantSubmittedBadGPKJ(&_ETHDKG.TransactOpts, validators, encryptedSharesHash, commitments, dishonestAddress)
}

// Complete is a paid mutator transaction binding the contract method 0x522e1177.
//
// Solidity: function complete() returns()
func (_ETHDKG *ETHDKGTransactor) Complete(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "complete")
}

// Complete is a paid mutator transaction binding the contract method 0x522e1177.
//
// Solidity: function complete() returns()
func (_ETHDKG *ETHDKGSession) Complete() (*types.Transaction, error) {
	return _ETHDKG.Contract.Complete(&_ETHDKG.TransactOpts)
}

// Complete is a paid mutator transaction binding the contract method 0x522e1177.
//
// Solidity: function complete() returns()
func (_ETHDKG *ETHDKGTransactorSession) Complete() (*types.Transaction, error) {
	return _ETHDKG.Contract.Complete(&_ETHDKG.TransactOpts)
}

// DistributeShares is a paid mutator transaction binding the contract method 0x80b97e01.
//
// Solidity: function distributeShares(uint256[] encryptedShares, uint256[2][] commitments) returns()
func (_ETHDKG *ETHDKGTransactor) DistributeShares(opts *bind.TransactOpts, encryptedShares []*big.Int, commitments [][2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "distributeShares", encryptedShares, commitments)
}

// DistributeShares is a paid mutator transaction binding the contract method 0x80b97e01.
//
// Solidity: function distributeShares(uint256[] encryptedShares, uint256[2][] commitments) returns()
func (_ETHDKG *ETHDKGSession) DistributeShares(encryptedShares []*big.Int, commitments [][2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.DistributeShares(&_ETHDKG.TransactOpts, encryptedShares, commitments)
}

// DistributeShares is a paid mutator transaction binding the contract method 0x80b97e01.
//
// Solidity: function distributeShares(uint256[] encryptedShares, uint256[2][] commitments) returns()
func (_ETHDKG *ETHDKGTransactorSession) DistributeShares(encryptedShares []*big.Int, commitments [][2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.DistributeShares(&_ETHDKG.TransactOpts, encryptedShares, commitments)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_ETHDKG *ETHDKGTransactor) Initialize(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "initialize")
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_ETHDKG *ETHDKGSession) Initialize() (*types.Transaction, error) {
	return _ETHDKG.Contract.Initialize(&_ETHDKG.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_ETHDKG *ETHDKGTransactorSession) Initialize() (*types.Transaction, error) {
	return _ETHDKG.Contract.Initialize(&_ETHDKG.TransactOpts)
}

// InitializeETHDKG is a paid mutator transaction binding the contract method 0x57b51c9c.
//
// Solidity: function initializeETHDKG() returns()
func (_ETHDKG *ETHDKGTransactor) InitializeETHDKG(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "initializeETHDKG")
}

// InitializeETHDKG is a paid mutator transaction binding the contract method 0x57b51c9c.
//
// Solidity: function initializeETHDKG() returns()
func (_ETHDKG *ETHDKGSession) InitializeETHDKG() (*types.Transaction, error) {
	return _ETHDKG.Contract.InitializeETHDKG(&_ETHDKG.TransactOpts)
}

// InitializeETHDKG is a paid mutator transaction binding the contract method 0x57b51c9c.
//
// Solidity: function initializeETHDKG() returns()
func (_ETHDKG *ETHDKGTransactorSession) InitializeETHDKG() (*types.Transaction, error) {
	return _ETHDKG.Contract.InitializeETHDKG(&_ETHDKG.TransactOpts)
}

// Register is a paid mutator transaction binding the contract method 0x3442af5c.
//
// Solidity: function register(uint256[2] publicKey) returns()
func (_ETHDKG *ETHDKGTransactor) Register(opts *bind.TransactOpts, publicKey [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "register", publicKey)
}

// Register is a paid mutator transaction binding the contract method 0x3442af5c.
//
// Solidity: function register(uint256[2] publicKey) returns()
func (_ETHDKG *ETHDKGSession) Register(publicKey [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.Register(&_ETHDKG.TransactOpts, publicKey)
}

// Register is a paid mutator transaction binding the contract method 0x3442af5c.
//
// Solidity: function register(uint256[2] publicKey) returns()
func (_ETHDKG *ETHDKGTransactorSession) Register(publicKey [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.Register(&_ETHDKG.TransactOpts, publicKey)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_ETHDKG *ETHDKGTransactor) SetAdmin(opts *bind.TransactOpts, admin_ common.Address) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "setAdmin", admin_)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_ETHDKG *ETHDKGSession) SetAdmin(admin_ common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.SetAdmin(&_ETHDKG.TransactOpts, admin_)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_ETHDKG *ETHDKGTransactorSession) SetAdmin(admin_ common.Address) (*types.Transaction, error) {
	return _ETHDKG.Contract.SetAdmin(&_ETHDKG.TransactOpts, admin_)
}

// SetConfirmationLength is a paid mutator transaction binding the contract method 0xff3e5e45.
//
// Solidity: function setConfirmationLength(uint16 confirmationLength_) returns()
func (_ETHDKG *ETHDKGTransactor) SetConfirmationLength(opts *bind.TransactOpts, confirmationLength_ uint16) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "setConfirmationLength", confirmationLength_)
}

// SetConfirmationLength is a paid mutator transaction binding the contract method 0xff3e5e45.
//
// Solidity: function setConfirmationLength(uint16 confirmationLength_) returns()
func (_ETHDKG *ETHDKGSession) SetConfirmationLength(confirmationLength_ uint16) (*types.Transaction, error) {
	return _ETHDKG.Contract.SetConfirmationLength(&_ETHDKG.TransactOpts, confirmationLength_)
}

// SetConfirmationLength is a paid mutator transaction binding the contract method 0xff3e5e45.
//
// Solidity: function setConfirmationLength(uint16 confirmationLength_) returns()
func (_ETHDKG *ETHDKGTransactorSession) SetConfirmationLength(confirmationLength_ uint16) (*types.Transaction, error) {
	return _ETHDKG.Contract.SetConfirmationLength(&_ETHDKG.TransactOpts, confirmationLength_)
}

// SetCustomMadnetHeight is a paid mutator transaction binding the contract method 0x8328cdf7.
//
// Solidity: function setCustomMadnetHeight(uint256 madnetHeight) returns()
func (_ETHDKG *ETHDKGTransactor) SetCustomMadnetHeight(opts *bind.TransactOpts, madnetHeight *big.Int) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "setCustomMadnetHeight", madnetHeight)
}

// SetCustomMadnetHeight is a paid mutator transaction binding the contract method 0x8328cdf7.
//
// Solidity: function setCustomMadnetHeight(uint256 madnetHeight) returns()
func (_ETHDKG *ETHDKGSession) SetCustomMadnetHeight(madnetHeight *big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.SetCustomMadnetHeight(&_ETHDKG.TransactOpts, madnetHeight)
}

// SetCustomMadnetHeight is a paid mutator transaction binding the contract method 0x8328cdf7.
//
// Solidity: function setCustomMadnetHeight(uint256 madnetHeight) returns()
func (_ETHDKG *ETHDKGTransactorSession) SetCustomMadnetHeight(madnetHeight *big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.SetCustomMadnetHeight(&_ETHDKG.TransactOpts, madnetHeight)
}

// SetPhaseLength is a paid mutator transaction binding the contract method 0x8a3c24cc.
//
// Solidity: function setPhaseLength(uint16 phaseLength_) returns()
func (_ETHDKG *ETHDKGTransactor) SetPhaseLength(opts *bind.TransactOpts, phaseLength_ uint16) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "setPhaseLength", phaseLength_)
}

// SetPhaseLength is a paid mutator transaction binding the contract method 0x8a3c24cc.
//
// Solidity: function setPhaseLength(uint16 phaseLength_) returns()
func (_ETHDKG *ETHDKGSession) SetPhaseLength(phaseLength_ uint16) (*types.Transaction, error) {
	return _ETHDKG.Contract.SetPhaseLength(&_ETHDKG.TransactOpts, phaseLength_)
}

// SetPhaseLength is a paid mutator transaction binding the contract method 0x8a3c24cc.
//
// Solidity: function setPhaseLength(uint16 phaseLength_) returns()
func (_ETHDKG *ETHDKGTransactorSession) SetPhaseLength(phaseLength_ uint16) (*types.Transaction, error) {
	return _ETHDKG.Contract.SetPhaseLength(&_ETHDKG.TransactOpts, phaseLength_)
}

// SubmitGPKJ is a paid mutator transaction binding the contract method 0x101f49c1.
//
// Solidity: function submitGPKJ(uint256[4] gpkj) returns()
func (_ETHDKG *ETHDKGTransactor) SubmitGPKJ(opts *bind.TransactOpts, gpkj [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "submitGPKJ", gpkj)
}

// SubmitGPKJ is a paid mutator transaction binding the contract method 0x101f49c1.
//
// Solidity: function submitGPKJ(uint256[4] gpkj) returns()
func (_ETHDKG *ETHDKGSession) SubmitGPKJ(gpkj [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.SubmitGPKJ(&_ETHDKG.TransactOpts, gpkj)
}

// SubmitGPKJ is a paid mutator transaction binding the contract method 0x101f49c1.
//
// Solidity: function submitGPKJ(uint256[4] gpkj) returns()
func (_ETHDKG *ETHDKGTransactorSession) SubmitGPKJ(gpkj [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.SubmitGPKJ(&_ETHDKG.TransactOpts, gpkj)
}

// SubmitKeyShare is a paid mutator transaction binding the contract method 0x62a6523e.
//
// Solidity: function submitKeyShare(uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2) returns()
func (_ETHDKG *ETHDKGTransactor) SubmitKeyShare(opts *bind.TransactOpts, keyShareG1 [2]*big.Int, keyShareG1CorrectnessProof [2]*big.Int, keyShareG2 [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "submitKeyShare", keyShareG1, keyShareG1CorrectnessProof, keyShareG2)
}

// SubmitKeyShare is a paid mutator transaction binding the contract method 0x62a6523e.
//
// Solidity: function submitKeyShare(uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2) returns()
func (_ETHDKG *ETHDKGSession) SubmitKeyShare(keyShareG1 [2]*big.Int, keyShareG1CorrectnessProof [2]*big.Int, keyShareG2 [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.SubmitKeyShare(&_ETHDKG.TransactOpts, keyShareG1, keyShareG1CorrectnessProof, keyShareG2)
}

// SubmitKeyShare is a paid mutator transaction binding the contract method 0x62a6523e.
//
// Solidity: function submitKeyShare(uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2) returns()
func (_ETHDKG *ETHDKGTransactorSession) SubmitKeyShare(keyShareG1 [2]*big.Int, keyShareG1CorrectnessProof [2]*big.Int, keyShareG2 [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.SubmitKeyShare(&_ETHDKG.TransactOpts, keyShareG1, keyShareG1CorrectnessProof, keyShareG2)
}

// SubmitMasterPublicKey is a paid mutator transaction binding the contract method 0xe8323224.
//
// Solidity: function submitMasterPublicKey(uint256[4] masterPublicKey_) returns()
func (_ETHDKG *ETHDKGTransactor) SubmitMasterPublicKey(opts *bind.TransactOpts, masterPublicKey_ [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "submitMasterPublicKey", masterPublicKey_)
}

// SubmitMasterPublicKey is a paid mutator transaction binding the contract method 0xe8323224.
//
// Solidity: function submitMasterPublicKey(uint256[4] masterPublicKey_) returns()
func (_ETHDKG *ETHDKGSession) SubmitMasterPublicKey(masterPublicKey_ [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.SubmitMasterPublicKey(&_ETHDKG.TransactOpts, masterPublicKey_)
}

// SubmitMasterPublicKey is a paid mutator transaction binding the contract method 0xe8323224.
//
// Solidity: function submitMasterPublicKey(uint256[4] masterPublicKey_) returns()
func (_ETHDKG *ETHDKGTransactorSession) SubmitMasterPublicKey(masterPublicKey_ [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.SubmitMasterPublicKey(&_ETHDKG.TransactOpts, masterPublicKey_)
}

// ETHDKGAddressRegisteredIterator is returned from FilterAddressRegistered and is used to iterate over the raw logs and unpacked data for AddressRegistered events raised by the ETHDKG contract.
type ETHDKGAddressRegisteredIterator struct {
	Event *ETHDKGAddressRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGAddressRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGAddressRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGAddressRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGAddressRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGAddressRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGAddressRegistered represents a AddressRegistered event raised by the ETHDKG contract.
type ETHDKGAddressRegistered struct {
	Account   common.Address
	Index     *big.Int
	Nonce     *big.Int
	PublicKey [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAddressRegistered is a free log retrieval operation binding the contract event 0x7f1304057ec61140fbf2f5f236790f34fcafe123d3eb0d298d92317c97da500d.
//
// Solidity: event AddressRegistered(address account, uint256 index, uint256 nonce, uint256[2] publicKey)
func (_ETHDKG *ETHDKGFilterer) FilterAddressRegistered(opts *bind.FilterOpts) (*ETHDKGAddressRegisteredIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "AddressRegistered")
	if err != nil {
		return nil, err
	}
	return &ETHDKGAddressRegisteredIterator{contract: _ETHDKG.contract, event: "AddressRegistered", logs: logs, sub: sub}, nil
}

// WatchAddressRegistered is a free log subscription operation binding the contract event 0x7f1304057ec61140fbf2f5f236790f34fcafe123d3eb0d298d92317c97da500d.
//
// Solidity: event AddressRegistered(address account, uint256 index, uint256 nonce, uint256[2] publicKey)
func (_ETHDKG *ETHDKGFilterer) WatchAddressRegistered(opts *bind.WatchOpts, sink chan<- *ETHDKGAddressRegistered) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "AddressRegistered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGAddressRegistered)
				if err := _ETHDKG.contract.UnpackLog(event, "AddressRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddressRegistered is a log parse operation binding the contract event 0x7f1304057ec61140fbf2f5f236790f34fcafe123d3eb0d298d92317c97da500d.
//
// Solidity: event AddressRegistered(address account, uint256 index, uint256 nonce, uint256[2] publicKey)
func (_ETHDKG *ETHDKGFilterer) ParseAddressRegistered(log types.Log) (*ETHDKGAddressRegistered, error) {
	event := new(ETHDKGAddressRegistered)
	if err := _ETHDKG.contract.UnpackLog(event, "AddressRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGGPKJSubmissionCompleteIterator is returned from FilterGPKJSubmissionComplete and is used to iterate over the raw logs and unpacked data for GPKJSubmissionComplete events raised by the ETHDKG contract.
type ETHDKGGPKJSubmissionCompleteIterator struct {
	Event *ETHDKGGPKJSubmissionComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGGPKJSubmissionCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGGPKJSubmissionComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGGPKJSubmissionComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGGPKJSubmissionCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGGPKJSubmissionCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGGPKJSubmissionComplete represents a GPKJSubmissionComplete event raised by the ETHDKG contract.
type ETHDKGGPKJSubmissionComplete struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterGPKJSubmissionComplete is a free log retrieval operation binding the contract event 0x87bfe600b78cad9f7cf68c99eb582c1748f636b3269842b37d5873b0e069f628.
//
// Solidity: event GPKJSubmissionComplete(uint256 blockNumber)
func (_ETHDKG *ETHDKGFilterer) FilterGPKJSubmissionComplete(opts *bind.FilterOpts) (*ETHDKGGPKJSubmissionCompleteIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "GPKJSubmissionComplete")
	if err != nil {
		return nil, err
	}
	return &ETHDKGGPKJSubmissionCompleteIterator{contract: _ETHDKG.contract, event: "GPKJSubmissionComplete", logs: logs, sub: sub}, nil
}

// WatchGPKJSubmissionComplete is a free log subscription operation binding the contract event 0x87bfe600b78cad9f7cf68c99eb582c1748f636b3269842b37d5873b0e069f628.
//
// Solidity: event GPKJSubmissionComplete(uint256 blockNumber)
func (_ETHDKG *ETHDKGFilterer) WatchGPKJSubmissionComplete(opts *bind.WatchOpts, sink chan<- *ETHDKGGPKJSubmissionComplete) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "GPKJSubmissionComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGGPKJSubmissionComplete)
				if err := _ETHDKG.contract.UnpackLog(event, "GPKJSubmissionComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGPKJSubmissionComplete is a log parse operation binding the contract event 0x87bfe600b78cad9f7cf68c99eb582c1748f636b3269842b37d5873b0e069f628.
//
// Solidity: event GPKJSubmissionComplete(uint256 blockNumber)
func (_ETHDKG *ETHDKGFilterer) ParseGPKJSubmissionComplete(log types.Log) (*ETHDKGGPKJSubmissionComplete, error) {
	event := new(ETHDKGGPKJSubmissionComplete)
	if err := _ETHDKG.contract.UnpackLog(event, "GPKJSubmissionComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGKeyShareSubmissionCompleteIterator is returned from FilterKeyShareSubmissionComplete and is used to iterate over the raw logs and unpacked data for KeyShareSubmissionComplete events raised by the ETHDKG contract.
type ETHDKGKeyShareSubmissionCompleteIterator struct {
	Event *ETHDKGKeyShareSubmissionComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGKeyShareSubmissionCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGKeyShareSubmissionComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGKeyShareSubmissionComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGKeyShareSubmissionCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGKeyShareSubmissionCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGKeyShareSubmissionComplete represents a KeyShareSubmissionComplete event raised by the ETHDKG contract.
type ETHDKGKeyShareSubmissionComplete struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterKeyShareSubmissionComplete is a free log retrieval operation binding the contract event 0x522cec98f6caa194456c44afa9e8cef9ac63eecb0be60e20d180ce19cfb0ef59.
//
// Solidity: event KeyShareSubmissionComplete(uint256 blockNumber)
func (_ETHDKG *ETHDKGFilterer) FilterKeyShareSubmissionComplete(opts *bind.FilterOpts) (*ETHDKGKeyShareSubmissionCompleteIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "KeyShareSubmissionComplete")
	if err != nil {
		return nil, err
	}
	return &ETHDKGKeyShareSubmissionCompleteIterator{contract: _ETHDKG.contract, event: "KeyShareSubmissionComplete", logs: logs, sub: sub}, nil
}

// WatchKeyShareSubmissionComplete is a free log subscription operation binding the contract event 0x522cec98f6caa194456c44afa9e8cef9ac63eecb0be60e20d180ce19cfb0ef59.
//
// Solidity: event KeyShareSubmissionComplete(uint256 blockNumber)
func (_ETHDKG *ETHDKGFilterer) WatchKeyShareSubmissionComplete(opts *bind.WatchOpts, sink chan<- *ETHDKGKeyShareSubmissionComplete) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "KeyShareSubmissionComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGKeyShareSubmissionComplete)
				if err := _ETHDKG.contract.UnpackLog(event, "KeyShareSubmissionComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyShareSubmissionComplete is a log parse operation binding the contract event 0x522cec98f6caa194456c44afa9e8cef9ac63eecb0be60e20d180ce19cfb0ef59.
//
// Solidity: event KeyShareSubmissionComplete(uint256 blockNumber)
func (_ETHDKG *ETHDKGFilterer) ParseKeyShareSubmissionComplete(log types.Log) (*ETHDKGKeyShareSubmissionComplete, error) {
	event := new(ETHDKGKeyShareSubmissionComplete)
	if err := _ETHDKG.contract.UnpackLog(event, "KeyShareSubmissionComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGKeyShareSubmittedIterator is returned from FilterKeyShareSubmitted and is used to iterate over the raw logs and unpacked data for KeyShareSubmitted events raised by the ETHDKG contract.
type ETHDKGKeyShareSubmittedIterator struct {
	Event *ETHDKGKeyShareSubmitted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGKeyShareSubmittedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGKeyShareSubmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGKeyShareSubmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGKeyShareSubmittedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGKeyShareSubmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGKeyShareSubmitted represents a KeyShareSubmitted event raised by the ETHDKG contract.
type ETHDKGKeyShareSubmitted struct {
	Account                    common.Address
	Index                      *big.Int
	Nonce                      *big.Int
	KeyShareG1                 [2]*big.Int
	KeyShareG1CorrectnessProof [2]*big.Int
	KeyShareG2                 [4]*big.Int
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterKeyShareSubmitted is a free log retrieval operation binding the contract event 0x6162e2d11398e4063e4c8565dafc4fb6755bbead93747ea836a5ef73a594aaf7.
//
// Solidity: event KeyShareSubmitted(address account, uint256 index, uint256 nonce, uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2)
func (_ETHDKG *ETHDKGFilterer) FilterKeyShareSubmitted(opts *bind.FilterOpts) (*ETHDKGKeyShareSubmittedIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "KeyShareSubmitted")
	if err != nil {
		return nil, err
	}
	return &ETHDKGKeyShareSubmittedIterator{contract: _ETHDKG.contract, event: "KeyShareSubmitted", logs: logs, sub: sub}, nil
}

// WatchKeyShareSubmitted is a free log subscription operation binding the contract event 0x6162e2d11398e4063e4c8565dafc4fb6755bbead93747ea836a5ef73a594aaf7.
//
// Solidity: event KeyShareSubmitted(address account, uint256 index, uint256 nonce, uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2)
func (_ETHDKG *ETHDKGFilterer) WatchKeyShareSubmitted(opts *bind.WatchOpts, sink chan<- *ETHDKGKeyShareSubmitted) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "KeyShareSubmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGKeyShareSubmitted)
				if err := _ETHDKG.contract.UnpackLog(event, "KeyShareSubmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyShareSubmitted is a log parse operation binding the contract event 0x6162e2d11398e4063e4c8565dafc4fb6755bbead93747ea836a5ef73a594aaf7.
//
// Solidity: event KeyShareSubmitted(address account, uint256 index, uint256 nonce, uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2)
func (_ETHDKG *ETHDKGFilterer) ParseKeyShareSubmitted(log types.Log) (*ETHDKGKeyShareSubmitted, error) {
	event := new(ETHDKGKeyShareSubmitted)
	if err := _ETHDKG.contract.UnpackLog(event, "KeyShareSubmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGMPKSetIterator is returned from FilterMPKSet and is used to iterate over the raw logs and unpacked data for MPKSet events raised by the ETHDKG contract.
type ETHDKGMPKSetIterator struct {
	Event *ETHDKGMPKSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGMPKSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGMPKSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGMPKSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGMPKSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGMPKSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGMPKSet represents a MPKSet event raised by the ETHDKG contract.
type ETHDKGMPKSet struct {
	BlockNumber *big.Int
	Nonce       *big.Int
	Mpk         [4]*big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterMPKSet is a free log retrieval operation binding the contract event 0x71b1ebd27be320895a22125d6458e3363aefa6944a312ede4bf275867e6d5a71.
//
// Solidity: event MPKSet(uint256 blockNumber, uint256 nonce, uint256[4] mpk)
func (_ETHDKG *ETHDKGFilterer) FilterMPKSet(opts *bind.FilterOpts) (*ETHDKGMPKSetIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "MPKSet")
	if err != nil {
		return nil, err
	}
	return &ETHDKGMPKSetIterator{contract: _ETHDKG.contract, event: "MPKSet", logs: logs, sub: sub}, nil
}

// WatchMPKSet is a free log subscription operation binding the contract event 0x71b1ebd27be320895a22125d6458e3363aefa6944a312ede4bf275867e6d5a71.
//
// Solidity: event MPKSet(uint256 blockNumber, uint256 nonce, uint256[4] mpk)
func (_ETHDKG *ETHDKGFilterer) WatchMPKSet(opts *bind.WatchOpts, sink chan<- *ETHDKGMPKSet) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "MPKSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGMPKSet)
				if err := _ETHDKG.contract.UnpackLog(event, "MPKSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMPKSet is a log parse operation binding the contract event 0x71b1ebd27be320895a22125d6458e3363aefa6944a312ede4bf275867e6d5a71.
//
// Solidity: event MPKSet(uint256 blockNumber, uint256 nonce, uint256[4] mpk)
func (_ETHDKG *ETHDKGFilterer) ParseMPKSet(log types.Log) (*ETHDKGMPKSet, error) {
	event := new(ETHDKGMPKSet)
	if err := _ETHDKG.contract.UnpackLog(event, "MPKSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGRegistrationCompleteIterator is returned from FilterRegistrationComplete and is used to iterate over the raw logs and unpacked data for RegistrationComplete events raised by the ETHDKG contract.
type ETHDKGRegistrationCompleteIterator struct {
	Event *ETHDKGRegistrationComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGRegistrationCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGRegistrationComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGRegistrationComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGRegistrationCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGRegistrationCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGRegistrationComplete represents a RegistrationComplete event raised by the ETHDKG contract.
type ETHDKGRegistrationComplete struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRegistrationComplete is a free log retrieval operation binding the contract event 0x833013b96b786b4eca83baac286920e5e53956c21ff3894f1d9f02e97d6ed764.
//
// Solidity: event RegistrationComplete(uint256 blockNumber)
func (_ETHDKG *ETHDKGFilterer) FilterRegistrationComplete(opts *bind.FilterOpts) (*ETHDKGRegistrationCompleteIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "RegistrationComplete")
	if err != nil {
		return nil, err
	}
	return &ETHDKGRegistrationCompleteIterator{contract: _ETHDKG.contract, event: "RegistrationComplete", logs: logs, sub: sub}, nil
}

// WatchRegistrationComplete is a free log subscription operation binding the contract event 0x833013b96b786b4eca83baac286920e5e53956c21ff3894f1d9f02e97d6ed764.
//
// Solidity: event RegistrationComplete(uint256 blockNumber)
func (_ETHDKG *ETHDKGFilterer) WatchRegistrationComplete(opts *bind.WatchOpts, sink chan<- *ETHDKGRegistrationComplete) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "RegistrationComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGRegistrationComplete)
				if err := _ETHDKG.contract.UnpackLog(event, "RegistrationComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistrationComplete is a log parse operation binding the contract event 0x833013b96b786b4eca83baac286920e5e53956c21ff3894f1d9f02e97d6ed764.
//
// Solidity: event RegistrationComplete(uint256 blockNumber)
func (_ETHDKG *ETHDKGFilterer) ParseRegistrationComplete(log types.Log) (*ETHDKGRegistrationComplete, error) {
	event := new(ETHDKGRegistrationComplete)
	if err := _ETHDKG.contract.UnpackLog(event, "RegistrationComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGRegistrationOpenedIterator is returned from FilterRegistrationOpened and is used to iterate over the raw logs and unpacked data for RegistrationOpened events raised by the ETHDKG contract.
type ETHDKGRegistrationOpenedIterator struct {
	Event *ETHDKGRegistrationOpened // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGRegistrationOpenedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGRegistrationOpened)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGRegistrationOpened)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGRegistrationOpenedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGRegistrationOpenedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGRegistrationOpened represents a RegistrationOpened event raised by the ETHDKG contract.
type ETHDKGRegistrationOpened struct {
	StartBlock         *big.Int
	NumberValidators   *big.Int
	Nonce              *big.Int
	PhaseLength        *big.Int
	ConfirmationLength *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterRegistrationOpened is a free log retrieval operation binding the contract event 0xbda431b9b63510f1398bf33d700e013315bcba905507078a1780f13ea5b354b9.
//
// Solidity: event RegistrationOpened(uint256 startBlock, uint256 numberValidators, uint256 nonce, uint256 phaseLength, uint256 confirmationLength)
func (_ETHDKG *ETHDKGFilterer) FilterRegistrationOpened(opts *bind.FilterOpts) (*ETHDKGRegistrationOpenedIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "RegistrationOpened")
	if err != nil {
		return nil, err
	}
	return &ETHDKGRegistrationOpenedIterator{contract: _ETHDKG.contract, event: "RegistrationOpened", logs: logs, sub: sub}, nil
}

// WatchRegistrationOpened is a free log subscription operation binding the contract event 0xbda431b9b63510f1398bf33d700e013315bcba905507078a1780f13ea5b354b9.
//
// Solidity: event RegistrationOpened(uint256 startBlock, uint256 numberValidators, uint256 nonce, uint256 phaseLength, uint256 confirmationLength)
func (_ETHDKG *ETHDKGFilterer) WatchRegistrationOpened(opts *bind.WatchOpts, sink chan<- *ETHDKGRegistrationOpened) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "RegistrationOpened")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGRegistrationOpened)
				if err := _ETHDKG.contract.UnpackLog(event, "RegistrationOpened", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistrationOpened is a log parse operation binding the contract event 0xbda431b9b63510f1398bf33d700e013315bcba905507078a1780f13ea5b354b9.
//
// Solidity: event RegistrationOpened(uint256 startBlock, uint256 numberValidators, uint256 nonce, uint256 phaseLength, uint256 confirmationLength)
func (_ETHDKG *ETHDKGFilterer) ParseRegistrationOpened(log types.Log) (*ETHDKGRegistrationOpened, error) {
	event := new(ETHDKGRegistrationOpened)
	if err := _ETHDKG.contract.UnpackLog(event, "RegistrationOpened", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGShareDistributionCompleteIterator is returned from FilterShareDistributionComplete and is used to iterate over the raw logs and unpacked data for ShareDistributionComplete events raised by the ETHDKG contract.
type ETHDKGShareDistributionCompleteIterator struct {
	Event *ETHDKGShareDistributionComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGShareDistributionCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGShareDistributionComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGShareDistributionComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGShareDistributionCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGShareDistributionCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGShareDistributionComplete represents a ShareDistributionComplete event raised by the ETHDKG contract.
type ETHDKGShareDistributionComplete struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterShareDistributionComplete is a free log retrieval operation binding the contract event 0xbfe94ffef5ddde4d25ac7b652f3f67686ea63f9badbfe1f25451e26fc262d11c.
//
// Solidity: event ShareDistributionComplete(uint256 blockNumber)
func (_ETHDKG *ETHDKGFilterer) FilterShareDistributionComplete(opts *bind.FilterOpts) (*ETHDKGShareDistributionCompleteIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "ShareDistributionComplete")
	if err != nil {
		return nil, err
	}
	return &ETHDKGShareDistributionCompleteIterator{contract: _ETHDKG.contract, event: "ShareDistributionComplete", logs: logs, sub: sub}, nil
}

// WatchShareDistributionComplete is a free log subscription operation binding the contract event 0xbfe94ffef5ddde4d25ac7b652f3f67686ea63f9badbfe1f25451e26fc262d11c.
//
// Solidity: event ShareDistributionComplete(uint256 blockNumber)
func (_ETHDKG *ETHDKGFilterer) WatchShareDistributionComplete(opts *bind.WatchOpts, sink chan<- *ETHDKGShareDistributionComplete) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "ShareDistributionComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGShareDistributionComplete)
				if err := _ETHDKG.contract.UnpackLog(event, "ShareDistributionComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseShareDistributionComplete is a log parse operation binding the contract event 0xbfe94ffef5ddde4d25ac7b652f3f67686ea63f9badbfe1f25451e26fc262d11c.
//
// Solidity: event ShareDistributionComplete(uint256 blockNumber)
func (_ETHDKG *ETHDKGFilterer) ParseShareDistributionComplete(log types.Log) (*ETHDKGShareDistributionComplete, error) {
	event := new(ETHDKGShareDistributionComplete)
	if err := _ETHDKG.contract.UnpackLog(event, "ShareDistributionComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGSharesDistributedIterator is returned from FilterSharesDistributed and is used to iterate over the raw logs and unpacked data for SharesDistributed events raised by the ETHDKG contract.
type ETHDKGSharesDistributedIterator struct {
	Event *ETHDKGSharesDistributed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGSharesDistributedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGSharesDistributed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGSharesDistributed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGSharesDistributedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGSharesDistributedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGSharesDistributed represents a SharesDistributed event raised by the ETHDKG contract.
type ETHDKGSharesDistributed struct {
	Account         common.Address
	Index           *big.Int
	Nonce           *big.Int
	EncryptedShares []*big.Int
	Commitments     [][2]*big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterSharesDistributed is a free log retrieval operation binding the contract event 0xf0c8b0ef2867c2b4639b404a0296b6bbf0bf97e20856af42144a5a6035c0d0d2.
//
// Solidity: event SharesDistributed(address account, uint256 index, uint256 nonce, uint256[] encryptedShares, uint256[2][] commitments)
func (_ETHDKG *ETHDKGFilterer) FilterSharesDistributed(opts *bind.FilterOpts) (*ETHDKGSharesDistributedIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "SharesDistributed")
	if err != nil {
		return nil, err
	}
	return &ETHDKGSharesDistributedIterator{contract: _ETHDKG.contract, event: "SharesDistributed", logs: logs, sub: sub}, nil
}

// WatchSharesDistributed is a free log subscription operation binding the contract event 0xf0c8b0ef2867c2b4639b404a0296b6bbf0bf97e20856af42144a5a6035c0d0d2.
//
// Solidity: event SharesDistributed(address account, uint256 index, uint256 nonce, uint256[] encryptedShares, uint256[2][] commitments)
func (_ETHDKG *ETHDKGFilterer) WatchSharesDistributed(opts *bind.WatchOpts, sink chan<- *ETHDKGSharesDistributed) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "SharesDistributed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGSharesDistributed)
				if err := _ETHDKG.contract.UnpackLog(event, "SharesDistributed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSharesDistributed is a log parse operation binding the contract event 0xf0c8b0ef2867c2b4639b404a0296b6bbf0bf97e20856af42144a5a6035c0d0d2.
//
// Solidity: event SharesDistributed(address account, uint256 index, uint256 nonce, uint256[] encryptedShares, uint256[2][] commitments)
func (_ETHDKG *ETHDKGFilterer) ParseSharesDistributed(log types.Log) (*ETHDKGSharesDistributed, error) {
	event := new(ETHDKGSharesDistributed)
	if err := _ETHDKG.contract.UnpackLog(event, "SharesDistributed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGValidatorMemberAddedIterator is returned from FilterValidatorMemberAdded and is used to iterate over the raw logs and unpacked data for ValidatorMemberAdded events raised by the ETHDKG contract.
type ETHDKGValidatorMemberAddedIterator struct {
	Event *ETHDKGValidatorMemberAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGValidatorMemberAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGValidatorMemberAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGValidatorMemberAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGValidatorMemberAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGValidatorMemberAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGValidatorMemberAdded represents a ValidatorMemberAdded event raised by the ETHDKG contract.
type ETHDKGValidatorMemberAdded struct {
	Account common.Address
	Index   *big.Int
	Nonce   *big.Int
	Epoch   *big.Int
	Share0  *big.Int
	Share1  *big.Int
	Share2  *big.Int
	Share3  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterValidatorMemberAdded is a free log retrieval operation binding the contract event 0x09b90b08bbc3dbe22e9d2a0bc9c2c7614c7511cd0ad72177727a1e762115bf06.
//
// Solidity: event ValidatorMemberAdded(address account, uint256 index, uint256 nonce, uint256 epoch, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ETHDKG *ETHDKGFilterer) FilterValidatorMemberAdded(opts *bind.FilterOpts) (*ETHDKGValidatorMemberAddedIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "ValidatorMemberAdded")
	if err != nil {
		return nil, err
	}
	return &ETHDKGValidatorMemberAddedIterator{contract: _ETHDKG.contract, event: "ValidatorMemberAdded", logs: logs, sub: sub}, nil
}

// WatchValidatorMemberAdded is a free log subscription operation binding the contract event 0x09b90b08bbc3dbe22e9d2a0bc9c2c7614c7511cd0ad72177727a1e762115bf06.
//
// Solidity: event ValidatorMemberAdded(address account, uint256 index, uint256 nonce, uint256 epoch, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ETHDKG *ETHDKGFilterer) WatchValidatorMemberAdded(opts *bind.WatchOpts, sink chan<- *ETHDKGValidatorMemberAdded) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "ValidatorMemberAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGValidatorMemberAdded)
				if err := _ETHDKG.contract.UnpackLog(event, "ValidatorMemberAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorMemberAdded is a log parse operation binding the contract event 0x09b90b08bbc3dbe22e9d2a0bc9c2c7614c7511cd0ad72177727a1e762115bf06.
//
// Solidity: event ValidatorMemberAdded(address account, uint256 index, uint256 nonce, uint256 epoch, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ETHDKG *ETHDKGFilterer) ParseValidatorMemberAdded(log types.Log) (*ETHDKGValidatorMemberAdded, error) {
	event := new(ETHDKGValidatorMemberAdded)
	if err := _ETHDKG.contract.UnpackLog(event, "ValidatorMemberAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGValidatorSetCompletedIterator is returned from FilterValidatorSetCompleted and is used to iterate over the raw logs and unpacked data for ValidatorSetCompleted events raised by the ETHDKG contract.
type ETHDKGValidatorSetCompletedIterator struct {
	Event *ETHDKGValidatorSetCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGValidatorSetCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGValidatorSetCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGValidatorSetCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGValidatorSetCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGValidatorSetCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGValidatorSetCompleted represents a ValidatorSetCompleted event raised by the ETHDKG contract.
type ETHDKGValidatorSetCompleted struct {
	ValidatorCount *big.Int
	Nonce          *big.Int
	Epoch          *big.Int
	EthHeight      *big.Int
	MadHeight      *big.Int
	GroupKey0      *big.Int
	GroupKey1      *big.Int
	GroupKey2      *big.Int
	GroupKey3      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterValidatorSetCompleted is a free log retrieval operation binding the contract event 0xd7237b781669fa700ecf77be6cd8fa0f4b98b1a24ac584a9b6b44c509216718a.
//
// Solidity: event ValidatorSetCompleted(uint256 validatorCount, uint256 nonce, uint256 epoch, uint256 ethHeight, uint256 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ETHDKG *ETHDKGFilterer) FilterValidatorSetCompleted(opts *bind.FilterOpts) (*ETHDKGValidatorSetCompletedIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "ValidatorSetCompleted")
	if err != nil {
		return nil, err
	}
	return &ETHDKGValidatorSetCompletedIterator{contract: _ETHDKG.contract, event: "ValidatorSetCompleted", logs: logs, sub: sub}, nil
}

// WatchValidatorSetCompleted is a free log subscription operation binding the contract event 0xd7237b781669fa700ecf77be6cd8fa0f4b98b1a24ac584a9b6b44c509216718a.
//
// Solidity: event ValidatorSetCompleted(uint256 validatorCount, uint256 nonce, uint256 epoch, uint256 ethHeight, uint256 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ETHDKG *ETHDKGFilterer) WatchValidatorSetCompleted(opts *bind.WatchOpts, sink chan<- *ETHDKGValidatorSetCompleted) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "ValidatorSetCompleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGValidatorSetCompleted)
				if err := _ETHDKG.contract.UnpackLog(event, "ValidatorSetCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorSetCompleted is a log parse operation binding the contract event 0xd7237b781669fa700ecf77be6cd8fa0f4b98b1a24ac584a9b6b44c509216718a.
//
// Solidity: event ValidatorSetCompleted(uint256 validatorCount, uint256 nonce, uint256 epoch, uint256 ethHeight, uint256 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ETHDKG *ETHDKGFilterer) ParseValidatorSetCompleted(log types.Log) (*ETHDKGValidatorSetCompleted, error) {
	event := new(ETHDKGValidatorSetCompleted)
	if err := _ETHDKG.contract.UnpackLog(event, "ValidatorSetCompleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ETHDKGStorageMetaData contains all meta data concerning the ETHDKGStorage contract.
var ETHDKGStorageMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"getMetamorphicContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
}

// ETHDKGStorageABI is the input ABI used to generate the binding from.
// Deprecated: Use ETHDKGStorageMetaData.ABI instead.
var ETHDKGStorageABI = ETHDKGStorageMetaData.ABI

// ETHDKGStorage is an auto generated Go binding around an Ethereum contract.
type ETHDKGStorage struct {
	ETHDKGStorageCaller     // Read-only binding to the contract
	ETHDKGStorageTransactor // Write-only binding to the contract
	ETHDKGStorageFilterer   // Log filterer for contract events
}

// ETHDKGStorageCaller is an auto generated read-only Go binding around an Ethereum contract.
type ETHDKGStorageCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGStorageTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ETHDKGStorageTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGStorageFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ETHDKGStorageFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGStorageSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ETHDKGStorageSession struct {
	Contract     *ETHDKGStorage    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ETHDKGStorageCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ETHDKGStorageCallerSession struct {
	Contract *ETHDKGStorageCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// ETHDKGStorageTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ETHDKGStorageTransactorSession struct {
	Contract     *ETHDKGStorageTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// ETHDKGStorageRaw is an auto generated low-level Go binding around an Ethereum contract.
type ETHDKGStorageRaw struct {
	Contract *ETHDKGStorage // Generic contract binding to access the raw methods on
}

// ETHDKGStorageCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ETHDKGStorageCallerRaw struct {
	Contract *ETHDKGStorageCaller // Generic read-only contract binding to access the raw methods on
}

// ETHDKGStorageTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ETHDKGStorageTransactorRaw struct {
	Contract *ETHDKGStorageTransactor // Generic write-only contract binding to access the raw methods on
}

// NewETHDKGStorage creates a new instance of ETHDKGStorage, bound to a specific deployed contract.
func NewETHDKGStorage(address common.Address, backend bind.ContractBackend) (*ETHDKGStorage, error) {
	contract, err := bindETHDKGStorage(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ETHDKGStorage{ETHDKGStorageCaller: ETHDKGStorageCaller{contract: contract}, ETHDKGStorageTransactor: ETHDKGStorageTransactor{contract: contract}, ETHDKGStorageFilterer: ETHDKGStorageFilterer{contract: contract}}, nil
}

// NewETHDKGStorageCaller creates a new read-only instance of ETHDKGStorage, bound to a specific deployed contract.
func NewETHDKGStorageCaller(address common.Address, caller bind.ContractCaller) (*ETHDKGStorageCaller, error) {
	contract, err := bindETHDKGStorage(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ETHDKGStorageCaller{contract: contract}, nil
}

// NewETHDKGStorageTransactor creates a new write-only instance of ETHDKGStorage, bound to a specific deployed contract.
func NewETHDKGStorageTransactor(address common.Address, transactor bind.ContractTransactor) (*ETHDKGStorageTransactor, error) {
	contract, err := bindETHDKGStorage(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ETHDKGStorageTransactor{contract: contract}, nil
}

// NewETHDKGStorageFilterer creates a new log filterer instance of ETHDKGStorage, bound to a specific deployed contract.
func NewETHDKGStorageFilterer(address common.Address, filterer bind.ContractFilterer) (*ETHDKGStorageFilterer, error) {
	contract, err := bindETHDKGStorage(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ETHDKGStorageFilterer{contract: contract}, nil
}

// bindETHDKGStorage binds a generic wrapper to an already deployed contract.
func bindETHDKGStorage(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ETHDKGStorageABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETHDKGStorage *ETHDKGStorageRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ETHDKGStorage.Contract.ETHDKGStorageCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETHDKGStorage *ETHDKGStorageRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKGStorage.Contract.ETHDKGStorageTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETHDKGStorage *ETHDKGStorageRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETHDKGStorage.Contract.ETHDKGStorageTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETHDKGStorage *ETHDKGStorageCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ETHDKGStorage.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETHDKGStorage *ETHDKGStorageTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKGStorage.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETHDKGStorage *ETHDKGStorageTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETHDKGStorage.Contract.contract.Transact(opts, method, params...)
}

// GetMetamorphicContractAddress is a free data retrieval call binding the contract method 0x8653a465.
//
// Solidity: function getMetamorphicContractAddress(bytes32 _salt, address _factory) pure returns(address)
func (_ETHDKGStorage *ETHDKGStorageCaller) GetMetamorphicContractAddress(opts *bind.CallOpts, _salt [32]byte, _factory common.Address) (common.Address, error) {
	var out []interface{}
	err := _ETHDKGStorage.contract.Call(opts, &out, "getMetamorphicContractAddress", _salt, _factory)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetMetamorphicContractAddress is a free data retrieval call binding the contract method 0x8653a465.
//
// Solidity: function getMetamorphicContractAddress(bytes32 _salt, address _factory) pure returns(address)
func (_ETHDKGStorage *ETHDKGStorageSession) GetMetamorphicContractAddress(_salt [32]byte, _factory common.Address) (common.Address, error) {
	return _ETHDKGStorage.Contract.GetMetamorphicContractAddress(&_ETHDKGStorage.CallOpts, _salt, _factory)
}

// GetMetamorphicContractAddress is a free data retrieval call binding the contract method 0x8653a465.
//
// Solidity: function getMetamorphicContractAddress(bytes32 _salt, address _factory) pure returns(address)
func (_ETHDKGStorage *ETHDKGStorageCallerSession) GetMetamorphicContractAddress(_salt [32]byte, _factory common.Address) (common.Address, error) {
	return _ETHDKGStorage.Contract.GetMetamorphicContractAddress(&_ETHDKGStorage.CallOpts, _salt, _factory)
}

// ETHDKGUtilsMetaData contains all meta data concerning the ETHDKGUtils contract.
var ETHDKGUtilsMetaData = &bind.MetaData{
	ABI: "[]",
}

// ETHDKGUtilsABI is the input ABI used to generate the binding from.
// Deprecated: Use ETHDKGUtilsMetaData.ABI instead.
var ETHDKGUtilsABI = ETHDKGUtilsMetaData.ABI

// ETHDKGUtils is an auto generated Go binding around an Ethereum contract.
type ETHDKGUtils struct {
	ETHDKGUtilsCaller     // Read-only binding to the contract
	ETHDKGUtilsTransactor // Write-only binding to the contract
	ETHDKGUtilsFilterer   // Log filterer for contract events
}

// ETHDKGUtilsCaller is an auto generated read-only Go binding around an Ethereum contract.
type ETHDKGUtilsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGUtilsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ETHDKGUtilsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGUtilsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ETHDKGUtilsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGUtilsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ETHDKGUtilsSession struct {
	Contract     *ETHDKGUtils      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ETHDKGUtilsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ETHDKGUtilsCallerSession struct {
	Contract *ETHDKGUtilsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// ETHDKGUtilsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ETHDKGUtilsTransactorSession struct {
	Contract     *ETHDKGUtilsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// ETHDKGUtilsRaw is an auto generated low-level Go binding around an Ethereum contract.
type ETHDKGUtilsRaw struct {
	Contract *ETHDKGUtils // Generic contract binding to access the raw methods on
}

// ETHDKGUtilsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ETHDKGUtilsCallerRaw struct {
	Contract *ETHDKGUtilsCaller // Generic read-only contract binding to access the raw methods on
}

// ETHDKGUtilsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ETHDKGUtilsTransactorRaw struct {
	Contract *ETHDKGUtilsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewETHDKGUtils creates a new instance of ETHDKGUtils, bound to a specific deployed contract.
func NewETHDKGUtils(address common.Address, backend bind.ContractBackend) (*ETHDKGUtils, error) {
	contract, err := bindETHDKGUtils(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ETHDKGUtils{ETHDKGUtilsCaller: ETHDKGUtilsCaller{contract: contract}, ETHDKGUtilsTransactor: ETHDKGUtilsTransactor{contract: contract}, ETHDKGUtilsFilterer: ETHDKGUtilsFilterer{contract: contract}}, nil
}

// NewETHDKGUtilsCaller creates a new read-only instance of ETHDKGUtils, bound to a specific deployed contract.
func NewETHDKGUtilsCaller(address common.Address, caller bind.ContractCaller) (*ETHDKGUtilsCaller, error) {
	contract, err := bindETHDKGUtils(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ETHDKGUtilsCaller{contract: contract}, nil
}

// NewETHDKGUtilsTransactor creates a new write-only instance of ETHDKGUtils, bound to a specific deployed contract.
func NewETHDKGUtilsTransactor(address common.Address, transactor bind.ContractTransactor) (*ETHDKGUtilsTransactor, error) {
	contract, err := bindETHDKGUtils(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ETHDKGUtilsTransactor{contract: contract}, nil
}

// NewETHDKGUtilsFilterer creates a new log filterer instance of ETHDKGUtils, bound to a specific deployed contract.
func NewETHDKGUtilsFilterer(address common.Address, filterer bind.ContractFilterer) (*ETHDKGUtilsFilterer, error) {
	contract, err := bindETHDKGUtils(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ETHDKGUtilsFilterer{contract: contract}, nil
}

// bindETHDKGUtils binds a generic wrapper to an already deployed contract.
func bindETHDKGUtils(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ETHDKGUtilsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETHDKGUtils *ETHDKGUtilsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ETHDKGUtils.Contract.ETHDKGUtilsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETHDKGUtils *ETHDKGUtilsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKGUtils.Contract.ETHDKGUtilsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETHDKGUtils *ETHDKGUtilsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETHDKGUtils.Contract.ETHDKGUtilsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETHDKGUtils *ETHDKGUtilsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ETHDKGUtils.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETHDKGUtils *ETHDKGUtilsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKGUtils.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETHDKGUtils *ETHDKGUtilsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETHDKGUtils.Contract.contract.Transact(opts, method, params...)
}

// EthSafeTransferMetaData contains all meta data concerning the EthSafeTransfer contract.
var EthSafeTransferMetaData = &bind.MetaData{
	ABI: "[]",
}

// EthSafeTransferABI is the input ABI used to generate the binding from.
// Deprecated: Use EthSafeTransferMetaData.ABI instead.
var EthSafeTransferABI = EthSafeTransferMetaData.ABI

// EthSafeTransfer is an auto generated Go binding around an Ethereum contract.
type EthSafeTransfer struct {
	EthSafeTransferCaller     // Read-only binding to the contract
	EthSafeTransferTransactor // Write-only binding to the contract
	EthSafeTransferFilterer   // Log filterer for contract events
}

// EthSafeTransferCaller is an auto generated read-only Go binding around an Ethereum contract.
type EthSafeTransferCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthSafeTransferTransactor is an auto generated write-only Go binding around an Ethereum contract.
type EthSafeTransferTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthSafeTransferFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type EthSafeTransferFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthSafeTransferSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type EthSafeTransferSession struct {
	Contract     *EthSafeTransfer  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// EthSafeTransferCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type EthSafeTransferCallerSession struct {
	Contract *EthSafeTransferCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// EthSafeTransferTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type EthSafeTransferTransactorSession struct {
	Contract     *EthSafeTransferTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// EthSafeTransferRaw is an auto generated low-level Go binding around an Ethereum contract.
type EthSafeTransferRaw struct {
	Contract *EthSafeTransfer // Generic contract binding to access the raw methods on
}

// EthSafeTransferCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type EthSafeTransferCallerRaw struct {
	Contract *EthSafeTransferCaller // Generic read-only contract binding to access the raw methods on
}

// EthSafeTransferTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type EthSafeTransferTransactorRaw struct {
	Contract *EthSafeTransferTransactor // Generic write-only contract binding to access the raw methods on
}

// NewEthSafeTransfer creates a new instance of EthSafeTransfer, bound to a specific deployed contract.
func NewEthSafeTransfer(address common.Address, backend bind.ContractBackend) (*EthSafeTransfer, error) {
	contract, err := bindEthSafeTransfer(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &EthSafeTransfer{EthSafeTransferCaller: EthSafeTransferCaller{contract: contract}, EthSafeTransferTransactor: EthSafeTransferTransactor{contract: contract}, EthSafeTransferFilterer: EthSafeTransferFilterer{contract: contract}}, nil
}

// NewEthSafeTransferCaller creates a new read-only instance of EthSafeTransfer, bound to a specific deployed contract.
func NewEthSafeTransferCaller(address common.Address, caller bind.ContractCaller) (*EthSafeTransferCaller, error) {
	contract, err := bindEthSafeTransfer(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &EthSafeTransferCaller{contract: contract}, nil
}

// NewEthSafeTransferTransactor creates a new write-only instance of EthSafeTransfer, bound to a specific deployed contract.
func NewEthSafeTransferTransactor(address common.Address, transactor bind.ContractTransactor) (*EthSafeTransferTransactor, error) {
	contract, err := bindEthSafeTransfer(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &EthSafeTransferTransactor{contract: contract}, nil
}

// NewEthSafeTransferFilterer creates a new log filterer instance of EthSafeTransfer, bound to a specific deployed contract.
func NewEthSafeTransferFilterer(address common.Address, filterer bind.ContractFilterer) (*EthSafeTransferFilterer, error) {
	contract, err := bindEthSafeTransfer(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &EthSafeTransferFilterer{contract: contract}, nil
}

// bindEthSafeTransfer binds a generic wrapper to an already deployed contract.
func bindEthSafeTransfer(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(EthSafeTransferABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EthSafeTransfer *EthSafeTransferRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EthSafeTransfer.Contract.EthSafeTransferCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EthSafeTransfer *EthSafeTransferRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EthSafeTransfer.Contract.EthSafeTransferTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EthSafeTransfer *EthSafeTransferRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EthSafeTransfer.Contract.EthSafeTransferTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EthSafeTransfer *EthSafeTransferCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EthSafeTransfer.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EthSafeTransfer *EthSafeTransferTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EthSafeTransfer.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EthSafeTransfer *EthSafeTransferTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EthSafeTransfer.Contract.contract.Transact(opts, method, params...)
}

// GovernanceMetaData contains all meta data concerning the Governance contract.
var GovernanceMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"getGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isAllowedProposal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// GovernanceABI is the input ABI used to generate the binding from.
// Deprecated: Use GovernanceMetaData.ABI instead.
var GovernanceABI = GovernanceMetaData.ABI

// Governance is an auto generated Go binding around an Ethereum contract.
type Governance struct {
	GovernanceCaller     // Read-only binding to the contract
	GovernanceTransactor // Write-only binding to the contract
	GovernanceFilterer   // Log filterer for contract events
}

// GovernanceCaller is an auto generated read-only Go binding around an Ethereum contract.
type GovernanceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernanceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type GovernanceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernanceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type GovernanceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernanceSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type GovernanceSession struct {
	Contract     *Governance       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// GovernanceCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type GovernanceCallerSession struct {
	Contract *GovernanceCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// GovernanceTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type GovernanceTransactorSession struct {
	Contract     *GovernanceTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// GovernanceRaw is an auto generated low-level Go binding around an Ethereum contract.
type GovernanceRaw struct {
	Contract *Governance // Generic contract binding to access the raw methods on
}

// GovernanceCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type GovernanceCallerRaw struct {
	Contract *GovernanceCaller // Generic read-only contract binding to access the raw methods on
}

// GovernanceTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type GovernanceTransactorRaw struct {
	Contract *GovernanceTransactor // Generic write-only contract binding to access the raw methods on
}

// NewGovernance creates a new instance of Governance, bound to a specific deployed contract.
func NewGovernance(address common.Address, backend bind.ContractBackend) (*Governance, error) {
	contract, err := bindGovernance(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Governance{GovernanceCaller: GovernanceCaller{contract: contract}, GovernanceTransactor: GovernanceTransactor{contract: contract}, GovernanceFilterer: GovernanceFilterer{contract: contract}}, nil
}

// NewGovernanceCaller creates a new read-only instance of Governance, bound to a specific deployed contract.
func NewGovernanceCaller(address common.Address, caller bind.ContractCaller) (*GovernanceCaller, error) {
	contract, err := bindGovernance(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &GovernanceCaller{contract: contract}, nil
}

// NewGovernanceTransactor creates a new write-only instance of Governance, bound to a specific deployed contract.
func NewGovernanceTransactor(address common.Address, transactor bind.ContractTransactor) (*GovernanceTransactor, error) {
	contract, err := bindGovernance(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &GovernanceTransactor{contract: contract}, nil
}

// NewGovernanceFilterer creates a new log filterer instance of Governance, bound to a specific deployed contract.
func NewGovernanceFilterer(address common.Address, filterer bind.ContractFilterer) (*GovernanceFilterer, error) {
	contract, err := bindGovernance(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &GovernanceFilterer{contract: contract}, nil
}

// bindGovernance binds a generic wrapper to an already deployed contract.
func bindGovernance(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(GovernanceABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Governance *GovernanceRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Governance.Contract.GovernanceCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Governance *GovernanceRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Governance.Contract.GovernanceTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Governance *GovernanceRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Governance.Contract.GovernanceTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Governance *GovernanceCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Governance.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Governance *GovernanceTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Governance.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Governance *GovernanceTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Governance.Contract.contract.Transact(opts, method, params...)
}

// GetGovernance is a free data retrieval call binding the contract method 0x289b3c0d.
//
// Solidity: function getGovernance() view returns(address)
func (_Governance *GovernanceCaller) GetGovernance(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Governance.contract.Call(opts, &out, "getGovernance")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetGovernance is a free data retrieval call binding the contract method 0x289b3c0d.
//
// Solidity: function getGovernance() view returns(address)
func (_Governance *GovernanceSession) GetGovernance() (common.Address, error) {
	return _Governance.Contract.GetGovernance(&_Governance.CallOpts)
}

// GetGovernance is a free data retrieval call binding the contract method 0x289b3c0d.
//
// Solidity: function getGovernance() view returns(address)
func (_Governance *GovernanceCallerSession) GetGovernance() (common.Address, error) {
	return _Governance.Contract.GetGovernance(&_Governance.CallOpts)
}

// IsAllowedProposal is a free data retrieval call binding the contract method 0x3771165e.
//
// Solidity: function isAllowedProposal(address addr) view returns(bool)
func (_Governance *GovernanceCaller) IsAllowedProposal(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var out []interface{}
	err := _Governance.contract.Call(opts, &out, "isAllowedProposal", addr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsAllowedProposal is a free data retrieval call binding the contract method 0x3771165e.
//
// Solidity: function isAllowedProposal(address addr) view returns(bool)
func (_Governance *GovernanceSession) IsAllowedProposal(addr common.Address) (bool, error) {
	return _Governance.Contract.IsAllowedProposal(&_Governance.CallOpts, addr)
}

// IsAllowedProposal is a free data retrieval call binding the contract method 0x3771165e.
//
// Solidity: function isAllowedProposal(address addr) view returns(bool)
func (_Governance *GovernanceCallerSession) IsAllowedProposal(addr common.Address) (bool, error) {
	return _Governance.Contract.IsAllowedProposal(&_Governance.CallOpts, addr)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_Governance *GovernanceTransactor) SetGovernance(opts *bind.TransactOpts, governance_ common.Address) (*types.Transaction, error) {
	return _Governance.contract.Transact(opts, "setGovernance", governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_Governance *GovernanceSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _Governance.Contract.SetGovernance(&_Governance.TransactOpts, governance_)
}

// SetGovernance is a paid mutator transaction binding the contract method 0xab033ea9.
//
// Solidity: function setGovernance(address governance_) returns()
func (_Governance *GovernanceTransactorSession) SetGovernance(governance_ common.Address) (*types.Transaction, error) {
	return _Governance.Contract.SetGovernance(&_Governance.TransactOpts, governance_)
}

// GovernanceManagerMetaData contains all meta data concerning the GovernanceManager contract.
var GovernanceManagerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Stake_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"MinerStake_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"allowedProposal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalID_\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinerStakeTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalID_\",\"type\":\"uint256\"}],\"name\":\"getProposal\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"logic\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"voteCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockEndVote\",\"type\":\"uint256\"}],\"internalType\":\"structGovernanceStorage.Proposal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalID_\",\"type\":\"uint256\"}],\"name\":\"isProposalExecuted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"logic_\",\"type\":\"address\"}],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalID_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"voteAsMiner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalID_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"voteAsStaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040526000805534801561001457600080fd5b506040516111263803806111268339810160408190526100339161008f565b600180546001600160a01b039384166001600160a01b031991821617909155600280549290931691161790556a5ccf4630096a8c5d0000006003556100c2565b80516001600160a01b038116811461008a57600080fd5b919050565b600080604083850312156100a257600080fd5b6100ab83610073565b91506100b960208401610073565b90509250929050565b611055806100d16000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c8063a35d463311610076578063d00c1aec1161005b578063d00c1aec146101b1578063f4f58000146101d4578063fe0d94c1146101f457600080fd5b8063a35d463314610140578063c7f758a81461015357600080fd5b806301267951146100a85780632590edcb146100ce57806385e52ffe1461010d5780638b0441e214610122575b600080fd5b6100bb6100b6366004610ef5565b610207565b6040519081526020015b60405180910390f35b60025473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100c5565b61012061011b366004610f32565b6103cc565b005b60015473ffffffffffffffffffffffffffffffffffffffff166100e8565b61012061014e366004610f32565b6103f5565b610166610161366004610f54565b610419565b6040516100c5919081511515815260208083015173ffffffffffffffffffffffffffffffffffffffff1690820152604080830151908201526060918201519181019190915260800190565b6101c46101bf366004610f54565b61052e565b60405190151581526020016100c5565b6006546100e89073ffffffffffffffffffffffffffffffffffffffff1681565b610120610202366004610f54565b6105de565b600073ffffffffffffffffffffffffffffffffffffffff82166102d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604960248201527f476f7665726e616e63654d616e616765723a204c6f676963206164647265737360448201527f206d75737420626520646966666572656e742066726f6d20746865207a65726f60648201527f2061646472657373210000000000000000000000000000000000000000000000608482015260a4015b60405180910390fd5b60408051608081018252600080825273ffffffffffffffffffffffffffffffffffffffff85166020830152918101829052606081016103196202a30043610f9c565b90529050610325610a22565b60008181526005602090815260409182902084518154928601517fffffffffffffffffffffff0000000000000000000000000000000000000000009093169015157fffffffffffffffffffffff0000000000000000000000000000000000000000ff161761010073ffffffffffffffffffffffffffffffffffffffff9093169290920291909117815590830151600182015560609092015160029092019190915592915050565b60025473ffffffffffffffffffffffffffffffffffffffff166103f0818484610a3a565b505050565b60015473ffffffffffffffffffffffffffffffffffffffff166103f0818484610a3a565b604080516080810182526000808252602082018190529181018290526060810182905290548211156104cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f476f7665726e616e63654d616e616765723a20496e76616c69642070726f706f60448201527f73616c204944000000000000000000000000000000000000000000000000000060648201526084016102ce565b506000908152600560209081526040918290208251608081018452815460ff811615158252610100900473ffffffffffffffffffffffffffffffffffffffff1692810192909252600181015492820192909252600290910154606082015290565b60008161053a60005490565b10156105c8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f476f7665726e616e63654d616e616765723a20496e76616c69642070726f706f60448201527f73616c204944000000000000000000000000000000000000000000000000000060648201526084016102ce565b5060009081526005602052604090205460ff1690565b806105e860005490565b1015610676576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f476f7665726e616e63654d616e616765723a20496e76616c69642070726f706f60448201527f73616c204944000000000000000000000000000000000000000000000000000060648201526084016102ce565b6000818152600560209081526040918290208251608081018452815460ff811615158252610100900473ffffffffffffffffffffffffffffffffffffffff1692810192909252600181015492820183905260020154606082015260035490911015610763576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f476f7665726e616e63654d616e616765723a2050726f706f73616c20646f657360448201527f206e6f74206861766520656e6f75676820766f7465730000000000000000000060648201526084016102ce565b8051156107f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f476f7665726e616e63654d616e616765723a20546869732070726f706f73616c60448201527f20686173206265656e20657865637574656420616c726561647900000000000060648201526084016102ce565b6001808252600083815260056020908152604080832085518154938701517fffffffffffffffffffffff0000000000000000000000000000000000000000009094169015157fffffffffffffffffffffff0000000000000000000000000000000000000000ff161761010073ffffffffffffffffffffffffffffffffffffffff90941693840217815581860151948101949094556060850151600290940193909355915160248101839052909190604401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f4b64e49200000000000000000000000000000000000000000000000000000000179052516109249190610fb4565b600060405180830381855af49150503d806000811461095f576040519150601f19603f3d011682016040523d82523d6000602084013e610964565b606091505b50509050806109f5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603460248201527f476f7665726e616e63654d616e616765723a2043414c4c204641494c4544207460448201527f6f2070726f706f73616c2065786563757465282900000000000000000000000060648201526084016102ce565b5050600680547fffffffffffffffffffffffff000000000000000000000000000000000000000016905550565b600054610a30600182610f9c565b6000819055919050565b81610a4460005490565b1015610ad2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f476f7665726e616e63654d616e616765723a20496e76616c69642070726f706f60448201527f73616c204944000000000000000000000000000000000000000000000000000060648201526084016102ce565b6000828152600560209081526040918290208251608081018452815460ff811615158252610100900473ffffffffffffffffffffffffffffffffffffffff169281019290925260018101549282019290925260029091015460608201819052431115610bc0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603760248201527f476f7665726e616e63654d616e616765723a2043616e6e6f7420766f7465206f60448201527f6e20746869732070726f706f73616c20616e796d6f726500000000000000000060648201526084016102ce565b805115610c4f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f476f7665726e616e63654d616e616765723a20546869732070726f706f73616c60448201527f20686173206265656e20657865637574656420616c726561647900000000000060648201526084016102ce565b600083815260046020908152604080832073ffffffffffffffffffffffffffffffffffffffff88168452825280832085845290915290205460ff1615610d17576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603560248201527f476f7665726e616e63654d616e616765723a20596f7520616c7265616479207660448201527f6f746564206f6e20746869732070726f706f73616c000000000000000000000060648201526084016102ce565b600083815260046020908152604080832073ffffffffffffffffffffffffffffffffffffffff8816808552908352818420868552909252822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556060830151630cc65dfb9033908690610d93904390610fef565b610d9e906001610f9c565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff9093166004840152602483019190915260448201526064016020604051808303816000875af1158015610e16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3a9190611006565b90508082604001818151610e4e9190610f9c565b9052505060009283526005602090815260409384902082518154928401517fffffffffffffffffffffff0000000000000000000000000000000000000000009093169015157fffffffffffffffffffffff0000000000000000000000000000000000000000ff161761010073ffffffffffffffffffffffffffffffffffffffff90931692909202919091178155928101516001840155606001516002909201919091555050565b600060208284031215610f0757600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610f2b57600080fd5b9392505050565b60008060408385031215610f4557600080fd5b50508035926020909101359150565b600060208284031215610f6657600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115610faf57610faf610f6d565b500190565b6000825160005b81811015610fd55760208186018101518583015201610fbb565b81811115610fe4576000828501525b509190910192915050565b60008282101561100157611001610f6d565b500390565b60006020828403121561101857600080fd5b505191905056fea2646970667358221220ed03d226370fd8b89aace1be6f360f8bd58747fa72478f318f79c04c2bbc72f664736f6c634300080c0033",
}

// GovernanceManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use GovernanceManagerMetaData.ABI instead.
var GovernanceManagerABI = GovernanceManagerMetaData.ABI

// GovernanceManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use GovernanceManagerMetaData.Bin instead.
var GovernanceManagerBin = GovernanceManagerMetaData.Bin

// DeployGovernanceManager deploys a new Ethereum contract, binding an instance of GovernanceManager to it.
func DeployGovernanceManager(auth *bind.TransactOpts, backend bind.ContractBackend, Stake_ common.Address, MinerStake_ common.Address) (common.Address, *types.Transaction, *GovernanceManager, error) {
	parsed, err := GovernanceManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(GovernanceManagerBin), backend, Stake_, MinerStake_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &GovernanceManager{GovernanceManagerCaller: GovernanceManagerCaller{contract: contract}, GovernanceManagerTransactor: GovernanceManagerTransactor{contract: contract}, GovernanceManagerFilterer: GovernanceManagerFilterer{contract: contract}}, nil
}

// GovernanceManager is an auto generated Go binding around an Ethereum contract.
type GovernanceManager struct {
	GovernanceManagerCaller     // Read-only binding to the contract
	GovernanceManagerTransactor // Write-only binding to the contract
	GovernanceManagerFilterer   // Log filterer for contract events
}

// GovernanceManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type GovernanceManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernanceManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type GovernanceManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernanceManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type GovernanceManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernanceManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type GovernanceManagerSession struct {
	Contract     *GovernanceManager // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// GovernanceManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type GovernanceManagerCallerSession struct {
	Contract *GovernanceManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// GovernanceManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type GovernanceManagerTransactorSession struct {
	Contract     *GovernanceManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// GovernanceManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type GovernanceManagerRaw struct {
	Contract *GovernanceManager // Generic contract binding to access the raw methods on
}

// GovernanceManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type GovernanceManagerCallerRaw struct {
	Contract *GovernanceManagerCaller // Generic read-only contract binding to access the raw methods on
}

// GovernanceManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type GovernanceManagerTransactorRaw struct {
	Contract *GovernanceManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewGovernanceManager creates a new instance of GovernanceManager, bound to a specific deployed contract.
func NewGovernanceManager(address common.Address, backend bind.ContractBackend) (*GovernanceManager, error) {
	contract, err := bindGovernanceManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &GovernanceManager{GovernanceManagerCaller: GovernanceManagerCaller{contract: contract}, GovernanceManagerTransactor: GovernanceManagerTransactor{contract: contract}, GovernanceManagerFilterer: GovernanceManagerFilterer{contract: contract}}, nil
}

// NewGovernanceManagerCaller creates a new read-only instance of GovernanceManager, bound to a specific deployed contract.
func NewGovernanceManagerCaller(address common.Address, caller bind.ContractCaller) (*GovernanceManagerCaller, error) {
	contract, err := bindGovernanceManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &GovernanceManagerCaller{contract: contract}, nil
}

// NewGovernanceManagerTransactor creates a new write-only instance of GovernanceManager, bound to a specific deployed contract.
func NewGovernanceManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*GovernanceManagerTransactor, error) {
	contract, err := bindGovernanceManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &GovernanceManagerTransactor{contract: contract}, nil
}

// NewGovernanceManagerFilterer creates a new log filterer instance of GovernanceManager, bound to a specific deployed contract.
func NewGovernanceManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*GovernanceManagerFilterer, error) {
	contract, err := bindGovernanceManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &GovernanceManagerFilterer{contract: contract}, nil
}

// bindGovernanceManager binds a generic wrapper to an already deployed contract.
func bindGovernanceManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(GovernanceManagerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GovernanceManager *GovernanceManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _GovernanceManager.Contract.GovernanceManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GovernanceManager *GovernanceManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GovernanceManager.Contract.GovernanceManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GovernanceManager *GovernanceManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GovernanceManager.Contract.GovernanceManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GovernanceManager *GovernanceManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _GovernanceManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GovernanceManager *GovernanceManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GovernanceManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GovernanceManager *GovernanceManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GovernanceManager.Contract.contract.Transact(opts, method, params...)
}

// AllowedProposal is a free data retrieval call binding the contract method 0xf4f58000.
//
// Solidity: function allowedProposal() view returns(address)
func (_GovernanceManager *GovernanceManagerCaller) AllowedProposal(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _GovernanceManager.contract.Call(opts, &out, "allowedProposal")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AllowedProposal is a free data retrieval call binding the contract method 0xf4f58000.
//
// Solidity: function allowedProposal() view returns(address)
func (_GovernanceManager *GovernanceManagerSession) AllowedProposal() (common.Address, error) {
	return _GovernanceManager.Contract.AllowedProposal(&_GovernanceManager.CallOpts)
}

// AllowedProposal is a free data retrieval call binding the contract method 0xf4f58000.
//
// Solidity: function allowedProposal() view returns(address)
func (_GovernanceManager *GovernanceManagerCallerSession) AllowedProposal() (common.Address, error) {
	return _GovernanceManager.Contract.AllowedProposal(&_GovernanceManager.CallOpts)
}

// GetMinerStakeTokenAddress is a free data retrieval call binding the contract method 0x2590edcb.
//
// Solidity: function getMinerStakeTokenAddress() view returns(address)
func (_GovernanceManager *GovernanceManagerCaller) GetMinerStakeTokenAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _GovernanceManager.contract.Call(opts, &out, "getMinerStakeTokenAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetMinerStakeTokenAddress is a free data retrieval call binding the contract method 0x2590edcb.
//
// Solidity: function getMinerStakeTokenAddress() view returns(address)
func (_GovernanceManager *GovernanceManagerSession) GetMinerStakeTokenAddress() (common.Address, error) {
	return _GovernanceManager.Contract.GetMinerStakeTokenAddress(&_GovernanceManager.CallOpts)
}

// GetMinerStakeTokenAddress is a free data retrieval call binding the contract method 0x2590edcb.
//
// Solidity: function getMinerStakeTokenAddress() view returns(address)
func (_GovernanceManager *GovernanceManagerCallerSession) GetMinerStakeTokenAddress() (common.Address, error) {
	return _GovernanceManager.Contract.GetMinerStakeTokenAddress(&_GovernanceManager.CallOpts)
}

// GetProposal is a free data retrieval call binding the contract method 0xc7f758a8.
//
// Solidity: function getProposal(uint256 proposalID_) view returns((bool,address,uint256,uint256))
func (_GovernanceManager *GovernanceManagerCaller) GetProposal(opts *bind.CallOpts, proposalID_ *big.Int) (GovernanceStorageProposal, error) {
	var out []interface{}
	err := _GovernanceManager.contract.Call(opts, &out, "getProposal", proposalID_)

	if err != nil {
		return *new(GovernanceStorageProposal), err
	}

	out0 := *abi.ConvertType(out[0], new(GovernanceStorageProposal)).(*GovernanceStorageProposal)

	return out0, err

}

// GetProposal is a free data retrieval call binding the contract method 0xc7f758a8.
//
// Solidity: function getProposal(uint256 proposalID_) view returns((bool,address,uint256,uint256))
func (_GovernanceManager *GovernanceManagerSession) GetProposal(proposalID_ *big.Int) (GovernanceStorageProposal, error) {
	return _GovernanceManager.Contract.GetProposal(&_GovernanceManager.CallOpts, proposalID_)
}

// GetProposal is a free data retrieval call binding the contract method 0xc7f758a8.
//
// Solidity: function getProposal(uint256 proposalID_) view returns((bool,address,uint256,uint256))
func (_GovernanceManager *GovernanceManagerCallerSession) GetProposal(proposalID_ *big.Int) (GovernanceStorageProposal, error) {
	return _GovernanceManager.Contract.GetProposal(&_GovernanceManager.CallOpts, proposalID_)
}

// GetStakeTokenAddress is a free data retrieval call binding the contract method 0x8b0441e2.
//
// Solidity: function getStakeTokenAddress() view returns(address)
func (_GovernanceManager *GovernanceManagerCaller) GetStakeTokenAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _GovernanceManager.contract.Call(opts, &out, "getStakeTokenAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStakeTokenAddress is a free data retrieval call binding the contract method 0x8b0441e2.
//
// Solidity: function getStakeTokenAddress() view returns(address)
func (_GovernanceManager *GovernanceManagerSession) GetStakeTokenAddress() (common.Address, error) {
	return _GovernanceManager.Contract.GetStakeTokenAddress(&_GovernanceManager.CallOpts)
}

// GetStakeTokenAddress is a free data retrieval call binding the contract method 0x8b0441e2.
//
// Solidity: function getStakeTokenAddress() view returns(address)
func (_GovernanceManager *GovernanceManagerCallerSession) GetStakeTokenAddress() (common.Address, error) {
	return _GovernanceManager.Contract.GetStakeTokenAddress(&_GovernanceManager.CallOpts)
}

// IsProposalExecuted is a free data retrieval call binding the contract method 0xd00c1aec.
//
// Solidity: function isProposalExecuted(uint256 proposalID_) view returns(bool)
func (_GovernanceManager *GovernanceManagerCaller) IsProposalExecuted(opts *bind.CallOpts, proposalID_ *big.Int) (bool, error) {
	var out []interface{}
	err := _GovernanceManager.contract.Call(opts, &out, "isProposalExecuted", proposalID_)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsProposalExecuted is a free data retrieval call binding the contract method 0xd00c1aec.
//
// Solidity: function isProposalExecuted(uint256 proposalID_) view returns(bool)
func (_GovernanceManager *GovernanceManagerSession) IsProposalExecuted(proposalID_ *big.Int) (bool, error) {
	return _GovernanceManager.Contract.IsProposalExecuted(&_GovernanceManager.CallOpts, proposalID_)
}

// IsProposalExecuted is a free data retrieval call binding the contract method 0xd00c1aec.
//
// Solidity: function isProposalExecuted(uint256 proposalID_) view returns(bool)
func (_GovernanceManager *GovernanceManagerCallerSession) IsProposalExecuted(proposalID_ *big.Int) (bool, error) {
	return _GovernanceManager.Contract.IsProposalExecuted(&_GovernanceManager.CallOpts, proposalID_)
}

// Execute is a paid mutator transaction binding the contract method 0xfe0d94c1.
//
// Solidity: function execute(uint256 proposalID_) returns()
func (_GovernanceManager *GovernanceManagerTransactor) Execute(opts *bind.TransactOpts, proposalID_ *big.Int) (*types.Transaction, error) {
	return _GovernanceManager.contract.Transact(opts, "execute", proposalID_)
}

// Execute is a paid mutator transaction binding the contract method 0xfe0d94c1.
//
// Solidity: function execute(uint256 proposalID_) returns()
func (_GovernanceManager *GovernanceManagerSession) Execute(proposalID_ *big.Int) (*types.Transaction, error) {
	return _GovernanceManager.Contract.Execute(&_GovernanceManager.TransactOpts, proposalID_)
}

// Execute is a paid mutator transaction binding the contract method 0xfe0d94c1.
//
// Solidity: function execute(uint256 proposalID_) returns()
func (_GovernanceManager *GovernanceManagerTransactorSession) Execute(proposalID_ *big.Int) (*types.Transaction, error) {
	return _GovernanceManager.Contract.Execute(&_GovernanceManager.TransactOpts, proposalID_)
}

// Propose is a paid mutator transaction binding the contract method 0x01267951.
//
// Solidity: function propose(address logic_) returns(uint256 proposalID)
func (_GovernanceManager *GovernanceManagerTransactor) Propose(opts *bind.TransactOpts, logic_ common.Address) (*types.Transaction, error) {
	return _GovernanceManager.contract.Transact(opts, "propose", logic_)
}

// Propose is a paid mutator transaction binding the contract method 0x01267951.
//
// Solidity: function propose(address logic_) returns(uint256 proposalID)
func (_GovernanceManager *GovernanceManagerSession) Propose(logic_ common.Address) (*types.Transaction, error) {
	return _GovernanceManager.Contract.Propose(&_GovernanceManager.TransactOpts, logic_)
}

// Propose is a paid mutator transaction binding the contract method 0x01267951.
//
// Solidity: function propose(address logic_) returns(uint256 proposalID)
func (_GovernanceManager *GovernanceManagerTransactorSession) Propose(logic_ common.Address) (*types.Transaction, error) {
	return _GovernanceManager.Contract.Propose(&_GovernanceManager.TransactOpts, logic_)
}

// VoteAsMiner is a paid mutator transaction binding the contract method 0x85e52ffe.
//
// Solidity: function voteAsMiner(uint256 proposalID_, uint256 tokenID_) returns()
func (_GovernanceManager *GovernanceManagerTransactor) VoteAsMiner(opts *bind.TransactOpts, proposalID_ *big.Int, tokenID_ *big.Int) (*types.Transaction, error) {
	return _GovernanceManager.contract.Transact(opts, "voteAsMiner", proposalID_, tokenID_)
}

// VoteAsMiner is a paid mutator transaction binding the contract method 0x85e52ffe.
//
// Solidity: function voteAsMiner(uint256 proposalID_, uint256 tokenID_) returns()
func (_GovernanceManager *GovernanceManagerSession) VoteAsMiner(proposalID_ *big.Int, tokenID_ *big.Int) (*types.Transaction, error) {
	return _GovernanceManager.Contract.VoteAsMiner(&_GovernanceManager.TransactOpts, proposalID_, tokenID_)
}

// VoteAsMiner is a paid mutator transaction binding the contract method 0x85e52ffe.
//
// Solidity: function voteAsMiner(uint256 proposalID_, uint256 tokenID_) returns()
func (_GovernanceManager *GovernanceManagerTransactorSession) VoteAsMiner(proposalID_ *big.Int, tokenID_ *big.Int) (*types.Transaction, error) {
	return _GovernanceManager.Contract.VoteAsMiner(&_GovernanceManager.TransactOpts, proposalID_, tokenID_)
}

// VoteAsStaker is a paid mutator transaction binding the contract method 0xa35d4633.
//
// Solidity: function voteAsStaker(uint256 proposalID_, uint256 tokenID_) returns()
func (_GovernanceManager *GovernanceManagerTransactor) VoteAsStaker(opts *bind.TransactOpts, proposalID_ *big.Int, tokenID_ *big.Int) (*types.Transaction, error) {
	return _GovernanceManager.contract.Transact(opts, "voteAsStaker", proposalID_, tokenID_)
}

// VoteAsStaker is a paid mutator transaction binding the contract method 0xa35d4633.
//
// Solidity: function voteAsStaker(uint256 proposalID_, uint256 tokenID_) returns()
func (_GovernanceManager *GovernanceManagerSession) VoteAsStaker(proposalID_ *big.Int, tokenID_ *big.Int) (*types.Transaction, error) {
	return _GovernanceManager.Contract.VoteAsStaker(&_GovernanceManager.TransactOpts, proposalID_, tokenID_)
}

// VoteAsStaker is a paid mutator transaction binding the contract method 0xa35d4633.
//
// Solidity: function voteAsStaker(uint256 proposalID_, uint256 tokenID_) returns()
func (_GovernanceManager *GovernanceManagerTransactorSession) VoteAsStaker(proposalID_ *big.Int, tokenID_ *big.Int) (*types.Transaction, error) {
	return _GovernanceManager.Contract.VoteAsStaker(&_GovernanceManager.TransactOpts, proposalID_, tokenID_)
}

// GovernanceMaxLockMetaData contains all meta data concerning the GovernanceMaxLock contract.
var GovernanceMaxLockMetaData = &bind.MetaData{
	ABI: "[]",
}

// GovernanceMaxLockABI is the input ABI used to generate the binding from.
// Deprecated: Use GovernanceMaxLockMetaData.ABI instead.
var GovernanceMaxLockABI = GovernanceMaxLockMetaData.ABI

// GovernanceMaxLock is an auto generated Go binding around an Ethereum contract.
type GovernanceMaxLock struct {
	GovernanceMaxLockCaller     // Read-only binding to the contract
	GovernanceMaxLockTransactor // Write-only binding to the contract
	GovernanceMaxLockFilterer   // Log filterer for contract events
}

// GovernanceMaxLockCaller is an auto generated read-only Go binding around an Ethereum contract.
type GovernanceMaxLockCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernanceMaxLockTransactor is an auto generated write-only Go binding around an Ethereum contract.
type GovernanceMaxLockTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernanceMaxLockFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type GovernanceMaxLockFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernanceMaxLockSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type GovernanceMaxLockSession struct {
	Contract     *GovernanceMaxLock // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// GovernanceMaxLockCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type GovernanceMaxLockCallerSession struct {
	Contract *GovernanceMaxLockCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// GovernanceMaxLockTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type GovernanceMaxLockTransactorSession struct {
	Contract     *GovernanceMaxLockTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// GovernanceMaxLockRaw is an auto generated low-level Go binding around an Ethereum contract.
type GovernanceMaxLockRaw struct {
	Contract *GovernanceMaxLock // Generic contract binding to access the raw methods on
}

// GovernanceMaxLockCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type GovernanceMaxLockCallerRaw struct {
	Contract *GovernanceMaxLockCaller // Generic read-only contract binding to access the raw methods on
}

// GovernanceMaxLockTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type GovernanceMaxLockTransactorRaw struct {
	Contract *GovernanceMaxLockTransactor // Generic write-only contract binding to access the raw methods on
}

// NewGovernanceMaxLock creates a new instance of GovernanceMaxLock, bound to a specific deployed contract.
func NewGovernanceMaxLock(address common.Address, backend bind.ContractBackend) (*GovernanceMaxLock, error) {
	contract, err := bindGovernanceMaxLock(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &GovernanceMaxLock{GovernanceMaxLockCaller: GovernanceMaxLockCaller{contract: contract}, GovernanceMaxLockTransactor: GovernanceMaxLockTransactor{contract: contract}, GovernanceMaxLockFilterer: GovernanceMaxLockFilterer{contract: contract}}, nil
}

// NewGovernanceMaxLockCaller creates a new read-only instance of GovernanceMaxLock, bound to a specific deployed contract.
func NewGovernanceMaxLockCaller(address common.Address, caller bind.ContractCaller) (*GovernanceMaxLockCaller, error) {
	contract, err := bindGovernanceMaxLock(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &GovernanceMaxLockCaller{contract: contract}, nil
}

// NewGovernanceMaxLockTransactor creates a new write-only instance of GovernanceMaxLock, bound to a specific deployed contract.
func NewGovernanceMaxLockTransactor(address common.Address, transactor bind.ContractTransactor) (*GovernanceMaxLockTransactor, error) {
	contract, err := bindGovernanceMaxLock(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &GovernanceMaxLockTransactor{contract: contract}, nil
}

// NewGovernanceMaxLockFilterer creates a new log filterer instance of GovernanceMaxLock, bound to a specific deployed contract.
func NewGovernanceMaxLockFilterer(address common.Address, filterer bind.ContractFilterer) (*GovernanceMaxLockFilterer, error) {
	contract, err := bindGovernanceMaxLock(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &GovernanceMaxLockFilterer{contract: contract}, nil
}

// bindGovernanceMaxLock binds a generic wrapper to an already deployed contract.
func bindGovernanceMaxLock(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(GovernanceMaxLockABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GovernanceMaxLock *GovernanceMaxLockRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _GovernanceMaxLock.Contract.GovernanceMaxLockCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GovernanceMaxLock *GovernanceMaxLockRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GovernanceMaxLock.Contract.GovernanceMaxLockTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GovernanceMaxLock *GovernanceMaxLockRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GovernanceMaxLock.Contract.GovernanceMaxLockTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GovernanceMaxLock *GovernanceMaxLockCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _GovernanceMaxLock.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GovernanceMaxLock *GovernanceMaxLockTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GovernanceMaxLock.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GovernanceMaxLock *GovernanceMaxLockTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GovernanceMaxLock.Contract.contract.Transact(opts, method, params...)
}

// GovernanceStorageMetaData contains all meta data concerning the GovernanceStorage contract.
var GovernanceStorageMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"allowedProposal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// GovernanceStorageABI is the input ABI used to generate the binding from.
// Deprecated: Use GovernanceStorageMetaData.ABI instead.
var GovernanceStorageABI = GovernanceStorageMetaData.ABI

// GovernanceStorage is an auto generated Go binding around an Ethereum contract.
type GovernanceStorage struct {
	GovernanceStorageCaller     // Read-only binding to the contract
	GovernanceStorageTransactor // Write-only binding to the contract
	GovernanceStorageFilterer   // Log filterer for contract events
}

// GovernanceStorageCaller is an auto generated read-only Go binding around an Ethereum contract.
type GovernanceStorageCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernanceStorageTransactor is an auto generated write-only Go binding around an Ethereum contract.
type GovernanceStorageTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernanceStorageFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type GovernanceStorageFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernanceStorageSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type GovernanceStorageSession struct {
	Contract     *GovernanceStorage // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// GovernanceStorageCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type GovernanceStorageCallerSession struct {
	Contract *GovernanceStorageCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// GovernanceStorageTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type GovernanceStorageTransactorSession struct {
	Contract     *GovernanceStorageTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// GovernanceStorageRaw is an auto generated low-level Go binding around an Ethereum contract.
type GovernanceStorageRaw struct {
	Contract *GovernanceStorage // Generic contract binding to access the raw methods on
}

// GovernanceStorageCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type GovernanceStorageCallerRaw struct {
	Contract *GovernanceStorageCaller // Generic read-only contract binding to access the raw methods on
}

// GovernanceStorageTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type GovernanceStorageTransactorRaw struct {
	Contract *GovernanceStorageTransactor // Generic write-only contract binding to access the raw methods on
}

// NewGovernanceStorage creates a new instance of GovernanceStorage, bound to a specific deployed contract.
func NewGovernanceStorage(address common.Address, backend bind.ContractBackend) (*GovernanceStorage, error) {
	contract, err := bindGovernanceStorage(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &GovernanceStorage{GovernanceStorageCaller: GovernanceStorageCaller{contract: contract}, GovernanceStorageTransactor: GovernanceStorageTransactor{contract: contract}, GovernanceStorageFilterer: GovernanceStorageFilterer{contract: contract}}, nil
}

// NewGovernanceStorageCaller creates a new read-only instance of GovernanceStorage, bound to a specific deployed contract.
func NewGovernanceStorageCaller(address common.Address, caller bind.ContractCaller) (*GovernanceStorageCaller, error) {
	contract, err := bindGovernanceStorage(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &GovernanceStorageCaller{contract: contract}, nil
}

// NewGovernanceStorageTransactor creates a new write-only instance of GovernanceStorage, bound to a specific deployed contract.
func NewGovernanceStorageTransactor(address common.Address, transactor bind.ContractTransactor) (*GovernanceStorageTransactor, error) {
	contract, err := bindGovernanceStorage(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &GovernanceStorageTransactor{contract: contract}, nil
}

// NewGovernanceStorageFilterer creates a new log filterer instance of GovernanceStorage, bound to a specific deployed contract.
func NewGovernanceStorageFilterer(address common.Address, filterer bind.ContractFilterer) (*GovernanceStorageFilterer, error) {
	contract, err := bindGovernanceStorage(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &GovernanceStorageFilterer{contract: contract}, nil
}

// bindGovernanceStorage binds a generic wrapper to an already deployed contract.
func bindGovernanceStorage(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(GovernanceStorageABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GovernanceStorage *GovernanceStorageRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _GovernanceStorage.Contract.GovernanceStorageCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GovernanceStorage *GovernanceStorageRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GovernanceStorage.Contract.GovernanceStorageTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GovernanceStorage *GovernanceStorageRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GovernanceStorage.Contract.GovernanceStorageTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GovernanceStorage *GovernanceStorageCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _GovernanceStorage.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GovernanceStorage *GovernanceStorageTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GovernanceStorage.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GovernanceStorage *GovernanceStorageTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GovernanceStorage.Contract.contract.Transact(opts, method, params...)
}

// AllowedProposal is a free data retrieval call binding the contract method 0xf4f58000.
//
// Solidity: function allowedProposal() view returns(address)
func (_GovernanceStorage *GovernanceStorageCaller) AllowedProposal(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _GovernanceStorage.contract.Call(opts, &out, "allowedProposal")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AllowedProposal is a free data retrieval call binding the contract method 0xf4f58000.
//
// Solidity: function allowedProposal() view returns(address)
func (_GovernanceStorage *GovernanceStorageSession) AllowedProposal() (common.Address, error) {
	return _GovernanceStorage.Contract.AllowedProposal(&_GovernanceStorage.CallOpts)
}

// AllowedProposal is a free data retrieval call binding the contract method 0xf4f58000.
//
// Solidity: function allowedProposal() view returns(address)
func (_GovernanceStorage *GovernanceStorageCallerSession) AllowedProposal() (common.Address, error) {
	return _GovernanceStorage.Contract.AllowedProposal(&_GovernanceStorage.CallOpts)
}

// ICBOpenerMetaData contains all meta data concerning the ICBOpener contract.
var ICBOpenerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"tripCB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// ICBOpenerABI is the input ABI used to generate the binding from.
// Deprecated: Use ICBOpenerMetaData.ABI instead.
var ICBOpenerABI = ICBOpenerMetaData.ABI

// ICBOpener is an auto generated Go binding around an Ethereum contract.
type ICBOpener struct {
	ICBOpenerCaller     // Read-only binding to the contract
	ICBOpenerTransactor // Write-only binding to the contract
	ICBOpenerFilterer   // Log filterer for contract events
}

// ICBOpenerCaller is an auto generated read-only Go binding around an Ethereum contract.
type ICBOpenerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ICBOpenerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ICBOpenerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ICBOpenerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ICBOpenerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ICBOpenerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ICBOpenerSession struct {
	Contract     *ICBOpener        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ICBOpenerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ICBOpenerCallerSession struct {
	Contract *ICBOpenerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// ICBOpenerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ICBOpenerTransactorSession struct {
	Contract     *ICBOpenerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// ICBOpenerRaw is an auto generated low-level Go binding around an Ethereum contract.
type ICBOpenerRaw struct {
	Contract *ICBOpener // Generic contract binding to access the raw methods on
}

// ICBOpenerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ICBOpenerCallerRaw struct {
	Contract *ICBOpenerCaller // Generic read-only contract binding to access the raw methods on
}

// ICBOpenerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ICBOpenerTransactorRaw struct {
	Contract *ICBOpenerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewICBOpener creates a new instance of ICBOpener, bound to a specific deployed contract.
func NewICBOpener(address common.Address, backend bind.ContractBackend) (*ICBOpener, error) {
	contract, err := bindICBOpener(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ICBOpener{ICBOpenerCaller: ICBOpenerCaller{contract: contract}, ICBOpenerTransactor: ICBOpenerTransactor{contract: contract}, ICBOpenerFilterer: ICBOpenerFilterer{contract: contract}}, nil
}

// NewICBOpenerCaller creates a new read-only instance of ICBOpener, bound to a specific deployed contract.
func NewICBOpenerCaller(address common.Address, caller bind.ContractCaller) (*ICBOpenerCaller, error) {
	contract, err := bindICBOpener(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ICBOpenerCaller{contract: contract}, nil
}

// NewICBOpenerTransactor creates a new write-only instance of ICBOpener, bound to a specific deployed contract.
func NewICBOpenerTransactor(address common.Address, transactor bind.ContractTransactor) (*ICBOpenerTransactor, error) {
	contract, err := bindICBOpener(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ICBOpenerTransactor{contract: contract}, nil
}

// NewICBOpenerFilterer creates a new log filterer instance of ICBOpener, bound to a specific deployed contract.
func NewICBOpenerFilterer(address common.Address, filterer bind.ContractFilterer) (*ICBOpenerFilterer, error) {
	contract, err := bindICBOpener(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ICBOpenerFilterer{contract: contract}, nil
}

// bindICBOpener binds a generic wrapper to an already deployed contract.
func bindICBOpener(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ICBOpenerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ICBOpener *ICBOpenerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ICBOpener.Contract.ICBOpenerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ICBOpener *ICBOpenerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ICBOpener.Contract.ICBOpenerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ICBOpener *ICBOpenerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ICBOpener.Contract.ICBOpenerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ICBOpener *ICBOpenerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ICBOpener.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ICBOpener *ICBOpenerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ICBOpener.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ICBOpener *ICBOpenerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ICBOpener.Contract.contract.Transact(opts, method, params...)
}

// TripCB is a paid mutator transaction binding the contract method 0xadfdc03f.
//
// Solidity: function tripCB() returns()
func (_ICBOpener *ICBOpenerTransactor) TripCB(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ICBOpener.contract.Transact(opts, "tripCB")
}

// TripCB is a paid mutator transaction binding the contract method 0xadfdc03f.
//
// Solidity: function tripCB() returns()
func (_ICBOpener *ICBOpenerSession) TripCB() (*types.Transaction, error) {
	return _ICBOpener.Contract.TripCB(&_ICBOpener.TransactOpts)
}

// TripCB is a paid mutator transaction binding the contract method 0xadfdc03f.
//
// Solidity: function tripCB() returns()
func (_ICBOpener *ICBOpenerTransactorSession) TripCB() (*types.Transaction, error) {
	return _ICBOpener.Contract.TripCB(&_ICBOpener.TransactOpts)
}

// IERC165MetaData contains all meta data concerning the IERC165 contract.
var IERC165MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// IERC165ABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC165MetaData.ABI instead.
var IERC165ABI = IERC165MetaData.ABI

// IERC165 is an auto generated Go binding around an Ethereum contract.
type IERC165 struct {
	IERC165Caller     // Read-only binding to the contract
	IERC165Transactor // Write-only binding to the contract
	IERC165Filterer   // Log filterer for contract events
}

// IERC165Caller is an auto generated read-only Go binding around an Ethereum contract.
type IERC165Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC165Transactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC165Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC165Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC165Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC165Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC165Session struct {
	Contract     *IERC165          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC165CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC165CallerSession struct {
	Contract *IERC165Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// IERC165TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC165TransactorSession struct {
	Contract     *IERC165Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// IERC165Raw is an auto generated low-level Go binding around an Ethereum contract.
type IERC165Raw struct {
	Contract *IERC165 // Generic contract binding to access the raw methods on
}

// IERC165CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC165CallerRaw struct {
	Contract *IERC165Caller // Generic read-only contract binding to access the raw methods on
}

// IERC165TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC165TransactorRaw struct {
	Contract *IERC165Transactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC165 creates a new instance of IERC165, bound to a specific deployed contract.
func NewIERC165(address common.Address, backend bind.ContractBackend) (*IERC165, error) {
	contract, err := bindIERC165(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC165{IERC165Caller: IERC165Caller{contract: contract}, IERC165Transactor: IERC165Transactor{contract: contract}, IERC165Filterer: IERC165Filterer{contract: contract}}, nil
}

// NewIERC165Caller creates a new read-only instance of IERC165, bound to a specific deployed contract.
func NewIERC165Caller(address common.Address, caller bind.ContractCaller) (*IERC165Caller, error) {
	contract, err := bindIERC165(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC165Caller{contract: contract}, nil
}

// NewIERC165Transactor creates a new write-only instance of IERC165, bound to a specific deployed contract.
func NewIERC165Transactor(address common.Address, transactor bind.ContractTransactor) (*IERC165Transactor, error) {
	contract, err := bindIERC165(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC165Transactor{contract: contract}, nil
}

// NewIERC165Filterer creates a new log filterer instance of IERC165, bound to a specific deployed contract.
func NewIERC165Filterer(address common.Address, filterer bind.ContractFilterer) (*IERC165Filterer, error) {
	contract, err := bindIERC165(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC165Filterer{contract: contract}, nil
}

// bindIERC165 binds a generic wrapper to an already deployed contract.
func bindIERC165(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IERC165ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC165 *IERC165Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC165.Contract.IERC165Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC165 *IERC165Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC165.Contract.IERC165Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC165 *IERC165Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC165.Contract.IERC165Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC165 *IERC165CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC165.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC165 *IERC165TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC165.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC165 *IERC165TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC165.Contract.contract.Transact(opts, method, params...)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_IERC165 *IERC165Caller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _IERC165.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_IERC165 *IERC165Session) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _IERC165.Contract.SupportsInterface(&_IERC165.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_IERC165 *IERC165CallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _IERC165.Contract.SupportsInterface(&_IERC165.CallOpts, interfaceId)
}

// IERC165UpgradeableMetaData contains all meta data concerning the IERC165Upgradeable contract.
var IERC165UpgradeableMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// IERC165UpgradeableABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC165UpgradeableMetaData.ABI instead.
var IERC165UpgradeableABI = IERC165UpgradeableMetaData.ABI

// IERC165Upgradeable is an auto generated Go binding around an Ethereum contract.
type IERC165Upgradeable struct {
	IERC165UpgradeableCaller     // Read-only binding to the contract
	IERC165UpgradeableTransactor // Write-only binding to the contract
	IERC165UpgradeableFilterer   // Log filterer for contract events
}

// IERC165UpgradeableCaller is an auto generated read-only Go binding around an Ethereum contract.
type IERC165UpgradeableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC165UpgradeableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC165UpgradeableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC165UpgradeableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC165UpgradeableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC165UpgradeableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC165UpgradeableSession struct {
	Contract     *IERC165Upgradeable // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// IERC165UpgradeableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC165UpgradeableCallerSession struct {
	Contract *IERC165UpgradeableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// IERC165UpgradeableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC165UpgradeableTransactorSession struct {
	Contract     *IERC165UpgradeableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// IERC165UpgradeableRaw is an auto generated low-level Go binding around an Ethereum contract.
type IERC165UpgradeableRaw struct {
	Contract *IERC165Upgradeable // Generic contract binding to access the raw methods on
}

// IERC165UpgradeableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC165UpgradeableCallerRaw struct {
	Contract *IERC165UpgradeableCaller // Generic read-only contract binding to access the raw methods on
}

// IERC165UpgradeableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC165UpgradeableTransactorRaw struct {
	Contract *IERC165UpgradeableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC165Upgradeable creates a new instance of IERC165Upgradeable, bound to a specific deployed contract.
func NewIERC165Upgradeable(address common.Address, backend bind.ContractBackend) (*IERC165Upgradeable, error) {
	contract, err := bindIERC165Upgradeable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC165Upgradeable{IERC165UpgradeableCaller: IERC165UpgradeableCaller{contract: contract}, IERC165UpgradeableTransactor: IERC165UpgradeableTransactor{contract: contract}, IERC165UpgradeableFilterer: IERC165UpgradeableFilterer{contract: contract}}, nil
}

// NewIERC165UpgradeableCaller creates a new read-only instance of IERC165Upgradeable, bound to a specific deployed contract.
func NewIERC165UpgradeableCaller(address common.Address, caller bind.ContractCaller) (*IERC165UpgradeableCaller, error) {
	contract, err := bindIERC165Upgradeable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC165UpgradeableCaller{contract: contract}, nil
}

// NewIERC165UpgradeableTransactor creates a new write-only instance of IERC165Upgradeable, bound to a specific deployed contract.
func NewIERC165UpgradeableTransactor(address common.Address, transactor bind.ContractTransactor) (*IERC165UpgradeableTransactor, error) {
	contract, err := bindIERC165Upgradeable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC165UpgradeableTransactor{contract: contract}, nil
}

// NewIERC165UpgradeableFilterer creates a new log filterer instance of IERC165Upgradeable, bound to a specific deployed contract.
func NewIERC165UpgradeableFilterer(address common.Address, filterer bind.ContractFilterer) (*IERC165UpgradeableFilterer, error) {
	contract, err := bindIERC165Upgradeable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC165UpgradeableFilterer{contract: contract}, nil
}

// bindIERC165Upgradeable binds a generic wrapper to an already deployed contract.
func bindIERC165Upgradeable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IERC165UpgradeableABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC165Upgradeable *IERC165UpgradeableRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC165Upgradeable.Contract.IERC165UpgradeableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC165Upgradeable *IERC165UpgradeableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC165Upgradeable.Contract.IERC165UpgradeableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC165Upgradeable *IERC165UpgradeableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC165Upgradeable.Contract.IERC165UpgradeableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC165Upgradeable *IERC165UpgradeableCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC165Upgradeable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC165Upgradeable *IERC165UpgradeableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC165Upgradeable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC165Upgradeable *IERC165UpgradeableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC165Upgradeable.Contract.contract.Transact(opts, method, params...)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_IERC165Upgradeable *IERC165UpgradeableCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _IERC165Upgradeable.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_IERC165Upgradeable *IERC165UpgradeableSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _IERC165Upgradeable.Contract.SupportsInterface(&_IERC165Upgradeable.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_IERC165Upgradeable *IERC165UpgradeableCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _IERC165Upgradeable.Contract.SupportsInterface(&_IERC165Upgradeable.CallOpts, interfaceId)
}

// IERC20MetadataUpgradeableMetaData contains all meta data concerning the IERC20MetadataUpgradeable contract.
var IERC20MetadataUpgradeableMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IERC20MetadataUpgradeableABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC20MetadataUpgradeableMetaData.ABI instead.
var IERC20MetadataUpgradeableABI = IERC20MetadataUpgradeableMetaData.ABI

// IERC20MetadataUpgradeable is an auto generated Go binding around an Ethereum contract.
type IERC20MetadataUpgradeable struct {
	IERC20MetadataUpgradeableCaller     // Read-only binding to the contract
	IERC20MetadataUpgradeableTransactor // Write-only binding to the contract
	IERC20MetadataUpgradeableFilterer   // Log filterer for contract events
}

// IERC20MetadataUpgradeableCaller is an auto generated read-only Go binding around an Ethereum contract.
type IERC20MetadataUpgradeableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20MetadataUpgradeableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC20MetadataUpgradeableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20MetadataUpgradeableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC20MetadataUpgradeableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20MetadataUpgradeableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC20MetadataUpgradeableSession struct {
	Contract     *IERC20MetadataUpgradeable // Generic contract binding to set the session for
	CallOpts     bind.CallOpts              // Call options to use throughout this session
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// IERC20MetadataUpgradeableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC20MetadataUpgradeableCallerSession struct {
	Contract *IERC20MetadataUpgradeableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                    // Call options to use throughout this session
}

// IERC20MetadataUpgradeableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC20MetadataUpgradeableTransactorSession struct {
	Contract     *IERC20MetadataUpgradeableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                    // Transaction auth options to use throughout this session
}

// IERC20MetadataUpgradeableRaw is an auto generated low-level Go binding around an Ethereum contract.
type IERC20MetadataUpgradeableRaw struct {
	Contract *IERC20MetadataUpgradeable // Generic contract binding to access the raw methods on
}

// IERC20MetadataUpgradeableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC20MetadataUpgradeableCallerRaw struct {
	Contract *IERC20MetadataUpgradeableCaller // Generic read-only contract binding to access the raw methods on
}

// IERC20MetadataUpgradeableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC20MetadataUpgradeableTransactorRaw struct {
	Contract *IERC20MetadataUpgradeableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC20MetadataUpgradeable creates a new instance of IERC20MetadataUpgradeable, bound to a specific deployed contract.
func NewIERC20MetadataUpgradeable(address common.Address, backend bind.ContractBackend) (*IERC20MetadataUpgradeable, error) {
	contract, err := bindIERC20MetadataUpgradeable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC20MetadataUpgradeable{IERC20MetadataUpgradeableCaller: IERC20MetadataUpgradeableCaller{contract: contract}, IERC20MetadataUpgradeableTransactor: IERC20MetadataUpgradeableTransactor{contract: contract}, IERC20MetadataUpgradeableFilterer: IERC20MetadataUpgradeableFilterer{contract: contract}}, nil
}

// NewIERC20MetadataUpgradeableCaller creates a new read-only instance of IERC20MetadataUpgradeable, bound to a specific deployed contract.
func NewIERC20MetadataUpgradeableCaller(address common.Address, caller bind.ContractCaller) (*IERC20MetadataUpgradeableCaller, error) {
	contract, err := bindIERC20MetadataUpgradeable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20MetadataUpgradeableCaller{contract: contract}, nil
}

// NewIERC20MetadataUpgradeableTransactor creates a new write-only instance of IERC20MetadataUpgradeable, bound to a specific deployed contract.
func NewIERC20MetadataUpgradeableTransactor(address common.Address, transactor bind.ContractTransactor) (*IERC20MetadataUpgradeableTransactor, error) {
	contract, err := bindIERC20MetadataUpgradeable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20MetadataUpgradeableTransactor{contract: contract}, nil
}

// NewIERC20MetadataUpgradeableFilterer creates a new log filterer instance of IERC20MetadataUpgradeable, bound to a specific deployed contract.
func NewIERC20MetadataUpgradeableFilterer(address common.Address, filterer bind.ContractFilterer) (*IERC20MetadataUpgradeableFilterer, error) {
	contract, err := bindIERC20MetadataUpgradeable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC20MetadataUpgradeableFilterer{contract: contract}, nil
}

// bindIERC20MetadataUpgradeable binds a generic wrapper to an already deployed contract.
func bindIERC20MetadataUpgradeable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IERC20MetadataUpgradeableABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20MetadataUpgradeable *IERC20MetadataUpgradeableRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20MetadataUpgradeable.Contract.IERC20MetadataUpgradeableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20MetadataUpgradeable *IERC20MetadataUpgradeableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20MetadataUpgradeable.Contract.IERC20MetadataUpgradeableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20MetadataUpgradeable *IERC20MetadataUpgradeableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20MetadataUpgradeable.Contract.IERC20MetadataUpgradeableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20MetadataUpgradeable *IERC20MetadataUpgradeableCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20MetadataUpgradeable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20MetadataUpgradeable *IERC20MetadataUpgradeableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20MetadataUpgradeable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20MetadataUpgradeable *IERC20MetadataUpgradeableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20MetadataUpgradeable.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20MetadataUpgradeable *IERC20MetadataUpgradeableCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC20MetadataUpgradeable.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20MetadataUpgradeable *IERC20MetadataUpgradeableSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _IERC20MetadataUpgradeable.Contract.Allowance(&_IERC20MetadataUpgradeable.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20MetadataUpgradeable *IERC20MetadataUpgradeableCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _IERC20MetadataUpgradeable.Contract.Allowance(&_IERC20MetadataUpgradeable.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20MetadataUpgradeable *IERC20MetadataUpgradeableCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC20MetadataUpgradeable.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20MetadataUpgradeable *IERC20MetadataUpgradeableSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _IERC20MetadataUpgradeable.Contract.BalanceOf(&_IERC20MetadataUpgradeable.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20MetadataUpgradeable *IERC20MetadataUpgradeableCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _IERC20MetadataUpgradeable.Contract.BalanceOf(&_IERC20MetadataUpgradeable.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_IERC20MetadataUpgradeable *IERC20MetadataUpgradeableCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _IERC20MetadataUpgradeable.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_IERC20MetadataUpgradeable *IERC20MetadataUpgradeableSession) Decimals() (uint8, error) {
	return _IERC20MetadataUpgradeable.Contract.Decimals(&_IERC20MetadataUpgradeable.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_IERC20MetadataUpgradeable *IERC20MetadataUpgradeableCallerSession) Decimals() (uint8, error) {
	return _IERC20MetadataUpgradeable.Contract.Decimals(&_IERC20MetadataUpgradeable.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_IERC20MetadataUpgradeable *IERC20MetadataUpgradeableCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _IERC20MetadataUpgradeable.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_IERC20MetadataUpgradeable *IERC20MetadataUpgradeableSession) Name() (string, error) {
	return _IERC20MetadataUpgradeable.Contract.Name(&_IERC20MetadataUpgradeable.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_IERC20MetadataUpgradeable *IERC20MetadataUpgradeableCallerSession) Name() (string, error) {
	return _IERC20MetadataUpgradeable.Contract.Name(&_IERC20MetadataUpgradeable.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_IERC20MetadataUpgradeable *IERC20MetadataUpgradeableCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _IERC20MetadataUpgradeable.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_IERC20MetadataUpgradeable *IERC20MetadataUpgradeableSession) Symbol() (string, error) {
	return _IERC20MetadataUpgradeable.Contract.Symbol(&_IERC20MetadataUpgradeable.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_IERC20MetadataUpgradeable *IERC20MetadataUpgradeableCallerSession) Symbol() (string, error) {
	return _IERC20MetadataUpgradeable.Contract.Symbol(&_IERC20MetadataUpgradeable.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20MetadataUpgradeable *IERC20MetadataUpgradeableCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IERC20MetadataUpgradeable.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20MetadataUpgradeable *IERC20MetadataUpgradeableSession) TotalSupply() (*big.Int, error) {
	return _IERC20MetadataUpgradeable.Contract.TotalSupply(&_IERC20MetadataUpgradeable.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20MetadataUpgradeable *IERC20MetadataUpgradeableCallerSession) TotalSupply() (*big.Int, error) {
	return _IERC20MetadataUpgradeable.Contract.TotalSupply(&_IERC20MetadataUpgradeable.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20MetadataUpgradeable *IERC20MetadataUpgradeableTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20MetadataUpgradeable.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20MetadataUpgradeable *IERC20MetadataUpgradeableSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20MetadataUpgradeable.Contract.Approve(&_IERC20MetadataUpgradeable.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20MetadataUpgradeable *IERC20MetadataUpgradeableTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20MetadataUpgradeable.Contract.Approve(&_IERC20MetadataUpgradeable.TransactOpts, spender, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_IERC20MetadataUpgradeable *IERC20MetadataUpgradeableTransactor) Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20MetadataUpgradeable.contract.Transact(opts, "transfer", to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_IERC20MetadataUpgradeable *IERC20MetadataUpgradeableSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20MetadataUpgradeable.Contract.Transfer(&_IERC20MetadataUpgradeable.TransactOpts, to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_IERC20MetadataUpgradeable *IERC20MetadataUpgradeableTransactorSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20MetadataUpgradeable.Contract.Transfer(&_IERC20MetadataUpgradeable.TransactOpts, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_IERC20MetadataUpgradeable *IERC20MetadataUpgradeableTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20MetadataUpgradeable.contract.Transact(opts, "transferFrom", from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_IERC20MetadataUpgradeable *IERC20MetadataUpgradeableSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20MetadataUpgradeable.Contract.TransferFrom(&_IERC20MetadataUpgradeable.TransactOpts, from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_IERC20MetadataUpgradeable *IERC20MetadataUpgradeableTransactorSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20MetadataUpgradeable.Contract.TransferFrom(&_IERC20MetadataUpgradeable.TransactOpts, from, to, amount)
}

// IERC20MetadataUpgradeableApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the IERC20MetadataUpgradeable contract.
type IERC20MetadataUpgradeableApprovalIterator struct {
	Event *IERC20MetadataUpgradeableApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC20MetadataUpgradeableApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC20MetadataUpgradeableApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC20MetadataUpgradeableApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC20MetadataUpgradeableApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC20MetadataUpgradeableApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC20MetadataUpgradeableApproval represents a Approval event raised by the IERC20MetadataUpgradeable contract.
type IERC20MetadataUpgradeableApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20MetadataUpgradeable *IERC20MetadataUpgradeableFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*IERC20MetadataUpgradeableApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _IERC20MetadataUpgradeable.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &IERC20MetadataUpgradeableApprovalIterator{contract: _IERC20MetadataUpgradeable.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20MetadataUpgradeable *IERC20MetadataUpgradeableFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *IERC20MetadataUpgradeableApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _IERC20MetadataUpgradeable.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC20MetadataUpgradeableApproval)
				if err := _IERC20MetadataUpgradeable.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20MetadataUpgradeable *IERC20MetadataUpgradeableFilterer) ParseApproval(log types.Log) (*IERC20MetadataUpgradeableApproval, error) {
	event := new(IERC20MetadataUpgradeableApproval)
	if err := _IERC20MetadataUpgradeable.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC20MetadataUpgradeableTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the IERC20MetadataUpgradeable contract.
type IERC20MetadataUpgradeableTransferIterator struct {
	Event *IERC20MetadataUpgradeableTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC20MetadataUpgradeableTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC20MetadataUpgradeableTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC20MetadataUpgradeableTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC20MetadataUpgradeableTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC20MetadataUpgradeableTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC20MetadataUpgradeableTransfer represents a Transfer event raised by the IERC20MetadataUpgradeable contract.
type IERC20MetadataUpgradeableTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20MetadataUpgradeable *IERC20MetadataUpgradeableFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*IERC20MetadataUpgradeableTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IERC20MetadataUpgradeable.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &IERC20MetadataUpgradeableTransferIterator{contract: _IERC20MetadataUpgradeable.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20MetadataUpgradeable *IERC20MetadataUpgradeableFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *IERC20MetadataUpgradeableTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IERC20MetadataUpgradeable.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC20MetadataUpgradeableTransfer)
				if err := _IERC20MetadataUpgradeable.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20MetadataUpgradeable *IERC20MetadataUpgradeableFilterer) ParseTransfer(log types.Log) (*IERC20MetadataUpgradeableTransfer, error) {
	event := new(IERC20MetadataUpgradeableTransfer)
	if err := _IERC20MetadataUpgradeable.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC20TransferableMetaData contains all meta data concerning the IERC20Transferable contract.
var IERC20TransferableMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IERC20TransferableABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC20TransferableMetaData.ABI instead.
var IERC20TransferableABI = IERC20TransferableMetaData.ABI

// IERC20Transferable is an auto generated Go binding around an Ethereum contract.
type IERC20Transferable struct {
	IERC20TransferableCaller     // Read-only binding to the contract
	IERC20TransferableTransactor // Write-only binding to the contract
	IERC20TransferableFilterer   // Log filterer for contract events
}

// IERC20TransferableCaller is an auto generated read-only Go binding around an Ethereum contract.
type IERC20TransferableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20TransferableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC20TransferableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20TransferableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC20TransferableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20TransferableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC20TransferableSession struct {
	Contract     *IERC20Transferable // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// IERC20TransferableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC20TransferableCallerSession struct {
	Contract *IERC20TransferableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// IERC20TransferableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC20TransferableTransactorSession struct {
	Contract     *IERC20TransferableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// IERC20TransferableRaw is an auto generated low-level Go binding around an Ethereum contract.
type IERC20TransferableRaw struct {
	Contract *IERC20Transferable // Generic contract binding to access the raw methods on
}

// IERC20TransferableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC20TransferableCallerRaw struct {
	Contract *IERC20TransferableCaller // Generic read-only contract binding to access the raw methods on
}

// IERC20TransferableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC20TransferableTransactorRaw struct {
	Contract *IERC20TransferableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC20Transferable creates a new instance of IERC20Transferable, bound to a specific deployed contract.
func NewIERC20Transferable(address common.Address, backend bind.ContractBackend) (*IERC20Transferable, error) {
	contract, err := bindIERC20Transferable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC20Transferable{IERC20TransferableCaller: IERC20TransferableCaller{contract: contract}, IERC20TransferableTransactor: IERC20TransferableTransactor{contract: contract}, IERC20TransferableFilterer: IERC20TransferableFilterer{contract: contract}}, nil
}

// NewIERC20TransferableCaller creates a new read-only instance of IERC20Transferable, bound to a specific deployed contract.
func NewIERC20TransferableCaller(address common.Address, caller bind.ContractCaller) (*IERC20TransferableCaller, error) {
	contract, err := bindIERC20Transferable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20TransferableCaller{contract: contract}, nil
}

// NewIERC20TransferableTransactor creates a new write-only instance of IERC20Transferable, bound to a specific deployed contract.
func NewIERC20TransferableTransactor(address common.Address, transactor bind.ContractTransactor) (*IERC20TransferableTransactor, error) {
	contract, err := bindIERC20Transferable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20TransferableTransactor{contract: contract}, nil
}

// NewIERC20TransferableFilterer creates a new log filterer instance of IERC20Transferable, bound to a specific deployed contract.
func NewIERC20TransferableFilterer(address common.Address, filterer bind.ContractFilterer) (*IERC20TransferableFilterer, error) {
	contract, err := bindIERC20Transferable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC20TransferableFilterer{contract: contract}, nil
}

// bindIERC20Transferable binds a generic wrapper to an already deployed contract.
func bindIERC20Transferable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IERC20TransferableABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20Transferable *IERC20TransferableRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20Transferable.Contract.IERC20TransferableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20Transferable *IERC20TransferableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20Transferable.Contract.IERC20TransferableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20Transferable *IERC20TransferableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20Transferable.Contract.IERC20TransferableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20Transferable *IERC20TransferableCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20Transferable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20Transferable *IERC20TransferableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20Transferable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20Transferable *IERC20TransferableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20Transferable.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20Transferable *IERC20TransferableCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC20Transferable.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20Transferable *IERC20TransferableSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _IERC20Transferable.Contract.BalanceOf(&_IERC20Transferable.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20Transferable *IERC20TransferableCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _IERC20Transferable.Contract.BalanceOf(&_IERC20Transferable.CallOpts, account)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20Transferable *IERC20TransferableTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Transferable.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20Transferable *IERC20TransferableSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Transferable.Contract.Approve(&_IERC20Transferable.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20Transferable *IERC20TransferableTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Transferable.Contract.Approve(&_IERC20Transferable.TransactOpts, spender, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_IERC20Transferable *IERC20TransferableTransactor) Transfer(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Transferable.contract.Transact(opts, "transfer", recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_IERC20Transferable *IERC20TransferableSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Transferable.Contract.Transfer(&_IERC20Transferable.TransactOpts, recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_IERC20Transferable *IERC20TransferableTransactorSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Transferable.Contract.Transfer(&_IERC20Transferable.TransactOpts, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_IERC20Transferable *IERC20TransferableTransactor) TransferFrom(opts *bind.TransactOpts, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Transferable.contract.Transact(opts, "transferFrom", sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_IERC20Transferable *IERC20TransferableSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Transferable.Contract.TransferFrom(&_IERC20Transferable.TransactOpts, sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_IERC20Transferable *IERC20TransferableTransactorSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Transferable.Contract.TransferFrom(&_IERC20Transferable.TransactOpts, sender, recipient, amount)
}

// IERC20UpgradeableMetaData contains all meta data concerning the IERC20Upgradeable contract.
var IERC20UpgradeableMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IERC20UpgradeableABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC20UpgradeableMetaData.ABI instead.
var IERC20UpgradeableABI = IERC20UpgradeableMetaData.ABI

// IERC20Upgradeable is an auto generated Go binding around an Ethereum contract.
type IERC20Upgradeable struct {
	IERC20UpgradeableCaller     // Read-only binding to the contract
	IERC20UpgradeableTransactor // Write-only binding to the contract
	IERC20UpgradeableFilterer   // Log filterer for contract events
}

// IERC20UpgradeableCaller is an auto generated read-only Go binding around an Ethereum contract.
type IERC20UpgradeableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20UpgradeableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC20UpgradeableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20UpgradeableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC20UpgradeableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20UpgradeableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC20UpgradeableSession struct {
	Contract     *IERC20Upgradeable // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// IERC20UpgradeableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC20UpgradeableCallerSession struct {
	Contract *IERC20UpgradeableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// IERC20UpgradeableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC20UpgradeableTransactorSession struct {
	Contract     *IERC20UpgradeableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// IERC20UpgradeableRaw is an auto generated low-level Go binding around an Ethereum contract.
type IERC20UpgradeableRaw struct {
	Contract *IERC20Upgradeable // Generic contract binding to access the raw methods on
}

// IERC20UpgradeableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC20UpgradeableCallerRaw struct {
	Contract *IERC20UpgradeableCaller // Generic read-only contract binding to access the raw methods on
}

// IERC20UpgradeableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC20UpgradeableTransactorRaw struct {
	Contract *IERC20UpgradeableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC20Upgradeable creates a new instance of IERC20Upgradeable, bound to a specific deployed contract.
func NewIERC20Upgradeable(address common.Address, backend bind.ContractBackend) (*IERC20Upgradeable, error) {
	contract, err := bindIERC20Upgradeable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC20Upgradeable{IERC20UpgradeableCaller: IERC20UpgradeableCaller{contract: contract}, IERC20UpgradeableTransactor: IERC20UpgradeableTransactor{contract: contract}, IERC20UpgradeableFilterer: IERC20UpgradeableFilterer{contract: contract}}, nil
}

// NewIERC20UpgradeableCaller creates a new read-only instance of IERC20Upgradeable, bound to a specific deployed contract.
func NewIERC20UpgradeableCaller(address common.Address, caller bind.ContractCaller) (*IERC20UpgradeableCaller, error) {
	contract, err := bindIERC20Upgradeable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20UpgradeableCaller{contract: contract}, nil
}

// NewIERC20UpgradeableTransactor creates a new write-only instance of IERC20Upgradeable, bound to a specific deployed contract.
func NewIERC20UpgradeableTransactor(address common.Address, transactor bind.ContractTransactor) (*IERC20UpgradeableTransactor, error) {
	contract, err := bindIERC20Upgradeable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20UpgradeableTransactor{contract: contract}, nil
}

// NewIERC20UpgradeableFilterer creates a new log filterer instance of IERC20Upgradeable, bound to a specific deployed contract.
func NewIERC20UpgradeableFilterer(address common.Address, filterer bind.ContractFilterer) (*IERC20UpgradeableFilterer, error) {
	contract, err := bindIERC20Upgradeable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC20UpgradeableFilterer{contract: contract}, nil
}

// bindIERC20Upgradeable binds a generic wrapper to an already deployed contract.
func bindIERC20Upgradeable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IERC20UpgradeableABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20Upgradeable *IERC20UpgradeableRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20Upgradeable.Contract.IERC20UpgradeableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20Upgradeable *IERC20UpgradeableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20Upgradeable.Contract.IERC20UpgradeableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20Upgradeable *IERC20UpgradeableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20Upgradeable.Contract.IERC20UpgradeableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20Upgradeable *IERC20UpgradeableCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20Upgradeable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20Upgradeable *IERC20UpgradeableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20Upgradeable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20Upgradeable *IERC20UpgradeableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20Upgradeable.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20Upgradeable *IERC20UpgradeableCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC20Upgradeable.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20Upgradeable *IERC20UpgradeableSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _IERC20Upgradeable.Contract.Allowance(&_IERC20Upgradeable.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20Upgradeable *IERC20UpgradeableCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _IERC20Upgradeable.Contract.Allowance(&_IERC20Upgradeable.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20Upgradeable *IERC20UpgradeableCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC20Upgradeable.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20Upgradeable *IERC20UpgradeableSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _IERC20Upgradeable.Contract.BalanceOf(&_IERC20Upgradeable.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20Upgradeable *IERC20UpgradeableCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _IERC20Upgradeable.Contract.BalanceOf(&_IERC20Upgradeable.CallOpts, account)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20Upgradeable *IERC20UpgradeableCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IERC20Upgradeable.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20Upgradeable *IERC20UpgradeableSession) TotalSupply() (*big.Int, error) {
	return _IERC20Upgradeable.Contract.TotalSupply(&_IERC20Upgradeable.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20Upgradeable *IERC20UpgradeableCallerSession) TotalSupply() (*big.Int, error) {
	return _IERC20Upgradeable.Contract.TotalSupply(&_IERC20Upgradeable.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20Upgradeable *IERC20UpgradeableTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Upgradeable.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20Upgradeable *IERC20UpgradeableSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Upgradeable.Contract.Approve(&_IERC20Upgradeable.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20Upgradeable *IERC20UpgradeableTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Upgradeable.Contract.Approve(&_IERC20Upgradeable.TransactOpts, spender, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_IERC20Upgradeable *IERC20UpgradeableTransactor) Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Upgradeable.contract.Transact(opts, "transfer", to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_IERC20Upgradeable *IERC20UpgradeableSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Upgradeable.Contract.Transfer(&_IERC20Upgradeable.TransactOpts, to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_IERC20Upgradeable *IERC20UpgradeableTransactorSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Upgradeable.Contract.Transfer(&_IERC20Upgradeable.TransactOpts, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_IERC20Upgradeable *IERC20UpgradeableTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Upgradeable.contract.Transact(opts, "transferFrom", from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_IERC20Upgradeable *IERC20UpgradeableSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Upgradeable.Contract.TransferFrom(&_IERC20Upgradeable.TransactOpts, from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_IERC20Upgradeable *IERC20UpgradeableTransactorSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Upgradeable.Contract.TransferFrom(&_IERC20Upgradeable.TransactOpts, from, to, amount)
}

// IERC20UpgradeableApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the IERC20Upgradeable contract.
type IERC20UpgradeableApprovalIterator struct {
	Event *IERC20UpgradeableApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC20UpgradeableApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC20UpgradeableApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC20UpgradeableApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC20UpgradeableApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC20UpgradeableApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC20UpgradeableApproval represents a Approval event raised by the IERC20Upgradeable contract.
type IERC20UpgradeableApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20Upgradeable *IERC20UpgradeableFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*IERC20UpgradeableApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _IERC20Upgradeable.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &IERC20UpgradeableApprovalIterator{contract: _IERC20Upgradeable.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20Upgradeable *IERC20UpgradeableFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *IERC20UpgradeableApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _IERC20Upgradeable.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC20UpgradeableApproval)
				if err := _IERC20Upgradeable.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20Upgradeable *IERC20UpgradeableFilterer) ParseApproval(log types.Log) (*IERC20UpgradeableApproval, error) {
	event := new(IERC20UpgradeableApproval)
	if err := _IERC20Upgradeable.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC20UpgradeableTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the IERC20Upgradeable contract.
type IERC20UpgradeableTransferIterator struct {
	Event *IERC20UpgradeableTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC20UpgradeableTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC20UpgradeableTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC20UpgradeableTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC20UpgradeableTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC20UpgradeableTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC20UpgradeableTransfer represents a Transfer event raised by the IERC20Upgradeable contract.
type IERC20UpgradeableTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20Upgradeable *IERC20UpgradeableFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*IERC20UpgradeableTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IERC20Upgradeable.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &IERC20UpgradeableTransferIterator{contract: _IERC20Upgradeable.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20Upgradeable *IERC20UpgradeableFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *IERC20UpgradeableTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IERC20Upgradeable.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC20UpgradeableTransfer)
				if err := _IERC20Upgradeable.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20Upgradeable *IERC20UpgradeableFilterer) ParseTransfer(log types.Log) (*IERC20UpgradeableTransfer, error) {
	event := new(IERC20UpgradeableTransfer)
	if err := _IERC20Upgradeable.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC721MetaData contains all meta data concerning the IERC721 contract.
var IERC721MetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IERC721ABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC721MetaData.ABI instead.
var IERC721ABI = IERC721MetaData.ABI

// IERC721 is an auto generated Go binding around an Ethereum contract.
type IERC721 struct {
	IERC721Caller     // Read-only binding to the contract
	IERC721Transactor // Write-only binding to the contract
	IERC721Filterer   // Log filterer for contract events
}

// IERC721Caller is an auto generated read-only Go binding around an Ethereum contract.
type IERC721Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721Transactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC721Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC721Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC721Session struct {
	Contract     *IERC721          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC721CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC721CallerSession struct {
	Contract *IERC721Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// IERC721TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC721TransactorSession struct {
	Contract     *IERC721Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// IERC721Raw is an auto generated low-level Go binding around an Ethereum contract.
type IERC721Raw struct {
	Contract *IERC721 // Generic contract binding to access the raw methods on
}

// IERC721CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC721CallerRaw struct {
	Contract *IERC721Caller // Generic read-only contract binding to access the raw methods on
}

// IERC721TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC721TransactorRaw struct {
	Contract *IERC721Transactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC721 creates a new instance of IERC721, bound to a specific deployed contract.
func NewIERC721(address common.Address, backend bind.ContractBackend) (*IERC721, error) {
	contract, err := bindIERC721(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC721{IERC721Caller: IERC721Caller{contract: contract}, IERC721Transactor: IERC721Transactor{contract: contract}, IERC721Filterer: IERC721Filterer{contract: contract}}, nil
}

// NewIERC721Caller creates a new read-only instance of IERC721, bound to a specific deployed contract.
func NewIERC721Caller(address common.Address, caller bind.ContractCaller) (*IERC721Caller, error) {
	contract, err := bindIERC721(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC721Caller{contract: contract}, nil
}

// NewIERC721Transactor creates a new write-only instance of IERC721, bound to a specific deployed contract.
func NewIERC721Transactor(address common.Address, transactor bind.ContractTransactor) (*IERC721Transactor, error) {
	contract, err := bindIERC721(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC721Transactor{contract: contract}, nil
}

// NewIERC721Filterer creates a new log filterer instance of IERC721, bound to a specific deployed contract.
func NewIERC721Filterer(address common.Address, filterer bind.ContractFilterer) (*IERC721Filterer, error) {
	contract, err := bindIERC721(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC721Filterer{contract: contract}, nil
}

// bindIERC721 binds a generic wrapper to an already deployed contract.
func bindIERC721(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IERC721ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC721 *IERC721Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC721.Contract.IERC721Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC721 *IERC721Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC721.Contract.IERC721Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC721 *IERC721Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC721.Contract.IERC721Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC721 *IERC721CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC721.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC721 *IERC721TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC721.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC721 *IERC721TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC721.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256 balance)
func (_IERC721 *IERC721Caller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC721.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256 balance)
func (_IERC721 *IERC721Session) BalanceOf(owner common.Address) (*big.Int, error) {
	return _IERC721.Contract.BalanceOf(&_IERC721.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256 balance)
func (_IERC721 *IERC721CallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _IERC721.Contract.BalanceOf(&_IERC721.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address operator)
func (_IERC721 *IERC721Caller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _IERC721.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address operator)
func (_IERC721 *IERC721Session) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _IERC721.Contract.GetApproved(&_IERC721.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address operator)
func (_IERC721 *IERC721CallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _IERC721.Contract.GetApproved(&_IERC721.CallOpts, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_IERC721 *IERC721Caller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _IERC721.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_IERC721 *IERC721Session) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _IERC721.Contract.IsApprovedForAll(&_IERC721.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_IERC721 *IERC721CallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _IERC721.Contract.IsApprovedForAll(&_IERC721.CallOpts, owner, operator)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address owner)
func (_IERC721 *IERC721Caller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _IERC721.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address owner)
func (_IERC721 *IERC721Session) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _IERC721.Contract.OwnerOf(&_IERC721.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address owner)
func (_IERC721 *IERC721CallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _IERC721.Contract.OwnerOf(&_IERC721.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_IERC721 *IERC721Caller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _IERC721.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_IERC721 *IERC721Session) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _IERC721.Contract.SupportsInterface(&_IERC721.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_IERC721 *IERC721CallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _IERC721.Contract.SupportsInterface(&_IERC721.CallOpts, interfaceId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_IERC721 *IERC721Transactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_IERC721 *IERC721Session) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721.Contract.Approve(&_IERC721.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_IERC721 *IERC721TransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721.Contract.Approve(&_IERC721.TransactOpts, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721 *IERC721Transactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721 *IERC721Session) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721.Contract.SafeTransferFrom(&_IERC721.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721 *IERC721TransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721.Contract.SafeTransferFrom(&_IERC721.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_IERC721 *IERC721Transactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC721.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_IERC721 *IERC721Session) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC721.Contract.SafeTransferFrom0(&_IERC721.TransactOpts, from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_IERC721 *IERC721TransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC721.Contract.SafeTransferFrom0(&_IERC721.TransactOpts, from, to, tokenId, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool _approved) returns()
func (_IERC721 *IERC721Transactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, _approved bool) (*types.Transaction, error) {
	return _IERC721.contract.Transact(opts, "setApprovalForAll", operator, _approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool _approved) returns()
func (_IERC721 *IERC721Session) SetApprovalForAll(operator common.Address, _approved bool) (*types.Transaction, error) {
	return _IERC721.Contract.SetApprovalForAll(&_IERC721.TransactOpts, operator, _approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool _approved) returns()
func (_IERC721 *IERC721TransactorSession) SetApprovalForAll(operator common.Address, _approved bool) (*types.Transaction, error) {
	return _IERC721.Contract.SetApprovalForAll(&_IERC721.TransactOpts, operator, _approved)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721 *IERC721Transactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721 *IERC721Session) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721.Contract.TransferFrom(&_IERC721.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721 *IERC721TransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721.Contract.TransferFrom(&_IERC721.TransactOpts, from, to, tokenId)
}

// IERC721ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the IERC721 contract.
type IERC721ApprovalIterator struct {
	Event *IERC721Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC721ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC721Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC721Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC721ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC721ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC721Approval represents a Approval event raised by the IERC721 contract.
type IERC721Approval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_IERC721 *IERC721Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*IERC721ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _IERC721.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &IERC721ApprovalIterator{contract: _IERC721.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_IERC721 *IERC721Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *IERC721Approval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _IERC721.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC721Approval)
				if err := _IERC721.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_IERC721 *IERC721Filterer) ParseApproval(log types.Log) (*IERC721Approval, error) {
	event := new(IERC721Approval)
	if err := _IERC721.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC721ApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the IERC721 contract.
type IERC721ApprovalForAllIterator struct {
	Event *IERC721ApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC721ApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC721ApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC721ApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC721ApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC721ApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC721ApprovalForAll represents a ApprovalForAll event raised by the IERC721 contract.
type IERC721ApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_IERC721 *IERC721Filterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*IERC721ApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _IERC721.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &IERC721ApprovalForAllIterator{contract: _IERC721.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_IERC721 *IERC721Filterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *IERC721ApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _IERC721.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC721ApprovalForAll)
				if err := _IERC721.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_IERC721 *IERC721Filterer) ParseApprovalForAll(log types.Log) (*IERC721ApprovalForAll, error) {
	event := new(IERC721ApprovalForAll)
	if err := _IERC721.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC721TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the IERC721 contract.
type IERC721TransferIterator struct {
	Event *IERC721Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC721TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC721Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC721Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC721TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC721TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC721Transfer represents a Transfer event raised by the IERC721 contract.
type IERC721Transfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_IERC721 *IERC721Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*IERC721TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _IERC721.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &IERC721TransferIterator{contract: _IERC721.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_IERC721 *IERC721Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *IERC721Transfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _IERC721.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC721Transfer)
				if err := _IERC721.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_IERC721 *IERC721Filterer) ParseTransfer(log types.Log) (*IERC721Transfer, error) {
	event := new(IERC721Transfer)
	if err := _IERC721.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC721MetadataUpgradeableMetaData contains all meta data concerning the IERC721MetadataUpgradeable contract.
var IERC721MetadataUpgradeableMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IERC721MetadataUpgradeableABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC721MetadataUpgradeableMetaData.ABI instead.
var IERC721MetadataUpgradeableABI = IERC721MetadataUpgradeableMetaData.ABI

// IERC721MetadataUpgradeable is an auto generated Go binding around an Ethereum contract.
type IERC721MetadataUpgradeable struct {
	IERC721MetadataUpgradeableCaller     // Read-only binding to the contract
	IERC721MetadataUpgradeableTransactor // Write-only binding to the contract
	IERC721MetadataUpgradeableFilterer   // Log filterer for contract events
}

// IERC721MetadataUpgradeableCaller is an auto generated read-only Go binding around an Ethereum contract.
type IERC721MetadataUpgradeableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721MetadataUpgradeableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC721MetadataUpgradeableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721MetadataUpgradeableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC721MetadataUpgradeableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721MetadataUpgradeableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC721MetadataUpgradeableSession struct {
	Contract     *IERC721MetadataUpgradeable // Generic contract binding to set the session for
	CallOpts     bind.CallOpts               // Call options to use throughout this session
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// IERC721MetadataUpgradeableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC721MetadataUpgradeableCallerSession struct {
	Contract *IERC721MetadataUpgradeableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                     // Call options to use throughout this session
}

// IERC721MetadataUpgradeableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC721MetadataUpgradeableTransactorSession struct {
	Contract     *IERC721MetadataUpgradeableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                     // Transaction auth options to use throughout this session
}

// IERC721MetadataUpgradeableRaw is an auto generated low-level Go binding around an Ethereum contract.
type IERC721MetadataUpgradeableRaw struct {
	Contract *IERC721MetadataUpgradeable // Generic contract binding to access the raw methods on
}

// IERC721MetadataUpgradeableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC721MetadataUpgradeableCallerRaw struct {
	Contract *IERC721MetadataUpgradeableCaller // Generic read-only contract binding to access the raw methods on
}

// IERC721MetadataUpgradeableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC721MetadataUpgradeableTransactorRaw struct {
	Contract *IERC721MetadataUpgradeableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC721MetadataUpgradeable creates a new instance of IERC721MetadataUpgradeable, bound to a specific deployed contract.
func NewIERC721MetadataUpgradeable(address common.Address, backend bind.ContractBackend) (*IERC721MetadataUpgradeable, error) {
	contract, err := bindIERC721MetadataUpgradeable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC721MetadataUpgradeable{IERC721MetadataUpgradeableCaller: IERC721MetadataUpgradeableCaller{contract: contract}, IERC721MetadataUpgradeableTransactor: IERC721MetadataUpgradeableTransactor{contract: contract}, IERC721MetadataUpgradeableFilterer: IERC721MetadataUpgradeableFilterer{contract: contract}}, nil
}

// NewIERC721MetadataUpgradeableCaller creates a new read-only instance of IERC721MetadataUpgradeable, bound to a specific deployed contract.
func NewIERC721MetadataUpgradeableCaller(address common.Address, caller bind.ContractCaller) (*IERC721MetadataUpgradeableCaller, error) {
	contract, err := bindIERC721MetadataUpgradeable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC721MetadataUpgradeableCaller{contract: contract}, nil
}

// NewIERC721MetadataUpgradeableTransactor creates a new write-only instance of IERC721MetadataUpgradeable, bound to a specific deployed contract.
func NewIERC721MetadataUpgradeableTransactor(address common.Address, transactor bind.ContractTransactor) (*IERC721MetadataUpgradeableTransactor, error) {
	contract, err := bindIERC721MetadataUpgradeable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC721MetadataUpgradeableTransactor{contract: contract}, nil
}

// NewIERC721MetadataUpgradeableFilterer creates a new log filterer instance of IERC721MetadataUpgradeable, bound to a specific deployed contract.
func NewIERC721MetadataUpgradeableFilterer(address common.Address, filterer bind.ContractFilterer) (*IERC721MetadataUpgradeableFilterer, error) {
	contract, err := bindIERC721MetadataUpgradeable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC721MetadataUpgradeableFilterer{contract: contract}, nil
}

// bindIERC721MetadataUpgradeable binds a generic wrapper to an already deployed contract.
func bindIERC721MetadataUpgradeable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IERC721MetadataUpgradeableABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC721MetadataUpgradeable.Contract.IERC721MetadataUpgradeableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC721MetadataUpgradeable.Contract.IERC721MetadataUpgradeableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC721MetadataUpgradeable.Contract.IERC721MetadataUpgradeableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC721MetadataUpgradeable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC721MetadataUpgradeable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC721MetadataUpgradeable.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256 balance)
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC721MetadataUpgradeable.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256 balance)
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _IERC721MetadataUpgradeable.Contract.BalanceOf(&_IERC721MetadataUpgradeable.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256 balance)
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _IERC721MetadataUpgradeable.Contract.BalanceOf(&_IERC721MetadataUpgradeable.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address operator)
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _IERC721MetadataUpgradeable.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address operator)
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _IERC721MetadataUpgradeable.Contract.GetApproved(&_IERC721MetadataUpgradeable.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address operator)
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _IERC721MetadataUpgradeable.Contract.GetApproved(&_IERC721MetadataUpgradeable.CallOpts, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _IERC721MetadataUpgradeable.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _IERC721MetadataUpgradeable.Contract.IsApprovedForAll(&_IERC721MetadataUpgradeable.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _IERC721MetadataUpgradeable.Contract.IsApprovedForAll(&_IERC721MetadataUpgradeable.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _IERC721MetadataUpgradeable.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableSession) Name() (string, error) {
	return _IERC721MetadataUpgradeable.Contract.Name(&_IERC721MetadataUpgradeable.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableCallerSession) Name() (string, error) {
	return _IERC721MetadataUpgradeable.Contract.Name(&_IERC721MetadataUpgradeable.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address owner)
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _IERC721MetadataUpgradeable.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address owner)
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _IERC721MetadataUpgradeable.Contract.OwnerOf(&_IERC721MetadataUpgradeable.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address owner)
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _IERC721MetadataUpgradeable.Contract.OwnerOf(&_IERC721MetadataUpgradeable.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _IERC721MetadataUpgradeable.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _IERC721MetadataUpgradeable.Contract.SupportsInterface(&_IERC721MetadataUpgradeable.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _IERC721MetadataUpgradeable.Contract.SupportsInterface(&_IERC721MetadataUpgradeable.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _IERC721MetadataUpgradeable.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableSession) Symbol() (string, error) {
	return _IERC721MetadataUpgradeable.Contract.Symbol(&_IERC721MetadataUpgradeable.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableCallerSession) Symbol() (string, error) {
	return _IERC721MetadataUpgradeable.Contract.Symbol(&_IERC721MetadataUpgradeable.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _IERC721MetadataUpgradeable.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableSession) TokenURI(tokenId *big.Int) (string, error) {
	return _IERC721MetadataUpgradeable.Contract.TokenURI(&_IERC721MetadataUpgradeable.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _IERC721MetadataUpgradeable.Contract.TokenURI(&_IERC721MetadataUpgradeable.CallOpts, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721MetadataUpgradeable.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721MetadataUpgradeable.Contract.Approve(&_IERC721MetadataUpgradeable.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721MetadataUpgradeable.Contract.Approve(&_IERC721MetadataUpgradeable.TransactOpts, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721MetadataUpgradeable.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721MetadataUpgradeable.Contract.SafeTransferFrom(&_IERC721MetadataUpgradeable.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721MetadataUpgradeable.Contract.SafeTransferFrom(&_IERC721MetadataUpgradeable.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC721MetadataUpgradeable.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC721MetadataUpgradeable.Contract.SafeTransferFrom0(&_IERC721MetadataUpgradeable.TransactOpts, from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC721MetadataUpgradeable.Contract.SafeTransferFrom0(&_IERC721MetadataUpgradeable.TransactOpts, from, to, tokenId, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool _approved) returns()
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, _approved bool) (*types.Transaction, error) {
	return _IERC721MetadataUpgradeable.contract.Transact(opts, "setApprovalForAll", operator, _approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool _approved) returns()
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableSession) SetApprovalForAll(operator common.Address, _approved bool) (*types.Transaction, error) {
	return _IERC721MetadataUpgradeable.Contract.SetApprovalForAll(&_IERC721MetadataUpgradeable.TransactOpts, operator, _approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool _approved) returns()
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableTransactorSession) SetApprovalForAll(operator common.Address, _approved bool) (*types.Transaction, error) {
	return _IERC721MetadataUpgradeable.Contract.SetApprovalForAll(&_IERC721MetadataUpgradeable.TransactOpts, operator, _approved)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721MetadataUpgradeable.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721MetadataUpgradeable.Contract.TransferFrom(&_IERC721MetadataUpgradeable.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721MetadataUpgradeable.Contract.TransferFrom(&_IERC721MetadataUpgradeable.TransactOpts, from, to, tokenId)
}

// IERC721MetadataUpgradeableApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the IERC721MetadataUpgradeable contract.
type IERC721MetadataUpgradeableApprovalIterator struct {
	Event *IERC721MetadataUpgradeableApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC721MetadataUpgradeableApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC721MetadataUpgradeableApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC721MetadataUpgradeableApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC721MetadataUpgradeableApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC721MetadataUpgradeableApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC721MetadataUpgradeableApproval represents a Approval event raised by the IERC721MetadataUpgradeable contract.
type IERC721MetadataUpgradeableApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*IERC721MetadataUpgradeableApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _IERC721MetadataUpgradeable.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &IERC721MetadataUpgradeableApprovalIterator{contract: _IERC721MetadataUpgradeable.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *IERC721MetadataUpgradeableApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _IERC721MetadataUpgradeable.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC721MetadataUpgradeableApproval)
				if err := _IERC721MetadataUpgradeable.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableFilterer) ParseApproval(log types.Log) (*IERC721MetadataUpgradeableApproval, error) {
	event := new(IERC721MetadataUpgradeableApproval)
	if err := _IERC721MetadataUpgradeable.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC721MetadataUpgradeableApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the IERC721MetadataUpgradeable contract.
type IERC721MetadataUpgradeableApprovalForAllIterator struct {
	Event *IERC721MetadataUpgradeableApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC721MetadataUpgradeableApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC721MetadataUpgradeableApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC721MetadataUpgradeableApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC721MetadataUpgradeableApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC721MetadataUpgradeableApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC721MetadataUpgradeableApprovalForAll represents a ApprovalForAll event raised by the IERC721MetadataUpgradeable contract.
type IERC721MetadataUpgradeableApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*IERC721MetadataUpgradeableApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _IERC721MetadataUpgradeable.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &IERC721MetadataUpgradeableApprovalForAllIterator{contract: _IERC721MetadataUpgradeable.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *IERC721MetadataUpgradeableApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _IERC721MetadataUpgradeable.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC721MetadataUpgradeableApprovalForAll)
				if err := _IERC721MetadataUpgradeable.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableFilterer) ParseApprovalForAll(log types.Log) (*IERC721MetadataUpgradeableApprovalForAll, error) {
	event := new(IERC721MetadataUpgradeableApprovalForAll)
	if err := _IERC721MetadataUpgradeable.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC721MetadataUpgradeableTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the IERC721MetadataUpgradeable contract.
type IERC721MetadataUpgradeableTransferIterator struct {
	Event *IERC721MetadataUpgradeableTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC721MetadataUpgradeableTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC721MetadataUpgradeableTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC721MetadataUpgradeableTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC721MetadataUpgradeableTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC721MetadataUpgradeableTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC721MetadataUpgradeableTransfer represents a Transfer event raised by the IERC721MetadataUpgradeable contract.
type IERC721MetadataUpgradeableTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*IERC721MetadataUpgradeableTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _IERC721MetadataUpgradeable.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &IERC721MetadataUpgradeableTransferIterator{contract: _IERC721MetadataUpgradeable.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *IERC721MetadataUpgradeableTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _IERC721MetadataUpgradeable.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC721MetadataUpgradeableTransfer)
				if err := _IERC721MetadataUpgradeable.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_IERC721MetadataUpgradeable *IERC721MetadataUpgradeableFilterer) ParseTransfer(log types.Log) (*IERC721MetadataUpgradeableTransfer, error) {
	event := new(IERC721MetadataUpgradeableTransfer)
	if err := _IERC721MetadataUpgradeable.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC721ReceiverMetaData contains all meta data concerning the IERC721Receiver contract.
var IERC721ReceiverMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IERC721ReceiverABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC721ReceiverMetaData.ABI instead.
var IERC721ReceiverABI = IERC721ReceiverMetaData.ABI

// IERC721Receiver is an auto generated Go binding around an Ethereum contract.
type IERC721Receiver struct {
	IERC721ReceiverCaller     // Read-only binding to the contract
	IERC721ReceiverTransactor // Write-only binding to the contract
	IERC721ReceiverFilterer   // Log filterer for contract events
}

// IERC721ReceiverCaller is an auto generated read-only Go binding around an Ethereum contract.
type IERC721ReceiverCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721ReceiverTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC721ReceiverTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721ReceiverFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC721ReceiverFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721ReceiverSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC721ReceiverSession struct {
	Contract     *IERC721Receiver  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC721ReceiverCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC721ReceiverCallerSession struct {
	Contract *IERC721ReceiverCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// IERC721ReceiverTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC721ReceiverTransactorSession struct {
	Contract     *IERC721ReceiverTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// IERC721ReceiverRaw is an auto generated low-level Go binding around an Ethereum contract.
type IERC721ReceiverRaw struct {
	Contract *IERC721Receiver // Generic contract binding to access the raw methods on
}

// IERC721ReceiverCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC721ReceiverCallerRaw struct {
	Contract *IERC721ReceiverCaller // Generic read-only contract binding to access the raw methods on
}

// IERC721ReceiverTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC721ReceiverTransactorRaw struct {
	Contract *IERC721ReceiverTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC721Receiver creates a new instance of IERC721Receiver, bound to a specific deployed contract.
func NewIERC721Receiver(address common.Address, backend bind.ContractBackend) (*IERC721Receiver, error) {
	contract, err := bindIERC721Receiver(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC721Receiver{IERC721ReceiverCaller: IERC721ReceiverCaller{contract: contract}, IERC721ReceiverTransactor: IERC721ReceiverTransactor{contract: contract}, IERC721ReceiverFilterer: IERC721ReceiverFilterer{contract: contract}}, nil
}

// NewIERC721ReceiverCaller creates a new read-only instance of IERC721Receiver, bound to a specific deployed contract.
func NewIERC721ReceiverCaller(address common.Address, caller bind.ContractCaller) (*IERC721ReceiverCaller, error) {
	contract, err := bindIERC721Receiver(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC721ReceiverCaller{contract: contract}, nil
}

// NewIERC721ReceiverTransactor creates a new write-only instance of IERC721Receiver, bound to a specific deployed contract.
func NewIERC721ReceiverTransactor(address common.Address, transactor bind.ContractTransactor) (*IERC721ReceiverTransactor, error) {
	contract, err := bindIERC721Receiver(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC721ReceiverTransactor{contract: contract}, nil
}

// NewIERC721ReceiverFilterer creates a new log filterer instance of IERC721Receiver, bound to a specific deployed contract.
func NewIERC721ReceiverFilterer(address common.Address, filterer bind.ContractFilterer) (*IERC721ReceiverFilterer, error) {
	contract, err := bindIERC721Receiver(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC721ReceiverFilterer{contract: contract}, nil
}

// bindIERC721Receiver binds a generic wrapper to an already deployed contract.
func bindIERC721Receiver(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IERC721ReceiverABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC721Receiver *IERC721ReceiverRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC721Receiver.Contract.IERC721ReceiverCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC721Receiver *IERC721ReceiverRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC721Receiver.Contract.IERC721ReceiverTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC721Receiver *IERC721ReceiverRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC721Receiver.Contract.IERC721ReceiverTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC721Receiver *IERC721ReceiverCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC721Receiver.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC721Receiver *IERC721ReceiverTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC721Receiver.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC721Receiver *IERC721ReceiverTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC721Receiver.Contract.contract.Transact(opts, method, params...)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address operator, address from, uint256 tokenId, bytes data) returns(bytes4)
func (_IERC721Receiver *IERC721ReceiverTransactor) OnERC721Received(opts *bind.TransactOpts, operator common.Address, from common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC721Receiver.contract.Transact(opts, "onERC721Received", operator, from, tokenId, data)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address operator, address from, uint256 tokenId, bytes data) returns(bytes4)
func (_IERC721Receiver *IERC721ReceiverSession) OnERC721Received(operator common.Address, from common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC721Receiver.Contract.OnERC721Received(&_IERC721Receiver.TransactOpts, operator, from, tokenId, data)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address operator, address from, uint256 tokenId, bytes data) returns(bytes4)
func (_IERC721Receiver *IERC721ReceiverTransactorSession) OnERC721Received(operator common.Address, from common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC721Receiver.Contract.OnERC721Received(&_IERC721Receiver.TransactOpts, operator, from, tokenId, data)
}

// IERC721ReceiverUpgradeableMetaData contains all meta data concerning the IERC721ReceiverUpgradeable contract.
var IERC721ReceiverUpgradeableMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IERC721ReceiverUpgradeableABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC721ReceiverUpgradeableMetaData.ABI instead.
var IERC721ReceiverUpgradeableABI = IERC721ReceiverUpgradeableMetaData.ABI

// IERC721ReceiverUpgradeable is an auto generated Go binding around an Ethereum contract.
type IERC721ReceiverUpgradeable struct {
	IERC721ReceiverUpgradeableCaller     // Read-only binding to the contract
	IERC721ReceiverUpgradeableTransactor // Write-only binding to the contract
	IERC721ReceiverUpgradeableFilterer   // Log filterer for contract events
}

// IERC721ReceiverUpgradeableCaller is an auto generated read-only Go binding around an Ethereum contract.
type IERC721ReceiverUpgradeableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721ReceiverUpgradeableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC721ReceiverUpgradeableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721ReceiverUpgradeableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC721ReceiverUpgradeableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721ReceiverUpgradeableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC721ReceiverUpgradeableSession struct {
	Contract     *IERC721ReceiverUpgradeable // Generic contract binding to set the session for
	CallOpts     bind.CallOpts               // Call options to use throughout this session
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// IERC721ReceiverUpgradeableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC721ReceiverUpgradeableCallerSession struct {
	Contract *IERC721ReceiverUpgradeableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                     // Call options to use throughout this session
}

// IERC721ReceiverUpgradeableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC721ReceiverUpgradeableTransactorSession struct {
	Contract     *IERC721ReceiverUpgradeableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                     // Transaction auth options to use throughout this session
}

// IERC721ReceiverUpgradeableRaw is an auto generated low-level Go binding around an Ethereum contract.
type IERC721ReceiverUpgradeableRaw struct {
	Contract *IERC721ReceiverUpgradeable // Generic contract binding to access the raw methods on
}

// IERC721ReceiverUpgradeableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC721ReceiverUpgradeableCallerRaw struct {
	Contract *IERC721ReceiverUpgradeableCaller // Generic read-only contract binding to access the raw methods on
}

// IERC721ReceiverUpgradeableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC721ReceiverUpgradeableTransactorRaw struct {
	Contract *IERC721ReceiverUpgradeableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC721ReceiverUpgradeable creates a new instance of IERC721ReceiverUpgradeable, bound to a specific deployed contract.
func NewIERC721ReceiverUpgradeable(address common.Address, backend bind.ContractBackend) (*IERC721ReceiverUpgradeable, error) {
	contract, err := bindIERC721ReceiverUpgradeable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC721ReceiverUpgradeable{IERC721ReceiverUpgradeableCaller: IERC721ReceiverUpgradeableCaller{contract: contract}, IERC721ReceiverUpgradeableTransactor: IERC721ReceiverUpgradeableTransactor{contract: contract}, IERC721ReceiverUpgradeableFilterer: IERC721ReceiverUpgradeableFilterer{contract: contract}}, nil
}

// NewIERC721ReceiverUpgradeableCaller creates a new read-only instance of IERC721ReceiverUpgradeable, bound to a specific deployed contract.
func NewIERC721ReceiverUpgradeableCaller(address common.Address, caller bind.ContractCaller) (*IERC721ReceiverUpgradeableCaller, error) {
	contract, err := bindIERC721ReceiverUpgradeable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC721ReceiverUpgradeableCaller{contract: contract}, nil
}

// NewIERC721ReceiverUpgradeableTransactor creates a new write-only instance of IERC721ReceiverUpgradeable, bound to a specific deployed contract.
func NewIERC721ReceiverUpgradeableTransactor(address common.Address, transactor bind.ContractTransactor) (*IERC721ReceiverUpgradeableTransactor, error) {
	contract, err := bindIERC721ReceiverUpgradeable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC721ReceiverUpgradeableTransactor{contract: contract}, nil
}

// NewIERC721ReceiverUpgradeableFilterer creates a new log filterer instance of IERC721ReceiverUpgradeable, bound to a specific deployed contract.
func NewIERC721ReceiverUpgradeableFilterer(address common.Address, filterer bind.ContractFilterer) (*IERC721ReceiverUpgradeableFilterer, error) {
	contract, err := bindIERC721ReceiverUpgradeable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC721ReceiverUpgradeableFilterer{contract: contract}, nil
}

// bindIERC721ReceiverUpgradeable binds a generic wrapper to an already deployed contract.
func bindIERC721ReceiverUpgradeable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IERC721ReceiverUpgradeableABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC721ReceiverUpgradeable *IERC721ReceiverUpgradeableRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC721ReceiverUpgradeable.Contract.IERC721ReceiverUpgradeableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC721ReceiverUpgradeable *IERC721ReceiverUpgradeableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC721ReceiverUpgradeable.Contract.IERC721ReceiverUpgradeableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC721ReceiverUpgradeable *IERC721ReceiverUpgradeableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC721ReceiverUpgradeable.Contract.IERC721ReceiverUpgradeableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC721ReceiverUpgradeable *IERC721ReceiverUpgradeableCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC721ReceiverUpgradeable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC721ReceiverUpgradeable *IERC721ReceiverUpgradeableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC721ReceiverUpgradeable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC721ReceiverUpgradeable *IERC721ReceiverUpgradeableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC721ReceiverUpgradeable.Contract.contract.Transact(opts, method, params...)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address operator, address from, uint256 tokenId, bytes data) returns(bytes4)
func (_IERC721ReceiverUpgradeable *IERC721ReceiverUpgradeableTransactor) OnERC721Received(opts *bind.TransactOpts, operator common.Address, from common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC721ReceiverUpgradeable.contract.Transact(opts, "onERC721Received", operator, from, tokenId, data)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address operator, address from, uint256 tokenId, bytes data) returns(bytes4)
func (_IERC721ReceiverUpgradeable *IERC721ReceiverUpgradeableSession) OnERC721Received(operator common.Address, from common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC721ReceiverUpgradeable.Contract.OnERC721Received(&_IERC721ReceiverUpgradeable.TransactOpts, operator, from, tokenId, data)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address operator, address from, uint256 tokenId, bytes data) returns(bytes4)
func (_IERC721ReceiverUpgradeable *IERC721ReceiverUpgradeableTransactorSession) OnERC721Received(operator common.Address, from common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC721ReceiverUpgradeable.Contract.OnERC721Received(&_IERC721ReceiverUpgradeable.TransactOpts, operator, from, tokenId, data)
}

// IERC721TransferableMetaData contains all meta data concerning the IERC721Transferable contract.
var IERC721TransferableMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IERC721TransferableABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC721TransferableMetaData.ABI instead.
var IERC721TransferableABI = IERC721TransferableMetaData.ABI

// IERC721Transferable is an auto generated Go binding around an Ethereum contract.
type IERC721Transferable struct {
	IERC721TransferableCaller     // Read-only binding to the contract
	IERC721TransferableTransactor // Write-only binding to the contract
	IERC721TransferableFilterer   // Log filterer for contract events
}

// IERC721TransferableCaller is an auto generated read-only Go binding around an Ethereum contract.
type IERC721TransferableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721TransferableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC721TransferableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721TransferableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC721TransferableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721TransferableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC721TransferableSession struct {
	Contract     *IERC721Transferable // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// IERC721TransferableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC721TransferableCallerSession struct {
	Contract *IERC721TransferableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// IERC721TransferableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC721TransferableTransactorSession struct {
	Contract     *IERC721TransferableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// IERC721TransferableRaw is an auto generated low-level Go binding around an Ethereum contract.
type IERC721TransferableRaw struct {
	Contract *IERC721Transferable // Generic contract binding to access the raw methods on
}

// IERC721TransferableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC721TransferableCallerRaw struct {
	Contract *IERC721TransferableCaller // Generic read-only contract binding to access the raw methods on
}

// IERC721TransferableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC721TransferableTransactorRaw struct {
	Contract *IERC721TransferableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC721Transferable creates a new instance of IERC721Transferable, bound to a specific deployed contract.
func NewIERC721Transferable(address common.Address, backend bind.ContractBackend) (*IERC721Transferable, error) {
	contract, err := bindIERC721Transferable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC721Transferable{IERC721TransferableCaller: IERC721TransferableCaller{contract: contract}, IERC721TransferableTransactor: IERC721TransferableTransactor{contract: contract}, IERC721TransferableFilterer: IERC721TransferableFilterer{contract: contract}}, nil
}

// NewIERC721TransferableCaller creates a new read-only instance of IERC721Transferable, bound to a specific deployed contract.
func NewIERC721TransferableCaller(address common.Address, caller bind.ContractCaller) (*IERC721TransferableCaller, error) {
	contract, err := bindIERC721Transferable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC721TransferableCaller{contract: contract}, nil
}

// NewIERC721TransferableTransactor creates a new write-only instance of IERC721Transferable, bound to a specific deployed contract.
func NewIERC721TransferableTransactor(address common.Address, transactor bind.ContractTransactor) (*IERC721TransferableTransactor, error) {
	contract, err := bindIERC721Transferable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC721TransferableTransactor{contract: contract}, nil
}

// NewIERC721TransferableFilterer creates a new log filterer instance of IERC721Transferable, bound to a specific deployed contract.
func NewIERC721TransferableFilterer(address common.Address, filterer bind.ContractFilterer) (*IERC721TransferableFilterer, error) {
	contract, err := bindIERC721Transferable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC721TransferableFilterer{contract: contract}, nil
}

// bindIERC721Transferable binds a generic wrapper to an already deployed contract.
func bindIERC721Transferable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IERC721TransferableABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC721Transferable *IERC721TransferableRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC721Transferable.Contract.IERC721TransferableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC721Transferable *IERC721TransferableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC721Transferable.Contract.IERC721TransferableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC721Transferable *IERC721TransferableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC721Transferable.Contract.IERC721TransferableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC721Transferable *IERC721TransferableCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC721Transferable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC721Transferable *IERC721TransferableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC721Transferable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC721Transferable *IERC721TransferableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC721Transferable.Contract.contract.Transact(opts, method, params...)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721Transferable *IERC721TransferableTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Transferable.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721Transferable *IERC721TransferableSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Transferable.Contract.SafeTransferFrom(&_IERC721Transferable.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721Transferable *IERC721TransferableTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Transferable.Contract.SafeTransferFrom(&_IERC721Transferable.TransactOpts, from, to, tokenId)
}

// IERC721UpgradeableMetaData contains all meta data concerning the IERC721Upgradeable contract.
var IERC721UpgradeableMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IERC721UpgradeableABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC721UpgradeableMetaData.ABI instead.
var IERC721UpgradeableABI = IERC721UpgradeableMetaData.ABI

// IERC721Upgradeable is an auto generated Go binding around an Ethereum contract.
type IERC721Upgradeable struct {
	IERC721UpgradeableCaller     // Read-only binding to the contract
	IERC721UpgradeableTransactor // Write-only binding to the contract
	IERC721UpgradeableFilterer   // Log filterer for contract events
}

// IERC721UpgradeableCaller is an auto generated read-only Go binding around an Ethereum contract.
type IERC721UpgradeableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721UpgradeableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC721UpgradeableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721UpgradeableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC721UpgradeableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721UpgradeableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC721UpgradeableSession struct {
	Contract     *IERC721Upgradeable // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// IERC721UpgradeableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC721UpgradeableCallerSession struct {
	Contract *IERC721UpgradeableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// IERC721UpgradeableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC721UpgradeableTransactorSession struct {
	Contract     *IERC721UpgradeableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// IERC721UpgradeableRaw is an auto generated low-level Go binding around an Ethereum contract.
type IERC721UpgradeableRaw struct {
	Contract *IERC721Upgradeable // Generic contract binding to access the raw methods on
}

// IERC721UpgradeableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC721UpgradeableCallerRaw struct {
	Contract *IERC721UpgradeableCaller // Generic read-only contract binding to access the raw methods on
}

// IERC721UpgradeableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC721UpgradeableTransactorRaw struct {
	Contract *IERC721UpgradeableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC721Upgradeable creates a new instance of IERC721Upgradeable, bound to a specific deployed contract.
func NewIERC721Upgradeable(address common.Address, backend bind.ContractBackend) (*IERC721Upgradeable, error) {
	contract, err := bindIERC721Upgradeable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC721Upgradeable{IERC721UpgradeableCaller: IERC721UpgradeableCaller{contract: contract}, IERC721UpgradeableTransactor: IERC721UpgradeableTransactor{contract: contract}, IERC721UpgradeableFilterer: IERC721UpgradeableFilterer{contract: contract}}, nil
}

// NewIERC721UpgradeableCaller creates a new read-only instance of IERC721Upgradeable, bound to a specific deployed contract.
func NewIERC721UpgradeableCaller(address common.Address, caller bind.ContractCaller) (*IERC721UpgradeableCaller, error) {
	contract, err := bindIERC721Upgradeable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC721UpgradeableCaller{contract: contract}, nil
}

// NewIERC721UpgradeableTransactor creates a new write-only instance of IERC721Upgradeable, bound to a specific deployed contract.
func NewIERC721UpgradeableTransactor(address common.Address, transactor bind.ContractTransactor) (*IERC721UpgradeableTransactor, error) {
	contract, err := bindIERC721Upgradeable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC721UpgradeableTransactor{contract: contract}, nil
}

// NewIERC721UpgradeableFilterer creates a new log filterer instance of IERC721Upgradeable, bound to a specific deployed contract.
func NewIERC721UpgradeableFilterer(address common.Address, filterer bind.ContractFilterer) (*IERC721UpgradeableFilterer, error) {
	contract, err := bindIERC721Upgradeable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC721UpgradeableFilterer{contract: contract}, nil
}

// bindIERC721Upgradeable binds a generic wrapper to an already deployed contract.
func bindIERC721Upgradeable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IERC721UpgradeableABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC721Upgradeable *IERC721UpgradeableRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC721Upgradeable.Contract.IERC721UpgradeableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC721Upgradeable *IERC721UpgradeableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC721Upgradeable.Contract.IERC721UpgradeableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC721Upgradeable *IERC721UpgradeableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC721Upgradeable.Contract.IERC721UpgradeableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC721Upgradeable *IERC721UpgradeableCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC721Upgradeable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC721Upgradeable *IERC721UpgradeableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC721Upgradeable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC721Upgradeable *IERC721UpgradeableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC721Upgradeable.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256 balance)
func (_IERC721Upgradeable *IERC721UpgradeableCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC721Upgradeable.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256 balance)
func (_IERC721Upgradeable *IERC721UpgradeableSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _IERC721Upgradeable.Contract.BalanceOf(&_IERC721Upgradeable.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256 balance)
func (_IERC721Upgradeable *IERC721UpgradeableCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _IERC721Upgradeable.Contract.BalanceOf(&_IERC721Upgradeable.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address operator)
func (_IERC721Upgradeable *IERC721UpgradeableCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _IERC721Upgradeable.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address operator)
func (_IERC721Upgradeable *IERC721UpgradeableSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _IERC721Upgradeable.Contract.GetApproved(&_IERC721Upgradeable.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address operator)
func (_IERC721Upgradeable *IERC721UpgradeableCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _IERC721Upgradeable.Contract.GetApproved(&_IERC721Upgradeable.CallOpts, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_IERC721Upgradeable *IERC721UpgradeableCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _IERC721Upgradeable.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_IERC721Upgradeable *IERC721UpgradeableSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _IERC721Upgradeable.Contract.IsApprovedForAll(&_IERC721Upgradeable.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_IERC721Upgradeable *IERC721UpgradeableCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _IERC721Upgradeable.Contract.IsApprovedForAll(&_IERC721Upgradeable.CallOpts, owner, operator)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address owner)
func (_IERC721Upgradeable *IERC721UpgradeableCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _IERC721Upgradeable.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address owner)
func (_IERC721Upgradeable *IERC721UpgradeableSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _IERC721Upgradeable.Contract.OwnerOf(&_IERC721Upgradeable.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address owner)
func (_IERC721Upgradeable *IERC721UpgradeableCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _IERC721Upgradeable.Contract.OwnerOf(&_IERC721Upgradeable.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_IERC721Upgradeable *IERC721UpgradeableCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _IERC721Upgradeable.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_IERC721Upgradeable *IERC721UpgradeableSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _IERC721Upgradeable.Contract.SupportsInterface(&_IERC721Upgradeable.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_IERC721Upgradeable *IERC721UpgradeableCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _IERC721Upgradeable.Contract.SupportsInterface(&_IERC721Upgradeable.CallOpts, interfaceId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_IERC721Upgradeable *IERC721UpgradeableTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Upgradeable.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_IERC721Upgradeable *IERC721UpgradeableSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Upgradeable.Contract.Approve(&_IERC721Upgradeable.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_IERC721Upgradeable *IERC721UpgradeableTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Upgradeable.Contract.Approve(&_IERC721Upgradeable.TransactOpts, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721Upgradeable *IERC721UpgradeableTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Upgradeable.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721Upgradeable *IERC721UpgradeableSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Upgradeable.Contract.SafeTransferFrom(&_IERC721Upgradeable.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721Upgradeable *IERC721UpgradeableTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Upgradeable.Contract.SafeTransferFrom(&_IERC721Upgradeable.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_IERC721Upgradeable *IERC721UpgradeableTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC721Upgradeable.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_IERC721Upgradeable *IERC721UpgradeableSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC721Upgradeable.Contract.SafeTransferFrom0(&_IERC721Upgradeable.TransactOpts, from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_IERC721Upgradeable *IERC721UpgradeableTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC721Upgradeable.Contract.SafeTransferFrom0(&_IERC721Upgradeable.TransactOpts, from, to, tokenId, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool _approved) returns()
func (_IERC721Upgradeable *IERC721UpgradeableTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, _approved bool) (*types.Transaction, error) {
	return _IERC721Upgradeable.contract.Transact(opts, "setApprovalForAll", operator, _approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool _approved) returns()
func (_IERC721Upgradeable *IERC721UpgradeableSession) SetApprovalForAll(operator common.Address, _approved bool) (*types.Transaction, error) {
	return _IERC721Upgradeable.Contract.SetApprovalForAll(&_IERC721Upgradeable.TransactOpts, operator, _approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool _approved) returns()
func (_IERC721Upgradeable *IERC721UpgradeableTransactorSession) SetApprovalForAll(operator common.Address, _approved bool) (*types.Transaction, error) {
	return _IERC721Upgradeable.Contract.SetApprovalForAll(&_IERC721Upgradeable.TransactOpts, operator, _approved)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721Upgradeable *IERC721UpgradeableTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Upgradeable.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721Upgradeable *IERC721UpgradeableSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Upgradeable.Contract.TransferFrom(&_IERC721Upgradeable.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721Upgradeable *IERC721UpgradeableTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Upgradeable.Contract.TransferFrom(&_IERC721Upgradeable.TransactOpts, from, to, tokenId)
}

// IERC721UpgradeableApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the IERC721Upgradeable contract.
type IERC721UpgradeableApprovalIterator struct {
	Event *IERC721UpgradeableApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC721UpgradeableApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC721UpgradeableApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC721UpgradeableApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC721UpgradeableApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC721UpgradeableApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC721UpgradeableApproval represents a Approval event raised by the IERC721Upgradeable contract.
type IERC721UpgradeableApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_IERC721Upgradeable *IERC721UpgradeableFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*IERC721UpgradeableApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _IERC721Upgradeable.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &IERC721UpgradeableApprovalIterator{contract: _IERC721Upgradeable.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_IERC721Upgradeable *IERC721UpgradeableFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *IERC721UpgradeableApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _IERC721Upgradeable.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC721UpgradeableApproval)
				if err := _IERC721Upgradeable.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_IERC721Upgradeable *IERC721UpgradeableFilterer) ParseApproval(log types.Log) (*IERC721UpgradeableApproval, error) {
	event := new(IERC721UpgradeableApproval)
	if err := _IERC721Upgradeable.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC721UpgradeableApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the IERC721Upgradeable contract.
type IERC721UpgradeableApprovalForAllIterator struct {
	Event *IERC721UpgradeableApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC721UpgradeableApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC721UpgradeableApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC721UpgradeableApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC721UpgradeableApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC721UpgradeableApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC721UpgradeableApprovalForAll represents a ApprovalForAll event raised by the IERC721Upgradeable contract.
type IERC721UpgradeableApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_IERC721Upgradeable *IERC721UpgradeableFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*IERC721UpgradeableApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _IERC721Upgradeable.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &IERC721UpgradeableApprovalForAllIterator{contract: _IERC721Upgradeable.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_IERC721Upgradeable *IERC721UpgradeableFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *IERC721UpgradeableApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _IERC721Upgradeable.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC721UpgradeableApprovalForAll)
				if err := _IERC721Upgradeable.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_IERC721Upgradeable *IERC721UpgradeableFilterer) ParseApprovalForAll(log types.Log) (*IERC721UpgradeableApprovalForAll, error) {
	event := new(IERC721UpgradeableApprovalForAll)
	if err := _IERC721Upgradeable.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC721UpgradeableTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the IERC721Upgradeable contract.
type IERC721UpgradeableTransferIterator struct {
	Event *IERC721UpgradeableTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC721UpgradeableTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC721UpgradeableTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC721UpgradeableTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC721UpgradeableTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC721UpgradeableTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC721UpgradeableTransfer represents a Transfer event raised by the IERC721Upgradeable contract.
type IERC721UpgradeableTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_IERC721Upgradeable *IERC721UpgradeableFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*IERC721UpgradeableTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _IERC721Upgradeable.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &IERC721UpgradeableTransferIterator{contract: _IERC721Upgradeable.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_IERC721Upgradeable *IERC721UpgradeableFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *IERC721UpgradeableTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _IERC721Upgradeable.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC721UpgradeableTransfer)
				if err := _IERC721Upgradeable.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_IERC721Upgradeable *IERC721UpgradeableFilterer) ParseTransfer(log types.Log) (*IERC721UpgradeableTransfer, error) {
	event := new(IERC721UpgradeableTransfer)
	if err := _IERC721Upgradeable.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IETHDKGMetaData contains all meta data concerning the IETHDKG contract.
var IETHDKGMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dishonestAddresses\",\"type\":\"address[]\"}],\"name\":\"accuseParticipantDidNotDistributeShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dishonestAddresses\",\"type\":\"address[]\"}],\"name\":\"accuseParticipantDidNotSubmitGPKJ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dishonestAddresses\",\"type\":\"address[]\"}],\"name\":\"accuseParticipantDidNotSubmitKeyShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dishonestAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"encryptedShares\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"},{\"internalType\":\"uint256[2]\",\"name\":\"sharedKey\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"sharedKeyCorrectnessProof\",\"type\":\"uint256[2]\"}],\"name\":\"accuseParticipantDistributedBadShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dishonestAddresses\",\"type\":\"address[]\"}],\"name\":\"accuseParticipantNotRegistered\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"encryptedSharesHash\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[2][][]\",\"name\":\"commitments\",\"type\":\"uint256[2][][]\"},{\"internalType\":\"address\",\"name\":\"dishonestAddress\",\"type\":\"address\"}],\"name\":\"accuseParticipantSubmittedBadGPKJ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"complete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"encryptedShares\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"}],\"name\":\"distributeShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBadParticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfirmationLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getETHDKGPhase\",\"outputs\":[{\"internalType\":\"enumPhase\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMasterPublicKey\",\"outputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"\",\"type\":\"uint256[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinValidators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumParticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"getParticipantInternalState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"publicKey\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"enumPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"distributedSharesHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[2]\",\"name\":\"commitmentsFirstCoefficient\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"keyShares\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"gpkj\",\"type\":\"uint256[4]\"}],\"internalType\":\"structParticipant\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPhaseLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPhaseStartBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeETHDKG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isETHDKGRunning\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMasterPublicKeySet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"publicKey\",\"type\":\"uint256[2]\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"confirmationLength_\",\"type\":\"uint16\"}],\"name\":\"setConfirmationLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"madnetHeight\",\"type\":\"uint256\"}],\"name\":\"setCustomMadnetHeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"phaseLength_\",\"type\":\"uint16\"}],\"name\":\"setPhaseLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"gpkj\",\"type\":\"uint256[4]\"}],\"name\":\"submitGPKJ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1CorrectnessProof\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"keyShareG2\",\"type\":\"uint256[4]\"}],\"name\":\"submitKeyShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"masterPublicKey_\",\"type\":\"uint256[4]\"}],\"name\":\"submitMasterPublicKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"tryGetParticipantIndex\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// IETHDKGABI is the input ABI used to generate the binding from.
// Deprecated: Use IETHDKGMetaData.ABI instead.
var IETHDKGABI = IETHDKGMetaData.ABI

// IETHDKG is an auto generated Go binding around an Ethereum contract.
type IETHDKG struct {
	IETHDKGCaller     // Read-only binding to the contract
	IETHDKGTransactor // Write-only binding to the contract
	IETHDKGFilterer   // Log filterer for contract events
}

// IETHDKGCaller is an auto generated read-only Go binding around an Ethereum contract.
type IETHDKGCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IETHDKGTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IETHDKGTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IETHDKGFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IETHDKGFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IETHDKGSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IETHDKGSession struct {
	Contract     *IETHDKG          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IETHDKGCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IETHDKGCallerSession struct {
	Contract *IETHDKGCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// IETHDKGTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IETHDKGTransactorSession struct {
	Contract     *IETHDKGTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// IETHDKGRaw is an auto generated low-level Go binding around an Ethereum contract.
type IETHDKGRaw struct {
	Contract *IETHDKG // Generic contract binding to access the raw methods on
}

// IETHDKGCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IETHDKGCallerRaw struct {
	Contract *IETHDKGCaller // Generic read-only contract binding to access the raw methods on
}

// IETHDKGTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IETHDKGTransactorRaw struct {
	Contract *IETHDKGTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIETHDKG creates a new instance of IETHDKG, bound to a specific deployed contract.
func NewIETHDKG(address common.Address, backend bind.ContractBackend) (*IETHDKG, error) {
	contract, err := bindIETHDKG(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IETHDKG{IETHDKGCaller: IETHDKGCaller{contract: contract}, IETHDKGTransactor: IETHDKGTransactor{contract: contract}, IETHDKGFilterer: IETHDKGFilterer{contract: contract}}, nil
}

// NewIETHDKGCaller creates a new read-only instance of IETHDKG, bound to a specific deployed contract.
func NewIETHDKGCaller(address common.Address, caller bind.ContractCaller) (*IETHDKGCaller, error) {
	contract, err := bindIETHDKG(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IETHDKGCaller{contract: contract}, nil
}

// NewIETHDKGTransactor creates a new write-only instance of IETHDKG, bound to a specific deployed contract.
func NewIETHDKGTransactor(address common.Address, transactor bind.ContractTransactor) (*IETHDKGTransactor, error) {
	contract, err := bindIETHDKG(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IETHDKGTransactor{contract: contract}, nil
}

// NewIETHDKGFilterer creates a new log filterer instance of IETHDKG, bound to a specific deployed contract.
func NewIETHDKGFilterer(address common.Address, filterer bind.ContractFilterer) (*IETHDKGFilterer, error) {
	contract, err := bindIETHDKG(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IETHDKGFilterer{contract: contract}, nil
}

// bindIETHDKG binds a generic wrapper to an already deployed contract.
func bindIETHDKG(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IETHDKGABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IETHDKG *IETHDKGRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IETHDKG.Contract.IETHDKGCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IETHDKG *IETHDKGRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IETHDKG.Contract.IETHDKGTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IETHDKG *IETHDKGRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IETHDKG.Contract.IETHDKGTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IETHDKG *IETHDKGCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IETHDKG.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IETHDKG *IETHDKGTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IETHDKG.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IETHDKG *IETHDKGTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IETHDKG.Contract.contract.Transact(opts, method, params...)
}

// GetBadParticipants is a free data retrieval call binding the contract method 0x32d4d570.
//
// Solidity: function getBadParticipants() view returns(uint256)
func (_IETHDKG *IETHDKGCaller) GetBadParticipants(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IETHDKG.contract.Call(opts, &out, "getBadParticipants")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetBadParticipants is a free data retrieval call binding the contract method 0x32d4d570.
//
// Solidity: function getBadParticipants() view returns(uint256)
func (_IETHDKG *IETHDKGSession) GetBadParticipants() (*big.Int, error) {
	return _IETHDKG.Contract.GetBadParticipants(&_IETHDKG.CallOpts)
}

// GetBadParticipants is a free data retrieval call binding the contract method 0x32d4d570.
//
// Solidity: function getBadParticipants() view returns(uint256)
func (_IETHDKG *IETHDKGCallerSession) GetBadParticipants() (*big.Int, error) {
	return _IETHDKG.Contract.GetBadParticipants(&_IETHDKG.CallOpts)
}

// GetConfirmationLength is a free data retrieval call binding the contract method 0x8c848d32.
//
// Solidity: function getConfirmationLength() view returns(uint256)
func (_IETHDKG *IETHDKGCaller) GetConfirmationLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IETHDKG.contract.Call(opts, &out, "getConfirmationLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetConfirmationLength is a free data retrieval call binding the contract method 0x8c848d32.
//
// Solidity: function getConfirmationLength() view returns(uint256)
func (_IETHDKG *IETHDKGSession) GetConfirmationLength() (*big.Int, error) {
	return _IETHDKG.Contract.GetConfirmationLength(&_IETHDKG.CallOpts)
}

// GetConfirmationLength is a free data retrieval call binding the contract method 0x8c848d32.
//
// Solidity: function getConfirmationLength() view returns(uint256)
func (_IETHDKG *IETHDKGCallerSession) GetConfirmationLength() (*big.Int, error) {
	return _IETHDKG.Contract.GetConfirmationLength(&_IETHDKG.CallOpts)
}

// GetETHDKGPhase is a free data retrieval call binding the contract method 0x2958e81c.
//
// Solidity: function getETHDKGPhase() view returns(uint8)
func (_IETHDKG *IETHDKGCaller) GetETHDKGPhase(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _IETHDKG.contract.Call(opts, &out, "getETHDKGPhase")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetETHDKGPhase is a free data retrieval call binding the contract method 0x2958e81c.
//
// Solidity: function getETHDKGPhase() view returns(uint8)
func (_IETHDKG *IETHDKGSession) GetETHDKGPhase() (uint8, error) {
	return _IETHDKG.Contract.GetETHDKGPhase(&_IETHDKG.CallOpts)
}

// GetETHDKGPhase is a free data retrieval call binding the contract method 0x2958e81c.
//
// Solidity: function getETHDKGPhase() view returns(uint8)
func (_IETHDKG *IETHDKGCallerSession) GetETHDKGPhase() (uint8, error) {
	return _IETHDKG.Contract.GetETHDKGPhase(&_IETHDKG.CallOpts)
}

// GetMasterPublicKey is a free data retrieval call binding the contract method 0xe146372a.
//
// Solidity: function getMasterPublicKey() view returns(uint256[4])
func (_IETHDKG *IETHDKGCaller) GetMasterPublicKey(opts *bind.CallOpts) ([4]*big.Int, error) {
	var out []interface{}
	err := _IETHDKG.contract.Call(opts, &out, "getMasterPublicKey")

	if err != nil {
		return *new([4]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([4]*big.Int)).(*[4]*big.Int)

	return out0, err

}

// GetMasterPublicKey is a free data retrieval call binding the contract method 0xe146372a.
//
// Solidity: function getMasterPublicKey() view returns(uint256[4])
func (_IETHDKG *IETHDKGSession) GetMasterPublicKey() ([4]*big.Int, error) {
	return _IETHDKG.Contract.GetMasterPublicKey(&_IETHDKG.CallOpts)
}

// GetMasterPublicKey is a free data retrieval call binding the contract method 0xe146372a.
//
// Solidity: function getMasterPublicKey() view returns(uint256[4])
func (_IETHDKG *IETHDKGCallerSession) GetMasterPublicKey() ([4]*big.Int, error) {
	return _IETHDKG.Contract.GetMasterPublicKey(&_IETHDKG.CallOpts)
}

// GetMinValidators is a free data retrieval call binding the contract method 0xecbadb36.
//
// Solidity: function getMinValidators() view returns(uint256)
func (_IETHDKG *IETHDKGCaller) GetMinValidators(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IETHDKG.contract.Call(opts, &out, "getMinValidators")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMinValidators is a free data retrieval call binding the contract method 0xecbadb36.
//
// Solidity: function getMinValidators() view returns(uint256)
func (_IETHDKG *IETHDKGSession) GetMinValidators() (*big.Int, error) {
	return _IETHDKG.Contract.GetMinValidators(&_IETHDKG.CallOpts)
}

// GetMinValidators is a free data retrieval call binding the contract method 0xecbadb36.
//
// Solidity: function getMinValidators() view returns(uint256)
func (_IETHDKG *IETHDKGCallerSession) GetMinValidators() (*big.Int, error) {
	return _IETHDKG.Contract.GetMinValidators(&_IETHDKG.CallOpts)
}

// GetNonce is a free data retrieval call binding the contract method 0xd087d288.
//
// Solidity: function getNonce() view returns(uint256)
func (_IETHDKG *IETHDKGCaller) GetNonce(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IETHDKG.contract.Call(opts, &out, "getNonce")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNonce is a free data retrieval call binding the contract method 0xd087d288.
//
// Solidity: function getNonce() view returns(uint256)
func (_IETHDKG *IETHDKGSession) GetNonce() (*big.Int, error) {
	return _IETHDKG.Contract.GetNonce(&_IETHDKG.CallOpts)
}

// GetNonce is a free data retrieval call binding the contract method 0xd087d288.
//
// Solidity: function getNonce() view returns(uint256)
func (_IETHDKG *IETHDKGCallerSession) GetNonce() (*big.Int, error) {
	return _IETHDKG.Contract.GetNonce(&_IETHDKG.CallOpts)
}

// GetNumParticipants is a free data retrieval call binding the contract method 0xfd478ca9.
//
// Solidity: function getNumParticipants() view returns(uint256)
func (_IETHDKG *IETHDKGCaller) GetNumParticipants(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IETHDKG.contract.Call(opts, &out, "getNumParticipants")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNumParticipants is a free data retrieval call binding the contract method 0xfd478ca9.
//
// Solidity: function getNumParticipants() view returns(uint256)
func (_IETHDKG *IETHDKGSession) GetNumParticipants() (*big.Int, error) {
	return _IETHDKG.Contract.GetNumParticipants(&_IETHDKG.CallOpts)
}

// GetNumParticipants is a free data retrieval call binding the contract method 0xfd478ca9.
//
// Solidity: function getNumParticipants() view returns(uint256)
func (_IETHDKG *IETHDKGCallerSession) GetNumParticipants() (*big.Int, error) {
	return _IETHDKG.Contract.GetNumParticipants(&_IETHDKG.CallOpts)
}

// GetParticipantInternalState is a free data retrieval call binding the contract method 0xbf7786b6.
//
// Solidity: function getParticipantInternalState(address participant) view returns((uint256[2],uint64,uint64,uint8,bytes32,uint256[2],uint256[2],uint256[4]))
func (_IETHDKG *IETHDKGCaller) GetParticipantInternalState(opts *bind.CallOpts, participant common.Address) (Participant, error) {
	var out []interface{}
	err := _IETHDKG.contract.Call(opts, &out, "getParticipantInternalState", participant)

	if err != nil {
		return *new(Participant), err
	}

	out0 := *abi.ConvertType(out[0], new(Participant)).(*Participant)

	return out0, err

}

// GetParticipantInternalState is a free data retrieval call binding the contract method 0xbf7786b6.
//
// Solidity: function getParticipantInternalState(address participant) view returns((uint256[2],uint64,uint64,uint8,bytes32,uint256[2],uint256[2],uint256[4]))
func (_IETHDKG *IETHDKGSession) GetParticipantInternalState(participant common.Address) (Participant, error) {
	return _IETHDKG.Contract.GetParticipantInternalState(&_IETHDKG.CallOpts, participant)
}

// GetParticipantInternalState is a free data retrieval call binding the contract method 0xbf7786b6.
//
// Solidity: function getParticipantInternalState(address participant) view returns((uint256[2],uint64,uint64,uint8,bytes32,uint256[2],uint256[2],uint256[4]))
func (_IETHDKG *IETHDKGCallerSession) GetParticipantInternalState(participant common.Address) (Participant, error) {
	return _IETHDKG.Contract.GetParticipantInternalState(&_IETHDKG.CallOpts, participant)
}

// GetPhaseLength is a free data retrieval call binding the contract method 0x106da57d.
//
// Solidity: function getPhaseLength() view returns(uint256)
func (_IETHDKG *IETHDKGCaller) GetPhaseLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IETHDKG.contract.Call(opts, &out, "getPhaseLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPhaseLength is a free data retrieval call binding the contract method 0x106da57d.
//
// Solidity: function getPhaseLength() view returns(uint256)
func (_IETHDKG *IETHDKGSession) GetPhaseLength() (*big.Int, error) {
	return _IETHDKG.Contract.GetPhaseLength(&_IETHDKG.CallOpts)
}

// GetPhaseLength is a free data retrieval call binding the contract method 0x106da57d.
//
// Solidity: function getPhaseLength() view returns(uint256)
func (_IETHDKG *IETHDKGCallerSession) GetPhaseLength() (*big.Int, error) {
	return _IETHDKG.Contract.GetPhaseLength(&_IETHDKG.CallOpts)
}

// GetPhaseStartBlock is a free data retrieval call binding the contract method 0xa2bc9c78.
//
// Solidity: function getPhaseStartBlock() view returns(uint256)
func (_IETHDKG *IETHDKGCaller) GetPhaseStartBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IETHDKG.contract.Call(opts, &out, "getPhaseStartBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPhaseStartBlock is a free data retrieval call binding the contract method 0xa2bc9c78.
//
// Solidity: function getPhaseStartBlock() view returns(uint256)
func (_IETHDKG *IETHDKGSession) GetPhaseStartBlock() (*big.Int, error) {
	return _IETHDKG.Contract.GetPhaseStartBlock(&_IETHDKG.CallOpts)
}

// GetPhaseStartBlock is a free data retrieval call binding the contract method 0xa2bc9c78.
//
// Solidity: function getPhaseStartBlock() view returns(uint256)
func (_IETHDKG *IETHDKGCallerSession) GetPhaseStartBlock() (*big.Int, error) {
	return _IETHDKG.Contract.GetPhaseStartBlock(&_IETHDKG.CallOpts)
}

// IsETHDKGRunning is a free data retrieval call binding the contract method 0x747b217c.
//
// Solidity: function isETHDKGRunning() view returns(bool)
func (_IETHDKG *IETHDKGCaller) IsETHDKGRunning(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _IETHDKG.contract.Call(opts, &out, "isETHDKGRunning")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsETHDKGRunning is a free data retrieval call binding the contract method 0x747b217c.
//
// Solidity: function isETHDKGRunning() view returns(bool)
func (_IETHDKG *IETHDKGSession) IsETHDKGRunning() (bool, error) {
	return _IETHDKG.Contract.IsETHDKGRunning(&_IETHDKG.CallOpts)
}

// IsETHDKGRunning is a free data retrieval call binding the contract method 0x747b217c.
//
// Solidity: function isETHDKGRunning() view returns(bool)
func (_IETHDKG *IETHDKGCallerSession) IsETHDKGRunning() (bool, error) {
	return _IETHDKG.Contract.IsETHDKGRunning(&_IETHDKG.CallOpts)
}

// IsMasterPublicKeySet is a free data retrieval call binding the contract method 0x08efcf16.
//
// Solidity: function isMasterPublicKeySet() view returns(bool)
func (_IETHDKG *IETHDKGCaller) IsMasterPublicKeySet(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _IETHDKG.contract.Call(opts, &out, "isMasterPublicKeySet")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsMasterPublicKeySet is a free data retrieval call binding the contract method 0x08efcf16.
//
// Solidity: function isMasterPublicKeySet() view returns(bool)
func (_IETHDKG *IETHDKGSession) IsMasterPublicKeySet() (bool, error) {
	return _IETHDKG.Contract.IsMasterPublicKeySet(&_IETHDKG.CallOpts)
}

// IsMasterPublicKeySet is a free data retrieval call binding the contract method 0x08efcf16.
//
// Solidity: function isMasterPublicKeySet() view returns(bool)
func (_IETHDKG *IETHDKGCallerSession) IsMasterPublicKeySet() (bool, error) {
	return _IETHDKG.Contract.IsMasterPublicKeySet(&_IETHDKG.CallOpts)
}

// TryGetParticipantIndex is a free data retrieval call binding the contract method 0x65e62b9b.
//
// Solidity: function tryGetParticipantIndex(address participant) view returns(bool, uint256)
func (_IETHDKG *IETHDKGCaller) TryGetParticipantIndex(opts *bind.CallOpts, participant common.Address) (bool, *big.Int, error) {
	var out []interface{}
	err := _IETHDKG.contract.Call(opts, &out, "tryGetParticipantIndex", participant)

	if err != nil {
		return *new(bool), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// TryGetParticipantIndex is a free data retrieval call binding the contract method 0x65e62b9b.
//
// Solidity: function tryGetParticipantIndex(address participant) view returns(bool, uint256)
func (_IETHDKG *IETHDKGSession) TryGetParticipantIndex(participant common.Address) (bool, *big.Int, error) {
	return _IETHDKG.Contract.TryGetParticipantIndex(&_IETHDKG.CallOpts, participant)
}

// TryGetParticipantIndex is a free data retrieval call binding the contract method 0x65e62b9b.
//
// Solidity: function tryGetParticipantIndex(address participant) view returns(bool, uint256)
func (_IETHDKG *IETHDKGCallerSession) TryGetParticipantIndex(participant common.Address) (bool, *big.Int, error) {
	return _IETHDKG.Contract.TryGetParticipantIndex(&_IETHDKG.CallOpts, participant)
}

// AccuseParticipantDidNotDistributeShares is a paid mutator transaction binding the contract method 0xdae681bc.
//
// Solidity: function accuseParticipantDidNotDistributeShares(address[] dishonestAddresses) returns()
func (_IETHDKG *IETHDKGTransactor) AccuseParticipantDidNotDistributeShares(opts *bind.TransactOpts, dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "accuseParticipantDidNotDistributeShares", dishonestAddresses)
}

// AccuseParticipantDidNotDistributeShares is a paid mutator transaction binding the contract method 0xdae681bc.
//
// Solidity: function accuseParticipantDidNotDistributeShares(address[] dishonestAddresses) returns()
func (_IETHDKG *IETHDKGSession) AccuseParticipantDidNotDistributeShares(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _IETHDKG.Contract.AccuseParticipantDidNotDistributeShares(&_IETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDidNotDistributeShares is a paid mutator transaction binding the contract method 0xdae681bc.
//
// Solidity: function accuseParticipantDidNotDistributeShares(address[] dishonestAddresses) returns()
func (_IETHDKG *IETHDKGTransactorSession) AccuseParticipantDidNotDistributeShares(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _IETHDKG.Contract.AccuseParticipantDidNotDistributeShares(&_IETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDidNotSubmitGPKJ is a paid mutator transaction binding the contract method 0x7df24ee9.
//
// Solidity: function accuseParticipantDidNotSubmitGPKJ(address[] dishonestAddresses) returns()
func (_IETHDKG *IETHDKGTransactor) AccuseParticipantDidNotSubmitGPKJ(opts *bind.TransactOpts, dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "accuseParticipantDidNotSubmitGPKJ", dishonestAddresses)
}

// AccuseParticipantDidNotSubmitGPKJ is a paid mutator transaction binding the contract method 0x7df24ee9.
//
// Solidity: function accuseParticipantDidNotSubmitGPKJ(address[] dishonestAddresses) returns()
func (_IETHDKG *IETHDKGSession) AccuseParticipantDidNotSubmitGPKJ(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _IETHDKG.Contract.AccuseParticipantDidNotSubmitGPKJ(&_IETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDidNotSubmitGPKJ is a paid mutator transaction binding the contract method 0x7df24ee9.
//
// Solidity: function accuseParticipantDidNotSubmitGPKJ(address[] dishonestAddresses) returns()
func (_IETHDKG *IETHDKGTransactorSession) AccuseParticipantDidNotSubmitGPKJ(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _IETHDKG.Contract.AccuseParticipantDidNotSubmitGPKJ(&_IETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDidNotSubmitKeyShares is a paid mutator transaction binding the contract method 0x043a6f12.
//
// Solidity: function accuseParticipantDidNotSubmitKeyShares(address[] dishonestAddresses) returns()
func (_IETHDKG *IETHDKGTransactor) AccuseParticipantDidNotSubmitKeyShares(opts *bind.TransactOpts, dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "accuseParticipantDidNotSubmitKeyShares", dishonestAddresses)
}

// AccuseParticipantDidNotSubmitKeyShares is a paid mutator transaction binding the contract method 0x043a6f12.
//
// Solidity: function accuseParticipantDidNotSubmitKeyShares(address[] dishonestAddresses) returns()
func (_IETHDKG *IETHDKGSession) AccuseParticipantDidNotSubmitKeyShares(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _IETHDKG.Contract.AccuseParticipantDidNotSubmitKeyShares(&_IETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDidNotSubmitKeyShares is a paid mutator transaction binding the contract method 0x043a6f12.
//
// Solidity: function accuseParticipantDidNotSubmitKeyShares(address[] dishonestAddresses) returns()
func (_IETHDKG *IETHDKGTransactorSession) AccuseParticipantDidNotSubmitKeyShares(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _IETHDKG.Contract.AccuseParticipantDidNotSubmitKeyShares(&_IETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantDistributedBadShares is a paid mutator transaction binding the contract method 0xedbe7bf7.
//
// Solidity: function accuseParticipantDistributedBadShares(address dishonestAddress, uint256[] encryptedShares, uint256[2][] commitments, uint256[2] sharedKey, uint256[2] sharedKeyCorrectnessProof) returns()
func (_IETHDKG *IETHDKGTransactor) AccuseParticipantDistributedBadShares(opts *bind.TransactOpts, dishonestAddress common.Address, encryptedShares []*big.Int, commitments [][2]*big.Int, sharedKey [2]*big.Int, sharedKeyCorrectnessProof [2]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "accuseParticipantDistributedBadShares", dishonestAddress, encryptedShares, commitments, sharedKey, sharedKeyCorrectnessProof)
}

// AccuseParticipantDistributedBadShares is a paid mutator transaction binding the contract method 0xedbe7bf7.
//
// Solidity: function accuseParticipantDistributedBadShares(address dishonestAddress, uint256[] encryptedShares, uint256[2][] commitments, uint256[2] sharedKey, uint256[2] sharedKeyCorrectnessProof) returns()
func (_IETHDKG *IETHDKGSession) AccuseParticipantDistributedBadShares(dishonestAddress common.Address, encryptedShares []*big.Int, commitments [][2]*big.Int, sharedKey [2]*big.Int, sharedKeyCorrectnessProof [2]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.AccuseParticipantDistributedBadShares(&_IETHDKG.TransactOpts, dishonestAddress, encryptedShares, commitments, sharedKey, sharedKeyCorrectnessProof)
}

// AccuseParticipantDistributedBadShares is a paid mutator transaction binding the contract method 0xedbe7bf7.
//
// Solidity: function accuseParticipantDistributedBadShares(address dishonestAddress, uint256[] encryptedShares, uint256[2][] commitments, uint256[2] sharedKey, uint256[2] sharedKeyCorrectnessProof) returns()
func (_IETHDKG *IETHDKGTransactorSession) AccuseParticipantDistributedBadShares(dishonestAddress common.Address, encryptedShares []*big.Int, commitments [][2]*big.Int, sharedKey [2]*big.Int, sharedKeyCorrectnessProof [2]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.AccuseParticipantDistributedBadShares(&_IETHDKG.TransactOpts, dishonestAddress, encryptedShares, commitments, sharedKey, sharedKeyCorrectnessProof)
}

// AccuseParticipantNotRegistered is a paid mutator transaction binding the contract method 0xf72c45b6.
//
// Solidity: function accuseParticipantNotRegistered(address[] dishonestAddresses) returns()
func (_IETHDKG *IETHDKGTransactor) AccuseParticipantNotRegistered(opts *bind.TransactOpts, dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "accuseParticipantNotRegistered", dishonestAddresses)
}

// AccuseParticipantNotRegistered is a paid mutator transaction binding the contract method 0xf72c45b6.
//
// Solidity: function accuseParticipantNotRegistered(address[] dishonestAddresses) returns()
func (_IETHDKG *IETHDKGSession) AccuseParticipantNotRegistered(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _IETHDKG.Contract.AccuseParticipantNotRegistered(&_IETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantNotRegistered is a paid mutator transaction binding the contract method 0xf72c45b6.
//
// Solidity: function accuseParticipantNotRegistered(address[] dishonestAddresses) returns()
func (_IETHDKG *IETHDKGTransactorSession) AccuseParticipantNotRegistered(dishonestAddresses []common.Address) (*types.Transaction, error) {
	return _IETHDKG.Contract.AccuseParticipantNotRegistered(&_IETHDKG.TransactOpts, dishonestAddresses)
}

// AccuseParticipantSubmittedBadGPKJ is a paid mutator transaction binding the contract method 0x80001264.
//
// Solidity: function accuseParticipantSubmittedBadGPKJ(address[] validators, bytes32[] encryptedSharesHash, uint256[2][][] commitments, address dishonestAddress) returns()
func (_IETHDKG *IETHDKGTransactor) AccuseParticipantSubmittedBadGPKJ(opts *bind.TransactOpts, validators []common.Address, encryptedSharesHash [][32]byte, commitments [][][2]*big.Int, dishonestAddress common.Address) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "accuseParticipantSubmittedBadGPKJ", validators, encryptedSharesHash, commitments, dishonestAddress)
}

// AccuseParticipantSubmittedBadGPKJ is a paid mutator transaction binding the contract method 0x80001264.
//
// Solidity: function accuseParticipantSubmittedBadGPKJ(address[] validators, bytes32[] encryptedSharesHash, uint256[2][][] commitments, address dishonestAddress) returns()
func (_IETHDKG *IETHDKGSession) AccuseParticipantSubmittedBadGPKJ(validators []common.Address, encryptedSharesHash [][32]byte, commitments [][][2]*big.Int, dishonestAddress common.Address) (*types.Transaction, error) {
	return _IETHDKG.Contract.AccuseParticipantSubmittedBadGPKJ(&_IETHDKG.TransactOpts, validators, encryptedSharesHash, commitments, dishonestAddress)
}

// AccuseParticipantSubmittedBadGPKJ is a paid mutator transaction binding the contract method 0x80001264.
//
// Solidity: function accuseParticipantSubmittedBadGPKJ(address[] validators, bytes32[] encryptedSharesHash, uint256[2][][] commitments, address dishonestAddress) returns()
func (_IETHDKG *IETHDKGTransactorSession) AccuseParticipantSubmittedBadGPKJ(validators []common.Address, encryptedSharesHash [][32]byte, commitments [][][2]*big.Int, dishonestAddress common.Address) (*types.Transaction, error) {
	return _IETHDKG.Contract.AccuseParticipantSubmittedBadGPKJ(&_IETHDKG.TransactOpts, validators, encryptedSharesHash, commitments, dishonestAddress)
}

// Complete is a paid mutator transaction binding the contract method 0x522e1177.
//
// Solidity: function complete() returns()
func (_IETHDKG *IETHDKGTransactor) Complete(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "complete")
}

// Complete is a paid mutator transaction binding the contract method 0x522e1177.
//
// Solidity: function complete() returns()
func (_IETHDKG *IETHDKGSession) Complete() (*types.Transaction, error) {
	return _IETHDKG.Contract.Complete(&_IETHDKG.TransactOpts)
}

// Complete is a paid mutator transaction binding the contract method 0x522e1177.
//
// Solidity: function complete() returns()
func (_IETHDKG *IETHDKGTransactorSession) Complete() (*types.Transaction, error) {
	return _IETHDKG.Contract.Complete(&_IETHDKG.TransactOpts)
}

// DistributeShares is a paid mutator transaction binding the contract method 0x80b97e01.
//
// Solidity: function distributeShares(uint256[] encryptedShares, uint256[2][] commitments) returns()
func (_IETHDKG *IETHDKGTransactor) DistributeShares(opts *bind.TransactOpts, encryptedShares []*big.Int, commitments [][2]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "distributeShares", encryptedShares, commitments)
}

// DistributeShares is a paid mutator transaction binding the contract method 0x80b97e01.
//
// Solidity: function distributeShares(uint256[] encryptedShares, uint256[2][] commitments) returns()
func (_IETHDKG *IETHDKGSession) DistributeShares(encryptedShares []*big.Int, commitments [][2]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.DistributeShares(&_IETHDKG.TransactOpts, encryptedShares, commitments)
}

// DistributeShares is a paid mutator transaction binding the contract method 0x80b97e01.
//
// Solidity: function distributeShares(uint256[] encryptedShares, uint256[2][] commitments) returns()
func (_IETHDKG *IETHDKGTransactorSession) DistributeShares(encryptedShares []*big.Int, commitments [][2]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.DistributeShares(&_IETHDKG.TransactOpts, encryptedShares, commitments)
}

// InitializeETHDKG is a paid mutator transaction binding the contract method 0x57b51c9c.
//
// Solidity: function initializeETHDKG() returns()
func (_IETHDKG *IETHDKGTransactor) InitializeETHDKG(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "initializeETHDKG")
}

// InitializeETHDKG is a paid mutator transaction binding the contract method 0x57b51c9c.
//
// Solidity: function initializeETHDKG() returns()
func (_IETHDKG *IETHDKGSession) InitializeETHDKG() (*types.Transaction, error) {
	return _IETHDKG.Contract.InitializeETHDKG(&_IETHDKG.TransactOpts)
}

// InitializeETHDKG is a paid mutator transaction binding the contract method 0x57b51c9c.
//
// Solidity: function initializeETHDKG() returns()
func (_IETHDKG *IETHDKGTransactorSession) InitializeETHDKG() (*types.Transaction, error) {
	return _IETHDKG.Contract.InitializeETHDKG(&_IETHDKG.TransactOpts)
}

// Register is a paid mutator transaction binding the contract method 0x3442af5c.
//
// Solidity: function register(uint256[2] publicKey) returns()
func (_IETHDKG *IETHDKGTransactor) Register(opts *bind.TransactOpts, publicKey [2]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "register", publicKey)
}

// Register is a paid mutator transaction binding the contract method 0x3442af5c.
//
// Solidity: function register(uint256[2] publicKey) returns()
func (_IETHDKG *IETHDKGSession) Register(publicKey [2]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.Register(&_IETHDKG.TransactOpts, publicKey)
}

// Register is a paid mutator transaction binding the contract method 0x3442af5c.
//
// Solidity: function register(uint256[2] publicKey) returns()
func (_IETHDKG *IETHDKGTransactorSession) Register(publicKey [2]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.Register(&_IETHDKG.TransactOpts, publicKey)
}

// SetConfirmationLength is a paid mutator transaction binding the contract method 0xff3e5e45.
//
// Solidity: function setConfirmationLength(uint16 confirmationLength_) returns()
func (_IETHDKG *IETHDKGTransactor) SetConfirmationLength(opts *bind.TransactOpts, confirmationLength_ uint16) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "setConfirmationLength", confirmationLength_)
}

// SetConfirmationLength is a paid mutator transaction binding the contract method 0xff3e5e45.
//
// Solidity: function setConfirmationLength(uint16 confirmationLength_) returns()
func (_IETHDKG *IETHDKGSession) SetConfirmationLength(confirmationLength_ uint16) (*types.Transaction, error) {
	return _IETHDKG.Contract.SetConfirmationLength(&_IETHDKG.TransactOpts, confirmationLength_)
}

// SetConfirmationLength is a paid mutator transaction binding the contract method 0xff3e5e45.
//
// Solidity: function setConfirmationLength(uint16 confirmationLength_) returns()
func (_IETHDKG *IETHDKGTransactorSession) SetConfirmationLength(confirmationLength_ uint16) (*types.Transaction, error) {
	return _IETHDKG.Contract.SetConfirmationLength(&_IETHDKG.TransactOpts, confirmationLength_)
}

// SetCustomMadnetHeight is a paid mutator transaction binding the contract method 0x8328cdf7.
//
// Solidity: function setCustomMadnetHeight(uint256 madnetHeight) returns()
func (_IETHDKG *IETHDKGTransactor) SetCustomMadnetHeight(opts *bind.TransactOpts, madnetHeight *big.Int) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "setCustomMadnetHeight", madnetHeight)
}

// SetCustomMadnetHeight is a paid mutator transaction binding the contract method 0x8328cdf7.
//
// Solidity: function setCustomMadnetHeight(uint256 madnetHeight) returns()
func (_IETHDKG *IETHDKGSession) SetCustomMadnetHeight(madnetHeight *big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.SetCustomMadnetHeight(&_IETHDKG.TransactOpts, madnetHeight)
}

// SetCustomMadnetHeight is a paid mutator transaction binding the contract method 0x8328cdf7.
//
// Solidity: function setCustomMadnetHeight(uint256 madnetHeight) returns()
func (_IETHDKG *IETHDKGTransactorSession) SetCustomMadnetHeight(madnetHeight *big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.SetCustomMadnetHeight(&_IETHDKG.TransactOpts, madnetHeight)
}

// SetPhaseLength is a paid mutator transaction binding the contract method 0x8a3c24cc.
//
// Solidity: function setPhaseLength(uint16 phaseLength_) returns()
func (_IETHDKG *IETHDKGTransactor) SetPhaseLength(opts *bind.TransactOpts, phaseLength_ uint16) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "setPhaseLength", phaseLength_)
}

// SetPhaseLength is a paid mutator transaction binding the contract method 0x8a3c24cc.
//
// Solidity: function setPhaseLength(uint16 phaseLength_) returns()
func (_IETHDKG *IETHDKGSession) SetPhaseLength(phaseLength_ uint16) (*types.Transaction, error) {
	return _IETHDKG.Contract.SetPhaseLength(&_IETHDKG.TransactOpts, phaseLength_)
}

// SetPhaseLength is a paid mutator transaction binding the contract method 0x8a3c24cc.
//
// Solidity: function setPhaseLength(uint16 phaseLength_) returns()
func (_IETHDKG *IETHDKGTransactorSession) SetPhaseLength(phaseLength_ uint16) (*types.Transaction, error) {
	return _IETHDKG.Contract.SetPhaseLength(&_IETHDKG.TransactOpts, phaseLength_)
}

// SubmitGPKJ is a paid mutator transaction binding the contract method 0x101f49c1.
//
// Solidity: function submitGPKJ(uint256[4] gpkj) returns()
func (_IETHDKG *IETHDKGTransactor) SubmitGPKJ(opts *bind.TransactOpts, gpkj [4]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "submitGPKJ", gpkj)
}

// SubmitGPKJ is a paid mutator transaction binding the contract method 0x101f49c1.
//
// Solidity: function submitGPKJ(uint256[4] gpkj) returns()
func (_IETHDKG *IETHDKGSession) SubmitGPKJ(gpkj [4]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.SubmitGPKJ(&_IETHDKG.TransactOpts, gpkj)
}

// SubmitGPKJ is a paid mutator transaction binding the contract method 0x101f49c1.
//
// Solidity: function submitGPKJ(uint256[4] gpkj) returns()
func (_IETHDKG *IETHDKGTransactorSession) SubmitGPKJ(gpkj [4]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.SubmitGPKJ(&_IETHDKG.TransactOpts, gpkj)
}

// SubmitKeyShare is a paid mutator transaction binding the contract method 0x62a6523e.
//
// Solidity: function submitKeyShare(uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2) returns()
func (_IETHDKG *IETHDKGTransactor) SubmitKeyShare(opts *bind.TransactOpts, keyShareG1 [2]*big.Int, keyShareG1CorrectnessProof [2]*big.Int, keyShareG2 [4]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "submitKeyShare", keyShareG1, keyShareG1CorrectnessProof, keyShareG2)
}

// SubmitKeyShare is a paid mutator transaction binding the contract method 0x62a6523e.
//
// Solidity: function submitKeyShare(uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2) returns()
func (_IETHDKG *IETHDKGSession) SubmitKeyShare(keyShareG1 [2]*big.Int, keyShareG1CorrectnessProof [2]*big.Int, keyShareG2 [4]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.SubmitKeyShare(&_IETHDKG.TransactOpts, keyShareG1, keyShareG1CorrectnessProof, keyShareG2)
}

// SubmitKeyShare is a paid mutator transaction binding the contract method 0x62a6523e.
//
// Solidity: function submitKeyShare(uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2) returns()
func (_IETHDKG *IETHDKGTransactorSession) SubmitKeyShare(keyShareG1 [2]*big.Int, keyShareG1CorrectnessProof [2]*big.Int, keyShareG2 [4]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.SubmitKeyShare(&_IETHDKG.TransactOpts, keyShareG1, keyShareG1CorrectnessProof, keyShareG2)
}

// SubmitMasterPublicKey is a paid mutator transaction binding the contract method 0xe8323224.
//
// Solidity: function submitMasterPublicKey(uint256[4] masterPublicKey_) returns()
func (_IETHDKG *IETHDKGTransactor) SubmitMasterPublicKey(opts *bind.TransactOpts, masterPublicKey_ [4]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.contract.Transact(opts, "submitMasterPublicKey", masterPublicKey_)
}

// SubmitMasterPublicKey is a paid mutator transaction binding the contract method 0xe8323224.
//
// Solidity: function submitMasterPublicKey(uint256[4] masterPublicKey_) returns()
func (_IETHDKG *IETHDKGSession) SubmitMasterPublicKey(masterPublicKey_ [4]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.SubmitMasterPublicKey(&_IETHDKG.TransactOpts, masterPublicKey_)
}

// SubmitMasterPublicKey is a paid mutator transaction binding the contract method 0xe8323224.
//
// Solidity: function submitMasterPublicKey(uint256[4] masterPublicKey_) returns()
func (_IETHDKG *IETHDKGTransactorSession) SubmitMasterPublicKey(masterPublicKey_ [4]*big.Int) (*types.Transaction, error) {
	return _IETHDKG.Contract.SubmitMasterPublicKey(&_IETHDKG.TransactOpts, masterPublicKey_)
}

// IETHDKGEventsMetaData contains all meta data concerning the IETHDKGEvents contract.
var IETHDKGEventsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"publicKey\",\"type\":\"uint256[2]\"}],\"name\":\"AddressRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"GPKJSubmissionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"KeyShareSubmissionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"keyShareG1CorrectnessProof\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"keyShareG2\",\"type\":\"uint256[4]\"}],\"name\":\"KeyShareSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"mpk\",\"type\":\"uint256[4]\"}],\"name\":\"MPKSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"RegistrationComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberValidators\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"phaseLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"confirmationLength\",\"type\":\"uint256\"}],\"name\":\"RegistrationOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"ShareDistributionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"encryptedShares\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"}],\"name\":\"SharesDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share3\",\"type\":\"uint256\"}],\"name\":\"ValidatorMemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethHeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"madHeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey3\",\"type\":\"uint256\"}],\"name\":\"ValidatorSetCompleted\",\"type\":\"event\"}]",
}

// IETHDKGEventsABI is the input ABI used to generate the binding from.
// Deprecated: Use IETHDKGEventsMetaData.ABI instead.
var IETHDKGEventsABI = IETHDKGEventsMetaData.ABI

// IETHDKGEvents is an auto generated Go binding around an Ethereum contract.
type IETHDKGEvents struct {
	IETHDKGEventsCaller     // Read-only binding to the contract
	IETHDKGEventsTransactor // Write-only binding to the contract
	IETHDKGEventsFilterer   // Log filterer for contract events
}

// IETHDKGEventsCaller is an auto generated read-only Go binding around an Ethereum contract.
type IETHDKGEventsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IETHDKGEventsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IETHDKGEventsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IETHDKGEventsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IETHDKGEventsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IETHDKGEventsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IETHDKGEventsSession struct {
	Contract     *IETHDKGEvents    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IETHDKGEventsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IETHDKGEventsCallerSession struct {
	Contract *IETHDKGEventsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// IETHDKGEventsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IETHDKGEventsTransactorSession struct {
	Contract     *IETHDKGEventsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// IETHDKGEventsRaw is an auto generated low-level Go binding around an Ethereum contract.
type IETHDKGEventsRaw struct {
	Contract *IETHDKGEvents // Generic contract binding to access the raw methods on
}

// IETHDKGEventsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IETHDKGEventsCallerRaw struct {
	Contract *IETHDKGEventsCaller // Generic read-only contract binding to access the raw methods on
}

// IETHDKGEventsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IETHDKGEventsTransactorRaw struct {
	Contract *IETHDKGEventsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIETHDKGEvents creates a new instance of IETHDKGEvents, bound to a specific deployed contract.
func NewIETHDKGEvents(address common.Address, backend bind.ContractBackend) (*IETHDKGEvents, error) {
	contract, err := bindIETHDKGEvents(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IETHDKGEvents{IETHDKGEventsCaller: IETHDKGEventsCaller{contract: contract}, IETHDKGEventsTransactor: IETHDKGEventsTransactor{contract: contract}, IETHDKGEventsFilterer: IETHDKGEventsFilterer{contract: contract}}, nil
}

// NewIETHDKGEventsCaller creates a new read-only instance of IETHDKGEvents, bound to a specific deployed contract.
func NewIETHDKGEventsCaller(address common.Address, caller bind.ContractCaller) (*IETHDKGEventsCaller, error) {
	contract, err := bindIETHDKGEvents(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsCaller{contract: contract}, nil
}

// NewIETHDKGEventsTransactor creates a new write-only instance of IETHDKGEvents, bound to a specific deployed contract.
func NewIETHDKGEventsTransactor(address common.Address, transactor bind.ContractTransactor) (*IETHDKGEventsTransactor, error) {
	contract, err := bindIETHDKGEvents(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsTransactor{contract: contract}, nil
}

// NewIETHDKGEventsFilterer creates a new log filterer instance of IETHDKGEvents, bound to a specific deployed contract.
func NewIETHDKGEventsFilterer(address common.Address, filterer bind.ContractFilterer) (*IETHDKGEventsFilterer, error) {
	contract, err := bindIETHDKGEvents(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsFilterer{contract: contract}, nil
}

// bindIETHDKGEvents binds a generic wrapper to an already deployed contract.
func bindIETHDKGEvents(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IETHDKGEventsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IETHDKGEvents *IETHDKGEventsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IETHDKGEvents.Contract.IETHDKGEventsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IETHDKGEvents *IETHDKGEventsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IETHDKGEvents.Contract.IETHDKGEventsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IETHDKGEvents *IETHDKGEventsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IETHDKGEvents.Contract.IETHDKGEventsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IETHDKGEvents *IETHDKGEventsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IETHDKGEvents.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IETHDKGEvents *IETHDKGEventsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IETHDKGEvents.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IETHDKGEvents *IETHDKGEventsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IETHDKGEvents.Contract.contract.Transact(opts, method, params...)
}

// IETHDKGEventsAddressRegisteredIterator is returned from FilterAddressRegistered and is used to iterate over the raw logs and unpacked data for AddressRegistered events raised by the IETHDKGEvents contract.
type IETHDKGEventsAddressRegisteredIterator struct {
	Event *IETHDKGEventsAddressRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IETHDKGEventsAddressRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IETHDKGEventsAddressRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IETHDKGEventsAddressRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IETHDKGEventsAddressRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IETHDKGEventsAddressRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IETHDKGEventsAddressRegistered represents a AddressRegistered event raised by the IETHDKGEvents contract.
type IETHDKGEventsAddressRegistered struct {
	Account   common.Address
	Index     *big.Int
	Nonce     *big.Int
	PublicKey [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAddressRegistered is a free log retrieval operation binding the contract event 0x7f1304057ec61140fbf2f5f236790f34fcafe123d3eb0d298d92317c97da500d.
//
// Solidity: event AddressRegistered(address account, uint256 index, uint256 nonce, uint256[2] publicKey)
func (_IETHDKGEvents *IETHDKGEventsFilterer) FilterAddressRegistered(opts *bind.FilterOpts) (*IETHDKGEventsAddressRegisteredIterator, error) {

	logs, sub, err := _IETHDKGEvents.contract.FilterLogs(opts, "AddressRegistered")
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsAddressRegisteredIterator{contract: _IETHDKGEvents.contract, event: "AddressRegistered", logs: logs, sub: sub}, nil
}

// WatchAddressRegistered is a free log subscription operation binding the contract event 0x7f1304057ec61140fbf2f5f236790f34fcafe123d3eb0d298d92317c97da500d.
//
// Solidity: event AddressRegistered(address account, uint256 index, uint256 nonce, uint256[2] publicKey)
func (_IETHDKGEvents *IETHDKGEventsFilterer) WatchAddressRegistered(opts *bind.WatchOpts, sink chan<- *IETHDKGEventsAddressRegistered) (event.Subscription, error) {

	logs, sub, err := _IETHDKGEvents.contract.WatchLogs(opts, "AddressRegistered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IETHDKGEventsAddressRegistered)
				if err := _IETHDKGEvents.contract.UnpackLog(event, "AddressRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddressRegistered is a log parse operation binding the contract event 0x7f1304057ec61140fbf2f5f236790f34fcafe123d3eb0d298d92317c97da500d.
//
// Solidity: event AddressRegistered(address account, uint256 index, uint256 nonce, uint256[2] publicKey)
func (_IETHDKGEvents *IETHDKGEventsFilterer) ParseAddressRegistered(log types.Log) (*IETHDKGEventsAddressRegistered, error) {
	event := new(IETHDKGEventsAddressRegistered)
	if err := _IETHDKGEvents.contract.UnpackLog(event, "AddressRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IETHDKGEventsGPKJSubmissionCompleteIterator is returned from FilterGPKJSubmissionComplete and is used to iterate over the raw logs and unpacked data for GPKJSubmissionComplete events raised by the IETHDKGEvents contract.
type IETHDKGEventsGPKJSubmissionCompleteIterator struct {
	Event *IETHDKGEventsGPKJSubmissionComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IETHDKGEventsGPKJSubmissionCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IETHDKGEventsGPKJSubmissionComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IETHDKGEventsGPKJSubmissionComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IETHDKGEventsGPKJSubmissionCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IETHDKGEventsGPKJSubmissionCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IETHDKGEventsGPKJSubmissionComplete represents a GPKJSubmissionComplete event raised by the IETHDKGEvents contract.
type IETHDKGEventsGPKJSubmissionComplete struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterGPKJSubmissionComplete is a free log retrieval operation binding the contract event 0x87bfe600b78cad9f7cf68c99eb582c1748f636b3269842b37d5873b0e069f628.
//
// Solidity: event GPKJSubmissionComplete(uint256 blockNumber)
func (_IETHDKGEvents *IETHDKGEventsFilterer) FilterGPKJSubmissionComplete(opts *bind.FilterOpts) (*IETHDKGEventsGPKJSubmissionCompleteIterator, error) {

	logs, sub, err := _IETHDKGEvents.contract.FilterLogs(opts, "GPKJSubmissionComplete")
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsGPKJSubmissionCompleteIterator{contract: _IETHDKGEvents.contract, event: "GPKJSubmissionComplete", logs: logs, sub: sub}, nil
}

// WatchGPKJSubmissionComplete is a free log subscription operation binding the contract event 0x87bfe600b78cad9f7cf68c99eb582c1748f636b3269842b37d5873b0e069f628.
//
// Solidity: event GPKJSubmissionComplete(uint256 blockNumber)
func (_IETHDKGEvents *IETHDKGEventsFilterer) WatchGPKJSubmissionComplete(opts *bind.WatchOpts, sink chan<- *IETHDKGEventsGPKJSubmissionComplete) (event.Subscription, error) {

	logs, sub, err := _IETHDKGEvents.contract.WatchLogs(opts, "GPKJSubmissionComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IETHDKGEventsGPKJSubmissionComplete)
				if err := _IETHDKGEvents.contract.UnpackLog(event, "GPKJSubmissionComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGPKJSubmissionComplete is a log parse operation binding the contract event 0x87bfe600b78cad9f7cf68c99eb582c1748f636b3269842b37d5873b0e069f628.
//
// Solidity: event GPKJSubmissionComplete(uint256 blockNumber)
func (_IETHDKGEvents *IETHDKGEventsFilterer) ParseGPKJSubmissionComplete(log types.Log) (*IETHDKGEventsGPKJSubmissionComplete, error) {
	event := new(IETHDKGEventsGPKJSubmissionComplete)
	if err := _IETHDKGEvents.contract.UnpackLog(event, "GPKJSubmissionComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IETHDKGEventsKeyShareSubmissionCompleteIterator is returned from FilterKeyShareSubmissionComplete and is used to iterate over the raw logs and unpacked data for KeyShareSubmissionComplete events raised by the IETHDKGEvents contract.
type IETHDKGEventsKeyShareSubmissionCompleteIterator struct {
	Event *IETHDKGEventsKeyShareSubmissionComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IETHDKGEventsKeyShareSubmissionCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IETHDKGEventsKeyShareSubmissionComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IETHDKGEventsKeyShareSubmissionComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IETHDKGEventsKeyShareSubmissionCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IETHDKGEventsKeyShareSubmissionCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IETHDKGEventsKeyShareSubmissionComplete represents a KeyShareSubmissionComplete event raised by the IETHDKGEvents contract.
type IETHDKGEventsKeyShareSubmissionComplete struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterKeyShareSubmissionComplete is a free log retrieval operation binding the contract event 0x522cec98f6caa194456c44afa9e8cef9ac63eecb0be60e20d180ce19cfb0ef59.
//
// Solidity: event KeyShareSubmissionComplete(uint256 blockNumber)
func (_IETHDKGEvents *IETHDKGEventsFilterer) FilterKeyShareSubmissionComplete(opts *bind.FilterOpts) (*IETHDKGEventsKeyShareSubmissionCompleteIterator, error) {

	logs, sub, err := _IETHDKGEvents.contract.FilterLogs(opts, "KeyShareSubmissionComplete")
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsKeyShareSubmissionCompleteIterator{contract: _IETHDKGEvents.contract, event: "KeyShareSubmissionComplete", logs: logs, sub: sub}, nil
}

// WatchKeyShareSubmissionComplete is a free log subscription operation binding the contract event 0x522cec98f6caa194456c44afa9e8cef9ac63eecb0be60e20d180ce19cfb0ef59.
//
// Solidity: event KeyShareSubmissionComplete(uint256 blockNumber)
func (_IETHDKGEvents *IETHDKGEventsFilterer) WatchKeyShareSubmissionComplete(opts *bind.WatchOpts, sink chan<- *IETHDKGEventsKeyShareSubmissionComplete) (event.Subscription, error) {

	logs, sub, err := _IETHDKGEvents.contract.WatchLogs(opts, "KeyShareSubmissionComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IETHDKGEventsKeyShareSubmissionComplete)
				if err := _IETHDKGEvents.contract.UnpackLog(event, "KeyShareSubmissionComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyShareSubmissionComplete is a log parse operation binding the contract event 0x522cec98f6caa194456c44afa9e8cef9ac63eecb0be60e20d180ce19cfb0ef59.
//
// Solidity: event KeyShareSubmissionComplete(uint256 blockNumber)
func (_IETHDKGEvents *IETHDKGEventsFilterer) ParseKeyShareSubmissionComplete(log types.Log) (*IETHDKGEventsKeyShareSubmissionComplete, error) {
	event := new(IETHDKGEventsKeyShareSubmissionComplete)
	if err := _IETHDKGEvents.contract.UnpackLog(event, "KeyShareSubmissionComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IETHDKGEventsKeyShareSubmittedIterator is returned from FilterKeyShareSubmitted and is used to iterate over the raw logs and unpacked data for KeyShareSubmitted events raised by the IETHDKGEvents contract.
type IETHDKGEventsKeyShareSubmittedIterator struct {
	Event *IETHDKGEventsKeyShareSubmitted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IETHDKGEventsKeyShareSubmittedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IETHDKGEventsKeyShareSubmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IETHDKGEventsKeyShareSubmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IETHDKGEventsKeyShareSubmittedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IETHDKGEventsKeyShareSubmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IETHDKGEventsKeyShareSubmitted represents a KeyShareSubmitted event raised by the IETHDKGEvents contract.
type IETHDKGEventsKeyShareSubmitted struct {
	Account                    common.Address
	Index                      *big.Int
	Nonce                      *big.Int
	KeyShareG1                 [2]*big.Int
	KeyShareG1CorrectnessProof [2]*big.Int
	KeyShareG2                 [4]*big.Int
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterKeyShareSubmitted is a free log retrieval operation binding the contract event 0x6162e2d11398e4063e4c8565dafc4fb6755bbead93747ea836a5ef73a594aaf7.
//
// Solidity: event KeyShareSubmitted(address account, uint256 index, uint256 nonce, uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2)
func (_IETHDKGEvents *IETHDKGEventsFilterer) FilterKeyShareSubmitted(opts *bind.FilterOpts) (*IETHDKGEventsKeyShareSubmittedIterator, error) {

	logs, sub, err := _IETHDKGEvents.contract.FilterLogs(opts, "KeyShareSubmitted")
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsKeyShareSubmittedIterator{contract: _IETHDKGEvents.contract, event: "KeyShareSubmitted", logs: logs, sub: sub}, nil
}

// WatchKeyShareSubmitted is a free log subscription operation binding the contract event 0x6162e2d11398e4063e4c8565dafc4fb6755bbead93747ea836a5ef73a594aaf7.
//
// Solidity: event KeyShareSubmitted(address account, uint256 index, uint256 nonce, uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2)
func (_IETHDKGEvents *IETHDKGEventsFilterer) WatchKeyShareSubmitted(opts *bind.WatchOpts, sink chan<- *IETHDKGEventsKeyShareSubmitted) (event.Subscription, error) {

	logs, sub, err := _IETHDKGEvents.contract.WatchLogs(opts, "KeyShareSubmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IETHDKGEventsKeyShareSubmitted)
				if err := _IETHDKGEvents.contract.UnpackLog(event, "KeyShareSubmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyShareSubmitted is a log parse operation binding the contract event 0x6162e2d11398e4063e4c8565dafc4fb6755bbead93747ea836a5ef73a594aaf7.
//
// Solidity: event KeyShareSubmitted(address account, uint256 index, uint256 nonce, uint256[2] keyShareG1, uint256[2] keyShareG1CorrectnessProof, uint256[4] keyShareG2)
func (_IETHDKGEvents *IETHDKGEventsFilterer) ParseKeyShareSubmitted(log types.Log) (*IETHDKGEventsKeyShareSubmitted, error) {
	event := new(IETHDKGEventsKeyShareSubmitted)
	if err := _IETHDKGEvents.contract.UnpackLog(event, "KeyShareSubmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IETHDKGEventsMPKSetIterator is returned from FilterMPKSet and is used to iterate over the raw logs and unpacked data for MPKSet events raised by the IETHDKGEvents contract.
type IETHDKGEventsMPKSetIterator struct {
	Event *IETHDKGEventsMPKSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IETHDKGEventsMPKSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IETHDKGEventsMPKSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IETHDKGEventsMPKSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IETHDKGEventsMPKSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IETHDKGEventsMPKSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IETHDKGEventsMPKSet represents a MPKSet event raised by the IETHDKGEvents contract.
type IETHDKGEventsMPKSet struct {
	BlockNumber *big.Int
	Nonce       *big.Int
	Mpk         [4]*big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterMPKSet is a free log retrieval operation binding the contract event 0x71b1ebd27be320895a22125d6458e3363aefa6944a312ede4bf275867e6d5a71.
//
// Solidity: event MPKSet(uint256 blockNumber, uint256 nonce, uint256[4] mpk)
func (_IETHDKGEvents *IETHDKGEventsFilterer) FilterMPKSet(opts *bind.FilterOpts) (*IETHDKGEventsMPKSetIterator, error) {

	logs, sub, err := _IETHDKGEvents.contract.FilterLogs(opts, "MPKSet")
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsMPKSetIterator{contract: _IETHDKGEvents.contract, event: "MPKSet", logs: logs, sub: sub}, nil
}

// WatchMPKSet is a free log subscription operation binding the contract event 0x71b1ebd27be320895a22125d6458e3363aefa6944a312ede4bf275867e6d5a71.
//
// Solidity: event MPKSet(uint256 blockNumber, uint256 nonce, uint256[4] mpk)
func (_IETHDKGEvents *IETHDKGEventsFilterer) WatchMPKSet(opts *bind.WatchOpts, sink chan<- *IETHDKGEventsMPKSet) (event.Subscription, error) {

	logs, sub, err := _IETHDKGEvents.contract.WatchLogs(opts, "MPKSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IETHDKGEventsMPKSet)
				if err := _IETHDKGEvents.contract.UnpackLog(event, "MPKSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMPKSet is a log parse operation binding the contract event 0x71b1ebd27be320895a22125d6458e3363aefa6944a312ede4bf275867e6d5a71.
//
// Solidity: event MPKSet(uint256 blockNumber, uint256 nonce, uint256[4] mpk)
func (_IETHDKGEvents *IETHDKGEventsFilterer) ParseMPKSet(log types.Log) (*IETHDKGEventsMPKSet, error) {
	event := new(IETHDKGEventsMPKSet)
	if err := _IETHDKGEvents.contract.UnpackLog(event, "MPKSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IETHDKGEventsRegistrationCompleteIterator is returned from FilterRegistrationComplete and is used to iterate over the raw logs and unpacked data for RegistrationComplete events raised by the IETHDKGEvents contract.
type IETHDKGEventsRegistrationCompleteIterator struct {
	Event *IETHDKGEventsRegistrationComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IETHDKGEventsRegistrationCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IETHDKGEventsRegistrationComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IETHDKGEventsRegistrationComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IETHDKGEventsRegistrationCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IETHDKGEventsRegistrationCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IETHDKGEventsRegistrationComplete represents a RegistrationComplete event raised by the IETHDKGEvents contract.
type IETHDKGEventsRegistrationComplete struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRegistrationComplete is a free log retrieval operation binding the contract event 0x833013b96b786b4eca83baac286920e5e53956c21ff3894f1d9f02e97d6ed764.
//
// Solidity: event RegistrationComplete(uint256 blockNumber)
func (_IETHDKGEvents *IETHDKGEventsFilterer) FilterRegistrationComplete(opts *bind.FilterOpts) (*IETHDKGEventsRegistrationCompleteIterator, error) {

	logs, sub, err := _IETHDKGEvents.contract.FilterLogs(opts, "RegistrationComplete")
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsRegistrationCompleteIterator{contract: _IETHDKGEvents.contract, event: "RegistrationComplete", logs: logs, sub: sub}, nil
}

// WatchRegistrationComplete is a free log subscription operation binding the contract event 0x833013b96b786b4eca83baac286920e5e53956c21ff3894f1d9f02e97d6ed764.
//
// Solidity: event RegistrationComplete(uint256 blockNumber)
func (_IETHDKGEvents *IETHDKGEventsFilterer) WatchRegistrationComplete(opts *bind.WatchOpts, sink chan<- *IETHDKGEventsRegistrationComplete) (event.Subscription, error) {

	logs, sub, err := _IETHDKGEvents.contract.WatchLogs(opts, "RegistrationComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IETHDKGEventsRegistrationComplete)
				if err := _IETHDKGEvents.contract.UnpackLog(event, "RegistrationComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistrationComplete is a log parse operation binding the contract event 0x833013b96b786b4eca83baac286920e5e53956c21ff3894f1d9f02e97d6ed764.
//
// Solidity: event RegistrationComplete(uint256 blockNumber)
func (_IETHDKGEvents *IETHDKGEventsFilterer) ParseRegistrationComplete(log types.Log) (*IETHDKGEventsRegistrationComplete, error) {
	event := new(IETHDKGEventsRegistrationComplete)
	if err := _IETHDKGEvents.contract.UnpackLog(event, "RegistrationComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IETHDKGEventsRegistrationOpenedIterator is returned from FilterRegistrationOpened and is used to iterate over the raw logs and unpacked data for RegistrationOpened events raised by the IETHDKGEvents contract.
type IETHDKGEventsRegistrationOpenedIterator struct {
	Event *IETHDKGEventsRegistrationOpened // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IETHDKGEventsRegistrationOpenedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IETHDKGEventsRegistrationOpened)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IETHDKGEventsRegistrationOpened)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IETHDKGEventsRegistrationOpenedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IETHDKGEventsRegistrationOpenedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IETHDKGEventsRegistrationOpened represents a RegistrationOpened event raised by the IETHDKGEvents contract.
type IETHDKGEventsRegistrationOpened struct {
	StartBlock         *big.Int
	NumberValidators   *big.Int
	Nonce              *big.Int
	PhaseLength        *big.Int
	ConfirmationLength *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterRegistrationOpened is a free log retrieval operation binding the contract event 0xbda431b9b63510f1398bf33d700e013315bcba905507078a1780f13ea5b354b9.
//
// Solidity: event RegistrationOpened(uint256 startBlock, uint256 numberValidators, uint256 nonce, uint256 phaseLength, uint256 confirmationLength)
func (_IETHDKGEvents *IETHDKGEventsFilterer) FilterRegistrationOpened(opts *bind.FilterOpts) (*IETHDKGEventsRegistrationOpenedIterator, error) {

	logs, sub, err := _IETHDKGEvents.contract.FilterLogs(opts, "RegistrationOpened")
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsRegistrationOpenedIterator{contract: _IETHDKGEvents.contract, event: "RegistrationOpened", logs: logs, sub: sub}, nil
}

// WatchRegistrationOpened is a free log subscription operation binding the contract event 0xbda431b9b63510f1398bf33d700e013315bcba905507078a1780f13ea5b354b9.
//
// Solidity: event RegistrationOpened(uint256 startBlock, uint256 numberValidators, uint256 nonce, uint256 phaseLength, uint256 confirmationLength)
func (_IETHDKGEvents *IETHDKGEventsFilterer) WatchRegistrationOpened(opts *bind.WatchOpts, sink chan<- *IETHDKGEventsRegistrationOpened) (event.Subscription, error) {

	logs, sub, err := _IETHDKGEvents.contract.WatchLogs(opts, "RegistrationOpened")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IETHDKGEventsRegistrationOpened)
				if err := _IETHDKGEvents.contract.UnpackLog(event, "RegistrationOpened", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistrationOpened is a log parse operation binding the contract event 0xbda431b9b63510f1398bf33d700e013315bcba905507078a1780f13ea5b354b9.
//
// Solidity: event RegistrationOpened(uint256 startBlock, uint256 numberValidators, uint256 nonce, uint256 phaseLength, uint256 confirmationLength)
func (_IETHDKGEvents *IETHDKGEventsFilterer) ParseRegistrationOpened(log types.Log) (*IETHDKGEventsRegistrationOpened, error) {
	event := new(IETHDKGEventsRegistrationOpened)
	if err := _IETHDKGEvents.contract.UnpackLog(event, "RegistrationOpened", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IETHDKGEventsShareDistributionCompleteIterator is returned from FilterShareDistributionComplete and is used to iterate over the raw logs and unpacked data for ShareDistributionComplete events raised by the IETHDKGEvents contract.
type IETHDKGEventsShareDistributionCompleteIterator struct {
	Event *IETHDKGEventsShareDistributionComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IETHDKGEventsShareDistributionCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IETHDKGEventsShareDistributionComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IETHDKGEventsShareDistributionComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IETHDKGEventsShareDistributionCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IETHDKGEventsShareDistributionCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IETHDKGEventsShareDistributionComplete represents a ShareDistributionComplete event raised by the IETHDKGEvents contract.
type IETHDKGEventsShareDistributionComplete struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterShareDistributionComplete is a free log retrieval operation binding the contract event 0xbfe94ffef5ddde4d25ac7b652f3f67686ea63f9badbfe1f25451e26fc262d11c.
//
// Solidity: event ShareDistributionComplete(uint256 blockNumber)
func (_IETHDKGEvents *IETHDKGEventsFilterer) FilterShareDistributionComplete(opts *bind.FilterOpts) (*IETHDKGEventsShareDistributionCompleteIterator, error) {

	logs, sub, err := _IETHDKGEvents.contract.FilterLogs(opts, "ShareDistributionComplete")
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsShareDistributionCompleteIterator{contract: _IETHDKGEvents.contract, event: "ShareDistributionComplete", logs: logs, sub: sub}, nil
}

// WatchShareDistributionComplete is a free log subscription operation binding the contract event 0xbfe94ffef5ddde4d25ac7b652f3f67686ea63f9badbfe1f25451e26fc262d11c.
//
// Solidity: event ShareDistributionComplete(uint256 blockNumber)
func (_IETHDKGEvents *IETHDKGEventsFilterer) WatchShareDistributionComplete(opts *bind.WatchOpts, sink chan<- *IETHDKGEventsShareDistributionComplete) (event.Subscription, error) {

	logs, sub, err := _IETHDKGEvents.contract.WatchLogs(opts, "ShareDistributionComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IETHDKGEventsShareDistributionComplete)
				if err := _IETHDKGEvents.contract.UnpackLog(event, "ShareDistributionComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseShareDistributionComplete is a log parse operation binding the contract event 0xbfe94ffef5ddde4d25ac7b652f3f67686ea63f9badbfe1f25451e26fc262d11c.
//
// Solidity: event ShareDistributionComplete(uint256 blockNumber)
func (_IETHDKGEvents *IETHDKGEventsFilterer) ParseShareDistributionComplete(log types.Log) (*IETHDKGEventsShareDistributionComplete, error) {
	event := new(IETHDKGEventsShareDistributionComplete)
	if err := _IETHDKGEvents.contract.UnpackLog(event, "ShareDistributionComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IETHDKGEventsSharesDistributedIterator is returned from FilterSharesDistributed and is used to iterate over the raw logs and unpacked data for SharesDistributed events raised by the IETHDKGEvents contract.
type IETHDKGEventsSharesDistributedIterator struct {
	Event *IETHDKGEventsSharesDistributed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IETHDKGEventsSharesDistributedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IETHDKGEventsSharesDistributed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IETHDKGEventsSharesDistributed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IETHDKGEventsSharesDistributedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IETHDKGEventsSharesDistributedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IETHDKGEventsSharesDistributed represents a SharesDistributed event raised by the IETHDKGEvents contract.
type IETHDKGEventsSharesDistributed struct {
	Account         common.Address
	Index           *big.Int
	Nonce           *big.Int
	EncryptedShares []*big.Int
	Commitments     [][2]*big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterSharesDistributed is a free log retrieval operation binding the contract event 0xf0c8b0ef2867c2b4639b404a0296b6bbf0bf97e20856af42144a5a6035c0d0d2.
//
// Solidity: event SharesDistributed(address account, uint256 index, uint256 nonce, uint256[] encryptedShares, uint256[2][] commitments)
func (_IETHDKGEvents *IETHDKGEventsFilterer) FilterSharesDistributed(opts *bind.FilterOpts) (*IETHDKGEventsSharesDistributedIterator, error) {

	logs, sub, err := _IETHDKGEvents.contract.FilterLogs(opts, "SharesDistributed")
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsSharesDistributedIterator{contract: _IETHDKGEvents.contract, event: "SharesDistributed", logs: logs, sub: sub}, nil
}

// WatchSharesDistributed is a free log subscription operation binding the contract event 0xf0c8b0ef2867c2b4639b404a0296b6bbf0bf97e20856af42144a5a6035c0d0d2.
//
// Solidity: event SharesDistributed(address account, uint256 index, uint256 nonce, uint256[] encryptedShares, uint256[2][] commitments)
func (_IETHDKGEvents *IETHDKGEventsFilterer) WatchSharesDistributed(opts *bind.WatchOpts, sink chan<- *IETHDKGEventsSharesDistributed) (event.Subscription, error) {

	logs, sub, err := _IETHDKGEvents.contract.WatchLogs(opts, "SharesDistributed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IETHDKGEventsSharesDistributed)
				if err := _IETHDKGEvents.contract.UnpackLog(event, "SharesDistributed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSharesDistributed is a log parse operation binding the contract event 0xf0c8b0ef2867c2b4639b404a0296b6bbf0bf97e20856af42144a5a6035c0d0d2.
//
// Solidity: event SharesDistributed(address account, uint256 index, uint256 nonce, uint256[] encryptedShares, uint256[2][] commitments)
func (_IETHDKGEvents *IETHDKGEventsFilterer) ParseSharesDistributed(log types.Log) (*IETHDKGEventsSharesDistributed, error) {
	event := new(IETHDKGEventsSharesDistributed)
	if err := _IETHDKGEvents.contract.UnpackLog(event, "SharesDistributed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IETHDKGEventsValidatorMemberAddedIterator is returned from FilterValidatorMemberAdded and is used to iterate over the raw logs and unpacked data for ValidatorMemberAdded events raised by the IETHDKGEvents contract.
type IETHDKGEventsValidatorMemberAddedIterator struct {
	Event *IETHDKGEventsValidatorMemberAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IETHDKGEventsValidatorMemberAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IETHDKGEventsValidatorMemberAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IETHDKGEventsValidatorMemberAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IETHDKGEventsValidatorMemberAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IETHDKGEventsValidatorMemberAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IETHDKGEventsValidatorMemberAdded represents a ValidatorMemberAdded event raised by the IETHDKGEvents contract.
type IETHDKGEventsValidatorMemberAdded struct {
	Account common.Address
	Index   *big.Int
	Nonce   *big.Int
	Epoch   *big.Int
	Share0  *big.Int
	Share1  *big.Int
	Share2  *big.Int
	Share3  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterValidatorMemberAdded is a free log retrieval operation binding the contract event 0x09b90b08bbc3dbe22e9d2a0bc9c2c7614c7511cd0ad72177727a1e762115bf06.
//
// Solidity: event ValidatorMemberAdded(address account, uint256 index, uint256 nonce, uint256 epoch, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_IETHDKGEvents *IETHDKGEventsFilterer) FilterValidatorMemberAdded(opts *bind.FilterOpts) (*IETHDKGEventsValidatorMemberAddedIterator, error) {

	logs, sub, err := _IETHDKGEvents.contract.FilterLogs(opts, "ValidatorMemberAdded")
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsValidatorMemberAddedIterator{contract: _IETHDKGEvents.contract, event: "ValidatorMemberAdded", logs: logs, sub: sub}, nil
}

// WatchValidatorMemberAdded is a free log subscription operation binding the contract event 0x09b90b08bbc3dbe22e9d2a0bc9c2c7614c7511cd0ad72177727a1e762115bf06.
//
// Solidity: event ValidatorMemberAdded(address account, uint256 index, uint256 nonce, uint256 epoch, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_IETHDKGEvents *IETHDKGEventsFilterer) WatchValidatorMemberAdded(opts *bind.WatchOpts, sink chan<- *IETHDKGEventsValidatorMemberAdded) (event.Subscription, error) {

	logs, sub, err := _IETHDKGEvents.contract.WatchLogs(opts, "ValidatorMemberAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IETHDKGEventsValidatorMemberAdded)
				if err := _IETHDKGEvents.contract.UnpackLog(event, "ValidatorMemberAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorMemberAdded is a log parse operation binding the contract event 0x09b90b08bbc3dbe22e9d2a0bc9c2c7614c7511cd0ad72177727a1e762115bf06.
//
// Solidity: event ValidatorMemberAdded(address account, uint256 index, uint256 nonce, uint256 epoch, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_IETHDKGEvents *IETHDKGEventsFilterer) ParseValidatorMemberAdded(log types.Log) (*IETHDKGEventsValidatorMemberAdded, error) {
	event := new(IETHDKGEventsValidatorMemberAdded)
	if err := _IETHDKGEvents.contract.UnpackLog(event, "ValidatorMemberAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IETHDKGEventsValidatorSetCompletedIterator is returned from FilterValidatorSetCompleted and is used to iterate over the raw logs and unpacked data for ValidatorSetCompleted events raised by the IETHDKGEvents contract.
type IETHDKGEventsValidatorSetCompletedIterator struct {
	Event *IETHDKGEventsValidatorSetCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IETHDKGEventsValidatorSetCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IETHDKGEventsValidatorSetCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IETHDKGEventsValidatorSetCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IETHDKGEventsValidatorSetCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IETHDKGEventsValidatorSetCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IETHDKGEventsValidatorSetCompleted represents a ValidatorSetCompleted event raised by the IETHDKGEvents contract.
type IETHDKGEventsValidatorSetCompleted struct {
	ValidatorCount *big.Int
	Nonce          *big.Int
	Epoch          *big.Int
	EthHeight      *big.Int
	MadHeight      *big.Int
	GroupKey0      *big.Int
	GroupKey1      *big.Int
	GroupKey2      *big.Int
	GroupKey3      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterValidatorSetCompleted is a free log retrieval operation binding the contract event 0xd7237b781669fa700ecf77be6cd8fa0f4b98b1a24ac584a9b6b44c509216718a.
//
// Solidity: event ValidatorSetCompleted(uint256 validatorCount, uint256 nonce, uint256 epoch, uint256 ethHeight, uint256 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_IETHDKGEvents *IETHDKGEventsFilterer) FilterValidatorSetCompleted(opts *bind.FilterOpts) (*IETHDKGEventsValidatorSetCompletedIterator, error) {

	logs, sub, err := _IETHDKGEvents.contract.FilterLogs(opts, "ValidatorSetCompleted")
	if err != nil {
		return nil, err
	}
	return &IETHDKGEventsValidatorSetCompletedIterator{contract: _IETHDKGEvents.contract, event: "ValidatorSetCompleted", logs: logs, sub: sub}, nil
}

// WatchValidatorSetCompleted is a free log subscription operation binding the contract event 0xd7237b781669fa700ecf77be6cd8fa0f4b98b1a24ac584a9b6b44c509216718a.
//
// Solidity: event ValidatorSetCompleted(uint256 validatorCount, uint256 nonce, uint256 epoch, uint256 ethHeight, uint256 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_IETHDKGEvents *IETHDKGEventsFilterer) WatchValidatorSetCompleted(opts *bind.WatchOpts, sink chan<- *IETHDKGEventsValidatorSetCompleted) (event.Subscription, error) {

	logs, sub, err := _IETHDKGEvents.contract.WatchLogs(opts, "ValidatorSetCompleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IETHDKGEventsValidatorSetCompleted)
				if err := _IETHDKGEvents.contract.UnpackLog(event, "ValidatorSetCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorSetCompleted is a log parse operation binding the contract event 0xd7237b781669fa700ecf77be6cd8fa0f4b98b1a24ac584a9b6b44c509216718a.
//
// Solidity: event ValidatorSetCompleted(uint256 validatorCount, uint256 nonce, uint256 epoch, uint256 ethHeight, uint256 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_IETHDKGEvents *IETHDKGEventsFilterer) ParseValidatorSetCompleted(log types.Log) (*IETHDKGEventsValidatorSetCompleted, error) {
	event := new(IETHDKGEventsValidatorSetCompleted)
	if err := _IETHDKGEvents.contract.UnpackLog(event, "ValidatorSetCompleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IGovernanceManagerMetaData contains all meta data concerning the IGovernanceManager contract.
var IGovernanceManagerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"allowedProposal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// IGovernanceManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use IGovernanceManagerMetaData.ABI instead.
var IGovernanceManagerABI = IGovernanceManagerMetaData.ABI

// IGovernanceManager is an auto generated Go binding around an Ethereum contract.
type IGovernanceManager struct {
	IGovernanceManagerCaller     // Read-only binding to the contract
	IGovernanceManagerTransactor // Write-only binding to the contract
	IGovernanceManagerFilterer   // Log filterer for contract events
}

// IGovernanceManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type IGovernanceManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IGovernanceManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IGovernanceManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IGovernanceManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IGovernanceManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IGovernanceManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IGovernanceManagerSession struct {
	Contract     *IGovernanceManager // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// IGovernanceManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IGovernanceManagerCallerSession struct {
	Contract *IGovernanceManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// IGovernanceManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IGovernanceManagerTransactorSession struct {
	Contract     *IGovernanceManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// IGovernanceManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type IGovernanceManagerRaw struct {
	Contract *IGovernanceManager // Generic contract binding to access the raw methods on
}

// IGovernanceManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IGovernanceManagerCallerRaw struct {
	Contract *IGovernanceManagerCaller // Generic read-only contract binding to access the raw methods on
}

// IGovernanceManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IGovernanceManagerTransactorRaw struct {
	Contract *IGovernanceManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIGovernanceManager creates a new instance of IGovernanceManager, bound to a specific deployed contract.
func NewIGovernanceManager(address common.Address, backend bind.ContractBackend) (*IGovernanceManager, error) {
	contract, err := bindIGovernanceManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IGovernanceManager{IGovernanceManagerCaller: IGovernanceManagerCaller{contract: contract}, IGovernanceManagerTransactor: IGovernanceManagerTransactor{contract: contract}, IGovernanceManagerFilterer: IGovernanceManagerFilterer{contract: contract}}, nil
}

// NewIGovernanceManagerCaller creates a new read-only instance of IGovernanceManager, bound to a specific deployed contract.
func NewIGovernanceManagerCaller(address common.Address, caller bind.ContractCaller) (*IGovernanceManagerCaller, error) {
	contract, err := bindIGovernanceManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IGovernanceManagerCaller{contract: contract}, nil
}

// NewIGovernanceManagerTransactor creates a new write-only instance of IGovernanceManager, bound to a specific deployed contract.
func NewIGovernanceManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*IGovernanceManagerTransactor, error) {
	contract, err := bindIGovernanceManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IGovernanceManagerTransactor{contract: contract}, nil
}

// NewIGovernanceManagerFilterer creates a new log filterer instance of IGovernanceManager, bound to a specific deployed contract.
func NewIGovernanceManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*IGovernanceManagerFilterer, error) {
	contract, err := bindIGovernanceManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IGovernanceManagerFilterer{contract: contract}, nil
}

// bindIGovernanceManager binds a generic wrapper to an already deployed contract.
func bindIGovernanceManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IGovernanceManagerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IGovernanceManager *IGovernanceManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IGovernanceManager.Contract.IGovernanceManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IGovernanceManager *IGovernanceManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IGovernanceManager.Contract.IGovernanceManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IGovernanceManager *IGovernanceManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IGovernanceManager.Contract.IGovernanceManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IGovernanceManager *IGovernanceManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IGovernanceManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IGovernanceManager *IGovernanceManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IGovernanceManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IGovernanceManager *IGovernanceManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IGovernanceManager.Contract.contract.Transact(opts, method, params...)
}

// AllowedProposal is a free data retrieval call binding the contract method 0xf4f58000.
//
// Solidity: function allowedProposal() view returns(address)
func (_IGovernanceManager *IGovernanceManagerCaller) AllowedProposal(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IGovernanceManager.contract.Call(opts, &out, "allowedProposal")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AllowedProposal is a free data retrieval call binding the contract method 0xf4f58000.
//
// Solidity: function allowedProposal() view returns(address)
func (_IGovernanceManager *IGovernanceManagerSession) AllowedProposal() (common.Address, error) {
	return _IGovernanceManager.Contract.AllowedProposal(&_IGovernanceManager.CallOpts)
}

// AllowedProposal is a free data retrieval call binding the contract method 0xf4f58000.
//
// Solidity: function allowedProposal() view returns(address)
func (_IGovernanceManager *IGovernanceManagerCallerSession) AllowedProposal() (common.Address, error) {
	return _IGovernanceManager.Contract.AllowedProposal(&_IGovernanceManager.CallOpts)
}

// IMagicEthTransferMetaData contains all meta data concerning the IMagicEthTransfer contract.
var IMagicEthTransferMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"magic_\",\"type\":\"uint8\"}],\"name\":\"depositEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
}

// IMagicEthTransferABI is the input ABI used to generate the binding from.
// Deprecated: Use IMagicEthTransferMetaData.ABI instead.
var IMagicEthTransferABI = IMagicEthTransferMetaData.ABI

// IMagicEthTransfer is an auto generated Go binding around an Ethereum contract.
type IMagicEthTransfer struct {
	IMagicEthTransferCaller     // Read-only binding to the contract
	IMagicEthTransferTransactor // Write-only binding to the contract
	IMagicEthTransferFilterer   // Log filterer for contract events
}

// IMagicEthTransferCaller is an auto generated read-only Go binding around an Ethereum contract.
type IMagicEthTransferCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IMagicEthTransferTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IMagicEthTransferTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IMagicEthTransferFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IMagicEthTransferFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IMagicEthTransferSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IMagicEthTransferSession struct {
	Contract     *IMagicEthTransfer // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// IMagicEthTransferCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IMagicEthTransferCallerSession struct {
	Contract *IMagicEthTransferCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// IMagicEthTransferTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IMagicEthTransferTransactorSession struct {
	Contract     *IMagicEthTransferTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// IMagicEthTransferRaw is an auto generated low-level Go binding around an Ethereum contract.
type IMagicEthTransferRaw struct {
	Contract *IMagicEthTransfer // Generic contract binding to access the raw methods on
}

// IMagicEthTransferCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IMagicEthTransferCallerRaw struct {
	Contract *IMagicEthTransferCaller // Generic read-only contract binding to access the raw methods on
}

// IMagicEthTransferTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IMagicEthTransferTransactorRaw struct {
	Contract *IMagicEthTransferTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIMagicEthTransfer creates a new instance of IMagicEthTransfer, bound to a specific deployed contract.
func NewIMagicEthTransfer(address common.Address, backend bind.ContractBackend) (*IMagicEthTransfer, error) {
	contract, err := bindIMagicEthTransfer(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IMagicEthTransfer{IMagicEthTransferCaller: IMagicEthTransferCaller{contract: contract}, IMagicEthTransferTransactor: IMagicEthTransferTransactor{contract: contract}, IMagicEthTransferFilterer: IMagicEthTransferFilterer{contract: contract}}, nil
}

// NewIMagicEthTransferCaller creates a new read-only instance of IMagicEthTransfer, bound to a specific deployed contract.
func NewIMagicEthTransferCaller(address common.Address, caller bind.ContractCaller) (*IMagicEthTransferCaller, error) {
	contract, err := bindIMagicEthTransfer(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IMagicEthTransferCaller{contract: contract}, nil
}

// NewIMagicEthTransferTransactor creates a new write-only instance of IMagicEthTransfer, bound to a specific deployed contract.
func NewIMagicEthTransferTransactor(address common.Address, transactor bind.ContractTransactor) (*IMagicEthTransferTransactor, error) {
	contract, err := bindIMagicEthTransfer(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IMagicEthTransferTransactor{contract: contract}, nil
}

// NewIMagicEthTransferFilterer creates a new log filterer instance of IMagicEthTransfer, bound to a specific deployed contract.
func NewIMagicEthTransferFilterer(address common.Address, filterer bind.ContractFilterer) (*IMagicEthTransferFilterer, error) {
	contract, err := bindIMagicEthTransfer(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IMagicEthTransferFilterer{contract: contract}, nil
}

// bindIMagicEthTransfer binds a generic wrapper to an already deployed contract.
func bindIMagicEthTransfer(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IMagicEthTransferABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IMagicEthTransfer *IMagicEthTransferRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IMagicEthTransfer.Contract.IMagicEthTransferCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IMagicEthTransfer *IMagicEthTransferRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IMagicEthTransfer.Contract.IMagicEthTransferTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IMagicEthTransfer *IMagicEthTransferRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IMagicEthTransfer.Contract.IMagicEthTransferTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IMagicEthTransfer *IMagicEthTransferCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IMagicEthTransfer.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IMagicEthTransfer *IMagicEthTransferTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IMagicEthTransfer.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IMagicEthTransfer *IMagicEthTransferTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IMagicEthTransfer.Contract.contract.Transact(opts, method, params...)
}

// DepositEth is a paid mutator transaction binding the contract method 0x99a89ecc.
//
// Solidity: function depositEth(uint8 magic_) payable returns()
func (_IMagicEthTransfer *IMagicEthTransferTransactor) DepositEth(opts *bind.TransactOpts, magic_ uint8) (*types.Transaction, error) {
	return _IMagicEthTransfer.contract.Transact(opts, "depositEth", magic_)
}

// DepositEth is a paid mutator transaction binding the contract method 0x99a89ecc.
//
// Solidity: function depositEth(uint8 magic_) payable returns()
func (_IMagicEthTransfer *IMagicEthTransferSession) DepositEth(magic_ uint8) (*types.Transaction, error) {
	return _IMagicEthTransfer.Contract.DepositEth(&_IMagicEthTransfer.TransactOpts, magic_)
}

// DepositEth is a paid mutator transaction binding the contract method 0x99a89ecc.
//
// Solidity: function depositEth(uint8 magic_) payable returns()
func (_IMagicEthTransfer *IMagicEthTransferTransactorSession) DepositEth(magic_ uint8) (*types.Transaction, error) {
	return _IMagicEthTransfer.Contract.DepositEth(&_IMagicEthTransfer.TransactOpts, magic_)
}

// INFTStakeMetaData contains all meta data concerning the INFTStake contract.
var INFTStakeMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payoutEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoutMadToken\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"burnTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payoutEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoutMadToken\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"collectEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"collectEthTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"collectToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"collectTokenTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"magic_\",\"type\":\"uint8\"}],\"name\":\"depositEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"magic_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"estimateEthCollection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateExcessEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"excess\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateExcessToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"excess\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"estimateTokenCollection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccumulatorScaleFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthAccumulator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accumulator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slush\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freeAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawFreeAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumulatorEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumulatorToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenAccumulator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accumulator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slush\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalReserveEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalReserveMadToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration_\",\"type\":\"uint256\"}],\"name\":\"lockOwnPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration_\",\"type\":\"uint256\"}],\"name\":\"lockPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration_\",\"type\":\"uint256\"}],\"name\":\"lockWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration_\",\"type\":\"uint256\"}],\"name\":\"mintTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"}],\"name\":\"skimExcessEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"excess\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"}],\"name\":\"skimExcessToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"excess\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// INFTStakeABI is the input ABI used to generate the binding from.
// Deprecated: Use INFTStakeMetaData.ABI instead.
var INFTStakeABI = INFTStakeMetaData.ABI

// INFTStake is an auto generated Go binding around an Ethereum contract.
type INFTStake struct {
	INFTStakeCaller     // Read-only binding to the contract
	INFTStakeTransactor // Write-only binding to the contract
	INFTStakeFilterer   // Log filterer for contract events
}

// INFTStakeCaller is an auto generated read-only Go binding around an Ethereum contract.
type INFTStakeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// INFTStakeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type INFTStakeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// INFTStakeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type INFTStakeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// INFTStakeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type INFTStakeSession struct {
	Contract     *INFTStake        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// INFTStakeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type INFTStakeCallerSession struct {
	Contract *INFTStakeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// INFTStakeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type INFTStakeTransactorSession struct {
	Contract     *INFTStakeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// INFTStakeRaw is an auto generated low-level Go binding around an Ethereum contract.
type INFTStakeRaw struct {
	Contract *INFTStake // Generic contract binding to access the raw methods on
}

// INFTStakeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type INFTStakeCallerRaw struct {
	Contract *INFTStakeCaller // Generic read-only contract binding to access the raw methods on
}

// INFTStakeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type INFTStakeTransactorRaw struct {
	Contract *INFTStakeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewINFTStake creates a new instance of INFTStake, bound to a specific deployed contract.
func NewINFTStake(address common.Address, backend bind.ContractBackend) (*INFTStake, error) {
	contract, err := bindINFTStake(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &INFTStake{INFTStakeCaller: INFTStakeCaller{contract: contract}, INFTStakeTransactor: INFTStakeTransactor{contract: contract}, INFTStakeFilterer: INFTStakeFilterer{contract: contract}}, nil
}

// NewINFTStakeCaller creates a new read-only instance of INFTStake, bound to a specific deployed contract.
func NewINFTStakeCaller(address common.Address, caller bind.ContractCaller) (*INFTStakeCaller, error) {
	contract, err := bindINFTStake(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &INFTStakeCaller{contract: contract}, nil
}

// NewINFTStakeTransactor creates a new write-only instance of INFTStake, bound to a specific deployed contract.
func NewINFTStakeTransactor(address common.Address, transactor bind.ContractTransactor) (*INFTStakeTransactor, error) {
	contract, err := bindINFTStake(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &INFTStakeTransactor{contract: contract}, nil
}

// NewINFTStakeFilterer creates a new log filterer instance of INFTStake, bound to a specific deployed contract.
func NewINFTStakeFilterer(address common.Address, filterer bind.ContractFilterer) (*INFTStakeFilterer, error) {
	contract, err := bindINFTStake(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &INFTStakeFilterer{contract: contract}, nil
}

// bindINFTStake binds a generic wrapper to an already deployed contract.
func bindINFTStake(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(INFTStakeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_INFTStake *INFTStakeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _INFTStake.Contract.INFTStakeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_INFTStake *INFTStakeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _INFTStake.Contract.INFTStakeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_INFTStake *INFTStakeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _INFTStake.Contract.INFTStakeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_INFTStake *INFTStakeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _INFTStake.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_INFTStake *INFTStakeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _INFTStake.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_INFTStake *INFTStakeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _INFTStake.Contract.contract.Transact(opts, method, params...)
}

// EstimateEthCollection is a free data retrieval call binding the contract method 0x20ea0d48.
//
// Solidity: function estimateEthCollection(uint256 tokenID_) view returns(uint256 payout)
func (_INFTStake *INFTStakeCaller) EstimateEthCollection(opts *bind.CallOpts, tokenID_ *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _INFTStake.contract.Call(opts, &out, "estimateEthCollection", tokenID_)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EstimateEthCollection is a free data retrieval call binding the contract method 0x20ea0d48.
//
// Solidity: function estimateEthCollection(uint256 tokenID_) view returns(uint256 payout)
func (_INFTStake *INFTStakeSession) EstimateEthCollection(tokenID_ *big.Int) (*big.Int, error) {
	return _INFTStake.Contract.EstimateEthCollection(&_INFTStake.CallOpts, tokenID_)
}

// EstimateEthCollection is a free data retrieval call binding the contract method 0x20ea0d48.
//
// Solidity: function estimateEthCollection(uint256 tokenID_) view returns(uint256 payout)
func (_INFTStake *INFTStakeCallerSession) EstimateEthCollection(tokenID_ *big.Int) (*big.Int, error) {
	return _INFTStake.Contract.EstimateEthCollection(&_INFTStake.CallOpts, tokenID_)
}

// EstimateExcessEth is a free data retrieval call binding the contract method 0x905953ed.
//
// Solidity: function estimateExcessEth() view returns(uint256 excess)
func (_INFTStake *INFTStakeCaller) EstimateExcessEth(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _INFTStake.contract.Call(opts, &out, "estimateExcessEth")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EstimateExcessEth is a free data retrieval call binding the contract method 0x905953ed.
//
// Solidity: function estimateExcessEth() view returns(uint256 excess)
func (_INFTStake *INFTStakeSession) EstimateExcessEth() (*big.Int, error) {
	return _INFTStake.Contract.EstimateExcessEth(&_INFTStake.CallOpts)
}

// EstimateExcessEth is a free data retrieval call binding the contract method 0x905953ed.
//
// Solidity: function estimateExcessEth() view returns(uint256 excess)
func (_INFTStake *INFTStakeCallerSession) EstimateExcessEth() (*big.Int, error) {
	return _INFTStake.Contract.EstimateExcessEth(&_INFTStake.CallOpts)
}

// EstimateExcessToken is a free data retrieval call binding the contract method 0x3eed3eff.
//
// Solidity: function estimateExcessToken() view returns(uint256 excess)
func (_INFTStake *INFTStakeCaller) EstimateExcessToken(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _INFTStake.contract.Call(opts, &out, "estimateExcessToken")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EstimateExcessToken is a free data retrieval call binding the contract method 0x3eed3eff.
//
// Solidity: function estimateExcessToken() view returns(uint256 excess)
func (_INFTStake *INFTStakeSession) EstimateExcessToken() (*big.Int, error) {
	return _INFTStake.Contract.EstimateExcessToken(&_INFTStake.CallOpts)
}

// EstimateExcessToken is a free data retrieval call binding the contract method 0x3eed3eff.
//
// Solidity: function estimateExcessToken() view returns(uint256 excess)
func (_INFTStake *INFTStakeCallerSession) EstimateExcessToken() (*big.Int, error) {
	return _INFTStake.Contract.EstimateExcessToken(&_INFTStake.CallOpts)
}

// EstimateTokenCollection is a free data retrieval call binding the contract method 0x93c5748d.
//
// Solidity: function estimateTokenCollection(uint256 tokenID_) view returns(uint256 payout)
func (_INFTStake *INFTStakeCaller) EstimateTokenCollection(opts *bind.CallOpts, tokenID_ *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _INFTStake.contract.Call(opts, &out, "estimateTokenCollection", tokenID_)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EstimateTokenCollection is a free data retrieval call binding the contract method 0x93c5748d.
//
// Solidity: function estimateTokenCollection(uint256 tokenID_) view returns(uint256 payout)
func (_INFTStake *INFTStakeSession) EstimateTokenCollection(tokenID_ *big.Int) (*big.Int, error) {
	return _INFTStake.Contract.EstimateTokenCollection(&_INFTStake.CallOpts, tokenID_)
}

// EstimateTokenCollection is a free data retrieval call binding the contract method 0x93c5748d.
//
// Solidity: function estimateTokenCollection(uint256 tokenID_) view returns(uint256 payout)
func (_INFTStake *INFTStakeCallerSession) EstimateTokenCollection(tokenID_ *big.Int) (*big.Int, error) {
	return _INFTStake.Contract.EstimateTokenCollection(&_INFTStake.CallOpts, tokenID_)
}

// GetAccumulatorScaleFactor is a free data retrieval call binding the contract method 0x99785132.
//
// Solidity: function getAccumulatorScaleFactor() view returns(uint256)
func (_INFTStake *INFTStakeCaller) GetAccumulatorScaleFactor(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _INFTStake.contract.Call(opts, &out, "getAccumulatorScaleFactor")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAccumulatorScaleFactor is a free data retrieval call binding the contract method 0x99785132.
//
// Solidity: function getAccumulatorScaleFactor() view returns(uint256)
func (_INFTStake *INFTStakeSession) GetAccumulatorScaleFactor() (*big.Int, error) {
	return _INFTStake.Contract.GetAccumulatorScaleFactor(&_INFTStake.CallOpts)
}

// GetAccumulatorScaleFactor is a free data retrieval call binding the contract method 0x99785132.
//
// Solidity: function getAccumulatorScaleFactor() view returns(uint256)
func (_INFTStake *INFTStakeCallerSession) GetAccumulatorScaleFactor() (*big.Int, error) {
	return _INFTStake.Contract.GetAccumulatorScaleFactor(&_INFTStake.CallOpts)
}

// GetEthAccumulator is a free data retrieval call binding the contract method 0x548652d2.
//
// Solidity: function getEthAccumulator() view returns(uint256 accumulator, uint256 slush)
func (_INFTStake *INFTStakeCaller) GetEthAccumulator(opts *bind.CallOpts) (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	var out []interface{}
	err := _INFTStake.contract.Call(opts, &out, "getEthAccumulator")

	outstruct := new(struct {
		Accumulator *big.Int
		Slush       *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Accumulator = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Slush = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetEthAccumulator is a free data retrieval call binding the contract method 0x548652d2.
//
// Solidity: function getEthAccumulator() view returns(uint256 accumulator, uint256 slush)
func (_INFTStake *INFTStakeSession) GetEthAccumulator() (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	return _INFTStake.Contract.GetEthAccumulator(&_INFTStake.CallOpts)
}

// GetEthAccumulator is a free data retrieval call binding the contract method 0x548652d2.
//
// Solidity: function getEthAccumulator() view returns(uint256 accumulator, uint256 slush)
func (_INFTStake *INFTStakeCallerSession) GetEthAccumulator() (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	return _INFTStake.Contract.GetEthAccumulator(&_INFTStake.CallOpts)
}

// GetPosition is a free data retrieval call binding the contract method 0xeb02c301.
//
// Solidity: function getPosition(uint256 tokenID_) view returns(uint256 shares, uint256 freeAfter, uint256 withdrawFreeAfter, uint256 accumulatorEth, uint256 accumulatorToken)
func (_INFTStake *INFTStakeCaller) GetPosition(opts *bind.CallOpts, tokenID_ *big.Int) (struct {
	Shares            *big.Int
	FreeAfter         *big.Int
	WithdrawFreeAfter *big.Int
	AccumulatorEth    *big.Int
	AccumulatorToken  *big.Int
}, error) {
	var out []interface{}
	err := _INFTStake.contract.Call(opts, &out, "getPosition", tokenID_)

	outstruct := new(struct {
		Shares            *big.Int
		FreeAfter         *big.Int
		WithdrawFreeAfter *big.Int
		AccumulatorEth    *big.Int
		AccumulatorToken  *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Shares = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.FreeAfter = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.WithdrawFreeAfter = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.AccumulatorEth = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.AccumulatorToken = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetPosition is a free data retrieval call binding the contract method 0xeb02c301.
//
// Solidity: function getPosition(uint256 tokenID_) view returns(uint256 shares, uint256 freeAfter, uint256 withdrawFreeAfter, uint256 accumulatorEth, uint256 accumulatorToken)
func (_INFTStake *INFTStakeSession) GetPosition(tokenID_ *big.Int) (struct {
	Shares            *big.Int
	FreeAfter         *big.Int
	WithdrawFreeAfter *big.Int
	AccumulatorEth    *big.Int
	AccumulatorToken  *big.Int
}, error) {
	return _INFTStake.Contract.GetPosition(&_INFTStake.CallOpts, tokenID_)
}

// GetPosition is a free data retrieval call binding the contract method 0xeb02c301.
//
// Solidity: function getPosition(uint256 tokenID_) view returns(uint256 shares, uint256 freeAfter, uint256 withdrawFreeAfter, uint256 accumulatorEth, uint256 accumulatorToken)
func (_INFTStake *INFTStakeCallerSession) GetPosition(tokenID_ *big.Int) (struct {
	Shares            *big.Int
	FreeAfter         *big.Int
	WithdrawFreeAfter *big.Int
	AccumulatorEth    *big.Int
	AccumulatorToken  *big.Int
}, error) {
	return _INFTStake.Contract.GetPosition(&_INFTStake.CallOpts, tokenID_)
}

// GetTokenAccumulator is a free data retrieval call binding the contract method 0xc47c6e14.
//
// Solidity: function getTokenAccumulator() view returns(uint256 accumulator, uint256 slush)
func (_INFTStake *INFTStakeCaller) GetTokenAccumulator(opts *bind.CallOpts) (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	var out []interface{}
	err := _INFTStake.contract.Call(opts, &out, "getTokenAccumulator")

	outstruct := new(struct {
		Accumulator *big.Int
		Slush       *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Accumulator = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Slush = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetTokenAccumulator is a free data retrieval call binding the contract method 0xc47c6e14.
//
// Solidity: function getTokenAccumulator() view returns(uint256 accumulator, uint256 slush)
func (_INFTStake *INFTStakeSession) GetTokenAccumulator() (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	return _INFTStake.Contract.GetTokenAccumulator(&_INFTStake.CallOpts)
}

// GetTokenAccumulator is a free data retrieval call binding the contract method 0xc47c6e14.
//
// Solidity: function getTokenAccumulator() view returns(uint256 accumulator, uint256 slush)
func (_INFTStake *INFTStakeCallerSession) GetTokenAccumulator() (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	return _INFTStake.Contract.GetTokenAccumulator(&_INFTStake.CallOpts)
}

// GetTotalReserveEth is a free data retrieval call binding the contract method 0x19b8be2f.
//
// Solidity: function getTotalReserveEth() view returns(uint256)
func (_INFTStake *INFTStakeCaller) GetTotalReserveEth(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _INFTStake.contract.Call(opts, &out, "getTotalReserveEth")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalReserveEth is a free data retrieval call binding the contract method 0x19b8be2f.
//
// Solidity: function getTotalReserveEth() view returns(uint256)
func (_INFTStake *INFTStakeSession) GetTotalReserveEth() (*big.Int, error) {
	return _INFTStake.Contract.GetTotalReserveEth(&_INFTStake.CallOpts)
}

// GetTotalReserveEth is a free data retrieval call binding the contract method 0x19b8be2f.
//
// Solidity: function getTotalReserveEth() view returns(uint256)
func (_INFTStake *INFTStakeCallerSession) GetTotalReserveEth() (*big.Int, error) {
	return _INFTStake.Contract.GetTotalReserveEth(&_INFTStake.CallOpts)
}

// GetTotalReserveMadToken is a free data retrieval call binding the contract method 0x9aeac659.
//
// Solidity: function getTotalReserveMadToken() view returns(uint256)
func (_INFTStake *INFTStakeCaller) GetTotalReserveMadToken(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _INFTStake.contract.Call(opts, &out, "getTotalReserveMadToken")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalReserveMadToken is a free data retrieval call binding the contract method 0x9aeac659.
//
// Solidity: function getTotalReserveMadToken() view returns(uint256)
func (_INFTStake *INFTStakeSession) GetTotalReserveMadToken() (*big.Int, error) {
	return _INFTStake.Contract.GetTotalReserveMadToken(&_INFTStake.CallOpts)
}

// GetTotalReserveMadToken is a free data retrieval call binding the contract method 0x9aeac659.
//
// Solidity: function getTotalReserveMadToken() view returns(uint256)
func (_INFTStake *INFTStakeCallerSession) GetTotalReserveMadToken() (*big.Int, error) {
	return _INFTStake.Contract.GetTotalReserveMadToken(&_INFTStake.CallOpts)
}

// GetTotalShares is a free data retrieval call binding the contract method 0xd5002f2e.
//
// Solidity: function getTotalShares() view returns(uint256)
func (_INFTStake *INFTStakeCaller) GetTotalShares(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _INFTStake.contract.Call(opts, &out, "getTotalShares")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalShares is a free data retrieval call binding the contract method 0xd5002f2e.
//
// Solidity: function getTotalShares() view returns(uint256)
func (_INFTStake *INFTStakeSession) GetTotalShares() (*big.Int, error) {
	return _INFTStake.Contract.GetTotalShares(&_INFTStake.CallOpts)
}

// GetTotalShares is a free data retrieval call binding the contract method 0xd5002f2e.
//
// Solidity: function getTotalShares() view returns(uint256)
func (_INFTStake *INFTStakeCallerSession) GetTotalShares() (*big.Int, error) {
	return _INFTStake.Contract.GetTotalShares(&_INFTStake.CallOpts)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenID_) returns(uint256 payoutEth, uint256 payoutMadToken)
func (_INFTStake *INFTStakeTransactor) Burn(opts *bind.TransactOpts, tokenID_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.contract.Transact(opts, "burn", tokenID_)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenID_) returns(uint256 payoutEth, uint256 payoutMadToken)
func (_INFTStake *INFTStakeSession) Burn(tokenID_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.Contract.Burn(&_INFTStake.TransactOpts, tokenID_)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenID_) returns(uint256 payoutEth, uint256 payoutMadToken)
func (_INFTStake *INFTStakeTransactorSession) Burn(tokenID_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.Contract.Burn(&_INFTStake.TransactOpts, tokenID_)
}

// BurnTo is a paid mutator transaction binding the contract method 0xea785a5e.
//
// Solidity: function burnTo(address to_, uint256 tokenID_) returns(uint256 payoutEth, uint256 payoutMadToken)
func (_INFTStake *INFTStakeTransactor) BurnTo(opts *bind.TransactOpts, to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.contract.Transact(opts, "burnTo", to_, tokenID_)
}

// BurnTo is a paid mutator transaction binding the contract method 0xea785a5e.
//
// Solidity: function burnTo(address to_, uint256 tokenID_) returns(uint256 payoutEth, uint256 payoutMadToken)
func (_INFTStake *INFTStakeSession) BurnTo(to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.Contract.BurnTo(&_INFTStake.TransactOpts, to_, tokenID_)
}

// BurnTo is a paid mutator transaction binding the contract method 0xea785a5e.
//
// Solidity: function burnTo(address to_, uint256 tokenID_) returns(uint256 payoutEth, uint256 payoutMadToken)
func (_INFTStake *INFTStakeTransactorSession) BurnTo(to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.Contract.BurnTo(&_INFTStake.TransactOpts, to_, tokenID_)
}

// CollectEth is a paid mutator transaction binding the contract method 0x2a0d8bd1.
//
// Solidity: function collectEth(uint256 tokenID_) returns(uint256 payout)
func (_INFTStake *INFTStakeTransactor) CollectEth(opts *bind.TransactOpts, tokenID_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.contract.Transact(opts, "collectEth", tokenID_)
}

// CollectEth is a paid mutator transaction binding the contract method 0x2a0d8bd1.
//
// Solidity: function collectEth(uint256 tokenID_) returns(uint256 payout)
func (_INFTStake *INFTStakeSession) CollectEth(tokenID_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.Contract.CollectEth(&_INFTStake.TransactOpts, tokenID_)
}

// CollectEth is a paid mutator transaction binding the contract method 0x2a0d8bd1.
//
// Solidity: function collectEth(uint256 tokenID_) returns(uint256 payout)
func (_INFTStake *INFTStakeTransactorSession) CollectEth(tokenID_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.Contract.CollectEth(&_INFTStake.TransactOpts, tokenID_)
}

// CollectEthTo is a paid mutator transaction binding the contract method 0xbe444379.
//
// Solidity: function collectEthTo(address to_, uint256 tokenID_) returns(uint256 payout)
func (_INFTStake *INFTStakeTransactor) CollectEthTo(opts *bind.TransactOpts, to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.contract.Transact(opts, "collectEthTo", to_, tokenID_)
}

// CollectEthTo is a paid mutator transaction binding the contract method 0xbe444379.
//
// Solidity: function collectEthTo(address to_, uint256 tokenID_) returns(uint256 payout)
func (_INFTStake *INFTStakeSession) CollectEthTo(to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.Contract.CollectEthTo(&_INFTStake.TransactOpts, to_, tokenID_)
}

// CollectEthTo is a paid mutator transaction binding the contract method 0xbe444379.
//
// Solidity: function collectEthTo(address to_, uint256 tokenID_) returns(uint256 payout)
func (_INFTStake *INFTStakeTransactorSession) CollectEthTo(to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.Contract.CollectEthTo(&_INFTStake.TransactOpts, to_, tokenID_)
}

// CollectToken is a paid mutator transaction binding the contract method 0xe35c3e28.
//
// Solidity: function collectToken(uint256 tokenID_) returns(uint256 payout)
func (_INFTStake *INFTStakeTransactor) CollectToken(opts *bind.TransactOpts, tokenID_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.contract.Transact(opts, "collectToken", tokenID_)
}

// CollectToken is a paid mutator transaction binding the contract method 0xe35c3e28.
//
// Solidity: function collectToken(uint256 tokenID_) returns(uint256 payout)
func (_INFTStake *INFTStakeSession) CollectToken(tokenID_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.Contract.CollectToken(&_INFTStake.TransactOpts, tokenID_)
}

// CollectToken is a paid mutator transaction binding the contract method 0xe35c3e28.
//
// Solidity: function collectToken(uint256 tokenID_) returns(uint256 payout)
func (_INFTStake *INFTStakeTransactorSession) CollectToken(tokenID_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.Contract.CollectToken(&_INFTStake.TransactOpts, tokenID_)
}

// CollectTokenTo is a paid mutator transaction binding the contract method 0x8853b950.
//
// Solidity: function collectTokenTo(address to_, uint256 tokenID_) returns(uint256 payout)
func (_INFTStake *INFTStakeTransactor) CollectTokenTo(opts *bind.TransactOpts, to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.contract.Transact(opts, "collectTokenTo", to_, tokenID_)
}

// CollectTokenTo is a paid mutator transaction binding the contract method 0x8853b950.
//
// Solidity: function collectTokenTo(address to_, uint256 tokenID_) returns(uint256 payout)
func (_INFTStake *INFTStakeSession) CollectTokenTo(to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.Contract.CollectTokenTo(&_INFTStake.TransactOpts, to_, tokenID_)
}

// CollectTokenTo is a paid mutator transaction binding the contract method 0x8853b950.
//
// Solidity: function collectTokenTo(address to_, uint256 tokenID_) returns(uint256 payout)
func (_INFTStake *INFTStakeTransactorSession) CollectTokenTo(to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.Contract.CollectTokenTo(&_INFTStake.TransactOpts, to_, tokenID_)
}

// DepositEth is a paid mutator transaction binding the contract method 0x99a89ecc.
//
// Solidity: function depositEth(uint8 magic_) payable returns()
func (_INFTStake *INFTStakeTransactor) DepositEth(opts *bind.TransactOpts, magic_ uint8) (*types.Transaction, error) {
	return _INFTStake.contract.Transact(opts, "depositEth", magic_)
}

// DepositEth is a paid mutator transaction binding the contract method 0x99a89ecc.
//
// Solidity: function depositEth(uint8 magic_) payable returns()
func (_INFTStake *INFTStakeSession) DepositEth(magic_ uint8) (*types.Transaction, error) {
	return _INFTStake.Contract.DepositEth(&_INFTStake.TransactOpts, magic_)
}

// DepositEth is a paid mutator transaction binding the contract method 0x99a89ecc.
//
// Solidity: function depositEth(uint8 magic_) payable returns()
func (_INFTStake *INFTStakeTransactorSession) DepositEth(magic_ uint8) (*types.Transaction, error) {
	return _INFTStake.Contract.DepositEth(&_INFTStake.TransactOpts, magic_)
}

// DepositToken is a paid mutator transaction binding the contract method 0x8191f5e5.
//
// Solidity: function depositToken(uint8 magic_, uint256 amount_) returns()
func (_INFTStake *INFTStakeTransactor) DepositToken(opts *bind.TransactOpts, magic_ uint8, amount_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.contract.Transact(opts, "depositToken", magic_, amount_)
}

// DepositToken is a paid mutator transaction binding the contract method 0x8191f5e5.
//
// Solidity: function depositToken(uint8 magic_, uint256 amount_) returns()
func (_INFTStake *INFTStakeSession) DepositToken(magic_ uint8, amount_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.Contract.DepositToken(&_INFTStake.TransactOpts, magic_, amount_)
}

// DepositToken is a paid mutator transaction binding the contract method 0x8191f5e5.
//
// Solidity: function depositToken(uint8 magic_, uint256 amount_) returns()
func (_INFTStake *INFTStakeTransactorSession) DepositToken(magic_ uint8, amount_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.Contract.DepositToken(&_INFTStake.TransactOpts, magic_, amount_)
}

// LockOwnPosition is a paid mutator transaction binding the contract method 0xe42a673c.
//
// Solidity: function lockOwnPosition(uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_INFTStake *INFTStakeTransactor) LockOwnPosition(opts *bind.TransactOpts, tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.contract.Transact(opts, "lockOwnPosition", tokenID_, lockDuration_)
}

// LockOwnPosition is a paid mutator transaction binding the contract method 0xe42a673c.
//
// Solidity: function lockOwnPosition(uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_INFTStake *INFTStakeSession) LockOwnPosition(tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.Contract.LockOwnPosition(&_INFTStake.TransactOpts, tokenID_, lockDuration_)
}

// LockOwnPosition is a paid mutator transaction binding the contract method 0xe42a673c.
//
// Solidity: function lockOwnPosition(uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_INFTStake *INFTStakeTransactorSession) LockOwnPosition(tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.Contract.LockOwnPosition(&_INFTStake.TransactOpts, tokenID_, lockDuration_)
}

// LockPosition is a paid mutator transaction binding the contract method 0x0cc65dfb.
//
// Solidity: function lockPosition(address caller_, uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_INFTStake *INFTStakeTransactor) LockPosition(opts *bind.TransactOpts, caller_ common.Address, tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.contract.Transact(opts, "lockPosition", caller_, tokenID_, lockDuration_)
}

// LockPosition is a paid mutator transaction binding the contract method 0x0cc65dfb.
//
// Solidity: function lockPosition(address caller_, uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_INFTStake *INFTStakeSession) LockPosition(caller_ common.Address, tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.Contract.LockPosition(&_INFTStake.TransactOpts, caller_, tokenID_, lockDuration_)
}

// LockPosition is a paid mutator transaction binding the contract method 0x0cc65dfb.
//
// Solidity: function lockPosition(address caller_, uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_INFTStake *INFTStakeTransactorSession) LockPosition(caller_ common.Address, tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.Contract.LockPosition(&_INFTStake.TransactOpts, caller_, tokenID_, lockDuration_)
}

// LockWithdraw is a paid mutator transaction binding the contract method 0x0e4eb15b.
//
// Solidity: function lockWithdraw(uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_INFTStake *INFTStakeTransactor) LockWithdraw(opts *bind.TransactOpts, tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.contract.Transact(opts, "lockWithdraw", tokenID_, lockDuration_)
}

// LockWithdraw is a paid mutator transaction binding the contract method 0x0e4eb15b.
//
// Solidity: function lockWithdraw(uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_INFTStake *INFTStakeSession) LockWithdraw(tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.Contract.LockWithdraw(&_INFTStake.TransactOpts, tokenID_, lockDuration_)
}

// LockWithdraw is a paid mutator transaction binding the contract method 0x0e4eb15b.
//
// Solidity: function lockWithdraw(uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_INFTStake *INFTStakeTransactorSession) LockWithdraw(tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.Contract.LockWithdraw(&_INFTStake.TransactOpts, tokenID_, lockDuration_)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 amount_) returns(uint256 tokenID)
func (_INFTStake *INFTStakeTransactor) Mint(opts *bind.TransactOpts, amount_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.contract.Transact(opts, "mint", amount_)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 amount_) returns(uint256 tokenID)
func (_INFTStake *INFTStakeSession) Mint(amount_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.Contract.Mint(&_INFTStake.TransactOpts, amount_)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 amount_) returns(uint256 tokenID)
func (_INFTStake *INFTStakeTransactorSession) Mint(amount_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.Contract.Mint(&_INFTStake.TransactOpts, amount_)
}

// MintTo is a paid mutator transaction binding the contract method 0x2baf2acb.
//
// Solidity: function mintTo(address to_, uint256 amount_, uint256 lockDuration_) returns(uint256 tokenID)
func (_INFTStake *INFTStakeTransactor) MintTo(opts *bind.TransactOpts, to_ common.Address, amount_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.contract.Transact(opts, "mintTo", to_, amount_, lockDuration_)
}

// MintTo is a paid mutator transaction binding the contract method 0x2baf2acb.
//
// Solidity: function mintTo(address to_, uint256 amount_, uint256 lockDuration_) returns(uint256 tokenID)
func (_INFTStake *INFTStakeSession) MintTo(to_ common.Address, amount_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.Contract.MintTo(&_INFTStake.TransactOpts, to_, amount_, lockDuration_)
}

// MintTo is a paid mutator transaction binding the contract method 0x2baf2acb.
//
// Solidity: function mintTo(address to_, uint256 amount_, uint256 lockDuration_) returns(uint256 tokenID)
func (_INFTStake *INFTStakeTransactorSession) MintTo(to_ common.Address, amount_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _INFTStake.Contract.MintTo(&_INFTStake.TransactOpts, to_, amount_, lockDuration_)
}

// SkimExcessEth is a paid mutator transaction binding the contract method 0x971b505b.
//
// Solidity: function skimExcessEth(address to_) returns(uint256 excess)
func (_INFTStake *INFTStakeTransactor) SkimExcessEth(opts *bind.TransactOpts, to_ common.Address) (*types.Transaction, error) {
	return _INFTStake.contract.Transact(opts, "skimExcessEth", to_)
}

// SkimExcessEth is a paid mutator transaction binding the contract method 0x971b505b.
//
// Solidity: function skimExcessEth(address to_) returns(uint256 excess)
func (_INFTStake *INFTStakeSession) SkimExcessEth(to_ common.Address) (*types.Transaction, error) {
	return _INFTStake.Contract.SkimExcessEth(&_INFTStake.TransactOpts, to_)
}

// SkimExcessEth is a paid mutator transaction binding the contract method 0x971b505b.
//
// Solidity: function skimExcessEth(address to_) returns(uint256 excess)
func (_INFTStake *INFTStakeTransactorSession) SkimExcessEth(to_ common.Address) (*types.Transaction, error) {
	return _INFTStake.Contract.SkimExcessEth(&_INFTStake.TransactOpts, to_)
}

// SkimExcessToken is a paid mutator transaction binding the contract method 0x7aa507fb.
//
// Solidity: function skimExcessToken(address to_) returns(uint256 excess)
func (_INFTStake *INFTStakeTransactor) SkimExcessToken(opts *bind.TransactOpts, to_ common.Address) (*types.Transaction, error) {
	return _INFTStake.contract.Transact(opts, "skimExcessToken", to_)
}

// SkimExcessToken is a paid mutator transaction binding the contract method 0x7aa507fb.
//
// Solidity: function skimExcessToken(address to_) returns(uint256 excess)
func (_INFTStake *INFTStakeSession) SkimExcessToken(to_ common.Address) (*types.Transaction, error) {
	return _INFTStake.Contract.SkimExcessToken(&_INFTStake.TransactOpts, to_)
}

// SkimExcessToken is a paid mutator transaction binding the contract method 0x7aa507fb.
//
// Solidity: function skimExcessToken(address to_) returns(uint256 excess)
func (_INFTStake *INFTStakeTransactorSession) SkimExcessToken(to_ common.Address) (*types.Transaction, error) {
	return _INFTStake.Contract.SkimExcessToken(&_INFTStake.TransactOpts, to_)
}

// ISnapshotsMetaData contains all meta data concerning the ISnapshots contract.
var ISnapshotsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSafeToProceedConsensus\",\"type\":\"bool\"}],\"name\":\"SnapshotTaken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getBlockClaimsFromLatestSnapshot\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"txCount\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"prevBlock\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"txRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"headerRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structBClaimsParserLibrary.BClaims\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch_\",\"type\":\"uint256\"}],\"name\":\"getBlockClaimsFromSnapshot\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"txCount\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"prevBlock\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"txRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"headerRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structBClaimsParserLibrary.BClaims\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainIdFromLatestSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch_\",\"type\":\"uint256\"}],\"name\":\"getChainIdFromSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommittedHeightFromLatestSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch_\",\"type\":\"uint256\"}],\"name\":\"getCommittedHeightFromSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpochLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestSnapshot\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"committedAt\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"txCount\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"prevBlock\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"txRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"headerRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structBClaimsParserLibrary.BClaims\",\"name\":\"blockClaims\",\"type\":\"tuple\"},{\"internalType\":\"uint256[2]\",\"name\":\"signature\",\"type\":\"uint256[2]\"}],\"internalType\":\"structSnapshot\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMadnetHeightFromLatestSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch_\",\"type\":\"uint256\"}],\"name\":\"getMadnetHeightFromSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSignatureFromLatestSnapshot\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch_\",\"type\":\"uint256\"}],\"name\":\"getSignatureFromSnapshot\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch_\",\"type\":\"uint256\"}],\"name\":\"getSnapshot\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"committedAt\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"txCount\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"prevBlock\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"txRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"headerRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structBClaimsParserLibrary.BClaims\",\"name\":\"blockClaims\",\"type\":\"tuple\"},{\"internalType\":\"uint256[2]\",\"name\":\"signature\",\"type\":\"uint256[2]\"}],\"internalType\":\"structSnapshot\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSnapshotDesperationDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSnapshotDesperationFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numValidators\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"myIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blocksSinceDesperation\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blsig\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"desperationFactor\",\"type\":\"uint256\"}],\"name\":\"mayValidatorSnapshot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"desperationDelay_\",\"type\":\"uint32\"}],\"name\":\"setSnapshotDesperationDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"desperationFactor_\",\"type\":\"uint32\"}],\"name\":\"setSnapshotDesperationFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signatureGroup_\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"bClaims_\",\"type\":\"bytes\"}],\"name\":\"snapshot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// ISnapshotsABI is the input ABI used to generate the binding from.
// Deprecated: Use ISnapshotsMetaData.ABI instead.
var ISnapshotsABI = ISnapshotsMetaData.ABI

// ISnapshots is an auto generated Go binding around an Ethereum contract.
type ISnapshots struct {
	ISnapshotsCaller     // Read-only binding to the contract
	ISnapshotsTransactor // Write-only binding to the contract
	ISnapshotsFilterer   // Log filterer for contract events
}

// ISnapshotsCaller is an auto generated read-only Go binding around an Ethereum contract.
type ISnapshotsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ISnapshotsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ISnapshotsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ISnapshotsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ISnapshotsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ISnapshotsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ISnapshotsSession struct {
	Contract     *ISnapshots       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ISnapshotsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ISnapshotsCallerSession struct {
	Contract *ISnapshotsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// ISnapshotsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ISnapshotsTransactorSession struct {
	Contract     *ISnapshotsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// ISnapshotsRaw is an auto generated low-level Go binding around an Ethereum contract.
type ISnapshotsRaw struct {
	Contract *ISnapshots // Generic contract binding to access the raw methods on
}

// ISnapshotsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ISnapshotsCallerRaw struct {
	Contract *ISnapshotsCaller // Generic read-only contract binding to access the raw methods on
}

// ISnapshotsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ISnapshotsTransactorRaw struct {
	Contract *ISnapshotsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewISnapshots creates a new instance of ISnapshots, bound to a specific deployed contract.
func NewISnapshots(address common.Address, backend bind.ContractBackend) (*ISnapshots, error) {
	contract, err := bindISnapshots(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ISnapshots{ISnapshotsCaller: ISnapshotsCaller{contract: contract}, ISnapshotsTransactor: ISnapshotsTransactor{contract: contract}, ISnapshotsFilterer: ISnapshotsFilterer{contract: contract}}, nil
}

// NewISnapshotsCaller creates a new read-only instance of ISnapshots, bound to a specific deployed contract.
func NewISnapshotsCaller(address common.Address, caller bind.ContractCaller) (*ISnapshotsCaller, error) {
	contract, err := bindISnapshots(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ISnapshotsCaller{contract: contract}, nil
}

// NewISnapshotsTransactor creates a new write-only instance of ISnapshots, bound to a specific deployed contract.
func NewISnapshotsTransactor(address common.Address, transactor bind.ContractTransactor) (*ISnapshotsTransactor, error) {
	contract, err := bindISnapshots(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ISnapshotsTransactor{contract: contract}, nil
}

// NewISnapshotsFilterer creates a new log filterer instance of ISnapshots, bound to a specific deployed contract.
func NewISnapshotsFilterer(address common.Address, filterer bind.ContractFilterer) (*ISnapshotsFilterer, error) {
	contract, err := bindISnapshots(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ISnapshotsFilterer{contract: contract}, nil
}

// bindISnapshots binds a generic wrapper to an already deployed contract.
func bindISnapshots(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ISnapshotsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ISnapshots *ISnapshotsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ISnapshots.Contract.ISnapshotsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ISnapshots *ISnapshotsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ISnapshots.Contract.ISnapshotsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ISnapshots *ISnapshotsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ISnapshots.Contract.ISnapshotsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ISnapshots *ISnapshotsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ISnapshots.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ISnapshots *ISnapshotsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ISnapshots.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ISnapshots *ISnapshotsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ISnapshots.Contract.contract.Transact(opts, method, params...)
}

// GetBlockClaimsFromLatestSnapshot is a free data retrieval call binding the contract method 0xc2ea6603.
//
// Solidity: function getBlockClaimsFromLatestSnapshot() view returns((uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32))
func (_ISnapshots *ISnapshotsCaller) GetBlockClaimsFromLatestSnapshot(opts *bind.CallOpts) (BClaimsParserLibraryBClaims, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "getBlockClaimsFromLatestSnapshot")

	if err != nil {
		return *new(BClaimsParserLibraryBClaims), err
	}

	out0 := *abi.ConvertType(out[0], new(BClaimsParserLibraryBClaims)).(*BClaimsParserLibraryBClaims)

	return out0, err

}

// GetBlockClaimsFromLatestSnapshot is a free data retrieval call binding the contract method 0xc2ea6603.
//
// Solidity: function getBlockClaimsFromLatestSnapshot() view returns((uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32))
func (_ISnapshots *ISnapshotsSession) GetBlockClaimsFromLatestSnapshot() (BClaimsParserLibraryBClaims, error) {
	return _ISnapshots.Contract.GetBlockClaimsFromLatestSnapshot(&_ISnapshots.CallOpts)
}

// GetBlockClaimsFromLatestSnapshot is a free data retrieval call binding the contract method 0xc2ea6603.
//
// Solidity: function getBlockClaimsFromLatestSnapshot() view returns((uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32))
func (_ISnapshots *ISnapshotsCallerSession) GetBlockClaimsFromLatestSnapshot() (BClaimsParserLibraryBClaims, error) {
	return _ISnapshots.Contract.GetBlockClaimsFromLatestSnapshot(&_ISnapshots.CallOpts)
}

// GetBlockClaimsFromSnapshot is a free data retrieval call binding the contract method 0x45dfc599.
//
// Solidity: function getBlockClaimsFromSnapshot(uint256 epoch_) view returns((uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32))
func (_ISnapshots *ISnapshotsCaller) GetBlockClaimsFromSnapshot(opts *bind.CallOpts, epoch_ *big.Int) (BClaimsParserLibraryBClaims, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "getBlockClaimsFromSnapshot", epoch_)

	if err != nil {
		return *new(BClaimsParserLibraryBClaims), err
	}

	out0 := *abi.ConvertType(out[0], new(BClaimsParserLibraryBClaims)).(*BClaimsParserLibraryBClaims)

	return out0, err

}

// GetBlockClaimsFromSnapshot is a free data retrieval call binding the contract method 0x45dfc599.
//
// Solidity: function getBlockClaimsFromSnapshot(uint256 epoch_) view returns((uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32))
func (_ISnapshots *ISnapshotsSession) GetBlockClaimsFromSnapshot(epoch_ *big.Int) (BClaimsParserLibraryBClaims, error) {
	return _ISnapshots.Contract.GetBlockClaimsFromSnapshot(&_ISnapshots.CallOpts, epoch_)
}

// GetBlockClaimsFromSnapshot is a free data retrieval call binding the contract method 0x45dfc599.
//
// Solidity: function getBlockClaimsFromSnapshot(uint256 epoch_) view returns((uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32))
func (_ISnapshots *ISnapshotsCallerSession) GetBlockClaimsFromSnapshot(epoch_ *big.Int) (BClaimsParserLibraryBClaims, error) {
	return _ISnapshots.Contract.GetBlockClaimsFromSnapshot(&_ISnapshots.CallOpts, epoch_)
}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint256)
func (_ISnapshots *ISnapshotsCaller) GetChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "getChainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint256)
func (_ISnapshots *ISnapshotsSession) GetChainId() (*big.Int, error) {
	return _ISnapshots.Contract.GetChainId(&_ISnapshots.CallOpts)
}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint256)
func (_ISnapshots *ISnapshotsCallerSession) GetChainId() (*big.Int, error) {
	return _ISnapshots.Contract.GetChainId(&_ISnapshots.CallOpts)
}

// GetChainIdFromLatestSnapshot is a free data retrieval call binding the contract method 0xd9c11657.
//
// Solidity: function getChainIdFromLatestSnapshot() view returns(uint256)
func (_ISnapshots *ISnapshotsCaller) GetChainIdFromLatestSnapshot(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "getChainIdFromLatestSnapshot")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetChainIdFromLatestSnapshot is a free data retrieval call binding the contract method 0xd9c11657.
//
// Solidity: function getChainIdFromLatestSnapshot() view returns(uint256)
func (_ISnapshots *ISnapshotsSession) GetChainIdFromLatestSnapshot() (*big.Int, error) {
	return _ISnapshots.Contract.GetChainIdFromLatestSnapshot(&_ISnapshots.CallOpts)
}

// GetChainIdFromLatestSnapshot is a free data retrieval call binding the contract method 0xd9c11657.
//
// Solidity: function getChainIdFromLatestSnapshot() view returns(uint256)
func (_ISnapshots *ISnapshotsCallerSession) GetChainIdFromLatestSnapshot() (*big.Int, error) {
	return _ISnapshots.Contract.GetChainIdFromLatestSnapshot(&_ISnapshots.CallOpts)
}

// GetChainIdFromSnapshot is a free data retrieval call binding the contract method 0x19f74669.
//
// Solidity: function getChainIdFromSnapshot(uint256 epoch_) view returns(uint256)
func (_ISnapshots *ISnapshotsCaller) GetChainIdFromSnapshot(opts *bind.CallOpts, epoch_ *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "getChainIdFromSnapshot", epoch_)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetChainIdFromSnapshot is a free data retrieval call binding the contract method 0x19f74669.
//
// Solidity: function getChainIdFromSnapshot(uint256 epoch_) view returns(uint256)
func (_ISnapshots *ISnapshotsSession) GetChainIdFromSnapshot(epoch_ *big.Int) (*big.Int, error) {
	return _ISnapshots.Contract.GetChainIdFromSnapshot(&_ISnapshots.CallOpts, epoch_)
}

// GetChainIdFromSnapshot is a free data retrieval call binding the contract method 0x19f74669.
//
// Solidity: function getChainIdFromSnapshot(uint256 epoch_) view returns(uint256)
func (_ISnapshots *ISnapshotsCallerSession) GetChainIdFromSnapshot(epoch_ *big.Int) (*big.Int, error) {
	return _ISnapshots.Contract.GetChainIdFromSnapshot(&_ISnapshots.CallOpts, epoch_)
}

// GetCommittedHeightFromLatestSnapshot is a free data retrieval call binding the contract method 0x026c2b7e.
//
// Solidity: function getCommittedHeightFromLatestSnapshot() view returns(uint256)
func (_ISnapshots *ISnapshotsCaller) GetCommittedHeightFromLatestSnapshot(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "getCommittedHeightFromLatestSnapshot")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCommittedHeightFromLatestSnapshot is a free data retrieval call binding the contract method 0x026c2b7e.
//
// Solidity: function getCommittedHeightFromLatestSnapshot() view returns(uint256)
func (_ISnapshots *ISnapshotsSession) GetCommittedHeightFromLatestSnapshot() (*big.Int, error) {
	return _ISnapshots.Contract.GetCommittedHeightFromLatestSnapshot(&_ISnapshots.CallOpts)
}

// GetCommittedHeightFromLatestSnapshot is a free data retrieval call binding the contract method 0x026c2b7e.
//
// Solidity: function getCommittedHeightFromLatestSnapshot() view returns(uint256)
func (_ISnapshots *ISnapshotsCallerSession) GetCommittedHeightFromLatestSnapshot() (*big.Int, error) {
	return _ISnapshots.Contract.GetCommittedHeightFromLatestSnapshot(&_ISnapshots.CallOpts)
}

// GetCommittedHeightFromSnapshot is a free data retrieval call binding the contract method 0xe18c697a.
//
// Solidity: function getCommittedHeightFromSnapshot(uint256 epoch_) view returns(uint256)
func (_ISnapshots *ISnapshotsCaller) GetCommittedHeightFromSnapshot(opts *bind.CallOpts, epoch_ *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "getCommittedHeightFromSnapshot", epoch_)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCommittedHeightFromSnapshot is a free data retrieval call binding the contract method 0xe18c697a.
//
// Solidity: function getCommittedHeightFromSnapshot(uint256 epoch_) view returns(uint256)
func (_ISnapshots *ISnapshotsSession) GetCommittedHeightFromSnapshot(epoch_ *big.Int) (*big.Int, error) {
	return _ISnapshots.Contract.GetCommittedHeightFromSnapshot(&_ISnapshots.CallOpts, epoch_)
}

// GetCommittedHeightFromSnapshot is a free data retrieval call binding the contract method 0xe18c697a.
//
// Solidity: function getCommittedHeightFromSnapshot(uint256 epoch_) view returns(uint256)
func (_ISnapshots *ISnapshotsCallerSession) GetCommittedHeightFromSnapshot(epoch_ *big.Int) (*big.Int, error) {
	return _ISnapshots.Contract.GetCommittedHeightFromSnapshot(&_ISnapshots.CallOpts, epoch_)
}

// GetEpoch is a free data retrieval call binding the contract method 0x757991a8.
//
// Solidity: function getEpoch() view returns(uint256)
func (_ISnapshots *ISnapshotsCaller) GetEpoch(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "getEpoch")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetEpoch is a free data retrieval call binding the contract method 0x757991a8.
//
// Solidity: function getEpoch() view returns(uint256)
func (_ISnapshots *ISnapshotsSession) GetEpoch() (*big.Int, error) {
	return _ISnapshots.Contract.GetEpoch(&_ISnapshots.CallOpts)
}

// GetEpoch is a free data retrieval call binding the contract method 0x757991a8.
//
// Solidity: function getEpoch() view returns(uint256)
func (_ISnapshots *ISnapshotsCallerSession) GetEpoch() (*big.Int, error) {
	return _ISnapshots.Contract.GetEpoch(&_ISnapshots.CallOpts)
}

// GetEpochLength is a free data retrieval call binding the contract method 0xcfe8a73b.
//
// Solidity: function getEpochLength() view returns(uint256)
func (_ISnapshots *ISnapshotsCaller) GetEpochLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "getEpochLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetEpochLength is a free data retrieval call binding the contract method 0xcfe8a73b.
//
// Solidity: function getEpochLength() view returns(uint256)
func (_ISnapshots *ISnapshotsSession) GetEpochLength() (*big.Int, error) {
	return _ISnapshots.Contract.GetEpochLength(&_ISnapshots.CallOpts)
}

// GetEpochLength is a free data retrieval call binding the contract method 0xcfe8a73b.
//
// Solidity: function getEpochLength() view returns(uint256)
func (_ISnapshots *ISnapshotsCallerSession) GetEpochLength() (*big.Int, error) {
	return _ISnapshots.Contract.GetEpochLength(&_ISnapshots.CallOpts)
}

// GetLatestSnapshot is a free data retrieval call binding the contract method 0xd518f243.
//
// Solidity: function getLatestSnapshot() view returns((uint256,(uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32),uint256[2]))
func (_ISnapshots *ISnapshotsCaller) GetLatestSnapshot(opts *bind.CallOpts) (Snapshot, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "getLatestSnapshot")

	if err != nil {
		return *new(Snapshot), err
	}

	out0 := *abi.ConvertType(out[0], new(Snapshot)).(*Snapshot)

	return out0, err

}

// GetLatestSnapshot is a free data retrieval call binding the contract method 0xd518f243.
//
// Solidity: function getLatestSnapshot() view returns((uint256,(uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32),uint256[2]))
func (_ISnapshots *ISnapshotsSession) GetLatestSnapshot() (Snapshot, error) {
	return _ISnapshots.Contract.GetLatestSnapshot(&_ISnapshots.CallOpts)
}

// GetLatestSnapshot is a free data retrieval call binding the contract method 0xd518f243.
//
// Solidity: function getLatestSnapshot() view returns((uint256,(uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32),uint256[2]))
func (_ISnapshots *ISnapshotsCallerSession) GetLatestSnapshot() (Snapshot, error) {
	return _ISnapshots.Contract.GetLatestSnapshot(&_ISnapshots.CallOpts)
}

// GetMadnetHeightFromLatestSnapshot is a free data retrieval call binding the contract method 0x9c262671.
//
// Solidity: function getMadnetHeightFromLatestSnapshot() view returns(uint256)
func (_ISnapshots *ISnapshotsCaller) GetMadnetHeightFromLatestSnapshot(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "getMadnetHeightFromLatestSnapshot")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMadnetHeightFromLatestSnapshot is a free data retrieval call binding the contract method 0x9c262671.
//
// Solidity: function getMadnetHeightFromLatestSnapshot() view returns(uint256)
func (_ISnapshots *ISnapshotsSession) GetMadnetHeightFromLatestSnapshot() (*big.Int, error) {
	return _ISnapshots.Contract.GetMadnetHeightFromLatestSnapshot(&_ISnapshots.CallOpts)
}

// GetMadnetHeightFromLatestSnapshot is a free data retrieval call binding the contract method 0x9c262671.
//
// Solidity: function getMadnetHeightFromLatestSnapshot() view returns(uint256)
func (_ISnapshots *ISnapshotsCallerSession) GetMadnetHeightFromLatestSnapshot() (*big.Int, error) {
	return _ISnapshots.Contract.GetMadnetHeightFromLatestSnapshot(&_ISnapshots.CallOpts)
}

// GetMadnetHeightFromSnapshot is a free data retrieval call binding the contract method 0xa8c07fc3.
//
// Solidity: function getMadnetHeightFromSnapshot(uint256 epoch_) view returns(uint256)
func (_ISnapshots *ISnapshotsCaller) GetMadnetHeightFromSnapshot(opts *bind.CallOpts, epoch_ *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "getMadnetHeightFromSnapshot", epoch_)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMadnetHeightFromSnapshot is a free data retrieval call binding the contract method 0xa8c07fc3.
//
// Solidity: function getMadnetHeightFromSnapshot(uint256 epoch_) view returns(uint256)
func (_ISnapshots *ISnapshotsSession) GetMadnetHeightFromSnapshot(epoch_ *big.Int) (*big.Int, error) {
	return _ISnapshots.Contract.GetMadnetHeightFromSnapshot(&_ISnapshots.CallOpts, epoch_)
}

// GetMadnetHeightFromSnapshot is a free data retrieval call binding the contract method 0xa8c07fc3.
//
// Solidity: function getMadnetHeightFromSnapshot(uint256 epoch_) view returns(uint256)
func (_ISnapshots *ISnapshotsCallerSession) GetMadnetHeightFromSnapshot(epoch_ *big.Int) (*big.Int, error) {
	return _ISnapshots.Contract.GetMadnetHeightFromSnapshot(&_ISnapshots.CallOpts, epoch_)
}

// GetSignatureFromLatestSnapshot is a free data retrieval call binding the contract method 0xc0804ea9.
//
// Solidity: function getSignatureFromLatestSnapshot() view returns(uint256[2])
func (_ISnapshots *ISnapshotsCaller) GetSignatureFromLatestSnapshot(opts *bind.CallOpts) ([2]*big.Int, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "getSignatureFromLatestSnapshot")

	if err != nil {
		return *new([2]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([2]*big.Int)).(*[2]*big.Int)

	return out0, err

}

// GetSignatureFromLatestSnapshot is a free data retrieval call binding the contract method 0xc0804ea9.
//
// Solidity: function getSignatureFromLatestSnapshot() view returns(uint256[2])
func (_ISnapshots *ISnapshotsSession) GetSignatureFromLatestSnapshot() ([2]*big.Int, error) {
	return _ISnapshots.Contract.GetSignatureFromLatestSnapshot(&_ISnapshots.CallOpts)
}

// GetSignatureFromLatestSnapshot is a free data retrieval call binding the contract method 0xc0804ea9.
//
// Solidity: function getSignatureFromLatestSnapshot() view returns(uint256[2])
func (_ISnapshots *ISnapshotsCallerSession) GetSignatureFromLatestSnapshot() ([2]*big.Int, error) {
	return _ISnapshots.Contract.GetSignatureFromLatestSnapshot(&_ISnapshots.CallOpts)
}

// GetSignatureFromSnapshot is a free data retrieval call binding the contract method 0xdbe7eae7.
//
// Solidity: function getSignatureFromSnapshot(uint256 epoch_) view returns(uint256[2])
func (_ISnapshots *ISnapshotsCaller) GetSignatureFromSnapshot(opts *bind.CallOpts, epoch_ *big.Int) ([2]*big.Int, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "getSignatureFromSnapshot", epoch_)

	if err != nil {
		return *new([2]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([2]*big.Int)).(*[2]*big.Int)

	return out0, err

}

// GetSignatureFromSnapshot is a free data retrieval call binding the contract method 0xdbe7eae7.
//
// Solidity: function getSignatureFromSnapshot(uint256 epoch_) view returns(uint256[2])
func (_ISnapshots *ISnapshotsSession) GetSignatureFromSnapshot(epoch_ *big.Int) ([2]*big.Int, error) {
	return _ISnapshots.Contract.GetSignatureFromSnapshot(&_ISnapshots.CallOpts, epoch_)
}

// GetSignatureFromSnapshot is a free data retrieval call binding the contract method 0xdbe7eae7.
//
// Solidity: function getSignatureFromSnapshot(uint256 epoch_) view returns(uint256[2])
func (_ISnapshots *ISnapshotsCallerSession) GetSignatureFromSnapshot(epoch_ *big.Int) ([2]*big.Int, error) {
	return _ISnapshots.Contract.GetSignatureFromSnapshot(&_ISnapshots.CallOpts, epoch_)
}

// GetSnapshot is a free data retrieval call binding the contract method 0x76f10ad0.
//
// Solidity: function getSnapshot(uint256 epoch_) view returns((uint256,(uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32),uint256[2]))
func (_ISnapshots *ISnapshotsCaller) GetSnapshot(opts *bind.CallOpts, epoch_ *big.Int) (Snapshot, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "getSnapshot", epoch_)

	if err != nil {
		return *new(Snapshot), err
	}

	out0 := *abi.ConvertType(out[0], new(Snapshot)).(*Snapshot)

	return out0, err

}

// GetSnapshot is a free data retrieval call binding the contract method 0x76f10ad0.
//
// Solidity: function getSnapshot(uint256 epoch_) view returns((uint256,(uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32),uint256[2]))
func (_ISnapshots *ISnapshotsSession) GetSnapshot(epoch_ *big.Int) (Snapshot, error) {
	return _ISnapshots.Contract.GetSnapshot(&_ISnapshots.CallOpts, epoch_)
}

// GetSnapshot is a free data retrieval call binding the contract method 0x76f10ad0.
//
// Solidity: function getSnapshot(uint256 epoch_) view returns((uint256,(uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32),uint256[2]))
func (_ISnapshots *ISnapshotsCallerSession) GetSnapshot(epoch_ *big.Int) (Snapshot, error) {
	return _ISnapshots.Contract.GetSnapshot(&_ISnapshots.CallOpts, epoch_)
}

// GetSnapshotDesperationDelay is a free data retrieval call binding the contract method 0xd17fcc56.
//
// Solidity: function getSnapshotDesperationDelay() view returns(uint256)
func (_ISnapshots *ISnapshotsCaller) GetSnapshotDesperationDelay(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "getSnapshotDesperationDelay")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetSnapshotDesperationDelay is a free data retrieval call binding the contract method 0xd17fcc56.
//
// Solidity: function getSnapshotDesperationDelay() view returns(uint256)
func (_ISnapshots *ISnapshotsSession) GetSnapshotDesperationDelay() (*big.Int, error) {
	return _ISnapshots.Contract.GetSnapshotDesperationDelay(&_ISnapshots.CallOpts)
}

// GetSnapshotDesperationDelay is a free data retrieval call binding the contract method 0xd17fcc56.
//
// Solidity: function getSnapshotDesperationDelay() view returns(uint256)
func (_ISnapshots *ISnapshotsCallerSession) GetSnapshotDesperationDelay() (*big.Int, error) {
	return _ISnapshots.Contract.GetSnapshotDesperationDelay(&_ISnapshots.CallOpts)
}

// GetSnapshotDesperationFactor is a free data retrieval call binding the contract method 0x7cc4cce6.
//
// Solidity: function getSnapshotDesperationFactor() view returns(uint256)
func (_ISnapshots *ISnapshotsCaller) GetSnapshotDesperationFactor(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "getSnapshotDesperationFactor")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetSnapshotDesperationFactor is a free data retrieval call binding the contract method 0x7cc4cce6.
//
// Solidity: function getSnapshotDesperationFactor() view returns(uint256)
func (_ISnapshots *ISnapshotsSession) GetSnapshotDesperationFactor() (*big.Int, error) {
	return _ISnapshots.Contract.GetSnapshotDesperationFactor(&_ISnapshots.CallOpts)
}

// GetSnapshotDesperationFactor is a free data retrieval call binding the contract method 0x7cc4cce6.
//
// Solidity: function getSnapshotDesperationFactor() view returns(uint256)
func (_ISnapshots *ISnapshotsCallerSession) GetSnapshotDesperationFactor() (*big.Int, error) {
	return _ISnapshots.Contract.GetSnapshotDesperationFactor(&_ISnapshots.CallOpts)
}

// MayValidatorSnapshot is a free data retrieval call binding the contract method 0xf45fa246.
//
// Solidity: function mayValidatorSnapshot(uint256 numValidators, uint256 myIdx, uint256 blocksSinceDesperation, bytes32 blsig, uint256 desperationFactor) pure returns(bool)
func (_ISnapshots *ISnapshotsCaller) MayValidatorSnapshot(opts *bind.CallOpts, numValidators *big.Int, myIdx *big.Int, blocksSinceDesperation *big.Int, blsig [32]byte, desperationFactor *big.Int) (bool, error) {
	var out []interface{}
	err := _ISnapshots.contract.Call(opts, &out, "mayValidatorSnapshot", numValidators, myIdx, blocksSinceDesperation, blsig, desperationFactor)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// MayValidatorSnapshot is a free data retrieval call binding the contract method 0xf45fa246.
//
// Solidity: function mayValidatorSnapshot(uint256 numValidators, uint256 myIdx, uint256 blocksSinceDesperation, bytes32 blsig, uint256 desperationFactor) pure returns(bool)
func (_ISnapshots *ISnapshotsSession) MayValidatorSnapshot(numValidators *big.Int, myIdx *big.Int, blocksSinceDesperation *big.Int, blsig [32]byte, desperationFactor *big.Int) (bool, error) {
	return _ISnapshots.Contract.MayValidatorSnapshot(&_ISnapshots.CallOpts, numValidators, myIdx, blocksSinceDesperation, blsig, desperationFactor)
}

// MayValidatorSnapshot is a free data retrieval call binding the contract method 0xf45fa246.
//
// Solidity: function mayValidatorSnapshot(uint256 numValidators, uint256 myIdx, uint256 blocksSinceDesperation, bytes32 blsig, uint256 desperationFactor) pure returns(bool)
func (_ISnapshots *ISnapshotsCallerSession) MayValidatorSnapshot(numValidators *big.Int, myIdx *big.Int, blocksSinceDesperation *big.Int, blsig [32]byte, desperationFactor *big.Int) (bool, error) {
	return _ISnapshots.Contract.MayValidatorSnapshot(&_ISnapshots.CallOpts, numValidators, myIdx, blocksSinceDesperation, blsig, desperationFactor)
}

// SetSnapshotDesperationDelay is a paid mutator transaction binding the contract method 0xc2e8fef2.
//
// Solidity: function setSnapshotDesperationDelay(uint32 desperationDelay_) returns()
func (_ISnapshots *ISnapshotsTransactor) SetSnapshotDesperationDelay(opts *bind.TransactOpts, desperationDelay_ uint32) (*types.Transaction, error) {
	return _ISnapshots.contract.Transact(opts, "setSnapshotDesperationDelay", desperationDelay_)
}

// SetSnapshotDesperationDelay is a paid mutator transaction binding the contract method 0xc2e8fef2.
//
// Solidity: function setSnapshotDesperationDelay(uint32 desperationDelay_) returns()
func (_ISnapshots *ISnapshotsSession) SetSnapshotDesperationDelay(desperationDelay_ uint32) (*types.Transaction, error) {
	return _ISnapshots.Contract.SetSnapshotDesperationDelay(&_ISnapshots.TransactOpts, desperationDelay_)
}

// SetSnapshotDesperationDelay is a paid mutator transaction binding the contract method 0xc2e8fef2.
//
// Solidity: function setSnapshotDesperationDelay(uint32 desperationDelay_) returns()
func (_ISnapshots *ISnapshotsTransactorSession) SetSnapshotDesperationDelay(desperationDelay_ uint32) (*types.Transaction, error) {
	return _ISnapshots.Contract.SetSnapshotDesperationDelay(&_ISnapshots.TransactOpts, desperationDelay_)
}

// SetSnapshotDesperationFactor is a paid mutator transaction binding the contract method 0x3fa7a1ad.
//
// Solidity: function setSnapshotDesperationFactor(uint32 desperationFactor_) returns()
func (_ISnapshots *ISnapshotsTransactor) SetSnapshotDesperationFactor(opts *bind.TransactOpts, desperationFactor_ uint32) (*types.Transaction, error) {
	return _ISnapshots.contract.Transact(opts, "setSnapshotDesperationFactor", desperationFactor_)
}

// SetSnapshotDesperationFactor is a paid mutator transaction binding the contract method 0x3fa7a1ad.
//
// Solidity: function setSnapshotDesperationFactor(uint32 desperationFactor_) returns()
func (_ISnapshots *ISnapshotsSession) SetSnapshotDesperationFactor(desperationFactor_ uint32) (*types.Transaction, error) {
	return _ISnapshots.Contract.SetSnapshotDesperationFactor(&_ISnapshots.TransactOpts, desperationFactor_)
}

// SetSnapshotDesperationFactor is a paid mutator transaction binding the contract method 0x3fa7a1ad.
//
// Solidity: function setSnapshotDesperationFactor(uint32 desperationFactor_) returns()
func (_ISnapshots *ISnapshotsTransactorSession) SetSnapshotDesperationFactor(desperationFactor_ uint32) (*types.Transaction, error) {
	return _ISnapshots.Contract.SetSnapshotDesperationFactor(&_ISnapshots.TransactOpts, desperationFactor_)
}

// Snapshot is a paid mutator transaction binding the contract method 0x08ca1f25.
//
// Solidity: function snapshot(bytes signatureGroup_, bytes bClaims_) returns(bool)
func (_ISnapshots *ISnapshotsTransactor) Snapshot(opts *bind.TransactOpts, signatureGroup_ []byte, bClaims_ []byte) (*types.Transaction, error) {
	return _ISnapshots.contract.Transact(opts, "snapshot", signatureGroup_, bClaims_)
}

// Snapshot is a paid mutator transaction binding the contract method 0x08ca1f25.
//
// Solidity: function snapshot(bytes signatureGroup_, bytes bClaims_) returns(bool)
func (_ISnapshots *ISnapshotsSession) Snapshot(signatureGroup_ []byte, bClaims_ []byte) (*types.Transaction, error) {
	return _ISnapshots.Contract.Snapshot(&_ISnapshots.TransactOpts, signatureGroup_, bClaims_)
}

// Snapshot is a paid mutator transaction binding the contract method 0x08ca1f25.
//
// Solidity: function snapshot(bytes signatureGroup_, bytes bClaims_) returns(bool)
func (_ISnapshots *ISnapshotsTransactorSession) Snapshot(signatureGroup_ []byte, bClaims_ []byte) (*types.Transaction, error) {
	return _ISnapshots.Contract.Snapshot(&_ISnapshots.TransactOpts, signatureGroup_, bClaims_)
}

// ISnapshotsSnapshotTakenIterator is returned from FilterSnapshotTaken and is used to iterate over the raw logs and unpacked data for SnapshotTaken events raised by the ISnapshots contract.
type ISnapshotsSnapshotTakenIterator struct {
	Event *ISnapshotsSnapshotTaken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ISnapshotsSnapshotTakenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ISnapshotsSnapshotTaken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ISnapshotsSnapshotTaken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ISnapshotsSnapshotTakenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ISnapshotsSnapshotTakenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ISnapshotsSnapshotTaken represents a SnapshotTaken event raised by the ISnapshots contract.
type ISnapshotsSnapshotTaken struct {
	ChainId                  *big.Int
	Epoch                    *big.Int
	Height                   *big.Int
	Validator                common.Address
	IsSafeToProceedConsensus bool
	Raw                      types.Log // Blockchain specific contextual infos
}

// FilterSnapshotTaken is a free log retrieval operation binding the contract event 0x740c230bf3b8e6d0997cb207d19155e2721234d5690acf42dbc85615aedc362f.
//
// Solidity: event SnapshotTaken(uint256 chainId, uint256 indexed epoch, uint256 height, address indexed validator, bool isSafeToProceedConsensus)
func (_ISnapshots *ISnapshotsFilterer) FilterSnapshotTaken(opts *bind.FilterOpts, epoch []*big.Int, validator []common.Address) (*ISnapshotsSnapshotTakenIterator, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ISnapshots.contract.FilterLogs(opts, "SnapshotTaken", epochRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return &ISnapshotsSnapshotTakenIterator{contract: _ISnapshots.contract, event: "SnapshotTaken", logs: logs, sub: sub}, nil
}

// WatchSnapshotTaken is a free log subscription operation binding the contract event 0x740c230bf3b8e6d0997cb207d19155e2721234d5690acf42dbc85615aedc362f.
//
// Solidity: event SnapshotTaken(uint256 chainId, uint256 indexed epoch, uint256 height, address indexed validator, bool isSafeToProceedConsensus)
func (_ISnapshots *ISnapshotsFilterer) WatchSnapshotTaken(opts *bind.WatchOpts, sink chan<- *ISnapshotsSnapshotTaken, epoch []*big.Int, validator []common.Address) (event.Subscription, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ISnapshots.contract.WatchLogs(opts, "SnapshotTaken", epochRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ISnapshotsSnapshotTaken)
				if err := _ISnapshots.contract.UnpackLog(event, "SnapshotTaken", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSnapshotTaken is a log parse operation binding the contract event 0x740c230bf3b8e6d0997cb207d19155e2721234d5690acf42dbc85615aedc362f.
//
// Solidity: event SnapshotTaken(uint256 chainId, uint256 indexed epoch, uint256 height, address indexed validator, bool isSafeToProceedConsensus)
func (_ISnapshots *ISnapshotsFilterer) ParseSnapshotTaken(log types.Log) (*ISnapshotsSnapshotTaken, error) {
	event := new(ISnapshotsSnapshotTaken)
	if err := _ISnapshots.contract.UnpackLog(event, "SnapshotTaken", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IValidatorPoolMetaData contains all meta data concerning the IValidatorPool contract.
var IValidatorPoolMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"claimExitingNFTPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectProfits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payoutEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoutToken\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"completeETHDKG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"getLocation\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"validators_\",\"type\":\"address[]\"}],\"name\":\"getLocations\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getValidator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getValidatorData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"internalType\":\"structValidatorData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidatorsAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidatorsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeETHDKG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"isAccusable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"isInExitingQueue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMaintenanceScheduled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dishonestValidator_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"disputer_\",\"type\":\"address\"}],\"name\":\"majorSlash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dishonestValidator_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"disputer_\",\"type\":\"address\"}],\"name\":\"minorSlash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseConsensus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"madnetHeight\",\"type\":\"uint256\"}],\"name\":\"pauseConsensusOnArbitraryHeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"stakerTokenIDs\",\"type\":\"uint256[]\"}],\"name\":\"registerValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scheduleMaintenance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"disputerReward_\",\"type\":\"uint256\"}],\"name\":\"setDisputerReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ip\",\"type\":\"string\"}],\"name\":\"setLocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxNumValidators_\",\"type\":\"uint256\"}],\"name\":\"setMaxNumValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeAmount_\",\"type\":\"uint256\"}],\"name\":\"setStakeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"tryGetTokenID\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unregisterAllValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"}],\"name\":\"unregisterValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IValidatorPoolABI is the input ABI used to generate the binding from.
// Deprecated: Use IValidatorPoolMetaData.ABI instead.
var IValidatorPoolABI = IValidatorPoolMetaData.ABI

// IValidatorPool is an auto generated Go binding around an Ethereum contract.
type IValidatorPool struct {
	IValidatorPoolCaller     // Read-only binding to the contract
	IValidatorPoolTransactor // Write-only binding to the contract
	IValidatorPoolFilterer   // Log filterer for contract events
}

// IValidatorPoolCaller is an auto generated read-only Go binding around an Ethereum contract.
type IValidatorPoolCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IValidatorPoolTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IValidatorPoolTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IValidatorPoolFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IValidatorPoolFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IValidatorPoolSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IValidatorPoolSession struct {
	Contract     *IValidatorPool   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IValidatorPoolCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IValidatorPoolCallerSession struct {
	Contract *IValidatorPoolCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// IValidatorPoolTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IValidatorPoolTransactorSession struct {
	Contract     *IValidatorPoolTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// IValidatorPoolRaw is an auto generated low-level Go binding around an Ethereum contract.
type IValidatorPoolRaw struct {
	Contract *IValidatorPool // Generic contract binding to access the raw methods on
}

// IValidatorPoolCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IValidatorPoolCallerRaw struct {
	Contract *IValidatorPoolCaller // Generic read-only contract binding to access the raw methods on
}

// IValidatorPoolTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IValidatorPoolTransactorRaw struct {
	Contract *IValidatorPoolTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIValidatorPool creates a new instance of IValidatorPool, bound to a specific deployed contract.
func NewIValidatorPool(address common.Address, backend bind.ContractBackend) (*IValidatorPool, error) {
	contract, err := bindIValidatorPool(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IValidatorPool{IValidatorPoolCaller: IValidatorPoolCaller{contract: contract}, IValidatorPoolTransactor: IValidatorPoolTransactor{contract: contract}, IValidatorPoolFilterer: IValidatorPoolFilterer{contract: contract}}, nil
}

// NewIValidatorPoolCaller creates a new read-only instance of IValidatorPool, bound to a specific deployed contract.
func NewIValidatorPoolCaller(address common.Address, caller bind.ContractCaller) (*IValidatorPoolCaller, error) {
	contract, err := bindIValidatorPool(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IValidatorPoolCaller{contract: contract}, nil
}

// NewIValidatorPoolTransactor creates a new write-only instance of IValidatorPool, bound to a specific deployed contract.
func NewIValidatorPoolTransactor(address common.Address, transactor bind.ContractTransactor) (*IValidatorPoolTransactor, error) {
	contract, err := bindIValidatorPool(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IValidatorPoolTransactor{contract: contract}, nil
}

// NewIValidatorPoolFilterer creates a new log filterer instance of IValidatorPool, bound to a specific deployed contract.
func NewIValidatorPoolFilterer(address common.Address, filterer bind.ContractFilterer) (*IValidatorPoolFilterer, error) {
	contract, err := bindIValidatorPool(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IValidatorPoolFilterer{contract: contract}, nil
}

// bindIValidatorPool binds a generic wrapper to an already deployed contract.
func bindIValidatorPool(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IValidatorPoolABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IValidatorPool *IValidatorPoolRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IValidatorPool.Contract.IValidatorPoolCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IValidatorPool *IValidatorPoolRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IValidatorPool.Contract.IValidatorPoolTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IValidatorPool *IValidatorPoolRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IValidatorPool.Contract.IValidatorPoolTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IValidatorPool *IValidatorPoolCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IValidatorPool.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IValidatorPool *IValidatorPoolTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IValidatorPool.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IValidatorPool *IValidatorPoolTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IValidatorPool.Contract.contract.Transact(opts, method, params...)
}

// GetLocation is a free data retrieval call binding the contract method 0xd9e0dc59.
//
// Solidity: function getLocation(address validator) view returns(string)
func (_IValidatorPool *IValidatorPoolCaller) GetLocation(opts *bind.CallOpts, validator common.Address) (string, error) {
	var out []interface{}
	err := _IValidatorPool.contract.Call(opts, &out, "getLocation", validator)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetLocation is a free data retrieval call binding the contract method 0xd9e0dc59.
//
// Solidity: function getLocation(address validator) view returns(string)
func (_IValidatorPool *IValidatorPoolSession) GetLocation(validator common.Address) (string, error) {
	return _IValidatorPool.Contract.GetLocation(&_IValidatorPool.CallOpts, validator)
}

// GetLocation is a free data retrieval call binding the contract method 0xd9e0dc59.
//
// Solidity: function getLocation(address validator) view returns(string)
func (_IValidatorPool *IValidatorPoolCallerSession) GetLocation(validator common.Address) (string, error) {
	return _IValidatorPool.Contract.GetLocation(&_IValidatorPool.CallOpts, validator)
}

// GetLocations is a free data retrieval call binding the contract method 0x76207f9c.
//
// Solidity: function getLocations(address[] validators_) view returns(string[])
func (_IValidatorPool *IValidatorPoolCaller) GetLocations(opts *bind.CallOpts, validators_ []common.Address) ([]string, error) {
	var out []interface{}
	err := _IValidatorPool.contract.Call(opts, &out, "getLocations", validators_)

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// GetLocations is a free data retrieval call binding the contract method 0x76207f9c.
//
// Solidity: function getLocations(address[] validators_) view returns(string[])
func (_IValidatorPool *IValidatorPoolSession) GetLocations(validators_ []common.Address) ([]string, error) {
	return _IValidatorPool.Contract.GetLocations(&_IValidatorPool.CallOpts, validators_)
}

// GetLocations is a free data retrieval call binding the contract method 0x76207f9c.
//
// Solidity: function getLocations(address[] validators_) view returns(string[])
func (_IValidatorPool *IValidatorPoolCallerSession) GetLocations(validators_ []common.Address) ([]string, error) {
	return _IValidatorPool.Contract.GetLocations(&_IValidatorPool.CallOpts, validators_)
}

// GetValidator is a free data retrieval call binding the contract method 0xb5d89627.
//
// Solidity: function getValidator(uint256 index) view returns(address)
func (_IValidatorPool *IValidatorPoolCaller) GetValidator(opts *bind.CallOpts, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _IValidatorPool.contract.Call(opts, &out, "getValidator", index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetValidator is a free data retrieval call binding the contract method 0xb5d89627.
//
// Solidity: function getValidator(uint256 index) view returns(address)
func (_IValidatorPool *IValidatorPoolSession) GetValidator(index *big.Int) (common.Address, error) {
	return _IValidatorPool.Contract.GetValidator(&_IValidatorPool.CallOpts, index)
}

// GetValidator is a free data retrieval call binding the contract method 0xb5d89627.
//
// Solidity: function getValidator(uint256 index) view returns(address)
func (_IValidatorPool *IValidatorPoolCallerSession) GetValidator(index *big.Int) (common.Address, error) {
	return _IValidatorPool.Contract.GetValidator(&_IValidatorPool.CallOpts, index)
}

// GetValidatorData is a free data retrieval call binding the contract method 0xc0951451.
//
// Solidity: function getValidatorData(uint256 index) view returns((address,uint256))
func (_IValidatorPool *IValidatorPoolCaller) GetValidatorData(opts *bind.CallOpts, index *big.Int) (ValidatorData, error) {
	var out []interface{}
	err := _IValidatorPool.contract.Call(opts, &out, "getValidatorData", index)

	if err != nil {
		return *new(ValidatorData), err
	}

	out0 := *abi.ConvertType(out[0], new(ValidatorData)).(*ValidatorData)

	return out0, err

}

// GetValidatorData is a free data retrieval call binding the contract method 0xc0951451.
//
// Solidity: function getValidatorData(uint256 index) view returns((address,uint256))
func (_IValidatorPool *IValidatorPoolSession) GetValidatorData(index *big.Int) (ValidatorData, error) {
	return _IValidatorPool.Contract.GetValidatorData(&_IValidatorPool.CallOpts, index)
}

// GetValidatorData is a free data retrieval call binding the contract method 0xc0951451.
//
// Solidity: function getValidatorData(uint256 index) view returns((address,uint256))
func (_IValidatorPool *IValidatorPoolCallerSession) GetValidatorData(index *big.Int) (ValidatorData, error) {
	return _IValidatorPool.Contract.GetValidatorData(&_IValidatorPool.CallOpts, index)
}

// GetValidatorsAddresses is a free data retrieval call binding the contract method 0x9c7d8961.
//
// Solidity: function getValidatorsAddresses() view returns(address[])
func (_IValidatorPool *IValidatorPoolCaller) GetValidatorsAddresses(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _IValidatorPool.contract.Call(opts, &out, "getValidatorsAddresses")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetValidatorsAddresses is a free data retrieval call binding the contract method 0x9c7d8961.
//
// Solidity: function getValidatorsAddresses() view returns(address[])
func (_IValidatorPool *IValidatorPoolSession) GetValidatorsAddresses() ([]common.Address, error) {
	return _IValidatorPool.Contract.GetValidatorsAddresses(&_IValidatorPool.CallOpts)
}

// GetValidatorsAddresses is a free data retrieval call binding the contract method 0x9c7d8961.
//
// Solidity: function getValidatorsAddresses() view returns(address[])
func (_IValidatorPool *IValidatorPoolCallerSession) GetValidatorsAddresses() ([]common.Address, error) {
	return _IValidatorPool.Contract.GetValidatorsAddresses(&_IValidatorPool.CallOpts)
}

// GetValidatorsCount is a free data retrieval call binding the contract method 0x27498240.
//
// Solidity: function getValidatorsCount() view returns(uint256)
func (_IValidatorPool *IValidatorPoolCaller) GetValidatorsCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IValidatorPool.contract.Call(opts, &out, "getValidatorsCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetValidatorsCount is a free data retrieval call binding the contract method 0x27498240.
//
// Solidity: function getValidatorsCount() view returns(uint256)
func (_IValidatorPool *IValidatorPoolSession) GetValidatorsCount() (*big.Int, error) {
	return _IValidatorPool.Contract.GetValidatorsCount(&_IValidatorPool.CallOpts)
}

// GetValidatorsCount is a free data retrieval call binding the contract method 0x27498240.
//
// Solidity: function getValidatorsCount() view returns(uint256)
func (_IValidatorPool *IValidatorPoolCallerSession) GetValidatorsCount() (*big.Int, error) {
	return _IValidatorPool.Contract.GetValidatorsCount(&_IValidatorPool.CallOpts)
}

// IsAccusable is a free data retrieval call binding the contract method 0x20c2856d.
//
// Solidity: function isAccusable(address participant) view returns(bool)
func (_IValidatorPool *IValidatorPoolCaller) IsAccusable(opts *bind.CallOpts, participant common.Address) (bool, error) {
	var out []interface{}
	err := _IValidatorPool.contract.Call(opts, &out, "isAccusable", participant)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsAccusable is a free data retrieval call binding the contract method 0x20c2856d.
//
// Solidity: function isAccusable(address participant) view returns(bool)
func (_IValidatorPool *IValidatorPoolSession) IsAccusable(participant common.Address) (bool, error) {
	return _IValidatorPool.Contract.IsAccusable(&_IValidatorPool.CallOpts, participant)
}

// IsAccusable is a free data retrieval call binding the contract method 0x20c2856d.
//
// Solidity: function isAccusable(address participant) view returns(bool)
func (_IValidatorPool *IValidatorPoolCallerSession) IsAccusable(participant common.Address) (bool, error) {
	return _IValidatorPool.Contract.IsAccusable(&_IValidatorPool.CallOpts, participant)
}

// IsInExitingQueue is a free data retrieval call binding the contract method 0xe4ad75f1.
//
// Solidity: function isInExitingQueue(address participant) view returns(bool)
func (_IValidatorPool *IValidatorPoolCaller) IsInExitingQueue(opts *bind.CallOpts, participant common.Address) (bool, error) {
	var out []interface{}
	err := _IValidatorPool.contract.Call(opts, &out, "isInExitingQueue", participant)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsInExitingQueue is a free data retrieval call binding the contract method 0xe4ad75f1.
//
// Solidity: function isInExitingQueue(address participant) view returns(bool)
func (_IValidatorPool *IValidatorPoolSession) IsInExitingQueue(participant common.Address) (bool, error) {
	return _IValidatorPool.Contract.IsInExitingQueue(&_IValidatorPool.CallOpts, participant)
}

// IsInExitingQueue is a free data retrieval call binding the contract method 0xe4ad75f1.
//
// Solidity: function isInExitingQueue(address participant) view returns(bool)
func (_IValidatorPool *IValidatorPoolCallerSession) IsInExitingQueue(participant common.Address) (bool, error) {
	return _IValidatorPool.Contract.IsInExitingQueue(&_IValidatorPool.CallOpts, participant)
}

// IsMaintenanceScheduled is a free data retrieval call binding the contract method 0x1885570f.
//
// Solidity: function isMaintenanceScheduled() view returns(bool)
func (_IValidatorPool *IValidatorPoolCaller) IsMaintenanceScheduled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _IValidatorPool.contract.Call(opts, &out, "isMaintenanceScheduled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsMaintenanceScheduled is a free data retrieval call binding the contract method 0x1885570f.
//
// Solidity: function isMaintenanceScheduled() view returns(bool)
func (_IValidatorPool *IValidatorPoolSession) IsMaintenanceScheduled() (bool, error) {
	return _IValidatorPool.Contract.IsMaintenanceScheduled(&_IValidatorPool.CallOpts)
}

// IsMaintenanceScheduled is a free data retrieval call binding the contract method 0x1885570f.
//
// Solidity: function isMaintenanceScheduled() view returns(bool)
func (_IValidatorPool *IValidatorPoolCallerSession) IsMaintenanceScheduled() (bool, error) {
	return _IValidatorPool.Contract.IsMaintenanceScheduled(&_IValidatorPool.CallOpts)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address participant) view returns(bool)
func (_IValidatorPool *IValidatorPoolCaller) IsValidator(opts *bind.CallOpts, participant common.Address) (bool, error) {
	var out []interface{}
	err := _IValidatorPool.contract.Call(opts, &out, "isValidator", participant)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address participant) view returns(bool)
func (_IValidatorPool *IValidatorPoolSession) IsValidator(participant common.Address) (bool, error) {
	return _IValidatorPool.Contract.IsValidator(&_IValidatorPool.CallOpts, participant)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address participant) view returns(bool)
func (_IValidatorPool *IValidatorPoolCallerSession) IsValidator(participant common.Address) (bool, error) {
	return _IValidatorPool.Contract.IsValidator(&_IValidatorPool.CallOpts, participant)
}

// TryGetTokenID is a free data retrieval call binding the contract method 0xee9e49bd.
//
// Solidity: function tryGetTokenID(address account_) view returns(bool, address, uint256)
func (_IValidatorPool *IValidatorPoolCaller) TryGetTokenID(opts *bind.CallOpts, account_ common.Address) (bool, common.Address, *big.Int, error) {
	var out []interface{}
	err := _IValidatorPool.contract.Call(opts, &out, "tryGetTokenID", account_)

	if err != nil {
		return *new(bool), *new(common.Address), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	out1 := *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return out0, out1, out2, err

}

// TryGetTokenID is a free data retrieval call binding the contract method 0xee9e49bd.
//
// Solidity: function tryGetTokenID(address account_) view returns(bool, address, uint256)
func (_IValidatorPool *IValidatorPoolSession) TryGetTokenID(account_ common.Address) (bool, common.Address, *big.Int, error) {
	return _IValidatorPool.Contract.TryGetTokenID(&_IValidatorPool.CallOpts, account_)
}

// TryGetTokenID is a free data retrieval call binding the contract method 0xee9e49bd.
//
// Solidity: function tryGetTokenID(address account_) view returns(bool, address, uint256)
func (_IValidatorPool *IValidatorPoolCallerSession) TryGetTokenID(account_ common.Address) (bool, common.Address, *big.Int, error) {
	return _IValidatorPool.Contract.TryGetTokenID(&_IValidatorPool.CallOpts, account_)
}

// ClaimExitingNFTPosition is a paid mutator transaction binding the contract method 0x769cc695.
//
// Solidity: function claimExitingNFTPosition() returns(uint256)
func (_IValidatorPool *IValidatorPoolTransactor) ClaimExitingNFTPosition(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IValidatorPool.contract.Transact(opts, "claimExitingNFTPosition")
}

// ClaimExitingNFTPosition is a paid mutator transaction binding the contract method 0x769cc695.
//
// Solidity: function claimExitingNFTPosition() returns(uint256)
func (_IValidatorPool *IValidatorPoolSession) ClaimExitingNFTPosition() (*types.Transaction, error) {
	return _IValidatorPool.Contract.ClaimExitingNFTPosition(&_IValidatorPool.TransactOpts)
}

// ClaimExitingNFTPosition is a paid mutator transaction binding the contract method 0x769cc695.
//
// Solidity: function claimExitingNFTPosition() returns(uint256)
func (_IValidatorPool *IValidatorPoolTransactorSession) ClaimExitingNFTPosition() (*types.Transaction, error) {
	return _IValidatorPool.Contract.ClaimExitingNFTPosition(&_IValidatorPool.TransactOpts)
}

// CollectProfits is a paid mutator transaction binding the contract method 0xc958e0d6.
//
// Solidity: function collectProfits() returns(uint256 payoutEth, uint256 payoutToken)
func (_IValidatorPool *IValidatorPoolTransactor) CollectProfits(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IValidatorPool.contract.Transact(opts, "collectProfits")
}

// CollectProfits is a paid mutator transaction binding the contract method 0xc958e0d6.
//
// Solidity: function collectProfits() returns(uint256 payoutEth, uint256 payoutToken)
func (_IValidatorPool *IValidatorPoolSession) CollectProfits() (*types.Transaction, error) {
	return _IValidatorPool.Contract.CollectProfits(&_IValidatorPool.TransactOpts)
}

// CollectProfits is a paid mutator transaction binding the contract method 0xc958e0d6.
//
// Solidity: function collectProfits() returns(uint256 payoutEth, uint256 payoutToken)
func (_IValidatorPool *IValidatorPoolTransactorSession) CollectProfits() (*types.Transaction, error) {
	return _IValidatorPool.Contract.CollectProfits(&_IValidatorPool.TransactOpts)
}

// CompleteETHDKG is a paid mutator transaction binding the contract method 0x8f579924.
//
// Solidity: function completeETHDKG() returns()
func (_IValidatorPool *IValidatorPoolTransactor) CompleteETHDKG(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IValidatorPool.contract.Transact(opts, "completeETHDKG")
}

// CompleteETHDKG is a paid mutator transaction binding the contract method 0x8f579924.
//
// Solidity: function completeETHDKG() returns()
func (_IValidatorPool *IValidatorPoolSession) CompleteETHDKG() (*types.Transaction, error) {
	return _IValidatorPool.Contract.CompleteETHDKG(&_IValidatorPool.TransactOpts)
}

// CompleteETHDKG is a paid mutator transaction binding the contract method 0x8f579924.
//
// Solidity: function completeETHDKG() returns()
func (_IValidatorPool *IValidatorPoolTransactorSession) CompleteETHDKG() (*types.Transaction, error) {
	return _IValidatorPool.Contract.CompleteETHDKG(&_IValidatorPool.TransactOpts)
}

// InitializeETHDKG is a paid mutator transaction binding the contract method 0x57b51c9c.
//
// Solidity: function initializeETHDKG() returns()
func (_IValidatorPool *IValidatorPoolTransactor) InitializeETHDKG(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IValidatorPool.contract.Transact(opts, "initializeETHDKG")
}

// InitializeETHDKG is a paid mutator transaction binding the contract method 0x57b51c9c.
//
// Solidity: function initializeETHDKG() returns()
func (_IValidatorPool *IValidatorPoolSession) InitializeETHDKG() (*types.Transaction, error) {
	return _IValidatorPool.Contract.InitializeETHDKG(&_IValidatorPool.TransactOpts)
}

// InitializeETHDKG is a paid mutator transaction binding the contract method 0x57b51c9c.
//
// Solidity: function initializeETHDKG() returns()
func (_IValidatorPool *IValidatorPoolTransactorSession) InitializeETHDKG() (*types.Transaction, error) {
	return _IValidatorPool.Contract.InitializeETHDKG(&_IValidatorPool.TransactOpts)
}

// MajorSlash is a paid mutator transaction binding the contract method 0x048d56c7.
//
// Solidity: function majorSlash(address dishonestValidator_, address disputer_) returns()
func (_IValidatorPool *IValidatorPoolTransactor) MajorSlash(opts *bind.TransactOpts, dishonestValidator_ common.Address, disputer_ common.Address) (*types.Transaction, error) {
	return _IValidatorPool.contract.Transact(opts, "majorSlash", dishonestValidator_, disputer_)
}

// MajorSlash is a paid mutator transaction binding the contract method 0x048d56c7.
//
// Solidity: function majorSlash(address dishonestValidator_, address disputer_) returns()
func (_IValidatorPool *IValidatorPoolSession) MajorSlash(dishonestValidator_ common.Address, disputer_ common.Address) (*types.Transaction, error) {
	return _IValidatorPool.Contract.MajorSlash(&_IValidatorPool.TransactOpts, dishonestValidator_, disputer_)
}

// MajorSlash is a paid mutator transaction binding the contract method 0x048d56c7.
//
// Solidity: function majorSlash(address dishonestValidator_, address disputer_) returns()
func (_IValidatorPool *IValidatorPoolTransactorSession) MajorSlash(dishonestValidator_ common.Address, disputer_ common.Address) (*types.Transaction, error) {
	return _IValidatorPool.Contract.MajorSlash(&_IValidatorPool.TransactOpts, dishonestValidator_, disputer_)
}

// MinorSlash is a paid mutator transaction binding the contract method 0x64c0461c.
//
// Solidity: function minorSlash(address dishonestValidator_, address disputer_) returns()
func (_IValidatorPool *IValidatorPoolTransactor) MinorSlash(opts *bind.TransactOpts, dishonestValidator_ common.Address, disputer_ common.Address) (*types.Transaction, error) {
	return _IValidatorPool.contract.Transact(opts, "minorSlash", dishonestValidator_, disputer_)
}

// MinorSlash is a paid mutator transaction binding the contract method 0x64c0461c.
//
// Solidity: function minorSlash(address dishonestValidator_, address disputer_) returns()
func (_IValidatorPool *IValidatorPoolSession) MinorSlash(dishonestValidator_ common.Address, disputer_ common.Address) (*types.Transaction, error) {
	return _IValidatorPool.Contract.MinorSlash(&_IValidatorPool.TransactOpts, dishonestValidator_, disputer_)
}

// MinorSlash is a paid mutator transaction binding the contract method 0x64c0461c.
//
// Solidity: function minorSlash(address dishonestValidator_, address disputer_) returns()
func (_IValidatorPool *IValidatorPoolTransactorSession) MinorSlash(dishonestValidator_ common.Address, disputer_ common.Address) (*types.Transaction, error) {
	return _IValidatorPool.Contract.MinorSlash(&_IValidatorPool.TransactOpts, dishonestValidator_, disputer_)
}

// PauseConsensus is a paid mutator transaction binding the contract method 0x1e5975f4.
//
// Solidity: function pauseConsensus() returns()
func (_IValidatorPool *IValidatorPoolTransactor) PauseConsensus(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IValidatorPool.contract.Transact(opts, "pauseConsensus")
}

// PauseConsensus is a paid mutator transaction binding the contract method 0x1e5975f4.
//
// Solidity: function pauseConsensus() returns()
func (_IValidatorPool *IValidatorPoolSession) PauseConsensus() (*types.Transaction, error) {
	return _IValidatorPool.Contract.PauseConsensus(&_IValidatorPool.TransactOpts)
}

// PauseConsensus is a paid mutator transaction binding the contract method 0x1e5975f4.
//
// Solidity: function pauseConsensus() returns()
func (_IValidatorPool *IValidatorPoolTransactorSession) PauseConsensus() (*types.Transaction, error) {
	return _IValidatorPool.Contract.PauseConsensus(&_IValidatorPool.TransactOpts)
}

// PauseConsensusOnArbitraryHeight is a paid mutator transaction binding the contract method 0xbc33bb01.
//
// Solidity: function pauseConsensusOnArbitraryHeight(uint256 madnetHeight) returns()
func (_IValidatorPool *IValidatorPoolTransactor) PauseConsensusOnArbitraryHeight(opts *bind.TransactOpts, madnetHeight *big.Int) (*types.Transaction, error) {
	return _IValidatorPool.contract.Transact(opts, "pauseConsensusOnArbitraryHeight", madnetHeight)
}

// PauseConsensusOnArbitraryHeight is a paid mutator transaction binding the contract method 0xbc33bb01.
//
// Solidity: function pauseConsensusOnArbitraryHeight(uint256 madnetHeight) returns()
func (_IValidatorPool *IValidatorPoolSession) PauseConsensusOnArbitraryHeight(madnetHeight *big.Int) (*types.Transaction, error) {
	return _IValidatorPool.Contract.PauseConsensusOnArbitraryHeight(&_IValidatorPool.TransactOpts, madnetHeight)
}

// PauseConsensusOnArbitraryHeight is a paid mutator transaction binding the contract method 0xbc33bb01.
//
// Solidity: function pauseConsensusOnArbitraryHeight(uint256 madnetHeight) returns()
func (_IValidatorPool *IValidatorPoolTransactorSession) PauseConsensusOnArbitraryHeight(madnetHeight *big.Int) (*types.Transaction, error) {
	return _IValidatorPool.Contract.PauseConsensusOnArbitraryHeight(&_IValidatorPool.TransactOpts, madnetHeight)
}

// RegisterValidators is a paid mutator transaction binding the contract method 0x65bd91af.
//
// Solidity: function registerValidators(address[] validators, uint256[] stakerTokenIDs) returns()
func (_IValidatorPool *IValidatorPoolTransactor) RegisterValidators(opts *bind.TransactOpts, validators []common.Address, stakerTokenIDs []*big.Int) (*types.Transaction, error) {
	return _IValidatorPool.contract.Transact(opts, "registerValidators", validators, stakerTokenIDs)
}

// RegisterValidators is a paid mutator transaction binding the contract method 0x65bd91af.
//
// Solidity: function registerValidators(address[] validators, uint256[] stakerTokenIDs) returns()
func (_IValidatorPool *IValidatorPoolSession) RegisterValidators(validators []common.Address, stakerTokenIDs []*big.Int) (*types.Transaction, error) {
	return _IValidatorPool.Contract.RegisterValidators(&_IValidatorPool.TransactOpts, validators, stakerTokenIDs)
}

// RegisterValidators is a paid mutator transaction binding the contract method 0x65bd91af.
//
// Solidity: function registerValidators(address[] validators, uint256[] stakerTokenIDs) returns()
func (_IValidatorPool *IValidatorPoolTransactorSession) RegisterValidators(validators []common.Address, stakerTokenIDs []*big.Int) (*types.Transaction, error) {
	return _IValidatorPool.Contract.RegisterValidators(&_IValidatorPool.TransactOpts, validators, stakerTokenIDs)
}

// ScheduleMaintenance is a paid mutator transaction binding the contract method 0x2380db1a.
//
// Solidity: function scheduleMaintenance() returns()
func (_IValidatorPool *IValidatorPoolTransactor) ScheduleMaintenance(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IValidatorPool.contract.Transact(opts, "scheduleMaintenance")
}

// ScheduleMaintenance is a paid mutator transaction binding the contract method 0x2380db1a.
//
// Solidity: function scheduleMaintenance() returns()
func (_IValidatorPool *IValidatorPoolSession) ScheduleMaintenance() (*types.Transaction, error) {
	return _IValidatorPool.Contract.ScheduleMaintenance(&_IValidatorPool.TransactOpts)
}

// ScheduleMaintenance is a paid mutator transaction binding the contract method 0x2380db1a.
//
// Solidity: function scheduleMaintenance() returns()
func (_IValidatorPool *IValidatorPoolTransactorSession) ScheduleMaintenance() (*types.Transaction, error) {
	return _IValidatorPool.Contract.ScheduleMaintenance(&_IValidatorPool.TransactOpts)
}

// SetDisputerReward is a paid mutator transaction binding the contract method 0x7d907284.
//
// Solidity: function setDisputerReward(uint256 disputerReward_) returns()
func (_IValidatorPool *IValidatorPoolTransactor) SetDisputerReward(opts *bind.TransactOpts, disputerReward_ *big.Int) (*types.Transaction, error) {
	return _IValidatorPool.contract.Transact(opts, "setDisputerReward", disputerReward_)
}

// SetDisputerReward is a paid mutator transaction binding the contract method 0x7d907284.
//
// Solidity: function setDisputerReward(uint256 disputerReward_) returns()
func (_IValidatorPool *IValidatorPoolSession) SetDisputerReward(disputerReward_ *big.Int) (*types.Transaction, error) {
	return _IValidatorPool.Contract.SetDisputerReward(&_IValidatorPool.TransactOpts, disputerReward_)
}

// SetDisputerReward is a paid mutator transaction binding the contract method 0x7d907284.
//
// Solidity: function setDisputerReward(uint256 disputerReward_) returns()
func (_IValidatorPool *IValidatorPoolTransactorSession) SetDisputerReward(disputerReward_ *big.Int) (*types.Transaction, error) {
	return _IValidatorPool.Contract.SetDisputerReward(&_IValidatorPool.TransactOpts, disputerReward_)
}

// SetLocation is a paid mutator transaction binding the contract method 0x827bfbdf.
//
// Solidity: function setLocation(string ip) returns()
func (_IValidatorPool *IValidatorPoolTransactor) SetLocation(opts *bind.TransactOpts, ip string) (*types.Transaction, error) {
	return _IValidatorPool.contract.Transact(opts, "setLocation", ip)
}

// SetLocation is a paid mutator transaction binding the contract method 0x827bfbdf.
//
// Solidity: function setLocation(string ip) returns()
func (_IValidatorPool *IValidatorPoolSession) SetLocation(ip string) (*types.Transaction, error) {
	return _IValidatorPool.Contract.SetLocation(&_IValidatorPool.TransactOpts, ip)
}

// SetLocation is a paid mutator transaction binding the contract method 0x827bfbdf.
//
// Solidity: function setLocation(string ip) returns()
func (_IValidatorPool *IValidatorPoolTransactorSession) SetLocation(ip string) (*types.Transaction, error) {
	return _IValidatorPool.Contract.SetLocation(&_IValidatorPool.TransactOpts, ip)
}

// SetMaxNumValidators is a paid mutator transaction binding the contract method 0x6c0da0b4.
//
// Solidity: function setMaxNumValidators(uint256 maxNumValidators_) returns()
func (_IValidatorPool *IValidatorPoolTransactor) SetMaxNumValidators(opts *bind.TransactOpts, maxNumValidators_ *big.Int) (*types.Transaction, error) {
	return _IValidatorPool.contract.Transact(opts, "setMaxNumValidators", maxNumValidators_)
}

// SetMaxNumValidators is a paid mutator transaction binding the contract method 0x6c0da0b4.
//
// Solidity: function setMaxNumValidators(uint256 maxNumValidators_) returns()
func (_IValidatorPool *IValidatorPoolSession) SetMaxNumValidators(maxNumValidators_ *big.Int) (*types.Transaction, error) {
	return _IValidatorPool.Contract.SetMaxNumValidators(&_IValidatorPool.TransactOpts, maxNumValidators_)
}

// SetMaxNumValidators is a paid mutator transaction binding the contract method 0x6c0da0b4.
//
// Solidity: function setMaxNumValidators(uint256 maxNumValidators_) returns()
func (_IValidatorPool *IValidatorPoolTransactorSession) SetMaxNumValidators(maxNumValidators_ *big.Int) (*types.Transaction, error) {
	return _IValidatorPool.Contract.SetMaxNumValidators(&_IValidatorPool.TransactOpts, maxNumValidators_)
}

// SetStakeAmount is a paid mutator transaction binding the contract method 0x43808c50.
//
// Solidity: function setStakeAmount(uint256 stakeAmount_) returns()
func (_IValidatorPool *IValidatorPoolTransactor) SetStakeAmount(opts *bind.TransactOpts, stakeAmount_ *big.Int) (*types.Transaction, error) {
	return _IValidatorPool.contract.Transact(opts, "setStakeAmount", stakeAmount_)
}

// SetStakeAmount is a paid mutator transaction binding the contract method 0x43808c50.
//
// Solidity: function setStakeAmount(uint256 stakeAmount_) returns()
func (_IValidatorPool *IValidatorPoolSession) SetStakeAmount(stakeAmount_ *big.Int) (*types.Transaction, error) {
	return _IValidatorPool.Contract.SetStakeAmount(&_IValidatorPool.TransactOpts, stakeAmount_)
}

// SetStakeAmount is a paid mutator transaction binding the contract method 0x43808c50.
//
// Solidity: function setStakeAmount(uint256 stakeAmount_) returns()
func (_IValidatorPool *IValidatorPoolTransactorSession) SetStakeAmount(stakeAmount_ *big.Int) (*types.Transaction, error) {
	return _IValidatorPool.Contract.SetStakeAmount(&_IValidatorPool.TransactOpts, stakeAmount_)
}

// UnregisterAllValidators is a paid mutator transaction binding the contract method 0xf6442e24.
//
// Solidity: function unregisterAllValidators() returns()
func (_IValidatorPool *IValidatorPoolTransactor) UnregisterAllValidators(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IValidatorPool.contract.Transact(opts, "unregisterAllValidators")
}

// UnregisterAllValidators is a paid mutator transaction binding the contract method 0xf6442e24.
//
// Solidity: function unregisterAllValidators() returns()
func (_IValidatorPool *IValidatorPoolSession) UnregisterAllValidators() (*types.Transaction, error) {
	return _IValidatorPool.Contract.UnregisterAllValidators(&_IValidatorPool.TransactOpts)
}

// UnregisterAllValidators is a paid mutator transaction binding the contract method 0xf6442e24.
//
// Solidity: function unregisterAllValidators() returns()
func (_IValidatorPool *IValidatorPoolTransactorSession) UnregisterAllValidators() (*types.Transaction, error) {
	return _IValidatorPool.Contract.UnregisterAllValidators(&_IValidatorPool.TransactOpts)
}

// UnregisterValidators is a paid mutator transaction binding the contract method 0xc6e86ad6.
//
// Solidity: function unregisterValidators(address[] validators) returns()
func (_IValidatorPool *IValidatorPoolTransactor) UnregisterValidators(opts *bind.TransactOpts, validators []common.Address) (*types.Transaction, error) {
	return _IValidatorPool.contract.Transact(opts, "unregisterValidators", validators)
}

// UnregisterValidators is a paid mutator transaction binding the contract method 0xc6e86ad6.
//
// Solidity: function unregisterValidators(address[] validators) returns()
func (_IValidatorPool *IValidatorPoolSession) UnregisterValidators(validators []common.Address) (*types.Transaction, error) {
	return _IValidatorPool.Contract.UnregisterValidators(&_IValidatorPool.TransactOpts, validators)
}

// UnregisterValidators is a paid mutator transaction binding the contract method 0xc6e86ad6.
//
// Solidity: function unregisterValidators(address[] validators) returns()
func (_IValidatorPool *IValidatorPoolTransactorSession) UnregisterValidators(validators []common.Address) (*types.Transaction, error) {
	return _IValidatorPool.Contract.UnregisterValidators(&_IValidatorPool.TransactOpts, validators)
}

// IValidatorPoolEventsMetaData contains all meta data concerning the IValidatorPoolEvents contract.
var IValidatorPoolEventsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[],\"name\":\"MaintenanceScheduled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorNFT\",\"type\":\"uint256\"}],\"name\":\"ValidatorJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeNFT\",\"type\":\"uint256\"}],\"name\":\"ValidatorLeft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ValidatorMajorSlashed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeNFT\",\"type\":\"uint256\"}],\"name\":\"ValidatorMinorSlashed\",\"type\":\"event\"}]",
}

// IValidatorPoolEventsABI is the input ABI used to generate the binding from.
// Deprecated: Use IValidatorPoolEventsMetaData.ABI instead.
var IValidatorPoolEventsABI = IValidatorPoolEventsMetaData.ABI

// IValidatorPoolEvents is an auto generated Go binding around an Ethereum contract.
type IValidatorPoolEvents struct {
	IValidatorPoolEventsCaller     // Read-only binding to the contract
	IValidatorPoolEventsTransactor // Write-only binding to the contract
	IValidatorPoolEventsFilterer   // Log filterer for contract events
}

// IValidatorPoolEventsCaller is an auto generated read-only Go binding around an Ethereum contract.
type IValidatorPoolEventsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IValidatorPoolEventsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IValidatorPoolEventsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IValidatorPoolEventsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IValidatorPoolEventsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IValidatorPoolEventsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IValidatorPoolEventsSession struct {
	Contract     *IValidatorPoolEvents // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// IValidatorPoolEventsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IValidatorPoolEventsCallerSession struct {
	Contract *IValidatorPoolEventsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// IValidatorPoolEventsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IValidatorPoolEventsTransactorSession struct {
	Contract     *IValidatorPoolEventsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// IValidatorPoolEventsRaw is an auto generated low-level Go binding around an Ethereum contract.
type IValidatorPoolEventsRaw struct {
	Contract *IValidatorPoolEvents // Generic contract binding to access the raw methods on
}

// IValidatorPoolEventsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IValidatorPoolEventsCallerRaw struct {
	Contract *IValidatorPoolEventsCaller // Generic read-only contract binding to access the raw methods on
}

// IValidatorPoolEventsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IValidatorPoolEventsTransactorRaw struct {
	Contract *IValidatorPoolEventsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIValidatorPoolEvents creates a new instance of IValidatorPoolEvents, bound to a specific deployed contract.
func NewIValidatorPoolEvents(address common.Address, backend bind.ContractBackend) (*IValidatorPoolEvents, error) {
	contract, err := bindIValidatorPoolEvents(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IValidatorPoolEvents{IValidatorPoolEventsCaller: IValidatorPoolEventsCaller{contract: contract}, IValidatorPoolEventsTransactor: IValidatorPoolEventsTransactor{contract: contract}, IValidatorPoolEventsFilterer: IValidatorPoolEventsFilterer{contract: contract}}, nil
}

// NewIValidatorPoolEventsCaller creates a new read-only instance of IValidatorPoolEvents, bound to a specific deployed contract.
func NewIValidatorPoolEventsCaller(address common.Address, caller bind.ContractCaller) (*IValidatorPoolEventsCaller, error) {
	contract, err := bindIValidatorPoolEvents(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IValidatorPoolEventsCaller{contract: contract}, nil
}

// NewIValidatorPoolEventsTransactor creates a new write-only instance of IValidatorPoolEvents, bound to a specific deployed contract.
func NewIValidatorPoolEventsTransactor(address common.Address, transactor bind.ContractTransactor) (*IValidatorPoolEventsTransactor, error) {
	contract, err := bindIValidatorPoolEvents(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IValidatorPoolEventsTransactor{contract: contract}, nil
}

// NewIValidatorPoolEventsFilterer creates a new log filterer instance of IValidatorPoolEvents, bound to a specific deployed contract.
func NewIValidatorPoolEventsFilterer(address common.Address, filterer bind.ContractFilterer) (*IValidatorPoolEventsFilterer, error) {
	contract, err := bindIValidatorPoolEvents(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IValidatorPoolEventsFilterer{contract: contract}, nil
}

// bindIValidatorPoolEvents binds a generic wrapper to an already deployed contract.
func bindIValidatorPoolEvents(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IValidatorPoolEventsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IValidatorPoolEvents *IValidatorPoolEventsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IValidatorPoolEvents.Contract.IValidatorPoolEventsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IValidatorPoolEvents *IValidatorPoolEventsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IValidatorPoolEvents.Contract.IValidatorPoolEventsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IValidatorPoolEvents *IValidatorPoolEventsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IValidatorPoolEvents.Contract.IValidatorPoolEventsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IValidatorPoolEvents *IValidatorPoolEventsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IValidatorPoolEvents.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IValidatorPoolEvents *IValidatorPoolEventsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IValidatorPoolEvents.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IValidatorPoolEvents *IValidatorPoolEventsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IValidatorPoolEvents.Contract.contract.Transact(opts, method, params...)
}

// IValidatorPoolEventsMaintenanceScheduledIterator is returned from FilterMaintenanceScheduled and is used to iterate over the raw logs and unpacked data for MaintenanceScheduled events raised by the IValidatorPoolEvents contract.
type IValidatorPoolEventsMaintenanceScheduledIterator struct {
	Event *IValidatorPoolEventsMaintenanceScheduled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IValidatorPoolEventsMaintenanceScheduledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IValidatorPoolEventsMaintenanceScheduled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IValidatorPoolEventsMaintenanceScheduled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IValidatorPoolEventsMaintenanceScheduledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IValidatorPoolEventsMaintenanceScheduledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IValidatorPoolEventsMaintenanceScheduled represents a MaintenanceScheduled event raised by the IValidatorPoolEvents contract.
type IValidatorPoolEventsMaintenanceScheduled struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterMaintenanceScheduled is a free log retrieval operation binding the contract event 0xc77f315ab4072b428052ff8f369916ce39f7fa7e925613f3e9b28fe383c565c8.
//
// Solidity: event MaintenanceScheduled()
func (_IValidatorPoolEvents *IValidatorPoolEventsFilterer) FilterMaintenanceScheduled(opts *bind.FilterOpts) (*IValidatorPoolEventsMaintenanceScheduledIterator, error) {

	logs, sub, err := _IValidatorPoolEvents.contract.FilterLogs(opts, "MaintenanceScheduled")
	if err != nil {
		return nil, err
	}
	return &IValidatorPoolEventsMaintenanceScheduledIterator{contract: _IValidatorPoolEvents.contract, event: "MaintenanceScheduled", logs: logs, sub: sub}, nil
}

// WatchMaintenanceScheduled is a free log subscription operation binding the contract event 0xc77f315ab4072b428052ff8f369916ce39f7fa7e925613f3e9b28fe383c565c8.
//
// Solidity: event MaintenanceScheduled()
func (_IValidatorPoolEvents *IValidatorPoolEventsFilterer) WatchMaintenanceScheduled(opts *bind.WatchOpts, sink chan<- *IValidatorPoolEventsMaintenanceScheduled) (event.Subscription, error) {

	logs, sub, err := _IValidatorPoolEvents.contract.WatchLogs(opts, "MaintenanceScheduled")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IValidatorPoolEventsMaintenanceScheduled)
				if err := _IValidatorPoolEvents.contract.UnpackLog(event, "MaintenanceScheduled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMaintenanceScheduled is a log parse operation binding the contract event 0xc77f315ab4072b428052ff8f369916ce39f7fa7e925613f3e9b28fe383c565c8.
//
// Solidity: event MaintenanceScheduled()
func (_IValidatorPoolEvents *IValidatorPoolEventsFilterer) ParseMaintenanceScheduled(log types.Log) (*IValidatorPoolEventsMaintenanceScheduled, error) {
	event := new(IValidatorPoolEventsMaintenanceScheduled)
	if err := _IValidatorPoolEvents.contract.UnpackLog(event, "MaintenanceScheduled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IValidatorPoolEventsValidatorJoinedIterator is returned from FilterValidatorJoined and is used to iterate over the raw logs and unpacked data for ValidatorJoined events raised by the IValidatorPoolEvents contract.
type IValidatorPoolEventsValidatorJoinedIterator struct {
	Event *IValidatorPoolEventsValidatorJoined // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IValidatorPoolEventsValidatorJoinedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IValidatorPoolEventsValidatorJoined)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IValidatorPoolEventsValidatorJoined)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IValidatorPoolEventsValidatorJoinedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IValidatorPoolEventsValidatorJoinedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IValidatorPoolEventsValidatorJoined represents a ValidatorJoined event raised by the IValidatorPoolEvents contract.
type IValidatorPoolEventsValidatorJoined struct {
	Account      common.Address
	ValidatorNFT *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterValidatorJoined is a free log retrieval operation binding the contract event 0xe30848520248cd6b60cf19fe62a302a47e2d2c1c147deea1188e471751557a52.
//
// Solidity: event ValidatorJoined(address indexed account, uint256 validatorNFT)
func (_IValidatorPoolEvents *IValidatorPoolEventsFilterer) FilterValidatorJoined(opts *bind.FilterOpts, account []common.Address) (*IValidatorPoolEventsValidatorJoinedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _IValidatorPoolEvents.contract.FilterLogs(opts, "ValidatorJoined", accountRule)
	if err != nil {
		return nil, err
	}
	return &IValidatorPoolEventsValidatorJoinedIterator{contract: _IValidatorPoolEvents.contract, event: "ValidatorJoined", logs: logs, sub: sub}, nil
}

// WatchValidatorJoined is a free log subscription operation binding the contract event 0xe30848520248cd6b60cf19fe62a302a47e2d2c1c147deea1188e471751557a52.
//
// Solidity: event ValidatorJoined(address indexed account, uint256 validatorNFT)
func (_IValidatorPoolEvents *IValidatorPoolEventsFilterer) WatchValidatorJoined(opts *bind.WatchOpts, sink chan<- *IValidatorPoolEventsValidatorJoined, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _IValidatorPoolEvents.contract.WatchLogs(opts, "ValidatorJoined", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IValidatorPoolEventsValidatorJoined)
				if err := _IValidatorPoolEvents.contract.UnpackLog(event, "ValidatorJoined", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorJoined is a log parse operation binding the contract event 0xe30848520248cd6b60cf19fe62a302a47e2d2c1c147deea1188e471751557a52.
//
// Solidity: event ValidatorJoined(address indexed account, uint256 validatorNFT)
func (_IValidatorPoolEvents *IValidatorPoolEventsFilterer) ParseValidatorJoined(log types.Log) (*IValidatorPoolEventsValidatorJoined, error) {
	event := new(IValidatorPoolEventsValidatorJoined)
	if err := _IValidatorPoolEvents.contract.UnpackLog(event, "ValidatorJoined", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IValidatorPoolEventsValidatorLeftIterator is returned from FilterValidatorLeft and is used to iterate over the raw logs and unpacked data for ValidatorLeft events raised by the IValidatorPoolEvents contract.
type IValidatorPoolEventsValidatorLeftIterator struct {
	Event *IValidatorPoolEventsValidatorLeft // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IValidatorPoolEventsValidatorLeftIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IValidatorPoolEventsValidatorLeft)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IValidatorPoolEventsValidatorLeft)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IValidatorPoolEventsValidatorLeftIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IValidatorPoolEventsValidatorLeftIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IValidatorPoolEventsValidatorLeft represents a ValidatorLeft event raised by the IValidatorPoolEvents contract.
type IValidatorPoolEventsValidatorLeft struct {
	Account  common.Address
	StakeNFT *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterValidatorLeft is a free log retrieval operation binding the contract event 0x33ff7b2beda3cb99406d3401fd9e8d9001b93e74b845cf7346f6e7f70c703e73.
//
// Solidity: event ValidatorLeft(address indexed account, uint256 stakeNFT)
func (_IValidatorPoolEvents *IValidatorPoolEventsFilterer) FilterValidatorLeft(opts *bind.FilterOpts, account []common.Address) (*IValidatorPoolEventsValidatorLeftIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _IValidatorPoolEvents.contract.FilterLogs(opts, "ValidatorLeft", accountRule)
	if err != nil {
		return nil, err
	}
	return &IValidatorPoolEventsValidatorLeftIterator{contract: _IValidatorPoolEvents.contract, event: "ValidatorLeft", logs: logs, sub: sub}, nil
}

// WatchValidatorLeft is a free log subscription operation binding the contract event 0x33ff7b2beda3cb99406d3401fd9e8d9001b93e74b845cf7346f6e7f70c703e73.
//
// Solidity: event ValidatorLeft(address indexed account, uint256 stakeNFT)
func (_IValidatorPoolEvents *IValidatorPoolEventsFilterer) WatchValidatorLeft(opts *bind.WatchOpts, sink chan<- *IValidatorPoolEventsValidatorLeft, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _IValidatorPoolEvents.contract.WatchLogs(opts, "ValidatorLeft", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IValidatorPoolEventsValidatorLeft)
				if err := _IValidatorPoolEvents.contract.UnpackLog(event, "ValidatorLeft", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorLeft is a log parse operation binding the contract event 0x33ff7b2beda3cb99406d3401fd9e8d9001b93e74b845cf7346f6e7f70c703e73.
//
// Solidity: event ValidatorLeft(address indexed account, uint256 stakeNFT)
func (_IValidatorPoolEvents *IValidatorPoolEventsFilterer) ParseValidatorLeft(log types.Log) (*IValidatorPoolEventsValidatorLeft, error) {
	event := new(IValidatorPoolEventsValidatorLeft)
	if err := _IValidatorPoolEvents.contract.UnpackLog(event, "ValidatorLeft", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IValidatorPoolEventsValidatorMajorSlashedIterator is returned from FilterValidatorMajorSlashed and is used to iterate over the raw logs and unpacked data for ValidatorMajorSlashed events raised by the IValidatorPoolEvents contract.
type IValidatorPoolEventsValidatorMajorSlashedIterator struct {
	Event *IValidatorPoolEventsValidatorMajorSlashed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IValidatorPoolEventsValidatorMajorSlashedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IValidatorPoolEventsValidatorMajorSlashed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IValidatorPoolEventsValidatorMajorSlashed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IValidatorPoolEventsValidatorMajorSlashedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IValidatorPoolEventsValidatorMajorSlashedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IValidatorPoolEventsValidatorMajorSlashed represents a ValidatorMajorSlashed event raised by the IValidatorPoolEvents contract.
type IValidatorPoolEventsValidatorMajorSlashed struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterValidatorMajorSlashed is a free log retrieval operation binding the contract event 0xee806478c61c75fc3ec50328b2af43290d1860ef40d5dfbba62ece0e1e3abe9e.
//
// Solidity: event ValidatorMajorSlashed(address indexed account)
func (_IValidatorPoolEvents *IValidatorPoolEventsFilterer) FilterValidatorMajorSlashed(opts *bind.FilterOpts, account []common.Address) (*IValidatorPoolEventsValidatorMajorSlashedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _IValidatorPoolEvents.contract.FilterLogs(opts, "ValidatorMajorSlashed", accountRule)
	if err != nil {
		return nil, err
	}
	return &IValidatorPoolEventsValidatorMajorSlashedIterator{contract: _IValidatorPoolEvents.contract, event: "ValidatorMajorSlashed", logs: logs, sub: sub}, nil
}

// WatchValidatorMajorSlashed is a free log subscription operation binding the contract event 0xee806478c61c75fc3ec50328b2af43290d1860ef40d5dfbba62ece0e1e3abe9e.
//
// Solidity: event ValidatorMajorSlashed(address indexed account)
func (_IValidatorPoolEvents *IValidatorPoolEventsFilterer) WatchValidatorMajorSlashed(opts *bind.WatchOpts, sink chan<- *IValidatorPoolEventsValidatorMajorSlashed, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _IValidatorPoolEvents.contract.WatchLogs(opts, "ValidatorMajorSlashed", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IValidatorPoolEventsValidatorMajorSlashed)
				if err := _IValidatorPoolEvents.contract.UnpackLog(event, "ValidatorMajorSlashed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorMajorSlashed is a log parse operation binding the contract event 0xee806478c61c75fc3ec50328b2af43290d1860ef40d5dfbba62ece0e1e3abe9e.
//
// Solidity: event ValidatorMajorSlashed(address indexed account)
func (_IValidatorPoolEvents *IValidatorPoolEventsFilterer) ParseValidatorMajorSlashed(log types.Log) (*IValidatorPoolEventsValidatorMajorSlashed, error) {
	event := new(IValidatorPoolEventsValidatorMajorSlashed)
	if err := _IValidatorPoolEvents.contract.UnpackLog(event, "ValidatorMajorSlashed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IValidatorPoolEventsValidatorMinorSlashedIterator is returned from FilterValidatorMinorSlashed and is used to iterate over the raw logs and unpacked data for ValidatorMinorSlashed events raised by the IValidatorPoolEvents contract.
type IValidatorPoolEventsValidatorMinorSlashedIterator struct {
	Event *IValidatorPoolEventsValidatorMinorSlashed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IValidatorPoolEventsValidatorMinorSlashedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IValidatorPoolEventsValidatorMinorSlashed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IValidatorPoolEventsValidatorMinorSlashed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IValidatorPoolEventsValidatorMinorSlashedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IValidatorPoolEventsValidatorMinorSlashedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IValidatorPoolEventsValidatorMinorSlashed represents a ValidatorMinorSlashed event raised by the IValidatorPoolEvents contract.
type IValidatorPoolEventsValidatorMinorSlashed struct {
	Account  common.Address
	StakeNFT *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterValidatorMinorSlashed is a free log retrieval operation binding the contract event 0x23f67a6ac6d764dca01e28630334f5b636e2b1928c0a5d5b5428da3f69167208.
//
// Solidity: event ValidatorMinorSlashed(address indexed account, uint256 stakeNFT)
func (_IValidatorPoolEvents *IValidatorPoolEventsFilterer) FilterValidatorMinorSlashed(opts *bind.FilterOpts, account []common.Address) (*IValidatorPoolEventsValidatorMinorSlashedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _IValidatorPoolEvents.contract.FilterLogs(opts, "ValidatorMinorSlashed", accountRule)
	if err != nil {
		return nil, err
	}
	return &IValidatorPoolEventsValidatorMinorSlashedIterator{contract: _IValidatorPoolEvents.contract, event: "ValidatorMinorSlashed", logs: logs, sub: sub}, nil
}

// WatchValidatorMinorSlashed is a free log subscription operation binding the contract event 0x23f67a6ac6d764dca01e28630334f5b636e2b1928c0a5d5b5428da3f69167208.
//
// Solidity: event ValidatorMinorSlashed(address indexed account, uint256 stakeNFT)
func (_IValidatorPoolEvents *IValidatorPoolEventsFilterer) WatchValidatorMinorSlashed(opts *bind.WatchOpts, sink chan<- *IValidatorPoolEventsValidatorMinorSlashed, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _IValidatorPoolEvents.contract.WatchLogs(opts, "ValidatorMinorSlashed", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IValidatorPoolEventsValidatorMinorSlashed)
				if err := _IValidatorPoolEvents.contract.UnpackLog(event, "ValidatorMinorSlashed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorMinorSlashed is a log parse operation binding the contract event 0x23f67a6ac6d764dca01e28630334f5b636e2b1928c0a5d5b5428da3f69167208.
//
// Solidity: event ValidatorMinorSlashed(address indexed account, uint256 stakeNFT)
func (_IValidatorPoolEvents *IValidatorPoolEventsFilterer) ParseValidatorMinorSlashed(log types.Log) (*IValidatorPoolEventsValidatorMinorSlashed, error) {
	event := new(IValidatorPoolEventsValidatorMinorSlashed)
	if err := _IValidatorPoolEvents.contract.UnpackLog(event, "ValidatorMinorSlashed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// InitializableMetaData contains all meta data concerning the Initializable contract.
var InitializableMetaData = &bind.MetaData{
	ABI: "[]",
}

// InitializableABI is the input ABI used to generate the binding from.
// Deprecated: Use InitializableMetaData.ABI instead.
var InitializableABI = InitializableMetaData.ABI

// Initializable is an auto generated Go binding around an Ethereum contract.
type Initializable struct {
	InitializableCaller     // Read-only binding to the contract
	InitializableTransactor // Write-only binding to the contract
	InitializableFilterer   // Log filterer for contract events
}

// InitializableCaller is an auto generated read-only Go binding around an Ethereum contract.
type InitializableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InitializableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type InitializableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InitializableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type InitializableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InitializableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type InitializableSession struct {
	Contract     *Initializable    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// InitializableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type InitializableCallerSession struct {
	Contract *InitializableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// InitializableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type InitializableTransactorSession struct {
	Contract     *InitializableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// InitializableRaw is an auto generated low-level Go binding around an Ethereum contract.
type InitializableRaw struct {
	Contract *Initializable // Generic contract binding to access the raw methods on
}

// InitializableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type InitializableCallerRaw struct {
	Contract *InitializableCaller // Generic read-only contract binding to access the raw methods on
}

// InitializableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type InitializableTransactorRaw struct {
	Contract *InitializableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewInitializable creates a new instance of Initializable, bound to a specific deployed contract.
func NewInitializable(address common.Address, backend bind.ContractBackend) (*Initializable, error) {
	contract, err := bindInitializable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Initializable{InitializableCaller: InitializableCaller{contract: contract}, InitializableTransactor: InitializableTransactor{contract: contract}, InitializableFilterer: InitializableFilterer{contract: contract}}, nil
}

// NewInitializableCaller creates a new read-only instance of Initializable, bound to a specific deployed contract.
func NewInitializableCaller(address common.Address, caller bind.ContractCaller) (*InitializableCaller, error) {
	contract, err := bindInitializable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &InitializableCaller{contract: contract}, nil
}

// NewInitializableTransactor creates a new write-only instance of Initializable, bound to a specific deployed contract.
func NewInitializableTransactor(address common.Address, transactor bind.ContractTransactor) (*InitializableTransactor, error) {
	contract, err := bindInitializable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &InitializableTransactor{contract: contract}, nil
}

// NewInitializableFilterer creates a new log filterer instance of Initializable, bound to a specific deployed contract.
func NewInitializableFilterer(address common.Address, filterer bind.ContractFilterer) (*InitializableFilterer, error) {
	contract, err := bindInitializable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &InitializableFilterer{contract: contract}, nil
}

// bindInitializable binds a generic wrapper to an already deployed contract.
func bindInitializable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(InitializableABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Initializable *InitializableRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Initializable.Contract.InitializableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Initializable *InitializableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Initializable.Contract.InitializableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Initializable *InitializableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Initializable.Contract.InitializableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Initializable *InitializableCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Initializable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Initializable *InitializableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Initializable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Initializable *InitializableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Initializable.Contract.contract.Transact(opts, method, params...)
}

// MadByteMetaData contains all meta data concerning the MadByte contract.
var MadByteMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"to0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"to1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"to2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"to3\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositReceivedBN\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolBalance_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numEth_\",\"type\":\"uint256\"}],\"name\":\"EthtoMB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolBalance_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numMB_\",\"type\":\"uint256\"}],\"name\":\"MBtoEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numEth\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minEth_\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numEth\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minEth_\",\"type\":\"uint256\"}],\"name\":\"burnTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numEth\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"depositTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"to0_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to1_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to2_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to3_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"depositToBN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distribute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpStakingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"foundationAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositID\",\"type\":\"uint256\"}],\"name\":\"getDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositID\",\"type\":\"uint256\"}],\"name\":\"getDepositOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"to0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to3\",\"type\":\"uint256\"}],\"internalType\":\"structMadByte.BNAddress\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"getMetamorphicContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalMadBytesDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minMB_\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nuMB\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minMB_\",\"type\":\"uint256\"}],\"name\":\"mintDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minMB_\",\"type\":\"uint256\"}],\"name\":\"mintTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nuMB\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minerStakingSplit_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"madStakingSplit_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpStakingSplit_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee_\",\"type\":\"uint256\"}],\"name\":\"setSplits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"virtualMintDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x61012060405234801561001157600080fd5b50606580546001600160a01b03191633908117909155600260665560808190526100a8906714dd185ad953919560c21b906040516001600160f81b031960208201526001600160601b0319606083901b166021820152603581018390526000805160206200326c833981519152605582015260009060750160408051601f1981840301815291905280516020909101209392505050565b6001600160a01b0390811660a090815260808051604080516001600160f81b031960208083018290526001600160601b0319606095861b811660218501526b15985b1a59185d1bdc93919560a21b60358501526000805160206200326c8339815191526055808601829052865180870390910181526075860187528051908401208a1660c0908152885160958701869052881b8316609687015264131413919560da1b60aa87015260ca8087018390528751808803909101815260ea870188528051908501208b1660e0908152895161010a8801969096529490971b90911661010b850152692337bab73230ba34b7b760b11b61011f85015261013f808501919091528451808503909101815261015f90930190935281519190920120909416610100819052915192519051935192939092909161305e6200020e6000396000612054015260006120d20152600061207e015260006120a801526000505061305e6000f3fe6080604052600436106101e35760003560e01c80638129fc1c11610102578063a9059cbb11610095578063cf04ada011610064578063cf04ada014610640578063dd62ed3e146106ab578063e4fc6b6d146106fe578063ffaad6a51461073357600080fd5b8063a9059cbb146105cb578063abd70aa2146105eb578063b390c0ab14610600578063b6b55f251461062057600080fd5b80639f8a3402116100d15780639f8a3402146105585780639f9fb96814610578578063a0712d6814610598578063a457c2d7146105ab57600080fd5b80638129fc1c1461042e5780638653a4651461044357806395d89b41146105235780639b0572031461053857600080fd5b8063395093511161017a5780636e9960c3116101495780636e9960c31461035d578063704b6c02146103a957806370a08231146103cb578063767bc1bf1461040e57600080fd5b806339509351146102f5578063449a52f81461031557806360f89f19146103285780636957dc0e1461034857600080fd5b806323b872dd116101b657806323b872dd146102865780632444b15c146102a6578063313ce567146102c657806334afbf60146102e257600080fd5b806306fdde03146101e8578063095ea7b314610213578063142c514e1461024357806318160ddd14610271575b600080fd5b3480156101f457600080fd5b506101fd610753565b60405161020a9190612b2c565b60405180910390f35b34801561021f57600080fd5b5061023361022e366004612bc8565b6107e5565b604051901515815260200161020a565b34801561024f57600080fd5b5061026361025e366004612bc8565b6107ff565b60405190815260200161020a565b34801561027d57600080fd5b50603554610263565b34801561029257600080fd5b506102336102a1366004612bf2565b61087f565b3480156102b257600080fd5b506102636102c1366004612c2e565b6108a3565b3480156102d257600080fd5b506040516012815260200161020a565b6102636102f0366004612bc8565b6108bc565b34801561030157600080fd5b50610233610310366004612bc8565b6108c9565b610263610323366004612bc8565b610915565b34801561033457600080fd5b50610263610343366004612c69565b610922565b34801561035457600080fd5b50606d54610263565b34801561036957600080fd5b5060655473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161020a565b3480156103b557600080fd5b506103c96103c4366004612c8b565b61092e565b005b3480156103d757600080fd5b506102636103e6366004612c8b565b73ffffffffffffffffffffffffffffffffffffffff1660009081526033602052604090205490565b34801561041a57600080fd5b506103c9610429366004612ca6565b6109db565b34801561043a57600080fd5b506103c9610aec565b34801561044f57600080fd5b5061038461045e366004612cd8565b6040517fff0000000000000000000000000000000000000000000000000000000000000060208201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606083901b166021820152603581018390527f1c0bf703a3415cada9785e89e9d70314c3111ae7d8e04f33bb42eb1d264088be6055820152600090607501604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101209392505050565b34801561052f57600080fd5b506101fd610ced565b34801561054457600080fd5b50610263610553366004612d04565b610cfc565b34801561056457600080fd5b50610263610573366004612d37565b610d12565b34801561058457600080fd5b50610263610593366004612d63565b610d1f565b6102636105a6366004612d63565b610d86565b3480156105b757600080fd5b506102336105c6366004612bc8565b610d93565b3480156105d757600080fd5b506102336105e6366004612bc8565b610e4a565b3480156105f757600080fd5b50606754610263565b34801561060c57600080fd5b5061026361061b366004612c69565b610e58565b34801561062c57600080fd5b5061026361063b366004612d63565b610e66565b34801561064c57600080fd5b5061066061065b366004612d63565b610e72565b6040805173ffffffffffffffffffffffffffffffffffffffff90931683528151602080850191909152820151838201528101516060808401919091520151608082015260a00161020a565b3480156106b757600080fd5b506102636106c6366004612d7c565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260346020908152604080832093909416825291909152205490565b34801561070a57600080fd5b50610713610f55565b60408051948552602085019390935291830152606082015260800161020a565b34801561073f57600080fd5b5061026361074e366004612bc8565b610f71565b60606036805461076290612da6565b80601f016020809104026020016040519081016040528092919081815260200182805461078e90612da6565b80156107db5780601f106107b0576101008083540402835291602001916107db565b820191906000526020600020905b8154815290600101906020018083116107be57829003601f168201915b5050505050905090565b6000336107f3818585610f7d565b60019150505b92915050565b60655460009073ffffffffffffffffffffffffffffffffffffffff16331461086e5760405162461bcd60e51b815260206004820152600d60248201527f4d7573742062652061646d696e0000000000000000000000000000000000000060448201526064015b60405180910390fd5b61087883836110fc565b9392505050565b60003361088d8582856112c8565b610898858585611385565b506001949350505050565b60006108b286868686866115ea565b9695505050505050565b6000610878838334611799565b33600081815260346020908152604080832073ffffffffffffffffffffffffffffffffffffffff871684529091528120549091906107f39082908690610910908790612e23565b610f7d565b60006108788334846119fb565b60006108788383611b04565b60655473ffffffffffffffffffffffffffffffffffffffff1633146109955760405162461bcd60e51b815260206004820152600d60248201527f4d7573742062652061646d696e000000000000000000000000000000000000006044820152606401610865565b606580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831617905550565b50565b60655473ffffffffffffffffffffffffffffffffffffffff163314610a425760405162461bcd60e51b815260206004820152600d60248201527f4d7573742062652061646d696e000000000000000000000000000000000000006044820152606401610865565b6103e88183610a518688612e23565b610a5b9190612e23565b610a659190612e23565b14610ad85760405162461bcd60e51b815260206004820152603860248201527f4d6164427974653a20416c6c207468652073706c69742076616c756573206d7560448201527f73742073756d20746f205f4d41445f554e49545f4f4e452100000000000000006064820152608401610865565b606893909355606991909155606a55606b55565b60655473ffffffffffffffffffffffffffffffffffffffff163314610b535760405162461bcd60e51b815260206004820152600d60248201527f4d7573742062652061646d696e000000000000000000000000000000000000006044820152606401610865565b600054610100900460ff16610b6e5760005460ff1615610b72565b303b155b610be45760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610865565b600054610100900460ff16158015610c2357600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b610c976040518060400160405280600781526020017f4d616442797465000000000000000000000000000000000000000000000000008152506040518060400160405280600281526020017f4d42000000000000000000000000000000000000000000000000000000000000815250611b2b565b61014d60685561014c6069819055606a556003606b5560006067819055606c819055606d5580156109d857600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b60606037805461076290612da6565b6000610d0a33858585611bb6565b949350505050565b6000610d0a848484611d0e565b6000606c54821115610d735760405162461bcd60e51b815260206004820152601c60248201527f4d6164427974653a20496e76616c6964206465706f73697420494421000000006044820152606401610865565b506000908152606e602052604090205490565b60006107f93334846119fb565b33600081815260346020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490919083811015610e3d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610865565b6108988286868403610f7d565b6000336107f3818585611385565b600061087833338585611bb6565b60006107f93383611dda565b6000610e9f6040518060800160405280600081526020016000815260200160008152602001600081525090565b606c54831115610ef15760405162461bcd60e51b815260206004820152601c60248201527f4d6164427974653a20496e76616c6964206465706f73697420494421000000006044820152606401610865565b50506000908152606f6020908152604080832054607083529281902081516080810183528154815260018201549381019390935260028101549183019190915260030154606082015273ffffffffffffffffffffffffffffffffffffffff90911691565b600080600080610f63611f42565b935093509350935090919293565b60006108788383611dda565b73ffffffffffffffffffffffffffffffffffffffff83166110055760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610865565b73ffffffffffffffffffffffffffffffffffffffff821661108e5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610865565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000823b156111735760405162461bcd60e51b815260206004820152603160248201527f4d6164427974653a20436f6e7472616374732063616e6e6f74206d616b65204d60448201527f61644279746573206465706f73697473210000000000000000000000000000006064820152608401610865565b600082116111e95760405162461bcd60e51b815260206004820152603660248201527f4d6164427974653a20546865206465706f73697420616d6f756e74206d75737460448201527f2062652067726561746572207468616e207a65726f21000000000000000000006064820152608401610865565b6000606c5460016111fa9190612e23565b6000818152606e60209081526040808320879055606f909152812080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8816179055606d8054929350859290919061126a908490612e23565b9091555050606c81905560405183815273ffffffffffffffffffffffffffffffffffffffff85169082907f5b063c6569a91e8133fc6cd71d31a4ca5c65c652fd53ae093f46107754f085419060200160405180910390a39392505050565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152603460209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461137f57818110156113725760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610865565b61137f8484848403610f7d565b50505050565b73ffffffffffffffffffffffffffffffffffffffff831661140e5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610865565b73ffffffffffffffffffffffffffffffffffffffff82166114975760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610865565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260336020526040902054818110156115335760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610865565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260336020526040808220858503905591851681529081208054849290611577908490612e23565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516115dd91815260200190565b60405180910390a361137f565b60008082116116615760405162461bcd60e51b815260206004820152603660248201527f4d6164427974653a20546865206465706f73697420616d6f756e74206d75737460448201527f2062652067726561746572207468616e207a65726f21000000000000000000006064820152608401610865565b61166a826121a7565b6116b65760405162461bcd60e51b815260206004820152601960248201527f4d6164427974653a205472616e73666572206661696c656421000000000000006044820152606401610865565b6000606c5460016116c79190612e23565b6000818152606e6020908152604080832087905580516080810182528b81528083018b81528183018b8152606083018b8152878752607090955292852091518255516001820155905160028201559051600390910155606d80549293508592909190611734908490612e23565b9091555050606c8190556040805188815260208101889052908101869052606081018590526080810184905281907fbc042d1da385bbdd954b3996e43a972c725a235e533042d3cf3ba68dba57a1639060a00160405180910390a29695505050505050565b6000833b156118105760405162461bcd60e51b815260206004820152603160248201527f4d6164427974653a20436f6e7472616374732063616e6e6f74206d616b65204d60448201527f61644279746573206465706f73697473210000000000000000000000000000006064820152608401610865565b60048210156118615760405162461bcd60e51b815260206004820181905260248201527f4d6164427974653a207265717569726573206174206c656173742034205745496044820152606401610865565b61186c600483612e6a565b9150600061187c60675484611b04565b90508381101561191a5760405162461bcd60e51b815260206004820152604b60248201527f4d6164427974653a20636f756c64206e6f74206d696e74206465706f7369742060448201527f77697468206d696e696d756d204d6164427974657320676976656e207468652060648201527f65746865722073656e7421000000000000000000000000000000000000000000608482015260a401610865565b6000606c54600161192b9190612e23565b6000818152606e60209081526040808320869055606f909152812080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8a16179055606d8054929350849290919061199b908490612e23565b9091555050606c81905560405182815273ffffffffffffffffffffffffffffffffffffffff87169082907f5b063c6569a91e8133fc6cd71d31a4ca5c65c652fd53ae093f46107754f085419060200160405180910390a395945050505050565b60006004831015611a4e5760405162461bcd60e51b815260206004820181905260248201527f4d6164427974653a207265717569726573206174206c656173742034205745496044820152606401610865565b611a59600484612e6a565b606754909350611a698185611b04565b915082821015611ae15760405162461bcd60e51b815260206004820152602860248201527f4d6164427974653a20636f756c64206e6f74206d696e74206d696e696d756d2060448201527f4d616442797465730000000000000000000000000000000000000000000000006064820152608401610865565b611aeb8482612e23565b60678190559050611afc8583612281565b509392505050565b6000611b0f83612387565b611b21611b1c8486612e23565b612387565b6108789190612ea5565b600054610100900460ff16611ba85760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610865565b611bb28282612401565b5050565b600082611c525760405162461bcd60e51b8152602060048201526044602482018190527f4d6164427974653a20546865206e756d626572206f66204d6164427974657320908201527f746f206265206275726e2073686f756c6420626520677265617465722074686160648201527f6e20302100000000000000000000000000000000000000000000000000000000608482015260a401610865565b606754611c6881611c6260355490565b86611d0e565b915082821015611ce05760405162461bcd60e51b815260206004820152602860248201527f4d6164427974653a20436f756c646e2774206275726e20746865206d696e457460448201527f6820616d6f756e740000000000000000000000000000000000000000000000006064820152608401610865565b611cea8282612ea5565b60678190559050611cfb86856124a5565b611d05858361265e565b50949350505050565b600081831015611dac5760405162461bcd60e51b815260206004820152604c60248201527f4d6164427974653a20546865206e756d626572206f6620746f6b656e7320746f60448201527f206265206275726e65642069732067726561746572207468616e20746865205460648201527f6f74616c20537570706c79210000000000000000000000000000000000000000608482015260a401610865565b610d0a84611dc2611dbd8587612ea5565b6127c6565b611dcb866127c6565b611dd59190612ea5565b61284b565b6000823b15611e515760405162461bcd60e51b815260206004820152603160248201527f4d6164427974653a20436f6e7472616374732063616e6e6f74206d616b65204d60448201527f61644279746573206465706f73697473210000000000000000000000000000006064820152608401610865565b60008211611ec75760405162461bcd60e51b815260206004820152603660248201527f4d6164427974653a20546865206465706f73697420616d6f756e74206d75737460448201527f2062652067726561746572207468616e207a65726f21000000000000000000006064820152608401610865565b611ed0826121a7565b6111e95760405162461bcd60e51b815260206004820152602860248201527f4d6164427974653a204275726e206661696c656420647572696e67207468652060448201527f6465706f736974210000000000000000000000000000000000000000000000006064820152608401610865565b60008060008060016066541415611fc15760405162461bcd60e51b815260206004820152602160248201527f4d757465783a20436f756c646e2774206163717569726520746865206c6f636b60448201527f21000000000000000000000000000000000000000000000000000000000000006064820152608401610865565b60016066556067546000611fd58247612ea5565b90506103e8606b5482611fe89190612ebc565b611ff29190612e6a565b92506103e8606954826120059190612ebc565b61200f9190612e6a565b94506103e8606a54826120229190612ebc565b61202c9190612e6a565b9350826120398587612e23565b6120439190612e23565b61204d9082612ea5565b95506120797f000000000000000000000000000000000000000000000000000000000000000084612861565b6120a37f000000000000000000000000000000000000000000000000000000000000000087612861565b6120cd7f000000000000000000000000000000000000000000000000000000000000000086612861565b6120f77f000000000000000000000000000000000000000000000000000000000000000085612861565b814710156121935760405162461bcd60e51b815260206004820152604860248201527f4d6164427974653a20416464726573732062616c616e63652073686f756c642060448201527f626520616c776179732067726561746572207468616e2074686520706f6f6c2060648201527f62616c616e636521000000000000000000000000000000000000000000000000608482015260a401610865565b50506002606655929391929091565b505050565b6000816122435760405162461bcd60e51b8152602060048201526044602482018190527f4d6164427974653a20546865206e756d626572206f66204d6164427974657320908201527f746f206265206275726e2073686f756c6420626520677265617465722074686160648201527f6e20302100000000000000000000000000000000000000000000000000000000608482015260a401610865565b61225860675461225260355490565b84611d0e565b606760008282546122699190612ea5565b90915550612279905033836124a5565b506001919050565b73ffffffffffffffffffffffffffffffffffffffff82166122e45760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610865565b80603560008282546122f69190612e23565b909155505073ffffffffffffffffffffffffffffffffffffffff821660009081526033602052604081208054839290612330908490612e23565b909155505060405181815273ffffffffffffffffffffffffffffffffffffffff8316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b60006123d860026123a168878678326eac900000856128ef565b6123ab9190613019565b6123c79071016f578c4e0a0610001239056923109ffb90612e23565b6123d390619c40612ebc565b612905565b6123e38360c9612ebc565b6123f790696aeec3532e7de04e5e60612e23565b6107f99190612ea5565b600054610100900460ff1661247e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610865565b8151612491906036906020850190612a93565b5080516121a2906037906020840190612a93565b73ffffffffffffffffffffffffffffffffffffffff821661252e5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610865565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260336020526040902054818110156125ca5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401610865565b73ffffffffffffffffffffffffffffffffffffffff83166000908152603360205260408120838303905560358054849290612606908490612ea5565b909155505060405182815260009073ffffffffffffffffffffffffffffffffffffffff8516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b80612667575050565b73ffffffffffffffffffffffffffffffffffffffff82166126f05760405162461bcd60e51b815260206004820152603360248201527f457468536166655472616e736665723a2063616e6e6f74207472616e7366657260448201527f2045544820746f206164647265737320307830000000000000000000000000006064820152608401610865565b604051829060009073ffffffffffffffffffffffffffffffffffffffff83169084908381818185875af1925050503d806000811461274a576040519150601f19603f3d011682016040523d82523d6000602084013e61274f565b606091505b505090508061137f5760405162461bcd60e51b815260206004820152602160248201527f457468536166655472616e736665723a205472616e73666572206661696c656460448201527f2e000000000000000000000000000000000000000000000000000000000000006064820152608401610865565b60006101916aa6ad4a39178da8018819606128226127ef856a01aaaeaf658ec6babcbcc0612ebc565b6127fa600287613019565b6128189073b1ccb5245c201cfb692f9ee5debda1883be3b090612e23565b6123c79190612ea5565b61282d8560c9612ebc565b6128379190612e23565b6128419190612ea5565b6107f99190612e6a565b600081831161285b5750816107f9565b50919050565b73ffffffffffffffffffffffffffffffffffffffff82166399a89ecc82602a6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260ff90911660048201526024016000604051808303818588803b1580156128d257600080fd5b505af11580156128e6573d6000803e3d6000fd5b50505050505050565b60006128fb838361284b565b611b218484612a83565b60008161291457506000919050565b50600181700100000000000000000000000000000000811061293b5760409190911b9060801c5b6801000000000000000081106129565760209190911b9060401c5b640100000000811061296d5760109190911b9060201c5b6201000081106129825760089190911b9060101c5b61010081106129965760049190911b9060081c5b601081106129a95760029190911b9060041c5b600881106129b957600182901b91505b60018284816129ca576129ca612e3b565b048301901c915060018284816129e2576129e2612e3b565b048301901c915060018284816129fa576129fa612e3b565b048301901c91506001828481612a1257612a12612e3b565b048301901c91506001828481612a2a57612a2a612e3b565b048301901c91506001828481612a4257612a42612e3b565b048301901c91506001828481612a5a57612a5a612e3b565b048301901c91506000828481612a7257612a72612e3b565b049050808310156108785782610d0a565b600081831061285b5750816107f9565b828054612a9f90612da6565b90600052602060002090601f016020900481019282612ac15760008555612b07565b82601f10612ada57805160ff1916838001178555612b07565b82800160010185558215612b07579182015b82811115612b07578251825591602001919060010190612aec565b50612b13929150612b17565b5090565b5b80821115612b135760008155600101612b18565b600060208083528351808285015260005b81811015612b5957858101830151858201604001528201612b3d565b81811115612b6b576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114612bc357600080fd5b919050565b60008060408385031215612bdb57600080fd5b612be483612b9f565b946020939093013593505050565b600080600060608486031215612c0757600080fd5b612c1084612b9f565b9250612c1e60208501612b9f565b9150604084013590509250925092565b600080600080600060a08688031215612c4657600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b60008060408385031215612c7c57600080fd5b50508035926020909101359150565b600060208284031215612c9d57600080fd5b61087882612b9f565b60008060008060808587031215612cbc57600080fd5b5050823594602084013594506040840135936060013592509050565b60008060408385031215612ceb57600080fd5b82359150612cfb60208401612b9f565b90509250929050565b600080600060608486031215612d1957600080fd5b612d2284612b9f565b95602085013595506040909401359392505050565b600080600060608486031215612d4c57600080fd5b505081359360208301359350604090920135919050565b600060208284031215612d7557600080fd5b5035919050565b60008060408385031215612d8f57600080fd5b612d9883612b9f565b9150612cfb60208401612b9f565b600181811c90821680612dba57607f821691505b6020821081141561285b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115612e3657612e36612df4565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082612ea0577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600082821015612eb757612eb7612df4565b500390565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612ef457612ef4612df4565b500290565b600181815b80851115612f5257817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115612f3857612f38612df4565b80851615612f4557918102915b93841c9390800290612efe565b509250929050565b600082612f69575060016107f9565b81612f76575060006107f9565b8160018114612f8c5760028114612f9657612fb2565b60019150506107f9565b60ff841115612fa757612fa7612df4565b50506001821b6107f9565b5060208310610133831016604e8410600b8410161715612fd5575081810a6107f9565b612fdf8383612ef9565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561301157613011612df4565b029392505050565b600061087860ff841683612f5a56fea26469706673582212202d0d43bea1de5ccb74ade14083d67b19b40af980952c1db27e0e099c9ae7844564736f6c634300080c00331c0bf703a3415cada9785e89e9d70314c3111ae7d8e04f33bb42eb1d264088be",
}

// MadByteABI is the input ABI used to generate the binding from.
// Deprecated: Use MadByteMetaData.ABI instead.
var MadByteABI = MadByteMetaData.ABI

// MadByteBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MadByteMetaData.Bin instead.
var MadByteBin = MadByteMetaData.Bin

// DeployMadByte deploys a new Ethereum contract, binding an instance of MadByte to it.
func DeployMadByte(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MadByte, error) {
	parsed, err := MadByteMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MadByteBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MadByte{MadByteCaller: MadByteCaller{contract: contract}, MadByteTransactor: MadByteTransactor{contract: contract}, MadByteFilterer: MadByteFilterer{contract: contract}}, nil
}

// MadByte is an auto generated Go binding around an Ethereum contract.
type MadByte struct {
	MadByteCaller     // Read-only binding to the contract
	MadByteTransactor // Write-only binding to the contract
	MadByteFilterer   // Log filterer for contract events
}

// MadByteCaller is an auto generated read-only Go binding around an Ethereum contract.
type MadByteCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MadByteTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MadByteTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MadByteFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MadByteFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MadByteSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MadByteSession struct {
	Contract     *MadByte          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MadByteCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MadByteCallerSession struct {
	Contract *MadByteCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// MadByteTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MadByteTransactorSession struct {
	Contract     *MadByteTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// MadByteRaw is an auto generated low-level Go binding around an Ethereum contract.
type MadByteRaw struct {
	Contract *MadByte // Generic contract binding to access the raw methods on
}

// MadByteCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MadByteCallerRaw struct {
	Contract *MadByteCaller // Generic read-only contract binding to access the raw methods on
}

// MadByteTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MadByteTransactorRaw struct {
	Contract *MadByteTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMadByte creates a new instance of MadByte, bound to a specific deployed contract.
func NewMadByte(address common.Address, backend bind.ContractBackend) (*MadByte, error) {
	contract, err := bindMadByte(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MadByte{MadByteCaller: MadByteCaller{contract: contract}, MadByteTransactor: MadByteTransactor{contract: contract}, MadByteFilterer: MadByteFilterer{contract: contract}}, nil
}

// NewMadByteCaller creates a new read-only instance of MadByte, bound to a specific deployed contract.
func NewMadByteCaller(address common.Address, caller bind.ContractCaller) (*MadByteCaller, error) {
	contract, err := bindMadByte(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MadByteCaller{contract: contract}, nil
}

// NewMadByteTransactor creates a new write-only instance of MadByte, bound to a specific deployed contract.
func NewMadByteTransactor(address common.Address, transactor bind.ContractTransactor) (*MadByteTransactor, error) {
	contract, err := bindMadByte(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MadByteTransactor{contract: contract}, nil
}

// NewMadByteFilterer creates a new log filterer instance of MadByte, bound to a specific deployed contract.
func NewMadByteFilterer(address common.Address, filterer bind.ContractFilterer) (*MadByteFilterer, error) {
	contract, err := bindMadByte(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MadByteFilterer{contract: contract}, nil
}

// bindMadByte binds a generic wrapper to an already deployed contract.
func bindMadByte(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MadByteABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MadByte *MadByteRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MadByte.Contract.MadByteCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MadByte *MadByteRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MadByte.Contract.MadByteTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MadByte *MadByteRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MadByte.Contract.MadByteTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MadByte *MadByteCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MadByte.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MadByte *MadByteTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MadByte.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MadByte *MadByteTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MadByte.Contract.contract.Transact(opts, method, params...)
}

// EthtoMB is a free data retrieval call binding the contract method 0x60f89f19.
//
// Solidity: function EthtoMB(uint256 poolBalance_, uint256 numEth_) pure returns(uint256)
func (_MadByte *MadByteCaller) EthtoMB(opts *bind.CallOpts, poolBalance_ *big.Int, numEth_ *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _MadByte.contract.Call(opts, &out, "EthtoMB", poolBalance_, numEth_)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EthtoMB is a free data retrieval call binding the contract method 0x60f89f19.
//
// Solidity: function EthtoMB(uint256 poolBalance_, uint256 numEth_) pure returns(uint256)
func (_MadByte *MadByteSession) EthtoMB(poolBalance_ *big.Int, numEth_ *big.Int) (*big.Int, error) {
	return _MadByte.Contract.EthtoMB(&_MadByte.CallOpts, poolBalance_, numEth_)
}

// EthtoMB is a free data retrieval call binding the contract method 0x60f89f19.
//
// Solidity: function EthtoMB(uint256 poolBalance_, uint256 numEth_) pure returns(uint256)
func (_MadByte *MadByteCallerSession) EthtoMB(poolBalance_ *big.Int, numEth_ *big.Int) (*big.Int, error) {
	return _MadByte.Contract.EthtoMB(&_MadByte.CallOpts, poolBalance_, numEth_)
}

// MBtoEth is a free data retrieval call binding the contract method 0x9f8a3402.
//
// Solidity: function MBtoEth(uint256 poolBalance_, uint256 totalSupply_, uint256 numMB_) pure returns(uint256 numEth)
func (_MadByte *MadByteCaller) MBtoEth(opts *bind.CallOpts, poolBalance_ *big.Int, totalSupply_ *big.Int, numMB_ *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _MadByte.contract.Call(opts, &out, "MBtoEth", poolBalance_, totalSupply_, numMB_)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MBtoEth is a free data retrieval call binding the contract method 0x9f8a3402.
//
// Solidity: function MBtoEth(uint256 poolBalance_, uint256 totalSupply_, uint256 numMB_) pure returns(uint256 numEth)
func (_MadByte *MadByteSession) MBtoEth(poolBalance_ *big.Int, totalSupply_ *big.Int, numMB_ *big.Int) (*big.Int, error) {
	return _MadByte.Contract.MBtoEth(&_MadByte.CallOpts, poolBalance_, totalSupply_, numMB_)
}

// MBtoEth is a free data retrieval call binding the contract method 0x9f8a3402.
//
// Solidity: function MBtoEth(uint256 poolBalance_, uint256 totalSupply_, uint256 numMB_) pure returns(uint256 numEth)
func (_MadByte *MadByteCallerSession) MBtoEth(poolBalance_ *big.Int, totalSupply_ *big.Int, numMB_ *big.Int) (*big.Int, error) {
	return _MadByte.Contract.MBtoEth(&_MadByte.CallOpts, poolBalance_, totalSupply_, numMB_)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_MadByte *MadByteCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MadByte.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_MadByte *MadByteSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _MadByte.Contract.Allowance(&_MadByte.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_MadByte *MadByteCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _MadByte.Contract.Allowance(&_MadByte.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_MadByte *MadByteCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MadByte.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_MadByte *MadByteSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _MadByte.Contract.BalanceOf(&_MadByte.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_MadByte *MadByteCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _MadByte.Contract.BalanceOf(&_MadByte.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_MadByte *MadByteCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _MadByte.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_MadByte *MadByteSession) Decimals() (uint8, error) {
	return _MadByte.Contract.Decimals(&_MadByte.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_MadByte *MadByteCallerSession) Decimals() (uint8, error) {
	return _MadByte.Contract.Decimals(&_MadByte.CallOpts)
}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_MadByte *MadByteCaller) GetAdmin(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MadByte.contract.Call(opts, &out, "getAdmin")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_MadByte *MadByteSession) GetAdmin() (common.Address, error) {
	return _MadByte.Contract.GetAdmin(&_MadByte.CallOpts)
}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_MadByte *MadByteCallerSession) GetAdmin() (common.Address, error) {
	return _MadByte.Contract.GetAdmin(&_MadByte.CallOpts)
}

// GetDeposit is a free data retrieval call binding the contract method 0x9f9fb968.
//
// Solidity: function getDeposit(uint256 depositID) view returns(uint256)
func (_MadByte *MadByteCaller) GetDeposit(opts *bind.CallOpts, depositID *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _MadByte.contract.Call(opts, &out, "getDeposit", depositID)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetDeposit is a free data retrieval call binding the contract method 0x9f9fb968.
//
// Solidity: function getDeposit(uint256 depositID) view returns(uint256)
func (_MadByte *MadByteSession) GetDeposit(depositID *big.Int) (*big.Int, error) {
	return _MadByte.Contract.GetDeposit(&_MadByte.CallOpts, depositID)
}

// GetDeposit is a free data retrieval call binding the contract method 0x9f9fb968.
//
// Solidity: function getDeposit(uint256 depositID) view returns(uint256)
func (_MadByte *MadByteCallerSession) GetDeposit(depositID *big.Int) (*big.Int, error) {
	return _MadByte.Contract.GetDeposit(&_MadByte.CallOpts, depositID)
}

// GetDepositOwner is a free data retrieval call binding the contract method 0xcf04ada0.
//
// Solidity: function getDepositOwner(uint256 depositID) view returns(address, (uint256,uint256,uint256,uint256))
func (_MadByte *MadByteCaller) GetDepositOwner(opts *bind.CallOpts, depositID *big.Int) (common.Address, MadByteBNAddress, error) {
	var out []interface{}
	err := _MadByte.contract.Call(opts, &out, "getDepositOwner", depositID)

	if err != nil {
		return *new(common.Address), *new(MadByteBNAddress), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	out1 := *abi.ConvertType(out[1], new(MadByteBNAddress)).(*MadByteBNAddress)

	return out0, out1, err

}

// GetDepositOwner is a free data retrieval call binding the contract method 0xcf04ada0.
//
// Solidity: function getDepositOwner(uint256 depositID) view returns(address, (uint256,uint256,uint256,uint256))
func (_MadByte *MadByteSession) GetDepositOwner(depositID *big.Int) (common.Address, MadByteBNAddress, error) {
	return _MadByte.Contract.GetDepositOwner(&_MadByte.CallOpts, depositID)
}

// GetDepositOwner is a free data retrieval call binding the contract method 0xcf04ada0.
//
// Solidity: function getDepositOwner(uint256 depositID) view returns(address, (uint256,uint256,uint256,uint256))
func (_MadByte *MadByteCallerSession) GetDepositOwner(depositID *big.Int) (common.Address, MadByteBNAddress, error) {
	return _MadByte.Contract.GetDepositOwner(&_MadByte.CallOpts, depositID)
}

// GetMetamorphicContractAddress is a free data retrieval call binding the contract method 0x8653a465.
//
// Solidity: function getMetamorphicContractAddress(bytes32 _salt, address _factory) pure returns(address)
func (_MadByte *MadByteCaller) GetMetamorphicContractAddress(opts *bind.CallOpts, _salt [32]byte, _factory common.Address) (common.Address, error) {
	var out []interface{}
	err := _MadByte.contract.Call(opts, &out, "getMetamorphicContractAddress", _salt, _factory)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetMetamorphicContractAddress is a free data retrieval call binding the contract method 0x8653a465.
//
// Solidity: function getMetamorphicContractAddress(bytes32 _salt, address _factory) pure returns(address)
func (_MadByte *MadByteSession) GetMetamorphicContractAddress(_salt [32]byte, _factory common.Address) (common.Address, error) {
	return _MadByte.Contract.GetMetamorphicContractAddress(&_MadByte.CallOpts, _salt, _factory)
}

// GetMetamorphicContractAddress is a free data retrieval call binding the contract method 0x8653a465.
//
// Solidity: function getMetamorphicContractAddress(bytes32 _salt, address _factory) pure returns(address)
func (_MadByte *MadByteCallerSession) GetMetamorphicContractAddress(_salt [32]byte, _factory common.Address) (common.Address, error) {
	return _MadByte.Contract.GetMetamorphicContractAddress(&_MadByte.CallOpts, _salt, _factory)
}

// GetPoolBalance is a free data retrieval call binding the contract method 0xabd70aa2.
//
// Solidity: function getPoolBalance() view returns(uint256)
func (_MadByte *MadByteCaller) GetPoolBalance(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MadByte.contract.Call(opts, &out, "getPoolBalance")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPoolBalance is a free data retrieval call binding the contract method 0xabd70aa2.
//
// Solidity: function getPoolBalance() view returns(uint256)
func (_MadByte *MadByteSession) GetPoolBalance() (*big.Int, error) {
	return _MadByte.Contract.GetPoolBalance(&_MadByte.CallOpts)
}

// GetPoolBalance is a free data retrieval call binding the contract method 0xabd70aa2.
//
// Solidity: function getPoolBalance() view returns(uint256)
func (_MadByte *MadByteCallerSession) GetPoolBalance() (*big.Int, error) {
	return _MadByte.Contract.GetPoolBalance(&_MadByte.CallOpts)
}

// GetTotalMadBytesDeposited is a free data retrieval call binding the contract method 0x6957dc0e.
//
// Solidity: function getTotalMadBytesDeposited() view returns(uint256)
func (_MadByte *MadByteCaller) GetTotalMadBytesDeposited(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MadByte.contract.Call(opts, &out, "getTotalMadBytesDeposited")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalMadBytesDeposited is a free data retrieval call binding the contract method 0x6957dc0e.
//
// Solidity: function getTotalMadBytesDeposited() view returns(uint256)
func (_MadByte *MadByteSession) GetTotalMadBytesDeposited() (*big.Int, error) {
	return _MadByte.Contract.GetTotalMadBytesDeposited(&_MadByte.CallOpts)
}

// GetTotalMadBytesDeposited is a free data retrieval call binding the contract method 0x6957dc0e.
//
// Solidity: function getTotalMadBytesDeposited() view returns(uint256)
func (_MadByte *MadByteCallerSession) GetTotalMadBytesDeposited() (*big.Int, error) {
	return _MadByte.Contract.GetTotalMadBytesDeposited(&_MadByte.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_MadByte *MadByteCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _MadByte.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_MadByte *MadByteSession) Name() (string, error) {
	return _MadByte.Contract.Name(&_MadByte.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_MadByte *MadByteCallerSession) Name() (string, error) {
	return _MadByte.Contract.Name(&_MadByte.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_MadByte *MadByteCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _MadByte.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_MadByte *MadByteSession) Symbol() (string, error) {
	return _MadByte.Contract.Symbol(&_MadByte.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_MadByte *MadByteCallerSession) Symbol() (string, error) {
	return _MadByte.Contract.Symbol(&_MadByte.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MadByte *MadByteCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MadByte.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MadByte *MadByteSession) TotalSupply() (*big.Int, error) {
	return _MadByte.Contract.TotalSupply(&_MadByte.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MadByte *MadByteCallerSession) TotalSupply() (*big.Int, error) {
	return _MadByte.Contract.TotalSupply(&_MadByte.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_MadByte *MadByteTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_MadByte *MadByteSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.Approve(&_MadByte.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_MadByte *MadByteTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.Approve(&_MadByte.TransactOpts, spender, amount)
}

// Burn is a paid mutator transaction binding the contract method 0xb390c0ab.
//
// Solidity: function burn(uint256 amount_, uint256 minEth_) returns(uint256 numEth)
func (_MadByte *MadByteTransactor) Burn(opts *bind.TransactOpts, amount_ *big.Int, minEth_ *big.Int) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "burn", amount_, minEth_)
}

// Burn is a paid mutator transaction binding the contract method 0xb390c0ab.
//
// Solidity: function burn(uint256 amount_, uint256 minEth_) returns(uint256 numEth)
func (_MadByte *MadByteSession) Burn(amount_ *big.Int, minEth_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.Burn(&_MadByte.TransactOpts, amount_, minEth_)
}

// Burn is a paid mutator transaction binding the contract method 0xb390c0ab.
//
// Solidity: function burn(uint256 amount_, uint256 minEth_) returns(uint256 numEth)
func (_MadByte *MadByteTransactorSession) Burn(amount_ *big.Int, minEth_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.Burn(&_MadByte.TransactOpts, amount_, minEth_)
}

// BurnTo is a paid mutator transaction binding the contract method 0x9b057203.
//
// Solidity: function burnTo(address to_, uint256 amount_, uint256 minEth_) returns(uint256 numEth)
func (_MadByte *MadByteTransactor) BurnTo(opts *bind.TransactOpts, to_ common.Address, amount_ *big.Int, minEth_ *big.Int) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "burnTo", to_, amount_, minEth_)
}

// BurnTo is a paid mutator transaction binding the contract method 0x9b057203.
//
// Solidity: function burnTo(address to_, uint256 amount_, uint256 minEth_) returns(uint256 numEth)
func (_MadByte *MadByteSession) BurnTo(to_ common.Address, amount_ *big.Int, minEth_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.BurnTo(&_MadByte.TransactOpts, to_, amount_, minEth_)
}

// BurnTo is a paid mutator transaction binding the contract method 0x9b057203.
//
// Solidity: function burnTo(address to_, uint256 amount_, uint256 minEth_) returns(uint256 numEth)
func (_MadByte *MadByteTransactorSession) BurnTo(to_ common.Address, amount_ *big.Int, minEth_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.BurnTo(&_MadByte.TransactOpts, to_, amount_, minEth_)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_MadByte *MadByteTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_MadByte *MadByteSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.DecreaseAllowance(&_MadByte.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_MadByte *MadByteTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.DecreaseAllowance(&_MadByte.TransactOpts, spender, subtractedValue)
}

// Deposit is a paid mutator transaction binding the contract method 0xb6b55f25.
//
// Solidity: function deposit(uint256 amount_) returns(uint256)
func (_MadByte *MadByteTransactor) Deposit(opts *bind.TransactOpts, amount_ *big.Int) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "deposit", amount_)
}

// Deposit is a paid mutator transaction binding the contract method 0xb6b55f25.
//
// Solidity: function deposit(uint256 amount_) returns(uint256)
func (_MadByte *MadByteSession) Deposit(amount_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.Deposit(&_MadByte.TransactOpts, amount_)
}

// Deposit is a paid mutator transaction binding the contract method 0xb6b55f25.
//
// Solidity: function deposit(uint256 amount_) returns(uint256)
func (_MadByte *MadByteTransactorSession) Deposit(amount_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.Deposit(&_MadByte.TransactOpts, amount_)
}

// DepositTo is a paid mutator transaction binding the contract method 0xffaad6a5.
//
// Solidity: function depositTo(address to_, uint256 amount_) returns(uint256)
func (_MadByte *MadByteTransactor) DepositTo(opts *bind.TransactOpts, to_ common.Address, amount_ *big.Int) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "depositTo", to_, amount_)
}

// DepositTo is a paid mutator transaction binding the contract method 0xffaad6a5.
//
// Solidity: function depositTo(address to_, uint256 amount_) returns(uint256)
func (_MadByte *MadByteSession) DepositTo(to_ common.Address, amount_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.DepositTo(&_MadByte.TransactOpts, to_, amount_)
}

// DepositTo is a paid mutator transaction binding the contract method 0xffaad6a5.
//
// Solidity: function depositTo(address to_, uint256 amount_) returns(uint256)
func (_MadByte *MadByteTransactorSession) DepositTo(to_ common.Address, amount_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.DepositTo(&_MadByte.TransactOpts, to_, amount_)
}

// DepositToBN is a paid mutator transaction binding the contract method 0x2444b15c.
//
// Solidity: function depositToBN(uint256 to0_, uint256 to1_, uint256 to2_, uint256 to3_, uint256 amount_) returns(uint256)
func (_MadByte *MadByteTransactor) DepositToBN(opts *bind.TransactOpts, to0_ *big.Int, to1_ *big.Int, to2_ *big.Int, to3_ *big.Int, amount_ *big.Int) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "depositToBN", to0_, to1_, to2_, to3_, amount_)
}

// DepositToBN is a paid mutator transaction binding the contract method 0x2444b15c.
//
// Solidity: function depositToBN(uint256 to0_, uint256 to1_, uint256 to2_, uint256 to3_, uint256 amount_) returns(uint256)
func (_MadByte *MadByteSession) DepositToBN(to0_ *big.Int, to1_ *big.Int, to2_ *big.Int, to3_ *big.Int, amount_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.DepositToBN(&_MadByte.TransactOpts, to0_, to1_, to2_, to3_, amount_)
}

// DepositToBN is a paid mutator transaction binding the contract method 0x2444b15c.
//
// Solidity: function depositToBN(uint256 to0_, uint256 to1_, uint256 to2_, uint256 to3_, uint256 amount_) returns(uint256)
func (_MadByte *MadByteTransactorSession) DepositToBN(to0_ *big.Int, to1_ *big.Int, to2_ *big.Int, to3_ *big.Int, amount_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.DepositToBN(&_MadByte.TransactOpts, to0_, to1_, to2_, to3_, amount_)
}

// Distribute is a paid mutator transaction binding the contract method 0xe4fc6b6d.
//
// Solidity: function distribute() returns(uint256 minerAmount, uint256 stakingAmount, uint256 lpStakingAmount, uint256 foundationAmount)
func (_MadByte *MadByteTransactor) Distribute(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "distribute")
}

// Distribute is a paid mutator transaction binding the contract method 0xe4fc6b6d.
//
// Solidity: function distribute() returns(uint256 minerAmount, uint256 stakingAmount, uint256 lpStakingAmount, uint256 foundationAmount)
func (_MadByte *MadByteSession) Distribute() (*types.Transaction, error) {
	return _MadByte.Contract.Distribute(&_MadByte.TransactOpts)
}

// Distribute is a paid mutator transaction binding the contract method 0xe4fc6b6d.
//
// Solidity: function distribute() returns(uint256 minerAmount, uint256 stakingAmount, uint256 lpStakingAmount, uint256 foundationAmount)
func (_MadByte *MadByteTransactorSession) Distribute() (*types.Transaction, error) {
	return _MadByte.Contract.Distribute(&_MadByte.TransactOpts)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_MadByte *MadByteTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_MadByte *MadByteSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.IncreaseAllowance(&_MadByte.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_MadByte *MadByteTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.IncreaseAllowance(&_MadByte.TransactOpts, spender, addedValue)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_MadByte *MadByteTransactor) Initialize(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "initialize")
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_MadByte *MadByteSession) Initialize() (*types.Transaction, error) {
	return _MadByte.Contract.Initialize(&_MadByte.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_MadByte *MadByteTransactorSession) Initialize() (*types.Transaction, error) {
	return _MadByte.Contract.Initialize(&_MadByte.TransactOpts)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 minMB_) payable returns(uint256 nuMB)
func (_MadByte *MadByteTransactor) Mint(opts *bind.TransactOpts, minMB_ *big.Int) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "mint", minMB_)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 minMB_) payable returns(uint256 nuMB)
func (_MadByte *MadByteSession) Mint(minMB_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.Mint(&_MadByte.TransactOpts, minMB_)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 minMB_) payable returns(uint256 nuMB)
func (_MadByte *MadByteTransactorSession) Mint(minMB_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.Mint(&_MadByte.TransactOpts, minMB_)
}

// MintDeposit is a paid mutator transaction binding the contract method 0x34afbf60.
//
// Solidity: function mintDeposit(address to_, uint256 minMB_) payable returns(uint256)
func (_MadByte *MadByteTransactor) MintDeposit(opts *bind.TransactOpts, to_ common.Address, minMB_ *big.Int) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "mintDeposit", to_, minMB_)
}

// MintDeposit is a paid mutator transaction binding the contract method 0x34afbf60.
//
// Solidity: function mintDeposit(address to_, uint256 minMB_) payable returns(uint256)
func (_MadByte *MadByteSession) MintDeposit(to_ common.Address, minMB_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.MintDeposit(&_MadByte.TransactOpts, to_, minMB_)
}

// MintDeposit is a paid mutator transaction binding the contract method 0x34afbf60.
//
// Solidity: function mintDeposit(address to_, uint256 minMB_) payable returns(uint256)
func (_MadByte *MadByteTransactorSession) MintDeposit(to_ common.Address, minMB_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.MintDeposit(&_MadByte.TransactOpts, to_, minMB_)
}

// MintTo is a paid mutator transaction binding the contract method 0x449a52f8.
//
// Solidity: function mintTo(address to_, uint256 minMB_) payable returns(uint256 nuMB)
func (_MadByte *MadByteTransactor) MintTo(opts *bind.TransactOpts, to_ common.Address, minMB_ *big.Int) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "mintTo", to_, minMB_)
}

// MintTo is a paid mutator transaction binding the contract method 0x449a52f8.
//
// Solidity: function mintTo(address to_, uint256 minMB_) payable returns(uint256 nuMB)
func (_MadByte *MadByteSession) MintTo(to_ common.Address, minMB_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.MintTo(&_MadByte.TransactOpts, to_, minMB_)
}

// MintTo is a paid mutator transaction binding the contract method 0x449a52f8.
//
// Solidity: function mintTo(address to_, uint256 minMB_) payable returns(uint256 nuMB)
func (_MadByte *MadByteTransactorSession) MintTo(to_ common.Address, minMB_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.MintTo(&_MadByte.TransactOpts, to_, minMB_)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_MadByte *MadByteTransactor) SetAdmin(opts *bind.TransactOpts, admin_ common.Address) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "setAdmin", admin_)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_MadByte *MadByteSession) SetAdmin(admin_ common.Address) (*types.Transaction, error) {
	return _MadByte.Contract.SetAdmin(&_MadByte.TransactOpts, admin_)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_MadByte *MadByteTransactorSession) SetAdmin(admin_ common.Address) (*types.Transaction, error) {
	return _MadByte.Contract.SetAdmin(&_MadByte.TransactOpts, admin_)
}

// SetSplits is a paid mutator transaction binding the contract method 0x767bc1bf.
//
// Solidity: function setSplits(uint256 minerStakingSplit_, uint256 madStakingSplit_, uint256 lpStakingSplit_, uint256 protocolFee_) returns()
func (_MadByte *MadByteTransactor) SetSplits(opts *bind.TransactOpts, minerStakingSplit_ *big.Int, madStakingSplit_ *big.Int, lpStakingSplit_ *big.Int, protocolFee_ *big.Int) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "setSplits", minerStakingSplit_, madStakingSplit_, lpStakingSplit_, protocolFee_)
}

// SetSplits is a paid mutator transaction binding the contract method 0x767bc1bf.
//
// Solidity: function setSplits(uint256 minerStakingSplit_, uint256 madStakingSplit_, uint256 lpStakingSplit_, uint256 protocolFee_) returns()
func (_MadByte *MadByteSession) SetSplits(minerStakingSplit_ *big.Int, madStakingSplit_ *big.Int, lpStakingSplit_ *big.Int, protocolFee_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.SetSplits(&_MadByte.TransactOpts, minerStakingSplit_, madStakingSplit_, lpStakingSplit_, protocolFee_)
}

// SetSplits is a paid mutator transaction binding the contract method 0x767bc1bf.
//
// Solidity: function setSplits(uint256 minerStakingSplit_, uint256 madStakingSplit_, uint256 lpStakingSplit_, uint256 protocolFee_) returns()
func (_MadByte *MadByteTransactorSession) SetSplits(minerStakingSplit_ *big.Int, madStakingSplit_ *big.Int, lpStakingSplit_ *big.Int, protocolFee_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.SetSplits(&_MadByte.TransactOpts, minerStakingSplit_, madStakingSplit_, lpStakingSplit_, protocolFee_)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_MadByte *MadByteTransactor) Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "transfer", to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_MadByte *MadByteSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.Transfer(&_MadByte.TransactOpts, to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_MadByte *MadByteTransactorSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.Transfer(&_MadByte.TransactOpts, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_MadByte *MadByteTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "transferFrom", from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_MadByte *MadByteSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.TransferFrom(&_MadByte.TransactOpts, from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_MadByte *MadByteTransactorSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.TransferFrom(&_MadByte.TransactOpts, from, to, amount)
}

// VirtualMintDeposit is a paid mutator transaction binding the contract method 0x142c514e.
//
// Solidity: function virtualMintDeposit(address to_, uint256 amount_) returns(uint256)
func (_MadByte *MadByteTransactor) VirtualMintDeposit(opts *bind.TransactOpts, to_ common.Address, amount_ *big.Int) (*types.Transaction, error) {
	return _MadByte.contract.Transact(opts, "virtualMintDeposit", to_, amount_)
}

// VirtualMintDeposit is a paid mutator transaction binding the contract method 0x142c514e.
//
// Solidity: function virtualMintDeposit(address to_, uint256 amount_) returns(uint256)
func (_MadByte *MadByteSession) VirtualMintDeposit(to_ common.Address, amount_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.VirtualMintDeposit(&_MadByte.TransactOpts, to_, amount_)
}

// VirtualMintDeposit is a paid mutator transaction binding the contract method 0x142c514e.
//
// Solidity: function virtualMintDeposit(address to_, uint256 amount_) returns(uint256)
func (_MadByte *MadByteTransactorSession) VirtualMintDeposit(to_ common.Address, amount_ *big.Int) (*types.Transaction, error) {
	return _MadByte.Contract.VirtualMintDeposit(&_MadByte.TransactOpts, to_, amount_)
}

// MadByteApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the MadByte contract.
type MadByteApprovalIterator struct {
	Event *MadByteApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MadByteApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MadByteApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MadByteApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MadByteApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MadByteApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MadByteApproval represents a Approval event raised by the MadByte contract.
type MadByteApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_MadByte *MadByteFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*MadByteApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _MadByte.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &MadByteApprovalIterator{contract: _MadByte.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_MadByte *MadByteFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *MadByteApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _MadByte.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MadByteApproval)
				if err := _MadByte.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_MadByte *MadByteFilterer) ParseApproval(log types.Log) (*MadByteApproval, error) {
	event := new(MadByteApproval)
	if err := _MadByte.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MadByteDepositReceivedIterator is returned from FilterDepositReceived and is used to iterate over the raw logs and unpacked data for DepositReceived events raised by the MadByte contract.
type MadByteDepositReceivedIterator struct {
	Event *MadByteDepositReceived // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MadByteDepositReceivedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MadByteDepositReceived)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MadByteDepositReceived)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MadByteDepositReceivedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MadByteDepositReceivedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MadByteDepositReceived represents a DepositReceived event raised by the MadByte contract.
type MadByteDepositReceived struct {
	DepositID *big.Int
	Depositor common.Address
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterDepositReceived is a free log retrieval operation binding the contract event 0x5b063c6569a91e8133fc6cd71d31a4ca5c65c652fd53ae093f46107754f08541.
//
// Solidity: event DepositReceived(uint256 indexed depositID, address indexed depositor, uint256 amount)
func (_MadByte *MadByteFilterer) FilterDepositReceived(opts *bind.FilterOpts, depositID []*big.Int, depositor []common.Address) (*MadByteDepositReceivedIterator, error) {

	var depositIDRule []interface{}
	for _, depositIDItem := range depositID {
		depositIDRule = append(depositIDRule, depositIDItem)
	}
	var depositorRule []interface{}
	for _, depositorItem := range depositor {
		depositorRule = append(depositorRule, depositorItem)
	}

	logs, sub, err := _MadByte.contract.FilterLogs(opts, "DepositReceived", depositIDRule, depositorRule)
	if err != nil {
		return nil, err
	}
	return &MadByteDepositReceivedIterator{contract: _MadByte.contract, event: "DepositReceived", logs: logs, sub: sub}, nil
}

// WatchDepositReceived is a free log subscription operation binding the contract event 0x5b063c6569a91e8133fc6cd71d31a4ca5c65c652fd53ae093f46107754f08541.
//
// Solidity: event DepositReceived(uint256 indexed depositID, address indexed depositor, uint256 amount)
func (_MadByte *MadByteFilterer) WatchDepositReceived(opts *bind.WatchOpts, sink chan<- *MadByteDepositReceived, depositID []*big.Int, depositor []common.Address) (event.Subscription, error) {

	var depositIDRule []interface{}
	for _, depositIDItem := range depositID {
		depositIDRule = append(depositIDRule, depositIDItem)
	}
	var depositorRule []interface{}
	for _, depositorItem := range depositor {
		depositorRule = append(depositorRule, depositorItem)
	}

	logs, sub, err := _MadByte.contract.WatchLogs(opts, "DepositReceived", depositIDRule, depositorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MadByteDepositReceived)
				if err := _MadByte.contract.UnpackLog(event, "DepositReceived", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositReceived is a log parse operation binding the contract event 0x5b063c6569a91e8133fc6cd71d31a4ca5c65c652fd53ae093f46107754f08541.
//
// Solidity: event DepositReceived(uint256 indexed depositID, address indexed depositor, uint256 amount)
func (_MadByte *MadByteFilterer) ParseDepositReceived(log types.Log) (*MadByteDepositReceived, error) {
	event := new(MadByteDepositReceived)
	if err := _MadByte.contract.UnpackLog(event, "DepositReceived", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MadByteDepositReceivedBNIterator is returned from FilterDepositReceivedBN and is used to iterate over the raw logs and unpacked data for DepositReceivedBN events raised by the MadByte contract.
type MadByteDepositReceivedBNIterator struct {
	Event *MadByteDepositReceivedBN // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MadByteDepositReceivedBNIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MadByteDepositReceivedBN)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MadByteDepositReceivedBN)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MadByteDepositReceivedBNIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MadByteDepositReceivedBNIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MadByteDepositReceivedBN represents a DepositReceivedBN event raised by the MadByte contract.
type MadByteDepositReceivedBN struct {
	DepositID *big.Int
	To0       *big.Int
	To1       *big.Int
	To2       *big.Int
	To3       *big.Int
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterDepositReceivedBN is a free log retrieval operation binding the contract event 0xbc042d1da385bbdd954b3996e43a972c725a235e533042d3cf3ba68dba57a163.
//
// Solidity: event DepositReceivedBN(uint256 indexed depositID, uint256 to0, uint256 to1, uint256 to2, uint256 to3, uint256 amount)
func (_MadByte *MadByteFilterer) FilterDepositReceivedBN(opts *bind.FilterOpts, depositID []*big.Int) (*MadByteDepositReceivedBNIterator, error) {

	var depositIDRule []interface{}
	for _, depositIDItem := range depositID {
		depositIDRule = append(depositIDRule, depositIDItem)
	}

	logs, sub, err := _MadByte.contract.FilterLogs(opts, "DepositReceivedBN", depositIDRule)
	if err != nil {
		return nil, err
	}
	return &MadByteDepositReceivedBNIterator{contract: _MadByte.contract, event: "DepositReceivedBN", logs: logs, sub: sub}, nil
}

// WatchDepositReceivedBN is a free log subscription operation binding the contract event 0xbc042d1da385bbdd954b3996e43a972c725a235e533042d3cf3ba68dba57a163.
//
// Solidity: event DepositReceivedBN(uint256 indexed depositID, uint256 to0, uint256 to1, uint256 to2, uint256 to3, uint256 amount)
func (_MadByte *MadByteFilterer) WatchDepositReceivedBN(opts *bind.WatchOpts, sink chan<- *MadByteDepositReceivedBN, depositID []*big.Int) (event.Subscription, error) {

	var depositIDRule []interface{}
	for _, depositIDItem := range depositID {
		depositIDRule = append(depositIDRule, depositIDItem)
	}

	logs, sub, err := _MadByte.contract.WatchLogs(opts, "DepositReceivedBN", depositIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MadByteDepositReceivedBN)
				if err := _MadByte.contract.UnpackLog(event, "DepositReceivedBN", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositReceivedBN is a log parse operation binding the contract event 0xbc042d1da385bbdd954b3996e43a972c725a235e533042d3cf3ba68dba57a163.
//
// Solidity: event DepositReceivedBN(uint256 indexed depositID, uint256 to0, uint256 to1, uint256 to2, uint256 to3, uint256 amount)
func (_MadByte *MadByteFilterer) ParseDepositReceivedBN(log types.Log) (*MadByteDepositReceivedBN, error) {
	event := new(MadByteDepositReceivedBN)
	if err := _MadByte.contract.UnpackLog(event, "DepositReceivedBN", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MadByteTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the MadByte contract.
type MadByteTransferIterator struct {
	Event *MadByteTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MadByteTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MadByteTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MadByteTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MadByteTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MadByteTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MadByteTransfer represents a Transfer event raised by the MadByte contract.
type MadByteTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_MadByte *MadByteFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MadByteTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MadByte.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &MadByteTransferIterator{contract: _MadByte.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_MadByte *MadByteFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *MadByteTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MadByte.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MadByteTransfer)
				if err := _MadByte.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_MadByte *MadByteFilterer) ParseTransfer(log types.Log) (*MadByteTransfer, error) {
	event := new(MadByteTransfer)
	if err := _MadByte.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MadTokenMetaData contains all meta data concerning the MadToken contract.
var MadTokenMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50606580546001600160a01b0319163317905561135d806100326000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063704b6c021161008c57806395d89b411161006657806395d89b41146101f2578063a457c2d7146101fa578063a9059cbb1461020d578063dd62ed3e1461022057600080fd5b8063704b6c021461019f57806370a08231146101b45780638129fc1c146101ea57600080fd5b806323b872dd116100c857806323b872dd14610142578063313ce5671461015557806339509351146101645780636e9960c31461017757600080fd5b806306fdde03146100ef578063095ea7b31461010d57806318160ddd14610130575b600080fd5b6100f7610266565b6040516101049190610fc9565b60405180910390f35b61012061011b366004611065565b6102f8565b6040519015158152602001610104565b6035545b604051908152602001610104565b61012061015036600461108f565b610312565b60405160128152602001610104565b610120610172366004611065565b610336565b60655460405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610104565b6101b26101ad3660046110cb565b610382565b005b6101346101c23660046110cb565b73ffffffffffffffffffffffffffffffffffffffff1660009081526033602052604090205490565b6101b261044e565b6100f7610681565b610120610208366004611065565b610690565b61012061021b366004611065565b610761565b61013461022e3660046110ed565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260346020908152604080832093909416825291909152205490565b60606036805461027590611120565b80601f01602080910402602001604051908101604052809291908181526020018280546102a190611120565b80156102ee5780601f106102c3576101008083540402835291602001916102ee565b820191906000526020600020905b8154815290600101906020018083116102d157829003601f168201915b5050505050905090565b60003361030681858561076f565b60019150505b92915050565b600033610320858285610922565b61032b8585856109f9565b506001949350505050565b33600081815260346020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152812054909190610306908290869061037d9087906111a3565b61076f565b60655473ffffffffffffffffffffffffffffffffffffffff163314610408576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4d7573742062652061646d696e0000000000000000000000000000000000000060448201526064015b60405180910390fd5b606580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831617905550565b50565b60655473ffffffffffffffffffffffffffffffffffffffff1633146104cf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4d7573742062652061646d696e0000000000000000000000000000000000000060448201526064016103ff565b600054610100900460ff166104ea5760005460ff16156104ee565b303b155b61057a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016103ff565b600054610100900460ff161580156105b957600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b61062d6040518060400160405280600881526020017f4d6164546f6b656e0000000000000000000000000000000000000000000000008152506040518060400160405280600281526020017f4d54000000000000000000000000000000000000000000000000000000000000815250610cac565b6106503361063d6012600a6112db565b61064b90630d1cef006112ea565b610d51565b801561044b57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b60606037805461027590611120565b33600081815260346020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490919083811015610754576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084016103ff565b61032b828686840361076f565b6000336103068185856109f9565b73ffffffffffffffffffffffffffffffffffffffff8316610811576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016103ff565b73ffffffffffffffffffffffffffffffffffffffff82166108b4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016103ff565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152603460209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146109f357818110156109e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016103ff565b6109f3848484840361076f565b50505050565b73ffffffffffffffffffffffffffffffffffffffff8316610a9c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016103ff565b73ffffffffffffffffffffffffffffffffffffffff8216610b3f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016103ff565b73ffffffffffffffffffffffffffffffffffffffff831660009081526033602052604090205481811015610bf5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016103ff565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260336020526040808220858503905591851681529081208054849290610c399084906111a3565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610c9f91815260200190565b60405180910390a36109f3565b600054610100900460ff16610d43576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016103ff565b610d4d8282610e76565b5050565b73ffffffffffffffffffffffffffffffffffffffff8216610dce576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016103ff565b8060356000828254610de091906111a3565b909155505073ffffffffffffffffffffffffffffffffffffffff821660009081526033602052604081208054839290610e1a9084906111a3565b909155505060405181815273ffffffffffffffffffffffffffffffffffffffff8316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b505050565b600054610100900460ff16610f0d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016103ff565b8151610f20906036906020850190610f30565b508051610e719060379060208401905b828054610f3c90611120565b90600052602060002090601f016020900481019282610f5e5760008555610fa4565b82601f10610f7757805160ff1916838001178555610fa4565b82800160010185558215610fa4579182015b82811115610fa4578251825591602001919060010190610f89565b50610fb0929150610fb4565b5090565b5b80821115610fb05760008155600101610fb5565b600060208083528351808285015260005b81811015610ff657858101830151858201604001528201610fda565b81811115611008576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461106057600080fd5b919050565b6000806040838503121561107857600080fd5b6110818361103c565b946020939093013593505050565b6000806000606084860312156110a457600080fd5b6110ad8461103c565b92506110bb6020850161103c565b9150604084013590509250925092565b6000602082840312156110dd57600080fd5b6110e68261103c565b9392505050565b6000806040838503121561110057600080fd5b6111098361103c565b91506111176020840161103c565b90509250929050565b600181811c9082168061113457607f821691505b6020821081141561116e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082198211156111b6576111b6611174565b500190565b600181815b8085111561121457817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156111fa576111fa611174565b8085161561120757918102915b93841c93908002906111c0565b509250929050565b60008261122b5750600161030c565b816112385750600061030c565b816001811461124e576002811461125857611274565b600191505061030c565b60ff84111561126957611269611174565b50506001821b61030c565b5060208310610133831016604e8410600b8410161715611297575081810a61030c565b6112a183836111bb565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156112d3576112d3611174565b029392505050565b60006110e660ff84168361121c565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561132257611322611174565b50029056fea26469706673582212204acc3240b0a238cb171f23a4081951a4d5aa022a7412094a998617d3ebc481eb64736f6c634300080c0033",
}

// MadTokenABI is the input ABI used to generate the binding from.
// Deprecated: Use MadTokenMetaData.ABI instead.
var MadTokenABI = MadTokenMetaData.ABI

// MadTokenBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MadTokenMetaData.Bin instead.
var MadTokenBin = MadTokenMetaData.Bin

// DeployMadToken deploys a new Ethereum contract, binding an instance of MadToken to it.
func DeployMadToken(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MadToken, error) {
	parsed, err := MadTokenMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MadTokenBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MadToken{MadTokenCaller: MadTokenCaller{contract: contract}, MadTokenTransactor: MadTokenTransactor{contract: contract}, MadTokenFilterer: MadTokenFilterer{contract: contract}}, nil
}

// MadToken is an auto generated Go binding around an Ethereum contract.
type MadToken struct {
	MadTokenCaller     // Read-only binding to the contract
	MadTokenTransactor // Write-only binding to the contract
	MadTokenFilterer   // Log filterer for contract events
}

// MadTokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type MadTokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MadTokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MadTokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MadTokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MadTokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MadTokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MadTokenSession struct {
	Contract     *MadToken         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MadTokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MadTokenCallerSession struct {
	Contract *MadTokenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// MadTokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MadTokenTransactorSession struct {
	Contract     *MadTokenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// MadTokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type MadTokenRaw struct {
	Contract *MadToken // Generic contract binding to access the raw methods on
}

// MadTokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MadTokenCallerRaw struct {
	Contract *MadTokenCaller // Generic read-only contract binding to access the raw methods on
}

// MadTokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MadTokenTransactorRaw struct {
	Contract *MadTokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMadToken creates a new instance of MadToken, bound to a specific deployed contract.
func NewMadToken(address common.Address, backend bind.ContractBackend) (*MadToken, error) {
	contract, err := bindMadToken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MadToken{MadTokenCaller: MadTokenCaller{contract: contract}, MadTokenTransactor: MadTokenTransactor{contract: contract}, MadTokenFilterer: MadTokenFilterer{contract: contract}}, nil
}

// NewMadTokenCaller creates a new read-only instance of MadToken, bound to a specific deployed contract.
func NewMadTokenCaller(address common.Address, caller bind.ContractCaller) (*MadTokenCaller, error) {
	contract, err := bindMadToken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MadTokenCaller{contract: contract}, nil
}

// NewMadTokenTransactor creates a new write-only instance of MadToken, bound to a specific deployed contract.
func NewMadTokenTransactor(address common.Address, transactor bind.ContractTransactor) (*MadTokenTransactor, error) {
	contract, err := bindMadToken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MadTokenTransactor{contract: contract}, nil
}

// NewMadTokenFilterer creates a new log filterer instance of MadToken, bound to a specific deployed contract.
func NewMadTokenFilterer(address common.Address, filterer bind.ContractFilterer) (*MadTokenFilterer, error) {
	contract, err := bindMadToken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MadTokenFilterer{contract: contract}, nil
}

// bindMadToken binds a generic wrapper to an already deployed contract.
func bindMadToken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MadTokenABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MadToken *MadTokenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MadToken.Contract.MadTokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MadToken *MadTokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MadToken.Contract.MadTokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MadToken *MadTokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MadToken.Contract.MadTokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MadToken *MadTokenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MadToken.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MadToken *MadTokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MadToken.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MadToken *MadTokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MadToken.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_MadToken *MadTokenCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MadToken.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_MadToken *MadTokenSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _MadToken.Contract.Allowance(&_MadToken.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_MadToken *MadTokenCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _MadToken.Contract.Allowance(&_MadToken.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_MadToken *MadTokenCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MadToken.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_MadToken *MadTokenSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _MadToken.Contract.BalanceOf(&_MadToken.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_MadToken *MadTokenCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _MadToken.Contract.BalanceOf(&_MadToken.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_MadToken *MadTokenCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _MadToken.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_MadToken *MadTokenSession) Decimals() (uint8, error) {
	return _MadToken.Contract.Decimals(&_MadToken.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_MadToken *MadTokenCallerSession) Decimals() (uint8, error) {
	return _MadToken.Contract.Decimals(&_MadToken.CallOpts)
}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_MadToken *MadTokenCaller) GetAdmin(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MadToken.contract.Call(opts, &out, "getAdmin")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_MadToken *MadTokenSession) GetAdmin() (common.Address, error) {
	return _MadToken.Contract.GetAdmin(&_MadToken.CallOpts)
}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_MadToken *MadTokenCallerSession) GetAdmin() (common.Address, error) {
	return _MadToken.Contract.GetAdmin(&_MadToken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_MadToken *MadTokenCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _MadToken.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_MadToken *MadTokenSession) Name() (string, error) {
	return _MadToken.Contract.Name(&_MadToken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_MadToken *MadTokenCallerSession) Name() (string, error) {
	return _MadToken.Contract.Name(&_MadToken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_MadToken *MadTokenCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _MadToken.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_MadToken *MadTokenSession) Symbol() (string, error) {
	return _MadToken.Contract.Symbol(&_MadToken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_MadToken *MadTokenCallerSession) Symbol() (string, error) {
	return _MadToken.Contract.Symbol(&_MadToken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MadToken *MadTokenCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MadToken.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MadToken *MadTokenSession) TotalSupply() (*big.Int, error) {
	return _MadToken.Contract.TotalSupply(&_MadToken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MadToken *MadTokenCallerSession) TotalSupply() (*big.Int, error) {
	return _MadToken.Contract.TotalSupply(&_MadToken.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_MadToken *MadTokenTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadToken.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_MadToken *MadTokenSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadToken.Contract.Approve(&_MadToken.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_MadToken *MadTokenTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadToken.Contract.Approve(&_MadToken.TransactOpts, spender, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_MadToken *MadTokenTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _MadToken.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_MadToken *MadTokenSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _MadToken.Contract.DecreaseAllowance(&_MadToken.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_MadToken *MadTokenTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _MadToken.Contract.DecreaseAllowance(&_MadToken.TransactOpts, spender, subtractedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_MadToken *MadTokenTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _MadToken.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_MadToken *MadTokenSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _MadToken.Contract.IncreaseAllowance(&_MadToken.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_MadToken *MadTokenTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _MadToken.Contract.IncreaseAllowance(&_MadToken.TransactOpts, spender, addedValue)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_MadToken *MadTokenTransactor) Initialize(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MadToken.contract.Transact(opts, "initialize")
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_MadToken *MadTokenSession) Initialize() (*types.Transaction, error) {
	return _MadToken.Contract.Initialize(&_MadToken.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_MadToken *MadTokenTransactorSession) Initialize() (*types.Transaction, error) {
	return _MadToken.Contract.Initialize(&_MadToken.TransactOpts)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_MadToken *MadTokenTransactor) SetAdmin(opts *bind.TransactOpts, admin_ common.Address) (*types.Transaction, error) {
	return _MadToken.contract.Transact(opts, "setAdmin", admin_)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_MadToken *MadTokenSession) SetAdmin(admin_ common.Address) (*types.Transaction, error) {
	return _MadToken.Contract.SetAdmin(&_MadToken.TransactOpts, admin_)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_MadToken *MadTokenTransactorSession) SetAdmin(admin_ common.Address) (*types.Transaction, error) {
	return _MadToken.Contract.SetAdmin(&_MadToken.TransactOpts, admin_)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_MadToken *MadTokenTransactor) Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadToken.contract.Transact(opts, "transfer", to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_MadToken *MadTokenSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadToken.Contract.Transfer(&_MadToken.TransactOpts, to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_MadToken *MadTokenTransactorSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadToken.Contract.Transfer(&_MadToken.TransactOpts, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_MadToken *MadTokenTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadToken.contract.Transact(opts, "transferFrom", from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_MadToken *MadTokenSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadToken.Contract.TransferFrom(&_MadToken.TransactOpts, from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_MadToken *MadTokenTransactorSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadToken.Contract.TransferFrom(&_MadToken.TransactOpts, from, to, amount)
}

// MadTokenApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the MadToken contract.
type MadTokenApprovalIterator struct {
	Event *MadTokenApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MadTokenApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MadTokenApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MadTokenApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MadTokenApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MadTokenApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MadTokenApproval represents a Approval event raised by the MadToken contract.
type MadTokenApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_MadToken *MadTokenFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*MadTokenApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _MadToken.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &MadTokenApprovalIterator{contract: _MadToken.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_MadToken *MadTokenFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *MadTokenApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _MadToken.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MadTokenApproval)
				if err := _MadToken.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_MadToken *MadTokenFilterer) ParseApproval(log types.Log) (*MadTokenApproval, error) {
	event := new(MadTokenApproval)
	if err := _MadToken.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MadTokenTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the MadToken contract.
type MadTokenTransferIterator struct {
	Event *MadTokenTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MadTokenTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MadTokenTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MadTokenTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MadTokenTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MadTokenTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MadTokenTransfer represents a Transfer event raised by the MadToken contract.
type MadTokenTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_MadToken *MadTokenFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MadTokenTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MadToken.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &MadTokenTransferIterator{contract: _MadToken.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_MadToken *MadTokenFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *MadTokenTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MadToken.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MadTokenTransfer)
				if err := _MadToken.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_MadToken *MadTokenFilterer) ParseTransfer(log types.Log) (*MadTokenTransfer, error) {
	event := new(MadTokenTransfer)
	if err := _MadToken.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MadTokenBaseMetaData contains all meta data concerning the MadTokenBase contract.
var MadTokenBaseMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// MadTokenBaseABI is the input ABI used to generate the binding from.
// Deprecated: Use MadTokenBaseMetaData.ABI instead.
var MadTokenBaseABI = MadTokenBaseMetaData.ABI

// MadTokenBase is an auto generated Go binding around an Ethereum contract.
type MadTokenBase struct {
	MadTokenBaseCaller     // Read-only binding to the contract
	MadTokenBaseTransactor // Write-only binding to the contract
	MadTokenBaseFilterer   // Log filterer for contract events
}

// MadTokenBaseCaller is an auto generated read-only Go binding around an Ethereum contract.
type MadTokenBaseCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MadTokenBaseTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MadTokenBaseTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MadTokenBaseFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MadTokenBaseFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MadTokenBaseSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MadTokenBaseSession struct {
	Contract     *MadTokenBase     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MadTokenBaseCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MadTokenBaseCallerSession struct {
	Contract *MadTokenBaseCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// MadTokenBaseTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MadTokenBaseTransactorSession struct {
	Contract     *MadTokenBaseTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// MadTokenBaseRaw is an auto generated low-level Go binding around an Ethereum contract.
type MadTokenBaseRaw struct {
	Contract *MadTokenBase // Generic contract binding to access the raw methods on
}

// MadTokenBaseCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MadTokenBaseCallerRaw struct {
	Contract *MadTokenBaseCaller // Generic read-only contract binding to access the raw methods on
}

// MadTokenBaseTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MadTokenBaseTransactorRaw struct {
	Contract *MadTokenBaseTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMadTokenBase creates a new instance of MadTokenBase, bound to a specific deployed contract.
func NewMadTokenBase(address common.Address, backend bind.ContractBackend) (*MadTokenBase, error) {
	contract, err := bindMadTokenBase(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MadTokenBase{MadTokenBaseCaller: MadTokenBaseCaller{contract: contract}, MadTokenBaseTransactor: MadTokenBaseTransactor{contract: contract}, MadTokenBaseFilterer: MadTokenBaseFilterer{contract: contract}}, nil
}

// NewMadTokenBaseCaller creates a new read-only instance of MadTokenBase, bound to a specific deployed contract.
func NewMadTokenBaseCaller(address common.Address, caller bind.ContractCaller) (*MadTokenBaseCaller, error) {
	contract, err := bindMadTokenBase(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MadTokenBaseCaller{contract: contract}, nil
}

// NewMadTokenBaseTransactor creates a new write-only instance of MadTokenBase, bound to a specific deployed contract.
func NewMadTokenBaseTransactor(address common.Address, transactor bind.ContractTransactor) (*MadTokenBaseTransactor, error) {
	contract, err := bindMadTokenBase(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MadTokenBaseTransactor{contract: contract}, nil
}

// NewMadTokenBaseFilterer creates a new log filterer instance of MadTokenBase, bound to a specific deployed contract.
func NewMadTokenBaseFilterer(address common.Address, filterer bind.ContractFilterer) (*MadTokenBaseFilterer, error) {
	contract, err := bindMadTokenBase(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MadTokenBaseFilterer{contract: contract}, nil
}

// bindMadTokenBase binds a generic wrapper to an already deployed contract.
func bindMadTokenBase(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MadTokenBaseABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MadTokenBase *MadTokenBaseRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MadTokenBase.Contract.MadTokenBaseCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MadTokenBase *MadTokenBaseRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MadTokenBase.Contract.MadTokenBaseTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MadTokenBase *MadTokenBaseRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MadTokenBase.Contract.MadTokenBaseTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MadTokenBase *MadTokenBaseCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MadTokenBase.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MadTokenBase *MadTokenBaseTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MadTokenBase.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MadTokenBase *MadTokenBaseTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MadTokenBase.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_MadTokenBase *MadTokenBaseCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MadTokenBase.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_MadTokenBase *MadTokenBaseSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _MadTokenBase.Contract.Allowance(&_MadTokenBase.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_MadTokenBase *MadTokenBaseCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _MadTokenBase.Contract.Allowance(&_MadTokenBase.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_MadTokenBase *MadTokenBaseCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MadTokenBase.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_MadTokenBase *MadTokenBaseSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _MadTokenBase.Contract.BalanceOf(&_MadTokenBase.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_MadTokenBase *MadTokenBaseCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _MadTokenBase.Contract.BalanceOf(&_MadTokenBase.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_MadTokenBase *MadTokenBaseCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _MadTokenBase.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_MadTokenBase *MadTokenBaseSession) Decimals() (uint8, error) {
	return _MadTokenBase.Contract.Decimals(&_MadTokenBase.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_MadTokenBase *MadTokenBaseCallerSession) Decimals() (uint8, error) {
	return _MadTokenBase.Contract.Decimals(&_MadTokenBase.CallOpts)
}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_MadTokenBase *MadTokenBaseCaller) GetAdmin(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MadTokenBase.contract.Call(opts, &out, "getAdmin")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_MadTokenBase *MadTokenBaseSession) GetAdmin() (common.Address, error) {
	return _MadTokenBase.Contract.GetAdmin(&_MadTokenBase.CallOpts)
}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_MadTokenBase *MadTokenBaseCallerSession) GetAdmin() (common.Address, error) {
	return _MadTokenBase.Contract.GetAdmin(&_MadTokenBase.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_MadTokenBase *MadTokenBaseCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _MadTokenBase.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_MadTokenBase *MadTokenBaseSession) Name() (string, error) {
	return _MadTokenBase.Contract.Name(&_MadTokenBase.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_MadTokenBase *MadTokenBaseCallerSession) Name() (string, error) {
	return _MadTokenBase.Contract.Name(&_MadTokenBase.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_MadTokenBase *MadTokenBaseCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _MadTokenBase.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_MadTokenBase *MadTokenBaseSession) Symbol() (string, error) {
	return _MadTokenBase.Contract.Symbol(&_MadTokenBase.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_MadTokenBase *MadTokenBaseCallerSession) Symbol() (string, error) {
	return _MadTokenBase.Contract.Symbol(&_MadTokenBase.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MadTokenBase *MadTokenBaseCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MadTokenBase.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MadTokenBase *MadTokenBaseSession) TotalSupply() (*big.Int, error) {
	return _MadTokenBase.Contract.TotalSupply(&_MadTokenBase.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MadTokenBase *MadTokenBaseCallerSession) TotalSupply() (*big.Int, error) {
	return _MadTokenBase.Contract.TotalSupply(&_MadTokenBase.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_MadTokenBase *MadTokenBaseTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadTokenBase.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_MadTokenBase *MadTokenBaseSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadTokenBase.Contract.Approve(&_MadTokenBase.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_MadTokenBase *MadTokenBaseTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadTokenBase.Contract.Approve(&_MadTokenBase.TransactOpts, spender, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_MadTokenBase *MadTokenBaseTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _MadTokenBase.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_MadTokenBase *MadTokenBaseSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _MadTokenBase.Contract.DecreaseAllowance(&_MadTokenBase.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_MadTokenBase *MadTokenBaseTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _MadTokenBase.Contract.DecreaseAllowance(&_MadTokenBase.TransactOpts, spender, subtractedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_MadTokenBase *MadTokenBaseTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _MadTokenBase.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_MadTokenBase *MadTokenBaseSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _MadTokenBase.Contract.IncreaseAllowance(&_MadTokenBase.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_MadTokenBase *MadTokenBaseTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _MadTokenBase.Contract.IncreaseAllowance(&_MadTokenBase.TransactOpts, spender, addedValue)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_MadTokenBase *MadTokenBaseTransactor) SetAdmin(opts *bind.TransactOpts, admin_ common.Address) (*types.Transaction, error) {
	return _MadTokenBase.contract.Transact(opts, "setAdmin", admin_)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_MadTokenBase *MadTokenBaseSession) SetAdmin(admin_ common.Address) (*types.Transaction, error) {
	return _MadTokenBase.Contract.SetAdmin(&_MadTokenBase.TransactOpts, admin_)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_MadTokenBase *MadTokenBaseTransactorSession) SetAdmin(admin_ common.Address) (*types.Transaction, error) {
	return _MadTokenBase.Contract.SetAdmin(&_MadTokenBase.TransactOpts, admin_)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_MadTokenBase *MadTokenBaseTransactor) Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadTokenBase.contract.Transact(opts, "transfer", to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_MadTokenBase *MadTokenBaseSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadTokenBase.Contract.Transfer(&_MadTokenBase.TransactOpts, to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_MadTokenBase *MadTokenBaseTransactorSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadTokenBase.Contract.Transfer(&_MadTokenBase.TransactOpts, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_MadTokenBase *MadTokenBaseTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadTokenBase.contract.Transact(opts, "transferFrom", from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_MadTokenBase *MadTokenBaseSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadTokenBase.Contract.TransferFrom(&_MadTokenBase.TransactOpts, from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_MadTokenBase *MadTokenBaseTransactorSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MadTokenBase.Contract.TransferFrom(&_MadTokenBase.TransactOpts, from, to, amount)
}

// MadTokenBaseApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the MadTokenBase contract.
type MadTokenBaseApprovalIterator struct {
	Event *MadTokenBaseApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MadTokenBaseApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MadTokenBaseApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MadTokenBaseApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MadTokenBaseApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MadTokenBaseApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MadTokenBaseApproval represents a Approval event raised by the MadTokenBase contract.
type MadTokenBaseApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_MadTokenBase *MadTokenBaseFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*MadTokenBaseApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _MadTokenBase.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &MadTokenBaseApprovalIterator{contract: _MadTokenBase.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_MadTokenBase *MadTokenBaseFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *MadTokenBaseApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _MadTokenBase.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MadTokenBaseApproval)
				if err := _MadTokenBase.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_MadTokenBase *MadTokenBaseFilterer) ParseApproval(log types.Log) (*MadTokenBaseApproval, error) {
	event := new(MadTokenBaseApproval)
	if err := _MadTokenBase.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MadTokenBaseTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the MadTokenBase contract.
type MadTokenBaseTransferIterator struct {
	Event *MadTokenBaseTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MadTokenBaseTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MadTokenBaseTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MadTokenBaseTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MadTokenBaseTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MadTokenBaseTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MadTokenBaseTransfer represents a Transfer event raised by the MadTokenBase contract.
type MadTokenBaseTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_MadTokenBase *MadTokenBaseFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MadTokenBaseTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MadTokenBase.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &MadTokenBaseTransferIterator{contract: _MadTokenBase.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_MadTokenBase *MadTokenBaseFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *MadTokenBaseTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MadTokenBase.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MadTokenBaseTransfer)
				if err := _MadTokenBase.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_MadTokenBase *MadTokenBaseFilterer) ParseTransfer(log types.Log) (*MadTokenBaseTransfer, error) {
	event := new(MadTokenBaseTransfer)
	if err := _MadTokenBase.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MagicEthTransferMetaData contains all meta data concerning the MagicEthTransfer contract.
var MagicEthTransferMetaData = &bind.MetaData{
	ABI: "[]",
}

// MagicEthTransferABI is the input ABI used to generate the binding from.
// Deprecated: Use MagicEthTransferMetaData.ABI instead.
var MagicEthTransferABI = MagicEthTransferMetaData.ABI

// MagicEthTransfer is an auto generated Go binding around an Ethereum contract.
type MagicEthTransfer struct {
	MagicEthTransferCaller     // Read-only binding to the contract
	MagicEthTransferTransactor // Write-only binding to the contract
	MagicEthTransferFilterer   // Log filterer for contract events
}

// MagicEthTransferCaller is an auto generated read-only Go binding around an Ethereum contract.
type MagicEthTransferCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MagicEthTransferTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MagicEthTransferTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MagicEthTransferFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MagicEthTransferFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MagicEthTransferSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MagicEthTransferSession struct {
	Contract     *MagicEthTransfer // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MagicEthTransferCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MagicEthTransferCallerSession struct {
	Contract *MagicEthTransferCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// MagicEthTransferTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MagicEthTransferTransactorSession struct {
	Contract     *MagicEthTransferTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// MagicEthTransferRaw is an auto generated low-level Go binding around an Ethereum contract.
type MagicEthTransferRaw struct {
	Contract *MagicEthTransfer // Generic contract binding to access the raw methods on
}

// MagicEthTransferCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MagicEthTransferCallerRaw struct {
	Contract *MagicEthTransferCaller // Generic read-only contract binding to access the raw methods on
}

// MagicEthTransferTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MagicEthTransferTransactorRaw struct {
	Contract *MagicEthTransferTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMagicEthTransfer creates a new instance of MagicEthTransfer, bound to a specific deployed contract.
func NewMagicEthTransfer(address common.Address, backend bind.ContractBackend) (*MagicEthTransfer, error) {
	contract, err := bindMagicEthTransfer(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MagicEthTransfer{MagicEthTransferCaller: MagicEthTransferCaller{contract: contract}, MagicEthTransferTransactor: MagicEthTransferTransactor{contract: contract}, MagicEthTransferFilterer: MagicEthTransferFilterer{contract: contract}}, nil
}

// NewMagicEthTransferCaller creates a new read-only instance of MagicEthTransfer, bound to a specific deployed contract.
func NewMagicEthTransferCaller(address common.Address, caller bind.ContractCaller) (*MagicEthTransferCaller, error) {
	contract, err := bindMagicEthTransfer(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MagicEthTransferCaller{contract: contract}, nil
}

// NewMagicEthTransferTransactor creates a new write-only instance of MagicEthTransfer, bound to a specific deployed contract.
func NewMagicEthTransferTransactor(address common.Address, transactor bind.ContractTransactor) (*MagicEthTransferTransactor, error) {
	contract, err := bindMagicEthTransfer(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MagicEthTransferTransactor{contract: contract}, nil
}

// NewMagicEthTransferFilterer creates a new log filterer instance of MagicEthTransfer, bound to a specific deployed contract.
func NewMagicEthTransferFilterer(address common.Address, filterer bind.ContractFilterer) (*MagicEthTransferFilterer, error) {
	contract, err := bindMagicEthTransfer(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MagicEthTransferFilterer{contract: contract}, nil
}

// bindMagicEthTransfer binds a generic wrapper to an already deployed contract.
func bindMagicEthTransfer(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MagicEthTransferABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MagicEthTransfer *MagicEthTransferRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MagicEthTransfer.Contract.MagicEthTransferCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MagicEthTransfer *MagicEthTransferRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MagicEthTransfer.Contract.MagicEthTransferTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MagicEthTransfer *MagicEthTransferRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MagicEthTransfer.Contract.MagicEthTransferTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MagicEthTransfer *MagicEthTransferCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MagicEthTransfer.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MagicEthTransfer *MagicEthTransferTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MagicEthTransfer.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MagicEthTransfer *MagicEthTransferTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MagicEthTransfer.Contract.contract.Transact(opts, method, params...)
}

// MagicValueMetaData contains all meta data concerning the MagicValue contract.
var MagicValueMetaData = &bind.MetaData{
	ABI: "[]",
}

// MagicValueABI is the input ABI used to generate the binding from.
// Deprecated: Use MagicValueMetaData.ABI instead.
var MagicValueABI = MagicValueMetaData.ABI

// MagicValue is an auto generated Go binding around an Ethereum contract.
type MagicValue struct {
	MagicValueCaller     // Read-only binding to the contract
	MagicValueTransactor // Write-only binding to the contract
	MagicValueFilterer   // Log filterer for contract events
}

// MagicValueCaller is an auto generated read-only Go binding around an Ethereum contract.
type MagicValueCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MagicValueTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MagicValueTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MagicValueFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MagicValueFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MagicValueSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MagicValueSession struct {
	Contract     *MagicValue       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MagicValueCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MagicValueCallerSession struct {
	Contract *MagicValueCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// MagicValueTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MagicValueTransactorSession struct {
	Contract     *MagicValueTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// MagicValueRaw is an auto generated low-level Go binding around an Ethereum contract.
type MagicValueRaw struct {
	Contract *MagicValue // Generic contract binding to access the raw methods on
}

// MagicValueCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MagicValueCallerRaw struct {
	Contract *MagicValueCaller // Generic read-only contract binding to access the raw methods on
}

// MagicValueTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MagicValueTransactorRaw struct {
	Contract *MagicValueTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMagicValue creates a new instance of MagicValue, bound to a specific deployed contract.
func NewMagicValue(address common.Address, backend bind.ContractBackend) (*MagicValue, error) {
	contract, err := bindMagicValue(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MagicValue{MagicValueCaller: MagicValueCaller{contract: contract}, MagicValueTransactor: MagicValueTransactor{contract: contract}, MagicValueFilterer: MagicValueFilterer{contract: contract}}, nil
}

// NewMagicValueCaller creates a new read-only instance of MagicValue, bound to a specific deployed contract.
func NewMagicValueCaller(address common.Address, caller bind.ContractCaller) (*MagicValueCaller, error) {
	contract, err := bindMagicValue(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MagicValueCaller{contract: contract}, nil
}

// NewMagicValueTransactor creates a new write-only instance of MagicValue, bound to a specific deployed contract.
func NewMagicValueTransactor(address common.Address, transactor bind.ContractTransactor) (*MagicValueTransactor, error) {
	contract, err := bindMagicValue(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MagicValueTransactor{contract: contract}, nil
}

// NewMagicValueFilterer creates a new log filterer instance of MagicValue, bound to a specific deployed contract.
func NewMagicValueFilterer(address common.Address, filterer bind.ContractFilterer) (*MagicValueFilterer, error) {
	contract, err := bindMagicValue(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MagicValueFilterer{contract: contract}, nil
}

// bindMagicValue binds a generic wrapper to an already deployed contract.
func bindMagicValue(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MagicValueABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MagicValue *MagicValueRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MagicValue.Contract.MagicValueCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MagicValue *MagicValueRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MagicValue.Contract.MagicValueTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MagicValue *MagicValueRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MagicValue.Contract.MagicValueTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MagicValue *MagicValueCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MagicValue.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MagicValue *MagicValueTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MagicValue.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MagicValue *MagicValueTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MagicValue.Contract.contract.Transact(opts, method, params...)
}

// MutexMetaData contains all meta data concerning the Mutex contract.
var MutexMetaData = &bind.MetaData{
	ABI: "[]",
}

// MutexABI is the input ABI used to generate the binding from.
// Deprecated: Use MutexMetaData.ABI instead.
var MutexABI = MutexMetaData.ABI

// Mutex is an auto generated Go binding around an Ethereum contract.
type Mutex struct {
	MutexCaller     // Read-only binding to the contract
	MutexTransactor // Write-only binding to the contract
	MutexFilterer   // Log filterer for contract events
}

// MutexCaller is an auto generated read-only Go binding around an Ethereum contract.
type MutexCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MutexTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MutexTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MutexFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MutexFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MutexSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MutexSession struct {
	Contract     *Mutex            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MutexCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MutexCallerSession struct {
	Contract *MutexCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// MutexTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MutexTransactorSession struct {
	Contract     *MutexTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MutexRaw is an auto generated low-level Go binding around an Ethereum contract.
type MutexRaw struct {
	Contract *Mutex // Generic contract binding to access the raw methods on
}

// MutexCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MutexCallerRaw struct {
	Contract *MutexCaller // Generic read-only contract binding to access the raw methods on
}

// MutexTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MutexTransactorRaw struct {
	Contract *MutexTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMutex creates a new instance of Mutex, bound to a specific deployed contract.
func NewMutex(address common.Address, backend bind.ContractBackend) (*Mutex, error) {
	contract, err := bindMutex(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Mutex{MutexCaller: MutexCaller{contract: contract}, MutexTransactor: MutexTransactor{contract: contract}, MutexFilterer: MutexFilterer{contract: contract}}, nil
}

// NewMutexCaller creates a new read-only instance of Mutex, bound to a specific deployed contract.
func NewMutexCaller(address common.Address, caller bind.ContractCaller) (*MutexCaller, error) {
	contract, err := bindMutex(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MutexCaller{contract: contract}, nil
}

// NewMutexTransactor creates a new write-only instance of Mutex, bound to a specific deployed contract.
func NewMutexTransactor(address common.Address, transactor bind.ContractTransactor) (*MutexTransactor, error) {
	contract, err := bindMutex(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MutexTransactor{contract: contract}, nil
}

// NewMutexFilterer creates a new log filterer instance of Mutex, bound to a specific deployed contract.
func NewMutexFilterer(address common.Address, filterer bind.ContractFilterer) (*MutexFilterer, error) {
	contract, err := bindMutex(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MutexFilterer{contract: contract}, nil
}

// bindMutex binds a generic wrapper to an already deployed contract.
func bindMutex(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MutexABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Mutex *MutexRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Mutex.Contract.MutexCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Mutex *MutexRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Mutex.Contract.MutexTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Mutex *MutexRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Mutex.Contract.MutexTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Mutex *MutexCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Mutex.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Mutex *MutexTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Mutex.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Mutex *MutexTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Mutex.Contract.contract.Transact(opts, method, params...)
}

// RCertParserLibraryMetaData contains all meta data concerning the RCertParserLibrary contract.
var RCertParserLibraryMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122071168ba1681e3d5177c37e187dddc4aaf27c7873cac5d20f882ab4233b7cd82d64736f6c634300080c0033",
}

// RCertParserLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use RCertParserLibraryMetaData.ABI instead.
var RCertParserLibraryABI = RCertParserLibraryMetaData.ABI

// RCertParserLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RCertParserLibraryMetaData.Bin instead.
var RCertParserLibraryBin = RCertParserLibraryMetaData.Bin

// DeployRCertParserLibrary deploys a new Ethereum contract, binding an instance of RCertParserLibrary to it.
func DeployRCertParserLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *RCertParserLibrary, error) {
	parsed, err := RCertParserLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RCertParserLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RCertParserLibrary{RCertParserLibraryCaller: RCertParserLibraryCaller{contract: contract}, RCertParserLibraryTransactor: RCertParserLibraryTransactor{contract: contract}, RCertParserLibraryFilterer: RCertParserLibraryFilterer{contract: contract}}, nil
}

// RCertParserLibrary is an auto generated Go binding around an Ethereum contract.
type RCertParserLibrary struct {
	RCertParserLibraryCaller     // Read-only binding to the contract
	RCertParserLibraryTransactor // Write-only binding to the contract
	RCertParserLibraryFilterer   // Log filterer for contract events
}

// RCertParserLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type RCertParserLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RCertParserLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RCertParserLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RCertParserLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RCertParserLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RCertParserLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RCertParserLibrarySession struct {
	Contract     *RCertParserLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// RCertParserLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RCertParserLibraryCallerSession struct {
	Contract *RCertParserLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// RCertParserLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RCertParserLibraryTransactorSession struct {
	Contract     *RCertParserLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// RCertParserLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type RCertParserLibraryRaw struct {
	Contract *RCertParserLibrary // Generic contract binding to access the raw methods on
}

// RCertParserLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RCertParserLibraryCallerRaw struct {
	Contract *RCertParserLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// RCertParserLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RCertParserLibraryTransactorRaw struct {
	Contract *RCertParserLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRCertParserLibrary creates a new instance of RCertParserLibrary, bound to a specific deployed contract.
func NewRCertParserLibrary(address common.Address, backend bind.ContractBackend) (*RCertParserLibrary, error) {
	contract, err := bindRCertParserLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RCertParserLibrary{RCertParserLibraryCaller: RCertParserLibraryCaller{contract: contract}, RCertParserLibraryTransactor: RCertParserLibraryTransactor{contract: contract}, RCertParserLibraryFilterer: RCertParserLibraryFilterer{contract: contract}}, nil
}

// NewRCertParserLibraryCaller creates a new read-only instance of RCertParserLibrary, bound to a specific deployed contract.
func NewRCertParserLibraryCaller(address common.Address, caller bind.ContractCaller) (*RCertParserLibraryCaller, error) {
	contract, err := bindRCertParserLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RCertParserLibraryCaller{contract: contract}, nil
}

// NewRCertParserLibraryTransactor creates a new write-only instance of RCertParserLibrary, bound to a specific deployed contract.
func NewRCertParserLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*RCertParserLibraryTransactor, error) {
	contract, err := bindRCertParserLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RCertParserLibraryTransactor{contract: contract}, nil
}

// NewRCertParserLibraryFilterer creates a new log filterer instance of RCertParserLibrary, bound to a specific deployed contract.
func NewRCertParserLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*RCertParserLibraryFilterer, error) {
	contract, err := bindRCertParserLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RCertParserLibraryFilterer{contract: contract}, nil
}

// bindRCertParserLibrary binds a generic wrapper to an already deployed contract.
func bindRCertParserLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RCertParserLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RCertParserLibrary *RCertParserLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RCertParserLibrary.Contract.RCertParserLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RCertParserLibrary *RCertParserLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RCertParserLibrary.Contract.RCertParserLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RCertParserLibrary *RCertParserLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RCertParserLibrary.Contract.RCertParserLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RCertParserLibrary *RCertParserLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RCertParserLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RCertParserLibrary *RCertParserLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RCertParserLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RCertParserLibrary *RCertParserLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RCertParserLibrary.Contract.contract.Transact(opts, method, params...)
}

// RClaimsParserLibraryMetaData contains all meta data concerning the RClaimsParserLibrary contract.
var RClaimsParserLibraryMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220eee7e981b503e13163c2971baea9122933da3d23939660c67c2d59220d4cc79c64736f6c634300080c0033",
}

// RClaimsParserLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use RClaimsParserLibraryMetaData.ABI instead.
var RClaimsParserLibraryABI = RClaimsParserLibraryMetaData.ABI

// RClaimsParserLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RClaimsParserLibraryMetaData.Bin instead.
var RClaimsParserLibraryBin = RClaimsParserLibraryMetaData.Bin

// DeployRClaimsParserLibrary deploys a new Ethereum contract, binding an instance of RClaimsParserLibrary to it.
func DeployRClaimsParserLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *RClaimsParserLibrary, error) {
	parsed, err := RClaimsParserLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RClaimsParserLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RClaimsParserLibrary{RClaimsParserLibraryCaller: RClaimsParserLibraryCaller{contract: contract}, RClaimsParserLibraryTransactor: RClaimsParserLibraryTransactor{contract: contract}, RClaimsParserLibraryFilterer: RClaimsParserLibraryFilterer{contract: contract}}, nil
}

// RClaimsParserLibrary is an auto generated Go binding around an Ethereum contract.
type RClaimsParserLibrary struct {
	RClaimsParserLibraryCaller     // Read-only binding to the contract
	RClaimsParserLibraryTransactor // Write-only binding to the contract
	RClaimsParserLibraryFilterer   // Log filterer for contract events
}

// RClaimsParserLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type RClaimsParserLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RClaimsParserLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RClaimsParserLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RClaimsParserLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RClaimsParserLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RClaimsParserLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RClaimsParserLibrarySession struct {
	Contract     *RClaimsParserLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// RClaimsParserLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RClaimsParserLibraryCallerSession struct {
	Contract *RClaimsParserLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// RClaimsParserLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RClaimsParserLibraryTransactorSession struct {
	Contract     *RClaimsParserLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// RClaimsParserLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type RClaimsParserLibraryRaw struct {
	Contract *RClaimsParserLibrary // Generic contract binding to access the raw methods on
}

// RClaimsParserLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RClaimsParserLibraryCallerRaw struct {
	Contract *RClaimsParserLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// RClaimsParserLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RClaimsParserLibraryTransactorRaw struct {
	Contract *RClaimsParserLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRClaimsParserLibrary creates a new instance of RClaimsParserLibrary, bound to a specific deployed contract.
func NewRClaimsParserLibrary(address common.Address, backend bind.ContractBackend) (*RClaimsParserLibrary, error) {
	contract, err := bindRClaimsParserLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RClaimsParserLibrary{RClaimsParserLibraryCaller: RClaimsParserLibraryCaller{contract: contract}, RClaimsParserLibraryTransactor: RClaimsParserLibraryTransactor{contract: contract}, RClaimsParserLibraryFilterer: RClaimsParserLibraryFilterer{contract: contract}}, nil
}

// NewRClaimsParserLibraryCaller creates a new read-only instance of RClaimsParserLibrary, bound to a specific deployed contract.
func NewRClaimsParserLibraryCaller(address common.Address, caller bind.ContractCaller) (*RClaimsParserLibraryCaller, error) {
	contract, err := bindRClaimsParserLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RClaimsParserLibraryCaller{contract: contract}, nil
}

// NewRClaimsParserLibraryTransactor creates a new write-only instance of RClaimsParserLibrary, bound to a specific deployed contract.
func NewRClaimsParserLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*RClaimsParserLibraryTransactor, error) {
	contract, err := bindRClaimsParserLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RClaimsParserLibraryTransactor{contract: contract}, nil
}

// NewRClaimsParserLibraryFilterer creates a new log filterer instance of RClaimsParserLibrary, bound to a specific deployed contract.
func NewRClaimsParserLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*RClaimsParserLibraryFilterer, error) {
	contract, err := bindRClaimsParserLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RClaimsParserLibraryFilterer{contract: contract}, nil
}

// bindRClaimsParserLibrary binds a generic wrapper to an already deployed contract.
func bindRClaimsParserLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RClaimsParserLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RClaimsParserLibrary *RClaimsParserLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RClaimsParserLibrary.Contract.RClaimsParserLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RClaimsParserLibrary *RClaimsParserLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RClaimsParserLibrary.Contract.RClaimsParserLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RClaimsParserLibrary *RClaimsParserLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RClaimsParserLibrary.Contract.RClaimsParserLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RClaimsParserLibrary *RClaimsParserLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RClaimsParserLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RClaimsParserLibrary *RClaimsParserLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RClaimsParserLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RClaimsParserLibrary *RClaimsParserLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RClaimsParserLibrary.Contract.contract.Transact(opts, method, params...)
}

// RegistryMetaData contains all meta data concerning the Registry contract.
var RegistryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"lookup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50600280546001600160a01b0319163390811790915561002f90610034565b610129565b6002546001600160a01b031633148061005c57503360009081526020819052604090205460ff165b6100c65760405162461bcd60e51b815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527037b934bd32b21037b832b930ba37b9399760791b606482015260840160405180910390fd5b6001600160a01b0381166000908152602081905260408120805460ff191660019081179091558054916100f883610100565b919050555050565b600060001982141561012257634e487b7160e01b600052601160045260246000fd5b5060010190565b6108d5806101386000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063e348da1311610050578063e348da1314610094578063f67187ac146100a7578063fad8b32a146100e357600080fd5b80631e59c5291461006c57806380599e4b14610081575b600080fd5b61007f61007a36600461071a565b6100f6565b005b61007f61008f366004610768565b610225565b61007f6100a23660046107a5565b61032e565b6100ba6100b5366004610768565b610454565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b61007f6100f13660046107a5565b610492565b60025473ffffffffffffffffffffffffffffffffffffffff1633148061012b57503360009081526020819052604090205460ff165b6101bc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e00000000000000000000000000000060648201526084015b60405180910390fd5b806003836040516101cd91906107c7565b908152604051908190036020019020805473ffffffffffffffffffffffffffffffffffffffff929092167fffffffffffffffffffffffff00000000000000000000000000000000000000009092169190911790555050565b60025473ffffffffffffffffffffffffffffffffffffffff1633148061025a57503360009081526020819052604090205460ff165b6102e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e00000000000000000000000000000060648201526084016101b3565b6003816040516102f691906107c7565b90815260405190819003602001902080547fffffffffffffffffffffffff000000000000000000000000000000000000000016905550565b60025473ffffffffffffffffffffffffffffffffffffffff1633148061036357503360009081526020819052604090205460ff165b6103ef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e00000000000000000000000000000060648201526084016101b3565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260208190526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600190811790915580549161044c83610831565b919050555050565b600060038260405161046691906107c7565b9081526040519081900360200190205473ffffffffffffffffffffffffffffffffffffffff1692915050565b60025473ffffffffffffffffffffffffffffffffffffffff163314806104c757503360009081526020819052604090205460ff165b610553576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e00000000000000000000000000000060648201526084016101b3565b60018054116105be576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f43616e27742072656d6f766520616c6c206f70657261746f727300000000000060448201526064016101b3565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260208190526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055600180549161044c8361086a565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f83011261065757600080fd5b813567ffffffffffffffff8082111561067257610672610617565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019082821181831017156106b8576106b8610617565b816040528381528660208588010111156106d157600080fd5b836020870160208301376000602085830101528094505050505092915050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461071557600080fd5b919050565b6000806040838503121561072d57600080fd5b823567ffffffffffffffff81111561074457600080fd5b61075085828601610646565b92505061075f602084016106f1565b90509250929050565b60006020828403121561077a57600080fd5b813567ffffffffffffffff81111561079157600080fd5b61079d84828501610646565b949350505050565b6000602082840312156107b757600080fd5b6107c0826106f1565b9392505050565b6000825160005b818110156107e857602081860181015185830152016107ce565b818111156107f7576000828501525b509190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561086357610863610802565b5060010190565b60008161087957610879610802565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fea264697066735822122049f26d73bdf7be825da95f60bf49923a11a2ad75dab9cb2fcb470010880ff4e664736f6c634300080c0033",
}

// RegistryABI is the input ABI used to generate the binding from.
// Deprecated: Use RegistryMetaData.ABI instead.
var RegistryABI = RegistryMetaData.ABI

// RegistryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RegistryMetaData.Bin instead.
var RegistryBin = RegistryMetaData.Bin

// DeployRegistry deploys a new Ethereum contract, binding an instance of Registry to it.
func DeployRegistry(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Registry, error) {
	parsed, err := RegistryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RegistryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Registry{RegistryCaller: RegistryCaller{contract: contract}, RegistryTransactor: RegistryTransactor{contract: contract}, RegistryFilterer: RegistryFilterer{contract: contract}}, nil
}

// Registry is an auto generated Go binding around an Ethereum contract.
type Registry struct {
	RegistryCaller     // Read-only binding to the contract
	RegistryTransactor // Write-only binding to the contract
	RegistryFilterer   // Log filterer for contract events
}

// RegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type RegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RegistrySession struct {
	Contract     *Registry         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RegistryCallerSession struct {
	Contract *RegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// RegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RegistryTransactorSession struct {
	Contract     *RegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// RegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type RegistryRaw struct {
	Contract *Registry // Generic contract binding to access the raw methods on
}

// RegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RegistryCallerRaw struct {
	Contract *RegistryCaller // Generic read-only contract binding to access the raw methods on
}

// RegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RegistryTransactorRaw struct {
	Contract *RegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRegistry creates a new instance of Registry, bound to a specific deployed contract.
func NewRegistry(address common.Address, backend bind.ContractBackend) (*Registry, error) {
	contract, err := bindRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Registry{RegistryCaller: RegistryCaller{contract: contract}, RegistryTransactor: RegistryTransactor{contract: contract}, RegistryFilterer: RegistryFilterer{contract: contract}}, nil
}

// NewRegistryCaller creates a new read-only instance of Registry, bound to a specific deployed contract.
func NewRegistryCaller(address common.Address, caller bind.ContractCaller) (*RegistryCaller, error) {
	contract, err := bindRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryCaller{contract: contract}, nil
}

// NewRegistryTransactor creates a new write-only instance of Registry, bound to a specific deployed contract.
func NewRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*RegistryTransactor, error) {
	contract, err := bindRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryTransactor{contract: contract}, nil
}

// NewRegistryFilterer creates a new log filterer instance of Registry, bound to a specific deployed contract.
func NewRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*RegistryFilterer, error) {
	contract, err := bindRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RegistryFilterer{contract: contract}, nil
}

// bindRegistry binds a generic wrapper to an already deployed contract.
func bindRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RegistryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Registry *RegistryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Registry.Contract.RegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Registry *RegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.Contract.RegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Registry *RegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Registry.Contract.RegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Registry *RegistryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Registry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Registry *RegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Registry *RegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Registry.Contract.contract.Transact(opts, method, params...)
}

// Lookup is a free data retrieval call binding the contract method 0xf67187ac.
//
// Solidity: function lookup(string name) view returns(address)
func (_Registry *RegistryCaller) Lookup(opts *bind.CallOpts, name string) (common.Address, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "lookup", name)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Lookup is a free data retrieval call binding the contract method 0xf67187ac.
//
// Solidity: function lookup(string name) view returns(address)
func (_Registry *RegistrySession) Lookup(name string) (common.Address, error) {
	return _Registry.Contract.Lookup(&_Registry.CallOpts, name)
}

// Lookup is a free data retrieval call binding the contract method 0xf67187ac.
//
// Solidity: function lookup(string name) view returns(address)
func (_Registry *RegistryCallerSession) Lookup(name string) (common.Address, error) {
	return _Registry.Contract.Lookup(&_Registry.CallOpts, name)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_Registry *RegistryTransactor) GrantOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "grantOperator", _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_Registry *RegistrySession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _Registry.Contract.GrantOperator(&_Registry.TransactOpts, _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_Registry *RegistryTransactorSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _Registry.Contract.GrantOperator(&_Registry.TransactOpts, _operator)
}

// Register is a paid mutator transaction binding the contract method 0x1e59c529.
//
// Solidity: function register(string name, address dst) returns()
func (_Registry *RegistryTransactor) Register(opts *bind.TransactOpts, name string, dst common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "register", name, dst)
}

// Register is a paid mutator transaction binding the contract method 0x1e59c529.
//
// Solidity: function register(string name, address dst) returns()
func (_Registry *RegistrySession) Register(name string, dst common.Address) (*types.Transaction, error) {
	return _Registry.Contract.Register(&_Registry.TransactOpts, name, dst)
}

// Register is a paid mutator transaction binding the contract method 0x1e59c529.
//
// Solidity: function register(string name, address dst) returns()
func (_Registry *RegistryTransactorSession) Register(name string, dst common.Address) (*types.Transaction, error) {
	return _Registry.Contract.Register(&_Registry.TransactOpts, name, dst)
}

// Remove is a paid mutator transaction binding the contract method 0x80599e4b.
//
// Solidity: function remove(string name) returns()
func (_Registry *RegistryTransactor) Remove(opts *bind.TransactOpts, name string) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "remove", name)
}

// Remove is a paid mutator transaction binding the contract method 0x80599e4b.
//
// Solidity: function remove(string name) returns()
func (_Registry *RegistrySession) Remove(name string) (*types.Transaction, error) {
	return _Registry.Contract.Remove(&_Registry.TransactOpts, name)
}

// Remove is a paid mutator transaction binding the contract method 0x80599e4b.
//
// Solidity: function remove(string name) returns()
func (_Registry *RegistryTransactorSession) Remove(name string) (*types.Transaction, error) {
	return _Registry.Contract.Remove(&_Registry.TransactOpts, name)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_Registry *RegistryTransactor) RevokeOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "revokeOperator", _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_Registry *RegistrySession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _Registry.Contract.RevokeOperator(&_Registry.TransactOpts, _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_Registry *RegistryTransactorSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _Registry.Contract.RevokeOperator(&_Registry.TransactOpts, _operator)
}

// RegistryClientMetaData contains all meta data concerning the RegistryClient contract.
var RegistryClientMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"reloadRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// RegistryClientABI is the input ABI used to generate the binding from.
// Deprecated: Use RegistryClientMetaData.ABI instead.
var RegistryClientABI = RegistryClientMetaData.ABI

// RegistryClient is an auto generated Go binding around an Ethereum contract.
type RegistryClient struct {
	RegistryClientCaller     // Read-only binding to the contract
	RegistryClientTransactor // Write-only binding to the contract
	RegistryClientFilterer   // Log filterer for contract events
}

// RegistryClientCaller is an auto generated read-only Go binding around an Ethereum contract.
type RegistryClientCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryClientTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RegistryClientTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryClientFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RegistryClientFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryClientSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RegistryClientSession struct {
	Contract     *RegistryClient   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RegistryClientCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RegistryClientCallerSession struct {
	Contract *RegistryClientCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// RegistryClientTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RegistryClientTransactorSession struct {
	Contract     *RegistryClientTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// RegistryClientRaw is an auto generated low-level Go binding around an Ethereum contract.
type RegistryClientRaw struct {
	Contract *RegistryClient // Generic contract binding to access the raw methods on
}

// RegistryClientCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RegistryClientCallerRaw struct {
	Contract *RegistryClientCaller // Generic read-only contract binding to access the raw methods on
}

// RegistryClientTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RegistryClientTransactorRaw struct {
	Contract *RegistryClientTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRegistryClient creates a new instance of RegistryClient, bound to a specific deployed contract.
func NewRegistryClient(address common.Address, backend bind.ContractBackend) (*RegistryClient, error) {
	contract, err := bindRegistryClient(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RegistryClient{RegistryClientCaller: RegistryClientCaller{contract: contract}, RegistryClientTransactor: RegistryClientTransactor{contract: contract}, RegistryClientFilterer: RegistryClientFilterer{contract: contract}}, nil
}

// NewRegistryClientCaller creates a new read-only instance of RegistryClient, bound to a specific deployed contract.
func NewRegistryClientCaller(address common.Address, caller bind.ContractCaller) (*RegistryClientCaller, error) {
	contract, err := bindRegistryClient(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryClientCaller{contract: contract}, nil
}

// NewRegistryClientTransactor creates a new write-only instance of RegistryClient, bound to a specific deployed contract.
func NewRegistryClientTransactor(address common.Address, transactor bind.ContractTransactor) (*RegistryClientTransactor, error) {
	contract, err := bindRegistryClient(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryClientTransactor{contract: contract}, nil
}

// NewRegistryClientFilterer creates a new log filterer instance of RegistryClient, bound to a specific deployed contract.
func NewRegistryClientFilterer(address common.Address, filterer bind.ContractFilterer) (*RegistryClientFilterer, error) {
	contract, err := bindRegistryClient(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RegistryClientFilterer{contract: contract}, nil
}

// bindRegistryClient binds a generic wrapper to an already deployed contract.
func bindRegistryClient(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RegistryClientABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RegistryClient *RegistryClientRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RegistryClient.Contract.RegistryClientCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RegistryClient *RegistryClientRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryClient.Contract.RegistryClientTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RegistryClient *RegistryClientRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RegistryClient.Contract.RegistryClientTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RegistryClient *RegistryClientCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RegistryClient.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RegistryClient *RegistryClientTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryClient.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RegistryClient *RegistryClientTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RegistryClient.Contract.contract.Transact(opts, method, params...)
}

// ReloadRegistry is a paid mutator transaction binding the contract method 0x1476601d.
//
// Solidity: function reloadRegistry() returns()
func (_RegistryClient *RegistryClientTransactor) ReloadRegistry(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryClient.contract.Transact(opts, "reloadRegistry")
}

// ReloadRegistry is a paid mutator transaction binding the contract method 0x1476601d.
//
// Solidity: function reloadRegistry() returns()
func (_RegistryClient *RegistryClientSession) ReloadRegistry() (*types.Transaction, error) {
	return _RegistryClient.Contract.ReloadRegistry(&_RegistryClient.TransactOpts)
}

// ReloadRegistry is a paid mutator transaction binding the contract method 0x1476601d.
//
// Solidity: function reloadRegistry() returns()
func (_RegistryClient *RegistryClientTransactorSession) ReloadRegistry() (*types.Transaction, error) {
	return _RegistryClient.Contract.ReloadRegistry(&_RegistryClient.TransactOpts)
}

// SigmoidMetaData contains all meta data concerning the Sigmoid contract.
var SigmoidMetaData = &bind.MetaData{
	ABI: "[]",
}

// SigmoidABI is the input ABI used to generate the binding from.
// Deprecated: Use SigmoidMetaData.ABI instead.
var SigmoidABI = SigmoidMetaData.ABI

// Sigmoid is an auto generated Go binding around an Ethereum contract.
type Sigmoid struct {
	SigmoidCaller     // Read-only binding to the contract
	SigmoidTransactor // Write-only binding to the contract
	SigmoidFilterer   // Log filterer for contract events
}

// SigmoidCaller is an auto generated read-only Go binding around an Ethereum contract.
type SigmoidCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SigmoidTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SigmoidTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SigmoidFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SigmoidFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SigmoidSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SigmoidSession struct {
	Contract     *Sigmoid          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SigmoidCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SigmoidCallerSession struct {
	Contract *SigmoidCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// SigmoidTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SigmoidTransactorSession struct {
	Contract     *SigmoidTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// SigmoidRaw is an auto generated low-level Go binding around an Ethereum contract.
type SigmoidRaw struct {
	Contract *Sigmoid // Generic contract binding to access the raw methods on
}

// SigmoidCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SigmoidCallerRaw struct {
	Contract *SigmoidCaller // Generic read-only contract binding to access the raw methods on
}

// SigmoidTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SigmoidTransactorRaw struct {
	Contract *SigmoidTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSigmoid creates a new instance of Sigmoid, bound to a specific deployed contract.
func NewSigmoid(address common.Address, backend bind.ContractBackend) (*Sigmoid, error) {
	contract, err := bindSigmoid(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Sigmoid{SigmoidCaller: SigmoidCaller{contract: contract}, SigmoidTransactor: SigmoidTransactor{contract: contract}, SigmoidFilterer: SigmoidFilterer{contract: contract}}, nil
}

// NewSigmoidCaller creates a new read-only instance of Sigmoid, bound to a specific deployed contract.
func NewSigmoidCaller(address common.Address, caller bind.ContractCaller) (*SigmoidCaller, error) {
	contract, err := bindSigmoid(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SigmoidCaller{contract: contract}, nil
}

// NewSigmoidTransactor creates a new write-only instance of Sigmoid, bound to a specific deployed contract.
func NewSigmoidTransactor(address common.Address, transactor bind.ContractTransactor) (*SigmoidTransactor, error) {
	contract, err := bindSigmoid(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SigmoidTransactor{contract: contract}, nil
}

// NewSigmoidFilterer creates a new log filterer instance of Sigmoid, bound to a specific deployed contract.
func NewSigmoidFilterer(address common.Address, filterer bind.ContractFilterer) (*SigmoidFilterer, error) {
	contract, err := bindSigmoid(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SigmoidFilterer{contract: contract}, nil
}

// bindSigmoid binds a generic wrapper to an already deployed contract.
func bindSigmoid(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SigmoidABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Sigmoid *SigmoidRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Sigmoid.Contract.SigmoidCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Sigmoid *SigmoidRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Sigmoid.Contract.SigmoidTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Sigmoid *SigmoidRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Sigmoid.Contract.SigmoidTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Sigmoid *SigmoidCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Sigmoid.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Sigmoid *SigmoidTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Sigmoid.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Sigmoid *SigmoidTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Sigmoid.Contract.contract.Transact(opts, method, params...)
}

// SimpleAuthMetaData contains all meta data concerning the SimpleAuth contract.
var SimpleAuthMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50600280546001600160a01b0319163390811790915561002f90610034565b610129565b6002546001600160a01b031633148061005c57503360009081526020819052604090205460ff165b6100c65760405162461bcd60e51b815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527037b934bd32b21037b832b930ba37b9399760791b606482015260840160405180910390fd5b6001600160a01b0381166000908152602081905260408120805460ff191660019081179091558054916100f883610100565b919050555050565b600060001982141561012257634e487b7160e01b600052601160045260246000fd5b5060010190565b610423806101386000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063e348da131461003b578063fad8b32a14610050575b600080fd5b61004e610049366004610313565b610063565b005b61004e61005e366004610313565b61018e565b60025473ffffffffffffffffffffffffffffffffffffffff1633148061009857503360009081526020819052604090205460ff165b610129576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e00000000000000000000000000000060648201526084015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8116600090815260208190526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091558054916101868361037f565b919050555050565b60025473ffffffffffffffffffffffffffffffffffffffff163314806101c357503360009081526020819052604090205460ff165b61024f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f46756e6374696f6e616c697479207265737472696374656420746f206175746860448201527f6f72697a6564206f70657261746f72732e0000000000000000000000000000006064820152608401610120565b60018054116102ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f43616e27742072656d6f766520616c6c206f70657261746f72730000000000006044820152606401610120565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260208190526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690556001805491610186836103b8565b60006020828403121561032557600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461034957600080fd5b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156103b1576103b1610350565b5060010190565b6000816103c7576103c7610350565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fea26469706673582212207a3d4b200cfbf003dc93d7725f95ca36373b1cee778e6ccfaa9755c789d5d82464736f6c634300080c0033",
}

// SimpleAuthABI is the input ABI used to generate the binding from.
// Deprecated: Use SimpleAuthMetaData.ABI instead.
var SimpleAuthABI = SimpleAuthMetaData.ABI

// SimpleAuthBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SimpleAuthMetaData.Bin instead.
var SimpleAuthBin = SimpleAuthMetaData.Bin

// DeploySimpleAuth deploys a new Ethereum contract, binding an instance of SimpleAuth to it.
func DeploySimpleAuth(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SimpleAuth, error) {
	parsed, err := SimpleAuthMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SimpleAuthBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SimpleAuth{SimpleAuthCaller: SimpleAuthCaller{contract: contract}, SimpleAuthTransactor: SimpleAuthTransactor{contract: contract}, SimpleAuthFilterer: SimpleAuthFilterer{contract: contract}}, nil
}

// SimpleAuth is an auto generated Go binding around an Ethereum contract.
type SimpleAuth struct {
	SimpleAuthCaller     // Read-only binding to the contract
	SimpleAuthTransactor // Write-only binding to the contract
	SimpleAuthFilterer   // Log filterer for contract events
}

// SimpleAuthCaller is an auto generated read-only Go binding around an Ethereum contract.
type SimpleAuthCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleAuthTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SimpleAuthTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleAuthFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SimpleAuthFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleAuthSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SimpleAuthSession struct {
	Contract     *SimpleAuth       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SimpleAuthCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SimpleAuthCallerSession struct {
	Contract *SimpleAuthCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// SimpleAuthTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SimpleAuthTransactorSession struct {
	Contract     *SimpleAuthTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// SimpleAuthRaw is an auto generated low-level Go binding around an Ethereum contract.
type SimpleAuthRaw struct {
	Contract *SimpleAuth // Generic contract binding to access the raw methods on
}

// SimpleAuthCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SimpleAuthCallerRaw struct {
	Contract *SimpleAuthCaller // Generic read-only contract binding to access the raw methods on
}

// SimpleAuthTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SimpleAuthTransactorRaw struct {
	Contract *SimpleAuthTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSimpleAuth creates a new instance of SimpleAuth, bound to a specific deployed contract.
func NewSimpleAuth(address common.Address, backend bind.ContractBackend) (*SimpleAuth, error) {
	contract, err := bindSimpleAuth(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SimpleAuth{SimpleAuthCaller: SimpleAuthCaller{contract: contract}, SimpleAuthTransactor: SimpleAuthTransactor{contract: contract}, SimpleAuthFilterer: SimpleAuthFilterer{contract: contract}}, nil
}

// NewSimpleAuthCaller creates a new read-only instance of SimpleAuth, bound to a specific deployed contract.
func NewSimpleAuthCaller(address common.Address, caller bind.ContractCaller) (*SimpleAuthCaller, error) {
	contract, err := bindSimpleAuth(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SimpleAuthCaller{contract: contract}, nil
}

// NewSimpleAuthTransactor creates a new write-only instance of SimpleAuth, bound to a specific deployed contract.
func NewSimpleAuthTransactor(address common.Address, transactor bind.ContractTransactor) (*SimpleAuthTransactor, error) {
	contract, err := bindSimpleAuth(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SimpleAuthTransactor{contract: contract}, nil
}

// NewSimpleAuthFilterer creates a new log filterer instance of SimpleAuth, bound to a specific deployed contract.
func NewSimpleAuthFilterer(address common.Address, filterer bind.ContractFilterer) (*SimpleAuthFilterer, error) {
	contract, err := bindSimpleAuth(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SimpleAuthFilterer{contract: contract}, nil
}

// bindSimpleAuth binds a generic wrapper to an already deployed contract.
func bindSimpleAuth(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SimpleAuthABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SimpleAuth *SimpleAuthRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SimpleAuth.Contract.SimpleAuthCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SimpleAuth *SimpleAuthRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SimpleAuth.Contract.SimpleAuthTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SimpleAuth *SimpleAuthRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SimpleAuth.Contract.SimpleAuthTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SimpleAuth *SimpleAuthCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SimpleAuth.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SimpleAuth *SimpleAuthTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SimpleAuth.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SimpleAuth *SimpleAuthTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SimpleAuth.Contract.contract.Transact(opts, method, params...)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_SimpleAuth *SimpleAuthTransactor) GrantOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _SimpleAuth.contract.Transact(opts, "grantOperator", _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_SimpleAuth *SimpleAuthSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _SimpleAuth.Contract.GrantOperator(&_SimpleAuth.TransactOpts, _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_SimpleAuth *SimpleAuthTransactorSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _SimpleAuth.Contract.GrantOperator(&_SimpleAuth.TransactOpts, _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_SimpleAuth *SimpleAuthTransactor) RevokeOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _SimpleAuth.contract.Transact(opts, "revokeOperator", _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_SimpleAuth *SimpleAuthSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _SimpleAuth.Contract.RevokeOperator(&_SimpleAuth.TransactOpts, _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_SimpleAuth *SimpleAuthTransactorSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _SimpleAuth.Contract.RevokeOperator(&_SimpleAuth.TransactOpts, _operator)
}

// SnapshotsMetaData contains all meta data concerning the Snapshots contract.
var SnapshotsMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSafeToProceedConsensus\",\"type\":\"bool\"}],\"name\":\"SnapshotTaken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockClaimsFromLatestSnapshot\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"txCount\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"prevBlock\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"txRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"headerRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structBClaimsParserLibrary.BClaims\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch_\",\"type\":\"uint256\"}],\"name\":\"getBlockClaimsFromSnapshot\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"txCount\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"prevBlock\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"txRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"headerRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structBClaimsParserLibrary.BClaims\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainIdFromLatestSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch_\",\"type\":\"uint256\"}],\"name\":\"getChainIdFromSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommittedHeightFromLatestSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch_\",\"type\":\"uint256\"}],\"name\":\"getCommittedHeightFromSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpochLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestSnapshot\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"committedAt\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"txCount\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"prevBlock\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"txRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"headerRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structBClaimsParserLibrary.BClaims\",\"name\":\"blockClaims\",\"type\":\"tuple\"},{\"internalType\":\"uint256[2]\",\"name\":\"signature\",\"type\":\"uint256[2]\"}],\"internalType\":\"structSnapshot\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMadnetHeightFromLatestSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch_\",\"type\":\"uint256\"}],\"name\":\"getMadnetHeightFromSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"getMetamorphicContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSignatureFromLatestSnapshot\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch_\",\"type\":\"uint256\"}],\"name\":\"getSignatureFromSnapshot\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch_\",\"type\":\"uint256\"}],\"name\":\"getSnapshot\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"committedAt\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"txCount\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"prevBlock\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"txRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"headerRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structBClaimsParserLibrary.BClaims\",\"name\":\"blockClaims\",\"type\":\"tuple\"},{\"internalType\":\"uint256[2]\",\"name\":\"signature\",\"type\":\"uint256[2]\"}],\"internalType\":\"structSnapshot\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSnapshotDesperationDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSnapshotDesperationFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"desperationDelay_\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"desperationFactor_\",\"type\":\"uint32\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numValidators\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"myIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blocksSinceDesperation\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blsig\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"desperationFactor\",\"type\":\"uint256\"}],\"name\":\"mayValidatorSnapshot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"desperationDelay_\",\"type\":\"uint32\"}],\"name\":\"setSnapshotDesperationDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"desperationFactor_\",\"type\":\"uint32\"}],\"name\":\"setSnapshotDesperationFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"groupSignature_\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"bClaims_\",\"type\":\"bytes\"}],\"name\":\"snapshot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6101006040523480156200001257600080fd5b5060405162003eaa38038062003eaa833981016040819052620000359162000135565b336080818152604080517fff0000000000000000000000000000000000000000000000000000000000000060208083018290526001600160601b0319606096871b8116602185015265455448444b4760d01b60358501527f1c0bf703a3415cada9785e89e9d70314c3111ae7d8e04f33bb42eb1d264088be6055808601829052865180870390910181526075860187528051908401206001600160a01b0390811660a052965160958601949094529290961b90951660968301526c15985b1a59185d1bdc941bdbdb609a1b60aa83015260ca808301919091528251808303909101815260ea90910190915280519201919091201660c05260e0526200014f565b6000602082840312156200014857600080fd5b5051919050565b60805160a05160c05160e051613cf0620001ba6000396000818161022701528181610e26015261114001526000818161060e015281816109c701528181610ec00152610f580152600081816107070152818161084f0152610b4f015260006111b20152613cf06000f3fe608060405234801561001057600080fd5b50600436106101a35760003560e01c80638653a465116100ee578063cfe8a73b11610097578063d9c1165711610071578063d9c116571461056d578063dbe7eae714610597578063e18c697a146105aa578063f45fa246146105ca57600080fd5b8063cfe8a73b14610545578063d17fcc561461054d578063d518f2431461056557600080fd5b8063c0804ea9116100c8578063c0804ea91461045c578063c2e8fef214610471578063c2ea66031461048457600080fd5b80638653a465146103e55780639c262671146103f8578063a8c07fc31461042a57600080fd5b806345dfc59911610150578063757991a81161012a578063757991a81461039557806376f10ad0146103a95780637cc4cce6146103c957600080fd5b806345dfc599146102735780636e9960c314610343578063704b6c021461038257600080fd5b80633408e470116101815780633408e470146102255780633ecc0f5e1461024b5780633fa7a1ad1461026057600080fd5b8063026c2b7e146101a857806308ca1f25146101d857806319f74669146101fb575b600080fd5b6000805462010000900463ffffffff168152600160205260409020545b6040519081526020015b60405180910390f35b6101eb6101e6366004613492565b6105dd565b60405190151581526020016101cf565b6101c56102093660046134fe565b6000908152600160208190526040909120015463ffffffff1690565b7f00000000000000000000000000000000000000000000000000000000000000006101c5565b61025e61025936600461352b565b61119a565b005b61025e61026e36600461355e565b6113c2565b6103366102813660046134fe565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915250600090815260016020818152604092839020835160e0810185529281015463ffffffff80821685526401000000008204811693850193909352680100000000000000009004909116928201929092526002820154606082015260038201546080820152600482015460a082015260059091015460c082015290565b6040516101cf9190613580565b60025473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101cf565b61025e6103903660046135fd565b61146e565b60005462010000900463ffffffff166101c5565b6103bc6103b73660046134fe565b61151c565b6040516101cf9190613618565b6000546a0100000000000000000000900463ffffffff166101c5565b61035d6103f33660046136b5565b6115e9565b6000805462010000900463ffffffff9081168252600160208190526040909220909101546401000000009004166101c5565b6101c56104383660046134fe565b60009081526001602081905260409091200154640100000000900463ffffffff1690565b610464611693565b6040516101cf91906136d8565b61025e61047f36600461355e565b6116eb565b6103366040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810191909152506000805463ffffffff620100009091048116825260016020818152604093849020845160e081018652928101548085168452640100000000810485169284019290925268010000000000000000909104909216928101929092526002810154606083015260038101546080830152600481015460a08301526005015460c082015290565b6104006101c5565b6000546601000000000000900463ffffffff166101c5565b6103bc611793565b6000805462010000900463ffffffff908116825260016020819052604090922090910154166101c5565b6104646105a53660046134fe565b611869565b6101c56105b83660046134fe565b60009081526001602052604090205490565b6101eb6105d8366004613709565b6118b7565b6040517ffacd743b0000000000000000000000000000000000000000000000000000000081523360048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063facd743b90602401602060405180830381865afa15801561066a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068e9190613754565b6107055760405162461bcd60e51b815260206004820152602360248201527f536e617073686f74733a204f6e6c792076616c696461746f727320616c6c6f7760448201527f656421000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663747b217c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610770573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107949190613754565b156108075760405162461bcd60e51b815260206004820152602b60248201527f536e617073686f74733a205468657265277320616e20455448444b4720726f7560448201527f6e642072756e6e696e672100000000000000000000000000000000000000000060648201526084016106fc565b6040517f65e62b9b000000000000000000000000000000000000000000000000000000008152336004820152600090819073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906365e62b9b906024016040805180830381865afa158015610895573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b9919061376f565b91509150816109305760405162461bcd60e51b815260206004820152603e60248201527f536e617073686f74733a2043616c6c6572206469646e2774207061727469636960448201527f7061746520696e20746865206c61737420657468646b6720726f756e6421000060648201526084016106fc565b6000805461094b9062010000900463ffffffff1660016137ca565b9050600060018161095c82856137f2565b63ffffffff16815260208101919091526040016000205461097d9043613817565b60008054919250906601000000000000900463ffffffff168210156109a35760006109c0565b6000546109c0906601000000000000900463ffffffff1683613817565b9050610a957f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663274982406040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a54919061382e565b610a5f600187613817565b838b8b604051610a70929190613847565b6040519081900390206000546a0100000000000000000000900463ffffffff166118d2565b610b075760405162461bcd60e51b815260206004820152603060248201527f536e617073686f74733a2056616c696461746f72206e6f7420656c656374656460448201527f20746f20646f20736e617073686f74210000000000000000000000000000000060648201526084016106fc565b600080610b498c8c8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509250611981915050565b915091507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e146372a6040518163ffffffff1660e01b8152600401608060405180830381865afa158015610bb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bdc9190613857565b604051602001610bec91906138fc565b6040516020818303038152906040528051906020012082604051602001610c1391906138fc565b6040516020818303038152906040528051906020012014610c9c5760405162461bcd60e51b815260206004820152602360248201527f536e617073686f74733a2057726f6e67206d6173746572207075626c6963206b60448201527f657921000000000000000000000000000000000000000000000000000000000060648201526084016106fc565b610cd58a8a604051610caf929190613847565b604080519182900382206020830152016040516020818303038152906040528284611b11565b610d475760405162461bcd60e51b815260206004820152602960248201527f536e617073686f74733a205369676e617475726520766572696669636174696f60448201527f6e206661696c656421000000000000000000000000000000000000000000000060648201526084016106fc565b6000610d888b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611cb792505050565b9050806020015163ffffffff166104008763ffffffff16610da99190613930565b14610e1c5760405162461bcd60e51b815260206004820152603060248201527f536e617073686f74733a20496e636f7272656374204d61646e6574206865696760448201527f687420666f7220736e617073686f74210000000000000000000000000000000060648201526084016106fc565b805163ffffffff167f000000000000000000000000000000000000000000000000000000000000000014610eb85760405162461bcd60e51b815260206004820152602a60248201527f536e617073686f74733a20496e636f727265637420636861696e494420666f7260448201527f20736e617073686f74210000000000000000000000000000000000000000000060648201526084016106fc565b6000600190507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631885570f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4d9190613754565b15610fd757600090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631e5975f46040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610fbe57600080fd5b505af1158015610fd2573d6000803e3d6000fd5b505050505b6040805160608082018352438252602080830186815283850188815263ffffffff808e166000908152600180865290889020875181559351805191850180549682015199820151841668010000000000000000027fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff9a8516640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000009098169390941692909217959095179790971617909555918101516002808401919091556080820151600384015560a0820151600484015560c09091015160058301559251919290916110cf91600684019190613343565b50506000805463ffffffff8a166201000081027fffffffffffffffffffffffffffffffffffffffffffffffffffff00000000ffff9092169190911790915560208401516040513393507f740c230bf3b8e6d0997cb207d19155e2721234d5690acf42dbc85615aedc362f91611181917f00000000000000000000000000000000000000000000000000000000000000009190879092835263ffffffff9190911660208301521515604082015260600190565b60405180910390a39d9c50505050505050505050505050565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461121f5760405162461bcd60e51b815260206004820181905260248201527f536e617073686f74733a204f6e6c7920666163746f727920616c6c6f7765642160448201526064016106fc565b600054610100900460ff1661123a5760005460ff161561123e565b303b155b6112b05760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016106fc565b600054610100900460ff161580156112ef57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b6000805463ffffffff8481166a0100000000000000000000027fffffffffffffffffffffffffffffffffffff00000000ffffffffffffffffffff918716660100000000000002919091167fffffffffffffffffffffffffffffffffffff0000000000000000ffffffffffff90921691909117179055600280547fffffffffffffffffffffffff0000000000000000000000000000000000000000163317905580156113bd57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b505050565b60025473ffffffffffffffffffffffffffffffffffffffff1633146114295760405162461bcd60e51b815260206004820152601e60248201527f536e617073686f74733a204f6e6c792061646d696e20616c6c6f77656421000060448201526064016106fc565b6000805463ffffffff9092166a0100000000000000000000027fffffffffffffffffffffffffffffffffffff00000000ffffffffffffffffffff909216919091179055565b60025473ffffffffffffffffffffffffffffffffffffffff1633146114d55760405162461bcd60e51b815260206004820152601e60248201527f536e617073686f74733a204f6e6c792061646d696e20616c6c6f77656421000060448201526064016106fc565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b611524613381565b60008281526001602081815260409283902083516060808201865282548252855160e0810187529483015463ffffffff808216875264010000000082048116878701526801000000000000000090910416858701526002808401549186019190915260038301546080860152600483015460a0860152600583015460c08601529281019390935283518085018086529394919391850192909160068501919082845b8154815260200190600101908083116115c6575050505050815250509050919050565b6040517fff0000000000000000000000000000000000000000000000000000000000000060208201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606083901b166021820152603581018390527f1c0bf703a3415cada9785e89e9d70314c3111ae7d8e04f33bb42eb1d264088be60558201526000906075016040516020818303038152906040528051906020012060001c90505b92915050565b61169b6133da565b6000805462010000900463ffffffff16815260016020526040908190208151808301928390529160069091019060029082845b8154815260200190600101908083116116ce575050505050905090565b60025473ffffffffffffffffffffffffffffffffffffffff1633146117525760405162461bcd60e51b815260206004820152601e60248201527f536e617073686f74733a204f6e6c792061646d696e20616c6c6f77656421000060448201526064016106fc565b6000805463ffffffff9092166601000000000000027fffffffffffffffffffffffffffffffffffffffffffff00000000ffffffffffff909216919091179055565b61179b613381565b6000805462010000900463ffffffff90811682526001602081815260409384902084516060808201875282548252865160e0810188529483015480871686526401000000008104871686860152680100000000000000009004909516848701526002808301549585019590955260038201546080850152600482015460a0850152600582015460c08501529182019290925283518085018086529194929392850192909160068501919082845b81548152602001906001019080831161184857505050505081525050905090565b6118716133da565b60008281526001602052604090819020815180830190925260060160028282826020028201915b8154815260200190600101908083116118985750505050509050919050565b60006118c686868686866118d2565b90505b95945050505050565b60006001815b85811080156118f157506118ed60038961399c565b8211155b1561191e57611900828561399c565b61190a90826139b0565b905081611916816139c8565b9250506118d8565b84600061192b8a83613a01565b905060008a61193a86846139b0565b6119449190613a01565b90508181111561196957818a1015801561195d5750808a105b955050505050506118c9565b818a10158061195d5750891094506118c99350505050565b6119896133f8565b6119916133da565b8261199d60c0826139b0565b11611a105760405162461bcd60e51b815260206004820152603a60248201527f52436c61696d735061727365724c6962726172793a204f766572666c6f77206f60448201527f6e2074686520646174614f666673657420706172616d6574657200000000000060648201526084016106fc565b611a1b60c0846139b0565b84511015611a915760405162461bcd60e51b815260206004820152602f60248201527f52436572745061727365724c6962726172793a204e6f7420656e6f756768206260448201527f7974657320746f2065787472616374000000000000000000000000000000000060648201526084016106fc565b611aa584611aa08560006139b0565b611d06565b8252611ab684611aa08560206139b0565b6020830152611aca84611aa08560406139b0565b6040830152611ade84611aa08560606139b0565b6060830152611af284611aa08560806139b0565b8152611b0384611aa08560a06139b0565b602082015290939092509050565b6000611b1b6133da565b611b2485611e36565b90506118c960405180610180016040528086600060028110611b4857611b48613a15565b6020020151815260200186600160028110611b6557611b65613a15565b602002015181526020017f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed81526020017f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec81526020017f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d815260200183600060028110611c1a57611c1a613a15565b6020020151815260200183600160028110611c3757611c37613a15565b6020020151815260200185600060048110611c5457611c54613a15565b6020020151815260200185600160048110611c7157611c71613a15565b6020020151815260200185600260048110611c8e57611c8e613a15565b6020020151815260200185600360048110611cab57611cab613a15565b6020020151905261205b565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915261168d826008611d018560046120ec565b6121ce565b600081611d1481601f6139b0565b11611dad5760405162461bcd60e51b815260206004820152604260248201527f426173655061727365724c6962726172793a20416e206f766572666c6f77206860448201527f617070656e6564207769746820746865206f666673657420706172616d65746560648201527f7221000000000000000000000000000000000000000000000000000000000000608482015260a4016106fc565b611db882601f6139b0565b835111611e2d5760405162461bcd60e51b815260206004820152603e60248201527f426173655061727365724c6962726172793a20547279696e6720746f2072656160448201527f6420616e206f6666736574206f7574206f6620626f756e64617269657321000060648201526084016106fc565b50016020015190565b611e3e6133da565b6000611e6b83827f010000000000000000000000000000000000000000000000000000000000000061257f565b90506000611eba847f02000000000000000000000000000000000000000000000000000000000000007f030000000000000000000000000000000000000000000000000000000000000061257f565b90506000611ec783612688565b90506000611ed483612688565b9050611f5a604051806080016040528084600060028110611ef757611ef7613a15565b6020020151815260200184600160028110611f1457611f14613a15565b6020020151815260200183600060028110611f3157611f31613a15565b6020020151815260200183600160028110611f4e57611f4e613a15565b60200201519052612bc2565b9450611f6585612c4b565b611fd75760405162461bcd60e51b815260206004820152602960248201527f496e76616c6964206861736820706f696e743a206e6f74206f6e20656c6c697060448201527f746963206375727665000000000000000000000000000000000000000000000060648201526084016106fc565b611fe085612caf565b6120525760405162461bcd60e51b815260206004820152602a60248201527f44616e6765726f7573206861736820706f696e743a206e6f742073616665206660448201527f6f72207369676e696e670000000000000000000000000000000000000000000060648201526084016106fc565b50505050919050565b6000612065613416565b60006020826101808660087ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa9050806120e15760405162461bcd60e51b815260206004820152601d60248201527f656c6c69707469632063757276652070616972696e67206661696c656400000060448201526064016106fc565b505160011492915050565b6000806120f98484612cdb565b905060008161ffff16118015612114575060028161ffff1611155b6121ac5760405162461bcd60e51b815260206004820152604a60248201527f42436c61696d735061727365724c6962726172793a205468652073697a65206f60448201527f662074686520646174612073656374696f6e2073686f756c642062652031206f60648201527f72203220776f7264732100000000000000000000000000000000000000000000608482015260a4016106fc565b8061ffff16600114156121c257600891506121c7565b600091505b5092915050565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c08101919091528261ffff831661221860b0836139b0565b6122229190613817565b116122bb5760405162461bcd60e51b815260206004820152604b60248201527f42436c61696d735061727365724c6962726172793a20496e76616c696420706160448201527f7273696e672e204f766572666c6f77206f6e2074686520646174614f6666736560648201527f7420706172616d65746572000000000000000000000000000000000000000000608482015260a4016106fc565b61ffff82166122cb60b0856139b0565b6122d59190613817565b845110156123715760405162461bcd60e51b815260206004820152604a60248201527f42436c61696d735061727365724c6962726172793a20496e76616c696420706160448201527f7273696e672e204e6f7420656e6f75676820627974657320746f20657874726160648201527f63742042436c61696d7300000000000000000000000000000000000000000000608482015260a4016106fc565b61ffff821661239e5761238e846123898560086139b0565b612e69565b63ffffffff1660408201526123a6565b600060408201525b6123b08484612e69565b63ffffffff168082526124515760405162461bcd60e51b815260206004820152604c60248201527f42436c61696d735061727365724c6962726172793a20496e76616c696420706160448201527f7273696e672e2054686520636861696e49642073686f756c642062652067726560648201527f61746572207468616e2030210000000000000000000000000000000000000000608482015260a4016106fc565b612460846123898560046139b0565b63ffffffff16602082018190526125055760405162461bcd60e51b815260206004820152604b60248201527f42436c61696d735061727365724c6962726172793a20496e76616c696420706160448201527f7273696e672e20546865206865696768742073686f756c64206265206772656160648201527f746572207468616e203021000000000000000000000000000000000000000000608482015260a4016106fc565b6125288461ffff84166125198660306139b0565b6125239190613817565b612fea565b60608201526125418461ffff84166125198660506139b0565b608082015261255a8461ffff84166125198660706139b0565b60a08201526125738461ffff84166125198660906139b0565b60c08201529392505050565b6000808385604051602001612595929190613a44565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815290829052805160209182012092506000916125df918691899101613a44565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052805160209091012090507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47817f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd477f0e0a77c19a07df2f666ea36f7879462c0a78eb28f5c70b3dd35d438dc58f0d9d8509089695505050505050565b6126906133da565b600080807f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4785860992507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476004840891507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47828409905061271081613112565b905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4783840990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4783820990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47848509935060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478577b3c4d79d41a91759a9e4c7e359b6b89eaec68e62effffffd0990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4783820990506127f58161315f565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd477759e26bcea0d48bacd4f263f1acdb5c4f5763473177fffffe8208905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476001830890506128678161315f565b905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47847f2042def740cbc01bd03583cf0100e593ba56470b9af68708d2c05d64905353850990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4785820990506128e08161315f565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760018208905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4784850990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4784820990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47600382089050600061298982613198565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4784850991507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4784830991507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476003830891506000612a0983613198565b905060006004612a1a600384613aae565b612a25600186613aae565b612a2f9190613b22565b612a399190613bde565b612a44906001613c46565b905060008160011415612a58575086612a6b565b8160021415612a68575085612a6b565b50845b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4781820994507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4781860994507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47600386089450612ae785613217565b94506000612af48f613264565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478187099550612b39604051806040016040528084815260200188815250612c4b565b612baa5760405162461bcd60e51b8152602060048201526024808201527f496e76616c696420706f696e743a206e6f74206f6e20656c6c6970746963206360448201527f757276650000000000000000000000000000000000000000000000000000000060648201526084016106fc565b508c5250505060208901525095979650505050505050565b612bca6133da565b600060408260808560067ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa905080612c455760405162461bcd60e51b815260206004820152601e60248201527f656c6c6970746963206375727665206164646974696f6e206661696c6564000060448201526064016106fc565b50919050565b80516000907f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47906003908290819080098551090860208301517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd479080091492915050565b80516000901580612cc1575081516001145b15612cce57506000919050565b506001919050565b919050565b600081612ce98160026139b0565b11612d825760405162461bcd60e51b815260206004820152605a60248201527f426173655061727365724c6962726172793a204572726f72206578747261637460448201527f696e672075696e31362120416e206f766572666c6f772068617070656e65642060648201527f7769746820746865206f666673657420706172616d6574657221000000000000608482015260a4016106fc565b612d8d8260026139b0565b83511015612e4f5760405162461bcd60e51b815260206004820152606860248201527f426173655061727365724c6962726172793a204572726f72206578747261637460448201527f696e672075696e31362120547279696e6720746f207265616420616e206f666660648201527f736574206f7574206f6620626f756e64617269657320696e207468652073726360848201527f2062696e6172792100000000000000000000000000000000000000000000000060a482015260c4016106fc565b5060209101015160e881901c61ff001660f89190911c1790565b600081612e778160046139b0565b11612f105760405162461bcd60e51b815260206004820152604260248201527f426173655061727365724c6962726172793a20416e206f766572666c6f77206860448201527f617070656e6564207769746820746865206f666673657420706172616d65746560648201527f7221000000000000000000000000000000000000000000000000000000000000608482015260a4016106fc565b612f1b8260046139b0565b83511015612fb75760405162461bcd60e51b815260206004820152605060248201527f426173655061727365724c6962726172793a20547279696e6720746f2072656160448201527f6420616e206f6666736574206f7574206f6620626f756e64617269657320696e60648201527f20746865207372632062696e6172792100000000000000000000000000000000608482015260a4016106fc565b50016020015160f881901c60e882901c61ff00161762ff000060d883901c161763ff00000060c89290921c919091161790565b600081612ff88160206139b0565b116130915760405162461bcd60e51b815260206004820152604260248201527f426173655061727365724c6962726172793a20416e206f766572666c6f77206860448201527f617070656e6564207769746820746865206f666673657420706172616d65746560648201527f7221000000000000000000000000000000000000000000000000000000000000608482015260a4016106fc565b61309c8260206139b0565b83511015611e2d5760405162461bcd60e51b815260206004820152602e60248201527f426173655061727365724c6962726172793a206e6f7420656e6f75676820627960448201527f74657320746f206578747261637400000000000000000000000000000000000060648201526084016106fc565b600061168d827f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd457f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476132b5565b60008161316e57506000919050565b61168d827f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47613817565b6000806131e6837f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea37f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476132b5565b9050801561320e5760016131fd8282166002613b22565b6132079190613aae565b9150612c45565b50600092915050565b600061168d827f0c19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476132b5565b60017f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea3821115612cd657507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd46919050565b60008060405160208152602080820152602060408201528560608201528460808201528360a082015260208160c08360055afa9051925090508061333b5760405162461bcd60e51b815260206004820152601d60248201527f6d6f64756c6172206578706f6e656e74696174696f6e2066616c69656400000060448201526064016106fc565b509392505050565b8260028101928215613371579160200282015b82811115613371578251825591602001919060010190613356565b5061337d929150613434565b5090565b60408051606080820183526000808352835160e08101855281815260208181018390529481018290529182018190526080820181905260a0820181905260c0820152909182019081526020016133d56133da565b905290565b60405180604001604052806002906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b5b8082111561337d5760008155600101613435565b60008083601f84011261345b57600080fd5b50813567ffffffffffffffff81111561347357600080fd5b60208301915083602082850101111561348b57600080fd5b9250929050565b600080600080604085870312156134a857600080fd5b843567ffffffffffffffff808211156134c057600080fd5b6134cc88838901613449565b909650945060208701359150808211156134e557600080fd5b506134f287828801613449565b95989497509550505050565b60006020828403121561351057600080fd5b5035919050565b803563ffffffff81168114612cd657600080fd5b6000806040838503121561353e57600080fd5b61354783613517565b915061355560208401613517565b90509250929050565b60006020828403121561357057600080fd5b61357982613517565b9392505050565b60e0810161168d828463ffffffff80825116835280602083015116602084015280604083015116604084015250606081015160608301526080810151608083015260a081015160a083015260c081015160c08301525050565b803573ffffffffffffffffffffffffffffffffffffffff81168114612cd657600080fd5b60006020828403121561360f57600080fd5b613579826135d9565b81518152602080830151610140830191906136808285018263ffffffff80825116835280602083015116602084015280604083015116604084015250606081015160608301526080810151608083015260a081015160a083015260c081015160c08301525050565b506040840151610100840160005b60028110156136ab5782518252918301919083019060010161368e565b5050505092915050565b600080604083850312156136c857600080fd5b82359150613555602084016135d9565b60408101818360005b60028110156137005781518352602092830192909101906001016136e1565b50505092915050565b600080600080600060a0868803121561372157600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b80518015158114612cd657600080fd5b60006020828403121561376657600080fd5b61357982613744565b6000806040838503121561378257600080fd5b61378b83613744565b9150602083015190509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600063ffffffff8083168185168083038211156137e9576137e961379b565b01949350505050565b600063ffffffff8381169083168181101561380f5761380f61379b565b039392505050565b6000828210156138295761382961379b565b500390565b60006020828403121561384057600080fd5b5051919050565b8183823760009101908152919050565b60006080828403121561386957600080fd5b82601f83011261387857600080fd5b6040516080810181811067ffffffffffffffff821117156138c2577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040528060808401858111156138d757600080fd5b845b818110156138f15780518352602092830192016138d9565b509195945050505050565b60008183825b6004811015613921578151835260209283019290910190600101613902565b50505060808201905092915050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156139685761396861379b565b500290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826139ab576139ab61396d565b500490565b600082198211156139c3576139c361379b565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156139fa576139fa61379b565b5060010190565b600082613a1057613a1061396d565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7fff00000000000000000000000000000000000000000000000000000000000000831681526000825160005b81811015613a8d5760208186018101516001868401015201613a70565b81811115613a9f576000600183860101525b50919091016001019392505050565b6000808312837f800000000000000000000000000000000000000000000000000000000000000001831281151615613ae857613ae861379b565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018313811615613b1c57613b1c61379b565b50500390565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600084136000841385830485118282161615613b6357613b6361379b565b7f80000000000000000000000000000000000000000000000000000000000000006000871286820588128184161615613b9e57613b9e61379b565b60008712925087820587128484161615613bba57613bba61379b565b87850587128184161615613bd057613bd061379b565b505050929093029392505050565b600082613bed57613bed61396d565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83147f800000000000000000000000000000000000000000000000000000000000000083141615613c4157613c4161379b565b500590565b6000808212827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03841381151615613c8057613c8061379b565b827f8000000000000000000000000000000000000000000000000000000000000000038412811615613cb457613cb461379b565b5050019056fea26469706673582212206ef707a2a608d2c2070e0bba0f56777a9b3f0cd8ac1309b50a264cca5f83667b64736f6c634300080c0033",
}

// SnapshotsABI is the input ABI used to generate the binding from.
// Deprecated: Use SnapshotsMetaData.ABI instead.
var SnapshotsABI = SnapshotsMetaData.ABI

// SnapshotsBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SnapshotsMetaData.Bin instead.
var SnapshotsBin = SnapshotsMetaData.Bin

// DeploySnapshots deploys a new Ethereum contract, binding an instance of Snapshots to it.
func DeploySnapshots(auth *bind.TransactOpts, backend bind.ContractBackend, chainID_ *big.Int) (common.Address, *types.Transaction, *Snapshots, error) {
	parsed, err := SnapshotsMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SnapshotsBin), backend, chainID_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Snapshots{SnapshotsCaller: SnapshotsCaller{contract: contract}, SnapshotsTransactor: SnapshotsTransactor{contract: contract}, SnapshotsFilterer: SnapshotsFilterer{contract: contract}}, nil
}

// Snapshots is an auto generated Go binding around an Ethereum contract.
type Snapshots struct {
	SnapshotsCaller     // Read-only binding to the contract
	SnapshotsTransactor // Write-only binding to the contract
	SnapshotsFilterer   // Log filterer for contract events
}

// SnapshotsCaller is an auto generated read-only Go binding around an Ethereum contract.
type SnapshotsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SnapshotsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SnapshotsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SnapshotsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SnapshotsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SnapshotsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SnapshotsSession struct {
	Contract     *Snapshots        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SnapshotsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SnapshotsCallerSession struct {
	Contract *SnapshotsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// SnapshotsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SnapshotsTransactorSession struct {
	Contract     *SnapshotsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// SnapshotsRaw is an auto generated low-level Go binding around an Ethereum contract.
type SnapshotsRaw struct {
	Contract *Snapshots // Generic contract binding to access the raw methods on
}

// SnapshotsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SnapshotsCallerRaw struct {
	Contract *SnapshotsCaller // Generic read-only contract binding to access the raw methods on
}

// SnapshotsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SnapshotsTransactorRaw struct {
	Contract *SnapshotsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSnapshots creates a new instance of Snapshots, bound to a specific deployed contract.
func NewSnapshots(address common.Address, backend bind.ContractBackend) (*Snapshots, error) {
	contract, err := bindSnapshots(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Snapshots{SnapshotsCaller: SnapshotsCaller{contract: contract}, SnapshotsTransactor: SnapshotsTransactor{contract: contract}, SnapshotsFilterer: SnapshotsFilterer{contract: contract}}, nil
}

// NewSnapshotsCaller creates a new read-only instance of Snapshots, bound to a specific deployed contract.
func NewSnapshotsCaller(address common.Address, caller bind.ContractCaller) (*SnapshotsCaller, error) {
	contract, err := bindSnapshots(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SnapshotsCaller{contract: contract}, nil
}

// NewSnapshotsTransactor creates a new write-only instance of Snapshots, bound to a specific deployed contract.
func NewSnapshotsTransactor(address common.Address, transactor bind.ContractTransactor) (*SnapshotsTransactor, error) {
	contract, err := bindSnapshots(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SnapshotsTransactor{contract: contract}, nil
}

// NewSnapshotsFilterer creates a new log filterer instance of Snapshots, bound to a specific deployed contract.
func NewSnapshotsFilterer(address common.Address, filterer bind.ContractFilterer) (*SnapshotsFilterer, error) {
	contract, err := bindSnapshots(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SnapshotsFilterer{contract: contract}, nil
}

// bindSnapshots binds a generic wrapper to an already deployed contract.
func bindSnapshots(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SnapshotsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Snapshots *SnapshotsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Snapshots.Contract.SnapshotsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Snapshots *SnapshotsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Snapshots.Contract.SnapshotsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Snapshots *SnapshotsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Snapshots.Contract.SnapshotsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Snapshots *SnapshotsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Snapshots.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Snapshots *SnapshotsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Snapshots.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Snapshots *SnapshotsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Snapshots.Contract.contract.Transact(opts, method, params...)
}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_Snapshots *SnapshotsCaller) GetAdmin(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "getAdmin")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_Snapshots *SnapshotsSession) GetAdmin() (common.Address, error) {
	return _Snapshots.Contract.GetAdmin(&_Snapshots.CallOpts)
}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_Snapshots *SnapshotsCallerSession) GetAdmin() (common.Address, error) {
	return _Snapshots.Contract.GetAdmin(&_Snapshots.CallOpts)
}

// GetBlockClaimsFromLatestSnapshot is a free data retrieval call binding the contract method 0xc2ea6603.
//
// Solidity: function getBlockClaimsFromLatestSnapshot() view returns((uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32))
func (_Snapshots *SnapshotsCaller) GetBlockClaimsFromLatestSnapshot(opts *bind.CallOpts) (BClaimsParserLibraryBClaims, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "getBlockClaimsFromLatestSnapshot")

	if err != nil {
		return *new(BClaimsParserLibraryBClaims), err
	}

	out0 := *abi.ConvertType(out[0], new(BClaimsParserLibraryBClaims)).(*BClaimsParserLibraryBClaims)

	return out0, err

}

// GetBlockClaimsFromLatestSnapshot is a free data retrieval call binding the contract method 0xc2ea6603.
//
// Solidity: function getBlockClaimsFromLatestSnapshot() view returns((uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32))
func (_Snapshots *SnapshotsSession) GetBlockClaimsFromLatestSnapshot() (BClaimsParserLibraryBClaims, error) {
	return _Snapshots.Contract.GetBlockClaimsFromLatestSnapshot(&_Snapshots.CallOpts)
}

// GetBlockClaimsFromLatestSnapshot is a free data retrieval call binding the contract method 0xc2ea6603.
//
// Solidity: function getBlockClaimsFromLatestSnapshot() view returns((uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32))
func (_Snapshots *SnapshotsCallerSession) GetBlockClaimsFromLatestSnapshot() (BClaimsParserLibraryBClaims, error) {
	return _Snapshots.Contract.GetBlockClaimsFromLatestSnapshot(&_Snapshots.CallOpts)
}

// GetBlockClaimsFromSnapshot is a free data retrieval call binding the contract method 0x45dfc599.
//
// Solidity: function getBlockClaimsFromSnapshot(uint256 epoch_) view returns((uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32))
func (_Snapshots *SnapshotsCaller) GetBlockClaimsFromSnapshot(opts *bind.CallOpts, epoch_ *big.Int) (BClaimsParserLibraryBClaims, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "getBlockClaimsFromSnapshot", epoch_)

	if err != nil {
		return *new(BClaimsParserLibraryBClaims), err
	}

	out0 := *abi.ConvertType(out[0], new(BClaimsParserLibraryBClaims)).(*BClaimsParserLibraryBClaims)

	return out0, err

}

// GetBlockClaimsFromSnapshot is a free data retrieval call binding the contract method 0x45dfc599.
//
// Solidity: function getBlockClaimsFromSnapshot(uint256 epoch_) view returns((uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32))
func (_Snapshots *SnapshotsSession) GetBlockClaimsFromSnapshot(epoch_ *big.Int) (BClaimsParserLibraryBClaims, error) {
	return _Snapshots.Contract.GetBlockClaimsFromSnapshot(&_Snapshots.CallOpts, epoch_)
}

// GetBlockClaimsFromSnapshot is a free data retrieval call binding the contract method 0x45dfc599.
//
// Solidity: function getBlockClaimsFromSnapshot(uint256 epoch_) view returns((uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32))
func (_Snapshots *SnapshotsCallerSession) GetBlockClaimsFromSnapshot(epoch_ *big.Int) (BClaimsParserLibraryBClaims, error) {
	return _Snapshots.Contract.GetBlockClaimsFromSnapshot(&_Snapshots.CallOpts, epoch_)
}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint256)
func (_Snapshots *SnapshotsCaller) GetChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "getChainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint256)
func (_Snapshots *SnapshotsSession) GetChainId() (*big.Int, error) {
	return _Snapshots.Contract.GetChainId(&_Snapshots.CallOpts)
}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint256)
func (_Snapshots *SnapshotsCallerSession) GetChainId() (*big.Int, error) {
	return _Snapshots.Contract.GetChainId(&_Snapshots.CallOpts)
}

// GetChainIdFromLatestSnapshot is a free data retrieval call binding the contract method 0xd9c11657.
//
// Solidity: function getChainIdFromLatestSnapshot() view returns(uint256)
func (_Snapshots *SnapshotsCaller) GetChainIdFromLatestSnapshot(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "getChainIdFromLatestSnapshot")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetChainIdFromLatestSnapshot is a free data retrieval call binding the contract method 0xd9c11657.
//
// Solidity: function getChainIdFromLatestSnapshot() view returns(uint256)
func (_Snapshots *SnapshotsSession) GetChainIdFromLatestSnapshot() (*big.Int, error) {
	return _Snapshots.Contract.GetChainIdFromLatestSnapshot(&_Snapshots.CallOpts)
}

// GetChainIdFromLatestSnapshot is a free data retrieval call binding the contract method 0xd9c11657.
//
// Solidity: function getChainIdFromLatestSnapshot() view returns(uint256)
func (_Snapshots *SnapshotsCallerSession) GetChainIdFromLatestSnapshot() (*big.Int, error) {
	return _Snapshots.Contract.GetChainIdFromLatestSnapshot(&_Snapshots.CallOpts)
}

// GetChainIdFromSnapshot is a free data retrieval call binding the contract method 0x19f74669.
//
// Solidity: function getChainIdFromSnapshot(uint256 epoch_) view returns(uint256)
func (_Snapshots *SnapshotsCaller) GetChainIdFromSnapshot(opts *bind.CallOpts, epoch_ *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "getChainIdFromSnapshot", epoch_)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetChainIdFromSnapshot is a free data retrieval call binding the contract method 0x19f74669.
//
// Solidity: function getChainIdFromSnapshot(uint256 epoch_) view returns(uint256)
func (_Snapshots *SnapshotsSession) GetChainIdFromSnapshot(epoch_ *big.Int) (*big.Int, error) {
	return _Snapshots.Contract.GetChainIdFromSnapshot(&_Snapshots.CallOpts, epoch_)
}

// GetChainIdFromSnapshot is a free data retrieval call binding the contract method 0x19f74669.
//
// Solidity: function getChainIdFromSnapshot(uint256 epoch_) view returns(uint256)
func (_Snapshots *SnapshotsCallerSession) GetChainIdFromSnapshot(epoch_ *big.Int) (*big.Int, error) {
	return _Snapshots.Contract.GetChainIdFromSnapshot(&_Snapshots.CallOpts, epoch_)
}

// GetCommittedHeightFromLatestSnapshot is a free data retrieval call binding the contract method 0x026c2b7e.
//
// Solidity: function getCommittedHeightFromLatestSnapshot() view returns(uint256)
func (_Snapshots *SnapshotsCaller) GetCommittedHeightFromLatestSnapshot(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "getCommittedHeightFromLatestSnapshot")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCommittedHeightFromLatestSnapshot is a free data retrieval call binding the contract method 0x026c2b7e.
//
// Solidity: function getCommittedHeightFromLatestSnapshot() view returns(uint256)
func (_Snapshots *SnapshotsSession) GetCommittedHeightFromLatestSnapshot() (*big.Int, error) {
	return _Snapshots.Contract.GetCommittedHeightFromLatestSnapshot(&_Snapshots.CallOpts)
}

// GetCommittedHeightFromLatestSnapshot is a free data retrieval call binding the contract method 0x026c2b7e.
//
// Solidity: function getCommittedHeightFromLatestSnapshot() view returns(uint256)
func (_Snapshots *SnapshotsCallerSession) GetCommittedHeightFromLatestSnapshot() (*big.Int, error) {
	return _Snapshots.Contract.GetCommittedHeightFromLatestSnapshot(&_Snapshots.CallOpts)
}

// GetCommittedHeightFromSnapshot is a free data retrieval call binding the contract method 0xe18c697a.
//
// Solidity: function getCommittedHeightFromSnapshot(uint256 epoch_) view returns(uint256)
func (_Snapshots *SnapshotsCaller) GetCommittedHeightFromSnapshot(opts *bind.CallOpts, epoch_ *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "getCommittedHeightFromSnapshot", epoch_)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCommittedHeightFromSnapshot is a free data retrieval call binding the contract method 0xe18c697a.
//
// Solidity: function getCommittedHeightFromSnapshot(uint256 epoch_) view returns(uint256)
func (_Snapshots *SnapshotsSession) GetCommittedHeightFromSnapshot(epoch_ *big.Int) (*big.Int, error) {
	return _Snapshots.Contract.GetCommittedHeightFromSnapshot(&_Snapshots.CallOpts, epoch_)
}

// GetCommittedHeightFromSnapshot is a free data retrieval call binding the contract method 0xe18c697a.
//
// Solidity: function getCommittedHeightFromSnapshot(uint256 epoch_) view returns(uint256)
func (_Snapshots *SnapshotsCallerSession) GetCommittedHeightFromSnapshot(epoch_ *big.Int) (*big.Int, error) {
	return _Snapshots.Contract.GetCommittedHeightFromSnapshot(&_Snapshots.CallOpts, epoch_)
}

// GetEpoch is a free data retrieval call binding the contract method 0x757991a8.
//
// Solidity: function getEpoch() view returns(uint256)
func (_Snapshots *SnapshotsCaller) GetEpoch(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "getEpoch")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetEpoch is a free data retrieval call binding the contract method 0x757991a8.
//
// Solidity: function getEpoch() view returns(uint256)
func (_Snapshots *SnapshotsSession) GetEpoch() (*big.Int, error) {
	return _Snapshots.Contract.GetEpoch(&_Snapshots.CallOpts)
}

// GetEpoch is a free data retrieval call binding the contract method 0x757991a8.
//
// Solidity: function getEpoch() view returns(uint256)
func (_Snapshots *SnapshotsCallerSession) GetEpoch() (*big.Int, error) {
	return _Snapshots.Contract.GetEpoch(&_Snapshots.CallOpts)
}

// GetEpochLength is a free data retrieval call binding the contract method 0xcfe8a73b.
//
// Solidity: function getEpochLength() pure returns(uint256)
func (_Snapshots *SnapshotsCaller) GetEpochLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "getEpochLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetEpochLength is a free data retrieval call binding the contract method 0xcfe8a73b.
//
// Solidity: function getEpochLength() pure returns(uint256)
func (_Snapshots *SnapshotsSession) GetEpochLength() (*big.Int, error) {
	return _Snapshots.Contract.GetEpochLength(&_Snapshots.CallOpts)
}

// GetEpochLength is a free data retrieval call binding the contract method 0xcfe8a73b.
//
// Solidity: function getEpochLength() pure returns(uint256)
func (_Snapshots *SnapshotsCallerSession) GetEpochLength() (*big.Int, error) {
	return _Snapshots.Contract.GetEpochLength(&_Snapshots.CallOpts)
}

// GetLatestSnapshot is a free data retrieval call binding the contract method 0xd518f243.
//
// Solidity: function getLatestSnapshot() view returns((uint256,(uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32),uint256[2]))
func (_Snapshots *SnapshotsCaller) GetLatestSnapshot(opts *bind.CallOpts) (Snapshot, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "getLatestSnapshot")

	if err != nil {
		return *new(Snapshot), err
	}

	out0 := *abi.ConvertType(out[0], new(Snapshot)).(*Snapshot)

	return out0, err

}

// GetLatestSnapshot is a free data retrieval call binding the contract method 0xd518f243.
//
// Solidity: function getLatestSnapshot() view returns((uint256,(uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32),uint256[2]))
func (_Snapshots *SnapshotsSession) GetLatestSnapshot() (Snapshot, error) {
	return _Snapshots.Contract.GetLatestSnapshot(&_Snapshots.CallOpts)
}

// GetLatestSnapshot is a free data retrieval call binding the contract method 0xd518f243.
//
// Solidity: function getLatestSnapshot() view returns((uint256,(uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32),uint256[2]))
func (_Snapshots *SnapshotsCallerSession) GetLatestSnapshot() (Snapshot, error) {
	return _Snapshots.Contract.GetLatestSnapshot(&_Snapshots.CallOpts)
}

// GetMadnetHeightFromLatestSnapshot is a free data retrieval call binding the contract method 0x9c262671.
//
// Solidity: function getMadnetHeightFromLatestSnapshot() view returns(uint256)
func (_Snapshots *SnapshotsCaller) GetMadnetHeightFromLatestSnapshot(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "getMadnetHeightFromLatestSnapshot")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMadnetHeightFromLatestSnapshot is a free data retrieval call binding the contract method 0x9c262671.
//
// Solidity: function getMadnetHeightFromLatestSnapshot() view returns(uint256)
func (_Snapshots *SnapshotsSession) GetMadnetHeightFromLatestSnapshot() (*big.Int, error) {
	return _Snapshots.Contract.GetMadnetHeightFromLatestSnapshot(&_Snapshots.CallOpts)
}

// GetMadnetHeightFromLatestSnapshot is a free data retrieval call binding the contract method 0x9c262671.
//
// Solidity: function getMadnetHeightFromLatestSnapshot() view returns(uint256)
func (_Snapshots *SnapshotsCallerSession) GetMadnetHeightFromLatestSnapshot() (*big.Int, error) {
	return _Snapshots.Contract.GetMadnetHeightFromLatestSnapshot(&_Snapshots.CallOpts)
}

// GetMadnetHeightFromSnapshot is a free data retrieval call binding the contract method 0xa8c07fc3.
//
// Solidity: function getMadnetHeightFromSnapshot(uint256 epoch_) view returns(uint256)
func (_Snapshots *SnapshotsCaller) GetMadnetHeightFromSnapshot(opts *bind.CallOpts, epoch_ *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "getMadnetHeightFromSnapshot", epoch_)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMadnetHeightFromSnapshot is a free data retrieval call binding the contract method 0xa8c07fc3.
//
// Solidity: function getMadnetHeightFromSnapshot(uint256 epoch_) view returns(uint256)
func (_Snapshots *SnapshotsSession) GetMadnetHeightFromSnapshot(epoch_ *big.Int) (*big.Int, error) {
	return _Snapshots.Contract.GetMadnetHeightFromSnapshot(&_Snapshots.CallOpts, epoch_)
}

// GetMadnetHeightFromSnapshot is a free data retrieval call binding the contract method 0xa8c07fc3.
//
// Solidity: function getMadnetHeightFromSnapshot(uint256 epoch_) view returns(uint256)
func (_Snapshots *SnapshotsCallerSession) GetMadnetHeightFromSnapshot(epoch_ *big.Int) (*big.Int, error) {
	return _Snapshots.Contract.GetMadnetHeightFromSnapshot(&_Snapshots.CallOpts, epoch_)
}

// GetMetamorphicContractAddress is a free data retrieval call binding the contract method 0x8653a465.
//
// Solidity: function getMetamorphicContractAddress(bytes32 _salt, address _factory) pure returns(address)
func (_Snapshots *SnapshotsCaller) GetMetamorphicContractAddress(opts *bind.CallOpts, _salt [32]byte, _factory common.Address) (common.Address, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "getMetamorphicContractAddress", _salt, _factory)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetMetamorphicContractAddress is a free data retrieval call binding the contract method 0x8653a465.
//
// Solidity: function getMetamorphicContractAddress(bytes32 _salt, address _factory) pure returns(address)
func (_Snapshots *SnapshotsSession) GetMetamorphicContractAddress(_salt [32]byte, _factory common.Address) (common.Address, error) {
	return _Snapshots.Contract.GetMetamorphicContractAddress(&_Snapshots.CallOpts, _salt, _factory)
}

// GetMetamorphicContractAddress is a free data retrieval call binding the contract method 0x8653a465.
//
// Solidity: function getMetamorphicContractAddress(bytes32 _salt, address _factory) pure returns(address)
func (_Snapshots *SnapshotsCallerSession) GetMetamorphicContractAddress(_salt [32]byte, _factory common.Address) (common.Address, error) {
	return _Snapshots.Contract.GetMetamorphicContractAddress(&_Snapshots.CallOpts, _salt, _factory)
}

// GetSignatureFromLatestSnapshot is a free data retrieval call binding the contract method 0xc0804ea9.
//
// Solidity: function getSignatureFromLatestSnapshot() view returns(uint256[2])
func (_Snapshots *SnapshotsCaller) GetSignatureFromLatestSnapshot(opts *bind.CallOpts) ([2]*big.Int, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "getSignatureFromLatestSnapshot")

	if err != nil {
		return *new([2]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([2]*big.Int)).(*[2]*big.Int)

	return out0, err

}

// GetSignatureFromLatestSnapshot is a free data retrieval call binding the contract method 0xc0804ea9.
//
// Solidity: function getSignatureFromLatestSnapshot() view returns(uint256[2])
func (_Snapshots *SnapshotsSession) GetSignatureFromLatestSnapshot() ([2]*big.Int, error) {
	return _Snapshots.Contract.GetSignatureFromLatestSnapshot(&_Snapshots.CallOpts)
}

// GetSignatureFromLatestSnapshot is a free data retrieval call binding the contract method 0xc0804ea9.
//
// Solidity: function getSignatureFromLatestSnapshot() view returns(uint256[2])
func (_Snapshots *SnapshotsCallerSession) GetSignatureFromLatestSnapshot() ([2]*big.Int, error) {
	return _Snapshots.Contract.GetSignatureFromLatestSnapshot(&_Snapshots.CallOpts)
}

// GetSignatureFromSnapshot is a free data retrieval call binding the contract method 0xdbe7eae7.
//
// Solidity: function getSignatureFromSnapshot(uint256 epoch_) view returns(uint256[2])
func (_Snapshots *SnapshotsCaller) GetSignatureFromSnapshot(opts *bind.CallOpts, epoch_ *big.Int) ([2]*big.Int, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "getSignatureFromSnapshot", epoch_)

	if err != nil {
		return *new([2]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([2]*big.Int)).(*[2]*big.Int)

	return out0, err

}

// GetSignatureFromSnapshot is a free data retrieval call binding the contract method 0xdbe7eae7.
//
// Solidity: function getSignatureFromSnapshot(uint256 epoch_) view returns(uint256[2])
func (_Snapshots *SnapshotsSession) GetSignatureFromSnapshot(epoch_ *big.Int) ([2]*big.Int, error) {
	return _Snapshots.Contract.GetSignatureFromSnapshot(&_Snapshots.CallOpts, epoch_)
}

// GetSignatureFromSnapshot is a free data retrieval call binding the contract method 0xdbe7eae7.
//
// Solidity: function getSignatureFromSnapshot(uint256 epoch_) view returns(uint256[2])
func (_Snapshots *SnapshotsCallerSession) GetSignatureFromSnapshot(epoch_ *big.Int) ([2]*big.Int, error) {
	return _Snapshots.Contract.GetSignatureFromSnapshot(&_Snapshots.CallOpts, epoch_)
}

// GetSnapshot is a free data retrieval call binding the contract method 0x76f10ad0.
//
// Solidity: function getSnapshot(uint256 epoch_) view returns((uint256,(uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32),uint256[2]))
func (_Snapshots *SnapshotsCaller) GetSnapshot(opts *bind.CallOpts, epoch_ *big.Int) (Snapshot, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "getSnapshot", epoch_)

	if err != nil {
		return *new(Snapshot), err
	}

	out0 := *abi.ConvertType(out[0], new(Snapshot)).(*Snapshot)

	return out0, err

}

// GetSnapshot is a free data retrieval call binding the contract method 0x76f10ad0.
//
// Solidity: function getSnapshot(uint256 epoch_) view returns((uint256,(uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32),uint256[2]))
func (_Snapshots *SnapshotsSession) GetSnapshot(epoch_ *big.Int) (Snapshot, error) {
	return _Snapshots.Contract.GetSnapshot(&_Snapshots.CallOpts, epoch_)
}

// GetSnapshot is a free data retrieval call binding the contract method 0x76f10ad0.
//
// Solidity: function getSnapshot(uint256 epoch_) view returns((uint256,(uint32,uint32,uint32,bytes32,bytes32,bytes32,bytes32),uint256[2]))
func (_Snapshots *SnapshotsCallerSession) GetSnapshot(epoch_ *big.Int) (Snapshot, error) {
	return _Snapshots.Contract.GetSnapshot(&_Snapshots.CallOpts, epoch_)
}

// GetSnapshotDesperationDelay is a free data retrieval call binding the contract method 0xd17fcc56.
//
// Solidity: function getSnapshotDesperationDelay() view returns(uint256)
func (_Snapshots *SnapshotsCaller) GetSnapshotDesperationDelay(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "getSnapshotDesperationDelay")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetSnapshotDesperationDelay is a free data retrieval call binding the contract method 0xd17fcc56.
//
// Solidity: function getSnapshotDesperationDelay() view returns(uint256)
func (_Snapshots *SnapshotsSession) GetSnapshotDesperationDelay() (*big.Int, error) {
	return _Snapshots.Contract.GetSnapshotDesperationDelay(&_Snapshots.CallOpts)
}

// GetSnapshotDesperationDelay is a free data retrieval call binding the contract method 0xd17fcc56.
//
// Solidity: function getSnapshotDesperationDelay() view returns(uint256)
func (_Snapshots *SnapshotsCallerSession) GetSnapshotDesperationDelay() (*big.Int, error) {
	return _Snapshots.Contract.GetSnapshotDesperationDelay(&_Snapshots.CallOpts)
}

// GetSnapshotDesperationFactor is a free data retrieval call binding the contract method 0x7cc4cce6.
//
// Solidity: function getSnapshotDesperationFactor() view returns(uint256)
func (_Snapshots *SnapshotsCaller) GetSnapshotDesperationFactor(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "getSnapshotDesperationFactor")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetSnapshotDesperationFactor is a free data retrieval call binding the contract method 0x7cc4cce6.
//
// Solidity: function getSnapshotDesperationFactor() view returns(uint256)
func (_Snapshots *SnapshotsSession) GetSnapshotDesperationFactor() (*big.Int, error) {
	return _Snapshots.Contract.GetSnapshotDesperationFactor(&_Snapshots.CallOpts)
}

// GetSnapshotDesperationFactor is a free data retrieval call binding the contract method 0x7cc4cce6.
//
// Solidity: function getSnapshotDesperationFactor() view returns(uint256)
func (_Snapshots *SnapshotsCallerSession) GetSnapshotDesperationFactor() (*big.Int, error) {
	return _Snapshots.Contract.GetSnapshotDesperationFactor(&_Snapshots.CallOpts)
}

// MayValidatorSnapshot is a free data retrieval call binding the contract method 0xf45fa246.
//
// Solidity: function mayValidatorSnapshot(uint256 numValidators, uint256 myIdx, uint256 blocksSinceDesperation, bytes32 blsig, uint256 desperationFactor) pure returns(bool)
func (_Snapshots *SnapshotsCaller) MayValidatorSnapshot(opts *bind.CallOpts, numValidators *big.Int, myIdx *big.Int, blocksSinceDesperation *big.Int, blsig [32]byte, desperationFactor *big.Int) (bool, error) {
	var out []interface{}
	err := _Snapshots.contract.Call(opts, &out, "mayValidatorSnapshot", numValidators, myIdx, blocksSinceDesperation, blsig, desperationFactor)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// MayValidatorSnapshot is a free data retrieval call binding the contract method 0xf45fa246.
//
// Solidity: function mayValidatorSnapshot(uint256 numValidators, uint256 myIdx, uint256 blocksSinceDesperation, bytes32 blsig, uint256 desperationFactor) pure returns(bool)
func (_Snapshots *SnapshotsSession) MayValidatorSnapshot(numValidators *big.Int, myIdx *big.Int, blocksSinceDesperation *big.Int, blsig [32]byte, desperationFactor *big.Int) (bool, error) {
	return _Snapshots.Contract.MayValidatorSnapshot(&_Snapshots.CallOpts, numValidators, myIdx, blocksSinceDesperation, blsig, desperationFactor)
}

// MayValidatorSnapshot is a free data retrieval call binding the contract method 0xf45fa246.
//
// Solidity: function mayValidatorSnapshot(uint256 numValidators, uint256 myIdx, uint256 blocksSinceDesperation, bytes32 blsig, uint256 desperationFactor) pure returns(bool)
func (_Snapshots *SnapshotsCallerSession) MayValidatorSnapshot(numValidators *big.Int, myIdx *big.Int, blocksSinceDesperation *big.Int, blsig [32]byte, desperationFactor *big.Int) (bool, error) {
	return _Snapshots.Contract.MayValidatorSnapshot(&_Snapshots.CallOpts, numValidators, myIdx, blocksSinceDesperation, blsig, desperationFactor)
}

// Initialize is a paid mutator transaction binding the contract method 0x3ecc0f5e.
//
// Solidity: function initialize(uint32 desperationDelay_, uint32 desperationFactor_) returns()
func (_Snapshots *SnapshotsTransactor) Initialize(opts *bind.TransactOpts, desperationDelay_ uint32, desperationFactor_ uint32) (*types.Transaction, error) {
	return _Snapshots.contract.Transact(opts, "initialize", desperationDelay_, desperationFactor_)
}

// Initialize is a paid mutator transaction binding the contract method 0x3ecc0f5e.
//
// Solidity: function initialize(uint32 desperationDelay_, uint32 desperationFactor_) returns()
func (_Snapshots *SnapshotsSession) Initialize(desperationDelay_ uint32, desperationFactor_ uint32) (*types.Transaction, error) {
	return _Snapshots.Contract.Initialize(&_Snapshots.TransactOpts, desperationDelay_, desperationFactor_)
}

// Initialize is a paid mutator transaction binding the contract method 0x3ecc0f5e.
//
// Solidity: function initialize(uint32 desperationDelay_, uint32 desperationFactor_) returns()
func (_Snapshots *SnapshotsTransactorSession) Initialize(desperationDelay_ uint32, desperationFactor_ uint32) (*types.Transaction, error) {
	return _Snapshots.Contract.Initialize(&_Snapshots.TransactOpts, desperationDelay_, desperationFactor_)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_Snapshots *SnapshotsTransactor) SetAdmin(opts *bind.TransactOpts, admin_ common.Address) (*types.Transaction, error) {
	return _Snapshots.contract.Transact(opts, "setAdmin", admin_)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_Snapshots *SnapshotsSession) SetAdmin(admin_ common.Address) (*types.Transaction, error) {
	return _Snapshots.Contract.SetAdmin(&_Snapshots.TransactOpts, admin_)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_Snapshots *SnapshotsTransactorSession) SetAdmin(admin_ common.Address) (*types.Transaction, error) {
	return _Snapshots.Contract.SetAdmin(&_Snapshots.TransactOpts, admin_)
}

// SetSnapshotDesperationDelay is a paid mutator transaction binding the contract method 0xc2e8fef2.
//
// Solidity: function setSnapshotDesperationDelay(uint32 desperationDelay_) returns()
func (_Snapshots *SnapshotsTransactor) SetSnapshotDesperationDelay(opts *bind.TransactOpts, desperationDelay_ uint32) (*types.Transaction, error) {
	return _Snapshots.contract.Transact(opts, "setSnapshotDesperationDelay", desperationDelay_)
}

// SetSnapshotDesperationDelay is a paid mutator transaction binding the contract method 0xc2e8fef2.
//
// Solidity: function setSnapshotDesperationDelay(uint32 desperationDelay_) returns()
func (_Snapshots *SnapshotsSession) SetSnapshotDesperationDelay(desperationDelay_ uint32) (*types.Transaction, error) {
	return _Snapshots.Contract.SetSnapshotDesperationDelay(&_Snapshots.TransactOpts, desperationDelay_)
}

// SetSnapshotDesperationDelay is a paid mutator transaction binding the contract method 0xc2e8fef2.
//
// Solidity: function setSnapshotDesperationDelay(uint32 desperationDelay_) returns()
func (_Snapshots *SnapshotsTransactorSession) SetSnapshotDesperationDelay(desperationDelay_ uint32) (*types.Transaction, error) {
	return _Snapshots.Contract.SetSnapshotDesperationDelay(&_Snapshots.TransactOpts, desperationDelay_)
}

// SetSnapshotDesperationFactor is a paid mutator transaction binding the contract method 0x3fa7a1ad.
//
// Solidity: function setSnapshotDesperationFactor(uint32 desperationFactor_) returns()
func (_Snapshots *SnapshotsTransactor) SetSnapshotDesperationFactor(opts *bind.TransactOpts, desperationFactor_ uint32) (*types.Transaction, error) {
	return _Snapshots.contract.Transact(opts, "setSnapshotDesperationFactor", desperationFactor_)
}

// SetSnapshotDesperationFactor is a paid mutator transaction binding the contract method 0x3fa7a1ad.
//
// Solidity: function setSnapshotDesperationFactor(uint32 desperationFactor_) returns()
func (_Snapshots *SnapshotsSession) SetSnapshotDesperationFactor(desperationFactor_ uint32) (*types.Transaction, error) {
	return _Snapshots.Contract.SetSnapshotDesperationFactor(&_Snapshots.TransactOpts, desperationFactor_)
}

// SetSnapshotDesperationFactor is a paid mutator transaction binding the contract method 0x3fa7a1ad.
//
// Solidity: function setSnapshotDesperationFactor(uint32 desperationFactor_) returns()
func (_Snapshots *SnapshotsTransactorSession) SetSnapshotDesperationFactor(desperationFactor_ uint32) (*types.Transaction, error) {
	return _Snapshots.Contract.SetSnapshotDesperationFactor(&_Snapshots.TransactOpts, desperationFactor_)
}

// Snapshot is a paid mutator transaction binding the contract method 0x08ca1f25.
//
// Solidity: function snapshot(bytes groupSignature_, bytes bClaims_) returns(bool)
func (_Snapshots *SnapshotsTransactor) Snapshot(opts *bind.TransactOpts, groupSignature_ []byte, bClaims_ []byte) (*types.Transaction, error) {
	return _Snapshots.contract.Transact(opts, "snapshot", groupSignature_, bClaims_)
}

// Snapshot is a paid mutator transaction binding the contract method 0x08ca1f25.
//
// Solidity: function snapshot(bytes groupSignature_, bytes bClaims_) returns(bool)
func (_Snapshots *SnapshotsSession) Snapshot(groupSignature_ []byte, bClaims_ []byte) (*types.Transaction, error) {
	return _Snapshots.Contract.Snapshot(&_Snapshots.TransactOpts, groupSignature_, bClaims_)
}

// Snapshot is a paid mutator transaction binding the contract method 0x08ca1f25.
//
// Solidity: function snapshot(bytes groupSignature_, bytes bClaims_) returns(bool)
func (_Snapshots *SnapshotsTransactorSession) Snapshot(groupSignature_ []byte, bClaims_ []byte) (*types.Transaction, error) {
	return _Snapshots.Contract.Snapshot(&_Snapshots.TransactOpts, groupSignature_, bClaims_)
}

// SnapshotsSnapshotTakenIterator is returned from FilterSnapshotTaken and is used to iterate over the raw logs and unpacked data for SnapshotTaken events raised by the Snapshots contract.
type SnapshotsSnapshotTakenIterator struct {
	Event *SnapshotsSnapshotTaken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SnapshotsSnapshotTakenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SnapshotsSnapshotTaken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SnapshotsSnapshotTaken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SnapshotsSnapshotTakenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SnapshotsSnapshotTakenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SnapshotsSnapshotTaken represents a SnapshotTaken event raised by the Snapshots contract.
type SnapshotsSnapshotTaken struct {
	ChainId                  *big.Int
	Epoch                    *big.Int
	Height                   *big.Int
	Validator                common.Address
	IsSafeToProceedConsensus bool
	Raw                      types.Log // Blockchain specific contextual infos
}

// FilterSnapshotTaken is a free log retrieval operation binding the contract event 0x740c230bf3b8e6d0997cb207d19155e2721234d5690acf42dbc85615aedc362f.
//
// Solidity: event SnapshotTaken(uint256 chainId, uint256 indexed epoch, uint256 height, address indexed validator, bool isSafeToProceedConsensus)
func (_Snapshots *SnapshotsFilterer) FilterSnapshotTaken(opts *bind.FilterOpts, epoch []*big.Int, validator []common.Address) (*SnapshotsSnapshotTakenIterator, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Snapshots.contract.FilterLogs(opts, "SnapshotTaken", epochRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return &SnapshotsSnapshotTakenIterator{contract: _Snapshots.contract, event: "SnapshotTaken", logs: logs, sub: sub}, nil
}

// WatchSnapshotTaken is a free log subscription operation binding the contract event 0x740c230bf3b8e6d0997cb207d19155e2721234d5690acf42dbc85615aedc362f.
//
// Solidity: event SnapshotTaken(uint256 chainId, uint256 indexed epoch, uint256 height, address indexed validator, bool isSafeToProceedConsensus)
func (_Snapshots *SnapshotsFilterer) WatchSnapshotTaken(opts *bind.WatchOpts, sink chan<- *SnapshotsSnapshotTaken, epoch []*big.Int, validator []common.Address) (event.Subscription, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Snapshots.contract.WatchLogs(opts, "SnapshotTaken", epochRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SnapshotsSnapshotTaken)
				if err := _Snapshots.contract.UnpackLog(event, "SnapshotTaken", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSnapshotTaken is a log parse operation binding the contract event 0x740c230bf3b8e6d0997cb207d19155e2721234d5690acf42dbc85615aedc362f.
//
// Solidity: event SnapshotTaken(uint256 chainId, uint256 indexed epoch, uint256 height, address indexed validator, bool isSafeToProceedConsensus)
func (_Snapshots *SnapshotsFilterer) ParseSnapshotTaken(log types.Log) (*SnapshotsSnapshotTaken, error) {
	event := new(SnapshotsSnapshotTaken)
	if err := _Snapshots.contract.UnpackLog(event, "SnapshotTaken", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SnapshotsStorageMetaData contains all meta data concerning the SnapshotsStorage contract.
var SnapshotsStorageMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"getMetamorphicContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
}

// SnapshotsStorageABI is the input ABI used to generate the binding from.
// Deprecated: Use SnapshotsStorageMetaData.ABI instead.
var SnapshotsStorageABI = SnapshotsStorageMetaData.ABI

// SnapshotsStorage is an auto generated Go binding around an Ethereum contract.
type SnapshotsStorage struct {
	SnapshotsStorageCaller     // Read-only binding to the contract
	SnapshotsStorageTransactor // Write-only binding to the contract
	SnapshotsStorageFilterer   // Log filterer for contract events
}

// SnapshotsStorageCaller is an auto generated read-only Go binding around an Ethereum contract.
type SnapshotsStorageCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SnapshotsStorageTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SnapshotsStorageTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SnapshotsStorageFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SnapshotsStorageFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SnapshotsStorageSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SnapshotsStorageSession struct {
	Contract     *SnapshotsStorage // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SnapshotsStorageCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SnapshotsStorageCallerSession struct {
	Contract *SnapshotsStorageCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// SnapshotsStorageTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SnapshotsStorageTransactorSession struct {
	Contract     *SnapshotsStorageTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// SnapshotsStorageRaw is an auto generated low-level Go binding around an Ethereum contract.
type SnapshotsStorageRaw struct {
	Contract *SnapshotsStorage // Generic contract binding to access the raw methods on
}

// SnapshotsStorageCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SnapshotsStorageCallerRaw struct {
	Contract *SnapshotsStorageCaller // Generic read-only contract binding to access the raw methods on
}

// SnapshotsStorageTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SnapshotsStorageTransactorRaw struct {
	Contract *SnapshotsStorageTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSnapshotsStorage creates a new instance of SnapshotsStorage, bound to a specific deployed contract.
func NewSnapshotsStorage(address common.Address, backend bind.ContractBackend) (*SnapshotsStorage, error) {
	contract, err := bindSnapshotsStorage(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SnapshotsStorage{SnapshotsStorageCaller: SnapshotsStorageCaller{contract: contract}, SnapshotsStorageTransactor: SnapshotsStorageTransactor{contract: contract}, SnapshotsStorageFilterer: SnapshotsStorageFilterer{contract: contract}}, nil
}

// NewSnapshotsStorageCaller creates a new read-only instance of SnapshotsStorage, bound to a specific deployed contract.
func NewSnapshotsStorageCaller(address common.Address, caller bind.ContractCaller) (*SnapshotsStorageCaller, error) {
	contract, err := bindSnapshotsStorage(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SnapshotsStorageCaller{contract: contract}, nil
}

// NewSnapshotsStorageTransactor creates a new write-only instance of SnapshotsStorage, bound to a specific deployed contract.
func NewSnapshotsStorageTransactor(address common.Address, transactor bind.ContractTransactor) (*SnapshotsStorageTransactor, error) {
	contract, err := bindSnapshotsStorage(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SnapshotsStorageTransactor{contract: contract}, nil
}

// NewSnapshotsStorageFilterer creates a new log filterer instance of SnapshotsStorage, bound to a specific deployed contract.
func NewSnapshotsStorageFilterer(address common.Address, filterer bind.ContractFilterer) (*SnapshotsStorageFilterer, error) {
	contract, err := bindSnapshotsStorage(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SnapshotsStorageFilterer{contract: contract}, nil
}

// bindSnapshotsStorage binds a generic wrapper to an already deployed contract.
func bindSnapshotsStorage(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SnapshotsStorageABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SnapshotsStorage *SnapshotsStorageRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SnapshotsStorage.Contract.SnapshotsStorageCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SnapshotsStorage *SnapshotsStorageRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SnapshotsStorage.Contract.SnapshotsStorageTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SnapshotsStorage *SnapshotsStorageRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SnapshotsStorage.Contract.SnapshotsStorageTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SnapshotsStorage *SnapshotsStorageCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SnapshotsStorage.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SnapshotsStorage *SnapshotsStorageTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SnapshotsStorage.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SnapshotsStorage *SnapshotsStorageTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SnapshotsStorage.Contract.contract.Transact(opts, method, params...)
}

// GetMetamorphicContractAddress is a free data retrieval call binding the contract method 0x8653a465.
//
// Solidity: function getMetamorphicContractAddress(bytes32 _salt, address _factory) pure returns(address)
func (_SnapshotsStorage *SnapshotsStorageCaller) GetMetamorphicContractAddress(opts *bind.CallOpts, _salt [32]byte, _factory common.Address) (common.Address, error) {
	var out []interface{}
	err := _SnapshotsStorage.contract.Call(opts, &out, "getMetamorphicContractAddress", _salt, _factory)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetMetamorphicContractAddress is a free data retrieval call binding the contract method 0x8653a465.
//
// Solidity: function getMetamorphicContractAddress(bytes32 _salt, address _factory) pure returns(address)
func (_SnapshotsStorage *SnapshotsStorageSession) GetMetamorphicContractAddress(_salt [32]byte, _factory common.Address) (common.Address, error) {
	return _SnapshotsStorage.Contract.GetMetamorphicContractAddress(&_SnapshotsStorage.CallOpts, _salt, _factory)
}

// GetMetamorphicContractAddress is a free data retrieval call binding the contract method 0x8653a465.
//
// Solidity: function getMetamorphicContractAddress(bytes32 _salt, address _factory) pure returns(address)
func (_SnapshotsStorage *SnapshotsStorageCallerSession) GetMetamorphicContractAddress(_salt [32]byte, _factory common.Address) (common.Address, error) {
	return _SnapshotsStorage.Contract.GetMetamorphicContractAddress(&_SnapshotsStorage.CallOpts, _salt, _factory)
}

// StakeNFTMetaData contains all meta data concerning the StakeNFT contract.
var StakeNFTMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payoutEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoutMadToken\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"burnTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payoutEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoutMadToken\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circuitBreakerState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"collectEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"collectEthTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"collectToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"collectTokenTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"magic_\",\"type\":\"uint8\"}],\"name\":\"depositEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"magic_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"estimateEthCollection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateExcessEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"excess\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateExcessToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"excess\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"estimateTokenCollection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccumulatorScaleFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthAccumulator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accumulator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slush\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"getMetamorphicContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freeAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawFreeAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumulatorEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumulatorToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenAccumulator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accumulator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slush\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalReserveEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalReserveMadToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isAllowedProposal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration_\",\"type\":\"uint256\"}],\"name\":\"lockOwnPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration_\",\"type\":\"uint256\"}],\"name\":\"lockPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration_\",\"type\":\"uint256\"}],\"name\":\"lockWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration_\",\"type\":\"uint256\"}],\"name\":\"mintTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"}],\"name\":\"skimExcessEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"excess\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"}],\"name\":\"skimExcessToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"excess\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tripCB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60e06040523480156200001157600080fd5b503360a0819052609780546001600160a01b03191682179055604080516001600160f81b031960208083019190915260609390931b6001600160601b03191660218201526726b0b22a37b5b2b760c11b60358201526000805160206200574283398151915260558083019190915282518083039091018152607590910190915280519101206001600160a01b031660c05260a051604080516001600160f81b031960208083019190915260609390931b6001600160601b031916602182015269476f7665726e616e636560b01b60358201526000805160206200574283398151915260558083019190915282518083039091018152607590910190915280519101206001600160a01b031660805260805160a05160c0516155c56200017d60003960008181611ce501528181611fa2015281816129fb0152818161395701528181613b930152613f6a0152600050506000818161047d01528181610e310152613ab801526155c56000f3fe6080604052600436106103085760003560e01c80638191f5e51161019a578063a22cb465116100e1578063d5002f2e1161008a578063e985e9c511610064578063e985e9c51461094a578063ea785a5e146109a0578063eb02c301146109c057600080fd5b8063d5002f2e146108f5578063e35c3e281461090a578063e42a673c1461092a57600080fd5b8063be444379116100bb578063be4443791461089d578063c47c6e14146108bd578063c87b56dd146108d557600080fd5b8063a22cb46514610848578063adfdc03f14610868578063b88d4fde1461087d57600080fd5b806395d89b411161014357806399a89ecc1161011d57806399a89ecc146108005780639aeac65914610813578063a0712d681461082857600080fd5b806395d89b41146107b0578063971b505b146107c557806399785132146107e557600080fd5b806389465c621161017457806389465c6214610763578063905953ed1461077b57806393c5748d1461079057600080fd5b80638191f5e5146106435780638653a465146106635780638853b9501461074357600080fd5b80632baf2acb1161025e5780636352211e1161020757806370a08231116101e157806370a08231146105ee5780637aa507fb1461060e5780638129fc1c1461062e57600080fd5b80636352211e146105835780636e9960c3146105a3578063704b6c02146105ce57600080fd5b806342842e0e1161023857806342842e0e1461051657806342966c6814610536578063548652d21461056b57600080fd5b80632baf2acb146104c15780633771165e146104e15780633eed3eff1461050157600080fd5b80630e4eb15b116102c057806323b872dd1161029a57806323b872dd1461044e578063289b3c0d1461046e5780632a0d8bd1146104a157600080fd5b80630e4eb15b146103f957806319b8be2f1461041957806320ea0d481461042e57600080fd5b8063081812fc116102f1578063081812fc14610364578063095ea7b3146103a95780630cc65dfb146103cb57600080fd5b806301ffc9a71461030d57806306fdde0314610342575b600080fd5b34801561031957600080fd5b5061032d610328366004614f19565b610a08565b60405190151581526020015b60405180910390f35b34801561034e57600080fd5b50610357610aed565b6040516103399190614fac565b34801561037057600080fd5b5061038461037f366004614fbf565b610b7f565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610339565b3480156103b557600080fd5b506103c96103c4366004614ffa565b610c44565b005b3480156103d757600080fd5b506103eb6103e6366004615026565b610d9d565b604051908152602001610339565b34801561040557600080fd5b506103eb61041436600461505b565b611031565b34801561042557600080fd5b5060a0546103eb565b34801561043a57600080fd5b506103eb610449366004614fbf565b6111ff565b34801561045a57600080fd5b506103c961046936600461507d565b611351565b34801561047a57600080fd5b507f0000000000000000000000000000000000000000000000000000000000000000610384565b3480156104ad57600080fd5b506103eb6104bc366004614fbf565b6113d8565b3480156104cd57600080fd5b506103eb6104dc366004615026565b61162e565b3480156104ed57600080fd5b5061032d6104fc3660046150be565b61176d565b34801561050d57600080fd5b506103eb611778565b34801561052257600080fd5b506103c961053136600461507d565b611782565b34801561054257600080fd5b50610556610551366004614fbf565b61179d565b60408051928352602083019190915201610339565b34801561057757600080fd5b50609d54609e54610556565b34801561058f57600080fd5b5061038461059e366004614fbf565b6117b4565b3480156105af57600080fd5b5060975473ffffffffffffffffffffffffffffffffffffffff16610384565b3480156105da57600080fd5b506103c96105e93660046150be565b61184c565b3480156105fa57600080fd5b506103eb6106093660046150be565b6118f9565b34801561061a57600080fd5b506103eb6106293660046150be565b6119ad565b34801561063a57600080fd5b506103c9611a37565b34801561064f57600080fd5b506103c961065e3660046150ec565b611c13565b34801561066f57600080fd5b5061038461067e366004615108565b6040517fff0000000000000000000000000000000000000000000000000000000000000060208201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606083901b166021820152603581018390527f1c0bf703a3415cada9785e89e9d70314c3111ae7d8e04f33bb42eb1d264088be6055820152600090607501604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101209392505050565b34801561074f57600080fd5b506103eb61075e366004614ffa565b611d5c565b34801561076f57600080fd5b5060995460ff1661032d565b34801561078757600080fd5b506103eb611fd0565b34801561079c57600080fd5b506103eb6107ab366004614fbf565b611fdf565b3480156107bc57600080fd5b50610357612126565b3480156107d157600080fd5b506103eb6107e03660046150be565b612135565b3480156107f157600080fd5b50670de0b6b3a76400006103eb565b6103c961080e366004615138565b6121b3565b34801561081f57600080fd5b5060a1546103eb565b34801561083457600080fd5b506103eb610843366004614fbf565b6122d0565b34801561085457600080fd5b506103c9610863366004615161565b612356565b34801561087457600080fd5b506103c9612365565b34801561088957600080fd5b506103c96108983660046151be565b6123d6565b3480156108a957600080fd5b506103eb6108b8366004614ffa565b612464565b3480156108c957600080fd5b50609b54609c54610556565b3480156108e157600080fd5b506103576108f0366004614fbf565b6126b3565b34801561090157600080fd5b50609a546103eb565b34801561091657600080fd5b506103eb610925366004614fbf565b6127b5565b34801561093657600080fd5b506103eb61094536600461505b565b612a21565b34801561095657600080fd5b5061032d6109653660046152bc565b73ffffffffffffffffffffffffffffffffffffffff9182166000908152606a6020908152604080832093909416825291909152205460ff1690565b3480156109ac57600080fd5b506105566109bb366004614ffa565b612bef565b3480156109cc57600080fd5b506109e06109db366004614fbf565b612c08565b604080519586526020860194909452928401919091526060830152608082015260a001610339565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd000000000000000000000000000000000000000000000000000000001480610a9b57507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b80610ae757507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b606060658054610afc906152ea565b80601f0160208091040260200160405190810160405280929190818152602001828054610b28906152ea565b8015610b755780601f10610b4a57610100808354040283529160200191610b75565b820191906000526020600020905b815481529060010190602001808311610b5857829003601f168201915b5050505050905090565b60008181526067602052604081205473ffffffffffffffffffffffffffffffffffffffff16610c1b5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5060009081526069602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b6000610c4f826117b4565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610cf35760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610c12565b3373ffffffffffffffffffffffffffffffffffffffff82161480610d1c5750610d1c8133610965565b610d8e5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610c12565b610d988383612d4b565b505050565b60995460009060ff1615610e195760405162461bcd60e51b815260206004820152602e60248201527f43697263756974427265616b65723a205468652043697263756974206272656160448201527f6b6572206973206f70656e6564210000000000000000000000000000000000006064820152608401610c12565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161480610e615750610e613361176d565b610ed5576040805162461bcd60e51b81526020600482015260248101919091527f476f7665726e616e63653a20416374696f6e206d75737420626520706572666f60448201527f726d65642062792074686520676f7665726e616e636520636f6e7472616374216064820152608401610c12565b610ede836117b4565b73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614610fa45760405162461bcd60e51b815260206004820152604560248201527f5374616b654e46543a204572726f722c20746f6b656e20646f65736e2774206560448201527f78697374206f7220646f65736e27742062656c6f6e6720746f2074686520636160648201527f6c6c657221000000000000000000000000000000000000000000000000000000608482015260a401610c12565b6202a30082111561101d5760405162461bcd60e51b815260206004820152603b60248201527f5374616b654e46543a204c6f636b204475726174696f6e20697320677265617460448201527f6572207468616e2074686520616d6f756e7420616c6c6f7765642100000000006064820152608401610c12565b6110278383612deb565b90505b9392505050565b60995460009060ff16156110ad5760405162461bcd60e51b815260206004820152602e60248201527f43697263756974427265616b65723a205468652043697263756974206272656160448201527f6b6572206973206f70656e6564210000000000000000000000000000000000006064820152608401610c12565b6110b6836117b4565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461117c5760405162461bcd60e51b815260206004820152604560248201527f5374616b654e46543a204572726f722c20746f6b656e20646f65736e2774206560448201527f78697374206f7220646f65736e27742062656c6f6e6720746f2074686520636160648201527f6c6c657221000000000000000000000000000000000000000000000000000000608482015260a401610c12565b6202a3008211156111f55760405162461bcd60e51b815260206004820152603b60248201527f5374616b654e46543a204c6f636b204475726174696f6e20697320677265617460448201527f6572207468616e2074686520616d6f756e7420616c6c6f7765642100000000006064820152608401610c12565b61102a8383612fcc565b60008181526067602052604081205473ffffffffffffffffffffffffffffffffffffffff166112965760405162461bcd60e51b815260206004820152602960248201527f5374616b654e46543a204572726f722c204e465420746f6b656e20646f65736e60448201527f27742065786973742100000000000000000000000000000000000000000000006064820152608401610c12565b6000828152609f6020908152604091829020825160a08101845281547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff811682527c0100000000000000000000000000000000000000000000000000000000900463ffffffff16818401526001820154818501526002820154606082019081526003909201546080820152609a548451808601909552609d548552609e5493850193909352905190926113479291849061319c565b9695505050505050565b61135b3382613305565b6113cd5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610c12565b610d9883838361345b565b6000806113e4836117b4565b90503373ffffffffffffffffffffffffffffffffffffffff8216146114715760405162461bcd60e51b815260206004820152603760248201527f5374616b654e46543a204572726f722073656e646572206973206e6f7420746860448201527f65206f776e6572206f662074686520746f6b656e4944210000000000000000006064820152608401610c12565b6000838152609f60208181526040808420815160a08101835281547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff811682527c0100000000000000000000000000000000000000000000000000000000900463ffffffff168185015260018201549281018390526002820154606082015260039091015460808201529387905291905243116115725760405162461bcd60e51b815260206004820152602860248201527f5374616b654e46543a2043616e6e6f742077697468647261772061742074686560448201527f206d6f6d656e742e0000000000000000000000000000000000000000000000006064820152608401610c12565b61157e609a548261368e565b6000868152609f6020908152604080832085519286015163ffffffff167c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff90931692909217825584015160018201556060840151600282015560809093015160039093019290925560a0805491955085929091611617908490615367565b9091555061162790508284613730565b5050919050565b60995460009060ff16156116aa5760405162461bcd60e51b815260206004820152602e60248201527f43697263756974427265616b65723a205468652043697263756974206272656160448201527f6b6572206973206f70656e6564210000000000000000000000000000000000006064820152608401610c12565b62100a408211156117495760405162461bcd60e51b815260206004820152604760248201527f5374616b654e46543a20546865206c6f636b206475726174696f6e206d75737460448201527f206265206c657373206f7220657175616c207468616e20746865206d61784d6960648201527f6e744c6f636b2100000000000000000000000000000000000000000000000000608482015260a401610c12565b6117538484613898565b9050811561102a576117658183612deb565b509392505050565b6000610ae782613a9d565b6000610ae7613b62565b610d98838383604051806020016040528060008152506123d6565b6000806117ab333385613cca565b91509150915091565b60008181526067602052604081205473ffffffffffffffffffffffffffffffffffffffff1680610ae75760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610c12565b60975473ffffffffffffffffffffffffffffffffffffffff1633146118b35760405162461bcd60e51b815260206004820152600d60248201527f4d7573742062652061646d696e000000000000000000000000000000000000006044820152606401610c12565b609780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831617905550565b50565b600073ffffffffffffffffffffffffffffffffffffffff82166119845760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610c12565b5073ffffffffffffffffffffffffffffffffffffffff1660009081526068602052604090205490565b60975460009073ffffffffffffffffffffffffffffffffffffffff163314611a175760405162461bcd60e51b815260206004820152600d60248201527f4d7573742062652061646d696e000000000000000000000000000000000000006044820152606401610c12565b6000611a21613b62565b92509050611a30818484613fa4565b505b919050565b60975473ffffffffffffffffffffffffffffffffffffffff163314611a9e5760405162461bcd60e51b815260206004820152600d60248201527f4d7573742062652061646d696e000000000000000000000000000000000000006044820152606401610c12565b600054610100900460ff16611ab95760005460ff1615611abd565b303b155b611b2f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610c12565b600054610100900460ff16158015611b6e57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b611be26040518060400160405280600681526020017f4d4e534e465400000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f4d4e53000000000000000000000000000000000000000000000000000000000081525061414a565b80156118f657600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b60995460ff1615611c8c5760405162461bcd60e51b815260206004820152602e60248201527f43697263756974427265616b65723a205468652043697263756974206272656160448201527f6b6572206973206f70656e6564210000000000000000000000000000000000006064820152608401610c12565b8160ff8116602a14611ce05760405162461bcd60e51b815260206004820152600960248201527f424144204d4147494300000000000000000000000000000000000000000000006044820152606401610c12565b611d0b7f000000000000000000000000000000000000000000000000000000000000000033846141d1565b609a5460408051808201909152609b548152609c546020820152611d31919084906142c9565b8051609b5560200151609c5560a18054839190600090611d5290849061537e565b9091555050505050565b600080611d68836117b4565b90503373ffffffffffffffffffffffffffffffffffffffff821614611df55760405162461bcd60e51b815260206004820152603760248201527f5374616b654e46543a204572726f722073656e646572206973206e6f7420746860448201527f65206f776e6572206f662074686520746f6b656e4944210000000000000000006064820152608401610c12565b6000838152609f6020908152604091829020825160a08101845281547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff811682527c0100000000000000000000000000000000000000000000000000000000900463ffffffff1692810192909252600181015492820183905260028101546060830152600301546080820152904311611ef25760405162461bcd60e51b815260206004820152602860248201527f5374616b654e46543a2043616e6e6f742077697468647261772061742074686560448201527f206d6f6d656e742e0000000000000000000000000000000000000000000000006064820152608401610c12565b611efe609a5482614393565b6000868152609f6020908152604080832085519286015163ffffffff167c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff90931692909217825584015160018201556060840151600282015560809093015160039093019290925560a1805491955085929091611f97908490615367565b90915550611fc890507f00000000000000000000000000000000000000000000000000000000000000008685613fa4565b505092915050565b6000611fda614435565b905090565b60008181526067602052604081205473ffffffffffffffffffffffffffffffffffffffff166120765760405162461bcd60e51b815260206004820152602960248201527f5374616b654e46543a204572726f722c204e465420746f6b656e20646f65736e60448201527f27742065786973742100000000000000000000000000000000000000000000006064820152608401610c12565b6000828152609f6020908152604091829020825160a08101845281547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff811682527c0100000000000000000000000000000000000000000000000000000000900463ffffffff16818401526001820154818501526002820154606082015260039091015460808201908152609a548451808601909552609b548552609c54938501939093525190926113479291849061319c565b606060668054610afc906152ea565b60975460009073ffffffffffffffffffffffffffffffffffffffff16331461219f5760405162461bcd60e51b815260206004820152600d60248201527f4d7573742062652061646d696e000000000000000000000000000000000000006044820152606401610c12565b6121a7614435565b9050611a328282613730565b60995460ff161561222c5760405162461bcd60e51b815260206004820152602e60248201527f43697263756974427265616b65723a205468652043697263756974206272656160448201527f6b6572206973206f70656e6564210000000000000000000000000000000000006064820152608401610c12565b8060ff8116602a146122805760405162461bcd60e51b815260206004820152600960248201527f424144204d4147494300000000000000000000000000000000000000000000006044820152606401610c12565b609a5460408051808201909152609d548152609e5460208201526122a6919034906142c9565b8051609d5560200151609e5560a080543491906000906122c790849061537e565b90915550505050565b60995460009060ff161561234c5760405162461bcd60e51b815260206004820152602e60248201527f43697263756974427265616b65723a205468652043697263756974206272656160448201527f6b6572206973206f70656e6564210000000000000000000000000000000000006064820152608401610c12565b610ae73383613898565b6123613383836144e9565b5050565b60975473ffffffffffffffffffffffffffffffffffffffff1633146123cc5760405162461bcd60e51b815260206004820152600d60248201527f4d7573742062652061646d696e000000000000000000000000000000000000006044820152606401610c12565b6123d46145fd565b565b6123e03383613305565b6124525760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610c12565b61245e848484846146a3565b50505050565b600080612470836117b4565b90503373ffffffffffffffffffffffffffffffffffffffff8216146124fd5760405162461bcd60e51b815260206004820152603760248201527f5374616b654e46543a204572726f722073656e646572206973206e6f7420746860448201527f65206f776e6572206f662074686520746f6b656e4944210000000000000000006064820152608401610c12565b6000838152609f60208181526040808420815160a08101835281547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff811682527c0100000000000000000000000000000000000000000000000000000000900463ffffffff168185015260018201549281018390526002820154606082015260039091015460808201529387905291905243116125fe5760405162461bcd60e51b815260206004820152602860248201527f5374616b654e46543a2043616e6e6f742077697468647261772061742074686560448201527f206d6f6d656e742e0000000000000000000000000000000000000000000000006064820152608401610c12565b61260a609a548261368e565b6000868152609f6020908152604080832085519286015163ffffffff167c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff90931692909217825584015160018201556060840151600282015560809093015160039093019290925560a08054919550859290916126a3908490615367565b90915550611fc890508584613730565b60008181526067602052604090205460609073ffffffffffffffffffffffffffffffffffffffff1661274d5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006064820152608401610c12565b600061276460408051602081019091526000815290565b90506000815111612784576040518060200160405280600081525061102a565b8061278e8461472c565b60405160200161279f929190615396565b6040516020818303038152906040529392505050565b6000806127c1836117b4565b90503373ffffffffffffffffffffffffffffffffffffffff82161461284e5760405162461bcd60e51b815260206004820152603760248201527f5374616b654e46543a204572726f722073656e646572206973206e6f7420746860448201527f65206f776e6572206f662074686520746f6b656e4944210000000000000000006064820152608401610c12565b6000838152609f6020908152604091829020825160a08101845281547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff811682527c0100000000000000000000000000000000000000000000000000000000900463ffffffff169281019290925260018101549282018390526002810154606083015260030154608082015290431161294b5760405162461bcd60e51b815260206004820152602860248201527f5374616b654e46543a2043616e6e6f742077697468647261772061742074686560448201527f206d6f6d656e742e0000000000000000000000000000000000000000000000006064820152608401610c12565b612957609a5482614393565b6000868152609f6020908152604080832085519286015163ffffffff167c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff90931692909217825584015160018201556060840151600282015560809093015160039093019290925560a18054919550859290916129f0908490615367565b9091555061162790507f00000000000000000000000000000000000000000000000000000000000000008385613fa4565b60995460009060ff1615612a9d5760405162461bcd60e51b815260206004820152602e60248201527f43697263756974427265616b65723a205468652043697263756974206272656160448201527f6b6572206973206f70656e6564210000000000000000000000000000000000006064820152608401610c12565b612aa6836117b4565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612b6c5760405162461bcd60e51b815260206004820152604560248201527f5374616b654e46543a204572726f722c20746f6b656e20646f65736e2774206560448201527f78697374206f7220646f65736e27742062656c6f6e6720746f2074686520636160648201527f6c6c657221000000000000000000000000000000000000000000000000000000608482015260a401610c12565b6202a300821115612be55760405162461bcd60e51b815260206004820152603b60248201527f5374616b654e46543a204c6f636b204475726174696f6e20697320677265617460448201527f6572207468616e2074686520616d6f756e7420616c6c6f7765642100000000006064820152608401610c12565b61102a8383612deb565b600080612bfd338585613cca565b915091509250929050565b6000806000806000612c3e8660009081526067602052604090205473ffffffffffffffffffffffffffffffffffffffff16151590565b612cb05760405162461bcd60e51b815260206004820152602160248201527f5374616b654e46543a20546f6b656e20494420646f65736e277420657869737460448201527f21000000000000000000000000000000000000000000000000000000000000006064820152608401610c12565b50505060009283525050609f6020908152604091829020825160a08101845281547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff81168083527c010000000000000000000000000000000000000000000000000000000090910463ffffffff169382018490526001830154948201859052600283015460608301819052600390930154608090920182905294929392565b600081815260696020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091558190612da5826117b4565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008281526067602052604081205473ffffffffffffffffffffffffffffffffffffffff16612e825760405162461bcd60e51b815260206004820152602160248201527f5374616b654e46543a20546f6b656e20494420646f65736e277420657869737460448201527f21000000000000000000000000000000000000000000000000000000000000006064820152608401610c12565b6000838152609f60209081526040808320815160a08101835281547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff811682527c0100000000000000000000000000000000000000000000000000000000900463ffffffff16938101939093526001810154918301919091526002810154606083015260030154608082015290612f1584436153c5565b9050816020015163ffffffff168163ffffffff1611612f38578160200151612f3a565b805b63ffffffff90811660208085019182526000888152609f909152604090819020855192519093167c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff909216918217835584015160018301556060840151600283015560809093015160039091015550905092915050565b60008281526067602052604081205473ffffffffffffffffffffffffffffffffffffffff166130635760405162461bcd60e51b815260206004820152602160248201527f5374616b654e46543a20546f6b656e20494420646f65736e277420657869737460448201527f21000000000000000000000000000000000000000000000000000000000000006064820152608401610c12565b6000838152609f60209081526040808320815160a08101835281547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff811682527c0100000000000000000000000000000000000000000000000000000000900463ffffffff169381019390935260018101549183019190915260028101546060830152600301546080820152906130f6844361537e565b90508160400151811161310d57816040015161310f565b805b60408084019182526000878152609f602090815291902084519185015163ffffffff167c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092169182178155915160018301556060840151600283015560809093015160039091015550905092915050565b60408051808201825260008082526020808301829052835160a081018552828152908101829052928301819052606083018190526080830152906000806000876000015186111561321f576132068674ffffffffffffffffffffffffffffffffffffffffff615367565b8851909150613215908261537e565b905080955061323b565b875161322c908790615367565b9050613238818761537e565b95505b8651600090613268907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16836153e4565b88519091507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff168a14156132ab5760208901516132a1908261537e565b600060208b015290505b806132be670de0b6b3a764000082615450565b91506132d2670de0b6b3a7640000836153e4565b6132dc9082615367565b9050808a6020018181516132f0919061537e565b905250989a9799509597509495945050505050565b60008181526067602052604081205473ffffffffffffffffffffffffffffffffffffffff1661339c5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e00000000000000000000000000000000000000006064820152608401610c12565b60006133a7836117b4565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061341657508373ffffffffffffffffffffffffffffffffffffffff166133fe84610b7f565b73ffffffffffffffffffffffffffffffffffffffff16145b80613453575073ffffffffffffffffffffffffffffffffffffffff8082166000908152606a602090815260408083209388168352929052205460ff165b949350505050565b8273ffffffffffffffffffffffffffffffffffffffff1661347b826117b4565b73ffffffffffffffffffffffffffffffffffffffff16146135045760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608401610c12565b73ffffffffffffffffffffffffffffffffffffffff821661358c5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610c12565b613597600082612d4b565b73ffffffffffffffffffffffffffffffffffffffff831660009081526068602052604081208054600192906135cd908490615367565b909155505073ffffffffffffffffffffffffffffffffffffffff8216600090815260686020526040812080546001929061360890849061537e565b909155505060008181526067602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6136e46040518060a0016040528060007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff168152602001600063ffffffff1681526020016000815260200160008152602001600081525090565b60408051808201909152609d548152609e54602082015260608301516000918291613712918791879061319c565b8351609d55602090930151609e556060820152969095509350505050565b80613739575050565b73ffffffffffffffffffffffffffffffffffffffff82166137c25760405162461bcd60e51b815260206004820152603360248201527f457468536166655472616e736665723a2063616e6e6f74207472616e7366657260448201527f2045544820746f206164647265737320307830000000000000000000000000006064820152608401610c12565b604051829060009073ffffffffffffffffffffffffffffffffffffffff83169084908381818185875af1925050503d806000811461381c576040519150601f19603f3d011682016040523d82523d6000602084013e613821565b606091505b505090508061245e5760405162461bcd60e51b815260206004820152602160248201527f457468536166655472616e736665723a205472616e73666572206661696c656460448201527f2e000000000000000000000000000000000000000000000000000000000000006064820152608401610c12565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8211156139525760405162461bcd60e51b815260206004820152605260248201527f5374616b654e46543a2054686520616d6f756e7420657863656564732074686560448201527f206d6178696d756d206e756d626572206f66204d6164546f6b656e732074686160648201527f742077696c6c2065766572206578697374210000000000000000000000000000608482015260a401610c12565b61397d7f000000000000000000000000000000000000000000000000000000000000000033846141d1565b609a54604080518082018252609d548152609e546020808301919091528251808401909352609b548352609c5490830152906139b761485e565b93506139c3858461537e565b609a8190556040805160a0810182527bffffffffffffffffffffffffffffffffffffffffffffffffffffffff80891682526001602080840182815284860183815289516060870190815289516080880190815260008e8152609f9095529784209651925163ffffffff167c01000000000000000000000000000000000000000000000000000000000292909516919091178555519184019190915590516002830155915160039091015560a180549295508792909190613a8490849061537e565b90915550613a9490508685614876565b50505092915050565b60008173ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f4f580006040518163ffffffff1660e01b8152600401602060405180830381865afa158015613b21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b459190615464565b73ffffffffffffffffffffffffffffffffffffffff161492915050565b60a1546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201527f000000000000000000000000000000000000000000000000000000000000000091600091829073ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa158015613bf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c1a9190615481565b905081811015613cb85760405162461bcd60e51b815260206004820152604760248201527f5374616b654e46543a205468652062616c616e6365206f662074686520636f6e60448201527f7472616374206973206c657373207468656e2074686520747261636b6564207260648201527f6573657276652100000000000000000000000000000000000000000000000000608482015260a401610c12565b613cc28282615367565b925050509091565b600080613cd6836117b4565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614613d765760405162461bcd60e51b815260206004820152602f60248201527f5374616b654e46543a2055736572206973206e6f7420746865206f776e65722060448201527f6f662074686520746f6b656e49442100000000000000000000000000000000006064820152608401610c12565b6000838152609f6020908152604091829020825160a08101845281547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff811682527c0100000000000000000000000000000000000000000000000000000000900463ffffffff169281018390526001820154938101939093526002810154606084015260030154608083015243118015613e0f5750438160400151105b613e815760405162461bcd60e51b815260206004820152603160248201527f5374616b654e46543a2054686520706f736974696f6e206973206e6f7420726560448201527f61647920746f206265206275726e6564210000000000000000000000000000006064820152608401610c12565b609a54613e8e818361368e565b94509150613e9c8183614393565b8151909450909250613ecc907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff168461537e565b925081600001517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16609a6000828254613f029190615367565b925050819055508260a16000828254613f1b9190615367565b925050819055508360a06000828254613f349190615367565b90915550506000858152609f60205260408120818155600181018290556002810182905560030155613f6585614a04565b613f907f00000000000000000000000000000000000000000000000000000000000000008785613fa4565b613f9a8685613730565b5050935093915050565b80613fae57505050565b73ffffffffffffffffffffffffffffffffffffffff83166140375760405162461bcd60e51b815260206004820152603f60248201527f4552433230536166655472616e736665723a2043616e6e6f742063616c6c206d60448201527f6574686f6473206f6e20636f6e74726163742061646472657373203078302e006064820152608401610c12565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152602482018390526000919085169063a9059cbb906044015b6020604051808303816000875af11580156140b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140d5919061549a565b90508061245e5760405162461bcd60e51b815260206004820152602360248201527f4552433230536166655472616e736665723a205472616e73666572206661696c60448201527f65642e00000000000000000000000000000000000000000000000000000000006064820152608401610c12565b600054610100900460ff166141c75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610c12565b6123618282614ad1565b806141db57505050565b73ffffffffffffffffffffffffffffffffffffffff83166142645760405162461bcd60e51b815260206004820152603f60248201527f4552433230536166655472616e736665723a2043616e6e6f742063616c6c206d60448201527f6574686f6473206f6e20636f6e74726163742061646472657373203078302e006064820152608401610c12565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff838116600483015230602483015260448201839052600091908516906323b872dd90606401614092565b60408051808201909152600080825260208201526142ef670de0b6b3a7640000846153e4565b82602001818151614300919061537e565b90525083156143245761431c8483600001518460200151614b58565b602084015282525b7480000000000000000000000000000000000000000082602001511061438c5760405162461bcd60e51b815260206004820152601960248201527f5374616b654e46543a20736c75736820746f6f206c61726765000000000000006044820152606401610c12565b5092915050565b6143e96040518060a0016040528060007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff168152602001600063ffffffff1681526020016000815260200160008152602001600081525090565b60408051808201909152609b548152609c54602082015260808301516000918291614417918791879061319c565b8351609b55602090930151609c556080820152969095509350505050565b60a05460009047818110156144d85760405162461bcd60e51b815260206004820152604760248201527f5374616b654e46543a205468652062616c616e6365206f662074686520636f6e60448201527f7472616374206973206c657373207468656e2074686520747261636b6564207260648201527f6573657276652100000000000000000000000000000000000000000000000000608482015260a401610c12565b6144e28282615367565b9250505090565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156145655760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610c12565b73ffffffffffffffffffffffffffffffffffffffff8381166000818152606a602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60995460ff16156146765760405162461bcd60e51b815260206004820152602e60248201527f43697263756974427265616b65723a205468652043697263756974206272656160448201527f6b6572206973206f70656e6564210000000000000000000000000000000000006064820152608401610c12565b609980547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b6146ae84848461345b565b6146ba84848484614bdc565b61245e5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610c12565b60608161476c57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b81156147965780614780816154b7565b915061478f9050600a83615450565b9150614770565b60008167ffffffffffffffff8111156147b1576147b161518f565b6040519080825280601f01601f1916602001820160405280156147db576020820181803683370190505b5090505b8415613453576147f0600183615367565b91506147fd600a866154f0565b61480890603061537e565b60f81b81838151811061481d5761481d615504565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350614857600a86615450565b94506147df565b60985461486c60018261537e565b6098819055919050565b73ffffffffffffffffffffffffffffffffffffffff82166148d95760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610c12565b60008181526067602052604090205473ffffffffffffffffffffffffffffffffffffffff161561494b5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610c12565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260686020526040812080546001929061498190849061537e565b909155505060008181526067602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000614a0f826117b4565b9050614a1c600083612d4b565b73ffffffffffffffffffffffffffffffffffffffff81166000908152606860205260408120805460019290614a52908490615367565b909155505060008281526067602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001690555183919073ffffffffffffffffffffffffffffffffffffffff8416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b600054610100900460ff16614b4e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610c12565b6123618282614db2565b6000808415614bd2576000614b6d8685615450565b9050614b7986826153e4565b614b839085615367565b9350614b8f818661537e565b945074ffffffffffffffffffffffffffffffffffffffffff851115614bd057614bcd74ffffffffffffffffffffffffffffffffffffffffff866154f0565b94505b505b5091939092509050565b600073ffffffffffffffffffffffffffffffffffffffff84163b15614da7576040517f150b7a0200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063150b7a0290614c53903390899088908890600401615533565b6020604051808303816000875af1925050508015614cac575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252614ca991810190615572565b60015b614d5c573d808015614cda576040519150601f19603f3d011682016040523d82523d6000602084013e614cdf565b606091505b508051614d545760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610c12565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050613453565b506001949350505050565b600054610100900460ff16614e2f5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610c12565b8151614e42906065906020850190614e52565b508051610d989060669060208401905b828054614e5e906152ea565b90600052602060002090601f016020900481019282614e805760008555614ec6565b82601f10614e9957805160ff1916838001178555614ec6565b82800160010185558215614ec6579182015b82811115614ec6578251825591602001919060010190614eab565b50614ed2929150614ed6565b5090565b5b80821115614ed25760008155600101614ed7565b7fffffffff00000000000000000000000000000000000000000000000000000000811681146118f657600080fd5b600060208284031215614f2b57600080fd5b813561102a81614eeb565b60005b83811015614f51578181015183820152602001614f39565b8381111561245e5750506000910152565b60008151808452614f7a816020860160208601614f36565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152600061102a6020830184614f62565b600060208284031215614fd157600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff811681146118f657600080fd5b6000806040838503121561500d57600080fd5b823561501881614fd8565b946020939093013593505050565b60008060006060848603121561503b57600080fd5b833561504681614fd8565b95602085013595506040909401359392505050565b6000806040838503121561506e57600080fd5b50508035926020909101359150565b60008060006060848603121561509257600080fd5b833561509d81614fd8565b925060208401356150ad81614fd8565b929592945050506040919091013590565b6000602082840312156150d057600080fd5b813561102a81614fd8565b803560ff81168114611a3257600080fd5b600080604083850312156150ff57600080fd5b615018836150db565b6000806040838503121561511b57600080fd5b82359150602083013561512d81614fd8565b809150509250929050565b60006020828403121561514a57600080fd5b61102a826150db565b80151581146118f657600080fd5b6000806040838503121561517457600080fd5b823561517f81614fd8565b9150602083013561512d81615153565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080600080608085870312156151d457600080fd5b84356151df81614fd8565b935060208501356151ef81614fd8565b925060408501359150606085013567ffffffffffffffff8082111561521357600080fd5b818701915087601f83011261522757600080fd5b8135818111156152395761523961518f565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561527f5761527f61518f565b816040528281528a602084870101111561529857600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b600080604083850312156152cf57600080fd5b82356152da81614fd8565b9150602083013561512d81614fd8565b600181811c908216806152fe57607f821691505b60208210811415611a30577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008282101561537957615379615338565b500390565b6000821982111561539157615391615338565b500190565b600083516153a8818460208801614f36565b8351908301906153bc818360208801614f36565b01949350505050565b600063ffffffff8083168185168083038211156153bc576153bc615338565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561541c5761541c615338565b500290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008261545f5761545f615421565b500490565b60006020828403121561547657600080fd5b815161102a81614fd8565b60006020828403121561549357600080fd5b5051919050565b6000602082840312156154ac57600080fd5b815161102a81615153565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156154e9576154e9615338565b5060010190565b6000826154ff576154ff615421565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600073ffffffffffffffffffffffffffffffffffffffff8087168352808616602084015250836040830152608060608301526113476080830184614f62565b60006020828403121561558457600080fd5b815161102a81614eeb56fea264697066735822122023c684efedc477e8fedf09732a2c0385f52204e9fd2c6ed8c0c1b6b762a7b20764736f6c634300080c00331c0bf703a3415cada9785e89e9d70314c3111ae7d8e04f33bb42eb1d264088be",
}

// StakeNFTABI is the input ABI used to generate the binding from.
// Deprecated: Use StakeNFTMetaData.ABI instead.
var StakeNFTABI = StakeNFTMetaData.ABI

// StakeNFTBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StakeNFTMetaData.Bin instead.
var StakeNFTBin = StakeNFTMetaData.Bin

// DeployStakeNFT deploys a new Ethereum contract, binding an instance of StakeNFT to it.
func DeployStakeNFT(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *StakeNFT, error) {
	parsed, err := StakeNFTMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StakeNFTBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StakeNFT{StakeNFTCaller: StakeNFTCaller{contract: contract}, StakeNFTTransactor: StakeNFTTransactor{contract: contract}, StakeNFTFilterer: StakeNFTFilterer{contract: contract}}, nil
}

// StakeNFT is an auto generated Go binding around an Ethereum contract.
type StakeNFT struct {
	StakeNFTCaller     // Read-only binding to the contract
	StakeNFTTransactor // Write-only binding to the contract
	StakeNFTFilterer   // Log filterer for contract events
}

// StakeNFTCaller is an auto generated read-only Go binding around an Ethereum contract.
type StakeNFTCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakeNFTTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StakeNFTTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakeNFTFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StakeNFTFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakeNFTSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StakeNFTSession struct {
	Contract     *StakeNFT         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StakeNFTCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StakeNFTCallerSession struct {
	Contract *StakeNFTCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// StakeNFTTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StakeNFTTransactorSession struct {
	Contract     *StakeNFTTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// StakeNFTRaw is an auto generated low-level Go binding around an Ethereum contract.
type StakeNFTRaw struct {
	Contract *StakeNFT // Generic contract binding to access the raw methods on
}

// StakeNFTCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StakeNFTCallerRaw struct {
	Contract *StakeNFTCaller // Generic read-only contract binding to access the raw methods on
}

// StakeNFTTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StakeNFTTransactorRaw struct {
	Contract *StakeNFTTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStakeNFT creates a new instance of StakeNFT, bound to a specific deployed contract.
func NewStakeNFT(address common.Address, backend bind.ContractBackend) (*StakeNFT, error) {
	contract, err := bindStakeNFT(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StakeNFT{StakeNFTCaller: StakeNFTCaller{contract: contract}, StakeNFTTransactor: StakeNFTTransactor{contract: contract}, StakeNFTFilterer: StakeNFTFilterer{contract: contract}}, nil
}

// NewStakeNFTCaller creates a new read-only instance of StakeNFT, bound to a specific deployed contract.
func NewStakeNFTCaller(address common.Address, caller bind.ContractCaller) (*StakeNFTCaller, error) {
	contract, err := bindStakeNFT(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StakeNFTCaller{contract: contract}, nil
}

// NewStakeNFTTransactor creates a new write-only instance of StakeNFT, bound to a specific deployed contract.
func NewStakeNFTTransactor(address common.Address, transactor bind.ContractTransactor) (*StakeNFTTransactor, error) {
	contract, err := bindStakeNFT(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StakeNFTTransactor{contract: contract}, nil
}

// NewStakeNFTFilterer creates a new log filterer instance of StakeNFT, bound to a specific deployed contract.
func NewStakeNFTFilterer(address common.Address, filterer bind.ContractFilterer) (*StakeNFTFilterer, error) {
	contract, err := bindStakeNFT(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StakeNFTFilterer{contract: contract}, nil
}

// bindStakeNFT binds a generic wrapper to an already deployed contract.
func bindStakeNFT(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StakeNFTABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakeNFT *StakeNFTRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakeNFT.Contract.StakeNFTCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakeNFT *StakeNFTRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakeNFT.Contract.StakeNFTTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakeNFT *StakeNFTRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakeNFT.Contract.StakeNFTTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakeNFT *StakeNFTCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakeNFT.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakeNFT *StakeNFTTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakeNFT.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakeNFT *StakeNFTTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakeNFT.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_StakeNFT *StakeNFTCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_StakeNFT *StakeNFTSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _StakeNFT.Contract.BalanceOf(&_StakeNFT.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_StakeNFT *StakeNFTCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _StakeNFT.Contract.BalanceOf(&_StakeNFT.CallOpts, owner)
}

// CircuitBreakerState is a free data retrieval call binding the contract method 0x89465c62.
//
// Solidity: function circuitBreakerState() view returns(bool)
func (_StakeNFT *StakeNFTCaller) CircuitBreakerState(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "circuitBreakerState")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CircuitBreakerState is a free data retrieval call binding the contract method 0x89465c62.
//
// Solidity: function circuitBreakerState() view returns(bool)
func (_StakeNFT *StakeNFTSession) CircuitBreakerState() (bool, error) {
	return _StakeNFT.Contract.CircuitBreakerState(&_StakeNFT.CallOpts)
}

// CircuitBreakerState is a free data retrieval call binding the contract method 0x89465c62.
//
// Solidity: function circuitBreakerState() view returns(bool)
func (_StakeNFT *StakeNFTCallerSession) CircuitBreakerState() (bool, error) {
	return _StakeNFT.Contract.CircuitBreakerState(&_StakeNFT.CallOpts)
}

// EstimateEthCollection is a free data retrieval call binding the contract method 0x20ea0d48.
//
// Solidity: function estimateEthCollection(uint256 tokenID_) view returns(uint256 payout)
func (_StakeNFT *StakeNFTCaller) EstimateEthCollection(opts *bind.CallOpts, tokenID_ *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "estimateEthCollection", tokenID_)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EstimateEthCollection is a free data retrieval call binding the contract method 0x20ea0d48.
//
// Solidity: function estimateEthCollection(uint256 tokenID_) view returns(uint256 payout)
func (_StakeNFT *StakeNFTSession) EstimateEthCollection(tokenID_ *big.Int) (*big.Int, error) {
	return _StakeNFT.Contract.EstimateEthCollection(&_StakeNFT.CallOpts, tokenID_)
}

// EstimateEthCollection is a free data retrieval call binding the contract method 0x20ea0d48.
//
// Solidity: function estimateEthCollection(uint256 tokenID_) view returns(uint256 payout)
func (_StakeNFT *StakeNFTCallerSession) EstimateEthCollection(tokenID_ *big.Int) (*big.Int, error) {
	return _StakeNFT.Contract.EstimateEthCollection(&_StakeNFT.CallOpts, tokenID_)
}

// EstimateExcessEth is a free data retrieval call binding the contract method 0x905953ed.
//
// Solidity: function estimateExcessEth() view returns(uint256 excess)
func (_StakeNFT *StakeNFTCaller) EstimateExcessEth(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "estimateExcessEth")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EstimateExcessEth is a free data retrieval call binding the contract method 0x905953ed.
//
// Solidity: function estimateExcessEth() view returns(uint256 excess)
func (_StakeNFT *StakeNFTSession) EstimateExcessEth() (*big.Int, error) {
	return _StakeNFT.Contract.EstimateExcessEth(&_StakeNFT.CallOpts)
}

// EstimateExcessEth is a free data retrieval call binding the contract method 0x905953ed.
//
// Solidity: function estimateExcessEth() view returns(uint256 excess)
func (_StakeNFT *StakeNFTCallerSession) EstimateExcessEth() (*big.Int, error) {
	return _StakeNFT.Contract.EstimateExcessEth(&_StakeNFT.CallOpts)
}

// EstimateExcessToken is a free data retrieval call binding the contract method 0x3eed3eff.
//
// Solidity: function estimateExcessToken() view returns(uint256 excess)
func (_StakeNFT *StakeNFTCaller) EstimateExcessToken(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "estimateExcessToken")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EstimateExcessToken is a free data retrieval call binding the contract method 0x3eed3eff.
//
// Solidity: function estimateExcessToken() view returns(uint256 excess)
func (_StakeNFT *StakeNFTSession) EstimateExcessToken() (*big.Int, error) {
	return _StakeNFT.Contract.EstimateExcessToken(&_StakeNFT.CallOpts)
}

// EstimateExcessToken is a free data retrieval call binding the contract method 0x3eed3eff.
//
// Solidity: function estimateExcessToken() view returns(uint256 excess)
func (_StakeNFT *StakeNFTCallerSession) EstimateExcessToken() (*big.Int, error) {
	return _StakeNFT.Contract.EstimateExcessToken(&_StakeNFT.CallOpts)
}

// EstimateTokenCollection is a free data retrieval call binding the contract method 0x93c5748d.
//
// Solidity: function estimateTokenCollection(uint256 tokenID_) view returns(uint256 payout)
func (_StakeNFT *StakeNFTCaller) EstimateTokenCollection(opts *bind.CallOpts, tokenID_ *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "estimateTokenCollection", tokenID_)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EstimateTokenCollection is a free data retrieval call binding the contract method 0x93c5748d.
//
// Solidity: function estimateTokenCollection(uint256 tokenID_) view returns(uint256 payout)
func (_StakeNFT *StakeNFTSession) EstimateTokenCollection(tokenID_ *big.Int) (*big.Int, error) {
	return _StakeNFT.Contract.EstimateTokenCollection(&_StakeNFT.CallOpts, tokenID_)
}

// EstimateTokenCollection is a free data retrieval call binding the contract method 0x93c5748d.
//
// Solidity: function estimateTokenCollection(uint256 tokenID_) view returns(uint256 payout)
func (_StakeNFT *StakeNFTCallerSession) EstimateTokenCollection(tokenID_ *big.Int) (*big.Int, error) {
	return _StakeNFT.Contract.EstimateTokenCollection(&_StakeNFT.CallOpts, tokenID_)
}

// GetAccumulatorScaleFactor is a free data retrieval call binding the contract method 0x99785132.
//
// Solidity: function getAccumulatorScaleFactor() pure returns(uint256)
func (_StakeNFT *StakeNFTCaller) GetAccumulatorScaleFactor(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "getAccumulatorScaleFactor")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAccumulatorScaleFactor is a free data retrieval call binding the contract method 0x99785132.
//
// Solidity: function getAccumulatorScaleFactor() pure returns(uint256)
func (_StakeNFT *StakeNFTSession) GetAccumulatorScaleFactor() (*big.Int, error) {
	return _StakeNFT.Contract.GetAccumulatorScaleFactor(&_StakeNFT.CallOpts)
}

// GetAccumulatorScaleFactor is a free data retrieval call binding the contract method 0x99785132.
//
// Solidity: function getAccumulatorScaleFactor() pure returns(uint256)
func (_StakeNFT *StakeNFTCallerSession) GetAccumulatorScaleFactor() (*big.Int, error) {
	return _StakeNFT.Contract.GetAccumulatorScaleFactor(&_StakeNFT.CallOpts)
}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_StakeNFT *StakeNFTCaller) GetAdmin(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "getAdmin")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_StakeNFT *StakeNFTSession) GetAdmin() (common.Address, error) {
	return _StakeNFT.Contract.GetAdmin(&_StakeNFT.CallOpts)
}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_StakeNFT *StakeNFTCallerSession) GetAdmin() (common.Address, error) {
	return _StakeNFT.Contract.GetAdmin(&_StakeNFT.CallOpts)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_StakeNFT *StakeNFTCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_StakeNFT *StakeNFTSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _StakeNFT.Contract.GetApproved(&_StakeNFT.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_StakeNFT *StakeNFTCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _StakeNFT.Contract.GetApproved(&_StakeNFT.CallOpts, tokenId)
}

// GetEthAccumulator is a free data retrieval call binding the contract method 0x548652d2.
//
// Solidity: function getEthAccumulator() view returns(uint256 accumulator, uint256 slush)
func (_StakeNFT *StakeNFTCaller) GetEthAccumulator(opts *bind.CallOpts) (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "getEthAccumulator")

	outstruct := new(struct {
		Accumulator *big.Int
		Slush       *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Accumulator = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Slush = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetEthAccumulator is a free data retrieval call binding the contract method 0x548652d2.
//
// Solidity: function getEthAccumulator() view returns(uint256 accumulator, uint256 slush)
func (_StakeNFT *StakeNFTSession) GetEthAccumulator() (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	return _StakeNFT.Contract.GetEthAccumulator(&_StakeNFT.CallOpts)
}

// GetEthAccumulator is a free data retrieval call binding the contract method 0x548652d2.
//
// Solidity: function getEthAccumulator() view returns(uint256 accumulator, uint256 slush)
func (_StakeNFT *StakeNFTCallerSession) GetEthAccumulator() (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	return _StakeNFT.Contract.GetEthAccumulator(&_StakeNFT.CallOpts)
}

// GetGovernance is a free data retrieval call binding the contract method 0x289b3c0d.
//
// Solidity: function getGovernance() view returns(address)
func (_StakeNFT *StakeNFTCaller) GetGovernance(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "getGovernance")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetGovernance is a free data retrieval call binding the contract method 0x289b3c0d.
//
// Solidity: function getGovernance() view returns(address)
func (_StakeNFT *StakeNFTSession) GetGovernance() (common.Address, error) {
	return _StakeNFT.Contract.GetGovernance(&_StakeNFT.CallOpts)
}

// GetGovernance is a free data retrieval call binding the contract method 0x289b3c0d.
//
// Solidity: function getGovernance() view returns(address)
func (_StakeNFT *StakeNFTCallerSession) GetGovernance() (common.Address, error) {
	return _StakeNFT.Contract.GetGovernance(&_StakeNFT.CallOpts)
}

// GetMetamorphicContractAddress is a free data retrieval call binding the contract method 0x8653a465.
//
// Solidity: function getMetamorphicContractAddress(bytes32 _salt, address _factory) pure returns(address)
func (_StakeNFT *StakeNFTCaller) GetMetamorphicContractAddress(opts *bind.CallOpts, _salt [32]byte, _factory common.Address) (common.Address, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "getMetamorphicContractAddress", _salt, _factory)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetMetamorphicContractAddress is a free data retrieval call binding the contract method 0x8653a465.
//
// Solidity: function getMetamorphicContractAddress(bytes32 _salt, address _factory) pure returns(address)
func (_StakeNFT *StakeNFTSession) GetMetamorphicContractAddress(_salt [32]byte, _factory common.Address) (common.Address, error) {
	return _StakeNFT.Contract.GetMetamorphicContractAddress(&_StakeNFT.CallOpts, _salt, _factory)
}

// GetMetamorphicContractAddress is a free data retrieval call binding the contract method 0x8653a465.
//
// Solidity: function getMetamorphicContractAddress(bytes32 _salt, address _factory) pure returns(address)
func (_StakeNFT *StakeNFTCallerSession) GetMetamorphicContractAddress(_salt [32]byte, _factory common.Address) (common.Address, error) {
	return _StakeNFT.Contract.GetMetamorphicContractAddress(&_StakeNFT.CallOpts, _salt, _factory)
}

// GetPosition is a free data retrieval call binding the contract method 0xeb02c301.
//
// Solidity: function getPosition(uint256 tokenID_) view returns(uint256 shares, uint256 freeAfter, uint256 withdrawFreeAfter, uint256 accumulatorEth, uint256 accumulatorToken)
func (_StakeNFT *StakeNFTCaller) GetPosition(opts *bind.CallOpts, tokenID_ *big.Int) (struct {
	Shares            *big.Int
	FreeAfter         *big.Int
	WithdrawFreeAfter *big.Int
	AccumulatorEth    *big.Int
	AccumulatorToken  *big.Int
}, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "getPosition", tokenID_)

	outstruct := new(struct {
		Shares            *big.Int
		FreeAfter         *big.Int
		WithdrawFreeAfter *big.Int
		AccumulatorEth    *big.Int
		AccumulatorToken  *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Shares = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.FreeAfter = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.WithdrawFreeAfter = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.AccumulatorEth = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.AccumulatorToken = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetPosition is a free data retrieval call binding the contract method 0xeb02c301.
//
// Solidity: function getPosition(uint256 tokenID_) view returns(uint256 shares, uint256 freeAfter, uint256 withdrawFreeAfter, uint256 accumulatorEth, uint256 accumulatorToken)
func (_StakeNFT *StakeNFTSession) GetPosition(tokenID_ *big.Int) (struct {
	Shares            *big.Int
	FreeAfter         *big.Int
	WithdrawFreeAfter *big.Int
	AccumulatorEth    *big.Int
	AccumulatorToken  *big.Int
}, error) {
	return _StakeNFT.Contract.GetPosition(&_StakeNFT.CallOpts, tokenID_)
}

// GetPosition is a free data retrieval call binding the contract method 0xeb02c301.
//
// Solidity: function getPosition(uint256 tokenID_) view returns(uint256 shares, uint256 freeAfter, uint256 withdrawFreeAfter, uint256 accumulatorEth, uint256 accumulatorToken)
func (_StakeNFT *StakeNFTCallerSession) GetPosition(tokenID_ *big.Int) (struct {
	Shares            *big.Int
	FreeAfter         *big.Int
	WithdrawFreeAfter *big.Int
	AccumulatorEth    *big.Int
	AccumulatorToken  *big.Int
}, error) {
	return _StakeNFT.Contract.GetPosition(&_StakeNFT.CallOpts, tokenID_)
}

// GetTokenAccumulator is a free data retrieval call binding the contract method 0xc47c6e14.
//
// Solidity: function getTokenAccumulator() view returns(uint256 accumulator, uint256 slush)
func (_StakeNFT *StakeNFTCaller) GetTokenAccumulator(opts *bind.CallOpts) (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "getTokenAccumulator")

	outstruct := new(struct {
		Accumulator *big.Int
		Slush       *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Accumulator = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Slush = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetTokenAccumulator is a free data retrieval call binding the contract method 0xc47c6e14.
//
// Solidity: function getTokenAccumulator() view returns(uint256 accumulator, uint256 slush)
func (_StakeNFT *StakeNFTSession) GetTokenAccumulator() (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	return _StakeNFT.Contract.GetTokenAccumulator(&_StakeNFT.CallOpts)
}

// GetTokenAccumulator is a free data retrieval call binding the contract method 0xc47c6e14.
//
// Solidity: function getTokenAccumulator() view returns(uint256 accumulator, uint256 slush)
func (_StakeNFT *StakeNFTCallerSession) GetTokenAccumulator() (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	return _StakeNFT.Contract.GetTokenAccumulator(&_StakeNFT.CallOpts)
}

// GetTotalReserveEth is a free data retrieval call binding the contract method 0x19b8be2f.
//
// Solidity: function getTotalReserveEth() view returns(uint256)
func (_StakeNFT *StakeNFTCaller) GetTotalReserveEth(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "getTotalReserveEth")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalReserveEth is a free data retrieval call binding the contract method 0x19b8be2f.
//
// Solidity: function getTotalReserveEth() view returns(uint256)
func (_StakeNFT *StakeNFTSession) GetTotalReserveEth() (*big.Int, error) {
	return _StakeNFT.Contract.GetTotalReserveEth(&_StakeNFT.CallOpts)
}

// GetTotalReserveEth is a free data retrieval call binding the contract method 0x19b8be2f.
//
// Solidity: function getTotalReserveEth() view returns(uint256)
func (_StakeNFT *StakeNFTCallerSession) GetTotalReserveEth() (*big.Int, error) {
	return _StakeNFT.Contract.GetTotalReserveEth(&_StakeNFT.CallOpts)
}

// GetTotalReserveMadToken is a free data retrieval call binding the contract method 0x9aeac659.
//
// Solidity: function getTotalReserveMadToken() view returns(uint256)
func (_StakeNFT *StakeNFTCaller) GetTotalReserveMadToken(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "getTotalReserveMadToken")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalReserveMadToken is a free data retrieval call binding the contract method 0x9aeac659.
//
// Solidity: function getTotalReserveMadToken() view returns(uint256)
func (_StakeNFT *StakeNFTSession) GetTotalReserveMadToken() (*big.Int, error) {
	return _StakeNFT.Contract.GetTotalReserveMadToken(&_StakeNFT.CallOpts)
}

// GetTotalReserveMadToken is a free data retrieval call binding the contract method 0x9aeac659.
//
// Solidity: function getTotalReserveMadToken() view returns(uint256)
func (_StakeNFT *StakeNFTCallerSession) GetTotalReserveMadToken() (*big.Int, error) {
	return _StakeNFT.Contract.GetTotalReserveMadToken(&_StakeNFT.CallOpts)
}

// GetTotalShares is a free data retrieval call binding the contract method 0xd5002f2e.
//
// Solidity: function getTotalShares() view returns(uint256)
func (_StakeNFT *StakeNFTCaller) GetTotalShares(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "getTotalShares")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalShares is a free data retrieval call binding the contract method 0xd5002f2e.
//
// Solidity: function getTotalShares() view returns(uint256)
func (_StakeNFT *StakeNFTSession) GetTotalShares() (*big.Int, error) {
	return _StakeNFT.Contract.GetTotalShares(&_StakeNFT.CallOpts)
}

// GetTotalShares is a free data retrieval call binding the contract method 0xd5002f2e.
//
// Solidity: function getTotalShares() view returns(uint256)
func (_StakeNFT *StakeNFTCallerSession) GetTotalShares() (*big.Int, error) {
	return _StakeNFT.Contract.GetTotalShares(&_StakeNFT.CallOpts)
}

// IsAllowedProposal is a free data retrieval call binding the contract method 0x3771165e.
//
// Solidity: function isAllowedProposal(address addr) view returns(bool)
func (_StakeNFT *StakeNFTCaller) IsAllowedProposal(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "isAllowedProposal", addr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsAllowedProposal is a free data retrieval call binding the contract method 0x3771165e.
//
// Solidity: function isAllowedProposal(address addr) view returns(bool)
func (_StakeNFT *StakeNFTSession) IsAllowedProposal(addr common.Address) (bool, error) {
	return _StakeNFT.Contract.IsAllowedProposal(&_StakeNFT.CallOpts, addr)
}

// IsAllowedProposal is a free data retrieval call binding the contract method 0x3771165e.
//
// Solidity: function isAllowedProposal(address addr) view returns(bool)
func (_StakeNFT *StakeNFTCallerSession) IsAllowedProposal(addr common.Address) (bool, error) {
	return _StakeNFT.Contract.IsAllowedProposal(&_StakeNFT.CallOpts, addr)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_StakeNFT *StakeNFTCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_StakeNFT *StakeNFTSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _StakeNFT.Contract.IsApprovedForAll(&_StakeNFT.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_StakeNFT *StakeNFTCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _StakeNFT.Contract.IsApprovedForAll(&_StakeNFT.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_StakeNFT *StakeNFTCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_StakeNFT *StakeNFTSession) Name() (string, error) {
	return _StakeNFT.Contract.Name(&_StakeNFT.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_StakeNFT *StakeNFTCallerSession) Name() (string, error) {
	return _StakeNFT.Contract.Name(&_StakeNFT.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_StakeNFT *StakeNFTCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_StakeNFT *StakeNFTSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _StakeNFT.Contract.OwnerOf(&_StakeNFT.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_StakeNFT *StakeNFTCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _StakeNFT.Contract.OwnerOf(&_StakeNFT.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_StakeNFT *StakeNFTCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_StakeNFT *StakeNFTSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _StakeNFT.Contract.SupportsInterface(&_StakeNFT.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_StakeNFT *StakeNFTCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _StakeNFT.Contract.SupportsInterface(&_StakeNFT.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_StakeNFT *StakeNFTCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_StakeNFT *StakeNFTSession) Symbol() (string, error) {
	return _StakeNFT.Contract.Symbol(&_StakeNFT.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_StakeNFT *StakeNFTCallerSession) Symbol() (string, error) {
	return _StakeNFT.Contract.Symbol(&_StakeNFT.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_StakeNFT *StakeNFTCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _StakeNFT.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_StakeNFT *StakeNFTSession) TokenURI(tokenId *big.Int) (string, error) {
	return _StakeNFT.Contract.TokenURI(&_StakeNFT.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_StakeNFT *StakeNFTCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _StakeNFT.Contract.TokenURI(&_StakeNFT.CallOpts, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_StakeNFT *StakeNFTTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_StakeNFT *StakeNFTSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.Approve(&_StakeNFT.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_StakeNFT *StakeNFTTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.Approve(&_StakeNFT.TransactOpts, to, tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenID_) returns(uint256 payoutEth, uint256 payoutMadToken)
func (_StakeNFT *StakeNFTTransactor) Burn(opts *bind.TransactOpts, tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "burn", tokenID_)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenID_) returns(uint256 payoutEth, uint256 payoutMadToken)
func (_StakeNFT *StakeNFTSession) Burn(tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.Burn(&_StakeNFT.TransactOpts, tokenID_)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenID_) returns(uint256 payoutEth, uint256 payoutMadToken)
func (_StakeNFT *StakeNFTTransactorSession) Burn(tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.Burn(&_StakeNFT.TransactOpts, tokenID_)
}

// BurnTo is a paid mutator transaction binding the contract method 0xea785a5e.
//
// Solidity: function burnTo(address to_, uint256 tokenID_) returns(uint256 payoutEth, uint256 payoutMadToken)
func (_StakeNFT *StakeNFTTransactor) BurnTo(opts *bind.TransactOpts, to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "burnTo", to_, tokenID_)
}

// BurnTo is a paid mutator transaction binding the contract method 0xea785a5e.
//
// Solidity: function burnTo(address to_, uint256 tokenID_) returns(uint256 payoutEth, uint256 payoutMadToken)
func (_StakeNFT *StakeNFTSession) BurnTo(to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.BurnTo(&_StakeNFT.TransactOpts, to_, tokenID_)
}

// BurnTo is a paid mutator transaction binding the contract method 0xea785a5e.
//
// Solidity: function burnTo(address to_, uint256 tokenID_) returns(uint256 payoutEth, uint256 payoutMadToken)
func (_StakeNFT *StakeNFTTransactorSession) BurnTo(to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.BurnTo(&_StakeNFT.TransactOpts, to_, tokenID_)
}

// CollectEth is a paid mutator transaction binding the contract method 0x2a0d8bd1.
//
// Solidity: function collectEth(uint256 tokenID_) returns(uint256 payout)
func (_StakeNFT *StakeNFTTransactor) CollectEth(opts *bind.TransactOpts, tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "collectEth", tokenID_)
}

// CollectEth is a paid mutator transaction binding the contract method 0x2a0d8bd1.
//
// Solidity: function collectEth(uint256 tokenID_) returns(uint256 payout)
func (_StakeNFT *StakeNFTSession) CollectEth(tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.CollectEth(&_StakeNFT.TransactOpts, tokenID_)
}

// CollectEth is a paid mutator transaction binding the contract method 0x2a0d8bd1.
//
// Solidity: function collectEth(uint256 tokenID_) returns(uint256 payout)
func (_StakeNFT *StakeNFTTransactorSession) CollectEth(tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.CollectEth(&_StakeNFT.TransactOpts, tokenID_)
}

// CollectEthTo is a paid mutator transaction binding the contract method 0xbe444379.
//
// Solidity: function collectEthTo(address to_, uint256 tokenID_) returns(uint256 payout)
func (_StakeNFT *StakeNFTTransactor) CollectEthTo(opts *bind.TransactOpts, to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "collectEthTo", to_, tokenID_)
}

// CollectEthTo is a paid mutator transaction binding the contract method 0xbe444379.
//
// Solidity: function collectEthTo(address to_, uint256 tokenID_) returns(uint256 payout)
func (_StakeNFT *StakeNFTSession) CollectEthTo(to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.CollectEthTo(&_StakeNFT.TransactOpts, to_, tokenID_)
}

// CollectEthTo is a paid mutator transaction binding the contract method 0xbe444379.
//
// Solidity: function collectEthTo(address to_, uint256 tokenID_) returns(uint256 payout)
func (_StakeNFT *StakeNFTTransactorSession) CollectEthTo(to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.CollectEthTo(&_StakeNFT.TransactOpts, to_, tokenID_)
}

// CollectToken is a paid mutator transaction binding the contract method 0xe35c3e28.
//
// Solidity: function collectToken(uint256 tokenID_) returns(uint256 payout)
func (_StakeNFT *StakeNFTTransactor) CollectToken(opts *bind.TransactOpts, tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "collectToken", tokenID_)
}

// CollectToken is a paid mutator transaction binding the contract method 0xe35c3e28.
//
// Solidity: function collectToken(uint256 tokenID_) returns(uint256 payout)
func (_StakeNFT *StakeNFTSession) CollectToken(tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.CollectToken(&_StakeNFT.TransactOpts, tokenID_)
}

// CollectToken is a paid mutator transaction binding the contract method 0xe35c3e28.
//
// Solidity: function collectToken(uint256 tokenID_) returns(uint256 payout)
func (_StakeNFT *StakeNFTTransactorSession) CollectToken(tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.CollectToken(&_StakeNFT.TransactOpts, tokenID_)
}

// CollectTokenTo is a paid mutator transaction binding the contract method 0x8853b950.
//
// Solidity: function collectTokenTo(address to_, uint256 tokenID_) returns(uint256 payout)
func (_StakeNFT *StakeNFTTransactor) CollectTokenTo(opts *bind.TransactOpts, to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "collectTokenTo", to_, tokenID_)
}

// CollectTokenTo is a paid mutator transaction binding the contract method 0x8853b950.
//
// Solidity: function collectTokenTo(address to_, uint256 tokenID_) returns(uint256 payout)
func (_StakeNFT *StakeNFTSession) CollectTokenTo(to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.CollectTokenTo(&_StakeNFT.TransactOpts, to_, tokenID_)
}

// CollectTokenTo is a paid mutator transaction binding the contract method 0x8853b950.
//
// Solidity: function collectTokenTo(address to_, uint256 tokenID_) returns(uint256 payout)
func (_StakeNFT *StakeNFTTransactorSession) CollectTokenTo(to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.CollectTokenTo(&_StakeNFT.TransactOpts, to_, tokenID_)
}

// DepositEth is a paid mutator transaction binding the contract method 0x99a89ecc.
//
// Solidity: function depositEth(uint8 magic_) payable returns()
func (_StakeNFT *StakeNFTTransactor) DepositEth(opts *bind.TransactOpts, magic_ uint8) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "depositEth", magic_)
}

// DepositEth is a paid mutator transaction binding the contract method 0x99a89ecc.
//
// Solidity: function depositEth(uint8 magic_) payable returns()
func (_StakeNFT *StakeNFTSession) DepositEth(magic_ uint8) (*types.Transaction, error) {
	return _StakeNFT.Contract.DepositEth(&_StakeNFT.TransactOpts, magic_)
}

// DepositEth is a paid mutator transaction binding the contract method 0x99a89ecc.
//
// Solidity: function depositEth(uint8 magic_) payable returns()
func (_StakeNFT *StakeNFTTransactorSession) DepositEth(magic_ uint8) (*types.Transaction, error) {
	return _StakeNFT.Contract.DepositEth(&_StakeNFT.TransactOpts, magic_)
}

// DepositToken is a paid mutator transaction binding the contract method 0x8191f5e5.
//
// Solidity: function depositToken(uint8 magic_, uint256 amount_) returns()
func (_StakeNFT *StakeNFTTransactor) DepositToken(opts *bind.TransactOpts, magic_ uint8, amount_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "depositToken", magic_, amount_)
}

// DepositToken is a paid mutator transaction binding the contract method 0x8191f5e5.
//
// Solidity: function depositToken(uint8 magic_, uint256 amount_) returns()
func (_StakeNFT *StakeNFTSession) DepositToken(magic_ uint8, amount_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.DepositToken(&_StakeNFT.TransactOpts, magic_, amount_)
}

// DepositToken is a paid mutator transaction binding the contract method 0x8191f5e5.
//
// Solidity: function depositToken(uint8 magic_, uint256 amount_) returns()
func (_StakeNFT *StakeNFTTransactorSession) DepositToken(magic_ uint8, amount_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.DepositToken(&_StakeNFT.TransactOpts, magic_, amount_)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_StakeNFT *StakeNFTTransactor) Initialize(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "initialize")
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_StakeNFT *StakeNFTSession) Initialize() (*types.Transaction, error) {
	return _StakeNFT.Contract.Initialize(&_StakeNFT.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_StakeNFT *StakeNFTTransactorSession) Initialize() (*types.Transaction, error) {
	return _StakeNFT.Contract.Initialize(&_StakeNFT.TransactOpts)
}

// LockOwnPosition is a paid mutator transaction binding the contract method 0xe42a673c.
//
// Solidity: function lockOwnPosition(uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_StakeNFT *StakeNFTTransactor) LockOwnPosition(opts *bind.TransactOpts, tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "lockOwnPosition", tokenID_, lockDuration_)
}

// LockOwnPosition is a paid mutator transaction binding the contract method 0xe42a673c.
//
// Solidity: function lockOwnPosition(uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_StakeNFT *StakeNFTSession) LockOwnPosition(tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.LockOwnPosition(&_StakeNFT.TransactOpts, tokenID_, lockDuration_)
}

// LockOwnPosition is a paid mutator transaction binding the contract method 0xe42a673c.
//
// Solidity: function lockOwnPosition(uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_StakeNFT *StakeNFTTransactorSession) LockOwnPosition(tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.LockOwnPosition(&_StakeNFT.TransactOpts, tokenID_, lockDuration_)
}

// LockPosition is a paid mutator transaction binding the contract method 0x0cc65dfb.
//
// Solidity: function lockPosition(address caller_, uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_StakeNFT *StakeNFTTransactor) LockPosition(opts *bind.TransactOpts, caller_ common.Address, tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "lockPosition", caller_, tokenID_, lockDuration_)
}

// LockPosition is a paid mutator transaction binding the contract method 0x0cc65dfb.
//
// Solidity: function lockPosition(address caller_, uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_StakeNFT *StakeNFTSession) LockPosition(caller_ common.Address, tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.LockPosition(&_StakeNFT.TransactOpts, caller_, tokenID_, lockDuration_)
}

// LockPosition is a paid mutator transaction binding the contract method 0x0cc65dfb.
//
// Solidity: function lockPosition(address caller_, uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_StakeNFT *StakeNFTTransactorSession) LockPosition(caller_ common.Address, tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.LockPosition(&_StakeNFT.TransactOpts, caller_, tokenID_, lockDuration_)
}

// LockWithdraw is a paid mutator transaction binding the contract method 0x0e4eb15b.
//
// Solidity: function lockWithdraw(uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_StakeNFT *StakeNFTTransactor) LockWithdraw(opts *bind.TransactOpts, tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "lockWithdraw", tokenID_, lockDuration_)
}

// LockWithdraw is a paid mutator transaction binding the contract method 0x0e4eb15b.
//
// Solidity: function lockWithdraw(uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_StakeNFT *StakeNFTSession) LockWithdraw(tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.LockWithdraw(&_StakeNFT.TransactOpts, tokenID_, lockDuration_)
}

// LockWithdraw is a paid mutator transaction binding the contract method 0x0e4eb15b.
//
// Solidity: function lockWithdraw(uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_StakeNFT *StakeNFTTransactorSession) LockWithdraw(tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.LockWithdraw(&_StakeNFT.TransactOpts, tokenID_, lockDuration_)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 amount_) returns(uint256 tokenID)
func (_StakeNFT *StakeNFTTransactor) Mint(opts *bind.TransactOpts, amount_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "mint", amount_)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 amount_) returns(uint256 tokenID)
func (_StakeNFT *StakeNFTSession) Mint(amount_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.Mint(&_StakeNFT.TransactOpts, amount_)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 amount_) returns(uint256 tokenID)
func (_StakeNFT *StakeNFTTransactorSession) Mint(amount_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.Mint(&_StakeNFT.TransactOpts, amount_)
}

// MintTo is a paid mutator transaction binding the contract method 0x2baf2acb.
//
// Solidity: function mintTo(address to_, uint256 amount_, uint256 lockDuration_) returns(uint256 tokenID)
func (_StakeNFT *StakeNFTTransactor) MintTo(opts *bind.TransactOpts, to_ common.Address, amount_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "mintTo", to_, amount_, lockDuration_)
}

// MintTo is a paid mutator transaction binding the contract method 0x2baf2acb.
//
// Solidity: function mintTo(address to_, uint256 amount_, uint256 lockDuration_) returns(uint256 tokenID)
func (_StakeNFT *StakeNFTSession) MintTo(to_ common.Address, amount_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.MintTo(&_StakeNFT.TransactOpts, to_, amount_, lockDuration_)
}

// MintTo is a paid mutator transaction binding the contract method 0x2baf2acb.
//
// Solidity: function mintTo(address to_, uint256 amount_, uint256 lockDuration_) returns(uint256 tokenID)
func (_StakeNFT *StakeNFTTransactorSession) MintTo(to_ common.Address, amount_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.MintTo(&_StakeNFT.TransactOpts, to_, amount_, lockDuration_)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_StakeNFT *StakeNFTTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_StakeNFT *StakeNFTSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.SafeTransferFrom(&_StakeNFT.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_StakeNFT *StakeNFTTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.SafeTransferFrom(&_StakeNFT.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_StakeNFT *StakeNFTTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_StakeNFT *StakeNFTSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _StakeNFT.Contract.SafeTransferFrom0(&_StakeNFT.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_StakeNFT *StakeNFTTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _StakeNFT.Contract.SafeTransferFrom0(&_StakeNFT.TransactOpts, from, to, tokenId, _data)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_StakeNFT *StakeNFTTransactor) SetAdmin(opts *bind.TransactOpts, admin_ common.Address) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "setAdmin", admin_)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_StakeNFT *StakeNFTSession) SetAdmin(admin_ common.Address) (*types.Transaction, error) {
	return _StakeNFT.Contract.SetAdmin(&_StakeNFT.TransactOpts, admin_)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_StakeNFT *StakeNFTTransactorSession) SetAdmin(admin_ common.Address) (*types.Transaction, error) {
	return _StakeNFT.Contract.SetAdmin(&_StakeNFT.TransactOpts, admin_)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_StakeNFT *StakeNFTTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_StakeNFT *StakeNFTSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _StakeNFT.Contract.SetApprovalForAll(&_StakeNFT.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_StakeNFT *StakeNFTTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _StakeNFT.Contract.SetApprovalForAll(&_StakeNFT.TransactOpts, operator, approved)
}

// SkimExcessEth is a paid mutator transaction binding the contract method 0x971b505b.
//
// Solidity: function skimExcessEth(address to_) returns(uint256 excess)
func (_StakeNFT *StakeNFTTransactor) SkimExcessEth(opts *bind.TransactOpts, to_ common.Address) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "skimExcessEth", to_)
}

// SkimExcessEth is a paid mutator transaction binding the contract method 0x971b505b.
//
// Solidity: function skimExcessEth(address to_) returns(uint256 excess)
func (_StakeNFT *StakeNFTSession) SkimExcessEth(to_ common.Address) (*types.Transaction, error) {
	return _StakeNFT.Contract.SkimExcessEth(&_StakeNFT.TransactOpts, to_)
}

// SkimExcessEth is a paid mutator transaction binding the contract method 0x971b505b.
//
// Solidity: function skimExcessEth(address to_) returns(uint256 excess)
func (_StakeNFT *StakeNFTTransactorSession) SkimExcessEth(to_ common.Address) (*types.Transaction, error) {
	return _StakeNFT.Contract.SkimExcessEth(&_StakeNFT.TransactOpts, to_)
}

// SkimExcessToken is a paid mutator transaction binding the contract method 0x7aa507fb.
//
// Solidity: function skimExcessToken(address to_) returns(uint256 excess)
func (_StakeNFT *StakeNFTTransactor) SkimExcessToken(opts *bind.TransactOpts, to_ common.Address) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "skimExcessToken", to_)
}

// SkimExcessToken is a paid mutator transaction binding the contract method 0x7aa507fb.
//
// Solidity: function skimExcessToken(address to_) returns(uint256 excess)
func (_StakeNFT *StakeNFTSession) SkimExcessToken(to_ common.Address) (*types.Transaction, error) {
	return _StakeNFT.Contract.SkimExcessToken(&_StakeNFT.TransactOpts, to_)
}

// SkimExcessToken is a paid mutator transaction binding the contract method 0x7aa507fb.
//
// Solidity: function skimExcessToken(address to_) returns(uint256 excess)
func (_StakeNFT *StakeNFTTransactorSession) SkimExcessToken(to_ common.Address) (*types.Transaction, error) {
	return _StakeNFT.Contract.SkimExcessToken(&_StakeNFT.TransactOpts, to_)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_StakeNFT *StakeNFTTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_StakeNFT *StakeNFTSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.TransferFrom(&_StakeNFT.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_StakeNFT *StakeNFTTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _StakeNFT.Contract.TransferFrom(&_StakeNFT.TransactOpts, from, to, tokenId)
}

// TripCB is a paid mutator transaction binding the contract method 0xadfdc03f.
//
// Solidity: function tripCB() returns()
func (_StakeNFT *StakeNFTTransactor) TripCB(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakeNFT.contract.Transact(opts, "tripCB")
}

// TripCB is a paid mutator transaction binding the contract method 0xadfdc03f.
//
// Solidity: function tripCB() returns()
func (_StakeNFT *StakeNFTSession) TripCB() (*types.Transaction, error) {
	return _StakeNFT.Contract.TripCB(&_StakeNFT.TransactOpts)
}

// TripCB is a paid mutator transaction binding the contract method 0xadfdc03f.
//
// Solidity: function tripCB() returns()
func (_StakeNFT *StakeNFTTransactorSession) TripCB() (*types.Transaction, error) {
	return _StakeNFT.Contract.TripCB(&_StakeNFT.TransactOpts)
}

// StakeNFTApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the StakeNFT contract.
type StakeNFTApprovalIterator struct {
	Event *StakeNFTApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakeNFTApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakeNFTApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakeNFTApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakeNFTApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakeNFTApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakeNFTApproval represents a Approval event raised by the StakeNFT contract.
type StakeNFTApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_StakeNFT *StakeNFTFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*StakeNFTApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _StakeNFT.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &StakeNFTApprovalIterator{contract: _StakeNFT.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_StakeNFT *StakeNFTFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *StakeNFTApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _StakeNFT.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakeNFTApproval)
				if err := _StakeNFT.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_StakeNFT *StakeNFTFilterer) ParseApproval(log types.Log) (*StakeNFTApproval, error) {
	event := new(StakeNFTApproval)
	if err := _StakeNFT.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakeNFTApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the StakeNFT contract.
type StakeNFTApprovalForAllIterator struct {
	Event *StakeNFTApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakeNFTApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakeNFTApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakeNFTApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakeNFTApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakeNFTApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakeNFTApprovalForAll represents a ApprovalForAll event raised by the StakeNFT contract.
type StakeNFTApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_StakeNFT *StakeNFTFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*StakeNFTApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _StakeNFT.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &StakeNFTApprovalForAllIterator{contract: _StakeNFT.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_StakeNFT *StakeNFTFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *StakeNFTApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _StakeNFT.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakeNFTApprovalForAll)
				if err := _StakeNFT.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_StakeNFT *StakeNFTFilterer) ParseApprovalForAll(log types.Log) (*StakeNFTApprovalForAll, error) {
	event := new(StakeNFTApprovalForAll)
	if err := _StakeNFT.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakeNFTTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the StakeNFT contract.
type StakeNFTTransferIterator struct {
	Event *StakeNFTTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakeNFTTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakeNFTTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakeNFTTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakeNFTTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakeNFTTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakeNFTTransfer represents a Transfer event raised by the StakeNFT contract.
type StakeNFTTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_StakeNFT *StakeNFTFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*StakeNFTTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _StakeNFT.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &StakeNFTTransferIterator{contract: _StakeNFT.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_StakeNFT *StakeNFTFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *StakeNFTTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _StakeNFT.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakeNFTTransfer)
				if err := _StakeNFT.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_StakeNFT *StakeNFTFilterer) ParseTransfer(log types.Log) (*StakeNFTTransfer, error) {
	event := new(StakeNFTTransfer)
	if err := _StakeNFT.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakeNFTBaseMetaData contains all meta data concerning the StakeNFTBase contract.
var StakeNFTBaseMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payoutEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoutMadToken\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"burnTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payoutEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoutMadToken\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circuitBreakerState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"collectEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"collectEthTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"collectToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"collectTokenTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"magic_\",\"type\":\"uint8\"}],\"name\":\"depositEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"magic_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"estimateEthCollection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateExcessEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"excess\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateExcessToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"excess\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"estimateTokenCollection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccumulatorScaleFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthAccumulator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accumulator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slush\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"getMetamorphicContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freeAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawFreeAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumulatorEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumulatorToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenAccumulator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accumulator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slush\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalReserveEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalReserveMadToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isAllowedProposal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration_\",\"type\":\"uint256\"}],\"name\":\"lockOwnPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration_\",\"type\":\"uint256\"}],\"name\":\"lockPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration_\",\"type\":\"uint256\"}],\"name\":\"lockWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration_\",\"type\":\"uint256\"}],\"name\":\"mintTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"}],\"name\":\"skimExcessEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"excess\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"}],\"name\":\"skimExcessToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"excess\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tripCB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// StakeNFTBaseABI is the input ABI used to generate the binding from.
// Deprecated: Use StakeNFTBaseMetaData.ABI instead.
var StakeNFTBaseABI = StakeNFTBaseMetaData.ABI

// StakeNFTBase is an auto generated Go binding around an Ethereum contract.
type StakeNFTBase struct {
	StakeNFTBaseCaller     // Read-only binding to the contract
	StakeNFTBaseTransactor // Write-only binding to the contract
	StakeNFTBaseFilterer   // Log filterer for contract events
}

// StakeNFTBaseCaller is an auto generated read-only Go binding around an Ethereum contract.
type StakeNFTBaseCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakeNFTBaseTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StakeNFTBaseTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakeNFTBaseFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StakeNFTBaseFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakeNFTBaseSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StakeNFTBaseSession struct {
	Contract     *StakeNFTBase     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StakeNFTBaseCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StakeNFTBaseCallerSession struct {
	Contract *StakeNFTBaseCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// StakeNFTBaseTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StakeNFTBaseTransactorSession struct {
	Contract     *StakeNFTBaseTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// StakeNFTBaseRaw is an auto generated low-level Go binding around an Ethereum contract.
type StakeNFTBaseRaw struct {
	Contract *StakeNFTBase // Generic contract binding to access the raw methods on
}

// StakeNFTBaseCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StakeNFTBaseCallerRaw struct {
	Contract *StakeNFTBaseCaller // Generic read-only contract binding to access the raw methods on
}

// StakeNFTBaseTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StakeNFTBaseTransactorRaw struct {
	Contract *StakeNFTBaseTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStakeNFTBase creates a new instance of StakeNFTBase, bound to a specific deployed contract.
func NewStakeNFTBase(address common.Address, backend bind.ContractBackend) (*StakeNFTBase, error) {
	contract, err := bindStakeNFTBase(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StakeNFTBase{StakeNFTBaseCaller: StakeNFTBaseCaller{contract: contract}, StakeNFTBaseTransactor: StakeNFTBaseTransactor{contract: contract}, StakeNFTBaseFilterer: StakeNFTBaseFilterer{contract: contract}}, nil
}

// NewStakeNFTBaseCaller creates a new read-only instance of StakeNFTBase, bound to a specific deployed contract.
func NewStakeNFTBaseCaller(address common.Address, caller bind.ContractCaller) (*StakeNFTBaseCaller, error) {
	contract, err := bindStakeNFTBase(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StakeNFTBaseCaller{contract: contract}, nil
}

// NewStakeNFTBaseTransactor creates a new write-only instance of StakeNFTBase, bound to a specific deployed contract.
func NewStakeNFTBaseTransactor(address common.Address, transactor bind.ContractTransactor) (*StakeNFTBaseTransactor, error) {
	contract, err := bindStakeNFTBase(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StakeNFTBaseTransactor{contract: contract}, nil
}

// NewStakeNFTBaseFilterer creates a new log filterer instance of StakeNFTBase, bound to a specific deployed contract.
func NewStakeNFTBaseFilterer(address common.Address, filterer bind.ContractFilterer) (*StakeNFTBaseFilterer, error) {
	contract, err := bindStakeNFTBase(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StakeNFTBaseFilterer{contract: contract}, nil
}

// bindStakeNFTBase binds a generic wrapper to an already deployed contract.
func bindStakeNFTBase(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StakeNFTBaseABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakeNFTBase *StakeNFTBaseRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakeNFTBase.Contract.StakeNFTBaseCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakeNFTBase *StakeNFTBaseRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakeNFTBase.Contract.StakeNFTBaseTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakeNFTBase *StakeNFTBaseRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakeNFTBase.Contract.StakeNFTBaseTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakeNFTBase *StakeNFTBaseCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakeNFTBase.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakeNFTBase *StakeNFTBaseTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakeNFTBase.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakeNFTBase *StakeNFTBaseTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakeNFTBase.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_StakeNFTBase *StakeNFTBaseCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _StakeNFTBase.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_StakeNFTBase *StakeNFTBaseSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _StakeNFTBase.Contract.BalanceOf(&_StakeNFTBase.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_StakeNFTBase *StakeNFTBaseCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _StakeNFTBase.Contract.BalanceOf(&_StakeNFTBase.CallOpts, owner)
}

// CircuitBreakerState is a free data retrieval call binding the contract method 0x89465c62.
//
// Solidity: function circuitBreakerState() view returns(bool)
func (_StakeNFTBase *StakeNFTBaseCaller) CircuitBreakerState(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _StakeNFTBase.contract.Call(opts, &out, "circuitBreakerState")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CircuitBreakerState is a free data retrieval call binding the contract method 0x89465c62.
//
// Solidity: function circuitBreakerState() view returns(bool)
func (_StakeNFTBase *StakeNFTBaseSession) CircuitBreakerState() (bool, error) {
	return _StakeNFTBase.Contract.CircuitBreakerState(&_StakeNFTBase.CallOpts)
}

// CircuitBreakerState is a free data retrieval call binding the contract method 0x89465c62.
//
// Solidity: function circuitBreakerState() view returns(bool)
func (_StakeNFTBase *StakeNFTBaseCallerSession) CircuitBreakerState() (bool, error) {
	return _StakeNFTBase.Contract.CircuitBreakerState(&_StakeNFTBase.CallOpts)
}

// EstimateEthCollection is a free data retrieval call binding the contract method 0x20ea0d48.
//
// Solidity: function estimateEthCollection(uint256 tokenID_) view returns(uint256 payout)
func (_StakeNFTBase *StakeNFTBaseCaller) EstimateEthCollection(opts *bind.CallOpts, tokenID_ *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _StakeNFTBase.contract.Call(opts, &out, "estimateEthCollection", tokenID_)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EstimateEthCollection is a free data retrieval call binding the contract method 0x20ea0d48.
//
// Solidity: function estimateEthCollection(uint256 tokenID_) view returns(uint256 payout)
func (_StakeNFTBase *StakeNFTBaseSession) EstimateEthCollection(tokenID_ *big.Int) (*big.Int, error) {
	return _StakeNFTBase.Contract.EstimateEthCollection(&_StakeNFTBase.CallOpts, tokenID_)
}

// EstimateEthCollection is a free data retrieval call binding the contract method 0x20ea0d48.
//
// Solidity: function estimateEthCollection(uint256 tokenID_) view returns(uint256 payout)
func (_StakeNFTBase *StakeNFTBaseCallerSession) EstimateEthCollection(tokenID_ *big.Int) (*big.Int, error) {
	return _StakeNFTBase.Contract.EstimateEthCollection(&_StakeNFTBase.CallOpts, tokenID_)
}

// EstimateExcessEth is a free data retrieval call binding the contract method 0x905953ed.
//
// Solidity: function estimateExcessEth() view returns(uint256 excess)
func (_StakeNFTBase *StakeNFTBaseCaller) EstimateExcessEth(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakeNFTBase.contract.Call(opts, &out, "estimateExcessEth")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EstimateExcessEth is a free data retrieval call binding the contract method 0x905953ed.
//
// Solidity: function estimateExcessEth() view returns(uint256 excess)
func (_StakeNFTBase *StakeNFTBaseSession) EstimateExcessEth() (*big.Int, error) {
	return _StakeNFTBase.Contract.EstimateExcessEth(&_StakeNFTBase.CallOpts)
}

// EstimateExcessEth is a free data retrieval call binding the contract method 0x905953ed.
//
// Solidity: function estimateExcessEth() view returns(uint256 excess)
func (_StakeNFTBase *StakeNFTBaseCallerSession) EstimateExcessEth() (*big.Int, error) {
	return _StakeNFTBase.Contract.EstimateExcessEth(&_StakeNFTBase.CallOpts)
}

// EstimateExcessToken is a free data retrieval call binding the contract method 0x3eed3eff.
//
// Solidity: function estimateExcessToken() view returns(uint256 excess)
func (_StakeNFTBase *StakeNFTBaseCaller) EstimateExcessToken(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakeNFTBase.contract.Call(opts, &out, "estimateExcessToken")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EstimateExcessToken is a free data retrieval call binding the contract method 0x3eed3eff.
//
// Solidity: function estimateExcessToken() view returns(uint256 excess)
func (_StakeNFTBase *StakeNFTBaseSession) EstimateExcessToken() (*big.Int, error) {
	return _StakeNFTBase.Contract.EstimateExcessToken(&_StakeNFTBase.CallOpts)
}

// EstimateExcessToken is a free data retrieval call binding the contract method 0x3eed3eff.
//
// Solidity: function estimateExcessToken() view returns(uint256 excess)
func (_StakeNFTBase *StakeNFTBaseCallerSession) EstimateExcessToken() (*big.Int, error) {
	return _StakeNFTBase.Contract.EstimateExcessToken(&_StakeNFTBase.CallOpts)
}

// EstimateTokenCollection is a free data retrieval call binding the contract method 0x93c5748d.
//
// Solidity: function estimateTokenCollection(uint256 tokenID_) view returns(uint256 payout)
func (_StakeNFTBase *StakeNFTBaseCaller) EstimateTokenCollection(opts *bind.CallOpts, tokenID_ *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _StakeNFTBase.contract.Call(opts, &out, "estimateTokenCollection", tokenID_)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EstimateTokenCollection is a free data retrieval call binding the contract method 0x93c5748d.
//
// Solidity: function estimateTokenCollection(uint256 tokenID_) view returns(uint256 payout)
func (_StakeNFTBase *StakeNFTBaseSession) EstimateTokenCollection(tokenID_ *big.Int) (*big.Int, error) {
	return _StakeNFTBase.Contract.EstimateTokenCollection(&_StakeNFTBase.CallOpts, tokenID_)
}

// EstimateTokenCollection is a free data retrieval call binding the contract method 0x93c5748d.
//
// Solidity: function estimateTokenCollection(uint256 tokenID_) view returns(uint256 payout)
func (_StakeNFTBase *StakeNFTBaseCallerSession) EstimateTokenCollection(tokenID_ *big.Int) (*big.Int, error) {
	return _StakeNFTBase.Contract.EstimateTokenCollection(&_StakeNFTBase.CallOpts, tokenID_)
}

// GetAccumulatorScaleFactor is a free data retrieval call binding the contract method 0x99785132.
//
// Solidity: function getAccumulatorScaleFactor() pure returns(uint256)
func (_StakeNFTBase *StakeNFTBaseCaller) GetAccumulatorScaleFactor(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakeNFTBase.contract.Call(opts, &out, "getAccumulatorScaleFactor")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAccumulatorScaleFactor is a free data retrieval call binding the contract method 0x99785132.
//
// Solidity: function getAccumulatorScaleFactor() pure returns(uint256)
func (_StakeNFTBase *StakeNFTBaseSession) GetAccumulatorScaleFactor() (*big.Int, error) {
	return _StakeNFTBase.Contract.GetAccumulatorScaleFactor(&_StakeNFTBase.CallOpts)
}

// GetAccumulatorScaleFactor is a free data retrieval call binding the contract method 0x99785132.
//
// Solidity: function getAccumulatorScaleFactor() pure returns(uint256)
func (_StakeNFTBase *StakeNFTBaseCallerSession) GetAccumulatorScaleFactor() (*big.Int, error) {
	return _StakeNFTBase.Contract.GetAccumulatorScaleFactor(&_StakeNFTBase.CallOpts)
}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_StakeNFTBase *StakeNFTBaseCaller) GetAdmin(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _StakeNFTBase.contract.Call(opts, &out, "getAdmin")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_StakeNFTBase *StakeNFTBaseSession) GetAdmin() (common.Address, error) {
	return _StakeNFTBase.Contract.GetAdmin(&_StakeNFTBase.CallOpts)
}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_StakeNFTBase *StakeNFTBaseCallerSession) GetAdmin() (common.Address, error) {
	return _StakeNFTBase.Contract.GetAdmin(&_StakeNFTBase.CallOpts)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_StakeNFTBase *StakeNFTBaseCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _StakeNFTBase.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_StakeNFTBase *StakeNFTBaseSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _StakeNFTBase.Contract.GetApproved(&_StakeNFTBase.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_StakeNFTBase *StakeNFTBaseCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _StakeNFTBase.Contract.GetApproved(&_StakeNFTBase.CallOpts, tokenId)
}

// GetEthAccumulator is a free data retrieval call binding the contract method 0x548652d2.
//
// Solidity: function getEthAccumulator() view returns(uint256 accumulator, uint256 slush)
func (_StakeNFTBase *StakeNFTBaseCaller) GetEthAccumulator(opts *bind.CallOpts) (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	var out []interface{}
	err := _StakeNFTBase.contract.Call(opts, &out, "getEthAccumulator")

	outstruct := new(struct {
		Accumulator *big.Int
		Slush       *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Accumulator = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Slush = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetEthAccumulator is a free data retrieval call binding the contract method 0x548652d2.
//
// Solidity: function getEthAccumulator() view returns(uint256 accumulator, uint256 slush)
func (_StakeNFTBase *StakeNFTBaseSession) GetEthAccumulator() (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	return _StakeNFTBase.Contract.GetEthAccumulator(&_StakeNFTBase.CallOpts)
}

// GetEthAccumulator is a free data retrieval call binding the contract method 0x548652d2.
//
// Solidity: function getEthAccumulator() view returns(uint256 accumulator, uint256 slush)
func (_StakeNFTBase *StakeNFTBaseCallerSession) GetEthAccumulator() (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	return _StakeNFTBase.Contract.GetEthAccumulator(&_StakeNFTBase.CallOpts)
}

// GetGovernance is a free data retrieval call binding the contract method 0x289b3c0d.
//
// Solidity: function getGovernance() view returns(address)
func (_StakeNFTBase *StakeNFTBaseCaller) GetGovernance(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _StakeNFTBase.contract.Call(opts, &out, "getGovernance")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetGovernance is a free data retrieval call binding the contract method 0x289b3c0d.
//
// Solidity: function getGovernance() view returns(address)
func (_StakeNFTBase *StakeNFTBaseSession) GetGovernance() (common.Address, error) {
	return _StakeNFTBase.Contract.GetGovernance(&_StakeNFTBase.CallOpts)
}

// GetGovernance is a free data retrieval call binding the contract method 0x289b3c0d.
//
// Solidity: function getGovernance() view returns(address)
func (_StakeNFTBase *StakeNFTBaseCallerSession) GetGovernance() (common.Address, error) {
	return _StakeNFTBase.Contract.GetGovernance(&_StakeNFTBase.CallOpts)
}

// GetMetamorphicContractAddress is a free data retrieval call binding the contract method 0x8653a465.
//
// Solidity: function getMetamorphicContractAddress(bytes32 _salt, address _factory) pure returns(address)
func (_StakeNFTBase *StakeNFTBaseCaller) GetMetamorphicContractAddress(opts *bind.CallOpts, _salt [32]byte, _factory common.Address) (common.Address, error) {
	var out []interface{}
	err := _StakeNFTBase.contract.Call(opts, &out, "getMetamorphicContractAddress", _salt, _factory)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetMetamorphicContractAddress is a free data retrieval call binding the contract method 0x8653a465.
//
// Solidity: function getMetamorphicContractAddress(bytes32 _salt, address _factory) pure returns(address)
func (_StakeNFTBase *StakeNFTBaseSession) GetMetamorphicContractAddress(_salt [32]byte, _factory common.Address) (common.Address, error) {
	return _StakeNFTBase.Contract.GetMetamorphicContractAddress(&_StakeNFTBase.CallOpts, _salt, _factory)
}

// GetMetamorphicContractAddress is a free data retrieval call binding the contract method 0x8653a465.
//
// Solidity: function getMetamorphicContractAddress(bytes32 _salt, address _factory) pure returns(address)
func (_StakeNFTBase *StakeNFTBaseCallerSession) GetMetamorphicContractAddress(_salt [32]byte, _factory common.Address) (common.Address, error) {
	return _StakeNFTBase.Contract.GetMetamorphicContractAddress(&_StakeNFTBase.CallOpts, _salt, _factory)
}

// GetPosition is a free data retrieval call binding the contract method 0xeb02c301.
//
// Solidity: function getPosition(uint256 tokenID_) view returns(uint256 shares, uint256 freeAfter, uint256 withdrawFreeAfter, uint256 accumulatorEth, uint256 accumulatorToken)
func (_StakeNFTBase *StakeNFTBaseCaller) GetPosition(opts *bind.CallOpts, tokenID_ *big.Int) (struct {
	Shares            *big.Int
	FreeAfter         *big.Int
	WithdrawFreeAfter *big.Int
	AccumulatorEth    *big.Int
	AccumulatorToken  *big.Int
}, error) {
	var out []interface{}
	err := _StakeNFTBase.contract.Call(opts, &out, "getPosition", tokenID_)

	outstruct := new(struct {
		Shares            *big.Int
		FreeAfter         *big.Int
		WithdrawFreeAfter *big.Int
		AccumulatorEth    *big.Int
		AccumulatorToken  *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Shares = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.FreeAfter = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.WithdrawFreeAfter = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.AccumulatorEth = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.AccumulatorToken = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetPosition is a free data retrieval call binding the contract method 0xeb02c301.
//
// Solidity: function getPosition(uint256 tokenID_) view returns(uint256 shares, uint256 freeAfter, uint256 withdrawFreeAfter, uint256 accumulatorEth, uint256 accumulatorToken)
func (_StakeNFTBase *StakeNFTBaseSession) GetPosition(tokenID_ *big.Int) (struct {
	Shares            *big.Int
	FreeAfter         *big.Int
	WithdrawFreeAfter *big.Int
	AccumulatorEth    *big.Int
	AccumulatorToken  *big.Int
}, error) {
	return _StakeNFTBase.Contract.GetPosition(&_StakeNFTBase.CallOpts, tokenID_)
}

// GetPosition is a free data retrieval call binding the contract method 0xeb02c301.
//
// Solidity: function getPosition(uint256 tokenID_) view returns(uint256 shares, uint256 freeAfter, uint256 withdrawFreeAfter, uint256 accumulatorEth, uint256 accumulatorToken)
func (_StakeNFTBase *StakeNFTBaseCallerSession) GetPosition(tokenID_ *big.Int) (struct {
	Shares            *big.Int
	FreeAfter         *big.Int
	WithdrawFreeAfter *big.Int
	AccumulatorEth    *big.Int
	AccumulatorToken  *big.Int
}, error) {
	return _StakeNFTBase.Contract.GetPosition(&_StakeNFTBase.CallOpts, tokenID_)
}

// GetTokenAccumulator is a free data retrieval call binding the contract method 0xc47c6e14.
//
// Solidity: function getTokenAccumulator() view returns(uint256 accumulator, uint256 slush)
func (_StakeNFTBase *StakeNFTBaseCaller) GetTokenAccumulator(opts *bind.CallOpts) (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	var out []interface{}
	err := _StakeNFTBase.contract.Call(opts, &out, "getTokenAccumulator")

	outstruct := new(struct {
		Accumulator *big.Int
		Slush       *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Accumulator = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Slush = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetTokenAccumulator is a free data retrieval call binding the contract method 0xc47c6e14.
//
// Solidity: function getTokenAccumulator() view returns(uint256 accumulator, uint256 slush)
func (_StakeNFTBase *StakeNFTBaseSession) GetTokenAccumulator() (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	return _StakeNFTBase.Contract.GetTokenAccumulator(&_StakeNFTBase.CallOpts)
}

// GetTokenAccumulator is a free data retrieval call binding the contract method 0xc47c6e14.
//
// Solidity: function getTokenAccumulator() view returns(uint256 accumulator, uint256 slush)
func (_StakeNFTBase *StakeNFTBaseCallerSession) GetTokenAccumulator() (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	return _StakeNFTBase.Contract.GetTokenAccumulator(&_StakeNFTBase.CallOpts)
}

// GetTotalReserveEth is a free data retrieval call binding the contract method 0x19b8be2f.
//
// Solidity: function getTotalReserveEth() view returns(uint256)
func (_StakeNFTBase *StakeNFTBaseCaller) GetTotalReserveEth(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakeNFTBase.contract.Call(opts, &out, "getTotalReserveEth")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalReserveEth is a free data retrieval call binding the contract method 0x19b8be2f.
//
// Solidity: function getTotalReserveEth() view returns(uint256)
func (_StakeNFTBase *StakeNFTBaseSession) GetTotalReserveEth() (*big.Int, error) {
	return _StakeNFTBase.Contract.GetTotalReserveEth(&_StakeNFTBase.CallOpts)
}

// GetTotalReserveEth is a free data retrieval call binding the contract method 0x19b8be2f.
//
// Solidity: function getTotalReserveEth() view returns(uint256)
func (_StakeNFTBase *StakeNFTBaseCallerSession) GetTotalReserveEth() (*big.Int, error) {
	return _StakeNFTBase.Contract.GetTotalReserveEth(&_StakeNFTBase.CallOpts)
}

// GetTotalReserveMadToken is a free data retrieval call binding the contract method 0x9aeac659.
//
// Solidity: function getTotalReserveMadToken() view returns(uint256)
func (_StakeNFTBase *StakeNFTBaseCaller) GetTotalReserveMadToken(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakeNFTBase.contract.Call(opts, &out, "getTotalReserveMadToken")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalReserveMadToken is a free data retrieval call binding the contract method 0x9aeac659.
//
// Solidity: function getTotalReserveMadToken() view returns(uint256)
func (_StakeNFTBase *StakeNFTBaseSession) GetTotalReserveMadToken() (*big.Int, error) {
	return _StakeNFTBase.Contract.GetTotalReserveMadToken(&_StakeNFTBase.CallOpts)
}

// GetTotalReserveMadToken is a free data retrieval call binding the contract method 0x9aeac659.
//
// Solidity: function getTotalReserveMadToken() view returns(uint256)
func (_StakeNFTBase *StakeNFTBaseCallerSession) GetTotalReserveMadToken() (*big.Int, error) {
	return _StakeNFTBase.Contract.GetTotalReserveMadToken(&_StakeNFTBase.CallOpts)
}

// GetTotalShares is a free data retrieval call binding the contract method 0xd5002f2e.
//
// Solidity: function getTotalShares() view returns(uint256)
func (_StakeNFTBase *StakeNFTBaseCaller) GetTotalShares(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StakeNFTBase.contract.Call(opts, &out, "getTotalShares")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalShares is a free data retrieval call binding the contract method 0xd5002f2e.
//
// Solidity: function getTotalShares() view returns(uint256)
func (_StakeNFTBase *StakeNFTBaseSession) GetTotalShares() (*big.Int, error) {
	return _StakeNFTBase.Contract.GetTotalShares(&_StakeNFTBase.CallOpts)
}

// GetTotalShares is a free data retrieval call binding the contract method 0xd5002f2e.
//
// Solidity: function getTotalShares() view returns(uint256)
func (_StakeNFTBase *StakeNFTBaseCallerSession) GetTotalShares() (*big.Int, error) {
	return _StakeNFTBase.Contract.GetTotalShares(&_StakeNFTBase.CallOpts)
}

// IsAllowedProposal is a free data retrieval call binding the contract method 0x3771165e.
//
// Solidity: function isAllowedProposal(address addr) view returns(bool)
func (_StakeNFTBase *StakeNFTBaseCaller) IsAllowedProposal(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var out []interface{}
	err := _StakeNFTBase.contract.Call(opts, &out, "isAllowedProposal", addr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsAllowedProposal is a free data retrieval call binding the contract method 0x3771165e.
//
// Solidity: function isAllowedProposal(address addr) view returns(bool)
func (_StakeNFTBase *StakeNFTBaseSession) IsAllowedProposal(addr common.Address) (bool, error) {
	return _StakeNFTBase.Contract.IsAllowedProposal(&_StakeNFTBase.CallOpts, addr)
}

// IsAllowedProposal is a free data retrieval call binding the contract method 0x3771165e.
//
// Solidity: function isAllowedProposal(address addr) view returns(bool)
func (_StakeNFTBase *StakeNFTBaseCallerSession) IsAllowedProposal(addr common.Address) (bool, error) {
	return _StakeNFTBase.Contract.IsAllowedProposal(&_StakeNFTBase.CallOpts, addr)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_StakeNFTBase *StakeNFTBaseCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _StakeNFTBase.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_StakeNFTBase *StakeNFTBaseSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _StakeNFTBase.Contract.IsApprovedForAll(&_StakeNFTBase.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_StakeNFTBase *StakeNFTBaseCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _StakeNFTBase.Contract.IsApprovedForAll(&_StakeNFTBase.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_StakeNFTBase *StakeNFTBaseCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _StakeNFTBase.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_StakeNFTBase *StakeNFTBaseSession) Name() (string, error) {
	return _StakeNFTBase.Contract.Name(&_StakeNFTBase.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_StakeNFTBase *StakeNFTBaseCallerSession) Name() (string, error) {
	return _StakeNFTBase.Contract.Name(&_StakeNFTBase.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_StakeNFTBase *StakeNFTBaseCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _StakeNFTBase.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_StakeNFTBase *StakeNFTBaseSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _StakeNFTBase.Contract.OwnerOf(&_StakeNFTBase.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_StakeNFTBase *StakeNFTBaseCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _StakeNFTBase.Contract.OwnerOf(&_StakeNFTBase.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_StakeNFTBase *StakeNFTBaseCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _StakeNFTBase.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_StakeNFTBase *StakeNFTBaseSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _StakeNFTBase.Contract.SupportsInterface(&_StakeNFTBase.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_StakeNFTBase *StakeNFTBaseCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _StakeNFTBase.Contract.SupportsInterface(&_StakeNFTBase.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_StakeNFTBase *StakeNFTBaseCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _StakeNFTBase.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_StakeNFTBase *StakeNFTBaseSession) Symbol() (string, error) {
	return _StakeNFTBase.Contract.Symbol(&_StakeNFTBase.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_StakeNFTBase *StakeNFTBaseCallerSession) Symbol() (string, error) {
	return _StakeNFTBase.Contract.Symbol(&_StakeNFTBase.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_StakeNFTBase *StakeNFTBaseCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _StakeNFTBase.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_StakeNFTBase *StakeNFTBaseSession) TokenURI(tokenId *big.Int) (string, error) {
	return _StakeNFTBase.Contract.TokenURI(&_StakeNFTBase.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_StakeNFTBase *StakeNFTBaseCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _StakeNFTBase.Contract.TokenURI(&_StakeNFTBase.CallOpts, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_StakeNFTBase *StakeNFTBaseTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _StakeNFTBase.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_StakeNFTBase *StakeNFTBaseSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _StakeNFTBase.Contract.Approve(&_StakeNFTBase.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_StakeNFTBase *StakeNFTBaseTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _StakeNFTBase.Contract.Approve(&_StakeNFTBase.TransactOpts, to, tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenID_) returns(uint256 payoutEth, uint256 payoutMadToken)
func (_StakeNFTBase *StakeNFTBaseTransactor) Burn(opts *bind.TransactOpts, tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFTBase.contract.Transact(opts, "burn", tokenID_)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenID_) returns(uint256 payoutEth, uint256 payoutMadToken)
func (_StakeNFTBase *StakeNFTBaseSession) Burn(tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFTBase.Contract.Burn(&_StakeNFTBase.TransactOpts, tokenID_)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenID_) returns(uint256 payoutEth, uint256 payoutMadToken)
func (_StakeNFTBase *StakeNFTBaseTransactorSession) Burn(tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFTBase.Contract.Burn(&_StakeNFTBase.TransactOpts, tokenID_)
}

// BurnTo is a paid mutator transaction binding the contract method 0xea785a5e.
//
// Solidity: function burnTo(address to_, uint256 tokenID_) returns(uint256 payoutEth, uint256 payoutMadToken)
func (_StakeNFTBase *StakeNFTBaseTransactor) BurnTo(opts *bind.TransactOpts, to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFTBase.contract.Transact(opts, "burnTo", to_, tokenID_)
}

// BurnTo is a paid mutator transaction binding the contract method 0xea785a5e.
//
// Solidity: function burnTo(address to_, uint256 tokenID_) returns(uint256 payoutEth, uint256 payoutMadToken)
func (_StakeNFTBase *StakeNFTBaseSession) BurnTo(to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFTBase.Contract.BurnTo(&_StakeNFTBase.TransactOpts, to_, tokenID_)
}

// BurnTo is a paid mutator transaction binding the contract method 0xea785a5e.
//
// Solidity: function burnTo(address to_, uint256 tokenID_) returns(uint256 payoutEth, uint256 payoutMadToken)
func (_StakeNFTBase *StakeNFTBaseTransactorSession) BurnTo(to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFTBase.Contract.BurnTo(&_StakeNFTBase.TransactOpts, to_, tokenID_)
}

// CollectEth is a paid mutator transaction binding the contract method 0x2a0d8bd1.
//
// Solidity: function collectEth(uint256 tokenID_) returns(uint256 payout)
func (_StakeNFTBase *StakeNFTBaseTransactor) CollectEth(opts *bind.TransactOpts, tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFTBase.contract.Transact(opts, "collectEth", tokenID_)
}

// CollectEth is a paid mutator transaction binding the contract method 0x2a0d8bd1.
//
// Solidity: function collectEth(uint256 tokenID_) returns(uint256 payout)
func (_StakeNFTBase *StakeNFTBaseSession) CollectEth(tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFTBase.Contract.CollectEth(&_StakeNFTBase.TransactOpts, tokenID_)
}

// CollectEth is a paid mutator transaction binding the contract method 0x2a0d8bd1.
//
// Solidity: function collectEth(uint256 tokenID_) returns(uint256 payout)
func (_StakeNFTBase *StakeNFTBaseTransactorSession) CollectEth(tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFTBase.Contract.CollectEth(&_StakeNFTBase.TransactOpts, tokenID_)
}

// CollectEthTo is a paid mutator transaction binding the contract method 0xbe444379.
//
// Solidity: function collectEthTo(address to_, uint256 tokenID_) returns(uint256 payout)
func (_StakeNFTBase *StakeNFTBaseTransactor) CollectEthTo(opts *bind.TransactOpts, to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFTBase.contract.Transact(opts, "collectEthTo", to_, tokenID_)
}

// CollectEthTo is a paid mutator transaction binding the contract method 0xbe444379.
//
// Solidity: function collectEthTo(address to_, uint256 tokenID_) returns(uint256 payout)
func (_StakeNFTBase *StakeNFTBaseSession) CollectEthTo(to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFTBase.Contract.CollectEthTo(&_StakeNFTBase.TransactOpts, to_, tokenID_)
}

// CollectEthTo is a paid mutator transaction binding the contract method 0xbe444379.
//
// Solidity: function collectEthTo(address to_, uint256 tokenID_) returns(uint256 payout)
func (_StakeNFTBase *StakeNFTBaseTransactorSession) CollectEthTo(to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFTBase.Contract.CollectEthTo(&_StakeNFTBase.TransactOpts, to_, tokenID_)
}

// CollectToken is a paid mutator transaction binding the contract method 0xe35c3e28.
//
// Solidity: function collectToken(uint256 tokenID_) returns(uint256 payout)
func (_StakeNFTBase *StakeNFTBaseTransactor) CollectToken(opts *bind.TransactOpts, tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFTBase.contract.Transact(opts, "collectToken", tokenID_)
}

// CollectToken is a paid mutator transaction binding the contract method 0xe35c3e28.
//
// Solidity: function collectToken(uint256 tokenID_) returns(uint256 payout)
func (_StakeNFTBase *StakeNFTBaseSession) CollectToken(tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFTBase.Contract.CollectToken(&_StakeNFTBase.TransactOpts, tokenID_)
}

// CollectToken is a paid mutator transaction binding the contract method 0xe35c3e28.
//
// Solidity: function collectToken(uint256 tokenID_) returns(uint256 payout)
func (_StakeNFTBase *StakeNFTBaseTransactorSession) CollectToken(tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFTBase.Contract.CollectToken(&_StakeNFTBase.TransactOpts, tokenID_)
}

// CollectTokenTo is a paid mutator transaction binding the contract method 0x8853b950.
//
// Solidity: function collectTokenTo(address to_, uint256 tokenID_) returns(uint256 payout)
func (_StakeNFTBase *StakeNFTBaseTransactor) CollectTokenTo(opts *bind.TransactOpts, to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFTBase.contract.Transact(opts, "collectTokenTo", to_, tokenID_)
}

// CollectTokenTo is a paid mutator transaction binding the contract method 0x8853b950.
//
// Solidity: function collectTokenTo(address to_, uint256 tokenID_) returns(uint256 payout)
func (_StakeNFTBase *StakeNFTBaseSession) CollectTokenTo(to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFTBase.Contract.CollectTokenTo(&_StakeNFTBase.TransactOpts, to_, tokenID_)
}

// CollectTokenTo is a paid mutator transaction binding the contract method 0x8853b950.
//
// Solidity: function collectTokenTo(address to_, uint256 tokenID_) returns(uint256 payout)
func (_StakeNFTBase *StakeNFTBaseTransactorSession) CollectTokenTo(to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _StakeNFTBase.Contract.CollectTokenTo(&_StakeNFTBase.TransactOpts, to_, tokenID_)
}

// DepositEth is a paid mutator transaction binding the contract method 0x99a89ecc.
//
// Solidity: function depositEth(uint8 magic_) payable returns()
func (_StakeNFTBase *StakeNFTBaseTransactor) DepositEth(opts *bind.TransactOpts, magic_ uint8) (*types.Transaction, error) {
	return _StakeNFTBase.contract.Transact(opts, "depositEth", magic_)
}

// DepositEth is a paid mutator transaction binding the contract method 0x99a89ecc.
//
// Solidity: function depositEth(uint8 magic_) payable returns()
func (_StakeNFTBase *StakeNFTBaseSession) DepositEth(magic_ uint8) (*types.Transaction, error) {
	return _StakeNFTBase.Contract.DepositEth(&_StakeNFTBase.TransactOpts, magic_)
}

// DepositEth is a paid mutator transaction binding the contract method 0x99a89ecc.
//
// Solidity: function depositEth(uint8 magic_) payable returns()
func (_StakeNFTBase *StakeNFTBaseTransactorSession) DepositEth(magic_ uint8) (*types.Transaction, error) {
	return _StakeNFTBase.Contract.DepositEth(&_StakeNFTBase.TransactOpts, magic_)
}

// DepositToken is a paid mutator transaction binding the contract method 0x8191f5e5.
//
// Solidity: function depositToken(uint8 magic_, uint256 amount_) returns()
func (_StakeNFTBase *StakeNFTBaseTransactor) DepositToken(opts *bind.TransactOpts, magic_ uint8, amount_ *big.Int) (*types.Transaction, error) {
	return _StakeNFTBase.contract.Transact(opts, "depositToken", magic_, amount_)
}

// DepositToken is a paid mutator transaction binding the contract method 0x8191f5e5.
//
// Solidity: function depositToken(uint8 magic_, uint256 amount_) returns()
func (_StakeNFTBase *StakeNFTBaseSession) DepositToken(magic_ uint8, amount_ *big.Int) (*types.Transaction, error) {
	return _StakeNFTBase.Contract.DepositToken(&_StakeNFTBase.TransactOpts, magic_, amount_)
}

// DepositToken is a paid mutator transaction binding the contract method 0x8191f5e5.
//
// Solidity: function depositToken(uint8 magic_, uint256 amount_) returns()
func (_StakeNFTBase *StakeNFTBaseTransactorSession) DepositToken(magic_ uint8, amount_ *big.Int) (*types.Transaction, error) {
	return _StakeNFTBase.Contract.DepositToken(&_StakeNFTBase.TransactOpts, magic_, amount_)
}

// LockOwnPosition is a paid mutator transaction binding the contract method 0xe42a673c.
//
// Solidity: function lockOwnPosition(uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_StakeNFTBase *StakeNFTBaseTransactor) LockOwnPosition(opts *bind.TransactOpts, tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _StakeNFTBase.contract.Transact(opts, "lockOwnPosition", tokenID_, lockDuration_)
}

// LockOwnPosition is a paid mutator transaction binding the contract method 0xe42a673c.
//
// Solidity: function lockOwnPosition(uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_StakeNFTBase *StakeNFTBaseSession) LockOwnPosition(tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _StakeNFTBase.Contract.LockOwnPosition(&_StakeNFTBase.TransactOpts, tokenID_, lockDuration_)
}

// LockOwnPosition is a paid mutator transaction binding the contract method 0xe42a673c.
//
// Solidity: function lockOwnPosition(uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_StakeNFTBase *StakeNFTBaseTransactorSession) LockOwnPosition(tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _StakeNFTBase.Contract.LockOwnPosition(&_StakeNFTBase.TransactOpts, tokenID_, lockDuration_)
}

// LockPosition is a paid mutator transaction binding the contract method 0x0cc65dfb.
//
// Solidity: function lockPosition(address caller_, uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_StakeNFTBase *StakeNFTBaseTransactor) LockPosition(opts *bind.TransactOpts, caller_ common.Address, tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _StakeNFTBase.contract.Transact(opts, "lockPosition", caller_, tokenID_, lockDuration_)
}

// LockPosition is a paid mutator transaction binding the contract method 0x0cc65dfb.
//
// Solidity: function lockPosition(address caller_, uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_StakeNFTBase *StakeNFTBaseSession) LockPosition(caller_ common.Address, tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _StakeNFTBase.Contract.LockPosition(&_StakeNFTBase.TransactOpts, caller_, tokenID_, lockDuration_)
}

// LockPosition is a paid mutator transaction binding the contract method 0x0cc65dfb.
//
// Solidity: function lockPosition(address caller_, uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_StakeNFTBase *StakeNFTBaseTransactorSession) LockPosition(caller_ common.Address, tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _StakeNFTBase.Contract.LockPosition(&_StakeNFTBase.TransactOpts, caller_, tokenID_, lockDuration_)
}

// LockWithdraw is a paid mutator transaction binding the contract method 0x0e4eb15b.
//
// Solidity: function lockWithdraw(uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_StakeNFTBase *StakeNFTBaseTransactor) LockWithdraw(opts *bind.TransactOpts, tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _StakeNFTBase.contract.Transact(opts, "lockWithdraw", tokenID_, lockDuration_)
}

// LockWithdraw is a paid mutator transaction binding the contract method 0x0e4eb15b.
//
// Solidity: function lockWithdraw(uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_StakeNFTBase *StakeNFTBaseSession) LockWithdraw(tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _StakeNFTBase.Contract.LockWithdraw(&_StakeNFTBase.TransactOpts, tokenID_, lockDuration_)
}

// LockWithdraw is a paid mutator transaction binding the contract method 0x0e4eb15b.
//
// Solidity: function lockWithdraw(uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_StakeNFTBase *StakeNFTBaseTransactorSession) LockWithdraw(tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _StakeNFTBase.Contract.LockWithdraw(&_StakeNFTBase.TransactOpts, tokenID_, lockDuration_)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 amount_) returns(uint256 tokenID)
func (_StakeNFTBase *StakeNFTBaseTransactor) Mint(opts *bind.TransactOpts, amount_ *big.Int) (*types.Transaction, error) {
	return _StakeNFTBase.contract.Transact(opts, "mint", amount_)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 amount_) returns(uint256 tokenID)
func (_StakeNFTBase *StakeNFTBaseSession) Mint(amount_ *big.Int) (*types.Transaction, error) {
	return _StakeNFTBase.Contract.Mint(&_StakeNFTBase.TransactOpts, amount_)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 amount_) returns(uint256 tokenID)
func (_StakeNFTBase *StakeNFTBaseTransactorSession) Mint(amount_ *big.Int) (*types.Transaction, error) {
	return _StakeNFTBase.Contract.Mint(&_StakeNFTBase.TransactOpts, amount_)
}

// MintTo is a paid mutator transaction binding the contract method 0x2baf2acb.
//
// Solidity: function mintTo(address to_, uint256 amount_, uint256 lockDuration_) returns(uint256 tokenID)
func (_StakeNFTBase *StakeNFTBaseTransactor) MintTo(opts *bind.TransactOpts, to_ common.Address, amount_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _StakeNFTBase.contract.Transact(opts, "mintTo", to_, amount_, lockDuration_)
}

// MintTo is a paid mutator transaction binding the contract method 0x2baf2acb.
//
// Solidity: function mintTo(address to_, uint256 amount_, uint256 lockDuration_) returns(uint256 tokenID)
func (_StakeNFTBase *StakeNFTBaseSession) MintTo(to_ common.Address, amount_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _StakeNFTBase.Contract.MintTo(&_StakeNFTBase.TransactOpts, to_, amount_, lockDuration_)
}

// MintTo is a paid mutator transaction binding the contract method 0x2baf2acb.
//
// Solidity: function mintTo(address to_, uint256 amount_, uint256 lockDuration_) returns(uint256 tokenID)
func (_StakeNFTBase *StakeNFTBaseTransactorSession) MintTo(to_ common.Address, amount_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _StakeNFTBase.Contract.MintTo(&_StakeNFTBase.TransactOpts, to_, amount_, lockDuration_)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_StakeNFTBase *StakeNFTBaseTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _StakeNFTBase.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_StakeNFTBase *StakeNFTBaseSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _StakeNFTBase.Contract.SafeTransferFrom(&_StakeNFTBase.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_StakeNFTBase *StakeNFTBaseTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _StakeNFTBase.Contract.SafeTransferFrom(&_StakeNFTBase.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_StakeNFTBase *StakeNFTBaseTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _StakeNFTBase.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_StakeNFTBase *StakeNFTBaseSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _StakeNFTBase.Contract.SafeTransferFrom0(&_StakeNFTBase.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_StakeNFTBase *StakeNFTBaseTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _StakeNFTBase.Contract.SafeTransferFrom0(&_StakeNFTBase.TransactOpts, from, to, tokenId, _data)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_StakeNFTBase *StakeNFTBaseTransactor) SetAdmin(opts *bind.TransactOpts, admin_ common.Address) (*types.Transaction, error) {
	return _StakeNFTBase.contract.Transact(opts, "setAdmin", admin_)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_StakeNFTBase *StakeNFTBaseSession) SetAdmin(admin_ common.Address) (*types.Transaction, error) {
	return _StakeNFTBase.Contract.SetAdmin(&_StakeNFTBase.TransactOpts, admin_)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_StakeNFTBase *StakeNFTBaseTransactorSession) SetAdmin(admin_ common.Address) (*types.Transaction, error) {
	return _StakeNFTBase.Contract.SetAdmin(&_StakeNFTBase.TransactOpts, admin_)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_StakeNFTBase *StakeNFTBaseTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _StakeNFTBase.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_StakeNFTBase *StakeNFTBaseSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _StakeNFTBase.Contract.SetApprovalForAll(&_StakeNFTBase.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_StakeNFTBase *StakeNFTBaseTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _StakeNFTBase.Contract.SetApprovalForAll(&_StakeNFTBase.TransactOpts, operator, approved)
}

// SkimExcessEth is a paid mutator transaction binding the contract method 0x971b505b.
//
// Solidity: function skimExcessEth(address to_) returns(uint256 excess)
func (_StakeNFTBase *StakeNFTBaseTransactor) SkimExcessEth(opts *bind.TransactOpts, to_ common.Address) (*types.Transaction, error) {
	return _StakeNFTBase.contract.Transact(opts, "skimExcessEth", to_)
}

// SkimExcessEth is a paid mutator transaction binding the contract method 0x971b505b.
//
// Solidity: function skimExcessEth(address to_) returns(uint256 excess)
func (_StakeNFTBase *StakeNFTBaseSession) SkimExcessEth(to_ common.Address) (*types.Transaction, error) {
	return _StakeNFTBase.Contract.SkimExcessEth(&_StakeNFTBase.TransactOpts, to_)
}

// SkimExcessEth is a paid mutator transaction binding the contract method 0x971b505b.
//
// Solidity: function skimExcessEth(address to_) returns(uint256 excess)
func (_StakeNFTBase *StakeNFTBaseTransactorSession) SkimExcessEth(to_ common.Address) (*types.Transaction, error) {
	return _StakeNFTBase.Contract.SkimExcessEth(&_StakeNFTBase.TransactOpts, to_)
}

// SkimExcessToken is a paid mutator transaction binding the contract method 0x7aa507fb.
//
// Solidity: function skimExcessToken(address to_) returns(uint256 excess)
func (_StakeNFTBase *StakeNFTBaseTransactor) SkimExcessToken(opts *bind.TransactOpts, to_ common.Address) (*types.Transaction, error) {
	return _StakeNFTBase.contract.Transact(opts, "skimExcessToken", to_)
}

// SkimExcessToken is a paid mutator transaction binding the contract method 0x7aa507fb.
//
// Solidity: function skimExcessToken(address to_) returns(uint256 excess)
func (_StakeNFTBase *StakeNFTBaseSession) SkimExcessToken(to_ common.Address) (*types.Transaction, error) {
	return _StakeNFTBase.Contract.SkimExcessToken(&_StakeNFTBase.TransactOpts, to_)
}

// SkimExcessToken is a paid mutator transaction binding the contract method 0x7aa507fb.
//
// Solidity: function skimExcessToken(address to_) returns(uint256 excess)
func (_StakeNFTBase *StakeNFTBaseTransactorSession) SkimExcessToken(to_ common.Address) (*types.Transaction, error) {
	return _StakeNFTBase.Contract.SkimExcessToken(&_StakeNFTBase.TransactOpts, to_)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_StakeNFTBase *StakeNFTBaseTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _StakeNFTBase.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_StakeNFTBase *StakeNFTBaseSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _StakeNFTBase.Contract.TransferFrom(&_StakeNFTBase.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_StakeNFTBase *StakeNFTBaseTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _StakeNFTBase.Contract.TransferFrom(&_StakeNFTBase.TransactOpts, from, to, tokenId)
}

// TripCB is a paid mutator transaction binding the contract method 0xadfdc03f.
//
// Solidity: function tripCB() returns()
func (_StakeNFTBase *StakeNFTBaseTransactor) TripCB(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakeNFTBase.contract.Transact(opts, "tripCB")
}

// TripCB is a paid mutator transaction binding the contract method 0xadfdc03f.
//
// Solidity: function tripCB() returns()
func (_StakeNFTBase *StakeNFTBaseSession) TripCB() (*types.Transaction, error) {
	return _StakeNFTBase.Contract.TripCB(&_StakeNFTBase.TransactOpts)
}

// TripCB is a paid mutator transaction binding the contract method 0xadfdc03f.
//
// Solidity: function tripCB() returns()
func (_StakeNFTBase *StakeNFTBaseTransactorSession) TripCB() (*types.Transaction, error) {
	return _StakeNFTBase.Contract.TripCB(&_StakeNFTBase.TransactOpts)
}

// StakeNFTBaseApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the StakeNFTBase contract.
type StakeNFTBaseApprovalIterator struct {
	Event *StakeNFTBaseApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakeNFTBaseApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakeNFTBaseApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakeNFTBaseApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakeNFTBaseApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakeNFTBaseApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakeNFTBaseApproval represents a Approval event raised by the StakeNFTBase contract.
type StakeNFTBaseApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_StakeNFTBase *StakeNFTBaseFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*StakeNFTBaseApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _StakeNFTBase.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &StakeNFTBaseApprovalIterator{contract: _StakeNFTBase.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_StakeNFTBase *StakeNFTBaseFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *StakeNFTBaseApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _StakeNFTBase.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakeNFTBaseApproval)
				if err := _StakeNFTBase.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_StakeNFTBase *StakeNFTBaseFilterer) ParseApproval(log types.Log) (*StakeNFTBaseApproval, error) {
	event := new(StakeNFTBaseApproval)
	if err := _StakeNFTBase.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakeNFTBaseApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the StakeNFTBase contract.
type StakeNFTBaseApprovalForAllIterator struct {
	Event *StakeNFTBaseApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakeNFTBaseApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakeNFTBaseApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakeNFTBaseApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakeNFTBaseApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakeNFTBaseApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakeNFTBaseApprovalForAll represents a ApprovalForAll event raised by the StakeNFTBase contract.
type StakeNFTBaseApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_StakeNFTBase *StakeNFTBaseFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*StakeNFTBaseApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _StakeNFTBase.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &StakeNFTBaseApprovalForAllIterator{contract: _StakeNFTBase.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_StakeNFTBase *StakeNFTBaseFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *StakeNFTBaseApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _StakeNFTBase.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakeNFTBaseApprovalForAll)
				if err := _StakeNFTBase.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_StakeNFTBase *StakeNFTBaseFilterer) ParseApprovalForAll(log types.Log) (*StakeNFTBaseApprovalForAll, error) {
	event := new(StakeNFTBaseApprovalForAll)
	if err := _StakeNFTBase.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakeNFTBaseTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the StakeNFTBase contract.
type StakeNFTBaseTransferIterator struct {
	Event *StakeNFTBaseTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakeNFTBaseTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakeNFTBaseTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakeNFTBaseTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakeNFTBaseTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakeNFTBaseTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakeNFTBaseTransfer represents a Transfer event raised by the StakeNFTBase contract.
type StakeNFTBaseTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_StakeNFTBase *StakeNFTBaseFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*StakeNFTBaseTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _StakeNFTBase.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &StakeNFTBaseTransferIterator{contract: _StakeNFTBase.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_StakeNFTBase *StakeNFTBaseFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *StakeNFTBaseTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _StakeNFTBase.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakeNFTBaseTransfer)
				if err := _StakeNFTBase.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_StakeNFTBase *StakeNFTBaseFilterer) ParseTransfer(log types.Log) (*StakeNFTBaseTransfer, error) {
	event := new(StakeNFTBaseTransfer)
	if err := _StakeNFTBase.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakeNFTStorageMetaData contains all meta data concerning the StakeNFTStorage contract.
var StakeNFTStorageMetaData = &bind.MetaData{
	ABI: "[]",
}

// StakeNFTStorageABI is the input ABI used to generate the binding from.
// Deprecated: Use StakeNFTStorageMetaData.ABI instead.
var StakeNFTStorageABI = StakeNFTStorageMetaData.ABI

// StakeNFTStorage is an auto generated Go binding around an Ethereum contract.
type StakeNFTStorage struct {
	StakeNFTStorageCaller     // Read-only binding to the contract
	StakeNFTStorageTransactor // Write-only binding to the contract
	StakeNFTStorageFilterer   // Log filterer for contract events
}

// StakeNFTStorageCaller is an auto generated read-only Go binding around an Ethereum contract.
type StakeNFTStorageCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakeNFTStorageTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StakeNFTStorageTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakeNFTStorageFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StakeNFTStorageFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakeNFTStorageSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StakeNFTStorageSession struct {
	Contract     *StakeNFTStorage  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StakeNFTStorageCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StakeNFTStorageCallerSession struct {
	Contract *StakeNFTStorageCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// StakeNFTStorageTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StakeNFTStorageTransactorSession struct {
	Contract     *StakeNFTStorageTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// StakeNFTStorageRaw is an auto generated low-level Go binding around an Ethereum contract.
type StakeNFTStorageRaw struct {
	Contract *StakeNFTStorage // Generic contract binding to access the raw methods on
}

// StakeNFTStorageCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StakeNFTStorageCallerRaw struct {
	Contract *StakeNFTStorageCaller // Generic read-only contract binding to access the raw methods on
}

// StakeNFTStorageTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StakeNFTStorageTransactorRaw struct {
	Contract *StakeNFTStorageTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStakeNFTStorage creates a new instance of StakeNFTStorage, bound to a specific deployed contract.
func NewStakeNFTStorage(address common.Address, backend bind.ContractBackend) (*StakeNFTStorage, error) {
	contract, err := bindStakeNFTStorage(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StakeNFTStorage{StakeNFTStorageCaller: StakeNFTStorageCaller{contract: contract}, StakeNFTStorageTransactor: StakeNFTStorageTransactor{contract: contract}, StakeNFTStorageFilterer: StakeNFTStorageFilterer{contract: contract}}, nil
}

// NewStakeNFTStorageCaller creates a new read-only instance of StakeNFTStorage, bound to a specific deployed contract.
func NewStakeNFTStorageCaller(address common.Address, caller bind.ContractCaller) (*StakeNFTStorageCaller, error) {
	contract, err := bindStakeNFTStorage(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StakeNFTStorageCaller{contract: contract}, nil
}

// NewStakeNFTStorageTransactor creates a new write-only instance of StakeNFTStorage, bound to a specific deployed contract.
func NewStakeNFTStorageTransactor(address common.Address, transactor bind.ContractTransactor) (*StakeNFTStorageTransactor, error) {
	contract, err := bindStakeNFTStorage(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StakeNFTStorageTransactor{contract: contract}, nil
}

// NewStakeNFTStorageFilterer creates a new log filterer instance of StakeNFTStorage, bound to a specific deployed contract.
func NewStakeNFTStorageFilterer(address common.Address, filterer bind.ContractFilterer) (*StakeNFTStorageFilterer, error) {
	contract, err := bindStakeNFTStorage(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StakeNFTStorageFilterer{contract: contract}, nil
}

// bindStakeNFTStorage binds a generic wrapper to an already deployed contract.
func bindStakeNFTStorage(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StakeNFTStorageABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakeNFTStorage *StakeNFTStorageRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakeNFTStorage.Contract.StakeNFTStorageCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakeNFTStorage *StakeNFTStorageRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakeNFTStorage.Contract.StakeNFTStorageTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakeNFTStorage *StakeNFTStorageRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakeNFTStorage.Contract.StakeNFTStorageTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakeNFTStorage *StakeNFTStorageCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakeNFTStorage.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakeNFTStorage *StakeNFTStorageTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakeNFTStorage.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakeNFTStorage *StakeNFTStorageTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakeNFTStorage.Contract.contract.Transact(opts, method, params...)
}

// StringsUpgradeableMetaData contains all meta data concerning the StringsUpgradeable contract.
var StringsUpgradeableMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205914e1da90897d58cb31a9c239bd527b0a657fc9fb083551903a755c58a7fea664736f6c634300080c0033",
}

// StringsUpgradeableABI is the input ABI used to generate the binding from.
// Deprecated: Use StringsUpgradeableMetaData.ABI instead.
var StringsUpgradeableABI = StringsUpgradeableMetaData.ABI

// StringsUpgradeableBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StringsUpgradeableMetaData.Bin instead.
var StringsUpgradeableBin = StringsUpgradeableMetaData.Bin

// DeployStringsUpgradeable deploys a new Ethereum contract, binding an instance of StringsUpgradeable to it.
func DeployStringsUpgradeable(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *StringsUpgradeable, error) {
	parsed, err := StringsUpgradeableMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StringsUpgradeableBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StringsUpgradeable{StringsUpgradeableCaller: StringsUpgradeableCaller{contract: contract}, StringsUpgradeableTransactor: StringsUpgradeableTransactor{contract: contract}, StringsUpgradeableFilterer: StringsUpgradeableFilterer{contract: contract}}, nil
}

// StringsUpgradeable is an auto generated Go binding around an Ethereum contract.
type StringsUpgradeable struct {
	StringsUpgradeableCaller     // Read-only binding to the contract
	StringsUpgradeableTransactor // Write-only binding to the contract
	StringsUpgradeableFilterer   // Log filterer for contract events
}

// StringsUpgradeableCaller is an auto generated read-only Go binding around an Ethereum contract.
type StringsUpgradeableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StringsUpgradeableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StringsUpgradeableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StringsUpgradeableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StringsUpgradeableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StringsUpgradeableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StringsUpgradeableSession struct {
	Contract     *StringsUpgradeable // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// StringsUpgradeableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StringsUpgradeableCallerSession struct {
	Contract *StringsUpgradeableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// StringsUpgradeableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StringsUpgradeableTransactorSession struct {
	Contract     *StringsUpgradeableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// StringsUpgradeableRaw is an auto generated low-level Go binding around an Ethereum contract.
type StringsUpgradeableRaw struct {
	Contract *StringsUpgradeable // Generic contract binding to access the raw methods on
}

// StringsUpgradeableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StringsUpgradeableCallerRaw struct {
	Contract *StringsUpgradeableCaller // Generic read-only contract binding to access the raw methods on
}

// StringsUpgradeableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StringsUpgradeableTransactorRaw struct {
	Contract *StringsUpgradeableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStringsUpgradeable creates a new instance of StringsUpgradeable, bound to a specific deployed contract.
func NewStringsUpgradeable(address common.Address, backend bind.ContractBackend) (*StringsUpgradeable, error) {
	contract, err := bindStringsUpgradeable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StringsUpgradeable{StringsUpgradeableCaller: StringsUpgradeableCaller{contract: contract}, StringsUpgradeableTransactor: StringsUpgradeableTransactor{contract: contract}, StringsUpgradeableFilterer: StringsUpgradeableFilterer{contract: contract}}, nil
}

// NewStringsUpgradeableCaller creates a new read-only instance of StringsUpgradeable, bound to a specific deployed contract.
func NewStringsUpgradeableCaller(address common.Address, caller bind.ContractCaller) (*StringsUpgradeableCaller, error) {
	contract, err := bindStringsUpgradeable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StringsUpgradeableCaller{contract: contract}, nil
}

// NewStringsUpgradeableTransactor creates a new write-only instance of StringsUpgradeable, bound to a specific deployed contract.
func NewStringsUpgradeableTransactor(address common.Address, transactor bind.ContractTransactor) (*StringsUpgradeableTransactor, error) {
	contract, err := bindStringsUpgradeable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StringsUpgradeableTransactor{contract: contract}, nil
}

// NewStringsUpgradeableFilterer creates a new log filterer instance of StringsUpgradeable, bound to a specific deployed contract.
func NewStringsUpgradeableFilterer(address common.Address, filterer bind.ContractFilterer) (*StringsUpgradeableFilterer, error) {
	contract, err := bindStringsUpgradeable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StringsUpgradeableFilterer{contract: contract}, nil
}

// bindStringsUpgradeable binds a generic wrapper to an already deployed contract.
func bindStringsUpgradeable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StringsUpgradeableABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StringsUpgradeable *StringsUpgradeableRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StringsUpgradeable.Contract.StringsUpgradeableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StringsUpgradeable *StringsUpgradeableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StringsUpgradeable.Contract.StringsUpgradeableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StringsUpgradeable *StringsUpgradeableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StringsUpgradeable.Contract.StringsUpgradeableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StringsUpgradeable *StringsUpgradeableCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StringsUpgradeable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StringsUpgradeable *StringsUpgradeableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StringsUpgradeable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StringsUpgradeable *StringsUpgradeableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StringsUpgradeable.Contract.contract.Transact(opts, method, params...)
}

// ValidatorNFTMetaData contains all meta data concerning the ValidatorNFT contract.
var ValidatorNFTMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payoutEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoutMadToken\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"burnTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payoutEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoutMadToken\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circuitBreakerState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"collectEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"collectEthTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"collectToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"collectTokenTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"magic_\",\"type\":\"uint8\"}],\"name\":\"depositEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"magic_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"estimateEthCollection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateExcessEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"excess\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateExcessToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"excess\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"estimateTokenCollection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccumulatorScaleFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthAccumulator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accumulator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slush\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"getMetamorphicContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"}],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freeAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawFreeAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumulatorEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumulatorToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenAccumulator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accumulator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slush\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalReserveEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalReserveMadToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isAllowedProposal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration_\",\"type\":\"uint256\"}],\"name\":\"lockOwnPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration_\",\"type\":\"uint256\"}],\"name\":\"lockPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration_\",\"type\":\"uint256\"}],\"name\":\"lockWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration_\",\"type\":\"uint256\"}],\"name\":\"mintTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"}],\"name\":\"skimExcessEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"excess\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"}],\"name\":\"skimExcessToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"excess\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tripCB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60e06040523480156200001157600080fd5b503360a0819052609780546001600160a01b03191682179055604080516001600160f81b031960208083019190915260609390931b6001600160601b03191660218201526726b0b22a37b5b2b760c11b6035820152600080516020620058e283398151915260558083019190915282518083039091018152607590910190915280519101206001600160a01b031660c05260a051604080516001600160f81b031960208083019190915260609390931b6001600160601b031916602182015269476f7665726e616e636560b01b6035820152600080516020620058e283398151915260558083019190915282518083039091018152607590910190915280519101206001600160a01b031660805260805160a05160c0516157656200017d60003960008181611db50152818161207201528181612b3201528181613af701528181613d33015261410a0152600050506000818161047d01528181610e310152613c5801526157656000f3fe6080604052600436106103085760003560e01c80638191f5e51161019a578063a22cb465116100e1578063d5002f2e1161008a578063e985e9c511610064578063e985e9c51461094a578063ea785a5e146109a0578063eb02c301146109c057600080fd5b8063d5002f2e146108f5578063e35c3e281461090a578063e42a673c1461092a57600080fd5b8063be444379116100bb578063be4443791461089d578063c47c6e14146108bd578063c87b56dd146108d557600080fd5b8063a22cb46514610848578063adfdc03f14610868578063b88d4fde1461087d57600080fd5b806395d89b411161014357806399a89ecc1161011d57806399a89ecc146108005780639aeac65914610813578063a0712d681461082857600080fd5b806395d89b41146107b0578063971b505b146107c557806399785132146107e557600080fd5b806389465c621161017457806389465c6214610763578063905953ed1461077b57806393c5748d1461079057600080fd5b80638191f5e5146106435780638653a465146106635780638853b9501461074357600080fd5b80632baf2acb1161025e5780636352211e1161020757806370a08231116101e157806370a08231146105ee5780637aa507fb1461060e5780638129fc1c1461062e57600080fd5b80636352211e146105835780636e9960c3146105a3578063704b6c02146105ce57600080fd5b806342842e0e1161023857806342842e0e1461051657806342966c6814610536578063548652d21461056b57600080fd5b80632baf2acb146104c15780633771165e146104e15780633eed3eff1461050157600080fd5b80630e4eb15b116102c057806323b872dd1161029a57806323b872dd1461044e578063289b3c0d1461046e5780632a0d8bd1146104a157600080fd5b80630e4eb15b146103f957806319b8be2f1461041957806320ea0d481461042e57600080fd5b8063081812fc116102f1578063081812fc14610364578063095ea7b3146103a95780630cc65dfb146103cb57600080fd5b806301ffc9a71461030d57806306fdde0314610342575b600080fd5b34801561031957600080fd5b5061032d6103283660046150b9565b610a08565b60405190151581526020015b60405180910390f35b34801561034e57600080fd5b50610357610aed565b604051610339919061514c565b34801561037057600080fd5b5061038461037f36600461515f565b610b7f565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610339565b3480156103b557600080fd5b506103c96103c436600461519a565b610c44565b005b3480156103d757600080fd5b506103eb6103e63660046151c6565b610d9d565b604051908152602001610339565b34801561040557600080fd5b506103eb6104143660046151fb565b611031565b34801561042557600080fd5b5060a0546103eb565b34801561043a57600080fd5b506103eb61044936600461515f565b6111ff565b34801561045a57600080fd5b506103c961046936600461521d565b611351565b34801561047a57600080fd5b507f0000000000000000000000000000000000000000000000000000000000000000610384565b3480156104ad57600080fd5b506103eb6104bc36600461515f565b6113d8565b3480156104cd57600080fd5b506103eb6104dc3660046151c6565b61162e565b3480156104ed57600080fd5b5061032d6104fc36600461525e565b6117d4565b34801561050d57600080fd5b506103eb6117df565b34801561052257600080fd5b506103c961053136600461521d565b6117e9565b34801561054257600080fd5b5061055661055136600461515f565b611804565b60408051928352602083019190915201610339565b34801561057757600080fd5b50609d54609e54610556565b34801561058f57600080fd5b5061038461059e36600461515f565b611884565b3480156105af57600080fd5b5060975473ffffffffffffffffffffffffffffffffffffffff16610384565b3480156105da57600080fd5b506103c96105e936600461525e565b61191c565b3480156105fa57600080fd5b506103eb61060936600461525e565b6119c9565b34801561061a57600080fd5b506103eb61062936600461525e565b611a7d565b34801561063a57600080fd5b506103c9611b07565b34801561064f57600080fd5b506103c961065e36600461528c565b611ce3565b34801561066f57600080fd5b5061038461067e3660046152a8565b6040517fff0000000000000000000000000000000000000000000000000000000000000060208201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606083901b166021820152603581018390527f1c0bf703a3415cada9785e89e9d70314c3111ae7d8e04f33bb42eb1d264088be6055820152600090607501604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101209392505050565b34801561074f57600080fd5b506103eb61075e36600461519a565b611e2c565b34801561076f57600080fd5b5060995460ff1661032d565b34801561078757600080fd5b506103eb6120a0565b34801561079c57600080fd5b506103eb6107ab36600461515f565b6120af565b3480156107bc57600080fd5b506103576121f6565b3480156107d157600080fd5b506103eb6107e036600461525e565b612205565b3480156107f157600080fd5b50670de0b6b3a76400006103eb565b6103c961080e3660046152d8565b612283565b34801561081f57600080fd5b5060a1546103eb565b34801561083457600080fd5b506103eb61084336600461515f565b6123a0565b34801561085457600080fd5b506103c9610863366004615301565b61248d565b34801561087457600080fd5b506103c961249c565b34801561088957600080fd5b506103c961089836600461535e565b61250d565b3480156108a957600080fd5b506103eb6108b836600461519a565b61259b565b3480156108c957600080fd5b50609b54609c54610556565b3480156108e157600080fd5b506103576108f036600461515f565b6127ea565b34801561090157600080fd5b50609a546103eb565b34801561091657600080fd5b506103eb61092536600461515f565b6128ec565b34801561093657600080fd5b506103eb6109453660046151fb565b612b58565b34801561095657600080fd5b5061032d61096536600461545c565b73ffffffffffffffffffffffffffffffffffffffff9182166000908152606a6020908152604080832093909416825291909152205460ff1690565b3480156109ac57600080fd5b506105566109bb36600461519a565b612d26565b3480156109cc57600080fd5b506109e06109db36600461515f565b612da8565b604080519586526020860194909452928401919091526060830152608082015260a001610339565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd000000000000000000000000000000000000000000000000000000001480610a9b57507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b80610ae757507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b606060658054610afc9061548a565b80601f0160208091040260200160405190810160405280929190818152602001828054610b289061548a565b8015610b755780601f10610b4a57610100808354040283529160200191610b75565b820191906000526020600020905b815481529060010190602001808311610b5857829003601f168201915b5050505050905090565b60008181526067602052604081205473ffffffffffffffffffffffffffffffffffffffff16610c1b5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5060009081526069602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b6000610c4f82611884565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610cf35760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610c12565b3373ffffffffffffffffffffffffffffffffffffffff82161480610d1c5750610d1c8133610965565b610d8e5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610c12565b610d988383612eeb565b505050565b60995460009060ff1615610e195760405162461bcd60e51b815260206004820152602e60248201527f43697263756974427265616b65723a205468652043697263756974206272656160448201527f6b6572206973206f70656e6564210000000000000000000000000000000000006064820152608401610c12565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161480610e615750610e61336117d4565b610ed5576040805162461bcd60e51b81526020600482015260248101919091527f476f7665726e616e63653a20416374696f6e206d75737420626520706572666f60448201527f726d65642062792074686520676f7665726e616e636520636f6e7472616374216064820152608401610c12565b610ede83611884565b73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614610fa45760405162461bcd60e51b815260206004820152604560248201527f5374616b654e46543a204572726f722c20746f6b656e20646f65736e2774206560448201527f78697374206f7220646f65736e27742062656c6f6e6720746f2074686520636160648201527f6c6c657221000000000000000000000000000000000000000000000000000000608482015260a401610c12565b6202a30082111561101d5760405162461bcd60e51b815260206004820152603b60248201527f5374616b654e46543a204c6f636b204475726174696f6e20697320677265617460448201527f6572207468616e2074686520616d6f756e7420616c6c6f7765642100000000006064820152608401610c12565b6110278383612f8b565b90505b9392505050565b60995460009060ff16156110ad5760405162461bcd60e51b815260206004820152602e60248201527f43697263756974427265616b65723a205468652043697263756974206272656160448201527f6b6572206973206f70656e6564210000000000000000000000000000000000006064820152608401610c12565b6110b683611884565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461117c5760405162461bcd60e51b815260206004820152604560248201527f5374616b654e46543a204572726f722c20746f6b656e20646f65736e2774206560448201527f78697374206f7220646f65736e27742062656c6f6e6720746f2074686520636160648201527f6c6c657221000000000000000000000000000000000000000000000000000000608482015260a401610c12565b6202a3008211156111f55760405162461bcd60e51b815260206004820152603b60248201527f5374616b654e46543a204c6f636b204475726174696f6e20697320677265617460448201527f6572207468616e2074686520616d6f756e7420616c6c6f7765642100000000006064820152608401610c12565b61102a838361316c565b60008181526067602052604081205473ffffffffffffffffffffffffffffffffffffffff166112965760405162461bcd60e51b815260206004820152602960248201527f5374616b654e46543a204572726f722c204e465420746f6b656e20646f65736e60448201527f27742065786973742100000000000000000000000000000000000000000000006064820152608401610c12565b6000828152609f6020908152604091829020825160a08101845281547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff811682527c0100000000000000000000000000000000000000000000000000000000900463ffffffff16818401526001820154818501526002820154606082019081526003909201546080820152609a548451808601909552609d548552609e5493850193909352905190926113479291849061333c565b9695505050505050565b61135b33826134a5565b6113cd5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610c12565b610d988383836135fb565b6000806113e483611884565b90503373ffffffffffffffffffffffffffffffffffffffff8216146114715760405162461bcd60e51b815260206004820152603760248201527f5374616b654e46543a204572726f722073656e646572206973206e6f7420746860448201527f65206f776e6572206f662074686520746f6b656e4944210000000000000000006064820152608401610c12565b6000838152609f60208181526040808420815160a08101835281547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff811682527c0100000000000000000000000000000000000000000000000000000000900463ffffffff168185015260018201549281018390526002820154606082015260039091015460808201529387905291905243116115725760405162461bcd60e51b815260206004820152602860248201527f5374616b654e46543a2043616e6e6f742077697468647261772061742074686560448201527f206d6f6d656e742e0000000000000000000000000000000000000000000000006064820152608401610c12565b61157e609a548261382e565b6000868152609f6020908152604080832085519286015163ffffffff167c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff90931692909217825584015160018201556060840151600282015560809093015160039093019290925560a0805491955085929091611617908490615507565b90915550611627905082846138d0565b5050919050565b60995460009060ff16156116aa5760405162461bcd60e51b815260206004820152602e60248201527f43697263756974427265616b65723a205468652043697263756974206272656160448201527f6b6572206973206f70656e6564210000000000000000000000000000000000006064820152608401610c12565b60975473ffffffffffffffffffffffffffffffffffffffff1633146117115760405162461bcd60e51b815260206004820152600d60248201527f4d7573742062652061646d696e000000000000000000000000000000000000006044820152606401610c12565b62100a408211156117b05760405162461bcd60e51b815260206004820152604760248201527f5374616b654e46543a20546865206c6f636b206475726174696f6e206d75737460448201527f206265206c657373206f7220657175616c207468616e20746865206d61784d6960648201527f6e744c6f636b2100000000000000000000000000000000000000000000000000608482015260a401610c12565b6117ba8484613a38565b9050811561102a576117cc8183612f8b565b509392505050565b6000610ae782613c3d565b6000610ae7613d02565b610d988383836040518060200160405280600081525061250d565b609754600090819073ffffffffffffffffffffffffffffffffffffffff1633146118705760405162461bcd60e51b815260206004820152600d60248201527f4d7573742062652061646d696e000000000000000000000000000000000000006044820152606401610c12565b61187b333385613e6a565b91509150915091565b60008181526067602052604081205473ffffffffffffffffffffffffffffffffffffffff1680610ae75760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610c12565b60975473ffffffffffffffffffffffffffffffffffffffff1633146119835760405162461bcd60e51b815260206004820152600d60248201527f4d7573742062652061646d696e000000000000000000000000000000000000006044820152606401610c12565b609780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831617905550565b50565b600073ffffffffffffffffffffffffffffffffffffffff8216611a545760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610c12565b5073ffffffffffffffffffffffffffffffffffffffff1660009081526068602052604090205490565b60975460009073ffffffffffffffffffffffffffffffffffffffff163314611ae75760405162461bcd60e51b815260206004820152600d60248201527f4d7573742062652061646d696e000000000000000000000000000000000000006044820152606401610c12565b6000611af1613d02565b92509050611b00818484614144565b505b919050565b600054610100900460ff16611b225760005460ff1615611b26565b303b155b611b985760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610c12565b600054610100900460ff16158015611bd757600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b60975473ffffffffffffffffffffffffffffffffffffffff163314611c3e5760405162461bcd60e51b815260206004820152600d60248201527f4d7573742062652061646d696e000000000000000000000000000000000000006044820152606401610c12565b611cb26040518060400160405280600781526020017f4d4e56534e4654000000000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f4d4e5653000000000000000000000000000000000000000000000000000000008152506142ea565b80156119c657600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b60995460ff1615611d5c5760405162461bcd60e51b815260206004820152602e60248201527f43697263756974427265616b65723a205468652043697263756974206272656160448201527f6b6572206973206f70656e6564210000000000000000000000000000000000006064820152608401610c12565b8160ff8116602a14611db05760405162461bcd60e51b815260206004820152600960248201527f424144204d4147494300000000000000000000000000000000000000000000006044820152606401610c12565b611ddb7f00000000000000000000000000000000000000000000000000000000000000003384614371565b609a5460408051808201909152609b548152609c546020820152611e0191908490614469565b8051609b5560200151609c5560a18054839190600090611e2290849061551e565b9091555050505050565b600080611e3883611884565b90503373ffffffffffffffffffffffffffffffffffffffff821614611ec55760405162461bcd60e51b815260206004820152603760248201527f5374616b654e46543a204572726f722073656e646572206973206e6f7420746860448201527f65206f776e6572206f662074686520746f6b656e4944210000000000000000006064820152608401610c12565b6000838152609f6020908152604091829020825160a08101845281547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff811682527c0100000000000000000000000000000000000000000000000000000000900463ffffffff1692810192909252600181015492820183905260028101546060830152600301546080820152904311611fc25760405162461bcd60e51b815260206004820152602860248201527f5374616b654e46543a2043616e6e6f742077697468647261772061742074686560448201527f206d6f6d656e742e0000000000000000000000000000000000000000000000006064820152608401610c12565b611fce609a5482614533565b6000868152609f6020908152604080832085519286015163ffffffff167c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff90931692909217825584015160018201556060840151600282015560809093015160039093019290925560a1805491955085929091612067908490615507565b9091555061209890507f00000000000000000000000000000000000000000000000000000000000000008685614144565b505092915050565b60006120aa6145d5565b905090565b60008181526067602052604081205473ffffffffffffffffffffffffffffffffffffffff166121465760405162461bcd60e51b815260206004820152602960248201527f5374616b654e46543a204572726f722c204e465420746f6b656e20646f65736e60448201527f27742065786973742100000000000000000000000000000000000000000000006064820152608401610c12565b6000828152609f6020908152604091829020825160a08101845281547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff811682527c0100000000000000000000000000000000000000000000000000000000900463ffffffff16818401526001820154818501526002820154606082015260039091015460808201908152609a548451808601909552609b548552609c54938501939093525190926113479291849061333c565b606060668054610afc9061548a565b60975460009073ffffffffffffffffffffffffffffffffffffffff16331461226f5760405162461bcd60e51b815260206004820152600d60248201527f4d7573742062652061646d696e000000000000000000000000000000000000006044820152606401610c12565b6122776145d5565b9050611b0282826138d0565b60995460ff16156122fc5760405162461bcd60e51b815260206004820152602e60248201527f43697263756974427265616b65723a205468652043697263756974206272656160448201527f6b6572206973206f70656e6564210000000000000000000000000000000000006064820152608401610c12565b8060ff8116602a146123505760405162461bcd60e51b815260206004820152600960248201527f424144204d4147494300000000000000000000000000000000000000000000006044820152606401610c12565b609a5460408051808201909152609d548152609e54602082015261237691903490614469565b8051609d5560200151609e5560a0805434919060009061239790849061551e565b90915550505050565b60995460009060ff161561241c5760405162461bcd60e51b815260206004820152602e60248201527f43697263756974427265616b65723a205468652043697263756974206272656160448201527f6b6572206973206f70656e6564210000000000000000000000000000000000006064820152608401610c12565b60975473ffffffffffffffffffffffffffffffffffffffff1633146124835760405162461bcd60e51b815260206004820152600d60248201527f4d7573742062652061646d696e000000000000000000000000000000000000006044820152606401610c12565b610ae73383613a38565b612498338383614689565b5050565b60975473ffffffffffffffffffffffffffffffffffffffff1633146125035760405162461bcd60e51b815260206004820152600d60248201527f4d7573742062652061646d696e000000000000000000000000000000000000006044820152606401610c12565b61250b61479d565b565b61251733836134a5565b6125895760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610c12565b61259584848484614843565b50505050565b6000806125a783611884565b90503373ffffffffffffffffffffffffffffffffffffffff8216146126345760405162461bcd60e51b815260206004820152603760248201527f5374616b654e46543a204572726f722073656e646572206973206e6f7420746860448201527f65206f776e6572206f662074686520746f6b656e4944210000000000000000006064820152608401610c12565b6000838152609f60208181526040808420815160a08101835281547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff811682527c0100000000000000000000000000000000000000000000000000000000900463ffffffff168185015260018201549281018390526002820154606082015260039091015460808201529387905291905243116127355760405162461bcd60e51b815260206004820152602860248201527f5374616b654e46543a2043616e6e6f742077697468647261772061742074686560448201527f206d6f6d656e742e0000000000000000000000000000000000000000000000006064820152608401610c12565b612741609a548261382e565b6000868152609f6020908152604080832085519286015163ffffffff167c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff90931692909217825584015160018201556060840151600282015560809093015160039093019290925560a08054919550859290916127da908490615507565b90915550612098905085846138d0565b60008181526067602052604090205460609073ffffffffffffffffffffffffffffffffffffffff166128845760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006064820152608401610c12565b600061289b60408051602081019091526000815290565b905060008151116128bb576040518060200160405280600081525061102a565b806128c5846148cc565b6040516020016128d6929190615536565b6040516020818303038152906040529392505050565b6000806128f883611884565b90503373ffffffffffffffffffffffffffffffffffffffff8216146129855760405162461bcd60e51b815260206004820152603760248201527f5374616b654e46543a204572726f722073656e646572206973206e6f7420746860448201527f65206f776e6572206f662074686520746f6b656e4944210000000000000000006064820152608401610c12565b6000838152609f6020908152604091829020825160a08101845281547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff811682527c0100000000000000000000000000000000000000000000000000000000900463ffffffff1692810192909252600181015492820183905260028101546060830152600301546080820152904311612a825760405162461bcd60e51b815260206004820152602860248201527f5374616b654e46543a2043616e6e6f742077697468647261772061742074686560448201527f206d6f6d656e742e0000000000000000000000000000000000000000000000006064820152608401610c12565b612a8e609a5482614533565b6000868152609f6020908152604080832085519286015163ffffffff167c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff90931692909217825584015160018201556060840151600282015560809093015160039093019290925560a1805491955085929091612b27908490615507565b9091555061162790507f00000000000000000000000000000000000000000000000000000000000000008385614144565b60995460009060ff1615612bd45760405162461bcd60e51b815260206004820152602e60248201527f43697263756974427265616b65723a205468652043697263756974206272656160448201527f6b6572206973206f70656e6564210000000000000000000000000000000000006064820152608401610c12565b612bdd83611884565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612ca35760405162461bcd60e51b815260206004820152604560248201527f5374616b654e46543a204572726f722c20746f6b656e20646f65736e2774206560448201527f78697374206f7220646f65736e27742062656c6f6e6720746f2074686520636160648201527f6c6c657221000000000000000000000000000000000000000000000000000000608482015260a401610c12565b6202a300821115612d1c5760405162461bcd60e51b815260206004820152603b60248201527f5374616b654e46543a204c6f636b204475726174696f6e20697320677265617460448201527f6572207468616e2074686520616d6f756e7420616c6c6f7765642100000000006064820152608401610c12565b61102a8383612f8b565b609754600090819073ffffffffffffffffffffffffffffffffffffffff163314612d925760405162461bcd60e51b815260206004820152600d60248201527f4d7573742062652061646d696e000000000000000000000000000000000000006044820152606401610c12565b612d9d338585613e6a565b915091509250929050565b6000806000806000612dde8660009081526067602052604090205473ffffffffffffffffffffffffffffffffffffffff16151590565b612e505760405162461bcd60e51b815260206004820152602160248201527f5374616b654e46543a20546f6b656e20494420646f65736e277420657869737460448201527f21000000000000000000000000000000000000000000000000000000000000006064820152608401610c12565b50505060009283525050609f6020908152604091829020825160a08101845281547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff81168083527c010000000000000000000000000000000000000000000000000000000090910463ffffffff169382018490526001830154948201859052600283015460608301819052600390930154608090920182905294929392565b600081815260696020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091558190612f4582611884565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008281526067602052604081205473ffffffffffffffffffffffffffffffffffffffff166130225760405162461bcd60e51b815260206004820152602160248201527f5374616b654e46543a20546f6b656e20494420646f65736e277420657869737460448201527f21000000000000000000000000000000000000000000000000000000000000006064820152608401610c12565b6000838152609f60209081526040808320815160a08101835281547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff811682527c0100000000000000000000000000000000000000000000000000000000900463ffffffff169381019390935260018101549183019190915260028101546060830152600301546080820152906130b58443615565565b9050816020015163ffffffff168163ffffffff16116130d85781602001516130da565b805b63ffffffff90811660208085019182526000888152609f909152604090819020855192519093167c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff909216918217835584015160018301556060840151600283015560809093015160039091015550905092915050565b60008281526067602052604081205473ffffffffffffffffffffffffffffffffffffffff166132035760405162461bcd60e51b815260206004820152602160248201527f5374616b654e46543a20546f6b656e20494420646f65736e277420657869737460448201527f21000000000000000000000000000000000000000000000000000000000000006064820152608401610c12565b6000838152609f60209081526040808320815160a08101835281547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff811682527c0100000000000000000000000000000000000000000000000000000000900463ffffffff16938101939093526001810154918301919091526002810154606083015260030154608082015290613296844361551e565b9050816040015181116132ad5781604001516132af565b805b60408084019182526000878152609f602090815291902084519185015163ffffffff167c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092169182178155915160018301556060840151600283015560809093015160039091015550905092915050565b60408051808201825260008082526020808301829052835160a08101855282815290810182905292830181905260608301819052608083015290600080600087600001518611156133bf576133a68674ffffffffffffffffffffffffffffffffffffffffff615507565b88519091506133b5908261551e565b90508095506133db565b87516133cc908790615507565b90506133d8818761551e565b95505b8651600090613408907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1683615584565b88519091507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff168a141561344b576020890151613441908261551e565b600060208b015290505b8061345e670de0b6b3a7640000826155f0565b9150613472670de0b6b3a764000083615584565b61347c9082615507565b9050808a602001818151613490919061551e565b905250989a9799509597509495945050505050565b60008181526067602052604081205473ffffffffffffffffffffffffffffffffffffffff1661353c5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e00000000000000000000000000000000000000006064820152608401610c12565b600061354783611884565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806135b657508373ffffffffffffffffffffffffffffffffffffffff1661359e84610b7f565b73ffffffffffffffffffffffffffffffffffffffff16145b806135f3575073ffffffffffffffffffffffffffffffffffffffff8082166000908152606a602090815260408083209388168352929052205460ff165b949350505050565b8273ffffffffffffffffffffffffffffffffffffffff1661361b82611884565b73ffffffffffffffffffffffffffffffffffffffff16146136a45760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608401610c12565b73ffffffffffffffffffffffffffffffffffffffff821661372c5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610c12565b613737600082612eeb565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260686020526040812080546001929061376d908490615507565b909155505073ffffffffffffffffffffffffffffffffffffffff821660009081526068602052604081208054600192906137a890849061551e565b909155505060008181526067602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6138846040518060a0016040528060007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff168152602001600063ffffffff1681526020016000815260200160008152602001600081525090565b60408051808201909152609d548152609e546020820152606083015160009182916138b2918791879061333c565b8351609d55602090930151609e556060820152969095509350505050565b806138d9575050565b73ffffffffffffffffffffffffffffffffffffffff82166139625760405162461bcd60e51b815260206004820152603360248201527f457468536166655472616e736665723a2063616e6e6f74207472616e7366657260448201527f2045544820746f206164647265737320307830000000000000000000000000006064820152608401610c12565b604051829060009073ffffffffffffffffffffffffffffffffffffffff83169084908381818185875af1925050503d80600081146139bc576040519150601f19603f3d011682016040523d82523d6000602084013e6139c1565b606091505b50509050806125955760405162461bcd60e51b815260206004820152602160248201527f457468536166655472616e736665723a205472616e73666572206661696c656460448201527f2e000000000000000000000000000000000000000000000000000000000000006064820152608401610c12565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff821115613af25760405162461bcd60e51b815260206004820152605260248201527f5374616b654e46543a2054686520616d6f756e7420657863656564732074686560448201527f206d6178696d756d206e756d626572206f66204d6164546f6b656e732074686160648201527f742077696c6c2065766572206578697374210000000000000000000000000000608482015260a401610c12565b613b1d7f00000000000000000000000000000000000000000000000000000000000000003384614371565b609a54604080518082018252609d548152609e546020808301919091528251808401909352609b548352609c549083015290613b576149fe565b9350613b63858461551e565b609a8190556040805160a0810182527bffffffffffffffffffffffffffffffffffffffffffffffffffffffff80891682526001602080840182815284860183815289516060870190815289516080880190815260008e8152609f9095529784209651925163ffffffff167c01000000000000000000000000000000000000000000000000000000000292909516919091178555519184019190915590516002830155915160039091015560a180549295508792909190613c2490849061551e565b90915550613c3490508685614a16565b50505092915050565b60008173ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f4f580006040518163ffffffff1660e01b8152600401602060405180830381865afa158015613cc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ce59190615604565b73ffffffffffffffffffffffffffffffffffffffff161492915050565b60a1546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201527f000000000000000000000000000000000000000000000000000000000000000091600091829073ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa158015613d96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613dba9190615621565b905081811015613e585760405162461bcd60e51b815260206004820152604760248201527f5374616b654e46543a205468652062616c616e6365206f662074686520636f6e60448201527f7472616374206973206c657373207468656e2074686520747261636b6564207260648201527f6573657276652100000000000000000000000000000000000000000000000000608482015260a401610c12565b613e628282615507565b925050509091565b600080613e7683611884565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614613f165760405162461bcd60e51b815260206004820152602f60248201527f5374616b654e46543a2055736572206973206e6f7420746865206f776e65722060448201527f6f662074686520746f6b656e49442100000000000000000000000000000000006064820152608401610c12565b6000838152609f6020908152604091829020825160a08101845281547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff811682527c0100000000000000000000000000000000000000000000000000000000900463ffffffff169281018390526001820154938101939093526002810154606084015260030154608083015243118015613faf5750438160400151105b6140215760405162461bcd60e51b815260206004820152603160248201527f5374616b654e46543a2054686520706f736974696f6e206973206e6f7420726560448201527f61647920746f206265206275726e6564210000000000000000000000000000006064820152608401610c12565b609a5461402e818361382e565b9450915061403c8183614533565b815190945090925061406c907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff168461551e565b925081600001517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16609a60008282546140a29190615507565b925050819055508260a160008282546140bb9190615507565b925050819055508360a060008282546140d49190615507565b90915550506000858152609f6020526040812081815560018101829055600281018290556003015561410585614ba4565b6141307f00000000000000000000000000000000000000000000000000000000000000008785614144565b61413a86856138d0565b5050935093915050565b8061414e57505050565b73ffffffffffffffffffffffffffffffffffffffff83166141d75760405162461bcd60e51b815260206004820152603f60248201527f4552433230536166655472616e736665723a2043616e6e6f742063616c6c206d60448201527f6574686f6473206f6e20636f6e74726163742061646472657373203078302e006064820152608401610c12565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152602482018390526000919085169063a9059cbb906044015b6020604051808303816000875af1158015614251573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614275919061563a565b9050806125955760405162461bcd60e51b815260206004820152602360248201527f4552433230536166655472616e736665723a205472616e73666572206661696c60448201527f65642e00000000000000000000000000000000000000000000000000000000006064820152608401610c12565b600054610100900460ff166143675760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610c12565b6124988282614c71565b8061437b57505050565b73ffffffffffffffffffffffffffffffffffffffff83166144045760405162461bcd60e51b815260206004820152603f60248201527f4552433230536166655472616e736665723a2043616e6e6f742063616c6c206d60448201527f6574686f6473206f6e20636f6e74726163742061646472657373203078302e006064820152608401610c12565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff838116600483015230602483015260448201839052600091908516906323b872dd90606401614232565b604080518082019091526000808252602082015261448f670de0b6b3a764000084615584565b826020018181516144a0919061551e565b90525083156144c4576144bc8483600001518460200151614cf8565b602084015282525b7480000000000000000000000000000000000000000082602001511061452c5760405162461bcd60e51b815260206004820152601960248201527f5374616b654e46543a20736c75736820746f6f206c61726765000000000000006044820152606401610c12565b5092915050565b6145896040518060a0016040528060007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff168152602001600063ffffffff1681526020016000815260200160008152602001600081525090565b60408051808201909152609b548152609c546020820152608083015160009182916145b7918791879061333c565b8351609b55602090930151609c556080820152969095509350505050565b60a05460009047818110156146785760405162461bcd60e51b815260206004820152604760248201527f5374616b654e46543a205468652062616c616e6365206f662074686520636f6e60448201527f7472616374206973206c657373207468656e2074686520747261636b6564207260648201527f6573657276652100000000000000000000000000000000000000000000000000608482015260a401610c12565b6146828282615507565b9250505090565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156147055760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610c12565b73ffffffffffffffffffffffffffffffffffffffff8381166000818152606a602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60995460ff16156148165760405162461bcd60e51b815260206004820152602e60248201527f43697263756974427265616b65723a205468652043697263756974206272656160448201527f6b6572206973206f70656e6564210000000000000000000000000000000000006064820152608401610c12565b609980547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b61484e8484846135fb565b61485a84848484614d7c565b6125955760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610c12565b60608161490c57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115614936578061492081615657565b915061492f9050600a836155f0565b9150614910565b60008167ffffffffffffffff8111156149515761495161532f565b6040519080825280601f01601f19166020018201604052801561497b576020820181803683370190505b5090505b84156135f357614990600183615507565b915061499d600a86615690565b6149a890603061551e565b60f81b8183815181106149bd576149bd6156a4565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506149f7600a866155f0565b945061497f565b609854614a0c60018261551e565b6098819055919050565b73ffffffffffffffffffffffffffffffffffffffff8216614a795760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610c12565b60008181526067602052604090205473ffffffffffffffffffffffffffffffffffffffff1615614aeb5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610c12565b73ffffffffffffffffffffffffffffffffffffffff82166000908152606860205260408120805460019290614b2190849061551e565b909155505060008181526067602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000614baf82611884565b9050614bbc600083612eeb565b73ffffffffffffffffffffffffffffffffffffffff81166000908152606860205260408120805460019290614bf2908490615507565b909155505060008281526067602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001690555183919073ffffffffffffffffffffffffffffffffffffffff8416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b600054610100900460ff16614cee5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610c12565b6124988282614f52565b6000808415614d72576000614d0d86856155f0565b9050614d198682615584565b614d239085615507565b9350614d2f818661551e565b945074ffffffffffffffffffffffffffffffffffffffffff851115614d7057614d6d74ffffffffffffffffffffffffffffffffffffffffff86615690565b94505b505b5091939092509050565b600073ffffffffffffffffffffffffffffffffffffffff84163b15614f47576040517f150b7a0200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063150b7a0290614df39033908990889088906004016156d3565b6020604051808303816000875af1925050508015614e4c575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252614e4991810190615712565b60015b614efc573d808015614e7a576040519150601f19603f3d011682016040523d82523d6000602084013e614e7f565b606091505b508051614ef45760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610c12565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a02000000000000000000000000000000000000000000000000000000001490506135f3565b506001949350505050565b600054610100900460ff16614fcf5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610c12565b8151614fe2906065906020850190614ff2565b508051610d989060669060208401905b828054614ffe9061548a565b90600052602060002090601f0160209004810192826150205760008555615066565b82601f1061503957805160ff1916838001178555615066565b82800160010185558215615066579182015b8281111561506657825182559160200191906001019061504b565b50615072929150615076565b5090565b5b808211156150725760008155600101615077565b7fffffffff00000000000000000000000000000000000000000000000000000000811681146119c657600080fd5b6000602082840312156150cb57600080fd5b813561102a8161508b565b60005b838110156150f15781810151838201526020016150d9565b838111156125955750506000910152565b6000815180845261511a8160208601602086016150d6565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152600061102a6020830184615102565b60006020828403121561517157600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff811681146119c657600080fd5b600080604083850312156151ad57600080fd5b82356151b881615178565b946020939093013593505050565b6000806000606084860312156151db57600080fd5b83356151e681615178565b95602085013595506040909401359392505050565b6000806040838503121561520e57600080fd5b50508035926020909101359150565b60008060006060848603121561523257600080fd5b833561523d81615178565b9250602084013561524d81615178565b929592945050506040919091013590565b60006020828403121561527057600080fd5b813561102a81615178565b803560ff81168114611b0257600080fd5b6000806040838503121561529f57600080fd5b6151b88361527b565b600080604083850312156152bb57600080fd5b8235915060208301356152cd81615178565b809150509250929050565b6000602082840312156152ea57600080fd5b61102a8261527b565b80151581146119c657600080fd5b6000806040838503121561531457600080fd5b823561531f81615178565b915060208301356152cd816152f3565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806000806080858703121561537457600080fd5b843561537f81615178565b9350602085013561538f81615178565b925060408501359150606085013567ffffffffffffffff808211156153b357600080fd5b818701915087601f8301126153c757600080fd5b8135818111156153d9576153d961532f565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561541f5761541f61532f565b816040528281528a602084870101111561543857600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561546f57600080fd5b823561547a81615178565b915060208301356152cd81615178565b600181811c9082168061549e57607f821691505b60208210811415611b00577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015615519576155196154d8565b500390565b60008219821115615531576155316154d8565b500190565b600083516155488184602088016150d6565b83519083019061555c8183602088016150d6565b01949350505050565b600063ffffffff80831681851680830382111561555c5761555c6154d8565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156155bc576155bc6154d8565b500290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826155ff576155ff6155c1565b500490565b60006020828403121561561657600080fd5b815161102a81615178565b60006020828403121561563357600080fd5b5051919050565b60006020828403121561564c57600080fd5b815161102a816152f3565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415615689576156896154d8565b5060010190565b60008261569f5761569f6155c1565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600073ffffffffffffffffffffffffffffffffffffffff8087168352808616602084015250836040830152608060608301526113476080830184615102565b60006020828403121561572457600080fd5b815161102a8161508b56fea2646970667358221220042f609790fce803a939dafbe3a9f8b51577ae3c94a7ed71a42447d39f70918d64736f6c634300080c00331c0bf703a3415cada9785e89e9d70314c3111ae7d8e04f33bb42eb1d264088be",
}

// ValidatorNFTABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorNFTMetaData.ABI instead.
var ValidatorNFTABI = ValidatorNFTMetaData.ABI

// ValidatorNFTBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ValidatorNFTMetaData.Bin instead.
var ValidatorNFTBin = ValidatorNFTMetaData.Bin

// DeployValidatorNFT deploys a new Ethereum contract, binding an instance of ValidatorNFT to it.
func DeployValidatorNFT(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ValidatorNFT, error) {
	parsed, err := ValidatorNFTMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ValidatorNFTBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ValidatorNFT{ValidatorNFTCaller: ValidatorNFTCaller{contract: contract}, ValidatorNFTTransactor: ValidatorNFTTransactor{contract: contract}, ValidatorNFTFilterer: ValidatorNFTFilterer{contract: contract}}, nil
}

// ValidatorNFT is an auto generated Go binding around an Ethereum contract.
type ValidatorNFT struct {
	ValidatorNFTCaller     // Read-only binding to the contract
	ValidatorNFTTransactor // Write-only binding to the contract
	ValidatorNFTFilterer   // Log filterer for contract events
}

// ValidatorNFTCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorNFTCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorNFTTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorNFTTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorNFTFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorNFTFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorNFTSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorNFTSession struct {
	Contract     *ValidatorNFT     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ValidatorNFTCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorNFTCallerSession struct {
	Contract *ValidatorNFTCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// ValidatorNFTTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorNFTTransactorSession struct {
	Contract     *ValidatorNFTTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// ValidatorNFTRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorNFTRaw struct {
	Contract *ValidatorNFT // Generic contract binding to access the raw methods on
}

// ValidatorNFTCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorNFTCallerRaw struct {
	Contract *ValidatorNFTCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorNFTTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorNFTTransactorRaw struct {
	Contract *ValidatorNFTTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorNFT creates a new instance of ValidatorNFT, bound to a specific deployed contract.
func NewValidatorNFT(address common.Address, backend bind.ContractBackend) (*ValidatorNFT, error) {
	contract, err := bindValidatorNFT(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorNFT{ValidatorNFTCaller: ValidatorNFTCaller{contract: contract}, ValidatorNFTTransactor: ValidatorNFTTransactor{contract: contract}, ValidatorNFTFilterer: ValidatorNFTFilterer{contract: contract}}, nil
}

// NewValidatorNFTCaller creates a new read-only instance of ValidatorNFT, bound to a specific deployed contract.
func NewValidatorNFTCaller(address common.Address, caller bind.ContractCaller) (*ValidatorNFTCaller, error) {
	contract, err := bindValidatorNFT(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorNFTCaller{contract: contract}, nil
}

// NewValidatorNFTTransactor creates a new write-only instance of ValidatorNFT, bound to a specific deployed contract.
func NewValidatorNFTTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorNFTTransactor, error) {
	contract, err := bindValidatorNFT(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorNFTTransactor{contract: contract}, nil
}

// NewValidatorNFTFilterer creates a new log filterer instance of ValidatorNFT, bound to a specific deployed contract.
func NewValidatorNFTFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorNFTFilterer, error) {
	contract, err := bindValidatorNFT(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorNFTFilterer{contract: contract}, nil
}

// bindValidatorNFT binds a generic wrapper to an already deployed contract.
func bindValidatorNFT(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorNFTABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorNFT *ValidatorNFTRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorNFT.Contract.ValidatorNFTCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorNFT *ValidatorNFTRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.ValidatorNFTTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorNFT *ValidatorNFTRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.ValidatorNFTTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorNFT *ValidatorNFTCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorNFT.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorNFT *ValidatorNFTTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorNFT *ValidatorNFTTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_ValidatorNFT *ValidatorNFTCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorNFT.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_ValidatorNFT *ValidatorNFTSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _ValidatorNFT.Contract.BalanceOf(&_ValidatorNFT.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_ValidatorNFT *ValidatorNFTCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _ValidatorNFT.Contract.BalanceOf(&_ValidatorNFT.CallOpts, owner)
}

// CircuitBreakerState is a free data retrieval call binding the contract method 0x89465c62.
//
// Solidity: function circuitBreakerState() view returns(bool)
func (_ValidatorNFT *ValidatorNFTCaller) CircuitBreakerState(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ValidatorNFT.contract.Call(opts, &out, "circuitBreakerState")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CircuitBreakerState is a free data retrieval call binding the contract method 0x89465c62.
//
// Solidity: function circuitBreakerState() view returns(bool)
func (_ValidatorNFT *ValidatorNFTSession) CircuitBreakerState() (bool, error) {
	return _ValidatorNFT.Contract.CircuitBreakerState(&_ValidatorNFT.CallOpts)
}

// CircuitBreakerState is a free data retrieval call binding the contract method 0x89465c62.
//
// Solidity: function circuitBreakerState() view returns(bool)
func (_ValidatorNFT *ValidatorNFTCallerSession) CircuitBreakerState() (bool, error) {
	return _ValidatorNFT.Contract.CircuitBreakerState(&_ValidatorNFT.CallOpts)
}

// EstimateEthCollection is a free data retrieval call binding the contract method 0x20ea0d48.
//
// Solidity: function estimateEthCollection(uint256 tokenID_) view returns(uint256 payout)
func (_ValidatorNFT *ValidatorNFTCaller) EstimateEthCollection(opts *bind.CallOpts, tokenID_ *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorNFT.contract.Call(opts, &out, "estimateEthCollection", tokenID_)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EstimateEthCollection is a free data retrieval call binding the contract method 0x20ea0d48.
//
// Solidity: function estimateEthCollection(uint256 tokenID_) view returns(uint256 payout)
func (_ValidatorNFT *ValidatorNFTSession) EstimateEthCollection(tokenID_ *big.Int) (*big.Int, error) {
	return _ValidatorNFT.Contract.EstimateEthCollection(&_ValidatorNFT.CallOpts, tokenID_)
}

// EstimateEthCollection is a free data retrieval call binding the contract method 0x20ea0d48.
//
// Solidity: function estimateEthCollection(uint256 tokenID_) view returns(uint256 payout)
func (_ValidatorNFT *ValidatorNFTCallerSession) EstimateEthCollection(tokenID_ *big.Int) (*big.Int, error) {
	return _ValidatorNFT.Contract.EstimateEthCollection(&_ValidatorNFT.CallOpts, tokenID_)
}

// EstimateExcessEth is a free data retrieval call binding the contract method 0x905953ed.
//
// Solidity: function estimateExcessEth() view returns(uint256 excess)
func (_ValidatorNFT *ValidatorNFTCaller) EstimateExcessEth(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorNFT.contract.Call(opts, &out, "estimateExcessEth")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EstimateExcessEth is a free data retrieval call binding the contract method 0x905953ed.
//
// Solidity: function estimateExcessEth() view returns(uint256 excess)
func (_ValidatorNFT *ValidatorNFTSession) EstimateExcessEth() (*big.Int, error) {
	return _ValidatorNFT.Contract.EstimateExcessEth(&_ValidatorNFT.CallOpts)
}

// EstimateExcessEth is a free data retrieval call binding the contract method 0x905953ed.
//
// Solidity: function estimateExcessEth() view returns(uint256 excess)
func (_ValidatorNFT *ValidatorNFTCallerSession) EstimateExcessEth() (*big.Int, error) {
	return _ValidatorNFT.Contract.EstimateExcessEth(&_ValidatorNFT.CallOpts)
}

// EstimateExcessToken is a free data retrieval call binding the contract method 0x3eed3eff.
//
// Solidity: function estimateExcessToken() view returns(uint256 excess)
func (_ValidatorNFT *ValidatorNFTCaller) EstimateExcessToken(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorNFT.contract.Call(opts, &out, "estimateExcessToken")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EstimateExcessToken is a free data retrieval call binding the contract method 0x3eed3eff.
//
// Solidity: function estimateExcessToken() view returns(uint256 excess)
func (_ValidatorNFT *ValidatorNFTSession) EstimateExcessToken() (*big.Int, error) {
	return _ValidatorNFT.Contract.EstimateExcessToken(&_ValidatorNFT.CallOpts)
}

// EstimateExcessToken is a free data retrieval call binding the contract method 0x3eed3eff.
//
// Solidity: function estimateExcessToken() view returns(uint256 excess)
func (_ValidatorNFT *ValidatorNFTCallerSession) EstimateExcessToken() (*big.Int, error) {
	return _ValidatorNFT.Contract.EstimateExcessToken(&_ValidatorNFT.CallOpts)
}

// EstimateTokenCollection is a free data retrieval call binding the contract method 0x93c5748d.
//
// Solidity: function estimateTokenCollection(uint256 tokenID_) view returns(uint256 payout)
func (_ValidatorNFT *ValidatorNFTCaller) EstimateTokenCollection(opts *bind.CallOpts, tokenID_ *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorNFT.contract.Call(opts, &out, "estimateTokenCollection", tokenID_)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EstimateTokenCollection is a free data retrieval call binding the contract method 0x93c5748d.
//
// Solidity: function estimateTokenCollection(uint256 tokenID_) view returns(uint256 payout)
func (_ValidatorNFT *ValidatorNFTSession) EstimateTokenCollection(tokenID_ *big.Int) (*big.Int, error) {
	return _ValidatorNFT.Contract.EstimateTokenCollection(&_ValidatorNFT.CallOpts, tokenID_)
}

// EstimateTokenCollection is a free data retrieval call binding the contract method 0x93c5748d.
//
// Solidity: function estimateTokenCollection(uint256 tokenID_) view returns(uint256 payout)
func (_ValidatorNFT *ValidatorNFTCallerSession) EstimateTokenCollection(tokenID_ *big.Int) (*big.Int, error) {
	return _ValidatorNFT.Contract.EstimateTokenCollection(&_ValidatorNFT.CallOpts, tokenID_)
}

// GetAccumulatorScaleFactor is a free data retrieval call binding the contract method 0x99785132.
//
// Solidity: function getAccumulatorScaleFactor() pure returns(uint256)
func (_ValidatorNFT *ValidatorNFTCaller) GetAccumulatorScaleFactor(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorNFT.contract.Call(opts, &out, "getAccumulatorScaleFactor")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAccumulatorScaleFactor is a free data retrieval call binding the contract method 0x99785132.
//
// Solidity: function getAccumulatorScaleFactor() pure returns(uint256)
func (_ValidatorNFT *ValidatorNFTSession) GetAccumulatorScaleFactor() (*big.Int, error) {
	return _ValidatorNFT.Contract.GetAccumulatorScaleFactor(&_ValidatorNFT.CallOpts)
}

// GetAccumulatorScaleFactor is a free data retrieval call binding the contract method 0x99785132.
//
// Solidity: function getAccumulatorScaleFactor() pure returns(uint256)
func (_ValidatorNFT *ValidatorNFTCallerSession) GetAccumulatorScaleFactor() (*big.Int, error) {
	return _ValidatorNFT.Contract.GetAccumulatorScaleFactor(&_ValidatorNFT.CallOpts)
}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_ValidatorNFT *ValidatorNFTCaller) GetAdmin(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ValidatorNFT.contract.Call(opts, &out, "getAdmin")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_ValidatorNFT *ValidatorNFTSession) GetAdmin() (common.Address, error) {
	return _ValidatorNFT.Contract.GetAdmin(&_ValidatorNFT.CallOpts)
}

// GetAdmin is a free data retrieval call binding the contract method 0x6e9960c3.
//
// Solidity: function getAdmin() view returns(address)
func (_ValidatorNFT *ValidatorNFTCallerSession) GetAdmin() (common.Address, error) {
	return _ValidatorNFT.Contract.GetAdmin(&_ValidatorNFT.CallOpts)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_ValidatorNFT *ValidatorNFTCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ValidatorNFT.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_ValidatorNFT *ValidatorNFTSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _ValidatorNFT.Contract.GetApproved(&_ValidatorNFT.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_ValidatorNFT *ValidatorNFTCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _ValidatorNFT.Contract.GetApproved(&_ValidatorNFT.CallOpts, tokenId)
}

// GetEthAccumulator is a free data retrieval call binding the contract method 0x548652d2.
//
// Solidity: function getEthAccumulator() view returns(uint256 accumulator, uint256 slush)
func (_ValidatorNFT *ValidatorNFTCaller) GetEthAccumulator(opts *bind.CallOpts) (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	var out []interface{}
	err := _ValidatorNFT.contract.Call(opts, &out, "getEthAccumulator")

	outstruct := new(struct {
		Accumulator *big.Int
		Slush       *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Accumulator = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Slush = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetEthAccumulator is a free data retrieval call binding the contract method 0x548652d2.
//
// Solidity: function getEthAccumulator() view returns(uint256 accumulator, uint256 slush)
func (_ValidatorNFT *ValidatorNFTSession) GetEthAccumulator() (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	return _ValidatorNFT.Contract.GetEthAccumulator(&_ValidatorNFT.CallOpts)
}

// GetEthAccumulator is a free data retrieval call binding the contract method 0x548652d2.
//
// Solidity: function getEthAccumulator() view returns(uint256 accumulator, uint256 slush)
func (_ValidatorNFT *ValidatorNFTCallerSession) GetEthAccumulator() (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	return _ValidatorNFT.Contract.GetEthAccumulator(&_ValidatorNFT.CallOpts)
}

// GetGovernance is a free data retrieval call binding the contract method 0x289b3c0d.
//
// Solidity: function getGovernance() view returns(address)
func (_ValidatorNFT *ValidatorNFTCaller) GetGovernance(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ValidatorNFT.contract.Call(opts, &out, "getGovernance")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetGovernance is a free data retrieval call binding the contract method 0x289b3c0d.
//
// Solidity: function getGovernance() view returns(address)
func (_ValidatorNFT *ValidatorNFTSession) GetGovernance() (common.Address, error) {
	return _ValidatorNFT.Contract.GetGovernance(&_ValidatorNFT.CallOpts)
}

// GetGovernance is a free data retrieval call binding the contract method 0x289b3c0d.
//
// Solidity: function getGovernance() view returns(address)
func (_ValidatorNFT *ValidatorNFTCallerSession) GetGovernance() (common.Address, error) {
	return _ValidatorNFT.Contract.GetGovernance(&_ValidatorNFT.CallOpts)
}

// GetMetamorphicContractAddress is a free data retrieval call binding the contract method 0x8653a465.
//
// Solidity: function getMetamorphicContractAddress(bytes32 _salt, address _factory) pure returns(address)
func (_ValidatorNFT *ValidatorNFTCaller) GetMetamorphicContractAddress(opts *bind.CallOpts, _salt [32]byte, _factory common.Address) (common.Address, error) {
	var out []interface{}
	err := _ValidatorNFT.contract.Call(opts, &out, "getMetamorphicContractAddress", _salt, _factory)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetMetamorphicContractAddress is a free data retrieval call binding the contract method 0x8653a465.
//
// Solidity: function getMetamorphicContractAddress(bytes32 _salt, address _factory) pure returns(address)
func (_ValidatorNFT *ValidatorNFTSession) GetMetamorphicContractAddress(_salt [32]byte, _factory common.Address) (common.Address, error) {
	return _ValidatorNFT.Contract.GetMetamorphicContractAddress(&_ValidatorNFT.CallOpts, _salt, _factory)
}

// GetMetamorphicContractAddress is a free data retrieval call binding the contract method 0x8653a465.
//
// Solidity: function getMetamorphicContractAddress(bytes32 _salt, address _factory) pure returns(address)
func (_ValidatorNFT *ValidatorNFTCallerSession) GetMetamorphicContractAddress(_salt [32]byte, _factory common.Address) (common.Address, error) {
	return _ValidatorNFT.Contract.GetMetamorphicContractAddress(&_ValidatorNFT.CallOpts, _salt, _factory)
}

// GetPosition is a free data retrieval call binding the contract method 0xeb02c301.
//
// Solidity: function getPosition(uint256 tokenID_) view returns(uint256 shares, uint256 freeAfter, uint256 withdrawFreeAfter, uint256 accumulatorEth, uint256 accumulatorToken)
func (_ValidatorNFT *ValidatorNFTCaller) GetPosition(opts *bind.CallOpts, tokenID_ *big.Int) (struct {
	Shares            *big.Int
	FreeAfter         *big.Int
	WithdrawFreeAfter *big.Int
	AccumulatorEth    *big.Int
	AccumulatorToken  *big.Int
}, error) {
	var out []interface{}
	err := _ValidatorNFT.contract.Call(opts, &out, "getPosition", tokenID_)

	outstruct := new(struct {
		Shares            *big.Int
		FreeAfter         *big.Int
		WithdrawFreeAfter *big.Int
		AccumulatorEth    *big.Int
		AccumulatorToken  *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Shares = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.FreeAfter = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.WithdrawFreeAfter = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.AccumulatorEth = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.AccumulatorToken = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetPosition is a free data retrieval call binding the contract method 0xeb02c301.
//
// Solidity: function getPosition(uint256 tokenID_) view returns(uint256 shares, uint256 freeAfter, uint256 withdrawFreeAfter, uint256 accumulatorEth, uint256 accumulatorToken)
func (_ValidatorNFT *ValidatorNFTSession) GetPosition(tokenID_ *big.Int) (struct {
	Shares            *big.Int
	FreeAfter         *big.Int
	WithdrawFreeAfter *big.Int
	AccumulatorEth    *big.Int
	AccumulatorToken  *big.Int
}, error) {
	return _ValidatorNFT.Contract.GetPosition(&_ValidatorNFT.CallOpts, tokenID_)
}

// GetPosition is a free data retrieval call binding the contract method 0xeb02c301.
//
// Solidity: function getPosition(uint256 tokenID_) view returns(uint256 shares, uint256 freeAfter, uint256 withdrawFreeAfter, uint256 accumulatorEth, uint256 accumulatorToken)
func (_ValidatorNFT *ValidatorNFTCallerSession) GetPosition(tokenID_ *big.Int) (struct {
	Shares            *big.Int
	FreeAfter         *big.Int
	WithdrawFreeAfter *big.Int
	AccumulatorEth    *big.Int
	AccumulatorToken  *big.Int
}, error) {
	return _ValidatorNFT.Contract.GetPosition(&_ValidatorNFT.CallOpts, tokenID_)
}

// GetTokenAccumulator is a free data retrieval call binding the contract method 0xc47c6e14.
//
// Solidity: function getTokenAccumulator() view returns(uint256 accumulator, uint256 slush)
func (_ValidatorNFT *ValidatorNFTCaller) GetTokenAccumulator(opts *bind.CallOpts) (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	var out []interface{}
	err := _ValidatorNFT.contract.Call(opts, &out, "getTokenAccumulator")

	outstruct := new(struct {
		Accumulator *big.Int
		Slush       *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Accumulator = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Slush = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetTokenAccumulator is a free data retrieval call binding the contract method 0xc47c6e14.
//
// Solidity: function getTokenAccumulator() view returns(uint256 accumulator, uint256 slush)
func (_ValidatorNFT *ValidatorNFTSession) GetTokenAccumulator() (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	return _ValidatorNFT.Contract.GetTokenAccumulator(&_ValidatorNFT.CallOpts)
}

// GetTokenAccumulator is a free data retrieval call binding the contract method 0xc47c6e14.
//
// Solidity: function getTokenAccumulator() view returns(uint256 accumulator, uint256 slush)
func (_ValidatorNFT *ValidatorNFTCallerSession) GetTokenAccumulator() (struct {
	Accumulator *big.Int
	Slush       *big.Int
}, error) {
	return _ValidatorNFT.Contract.GetTokenAccumulator(&_ValidatorNFT.CallOpts)
}

// GetTotalReserveEth is a free data retrieval call binding the contract method 0x19b8be2f.
//
// Solidity: function getTotalReserveEth() view returns(uint256)
func (_ValidatorNFT *ValidatorNFTCaller) GetTotalReserveEth(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorNFT.contract.Call(opts, &out, "getTotalReserveEth")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalReserveEth is a free data retrieval call binding the contract method 0x19b8be2f.
//
// Solidity: function getTotalReserveEth() view returns(uint256)
func (_ValidatorNFT *ValidatorNFTSession) GetTotalReserveEth() (*big.Int, error) {
	return _ValidatorNFT.Contract.GetTotalReserveEth(&_ValidatorNFT.CallOpts)
}

// GetTotalReserveEth is a free data retrieval call binding the contract method 0x19b8be2f.
//
// Solidity: function getTotalReserveEth() view returns(uint256)
func (_ValidatorNFT *ValidatorNFTCallerSession) GetTotalReserveEth() (*big.Int, error) {
	return _ValidatorNFT.Contract.GetTotalReserveEth(&_ValidatorNFT.CallOpts)
}

// GetTotalReserveMadToken is a free data retrieval call binding the contract method 0x9aeac659.
//
// Solidity: function getTotalReserveMadToken() view returns(uint256)
func (_ValidatorNFT *ValidatorNFTCaller) GetTotalReserveMadToken(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorNFT.contract.Call(opts, &out, "getTotalReserveMadToken")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalReserveMadToken is a free data retrieval call binding the contract method 0x9aeac659.
//
// Solidity: function getTotalReserveMadToken() view returns(uint256)
func (_ValidatorNFT *ValidatorNFTSession) GetTotalReserveMadToken() (*big.Int, error) {
	return _ValidatorNFT.Contract.GetTotalReserveMadToken(&_ValidatorNFT.CallOpts)
}

// GetTotalReserveMadToken is a free data retrieval call binding the contract method 0x9aeac659.
//
// Solidity: function getTotalReserveMadToken() view returns(uint256)
func (_ValidatorNFT *ValidatorNFTCallerSession) GetTotalReserveMadToken() (*big.Int, error) {
	return _ValidatorNFT.Contract.GetTotalReserveMadToken(&_ValidatorNFT.CallOpts)
}

// GetTotalShares is a free data retrieval call binding the contract method 0xd5002f2e.
//
// Solidity: function getTotalShares() view returns(uint256)
func (_ValidatorNFT *ValidatorNFTCaller) GetTotalShares(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorNFT.contract.Call(opts, &out, "getTotalShares")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalShares is a free data retrieval call binding the contract method 0xd5002f2e.
//
// Solidity: function getTotalShares() view returns(uint256)
func (_ValidatorNFT *ValidatorNFTSession) GetTotalShares() (*big.Int, error) {
	return _ValidatorNFT.Contract.GetTotalShares(&_ValidatorNFT.CallOpts)
}

// GetTotalShares is a free data retrieval call binding the contract method 0xd5002f2e.
//
// Solidity: function getTotalShares() view returns(uint256)
func (_ValidatorNFT *ValidatorNFTCallerSession) GetTotalShares() (*big.Int, error) {
	return _ValidatorNFT.Contract.GetTotalShares(&_ValidatorNFT.CallOpts)
}

// IsAllowedProposal is a free data retrieval call binding the contract method 0x3771165e.
//
// Solidity: function isAllowedProposal(address addr) view returns(bool)
func (_ValidatorNFT *ValidatorNFTCaller) IsAllowedProposal(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var out []interface{}
	err := _ValidatorNFT.contract.Call(opts, &out, "isAllowedProposal", addr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsAllowedProposal is a free data retrieval call binding the contract method 0x3771165e.
//
// Solidity: function isAllowedProposal(address addr) view returns(bool)
func (_ValidatorNFT *ValidatorNFTSession) IsAllowedProposal(addr common.Address) (bool, error) {
	return _ValidatorNFT.Contract.IsAllowedProposal(&_ValidatorNFT.CallOpts, addr)
}

// IsAllowedProposal is a free data retrieval call binding the contract method 0x3771165e.
//
// Solidity: function isAllowedProposal(address addr) view returns(bool)
func (_ValidatorNFT *ValidatorNFTCallerSession) IsAllowedProposal(addr common.Address) (bool, error) {
	return _ValidatorNFT.Contract.IsAllowedProposal(&_ValidatorNFT.CallOpts, addr)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ValidatorNFT *ValidatorNFTCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _ValidatorNFT.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ValidatorNFT *ValidatorNFTSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _ValidatorNFT.Contract.IsApprovedForAll(&_ValidatorNFT.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ValidatorNFT *ValidatorNFTCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _ValidatorNFT.Contract.IsApprovedForAll(&_ValidatorNFT.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ValidatorNFT *ValidatorNFTCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ValidatorNFT.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ValidatorNFT *ValidatorNFTSession) Name() (string, error) {
	return _ValidatorNFT.Contract.Name(&_ValidatorNFT.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ValidatorNFT *ValidatorNFTCallerSession) Name() (string, error) {
	return _ValidatorNFT.Contract.Name(&_ValidatorNFT.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_ValidatorNFT *ValidatorNFTCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ValidatorNFT.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_ValidatorNFT *ValidatorNFTSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _ValidatorNFT.Contract.OwnerOf(&_ValidatorNFT.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_ValidatorNFT *ValidatorNFTCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _ValidatorNFT.Contract.OwnerOf(&_ValidatorNFT.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ValidatorNFT *ValidatorNFTCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _ValidatorNFT.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ValidatorNFT *ValidatorNFTSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ValidatorNFT.Contract.SupportsInterface(&_ValidatorNFT.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ValidatorNFT *ValidatorNFTCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ValidatorNFT.Contract.SupportsInterface(&_ValidatorNFT.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ValidatorNFT *ValidatorNFTCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ValidatorNFT.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ValidatorNFT *ValidatorNFTSession) Symbol() (string, error) {
	return _ValidatorNFT.Contract.Symbol(&_ValidatorNFT.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ValidatorNFT *ValidatorNFTCallerSession) Symbol() (string, error) {
	return _ValidatorNFT.Contract.Symbol(&_ValidatorNFT.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ValidatorNFT *ValidatorNFTCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _ValidatorNFT.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ValidatorNFT *ValidatorNFTSession) TokenURI(tokenId *big.Int) (string, error) {
	return _ValidatorNFT.Contract.TokenURI(&_ValidatorNFT.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ValidatorNFT *ValidatorNFTCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _ValidatorNFT.Contract.TokenURI(&_ValidatorNFT.CallOpts, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_ValidatorNFT *ValidatorNFTTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_ValidatorNFT *ValidatorNFTSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.Approve(&_ValidatorNFT.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_ValidatorNFT *ValidatorNFTTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.Approve(&_ValidatorNFT.TransactOpts, to, tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenID_) returns(uint256 payoutEth, uint256 payoutMadToken)
func (_ValidatorNFT *ValidatorNFTTransactor) Burn(opts *bind.TransactOpts, tokenID_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.contract.Transact(opts, "burn", tokenID_)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenID_) returns(uint256 payoutEth, uint256 payoutMadToken)
func (_ValidatorNFT *ValidatorNFTSession) Burn(tokenID_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.Burn(&_ValidatorNFT.TransactOpts, tokenID_)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenID_) returns(uint256 payoutEth, uint256 payoutMadToken)
func (_ValidatorNFT *ValidatorNFTTransactorSession) Burn(tokenID_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.Burn(&_ValidatorNFT.TransactOpts, tokenID_)
}

// BurnTo is a paid mutator transaction binding the contract method 0xea785a5e.
//
// Solidity: function burnTo(address to_, uint256 tokenID_) returns(uint256 payoutEth, uint256 payoutMadToken)
func (_ValidatorNFT *ValidatorNFTTransactor) BurnTo(opts *bind.TransactOpts, to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.contract.Transact(opts, "burnTo", to_, tokenID_)
}

// BurnTo is a paid mutator transaction binding the contract method 0xea785a5e.
//
// Solidity: function burnTo(address to_, uint256 tokenID_) returns(uint256 payoutEth, uint256 payoutMadToken)
func (_ValidatorNFT *ValidatorNFTSession) BurnTo(to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.BurnTo(&_ValidatorNFT.TransactOpts, to_, tokenID_)
}

// BurnTo is a paid mutator transaction binding the contract method 0xea785a5e.
//
// Solidity: function burnTo(address to_, uint256 tokenID_) returns(uint256 payoutEth, uint256 payoutMadToken)
func (_ValidatorNFT *ValidatorNFTTransactorSession) BurnTo(to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.BurnTo(&_ValidatorNFT.TransactOpts, to_, tokenID_)
}

// CollectEth is a paid mutator transaction binding the contract method 0x2a0d8bd1.
//
// Solidity: function collectEth(uint256 tokenID_) returns(uint256 payout)
func (_ValidatorNFT *ValidatorNFTTransactor) CollectEth(opts *bind.TransactOpts, tokenID_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.contract.Transact(opts, "collectEth", tokenID_)
}

// CollectEth is a paid mutator transaction binding the contract method 0x2a0d8bd1.
//
// Solidity: function collectEth(uint256 tokenID_) returns(uint256 payout)
func (_ValidatorNFT *ValidatorNFTSession) CollectEth(tokenID_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.CollectEth(&_ValidatorNFT.TransactOpts, tokenID_)
}

// CollectEth is a paid mutator transaction binding the contract method 0x2a0d8bd1.
//
// Solidity: function collectEth(uint256 tokenID_) returns(uint256 payout)
func (_ValidatorNFT *ValidatorNFTTransactorSession) CollectEth(tokenID_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.CollectEth(&_ValidatorNFT.TransactOpts, tokenID_)
}

// CollectEthTo is a paid mutator transaction binding the contract method 0xbe444379.
//
// Solidity: function collectEthTo(address to_, uint256 tokenID_) returns(uint256 payout)
func (_ValidatorNFT *ValidatorNFTTransactor) CollectEthTo(opts *bind.TransactOpts, to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.contract.Transact(opts, "collectEthTo", to_, tokenID_)
}

// CollectEthTo is a paid mutator transaction binding the contract method 0xbe444379.
//
// Solidity: function collectEthTo(address to_, uint256 tokenID_) returns(uint256 payout)
func (_ValidatorNFT *ValidatorNFTSession) CollectEthTo(to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.CollectEthTo(&_ValidatorNFT.TransactOpts, to_, tokenID_)
}

// CollectEthTo is a paid mutator transaction binding the contract method 0xbe444379.
//
// Solidity: function collectEthTo(address to_, uint256 tokenID_) returns(uint256 payout)
func (_ValidatorNFT *ValidatorNFTTransactorSession) CollectEthTo(to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.CollectEthTo(&_ValidatorNFT.TransactOpts, to_, tokenID_)
}

// CollectToken is a paid mutator transaction binding the contract method 0xe35c3e28.
//
// Solidity: function collectToken(uint256 tokenID_) returns(uint256 payout)
func (_ValidatorNFT *ValidatorNFTTransactor) CollectToken(opts *bind.TransactOpts, tokenID_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.contract.Transact(opts, "collectToken", tokenID_)
}

// CollectToken is a paid mutator transaction binding the contract method 0xe35c3e28.
//
// Solidity: function collectToken(uint256 tokenID_) returns(uint256 payout)
func (_ValidatorNFT *ValidatorNFTSession) CollectToken(tokenID_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.CollectToken(&_ValidatorNFT.TransactOpts, tokenID_)
}

// CollectToken is a paid mutator transaction binding the contract method 0xe35c3e28.
//
// Solidity: function collectToken(uint256 tokenID_) returns(uint256 payout)
func (_ValidatorNFT *ValidatorNFTTransactorSession) CollectToken(tokenID_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.CollectToken(&_ValidatorNFT.TransactOpts, tokenID_)
}

// CollectTokenTo is a paid mutator transaction binding the contract method 0x8853b950.
//
// Solidity: function collectTokenTo(address to_, uint256 tokenID_) returns(uint256 payout)
func (_ValidatorNFT *ValidatorNFTTransactor) CollectTokenTo(opts *bind.TransactOpts, to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.contract.Transact(opts, "collectTokenTo", to_, tokenID_)
}

// CollectTokenTo is a paid mutator transaction binding the contract method 0x8853b950.
//
// Solidity: function collectTokenTo(address to_, uint256 tokenID_) returns(uint256 payout)
func (_ValidatorNFT *ValidatorNFTSession) CollectTokenTo(to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.CollectTokenTo(&_ValidatorNFT.TransactOpts, to_, tokenID_)
}

// CollectTokenTo is a paid mutator transaction binding the contract method 0x8853b950.
//
// Solidity: function collectTokenTo(address to_, uint256 tokenID_) returns(uint256 payout)
func (_ValidatorNFT *ValidatorNFTTransactorSession) CollectTokenTo(to_ common.Address, tokenID_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.CollectTokenTo(&_ValidatorNFT.TransactOpts, to_, tokenID_)
}

// DepositEth is a paid mutator transaction binding the contract method 0x99a89ecc.
//
// Solidity: function depositEth(uint8 magic_) payable returns()
func (_ValidatorNFT *ValidatorNFTTransactor) DepositEth(opts *bind.TransactOpts, magic_ uint8) (*types.Transaction, error) {
	return _ValidatorNFT.contract.Transact(opts, "depositEth", magic_)
}

// DepositEth is a paid mutator transaction binding the contract method 0x99a89ecc.
//
// Solidity: function depositEth(uint8 magic_) payable returns()
func (_ValidatorNFT *ValidatorNFTSession) DepositEth(magic_ uint8) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.DepositEth(&_ValidatorNFT.TransactOpts, magic_)
}

// DepositEth is a paid mutator transaction binding the contract method 0x99a89ecc.
//
// Solidity: function depositEth(uint8 magic_) payable returns()
func (_ValidatorNFT *ValidatorNFTTransactorSession) DepositEth(magic_ uint8) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.DepositEth(&_ValidatorNFT.TransactOpts, magic_)
}

// DepositToken is a paid mutator transaction binding the contract method 0x8191f5e5.
//
// Solidity: function depositToken(uint8 magic_, uint256 amount_) returns()
func (_ValidatorNFT *ValidatorNFTTransactor) DepositToken(opts *bind.TransactOpts, magic_ uint8, amount_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.contract.Transact(opts, "depositToken", magic_, amount_)
}

// DepositToken is a paid mutator transaction binding the contract method 0x8191f5e5.
//
// Solidity: function depositToken(uint8 magic_, uint256 amount_) returns()
func (_ValidatorNFT *ValidatorNFTSession) DepositToken(magic_ uint8, amount_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.DepositToken(&_ValidatorNFT.TransactOpts, magic_, amount_)
}

// DepositToken is a paid mutator transaction binding the contract method 0x8191f5e5.
//
// Solidity: function depositToken(uint8 magic_, uint256 amount_) returns()
func (_ValidatorNFT *ValidatorNFTTransactorSession) DepositToken(magic_ uint8, amount_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.DepositToken(&_ValidatorNFT.TransactOpts, magic_, amount_)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_ValidatorNFT *ValidatorNFTTransactor) Initialize(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorNFT.contract.Transact(opts, "initialize")
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_ValidatorNFT *ValidatorNFTSession) Initialize() (*types.Transaction, error) {
	return _ValidatorNFT.Contract.Initialize(&_ValidatorNFT.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_ValidatorNFT *ValidatorNFTTransactorSession) Initialize() (*types.Transaction, error) {
	return _ValidatorNFT.Contract.Initialize(&_ValidatorNFT.TransactOpts)
}

// LockOwnPosition is a paid mutator transaction binding the contract method 0xe42a673c.
//
// Solidity: function lockOwnPosition(uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_ValidatorNFT *ValidatorNFTTransactor) LockOwnPosition(opts *bind.TransactOpts, tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.contract.Transact(opts, "lockOwnPosition", tokenID_, lockDuration_)
}

// LockOwnPosition is a paid mutator transaction binding the contract method 0xe42a673c.
//
// Solidity: function lockOwnPosition(uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_ValidatorNFT *ValidatorNFTSession) LockOwnPosition(tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.LockOwnPosition(&_ValidatorNFT.TransactOpts, tokenID_, lockDuration_)
}

// LockOwnPosition is a paid mutator transaction binding the contract method 0xe42a673c.
//
// Solidity: function lockOwnPosition(uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_ValidatorNFT *ValidatorNFTTransactorSession) LockOwnPosition(tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.LockOwnPosition(&_ValidatorNFT.TransactOpts, tokenID_, lockDuration_)
}

// LockPosition is a paid mutator transaction binding the contract method 0x0cc65dfb.
//
// Solidity: function lockPosition(address caller_, uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_ValidatorNFT *ValidatorNFTTransactor) LockPosition(opts *bind.TransactOpts, caller_ common.Address, tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.contract.Transact(opts, "lockPosition", caller_, tokenID_, lockDuration_)
}

// LockPosition is a paid mutator transaction binding the contract method 0x0cc65dfb.
//
// Solidity: function lockPosition(address caller_, uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_ValidatorNFT *ValidatorNFTSession) LockPosition(caller_ common.Address, tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.LockPosition(&_ValidatorNFT.TransactOpts, caller_, tokenID_, lockDuration_)
}

// LockPosition is a paid mutator transaction binding the contract method 0x0cc65dfb.
//
// Solidity: function lockPosition(address caller_, uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_ValidatorNFT *ValidatorNFTTransactorSession) LockPosition(caller_ common.Address, tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.LockPosition(&_ValidatorNFT.TransactOpts, caller_, tokenID_, lockDuration_)
}

// LockWithdraw is a paid mutator transaction binding the contract method 0x0e4eb15b.
//
// Solidity: function lockWithdraw(uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_ValidatorNFT *ValidatorNFTTransactor) LockWithdraw(opts *bind.TransactOpts, tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.contract.Transact(opts, "lockWithdraw", tokenID_, lockDuration_)
}

// LockWithdraw is a paid mutator transaction binding the contract method 0x0e4eb15b.
//
// Solidity: function lockWithdraw(uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_ValidatorNFT *ValidatorNFTSession) LockWithdraw(tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.LockWithdraw(&_ValidatorNFT.TransactOpts, tokenID_, lockDuration_)
}

// LockWithdraw is a paid mutator transaction binding the contract method 0x0e4eb15b.
//
// Solidity: function lockWithdraw(uint256 tokenID_, uint256 lockDuration_) returns(uint256)
func (_ValidatorNFT *ValidatorNFTTransactorSession) LockWithdraw(tokenID_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.LockWithdraw(&_ValidatorNFT.TransactOpts, tokenID_, lockDuration_)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 amount_) returns(uint256 tokenID)
func (_ValidatorNFT *ValidatorNFTTransactor) Mint(opts *bind.TransactOpts, amount_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.contract.Transact(opts, "mint", amount_)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 amount_) returns(uint256 tokenID)
func (_ValidatorNFT *ValidatorNFTSession) Mint(amount_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.Mint(&_ValidatorNFT.TransactOpts, amount_)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 amount_) returns(uint256 tokenID)
func (_ValidatorNFT *ValidatorNFTTransactorSession) Mint(amount_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.Mint(&_ValidatorNFT.TransactOpts, amount_)
}

// MintTo is a paid mutator transaction binding the contract method 0x2baf2acb.
//
// Solidity: function mintTo(address to_, uint256 amount_, uint256 lockDuration_) returns(uint256 tokenID)
func (_ValidatorNFT *ValidatorNFTTransactor) MintTo(opts *bind.TransactOpts, to_ common.Address, amount_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.contract.Transact(opts, "mintTo", to_, amount_, lockDuration_)
}

// MintTo is a paid mutator transaction binding the contract method 0x2baf2acb.
//
// Solidity: function mintTo(address to_, uint256 amount_, uint256 lockDuration_) returns(uint256 tokenID)
func (_ValidatorNFT *ValidatorNFTSession) MintTo(to_ common.Address, amount_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.MintTo(&_ValidatorNFT.TransactOpts, to_, amount_, lockDuration_)
}

// MintTo is a paid mutator transaction binding the contract method 0x2baf2acb.
//
// Solidity: function mintTo(address to_, uint256 amount_, uint256 lockDuration_) returns(uint256 tokenID)
func (_ValidatorNFT *ValidatorNFTTransactorSession) MintTo(to_ common.Address, amount_ *big.Int, lockDuration_ *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.MintTo(&_ValidatorNFT.TransactOpts, to_, amount_, lockDuration_)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_ValidatorNFT *ValidatorNFTTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_ValidatorNFT *ValidatorNFTSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.SafeTransferFrom(&_ValidatorNFT.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_ValidatorNFT *ValidatorNFTTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.SafeTransferFrom(&_ValidatorNFT.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_ValidatorNFT *ValidatorNFTTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _ValidatorNFT.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_ValidatorNFT *ValidatorNFTSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.SafeTransferFrom0(&_ValidatorNFT.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_ValidatorNFT *ValidatorNFTTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.SafeTransferFrom0(&_ValidatorNFT.TransactOpts, from, to, tokenId, _data)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_ValidatorNFT *ValidatorNFTTransactor) SetAdmin(opts *bind.TransactOpts, admin_ common.Address) (*types.Transaction, error) {
	return _ValidatorNFT.contract.Transact(opts, "setAdmin", admin_)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_ValidatorNFT *ValidatorNFTSession) SetAdmin(admin_ common.Address) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.SetAdmin(&_ValidatorNFT.TransactOpts, admin_)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address admin_) returns()
func (_ValidatorNFT *ValidatorNFTTransactorSession) SetAdmin(admin_ common.Address) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.SetAdmin(&_ValidatorNFT.TransactOpts, admin_)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ValidatorNFT *ValidatorNFTTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _ValidatorNFT.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ValidatorNFT *ValidatorNFTSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.SetApprovalForAll(&_ValidatorNFT.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ValidatorNFT *ValidatorNFTTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.SetApprovalForAll(&_ValidatorNFT.TransactOpts, operator, approved)
}

// SkimExcessEth is a paid mutator transaction binding the contract method 0x971b505b.
//
// Solidity: function skimExcessEth(address to_) returns(uint256 excess)
func (_ValidatorNFT *ValidatorNFTTransactor) SkimExcessEth(opts *bind.TransactOpts, to_ common.Address) (*types.Transaction, error) {
	return _ValidatorNFT.contract.Transact(opts, "skimExcessEth", to_)
}

// SkimExcessEth is a paid mutator transaction binding the contract method 0x971b505b.
//
// Solidity: function skimExcessEth(address to_) returns(uint256 excess)
func (_ValidatorNFT *ValidatorNFTSession) SkimExcessEth(to_ common.Address) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.SkimExcessEth(&_ValidatorNFT.TransactOpts, to_)
}

// SkimExcessEth is a paid mutator transaction binding the contract method 0x971b505b.
//
// Solidity: function skimExcessEth(address to_) returns(uint256 excess)
func (_ValidatorNFT *ValidatorNFTTransactorSession) SkimExcessEth(to_ common.Address) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.SkimExcessEth(&_ValidatorNFT.TransactOpts, to_)
}

// SkimExcessToken is a paid mutator transaction binding the contract method 0x7aa507fb.
//
// Solidity: function skimExcessToken(address to_) returns(uint256 excess)
func (_ValidatorNFT *ValidatorNFTTransactor) SkimExcessToken(opts *bind.TransactOpts, to_ common.Address) (*types.Transaction, error) {
	return _ValidatorNFT.contract.Transact(opts, "skimExcessToken", to_)
}

// SkimExcessToken is a paid mutator transaction binding the contract method 0x7aa507fb.
//
// Solidity: function skimExcessToken(address to_) returns(uint256 excess)
func (_ValidatorNFT *ValidatorNFTSession) SkimExcessToken(to_ common.Address) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.SkimExcessToken(&_ValidatorNFT.TransactOpts, to_)
}

// SkimExcessToken is a paid mutator transaction binding the contract method 0x7aa507fb.
//
// Solidity: function skimExcessToken(address to_) returns(uint256 excess)
func (_ValidatorNFT *ValidatorNFTTransactorSession) SkimExcessToken(to_ common.Address) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.SkimExcessToken(&_ValidatorNFT.TransactOpts, to_)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_ValidatorNFT *ValidatorNFTTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_ValidatorNFT *ValidatorNFTSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.TransferFrom(&_ValidatorNFT.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_ValidatorNFT *ValidatorNFTTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ValidatorNFT.Contract.TransferFrom(&_ValidatorNFT.TransactOpts, from, to, tokenId)
}

// TripCB is a paid mutator transaction binding the contract method 0xadfdc03f.
//
// Solidity: function tripCB() returns()
func (_ValidatorNFT *ValidatorNFTTransactor) TripCB(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorNFT.contract.Transact(opts, "tripCB")
}

// TripCB is a paid mutator transaction binding the contract method 0xadfdc03f.
//
// Solidity: function tripCB() returns()
func (_ValidatorNFT *ValidatorNFTSession) TripCB() (*types.Transaction, error) {
	return _ValidatorNFT.Contract.TripCB(&_ValidatorNFT.TransactOpts)
}

// TripCB is a paid mutator transaction binding the contract method 0xadfdc03f.
//
// Solidity: function tripCB() returns()
func (_ValidatorNFT *ValidatorNFTTransactorSession) TripCB() (*types.Transaction, error) {
	return _ValidatorNFT.Contract.TripCB(&_ValidatorNFT.TransactOpts)
}

// ValidatorNFTApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the ValidatorNFT contract.
type ValidatorNFTApprovalIterator struct {
	Event *ValidatorNFTApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorNFTApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorNFTApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorNFTApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorNFTApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorNFTApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorNFTApproval represents a Approval event raised by the ValidatorNFT contract.
type ValidatorNFTApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_ValidatorNFT *ValidatorNFTFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*ValidatorNFTApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ValidatorNFT.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorNFTApprovalIterator{contract: _ValidatorNFT.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_ValidatorNFT *ValidatorNFTFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ValidatorNFTApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ValidatorNFT.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorNFTApproval)
				if err := _ValidatorNFT.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_ValidatorNFT *ValidatorNFTFilterer) ParseApproval(log types.Log) (*ValidatorNFTApproval, error) {
	event := new(ValidatorNFTApproval)
	if err := _ValidatorNFT.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorNFTApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the ValidatorNFT contract.
type ValidatorNFTApprovalForAllIterator struct {
	Event *ValidatorNFTApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorNFTApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorNFTApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorNFTApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorNFTApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorNFTApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorNFTApprovalForAll represents a ApprovalForAll event raised by the ValidatorNFT contract.
type ValidatorNFTApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ValidatorNFT *ValidatorNFTFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*ValidatorNFTApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ValidatorNFT.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorNFTApprovalForAllIterator{contract: _ValidatorNFT.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ValidatorNFT *ValidatorNFTFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *ValidatorNFTApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ValidatorNFT.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorNFTApprovalForAll)
				if err := _ValidatorNFT.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ValidatorNFT *ValidatorNFTFilterer) ParseApprovalForAll(log types.Log) (*ValidatorNFTApprovalForAll, error) {
	event := new(ValidatorNFTApprovalForAll)
	if err := _ValidatorNFT.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorNFTTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the ValidatorNFT contract.
type ValidatorNFTTransferIterator struct {
	Event *ValidatorNFTTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorNFTTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorNFTTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorNFTTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorNFTTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorNFTTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorNFTTransfer represents a Transfer event raised by the ValidatorNFT contract.
type ValidatorNFTTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_ValidatorNFT *ValidatorNFTFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*ValidatorNFTTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ValidatorNFT.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorNFTTransferIterator{contract: _ValidatorNFT.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_ValidatorNFT *ValidatorNFTFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ValidatorNFTTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ValidatorNFT.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorNFTTransfer)
				if err := _ValidatorNFT.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_ValidatorNFT *ValidatorNFTFilterer) ParseTransfer(log types.Log) (*ValidatorNFTTransfer, error) {
	event := new(ValidatorNFTTransfer)
	if err := _ValidatorNFT.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorPoolMetaData contains all meta data concerning the ValidatorPool contract.
var ValidatorPoolMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MaintenanceScheduled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorNFT\",\"type\":\"uint256\"}],\"name\":\"ValidatorJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeNFT\",\"type\":\"uint256\"}],\"name\":\"ValidatorLeft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ValidatorMajorSlashed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeNFT\",\"type\":\"uint256\"}],\"name\":\"ValidatorMinorSlashed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_claimPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxIntervalWithoutSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_positionLockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimExitingNFTPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectProfits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payoutEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoutToken\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"completeETHDKG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator_\",\"type\":\"address\"}],\"name\":\"getLocation\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"validators_\",\"type\":\"address[]\"}],\"name\":\"getLocations\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"getMetamorphicContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"name\":\"getValidator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"name\":\"getValidatorData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"internalType\":\"structValidatorData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidatorsAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidatorsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeETHDKG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"isAccusable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"isInExitingQueue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMaintenanceScheduled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dishonestValidator_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"disputer_\",\"type\":\"address\"}],\"name\":\"majorSlash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dishonestValidator_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"disputer_\",\"type\":\"address\"}],\"name\":\"minorSlash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseConsensus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"madnetHeight_\",\"type\":\"uint256\"}],\"name\":\"pauseConsensusOnArbitraryHeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"validators_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"stakerTokenIDs_\",\"type\":\"uint256[]\"}],\"name\":\"registerValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scheduleMaintenance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"disputerReward_\",\"type\":\"uint256\"}],\"name\":\"setDisputerReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ip_\",\"type\":\"string\"}],\"name\":\"setLocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxNumValidators_\",\"type\":\"uint256\"}],\"name\":\"setMaxNumValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeAmount_\",\"type\":\"uint256\"}],\"name\":\"setStakeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"tryGetTokenID\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unregisterAllValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"validators_\",\"type\":\"address[]\"}],\"name\":\"unregisterValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6101a060405234801561001157600080fd5b503360e0818152604080517fff0000000000000000000000000000000000000000000000000000000000000060208083018290526001600160601b0319606096871b8116602185015268536e617073686f747360b81b60358501527f1c0bf703a3415cada9785e89e9d70314c3111ae7d8e04f33bb42eb1d264088be6055808601829052865180870390910181526075860187528051908401206001600160a01b039081166101809081528851609588018790528a1b8416609688015265455448444b4760d01b60aa88015260ca8088018490528851808903909101815260ea880189528051908601208216610160908152895161010a89018890528b1b851661010b8901526714dd185ad953919560c21b61011f89015261013f8089018590528951808a03909101815261015f89018a5280519087012083166101009081528a5161017f8a018990528c1b8616838a01526b15985b1a59185d1bdc93919560a21b6101948a01526101b4808a018690528a51808b0390910181526101d48a018b5280519088012084166101209081528b516101f48b019990995297909b1b9094166101f58801526726b0b22a37b5b2b760c11b610209880152610229808801939093528751808803909301835261024990960190965280519201919091209093166101408190526202a3006080819052600360a081905261200060c0819052965197519351955194519197909695909490929161581b6200039560003960008181610b0101528181611c16015281816123e0015261370401526000818161065b01528181610de301528181610f6301528181610ffb01528181611617015281816121f8015281816125410152818161272b015261316a015260008181610724015281816108ea015281816110bf015281816111dc01528181612a4501528181612c7e01528181613482015281816135850152818161395a01528181613a5f01528181613e8601528181613f5c0152614f6901526000818161081801528181612b1101528181612bcb01528181612f5d0152818161420001528181614f37015261500801526000818161172401528181611d8f01528181611e6101528181613015015281816135530152818161362401528181614274015281816147970152818161492901526149b201526000611f950152600081816102e701526123bf01526000818161034801526136e30152600081816103210152611d69015261581b6000f3fe608060405234801561001057600080fd5b506004361061020b5760003560e01c8063769cc6951161012a578063bc33bb01116100bd578063d9e0dc591161008c578063ee9e49bd11610071578063ee9e49bd146105e3578063f6442e2414610628578063facd743b1461063057600080fd5b8063d9e0dc59146105b0578063e4ad75f1146105d057600080fd5b8063bc33bb0114610529578063c09514511461053c578063c6e86ad614610580578063c958e0d61461059357600080fd5b80638653a465116100f95780638653a465146104015780638f579924146104f95780639c7d896114610501578063b5d896271461051657600080fd5b8063769cc695146103cb5780637d907284146103d35780638129fc1c146103e6578063827bfbdf146103ee57600080fd5b806343808c50116101a257806364c0461c1161017157806364c0461c1461037257806365bd91af146103855780636c0da0b41461039857806376207f9c146103ab57600080fd5b806343808c5014610309578063480c57a81461031c578063532f1fea1461034357806357b51c9c1461036a57600080fd5b806320c2856d116101de57806320c2856d146102b15780632380db1a146102c457806327498240146102cc5780634377919b146102e257600080fd5b8063048d56c714610210578063150b7a02146102255780631885570f146102925780631e5975f4146102a9575b600080fd5b61022361021e36600461515b565b610643565b005b61025c6102333660046151c3565b7f150b7a0200000000000000000000000000000000000000000000000000000000949350505050565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020015b60405180910390f35b60045460ff165b6040519015158152602001610289565b610223610ae9565b6102996102bf3660046152c1565b610bbe565b610223610bcf565b6102d4610cb2565b604051908152602001610289565b6102d47f000000000000000000000000000000000000000000000000000000000000000081565b6102236103173660046152e5565b610cc2565b6102d47f000000000000000000000000000000000000000000000000000000000000000081565b6102d47f000000000000000000000000000000000000000000000000000000000000000081565b610223610d54565b61022361038036600461515b565b610fe3565b610223610393366004615343565b6113eb565b6102236103a63660046152e5565b611927565b6103be6103b93660046153af565b6119b9565b604051610289919061545c565b6102d4611b3d565b6102236103e13660046152e5565b611eeb565b610223611f7d565b6102236103fc3660046154dc565b612146565b6104d461040f36600461554e565b6040517fff0000000000000000000000000000000000000000000000000000000000000060208201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606083901b166021820152603581018390527f1c0bf703a3415cada9785e89e9d70314c3111ae7d8e04f33bb42eb1d264088be6055820152600090607501604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101209392505050565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610289565b6102236121e0565b6105096122b9565b6040516102899190615573565b6104d46105243660046152e5565b6122c5565b6102236105373660046152e5565b612330565b61054f61054a3660046152e5565b6125ae565b60408051825173ffffffffffffffffffffffffffffffffffffffff1681526020928301519281019290925201610289565b61022361058e3660046153af565b61261e565b61059b6128f3565b60408051928352602083019190915201610289565b6105c36105be3660046152c1565b612e3a565b60405161028991906155cd565b6102996105de3660046152c1565b612ef3565b6105f66105f13660046152c1565b612f46565b60408051931515845273ffffffffffffffffffffffffffffffffffffffff909216602084015290820152606001610289565b61022361305d565b61029961063e3660046152c1565b6132b4565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146106f35760405162461bcd60e51b815260206004820152602b60248201527f56616c696461746f72506f6f6c3a204f6e6c7920455448444b4720636f6e747260448201527f61637420616c6c6f77656400000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015610780573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a491906155e0565b905047600080806107b4876132bf565b9250925092506107c3876132b4565b156107d6576107d187613443565b610801565b6108018773ffffffffffffffffffffffffffffffffffffffff16600090815260076020526040812055565b73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016638191f5e5602a6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815260ff909116600482015260248101869052604401600060405180830381600087803b15801561089957600080fd5b505af11580156108ad573d6000803e3d6000fd5b505050506108bc86838361347d565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015610946573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096a91906155e0565b8514610a045760405162461bcd60e51b815260206004820152604a60248201527f56616c696461746f72506f6f6c3a20496e76616c6964207472616e736163746960448201527f6f6e2c20746f6b656e2062616c616e6365206f662074686520636f6e7472616360648201527f74206368616e6765642100000000000000000000000000000000000000000000608482015260a4016106ea565b478414610a9f5760405162461bcd60e51b815260206004820152604860248201527f56616c696461746f72506f6f6c3a20496e76616c6964207472616e736163746960448201527f6f6e2c206574682062616c616e6365206f662074686520636f6e74726163742060648201527f6368616e67656421000000000000000000000000000000000000000000000000608482015260a4016106ea565b60405173ffffffffffffffffffffffffffffffffffffffff8816907fee806478c61c75fc3ec50328b2af43290d1860ef40d5dfbba62ece0e1e3abe9e90600090a250505050505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610b945760405162461bcd60e51b815260206004820152603460248201527f56616c696461746f72506f6f6c3a2043616c6c6572206973206e6f742074686560448201527f20736e617073686f747320636f6e74726163742100000000000000000000000060648201526084016106ea565b600480547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055565b6000610bc9826134b2565b92915050565b60095473ffffffffffffffffffffffffffffffffffffffff163314610c5c5760405162461bcd60e51b815260206004820152602960248201527f56616c696461746f7273506f6f6c3a2052657175697265732061646d696e207060448201527f726976696c65676573000000000000000000000000000000000000000000000060648201526084016106ea565b600480547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556040517fc77f315ab4072b428052ff8f369916ce39f7fa7e925613f3e9b28fe383c565c890600090a1565b6000610cbd60055490565b905090565b60095473ffffffffffffffffffffffffffffffffffffffff163314610d4f5760405162461bcd60e51b815260206004820152602960248201527f56616c696461746f7273506f6f6c3a2052657175697265732061646d696e207060448201527f726976696c65676573000000000000000000000000000000000000000000000060648201526084016106ea565b600155565b60095473ffffffffffffffffffffffffffffffffffffffff163314610de15760405162461bcd60e51b815260206004820152602960248201527f56616c696461746f7273506f6f6c3a2052657175697265732061646d696e207060448201527f726976696c65676573000000000000000000000000000000000000000000000060648201526084016106ea565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663747b217c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7091906155f9565b15610ee35760405162461bcd60e51b815260206004820152602f60248201527f56616c696461746f72506f6f6c3a205468657265277320616e20455448444b4760448201527f20726f756e642072756e6e696e6721000000000000000000000000000000000060648201526084016106ea565b600454610100900460ff1615610f615760405162461bcd60e51b815260206004820152603760248201527f56616c696461746f72506f6f6c3a204572726f72204d61646e657420436f6e7360448201527f656e7375732073686f756c642062652068616c7465642100000000000000000060648201526084016106ea565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166357b51c9c6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610fc957600080fd5b505af1158015610fdd573d6000803e3d6000fd5b50505050565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461108e5760405162461bcd60e51b815260206004820152602b60248201527f56616c696461746f72506f6f6c3a204f6e6c7920455448444b4720636f6e747260448201527f61637420616c6c6f77656400000000000000000000000000000000000000000060648201526084016106ea565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa15801561111b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113f91906155e0565b9050476000808061114f876132bf565b91945092509050600083156111785761116784613516565b905061117388826136a7565b6111a3565b6111a38873ffffffffffffffffffffffffffffffffffffffff16600090815260076020526040812055565b6111ae87848461347d565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015611238573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125c91906155e0565b86146112f65760405162461bcd60e51b815260206004820152604a60248201527f56616c696461746f72506f6f6c3a20496e76616c6964207472616e736163746960448201527f6f6e2c20746f6b656e2062616c616e6365206f662074686520636f6e7472616360648201527f74206368616e6765642100000000000000000000000000000000000000000000608482015260a4016106ea565b4785146113915760405162461bcd60e51b815260206004820152604860248201527f56616c696461746f72506f6f6c3a20496e76616c6964207472616e736163746960448201527f6f6e2c206574682062616c616e6365206f662074686520636f6e74726163742060648201527f6368616e67656421000000000000000000000000000000000000000000000000608482015260a4016106ea565b8773ffffffffffffffffffffffffffffffffffffffff167f23f67a6ac6d764dca01e28630334f5b636e2b1928c0a5d5b5428da3f69167208826040516113d991815260200190565b60405180910390a25050505050505050565b60095473ffffffffffffffffffffffffffffffffffffffff1633146114785760405162461bcd60e51b815260206004820152602960248201527f56616c696461746f7273506f6f6c3a2052657175697265732061646d696e207060448201527f726976696c65676573000000000000000000000000000000000000000000000060648201526084016106ea565b600254600554611488908561564a565b11156115225760405162461bcd60e51b815260206004820152604660248201527f56616c696461746f72506f6f6c3a20546865726520617265206e6f7420656e6f60448201527f75676820667265652073706f747320666f7220616c6c206e65772076616c696460648201527f61746f7273210000000000000000000000000000000000000000000000000000608482015260a4016106ea565b8281146115975760405162461bcd60e51b815260206004820152603860248201527f56616c696461746f72506f6f6c3a20426f746820696e7075742061727261792060448201527f73686f756c6420686176652073616d65206c656e67746821000000000000000060648201526084016106ea565b600454610100900460ff16156116155760405162461bcd60e51b815260206004820152603760248201527f56616c696461746f72506f6f6c3a204572726f72204d61646e657420436f6e7360448201527f656e7375732073686f756c642062652068616c7465642100000000000000000060648201526084016106ea565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663747b217c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611680573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a491906155f9565b156117175760405162461bcd60e51b815260206004820152602f60248201527f56616c696461746f72506f6f6c3a205468657265277320616e20455448444b4760448201527f20726f756e642072756e6e696e6721000000000000000000000000000000000060648201526084016106ea565b60005b83811015611920577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636352211e84848481811061177057611770615662565b905060200201356040518263ffffffff1660e01b815260040161179591815260200190565b602060405180830381865afa1580156117b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d69190615691565b73ffffffffffffffffffffffffffffffffffffffff168585838181106117fe576117fe615662565b905060200201602081019061181391906152c1565b73ffffffffffffffffffffffffffffffffffffffff16146118c25760405162461bcd60e51b815260206004820152604860248201527f56616c696461746f72506f6f6c3a2054686520616464726573732073686f756c60448201527f6420626520746865206f776e6572206f6620746865205374616b654e4654207060648201527f6f736974696f6e21000000000000000000000000000000000000000000000000608482015260a4016106ea565b61190a8585838181106118d7576118d7615662565b90506020020160208101906118ec91906152c1565b8484848181106118fe576118fe615662565b90506020020135613802565b5050508080611918906156ae565b91505061171a565b5050505050565b60095473ffffffffffffffffffffffffffffffffffffffff1633146119b45760405162461bcd60e51b815260206004820152602960248201527f56616c696461746f7273506f6f6c3a2052657175697265732061646d696e207060448201527f726976696c65676573000000000000000000000000000000000000000000000060648201526084016106ea565b600255565b606060008267ffffffffffffffff8111156119d6576119d6615194565b604051908082528060200260200182016040528015611a0957816020015b60608152602001906001900390816119f45790505b50905060005b83811015611b355760086000868684818110611a2d57611a2d615662565b9050602002016020810190611a4291906152c1565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054611a87906156e7565b80601f0160208091040260200160405190810160405280929190818152602001828054611ab3906156e7565b8015611b005780601f10611ad557610100808354040283529160200191611b00565b820191906000526020600020905b815481529060010190602001808311611ae357829003601f168201915b5050505050828281518110611b1757611b17615662565b60200260200101819052508080611b2d906156ae565b915050611a0f565b509392505050565b3360009081526007602090815260408083208151808301909252546fffffffffffffffffffffffffffffffff80821683527001000000000000000000000000000000009091041691810182905290611bfd5760405162461bcd60e51b815260206004820152602f60248201527f56616c696461746f72506f6f6c3a2041646472657373206e6f7420696e20746860448201527f652065786974696e67517565756521000000000000000000000000000000000060648201526084016106ea565b80602001516fffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663757991a86040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca391906155e0565b11611d165760405162461bcd60e51b815260206004820152603260248201527f56616c696461746f72506f6f6c3a205468652077616974696e6720706572696f60448201527f64206973206e6f74206f7665722079657421000000000000000000000000000060648201526084016106ea565b3360009081526007602052604081205580516040517fe42a673c0000000000000000000000000000000000000000000000000000000081526fffffffffffffffffffffffffffffffff90911660048201527f000000000000000000000000000000000000000000000000000000000000000060248201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063e42a673c906044016020604051808303816000875af1158015611ded573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1191906155e0565b5080516040517f42842e0e0000000000000000000000000000000000000000000000000000000081523060048201523360248201526fffffffffffffffffffffffffffffffff90911660448201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906342842e0e90606401600060405180830381600087803b158015611eba57600080fd5b505af1158015611ece573d6000803e3d6000fd5b505091516fffffffffffffffffffffffffffffffff169392505050565b60095473ffffffffffffffffffffffffffffffffffffffff163314611f785760405162461bcd60e51b815260206004820152602960248201527f56616c696461746f7273506f6f6c3a2052657175697265732061646d696e207060448201527f726976696c65676573000000000000000000000000000000000000000000000060648201526084016106ea565b600355565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146120025760405162461bcd60e51b815260206004820181905260248201527f536e617073686f74733a204f6e6c7920666163746f727920616c6c6f7765642160448201526064016106ea565b600054610100900460ff1661201d5760005460ff1615612021565b303b155b6120935760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016106ea565b600054610100900460ff161580156120d257600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b69043c33c193756480000060019081556005600255600355600980547fffffffffffffffffffffffff00000000000000000000000000000000000000001633179055801561214357600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b50565b61214f33613c6d565b6121c15760405162461bcd60e51b815260206004820152602760248201527f56616c696461746f72506f6f6c3a204f6e6c792076616c696461746f7273206160448201527f6c6c6f776564210000000000000000000000000000000000000000000000000060648201526084016106ea565b3360009081526008602052604090206121db90838361504c565b505050565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461228b5760405162461bcd60e51b815260206004820152602b60248201527f56616c696461746f72506f6f6c3a204f6e6c7920455448444b4720636f6e747260448201527f61637420616c6c6f77656400000000000000000000000000000000000000000060648201526084016106ea565b600480547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000016610100179055565b6060610cbd6005613c9a565b60006122d060055490565b821061231e5760405162461bcd60e51b815260206004820152601560248201527f496e646578206f757420626f756e64617269657321000000000000000000000060448201526064016106ea565b612329600583613d64565b5192915050565b60095473ffffffffffffffffffffffffffffffffffffffff1633146123bd5760405162461bcd60e51b815260206004820152602960248201527f56616c696461746f7273506f6f6c3a2052657175697265732061646d696e207060448201527f726976696c65676573000000000000000000000000000000000000000000000060648201526084016106ea565b7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663026c2b7e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612449573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061246d91906155e0565b612477919061564a565b43116124eb5760405162461bcd60e51b815260206004820152603360248201527f56616c696461746f72506f6f6c3a20436f6e646974696f6e206e6f74206d657460448201527f20746f2073746f7020636f6e73656e737573210000000000000000000000000060648201526084016106ea565b600480547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1681556040517f8328cdf70000000000000000000000000000000000000000000000000000000081529081018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690638328cdf790602401600060405180830381600087803b15801561259a57600080fd5b505af1158015611920573d6000803e3d6000fd5b604080518082019091526000808252602082015260055482106126135760405162461bcd60e51b815260206004820152601560248201527f496e646578206f757420626f756e64617269657321000000000000000000000060448201526064016106ea565b610bc9600583613d64565b60095473ffffffffffffffffffffffffffffffffffffffff1633146126ab5760405162461bcd60e51b815260206004820152602960248201527f56616c696461746f7273506f6f6c3a2052657175697265732061646d696e207060448201527f726976696c65676573000000000000000000000000000000000000000000000060648201526084016106ea565b600454610100900460ff16156127295760405162461bcd60e51b815260206004820152603760248201527f56616c696461746f72506f6f6c3a204572726f72204d61646e657420436f6e7360448201527f656e7375732073686f756c642062652068616c7465642100000000000000000060648201526084016106ea565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663747b217c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612794573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127b891906155f9565b1561282b5760405162461bcd60e51b815260206004820152602f60248201527f56616c696461746f72506f6f6c3a205468657265277320616e20455448444b4760448201527f20726f756e642072756e6e696e6721000000000000000000000000000000000060648201526084016106ea565b6005548111156128a35760405162461bcd60e51b815260206004820152603d60248201527f56616c696461746f72506f6f6c3a20546865726520617265206e6f7420656e6f60448201527f7567682076616c696461746f727320746f2062652072656d6f7665642100000060648201526084016106ea565b60005b818110156121db576128dd8383838181106128c3576128c3615662565b90506020020160208101906128d891906152c1565b613dd5565b50505080806128eb906156ae565b9150506128a6565b6000806128ff33613c6d565b6129715760405162461bcd60e51b815260206004820152602760248201527f56616c696461746f72506f6f6c3a204f6e6c792076616c696461746f7273206160448201527f6c6c6f776564210000000000000000000000000000000000000000000000000060648201526084016106ea565b600454610100900460ff16612a145760405162461bcd60e51b815260206004820152604760248201527f56616c696461746f72506f6f6c3a2050726f666974732063616e206f6e6c792060448201527f626520636c61696d61626c65207768656e20636f6e73656e737573206973207260648201527f756e6e696e672100000000000000000000000000000000000000000000000000608482015260a4016106ea565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015612aa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ac591906155e0565b9050476000612ad560053361416a565b602001516040517fbe444379000000000000000000000000000000000000000000000000000000008152336004820152602481018290529091507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063be444379906044016020604051808303816000875af1158015612b6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b9391906155e0565b6040517f8853b950000000000000000000000000000000000000000000000000000000008152336004820152602481018390529095507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690638853b950906044016020604051808303816000875af1158015612c29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c4d91906155e0565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529094507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015612cda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cfe91906155e0565b8314612d985760405162461bcd60e51b815260206004820152604a60248201527f56616c696461746f72506f6f6c3a20496e76616c6964207472616e736163746960448201527f6f6e2c20746f6b656e2062616c616e6365206f662074686520636f6e7472616360648201527f74206368616e6765642100000000000000000000000000000000000000000000608482015260a4016106ea565b478214612e335760405162461bcd60e51b815260206004820152604860248201527f56616c696461746f72506f6f6c3a20496e76616c6964207472616e736163746960448201527f6f6e2c206574682062616c616e6365206f662074686520636f6e74726163742060648201527f6368616e67656421000000000000000000000000000000000000000000000000608482015260a4016106ea565b5050509091565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600860205260409020805460609190612e6e906156e7565b80601f0160208091040260200160405190810160405280929190818152602001828054612e9a906156e7565b8015612ee75780601f10612ebc57610100808354040283529160200191612ee7565b820191906000526020600020905b815481529060010190602001808311612eca57829003601f168201915b50505050509050919050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526007602052604081205470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff161515610bc9565b6000806000612f5484613c6d565b15612f965760017f0000000000000000000000000000000000000000000000000000000000000000612f8760058761416a565b60200151925092509250613056565b73ffffffffffffffffffffffffffffffffffffffff841660009081526007602052604090205470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff161561304c5750505073ffffffffffffffffffffffffffffffffffffffff81166000908152600760205260409020546001907f0000000000000000000000000000000000000000000000000000000000000000906fffffffffffffffffffffffffffffffff16613056565b5060009150819050805b9193909250565b60095473ffffffffffffffffffffffffffffffffffffffff1633146130ea5760405162461bcd60e51b815260206004820152602960248201527f56616c696461746f7273506f6f6c3a2052657175697265732061646d696e207060448201527f726976696c65676573000000000000000000000000000000000000000000000060648201526084016106ea565b600454610100900460ff16156131685760405162461bcd60e51b815260206004820152603760248201527f56616c696461746f72506f6f6c3a204572726f72204d61646e657420436f6e7360448201527f656e7375732073686f756c642062652068616c7465642100000000000000000060648201526084016106ea565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663747b217c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156131d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131f791906155f9565b1561326a5760405162461bcd60e51b815260206004820152602f60248201527f56616c696461746f72506f6f6c3a205468657265277320616e20455448444b4760448201527f20726f756e642072756e6e696e6721000000000000000000000000000000000060648201526084016106ea565b600061327560055490565b11156132b257600061329d600161328b60055490565b613295919061573b565b600590613d64565b5190506132a981613dd5565b5050505061326a565b565b6000610bc982613c6d565b60008060006132cd846134b2565b61333f5760405162461bcd60e51b815260206004820152602860248201527f56616c696461746f72506f6f6c3a2041646472657373206973206e6f7420616360448201527f63757361626c652100000000000000000000000000000000000000000000000060648201526084016106ea565b61334884613c6d565b1561336257613356846141e4565b91945092509050613373565b61336b84614232565b919450925090505b60035480841061338e57613387818561573b565b9350613393565b600093505b838210156134305760405162461bcd60e51b8152602060048201526044602482018190527f56616c696461746f72506f6f6c3a204d696e6572207368617265732067726561908201527f746572207468656e2074686520746f74616c207061796f757420696e20746f6b60648201527f656e732100000000000000000000000000000000000000000000000000000000608482015260a4016106ea565b61343a848361573b565b93959294505050565b61344e600582614298565b5073ffffffffffffffffffffffffffffffffffffffff81166000908152600860205260408120612143916150ee565b6134a87f00000000000000000000000000000000000000000000000000000000000000008483614482565b6121db8383614627565b60006134bd82613c6d565b80610bc9575073ffffffffffffffffffffffffffffffffffffffff821660009081526007602052604090205470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff161515610bc9565b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390526000917f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303816000875af11580156135d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135f491906155f9565b506040517fa0712d68000000000000000000000000000000000000000000000000000000008152600481018390527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063a0712d68906024015b6020604051808303816000875af1158015613683573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc991906155e0565b6136b082613c6d565b156136be576136be82613443565b6040518060400160405280826fffffffffffffffffffffffffffffffff1681526020017f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663757991a86040518163ffffffff1660e01b8152600401602060405180830381865afa15801561376d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061379191906155e0565b61379b919061564a565b6fffffffffffffffffffffffffffffffff90811690915273ffffffffffffffffffffffffffffffffffffffff909316600090815260076020908152604090912082519290910151841670010000000000000000000000000000000002919093161790915550565b600080600060025461381360055490565b11156138875760405162461bcd60e51b815260206004820152603a60248201527f56616c696461746f72506f6f6c3a20546865726520617265206e6f206672656560448201527f2073706f747320666f72206e65772076616c696461746f72732100000000000060648201526084016106ea565b613890856134b2565b156139295760405162461bcd60e51b815260206004820152604b60248201527f56616c696461746f72506f6f6c3a204164647265737320697320616c7265616460448201527f7920612076616c696461746f72206f7220697420697320696e2074686520657860648201527f6974696e67206c696e6521000000000000000000000000000000000000000000608482015260a4016106ea565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa1580156139b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139da91906155e0565b9050476139e7878761478f565b6040805180820190915273ffffffffffffffffffffffffffffffffffffffff8b168152602081018490529297509095509350613a2590600590614af7565b50613a3187858561347d565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015613abb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613adf91906155e0565b8214613b795760405162461bcd60e51b815260206004820152604a60248201527f56616c696461746f72506f6f6c3a20496e76616c6964207472616e736163746960448201527f6f6e2c20746f6b656e2062616c616e6365206f662074686520636f6e7472616360648201527f74206368616e6765642100000000000000000000000000000000000000000000608482015260a4016106ea565b478114613c145760405162461bcd60e51b815260206004820152604860248201527f56616c696461746f72506f6f6c3a20496e76616c6964207472616e736163746960448201527f6f6e2c206574682062616c616e6365206f662074686520636f6e74726163742060648201527f6368616e67656421000000000000000000000000000000000000000000000000608482015260a4016106ea565b8673ffffffffffffffffffffffffffffffffffffffff167fe30848520248cd6b60cf19fe62a302a47e2d2c1c147deea1188e471751557a5286604051613c5c91815260200190565b60405180910390a250509250925092565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600660205260408120541515610bc9565b60606000613ca783614ba8565b90506000815167ffffffffffffffff811115613cc557613cc5615194565b604051908082528060200260200182016040528015613cee578160200160208202803683370190505b50905060005b8251811015611b3557828181518110613d0f57613d0f615662565b602002602001015160000151828281518110613d2d57613d2d615662565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015280613d5c816156ae565b915050613cf4565b6040805180820190915260008082526020820152826000018281548110613d8d57613d8d615662565b600091825260209182902060408051808201909152600290920201805473ffffffffffffffffffffffffffffffffffffffff1682526001015491810191909152905092915050565b6000806000613de384613c6d565b613e555760405162461bcd60e51b815260206004820152602b60248201527f56616c696461746f72506f6f6c3a2041646472657373206973206e6f7420612060448201527f76616c696461746f725f2100000000000000000000000000000000000000000060648201526084016106ea565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015613ee2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f0691906155e0565b905047613f1286614c2e565b91965094509250613f2386866136a7565b613f2e86858561347d565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015613fb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fdc91906155e0565b82146140765760405162461bcd60e51b815260206004820152604a60248201527f56616c696461746f72506f6f6c3a20496e76616c6964207472616e736163746960448201527f6f6e2c20746f6b656e2062616c616e6365206f662074686520636f6e7472616360648201527f74206368616e6765642100000000000000000000000000000000000000000000608482015260a4016106ea565b4781146141115760405162461bcd60e51b815260206004820152604860248201527f56616c696461746f72506f6f6c3a20496e76616c6964207472616e736163746960448201527f6f6e2c206574682062616c616e6365206f662074686520636f6e74726163742060648201527f6368616e67656421000000000000000000000000000000000000000000000000608482015260a4016106ea565b8573ffffffffffffffffffffffffffffffffffffffff167f33ff7b2beda3cb99406d3401fd9e8d9001b93e74b845cf7346f6e7f70c703e738660405161415991815260200190565b60405180910390a250509193909250565b604080518082019091526000808252602082015260008061418b8585614d09565b91509150816141dc5760405162461bcd60e51b815260206004820152601a60248201527f4572726f723a204b6579206e6f7420696e20746865206d61702100000000000060448201526064016106ea565b949350505050565b60008080806141f460058661416a565b602001519050614224817f0000000000000000000000000000000000000000000000000000000000000000614dd6565b919790965090945092505050565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260076020526040812054819081906fffffffffffffffffffffffffffffffff16614224817f0000000000000000000000000000000000000000000000000000000000000000614dd6565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260018301602052604081205480156144785760006142d360018361573b565b85549091506000906142e79060019061573b565b90508181146143cf57600086600001828154811061430757614307615662565b600091825260209182902060408051808201909152600290920201805473ffffffffffffffffffffffffffffffffffffffff16825260010154918101919091528754909150819088908590811061436057614360615662565b6000918252602080832084516002939093020180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff938416178155938101516001948501559351168152908801909152604090208390555b85548690806143e0576143e0615752565b6000828152602080822060027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9094019384020180547fffffffffffffffffffffffff000000000000000000000000000000000000000016815560019081018390559290935573ffffffffffffffffffffffffffffffffffffffff8816815288820190925260408220919091559350610bc992505050565b6000915050610bc9565b8061448c57505050565b73ffffffffffffffffffffffffffffffffffffffff83166145155760405162461bcd60e51b815260206004820152603f60248201527f4552433230536166655472616e736665723a2043616e6e6f742063616c6c206d60448201527f6574686f6473206f6e20636f6e74726163742061646472657373203078302e0060648201526084016106ea565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152602482018390526000919085169063a9059cbb906044016020604051808303816000875af115801561458e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145b291906155f9565b905080610fdd5760405162461bcd60e51b815260206004820152602360248201527f4552433230536166655472616e736665723a205472616e73666572206661696c60448201527f65642e000000000000000000000000000000000000000000000000000000000060648201526084016106ea565b80614630575050565b73ffffffffffffffffffffffffffffffffffffffff82166146b95760405162461bcd60e51b815260206004820152603360248201527f457468536166655472616e736665723a2063616e6e6f74207472616e7366657260448201527f2045544820746f2061646472657373203078300000000000000000000000000060648201526084016106ea565b604051829060009073ffffffffffffffffffffffffffffffffffffffff83169084908381818185875af1925050503d8060008114614713576040519150601f19603f3d011682016040523d82523d6000602084013e614718565b606091505b5050905080610fdd5760405162461bcd60e51b815260206004820152602160248201527f457468536166655472616e736665723a205472616e73666572206661696c656460448201527f2e0000000000000000000000000000000000000000000000000000000000000060648201526084016106ea565b6000806000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663eb02c301866040518263ffffffff1660e01b81526004016147f091815260200190565b60a060405180830381865afa15801561480d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906148319190615781565b50506001549293505050808210156148d75760405162461bcd60e51b815260206004820152604860248201527f56616c696461746f725374616b654e46543a204572726f722c2074686520537460448201527f616b6520706f736974696f6e20646f65736e2774206861766520656e6f75676860648201527f20666f756e647321000000000000000000000000000000000000000000000000608482015260a4016106ea565b6040517f42842e0e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152306024830152604482018890527f000000000000000000000000000000000000000000000000000000000000000016906342842e0e90606401600060405180830381600087803b15801561496d57600080fd5b505af1158015614981573d6000803e3d6000fd5b50506040517f42966c68000000000000000000000000000000000000000000000000000000008152600481018990527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1692506342966c68915060240160408051808303816000875af1158015614a11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a3591906157c1565b909450925081831015614ad75760405162461bcd60e51b8152602060048201526044602482018190527f56616c696461746f72506f6f6c3a204d696e6572207368617265732067726561908201527f746572207468656e2074686520746f74616c207061796f757420696e20746f6b60648201527f656e732100000000000000000000000000000000000000000000000000000000608482015260a4016106ea565b614ae1818461573b565b9250614aec81614efa565b945050509250925092565b805173ffffffffffffffffffffffffffffffffffffffff166000908152600183016020526040812054614ba0575081546001808201845560008481526020808220855160029095020180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90951694851781558582015190840155855493825282860190526040902091909155610bc9565b506000610bc9565b606081600001805480602002602001604051908101604052809291908181526020016000905b82821015614c235760008481526020908190206040805180820190915260028502909101805473ffffffffffffffffffffffffffffffffffffffff168252600190810154828401529083529092019101614bce565b505050509050919050565b600080600080600080614c40876141e4565b92509250925082811015614ce35760405162461bcd60e51b8152602060048201526044602482018190527f56616c696461746f72506f6f6c3a204d696e6572207368617265732067726561908201527f746572207468656e2074686520746f74616c207061796f757420696e20746f6b60648201527f656e732100000000000000000000000000000000000000000000000000000000608482015260a4016106ea565b614ced838261573b565b90506000614cfa84613516565b98929750909550909350505050565b6040805180820182526000808252602080830182905273ffffffffffffffffffffffffffffffffffffffff851682526001860190529182205480614d66575050604080518082019091526000808252602082018190529150614dcf565b600185614d73828461573b565b81548110614d8357614d83615662565b600091825260209182902060408051808201909152600290920201805473ffffffffffffffffffffffffffffffffffffffff16825260010154918101919091529093509150614dcf9050565b9250929050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1663eb02c301866040518263ffffffff1660e01b8152600401614e1691815260200190565b60a060405180830381865afa158015614e33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614e579190615781565b50506040517f42966c6800000000000000000000000000000000000000000000000000000000815260048101899052929550505073ffffffffffffffffffffffffffffffffffffffff8516906342966c689060240160408051808303816000875af1158015614eca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614eee91906157c1565b93969095509293505050565b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390526000917f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303816000875af1158015614fb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614fd891906155f9565b506040517fa0712d68000000000000000000000000000000000000000000000000000000008152600481018390527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063a0712d6890602401613664565b828054615058906156e7565b90600052602060002090601f01602090048101928261507a57600085556150de565b82601f106150b1578280017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008235161785556150de565b828001600101855582156150de579182015b828111156150de5782358255916020019190600101906150c3565b506150ea929150615124565b5090565b5080546150fa906156e7565b6000825580601f1061510a575050565b601f01602090049060005260206000209081019061214391905b5b808211156150ea5760008155600101615125565b73ffffffffffffffffffffffffffffffffffffffff8116811461214357600080fd5b6000806040838503121561516e57600080fd5b823561517981615139565b9150602083013561518981615139565b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080600080608085870312156151d957600080fd5b84356151e481615139565b935060208501356151f481615139565b925060408501359150606085013567ffffffffffffffff8082111561521857600080fd5b818701915087601f83011261522c57600080fd5b81358181111561523e5761523e615194565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561528457615284615194565b816040528281528a602084870101111561529d57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000602082840312156152d357600080fd5b81356152de81615139565b9392505050565b6000602082840312156152f757600080fd5b5035919050565b60008083601f84011261531057600080fd5b50813567ffffffffffffffff81111561532857600080fd5b6020830191508360208260051b8501011115614dcf57600080fd5b6000806000806040858703121561535957600080fd5b843567ffffffffffffffff8082111561537157600080fd5b61537d888389016152fe565b9096509450602087013591508082111561539657600080fd5b506153a3878288016152fe565b95989497509550505050565b600080602083850312156153c257600080fd5b823567ffffffffffffffff8111156153d957600080fd5b6153e5858286016152fe565b90969095509350505050565b6000815180845260005b81811015615417576020818501810151868301820152016153fb565b81811115615429576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156154cf577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526154bd8583516153f1565b94509285019290850190600101615483565b5092979650505050505050565b600080602083850312156154ef57600080fd5b823567ffffffffffffffff8082111561550757600080fd5b818501915085601f83011261551b57600080fd5b81358181111561552a57600080fd5b86602082850101111561553c57600080fd5b60209290920196919550909350505050565b6000806040838503121561556157600080fd5b82359150602083013561518981615139565b6020808252825182820181905260009190848201906040850190845b818110156155c157835173ffffffffffffffffffffffffffffffffffffffff168352928401929184019160010161558f565b50909695505050505050565b6020815260006152de60208301846153f1565b6000602082840312156155f257600080fd5b5051919050565b60006020828403121561560b57600080fd5b815180151581146152de57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000821982111561565d5761565d61561b565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156156a357600080fd5b81516152de81615139565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156156e0576156e061561b565b5060010190565b600181811c908216806156fb57607f821691505b60208210811415615735577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60008282101561574d5761574d61561b565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600080600080600060a0868803121561579957600080fd5b5050835160208501516040860151606087015160809097015192989197509594509092509050565b600080604083850312156157d457600080fd5b50508051602090910151909290915056fea264697066735822122039c9e4668cbd70c912df482660fe6ef83480a889f516f6088392af765b72612064736f6c634300080c0033",
}

// ValidatorPoolABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorPoolMetaData.ABI instead.
var ValidatorPoolABI = ValidatorPoolMetaData.ABI

// ValidatorPoolBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ValidatorPoolMetaData.Bin instead.
var ValidatorPoolBin = ValidatorPoolMetaData.Bin

// DeployValidatorPool deploys a new Ethereum contract, binding an instance of ValidatorPool to it.
func DeployValidatorPool(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ValidatorPool, error) {
	parsed, err := ValidatorPoolMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ValidatorPoolBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ValidatorPool{ValidatorPoolCaller: ValidatorPoolCaller{contract: contract}, ValidatorPoolTransactor: ValidatorPoolTransactor{contract: contract}, ValidatorPoolFilterer: ValidatorPoolFilterer{contract: contract}}, nil
}

// ValidatorPool is an auto generated Go binding around an Ethereum contract.
type ValidatorPool struct {
	ValidatorPoolCaller     // Read-only binding to the contract
	ValidatorPoolTransactor // Write-only binding to the contract
	ValidatorPoolFilterer   // Log filterer for contract events
}

// ValidatorPoolCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorPoolCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorPoolTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorPoolTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorPoolFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorPoolFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorPoolSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorPoolSession struct {
	Contract     *ValidatorPool    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ValidatorPoolCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorPoolCallerSession struct {
	Contract *ValidatorPoolCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// ValidatorPoolTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorPoolTransactorSession struct {
	Contract     *ValidatorPoolTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// ValidatorPoolRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorPoolRaw struct {
	Contract *ValidatorPool // Generic contract binding to access the raw methods on
}

// ValidatorPoolCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorPoolCallerRaw struct {
	Contract *ValidatorPoolCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorPoolTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorPoolTransactorRaw struct {
	Contract *ValidatorPoolTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorPool creates a new instance of ValidatorPool, bound to a specific deployed contract.
func NewValidatorPool(address common.Address, backend bind.ContractBackend) (*ValidatorPool, error) {
	contract, err := bindValidatorPool(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorPool{ValidatorPoolCaller: ValidatorPoolCaller{contract: contract}, ValidatorPoolTransactor: ValidatorPoolTransactor{contract: contract}, ValidatorPoolFilterer: ValidatorPoolFilterer{contract: contract}}, nil
}

// NewValidatorPoolCaller creates a new read-only instance of ValidatorPool, bound to a specific deployed contract.
func NewValidatorPoolCaller(address common.Address, caller bind.ContractCaller) (*ValidatorPoolCaller, error) {
	contract, err := bindValidatorPool(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorPoolCaller{contract: contract}, nil
}

// NewValidatorPoolTransactor creates a new write-only instance of ValidatorPool, bound to a specific deployed contract.
func NewValidatorPoolTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorPoolTransactor, error) {
	contract, err := bindValidatorPool(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorPoolTransactor{contract: contract}, nil
}

// NewValidatorPoolFilterer creates a new log filterer instance of ValidatorPool, bound to a specific deployed contract.
func NewValidatorPoolFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorPoolFilterer, error) {
	contract, err := bindValidatorPool(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorPoolFilterer{contract: contract}, nil
}

// bindValidatorPool binds a generic wrapper to an already deployed contract.
func bindValidatorPool(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorPoolABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorPool *ValidatorPoolRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorPool.Contract.ValidatorPoolCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorPool *ValidatorPoolRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorPool.Contract.ValidatorPoolTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorPool *ValidatorPoolRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorPool.Contract.ValidatorPoolTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorPool *ValidatorPoolCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorPool.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorPool *ValidatorPoolTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorPool.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorPool *ValidatorPoolTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorPool.Contract.contract.Transact(opts, method, params...)
}

// ClaimPeriod is a free data retrieval call binding the contract method 0x532f1fea.
//
// Solidity: function _claimPeriod() view returns(uint256)
func (_ValidatorPool *ValidatorPoolCaller) ClaimPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorPool.contract.Call(opts, &out, "_claimPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ClaimPeriod is a free data retrieval call binding the contract method 0x532f1fea.
//
// Solidity: function _claimPeriod() view returns(uint256)
func (_ValidatorPool *ValidatorPoolSession) ClaimPeriod() (*big.Int, error) {
	return _ValidatorPool.Contract.ClaimPeriod(&_ValidatorPool.CallOpts)
}

// ClaimPeriod is a free data retrieval call binding the contract method 0x532f1fea.
//
// Solidity: function _claimPeriod() view returns(uint256)
func (_ValidatorPool *ValidatorPoolCallerSession) ClaimPeriod() (*big.Int, error) {
	return _ValidatorPool.Contract.ClaimPeriod(&_ValidatorPool.CallOpts)
}

// MaxIntervalWithoutSnapshot is a free data retrieval call binding the contract method 0x4377919b.
//
// Solidity: function _maxIntervalWithoutSnapshot() view returns(uint256)
func (_ValidatorPool *ValidatorPoolCaller) MaxIntervalWithoutSnapshot(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorPool.contract.Call(opts, &out, "_maxIntervalWithoutSnapshot")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaxIntervalWithoutSnapshot is a free data retrieval call binding the contract method 0x4377919b.
//
// Solidity: function _maxIntervalWithoutSnapshot() view returns(uint256)
func (_ValidatorPool *ValidatorPoolSession) MaxIntervalWithoutSnapshot() (*big.Int, error) {
	return _ValidatorPool.Contract.MaxIntervalWithoutSnapshot(&_ValidatorPool.CallOpts)
}

// MaxIntervalWithoutSnapshot is a free data retrieval call binding the contract method 0x4377919b.
//
// Solidity: function _maxIntervalWithoutSnapshot() view returns(uint256)
func (_ValidatorPool *ValidatorPoolCallerSession) MaxIntervalWithoutSnapshot() (*big.Int, error) {
	return _ValidatorPool.Contract.MaxIntervalWithoutSnapshot(&_ValidatorPool.CallOpts)
}

// PositionLockPeriod is a free data retrieval call binding the contract method 0x480c57a8.
//
// Solidity: function _positionLockPeriod() view returns(uint256)
func (_ValidatorPool *ValidatorPoolCaller) PositionLockPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorPool.contract.Call(opts, &out, "_positionLockPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PositionLockPeriod is a free data retrieval call binding the contract method 0x480c57a8.
//
// Solidity: function _positionLockPeriod() view returns(uint256)
func (_ValidatorPool *ValidatorPoolSession) PositionLockPeriod() (*big.Int, error) {
	return _ValidatorPool.Contract.PositionLockPeriod(&_ValidatorPool.CallOpts)
}

// PositionLockPeriod is a free data retrieval call binding the contract method 0x480c57a8.
//
// Solidity: function _positionLockPeriod() view returns(uint256)
func (_ValidatorPool *ValidatorPoolCallerSession) PositionLockPeriod() (*big.Int, error) {
	return _ValidatorPool.Contract.PositionLockPeriod(&_ValidatorPool.CallOpts)
}

// GetLocation is a free data retrieval call binding the contract method 0xd9e0dc59.
//
// Solidity: function getLocation(address validator_) view returns(string)
func (_ValidatorPool *ValidatorPoolCaller) GetLocation(opts *bind.CallOpts, validator_ common.Address) (string, error) {
	var out []interface{}
	err := _ValidatorPool.contract.Call(opts, &out, "getLocation", validator_)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetLocation is a free data retrieval call binding the contract method 0xd9e0dc59.
//
// Solidity: function getLocation(address validator_) view returns(string)
func (_ValidatorPool *ValidatorPoolSession) GetLocation(validator_ common.Address) (string, error) {
	return _ValidatorPool.Contract.GetLocation(&_ValidatorPool.CallOpts, validator_)
}

// GetLocation is a free data retrieval call binding the contract method 0xd9e0dc59.
//
// Solidity: function getLocation(address validator_) view returns(string)
func (_ValidatorPool *ValidatorPoolCallerSession) GetLocation(validator_ common.Address) (string, error) {
	return _ValidatorPool.Contract.GetLocation(&_ValidatorPool.CallOpts, validator_)
}

// GetLocations is a free data retrieval call binding the contract method 0x76207f9c.
//
// Solidity: function getLocations(address[] validators_) view returns(string[])
func (_ValidatorPool *ValidatorPoolCaller) GetLocations(opts *bind.CallOpts, validators_ []common.Address) ([]string, error) {
	var out []interface{}
	err := _ValidatorPool.contract.Call(opts, &out, "getLocations", validators_)

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// GetLocations is a free data retrieval call binding the contract method 0x76207f9c.
//
// Solidity: function getLocations(address[] validators_) view returns(string[])
func (_ValidatorPool *ValidatorPoolSession) GetLocations(validators_ []common.Address) ([]string, error) {
	return _ValidatorPool.Contract.GetLocations(&_ValidatorPool.CallOpts, validators_)
}

// GetLocations is a free data retrieval call binding the contract method 0x76207f9c.
//
// Solidity: function getLocations(address[] validators_) view returns(string[])
func (_ValidatorPool *ValidatorPoolCallerSession) GetLocations(validators_ []common.Address) ([]string, error) {
	return _ValidatorPool.Contract.GetLocations(&_ValidatorPool.CallOpts, validators_)
}

// GetMetamorphicContractAddress is a free data retrieval call binding the contract method 0x8653a465.
//
// Solidity: function getMetamorphicContractAddress(bytes32 _salt, address _factory) pure returns(address)
func (_ValidatorPool *ValidatorPoolCaller) GetMetamorphicContractAddress(opts *bind.CallOpts, _salt [32]byte, _factory common.Address) (common.Address, error) {
	var out []interface{}
	err := _ValidatorPool.contract.Call(opts, &out, "getMetamorphicContractAddress", _salt, _factory)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetMetamorphicContractAddress is a free data retrieval call binding the contract method 0x8653a465.
//
// Solidity: function getMetamorphicContractAddress(bytes32 _salt, address _factory) pure returns(address)
func (_ValidatorPool *ValidatorPoolSession) GetMetamorphicContractAddress(_salt [32]byte, _factory common.Address) (common.Address, error) {
	return _ValidatorPool.Contract.GetMetamorphicContractAddress(&_ValidatorPool.CallOpts, _salt, _factory)
}

// GetMetamorphicContractAddress is a free data retrieval call binding the contract method 0x8653a465.
//
// Solidity: function getMetamorphicContractAddress(bytes32 _salt, address _factory) pure returns(address)
func (_ValidatorPool *ValidatorPoolCallerSession) GetMetamorphicContractAddress(_salt [32]byte, _factory common.Address) (common.Address, error) {
	return _ValidatorPool.Contract.GetMetamorphicContractAddress(&_ValidatorPool.CallOpts, _salt, _factory)
}

// GetValidator is a free data retrieval call binding the contract method 0xb5d89627.
//
// Solidity: function getValidator(uint256 index_) view returns(address)
func (_ValidatorPool *ValidatorPoolCaller) GetValidator(opts *bind.CallOpts, index_ *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ValidatorPool.contract.Call(opts, &out, "getValidator", index_)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetValidator is a free data retrieval call binding the contract method 0xb5d89627.
//
// Solidity: function getValidator(uint256 index_) view returns(address)
func (_ValidatorPool *ValidatorPoolSession) GetValidator(index_ *big.Int) (common.Address, error) {
	return _ValidatorPool.Contract.GetValidator(&_ValidatorPool.CallOpts, index_)
}

// GetValidator is a free data retrieval call binding the contract method 0xb5d89627.
//
// Solidity: function getValidator(uint256 index_) view returns(address)
func (_ValidatorPool *ValidatorPoolCallerSession) GetValidator(index_ *big.Int) (common.Address, error) {
	return _ValidatorPool.Contract.GetValidator(&_ValidatorPool.CallOpts, index_)
}

// GetValidatorData is a free data retrieval call binding the contract method 0xc0951451.
//
// Solidity: function getValidatorData(uint256 index_) view returns((address,uint256))
func (_ValidatorPool *ValidatorPoolCaller) GetValidatorData(opts *bind.CallOpts, index_ *big.Int) (ValidatorData, error) {
	var out []interface{}
	err := _ValidatorPool.contract.Call(opts, &out, "getValidatorData", index_)

	if err != nil {
		return *new(ValidatorData), err
	}

	out0 := *abi.ConvertType(out[0], new(ValidatorData)).(*ValidatorData)

	return out0, err

}

// GetValidatorData is a free data retrieval call binding the contract method 0xc0951451.
//
// Solidity: function getValidatorData(uint256 index_) view returns((address,uint256))
func (_ValidatorPool *ValidatorPoolSession) GetValidatorData(index_ *big.Int) (ValidatorData, error) {
	return _ValidatorPool.Contract.GetValidatorData(&_ValidatorPool.CallOpts, index_)
}

// GetValidatorData is a free data retrieval call binding the contract method 0xc0951451.
//
// Solidity: function getValidatorData(uint256 index_) view returns((address,uint256))
func (_ValidatorPool *ValidatorPoolCallerSession) GetValidatorData(index_ *big.Int) (ValidatorData, error) {
	return _ValidatorPool.Contract.GetValidatorData(&_ValidatorPool.CallOpts, index_)
}

// GetValidatorsAddresses is a free data retrieval call binding the contract method 0x9c7d8961.
//
// Solidity: function getValidatorsAddresses() view returns(address[])
func (_ValidatorPool *ValidatorPoolCaller) GetValidatorsAddresses(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _ValidatorPool.contract.Call(opts, &out, "getValidatorsAddresses")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetValidatorsAddresses is a free data retrieval call binding the contract method 0x9c7d8961.
//
// Solidity: function getValidatorsAddresses() view returns(address[])
func (_ValidatorPool *ValidatorPoolSession) GetValidatorsAddresses() ([]common.Address, error) {
	return _ValidatorPool.Contract.GetValidatorsAddresses(&_ValidatorPool.CallOpts)
}

// GetValidatorsAddresses is a free data retrieval call binding the contract method 0x9c7d8961.
//
// Solidity: function getValidatorsAddresses() view returns(address[])
func (_ValidatorPool *ValidatorPoolCallerSession) GetValidatorsAddresses() ([]common.Address, error) {
	return _ValidatorPool.Contract.GetValidatorsAddresses(&_ValidatorPool.CallOpts)
}

// GetValidatorsCount is a free data retrieval call binding the contract method 0x27498240.
//
// Solidity: function getValidatorsCount() view returns(uint256)
func (_ValidatorPool *ValidatorPoolCaller) GetValidatorsCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorPool.contract.Call(opts, &out, "getValidatorsCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetValidatorsCount is a free data retrieval call binding the contract method 0x27498240.
//
// Solidity: function getValidatorsCount() view returns(uint256)
func (_ValidatorPool *ValidatorPoolSession) GetValidatorsCount() (*big.Int, error) {
	return _ValidatorPool.Contract.GetValidatorsCount(&_ValidatorPool.CallOpts)
}

// GetValidatorsCount is a free data retrieval call binding the contract method 0x27498240.
//
// Solidity: function getValidatorsCount() view returns(uint256)
func (_ValidatorPool *ValidatorPoolCallerSession) GetValidatorsCount() (*big.Int, error) {
	return _ValidatorPool.Contract.GetValidatorsCount(&_ValidatorPool.CallOpts)
}

// IsAccusable is a free data retrieval call binding the contract method 0x20c2856d.
//
// Solidity: function isAccusable(address account_) view returns(bool)
func (_ValidatorPool *ValidatorPoolCaller) IsAccusable(opts *bind.CallOpts, account_ common.Address) (bool, error) {
	var out []interface{}
	err := _ValidatorPool.contract.Call(opts, &out, "isAccusable", account_)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsAccusable is a free data retrieval call binding the contract method 0x20c2856d.
//
// Solidity: function isAccusable(address account_) view returns(bool)
func (_ValidatorPool *ValidatorPoolSession) IsAccusable(account_ common.Address) (bool, error) {
	return _ValidatorPool.Contract.IsAccusable(&_ValidatorPool.CallOpts, account_)
}

// IsAccusable is a free data retrieval call binding the contract method 0x20c2856d.
//
// Solidity: function isAccusable(address account_) view returns(bool)
func (_ValidatorPool *ValidatorPoolCallerSession) IsAccusable(account_ common.Address) (bool, error) {
	return _ValidatorPool.Contract.IsAccusable(&_ValidatorPool.CallOpts, account_)
}

// IsInExitingQueue is a free data retrieval call binding the contract method 0xe4ad75f1.
//
// Solidity: function isInExitingQueue(address account_) view returns(bool)
func (_ValidatorPool *ValidatorPoolCaller) IsInExitingQueue(opts *bind.CallOpts, account_ common.Address) (bool, error) {
	var out []interface{}
	err := _ValidatorPool.contract.Call(opts, &out, "isInExitingQueue", account_)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsInExitingQueue is a free data retrieval call binding the contract method 0xe4ad75f1.
//
// Solidity: function isInExitingQueue(address account_) view returns(bool)
func (_ValidatorPool *ValidatorPoolSession) IsInExitingQueue(account_ common.Address) (bool, error) {
	return _ValidatorPool.Contract.IsInExitingQueue(&_ValidatorPool.CallOpts, account_)
}

// IsInExitingQueue is a free data retrieval call binding the contract method 0xe4ad75f1.
//
// Solidity: function isInExitingQueue(address account_) view returns(bool)
func (_ValidatorPool *ValidatorPoolCallerSession) IsInExitingQueue(account_ common.Address) (bool, error) {
	return _ValidatorPool.Contract.IsInExitingQueue(&_ValidatorPool.CallOpts, account_)
}

// IsMaintenanceScheduled is a free data retrieval call binding the contract method 0x1885570f.
//
// Solidity: function isMaintenanceScheduled() view returns(bool)
func (_ValidatorPool *ValidatorPoolCaller) IsMaintenanceScheduled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ValidatorPool.contract.Call(opts, &out, "isMaintenanceScheduled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsMaintenanceScheduled is a free data retrieval call binding the contract method 0x1885570f.
//
// Solidity: function isMaintenanceScheduled() view returns(bool)
func (_ValidatorPool *ValidatorPoolSession) IsMaintenanceScheduled() (bool, error) {
	return _ValidatorPool.Contract.IsMaintenanceScheduled(&_ValidatorPool.CallOpts)
}

// IsMaintenanceScheduled is a free data retrieval call binding the contract method 0x1885570f.
//
// Solidity: function isMaintenanceScheduled() view returns(bool)
func (_ValidatorPool *ValidatorPoolCallerSession) IsMaintenanceScheduled() (bool, error) {
	return _ValidatorPool.Contract.IsMaintenanceScheduled(&_ValidatorPool.CallOpts)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address account_) view returns(bool)
func (_ValidatorPool *ValidatorPoolCaller) IsValidator(opts *bind.CallOpts, account_ common.Address) (bool, error) {
	var out []interface{}
	err := _ValidatorPool.contract.Call(opts, &out, "isValidator", account_)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address account_) view returns(bool)
func (_ValidatorPool *ValidatorPoolSession) IsValidator(account_ common.Address) (bool, error) {
	return _ValidatorPool.Contract.IsValidator(&_ValidatorPool.CallOpts, account_)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address account_) view returns(bool)
func (_ValidatorPool *ValidatorPoolCallerSession) IsValidator(account_ common.Address) (bool, error) {
	return _ValidatorPool.Contract.IsValidator(&_ValidatorPool.CallOpts, account_)
}

// TryGetTokenID is a free data retrieval call binding the contract method 0xee9e49bd.
//
// Solidity: function tryGetTokenID(address account_) view returns(bool, address, uint256)
func (_ValidatorPool *ValidatorPoolCaller) TryGetTokenID(opts *bind.CallOpts, account_ common.Address) (bool, common.Address, *big.Int, error) {
	var out []interface{}
	err := _ValidatorPool.contract.Call(opts, &out, "tryGetTokenID", account_)

	if err != nil {
		return *new(bool), *new(common.Address), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	out1 := *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return out0, out1, out2, err

}

// TryGetTokenID is a free data retrieval call binding the contract method 0xee9e49bd.
//
// Solidity: function tryGetTokenID(address account_) view returns(bool, address, uint256)
func (_ValidatorPool *ValidatorPoolSession) TryGetTokenID(account_ common.Address) (bool, common.Address, *big.Int, error) {
	return _ValidatorPool.Contract.TryGetTokenID(&_ValidatorPool.CallOpts, account_)
}

// TryGetTokenID is a free data retrieval call binding the contract method 0xee9e49bd.
//
// Solidity: function tryGetTokenID(address account_) view returns(bool, address, uint256)
func (_ValidatorPool *ValidatorPoolCallerSession) TryGetTokenID(account_ common.Address) (bool, common.Address, *big.Int, error) {
	return _ValidatorPool.Contract.TryGetTokenID(&_ValidatorPool.CallOpts, account_)
}

// ClaimExitingNFTPosition is a paid mutator transaction binding the contract method 0x769cc695.
//
// Solidity: function claimExitingNFTPosition() returns(uint256)
func (_ValidatorPool *ValidatorPoolTransactor) ClaimExitingNFTPosition(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorPool.contract.Transact(opts, "claimExitingNFTPosition")
}

// ClaimExitingNFTPosition is a paid mutator transaction binding the contract method 0x769cc695.
//
// Solidity: function claimExitingNFTPosition() returns(uint256)
func (_ValidatorPool *ValidatorPoolSession) ClaimExitingNFTPosition() (*types.Transaction, error) {
	return _ValidatorPool.Contract.ClaimExitingNFTPosition(&_ValidatorPool.TransactOpts)
}

// ClaimExitingNFTPosition is a paid mutator transaction binding the contract method 0x769cc695.
//
// Solidity: function claimExitingNFTPosition() returns(uint256)
func (_ValidatorPool *ValidatorPoolTransactorSession) ClaimExitingNFTPosition() (*types.Transaction, error) {
	return _ValidatorPool.Contract.ClaimExitingNFTPosition(&_ValidatorPool.TransactOpts)
}

// CollectProfits is a paid mutator transaction binding the contract method 0xc958e0d6.
//
// Solidity: function collectProfits() returns(uint256 payoutEth, uint256 payoutToken)
func (_ValidatorPool *ValidatorPoolTransactor) CollectProfits(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorPool.contract.Transact(opts, "collectProfits")
}

// CollectProfits is a paid mutator transaction binding the contract method 0xc958e0d6.
//
// Solidity: function collectProfits() returns(uint256 payoutEth, uint256 payoutToken)
func (_ValidatorPool *ValidatorPoolSession) CollectProfits() (*types.Transaction, error) {
	return _ValidatorPool.Contract.CollectProfits(&_ValidatorPool.TransactOpts)
}

// CollectProfits is a paid mutator transaction binding the contract method 0xc958e0d6.
//
// Solidity: function collectProfits() returns(uint256 payoutEth, uint256 payoutToken)
func (_ValidatorPool *ValidatorPoolTransactorSession) CollectProfits() (*types.Transaction, error) {
	return _ValidatorPool.Contract.CollectProfits(&_ValidatorPool.TransactOpts)
}

// CompleteETHDKG is a paid mutator transaction binding the contract method 0x8f579924.
//
// Solidity: function completeETHDKG() returns()
func (_ValidatorPool *ValidatorPoolTransactor) CompleteETHDKG(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorPool.contract.Transact(opts, "completeETHDKG")
}

// CompleteETHDKG is a paid mutator transaction binding the contract method 0x8f579924.
//
// Solidity: function completeETHDKG() returns()
func (_ValidatorPool *ValidatorPoolSession) CompleteETHDKG() (*types.Transaction, error) {
	return _ValidatorPool.Contract.CompleteETHDKG(&_ValidatorPool.TransactOpts)
}

// CompleteETHDKG is a paid mutator transaction binding the contract method 0x8f579924.
//
// Solidity: function completeETHDKG() returns()
func (_ValidatorPool *ValidatorPoolTransactorSession) CompleteETHDKG() (*types.Transaction, error) {
	return _ValidatorPool.Contract.CompleteETHDKG(&_ValidatorPool.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_ValidatorPool *ValidatorPoolTransactor) Initialize(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorPool.contract.Transact(opts, "initialize")
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_ValidatorPool *ValidatorPoolSession) Initialize() (*types.Transaction, error) {
	return _ValidatorPool.Contract.Initialize(&_ValidatorPool.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_ValidatorPool *ValidatorPoolTransactorSession) Initialize() (*types.Transaction, error) {
	return _ValidatorPool.Contract.Initialize(&_ValidatorPool.TransactOpts)
}

// InitializeETHDKG is a paid mutator transaction binding the contract method 0x57b51c9c.
//
// Solidity: function initializeETHDKG() returns()
func (_ValidatorPool *ValidatorPoolTransactor) InitializeETHDKG(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorPool.contract.Transact(opts, "initializeETHDKG")
}

// InitializeETHDKG is a paid mutator transaction binding the contract method 0x57b51c9c.
//
// Solidity: function initializeETHDKG() returns()
func (_ValidatorPool *ValidatorPoolSession) InitializeETHDKG() (*types.Transaction, error) {
	return _ValidatorPool.Contract.InitializeETHDKG(&_ValidatorPool.TransactOpts)
}

// InitializeETHDKG is a paid mutator transaction binding the contract method 0x57b51c9c.
//
// Solidity: function initializeETHDKG() returns()
func (_ValidatorPool *ValidatorPoolTransactorSession) InitializeETHDKG() (*types.Transaction, error) {
	return _ValidatorPool.Contract.InitializeETHDKG(&_ValidatorPool.TransactOpts)
}

// MajorSlash is a paid mutator transaction binding the contract method 0x048d56c7.
//
// Solidity: function majorSlash(address dishonestValidator_, address disputer_) returns()
func (_ValidatorPool *ValidatorPoolTransactor) MajorSlash(opts *bind.TransactOpts, dishonestValidator_ common.Address, disputer_ common.Address) (*types.Transaction, error) {
	return _ValidatorPool.contract.Transact(opts, "majorSlash", dishonestValidator_, disputer_)
}

// MajorSlash is a paid mutator transaction binding the contract method 0x048d56c7.
//
// Solidity: function majorSlash(address dishonestValidator_, address disputer_) returns()
func (_ValidatorPool *ValidatorPoolSession) MajorSlash(dishonestValidator_ common.Address, disputer_ common.Address) (*types.Transaction, error) {
	return _ValidatorPool.Contract.MajorSlash(&_ValidatorPool.TransactOpts, dishonestValidator_, disputer_)
}

// MajorSlash is a paid mutator transaction binding the contract method 0x048d56c7.
//
// Solidity: function majorSlash(address dishonestValidator_, address disputer_) returns()
func (_ValidatorPool *ValidatorPoolTransactorSession) MajorSlash(dishonestValidator_ common.Address, disputer_ common.Address) (*types.Transaction, error) {
	return _ValidatorPool.Contract.MajorSlash(&_ValidatorPool.TransactOpts, dishonestValidator_, disputer_)
}

// MinorSlash is a paid mutator transaction binding the contract method 0x64c0461c.
//
// Solidity: function minorSlash(address dishonestValidator_, address disputer_) returns()
func (_ValidatorPool *ValidatorPoolTransactor) MinorSlash(opts *bind.TransactOpts, dishonestValidator_ common.Address, disputer_ common.Address) (*types.Transaction, error) {
	return _ValidatorPool.contract.Transact(opts, "minorSlash", dishonestValidator_, disputer_)
}

// MinorSlash is a paid mutator transaction binding the contract method 0x64c0461c.
//
// Solidity: function minorSlash(address dishonestValidator_, address disputer_) returns()
func (_ValidatorPool *ValidatorPoolSession) MinorSlash(dishonestValidator_ common.Address, disputer_ common.Address) (*types.Transaction, error) {
	return _ValidatorPool.Contract.MinorSlash(&_ValidatorPool.TransactOpts, dishonestValidator_, disputer_)
}

// MinorSlash is a paid mutator transaction binding the contract method 0x64c0461c.
//
// Solidity: function minorSlash(address dishonestValidator_, address disputer_) returns()
func (_ValidatorPool *ValidatorPoolTransactorSession) MinorSlash(dishonestValidator_ common.Address, disputer_ common.Address) (*types.Transaction, error) {
	return _ValidatorPool.Contract.MinorSlash(&_ValidatorPool.TransactOpts, dishonestValidator_, disputer_)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address , uint256 , bytes ) returns(bytes4)
func (_ValidatorPool *ValidatorPoolTransactor) OnERC721Received(opts *bind.TransactOpts, arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 []byte) (*types.Transaction, error) {
	return _ValidatorPool.contract.Transact(opts, "onERC721Received", arg0, arg1, arg2, arg3)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address , uint256 , bytes ) returns(bytes4)
func (_ValidatorPool *ValidatorPoolSession) OnERC721Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 []byte) (*types.Transaction, error) {
	return _ValidatorPool.Contract.OnERC721Received(&_ValidatorPool.TransactOpts, arg0, arg1, arg2, arg3)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address , uint256 , bytes ) returns(bytes4)
func (_ValidatorPool *ValidatorPoolTransactorSession) OnERC721Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 []byte) (*types.Transaction, error) {
	return _ValidatorPool.Contract.OnERC721Received(&_ValidatorPool.TransactOpts, arg0, arg1, arg2, arg3)
}

// PauseConsensus is a paid mutator transaction binding the contract method 0x1e5975f4.
//
// Solidity: function pauseConsensus() returns()
func (_ValidatorPool *ValidatorPoolTransactor) PauseConsensus(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorPool.contract.Transact(opts, "pauseConsensus")
}

// PauseConsensus is a paid mutator transaction binding the contract method 0x1e5975f4.
//
// Solidity: function pauseConsensus() returns()
func (_ValidatorPool *ValidatorPoolSession) PauseConsensus() (*types.Transaction, error) {
	return _ValidatorPool.Contract.PauseConsensus(&_ValidatorPool.TransactOpts)
}

// PauseConsensus is a paid mutator transaction binding the contract method 0x1e5975f4.
//
// Solidity: function pauseConsensus() returns()
func (_ValidatorPool *ValidatorPoolTransactorSession) PauseConsensus() (*types.Transaction, error) {
	return _ValidatorPool.Contract.PauseConsensus(&_ValidatorPool.TransactOpts)
}

// PauseConsensusOnArbitraryHeight is a paid mutator transaction binding the contract method 0xbc33bb01.
//
// Solidity: function pauseConsensusOnArbitraryHeight(uint256 madnetHeight_) returns()
func (_ValidatorPool *ValidatorPoolTransactor) PauseConsensusOnArbitraryHeight(opts *bind.TransactOpts, madnetHeight_ *big.Int) (*types.Transaction, error) {
	return _ValidatorPool.contract.Transact(opts, "pauseConsensusOnArbitraryHeight", madnetHeight_)
}

// PauseConsensusOnArbitraryHeight is a paid mutator transaction binding the contract method 0xbc33bb01.
//
// Solidity: function pauseConsensusOnArbitraryHeight(uint256 madnetHeight_) returns()
func (_ValidatorPool *ValidatorPoolSession) PauseConsensusOnArbitraryHeight(madnetHeight_ *big.Int) (*types.Transaction, error) {
	return _ValidatorPool.Contract.PauseConsensusOnArbitraryHeight(&_ValidatorPool.TransactOpts, madnetHeight_)
}

// PauseConsensusOnArbitraryHeight is a paid mutator transaction binding the contract method 0xbc33bb01.
//
// Solidity: function pauseConsensusOnArbitraryHeight(uint256 madnetHeight_) returns()
func (_ValidatorPool *ValidatorPoolTransactorSession) PauseConsensusOnArbitraryHeight(madnetHeight_ *big.Int) (*types.Transaction, error) {
	return _ValidatorPool.Contract.PauseConsensusOnArbitraryHeight(&_ValidatorPool.TransactOpts, madnetHeight_)
}

// RegisterValidators is a paid mutator transaction binding the contract method 0x65bd91af.
//
// Solidity: function registerValidators(address[] validators_, uint256[] stakerTokenIDs_) returns()
func (_ValidatorPool *ValidatorPoolTransactor) RegisterValidators(opts *bind.TransactOpts, validators_ []common.Address, stakerTokenIDs_ []*big.Int) (*types.Transaction, error) {
	return _ValidatorPool.contract.Transact(opts, "registerValidators", validators_, stakerTokenIDs_)
}

// RegisterValidators is a paid mutator transaction binding the contract method 0x65bd91af.
//
// Solidity: function registerValidators(address[] validators_, uint256[] stakerTokenIDs_) returns()
func (_ValidatorPool *ValidatorPoolSession) RegisterValidators(validators_ []common.Address, stakerTokenIDs_ []*big.Int) (*types.Transaction, error) {
	return _ValidatorPool.Contract.RegisterValidators(&_ValidatorPool.TransactOpts, validators_, stakerTokenIDs_)
}

// RegisterValidators is a paid mutator transaction binding the contract method 0x65bd91af.
//
// Solidity: function registerValidators(address[] validators_, uint256[] stakerTokenIDs_) returns()
func (_ValidatorPool *ValidatorPoolTransactorSession) RegisterValidators(validators_ []common.Address, stakerTokenIDs_ []*big.Int) (*types.Transaction, error) {
	return _ValidatorPool.Contract.RegisterValidators(&_ValidatorPool.TransactOpts, validators_, stakerTokenIDs_)
}

// ScheduleMaintenance is a paid mutator transaction binding the contract method 0x2380db1a.
//
// Solidity: function scheduleMaintenance() returns()
func (_ValidatorPool *ValidatorPoolTransactor) ScheduleMaintenance(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorPool.contract.Transact(opts, "scheduleMaintenance")
}

// ScheduleMaintenance is a paid mutator transaction binding the contract method 0x2380db1a.
//
// Solidity: function scheduleMaintenance() returns()
func (_ValidatorPool *ValidatorPoolSession) ScheduleMaintenance() (*types.Transaction, error) {
	return _ValidatorPool.Contract.ScheduleMaintenance(&_ValidatorPool.TransactOpts)
}

// ScheduleMaintenance is a paid mutator transaction binding the contract method 0x2380db1a.
//
// Solidity: function scheduleMaintenance() returns()
func (_ValidatorPool *ValidatorPoolTransactorSession) ScheduleMaintenance() (*types.Transaction, error) {
	return _ValidatorPool.Contract.ScheduleMaintenance(&_ValidatorPool.TransactOpts)
}

// SetDisputerReward is a paid mutator transaction binding the contract method 0x7d907284.
//
// Solidity: function setDisputerReward(uint256 disputerReward_) returns()
func (_ValidatorPool *ValidatorPoolTransactor) SetDisputerReward(opts *bind.TransactOpts, disputerReward_ *big.Int) (*types.Transaction, error) {
	return _ValidatorPool.contract.Transact(opts, "setDisputerReward", disputerReward_)
}

// SetDisputerReward is a paid mutator transaction binding the contract method 0x7d907284.
//
// Solidity: function setDisputerReward(uint256 disputerReward_) returns()
func (_ValidatorPool *ValidatorPoolSession) SetDisputerReward(disputerReward_ *big.Int) (*types.Transaction, error) {
	return _ValidatorPool.Contract.SetDisputerReward(&_ValidatorPool.TransactOpts, disputerReward_)
}

// SetDisputerReward is a paid mutator transaction binding the contract method 0x7d907284.
//
// Solidity: function setDisputerReward(uint256 disputerReward_) returns()
func (_ValidatorPool *ValidatorPoolTransactorSession) SetDisputerReward(disputerReward_ *big.Int) (*types.Transaction, error) {
	return _ValidatorPool.Contract.SetDisputerReward(&_ValidatorPool.TransactOpts, disputerReward_)
}

// SetLocation is a paid mutator transaction binding the contract method 0x827bfbdf.
//
// Solidity: function setLocation(string ip_) returns()
func (_ValidatorPool *ValidatorPoolTransactor) SetLocation(opts *bind.TransactOpts, ip_ string) (*types.Transaction, error) {
	return _ValidatorPool.contract.Transact(opts, "setLocation", ip_)
}

// SetLocation is a paid mutator transaction binding the contract method 0x827bfbdf.
//
// Solidity: function setLocation(string ip_) returns()
func (_ValidatorPool *ValidatorPoolSession) SetLocation(ip_ string) (*types.Transaction, error) {
	return _ValidatorPool.Contract.SetLocation(&_ValidatorPool.TransactOpts, ip_)
}

// SetLocation is a paid mutator transaction binding the contract method 0x827bfbdf.
//
// Solidity: function setLocation(string ip_) returns()
func (_ValidatorPool *ValidatorPoolTransactorSession) SetLocation(ip_ string) (*types.Transaction, error) {
	return _ValidatorPool.Contract.SetLocation(&_ValidatorPool.TransactOpts, ip_)
}

// SetMaxNumValidators is a paid mutator transaction binding the contract method 0x6c0da0b4.
//
// Solidity: function setMaxNumValidators(uint256 maxNumValidators_) returns()
func (_ValidatorPool *ValidatorPoolTransactor) SetMaxNumValidators(opts *bind.TransactOpts, maxNumValidators_ *big.Int) (*types.Transaction, error) {
	return _ValidatorPool.contract.Transact(opts, "setMaxNumValidators", maxNumValidators_)
}

// SetMaxNumValidators is a paid mutator transaction binding the contract method 0x6c0da0b4.
//
// Solidity: function setMaxNumValidators(uint256 maxNumValidators_) returns()
func (_ValidatorPool *ValidatorPoolSession) SetMaxNumValidators(maxNumValidators_ *big.Int) (*types.Transaction, error) {
	return _ValidatorPool.Contract.SetMaxNumValidators(&_ValidatorPool.TransactOpts, maxNumValidators_)
}

// SetMaxNumValidators is a paid mutator transaction binding the contract method 0x6c0da0b4.
//
// Solidity: function setMaxNumValidators(uint256 maxNumValidators_) returns()
func (_ValidatorPool *ValidatorPoolTransactorSession) SetMaxNumValidators(maxNumValidators_ *big.Int) (*types.Transaction, error) {
	return _ValidatorPool.Contract.SetMaxNumValidators(&_ValidatorPool.TransactOpts, maxNumValidators_)
}

// SetStakeAmount is a paid mutator transaction binding the contract method 0x43808c50.
//
// Solidity: function setStakeAmount(uint256 stakeAmount_) returns()
func (_ValidatorPool *ValidatorPoolTransactor) SetStakeAmount(opts *bind.TransactOpts, stakeAmount_ *big.Int) (*types.Transaction, error) {
	return _ValidatorPool.contract.Transact(opts, "setStakeAmount", stakeAmount_)
}

// SetStakeAmount is a paid mutator transaction binding the contract method 0x43808c50.
//
// Solidity: function setStakeAmount(uint256 stakeAmount_) returns()
func (_ValidatorPool *ValidatorPoolSession) SetStakeAmount(stakeAmount_ *big.Int) (*types.Transaction, error) {
	return _ValidatorPool.Contract.SetStakeAmount(&_ValidatorPool.TransactOpts, stakeAmount_)
}

// SetStakeAmount is a paid mutator transaction binding the contract method 0x43808c50.
//
// Solidity: function setStakeAmount(uint256 stakeAmount_) returns()
func (_ValidatorPool *ValidatorPoolTransactorSession) SetStakeAmount(stakeAmount_ *big.Int) (*types.Transaction, error) {
	return _ValidatorPool.Contract.SetStakeAmount(&_ValidatorPool.TransactOpts, stakeAmount_)
}

// UnregisterAllValidators is a paid mutator transaction binding the contract method 0xf6442e24.
//
// Solidity: function unregisterAllValidators() returns()
func (_ValidatorPool *ValidatorPoolTransactor) UnregisterAllValidators(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorPool.contract.Transact(opts, "unregisterAllValidators")
}

// UnregisterAllValidators is a paid mutator transaction binding the contract method 0xf6442e24.
//
// Solidity: function unregisterAllValidators() returns()
func (_ValidatorPool *ValidatorPoolSession) UnregisterAllValidators() (*types.Transaction, error) {
	return _ValidatorPool.Contract.UnregisterAllValidators(&_ValidatorPool.TransactOpts)
}

// UnregisterAllValidators is a paid mutator transaction binding the contract method 0xf6442e24.
//
// Solidity: function unregisterAllValidators() returns()
func (_ValidatorPool *ValidatorPoolTransactorSession) UnregisterAllValidators() (*types.Transaction, error) {
	return _ValidatorPool.Contract.UnregisterAllValidators(&_ValidatorPool.TransactOpts)
}

// UnregisterValidators is a paid mutator transaction binding the contract method 0xc6e86ad6.
//
// Solidity: function unregisterValidators(address[] validators_) returns()
func (_ValidatorPool *ValidatorPoolTransactor) UnregisterValidators(opts *bind.TransactOpts, validators_ []common.Address) (*types.Transaction, error) {
	return _ValidatorPool.contract.Transact(opts, "unregisterValidators", validators_)
}

// UnregisterValidators is a paid mutator transaction binding the contract method 0xc6e86ad6.
//
// Solidity: function unregisterValidators(address[] validators_) returns()
func (_ValidatorPool *ValidatorPoolSession) UnregisterValidators(validators_ []common.Address) (*types.Transaction, error) {
	return _ValidatorPool.Contract.UnregisterValidators(&_ValidatorPool.TransactOpts, validators_)
}

// UnregisterValidators is a paid mutator transaction binding the contract method 0xc6e86ad6.
//
// Solidity: function unregisterValidators(address[] validators_) returns()
func (_ValidatorPool *ValidatorPoolTransactorSession) UnregisterValidators(validators_ []common.Address) (*types.Transaction, error) {
	return _ValidatorPool.Contract.UnregisterValidators(&_ValidatorPool.TransactOpts, validators_)
}

// ValidatorPoolMaintenanceScheduledIterator is returned from FilterMaintenanceScheduled and is used to iterate over the raw logs and unpacked data for MaintenanceScheduled events raised by the ValidatorPool contract.
type ValidatorPoolMaintenanceScheduledIterator struct {
	Event *ValidatorPoolMaintenanceScheduled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorPoolMaintenanceScheduledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorPoolMaintenanceScheduled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorPoolMaintenanceScheduled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorPoolMaintenanceScheduledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorPoolMaintenanceScheduledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorPoolMaintenanceScheduled represents a MaintenanceScheduled event raised by the ValidatorPool contract.
type ValidatorPoolMaintenanceScheduled struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterMaintenanceScheduled is a free log retrieval operation binding the contract event 0xc77f315ab4072b428052ff8f369916ce39f7fa7e925613f3e9b28fe383c565c8.
//
// Solidity: event MaintenanceScheduled()
func (_ValidatorPool *ValidatorPoolFilterer) FilterMaintenanceScheduled(opts *bind.FilterOpts) (*ValidatorPoolMaintenanceScheduledIterator, error) {

	logs, sub, err := _ValidatorPool.contract.FilterLogs(opts, "MaintenanceScheduled")
	if err != nil {
		return nil, err
	}
	return &ValidatorPoolMaintenanceScheduledIterator{contract: _ValidatorPool.contract, event: "MaintenanceScheduled", logs: logs, sub: sub}, nil
}

// WatchMaintenanceScheduled is a free log subscription operation binding the contract event 0xc77f315ab4072b428052ff8f369916ce39f7fa7e925613f3e9b28fe383c565c8.
//
// Solidity: event MaintenanceScheduled()
func (_ValidatorPool *ValidatorPoolFilterer) WatchMaintenanceScheduled(opts *bind.WatchOpts, sink chan<- *ValidatorPoolMaintenanceScheduled) (event.Subscription, error) {

	logs, sub, err := _ValidatorPool.contract.WatchLogs(opts, "MaintenanceScheduled")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorPoolMaintenanceScheduled)
				if err := _ValidatorPool.contract.UnpackLog(event, "MaintenanceScheduled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMaintenanceScheduled is a log parse operation binding the contract event 0xc77f315ab4072b428052ff8f369916ce39f7fa7e925613f3e9b28fe383c565c8.
//
// Solidity: event MaintenanceScheduled()
func (_ValidatorPool *ValidatorPoolFilterer) ParseMaintenanceScheduled(log types.Log) (*ValidatorPoolMaintenanceScheduled, error) {
	event := new(ValidatorPoolMaintenanceScheduled)
	if err := _ValidatorPool.contract.UnpackLog(event, "MaintenanceScheduled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorPoolValidatorJoinedIterator is returned from FilterValidatorJoined and is used to iterate over the raw logs and unpacked data for ValidatorJoined events raised by the ValidatorPool contract.
type ValidatorPoolValidatorJoinedIterator struct {
	Event *ValidatorPoolValidatorJoined // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorPoolValidatorJoinedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorPoolValidatorJoined)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorPoolValidatorJoined)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorPoolValidatorJoinedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorPoolValidatorJoinedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorPoolValidatorJoined represents a ValidatorJoined event raised by the ValidatorPool contract.
type ValidatorPoolValidatorJoined struct {
	Account      common.Address
	ValidatorNFT *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterValidatorJoined is a free log retrieval operation binding the contract event 0xe30848520248cd6b60cf19fe62a302a47e2d2c1c147deea1188e471751557a52.
//
// Solidity: event ValidatorJoined(address indexed account, uint256 validatorNFT)
func (_ValidatorPool *ValidatorPoolFilterer) FilterValidatorJoined(opts *bind.FilterOpts, account []common.Address) (*ValidatorPoolValidatorJoinedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ValidatorPool.contract.FilterLogs(opts, "ValidatorJoined", accountRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorPoolValidatorJoinedIterator{contract: _ValidatorPool.contract, event: "ValidatorJoined", logs: logs, sub: sub}, nil
}

// WatchValidatorJoined is a free log subscription operation binding the contract event 0xe30848520248cd6b60cf19fe62a302a47e2d2c1c147deea1188e471751557a52.
//
// Solidity: event ValidatorJoined(address indexed account, uint256 validatorNFT)
func (_ValidatorPool *ValidatorPoolFilterer) WatchValidatorJoined(opts *bind.WatchOpts, sink chan<- *ValidatorPoolValidatorJoined, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ValidatorPool.contract.WatchLogs(opts, "ValidatorJoined", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorPoolValidatorJoined)
				if err := _ValidatorPool.contract.UnpackLog(event, "ValidatorJoined", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorJoined is a log parse operation binding the contract event 0xe30848520248cd6b60cf19fe62a302a47e2d2c1c147deea1188e471751557a52.
//
// Solidity: event ValidatorJoined(address indexed account, uint256 validatorNFT)
func (_ValidatorPool *ValidatorPoolFilterer) ParseValidatorJoined(log types.Log) (*ValidatorPoolValidatorJoined, error) {
	event := new(ValidatorPoolValidatorJoined)
	if err := _ValidatorPool.contract.UnpackLog(event, "ValidatorJoined", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorPoolValidatorLeftIterator is returned from FilterValidatorLeft and is used to iterate over the raw logs and unpacked data for ValidatorLeft events raised by the ValidatorPool contract.
type ValidatorPoolValidatorLeftIterator struct {
	Event *ValidatorPoolValidatorLeft // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorPoolValidatorLeftIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorPoolValidatorLeft)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorPoolValidatorLeft)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorPoolValidatorLeftIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorPoolValidatorLeftIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorPoolValidatorLeft represents a ValidatorLeft event raised by the ValidatorPool contract.
type ValidatorPoolValidatorLeft struct {
	Account  common.Address
	StakeNFT *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterValidatorLeft is a free log retrieval operation binding the contract event 0x33ff7b2beda3cb99406d3401fd9e8d9001b93e74b845cf7346f6e7f70c703e73.
//
// Solidity: event ValidatorLeft(address indexed account, uint256 stakeNFT)
func (_ValidatorPool *ValidatorPoolFilterer) FilterValidatorLeft(opts *bind.FilterOpts, account []common.Address) (*ValidatorPoolValidatorLeftIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ValidatorPool.contract.FilterLogs(opts, "ValidatorLeft", accountRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorPoolValidatorLeftIterator{contract: _ValidatorPool.contract, event: "ValidatorLeft", logs: logs, sub: sub}, nil
}

// WatchValidatorLeft is a free log subscription operation binding the contract event 0x33ff7b2beda3cb99406d3401fd9e8d9001b93e74b845cf7346f6e7f70c703e73.
//
// Solidity: event ValidatorLeft(address indexed account, uint256 stakeNFT)
func (_ValidatorPool *ValidatorPoolFilterer) WatchValidatorLeft(opts *bind.WatchOpts, sink chan<- *ValidatorPoolValidatorLeft, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ValidatorPool.contract.WatchLogs(opts, "ValidatorLeft", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorPoolValidatorLeft)
				if err := _ValidatorPool.contract.UnpackLog(event, "ValidatorLeft", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorLeft is a log parse operation binding the contract event 0x33ff7b2beda3cb99406d3401fd9e8d9001b93e74b845cf7346f6e7f70c703e73.
//
// Solidity: event ValidatorLeft(address indexed account, uint256 stakeNFT)
func (_ValidatorPool *ValidatorPoolFilterer) ParseValidatorLeft(log types.Log) (*ValidatorPoolValidatorLeft, error) {
	event := new(ValidatorPoolValidatorLeft)
	if err := _ValidatorPool.contract.UnpackLog(event, "ValidatorLeft", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorPoolValidatorMajorSlashedIterator is returned from FilterValidatorMajorSlashed and is used to iterate over the raw logs and unpacked data for ValidatorMajorSlashed events raised by the ValidatorPool contract.
type ValidatorPoolValidatorMajorSlashedIterator struct {
	Event *ValidatorPoolValidatorMajorSlashed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorPoolValidatorMajorSlashedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorPoolValidatorMajorSlashed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorPoolValidatorMajorSlashed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorPoolValidatorMajorSlashedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorPoolValidatorMajorSlashedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorPoolValidatorMajorSlashed represents a ValidatorMajorSlashed event raised by the ValidatorPool contract.
type ValidatorPoolValidatorMajorSlashed struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterValidatorMajorSlashed is a free log retrieval operation binding the contract event 0xee806478c61c75fc3ec50328b2af43290d1860ef40d5dfbba62ece0e1e3abe9e.
//
// Solidity: event ValidatorMajorSlashed(address indexed account)
func (_ValidatorPool *ValidatorPoolFilterer) FilterValidatorMajorSlashed(opts *bind.FilterOpts, account []common.Address) (*ValidatorPoolValidatorMajorSlashedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ValidatorPool.contract.FilterLogs(opts, "ValidatorMajorSlashed", accountRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorPoolValidatorMajorSlashedIterator{contract: _ValidatorPool.contract, event: "ValidatorMajorSlashed", logs: logs, sub: sub}, nil
}

// WatchValidatorMajorSlashed is a free log subscription operation binding the contract event 0xee806478c61c75fc3ec50328b2af43290d1860ef40d5dfbba62ece0e1e3abe9e.
//
// Solidity: event ValidatorMajorSlashed(address indexed account)
func (_ValidatorPool *ValidatorPoolFilterer) WatchValidatorMajorSlashed(opts *bind.WatchOpts, sink chan<- *ValidatorPoolValidatorMajorSlashed, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ValidatorPool.contract.WatchLogs(opts, "ValidatorMajorSlashed", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorPoolValidatorMajorSlashed)
				if err := _ValidatorPool.contract.UnpackLog(event, "ValidatorMajorSlashed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorMajorSlashed is a log parse operation binding the contract event 0xee806478c61c75fc3ec50328b2af43290d1860ef40d5dfbba62ece0e1e3abe9e.
//
// Solidity: event ValidatorMajorSlashed(address indexed account)
func (_ValidatorPool *ValidatorPoolFilterer) ParseValidatorMajorSlashed(log types.Log) (*ValidatorPoolValidatorMajorSlashed, error) {
	event := new(ValidatorPoolValidatorMajorSlashed)
	if err := _ValidatorPool.contract.UnpackLog(event, "ValidatorMajorSlashed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorPoolValidatorMinorSlashedIterator is returned from FilterValidatorMinorSlashed and is used to iterate over the raw logs and unpacked data for ValidatorMinorSlashed events raised by the ValidatorPool contract.
type ValidatorPoolValidatorMinorSlashedIterator struct {
	Event *ValidatorPoolValidatorMinorSlashed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorPoolValidatorMinorSlashedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorPoolValidatorMinorSlashed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorPoolValidatorMinorSlashed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorPoolValidatorMinorSlashedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorPoolValidatorMinorSlashedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorPoolValidatorMinorSlashed represents a ValidatorMinorSlashed event raised by the ValidatorPool contract.
type ValidatorPoolValidatorMinorSlashed struct {
	Account  common.Address
	StakeNFT *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterValidatorMinorSlashed is a free log retrieval operation binding the contract event 0x23f67a6ac6d764dca01e28630334f5b636e2b1928c0a5d5b5428da3f69167208.
//
// Solidity: event ValidatorMinorSlashed(address indexed account, uint256 stakeNFT)
func (_ValidatorPool *ValidatorPoolFilterer) FilterValidatorMinorSlashed(opts *bind.FilterOpts, account []common.Address) (*ValidatorPoolValidatorMinorSlashedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ValidatorPool.contract.FilterLogs(opts, "ValidatorMinorSlashed", accountRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorPoolValidatorMinorSlashedIterator{contract: _ValidatorPool.contract, event: "ValidatorMinorSlashed", logs: logs, sub: sub}, nil
}

// WatchValidatorMinorSlashed is a free log subscription operation binding the contract event 0x23f67a6ac6d764dca01e28630334f5b636e2b1928c0a5d5b5428da3f69167208.
//
// Solidity: event ValidatorMinorSlashed(address indexed account, uint256 stakeNFT)
func (_ValidatorPool *ValidatorPoolFilterer) WatchValidatorMinorSlashed(opts *bind.WatchOpts, sink chan<- *ValidatorPoolValidatorMinorSlashed, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ValidatorPool.contract.WatchLogs(opts, "ValidatorMinorSlashed", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorPoolValidatorMinorSlashed)
				if err := _ValidatorPool.contract.UnpackLog(event, "ValidatorMinorSlashed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorMinorSlashed is a log parse operation binding the contract event 0x23f67a6ac6d764dca01e28630334f5b636e2b1928c0a5d5b5428da3f69167208.
//
// Solidity: event ValidatorMinorSlashed(address indexed account, uint256 stakeNFT)
func (_ValidatorPool *ValidatorPoolFilterer) ParseValidatorMinorSlashed(log types.Log) (*ValidatorPoolValidatorMinorSlashed, error) {
	event := new(ValidatorPoolValidatorMinorSlashed)
	if err := _ValidatorPool.contract.UnpackLog(event, "ValidatorMinorSlashed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorPoolStorageMetaData contains all meta data concerning the ValidatorPoolStorage contract.
var ValidatorPoolStorageMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"_claimPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxIntervalWithoutSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_positionLockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"getMetamorphicContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
}

// ValidatorPoolStorageABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorPoolStorageMetaData.ABI instead.
var ValidatorPoolStorageABI = ValidatorPoolStorageMetaData.ABI

// ValidatorPoolStorage is an auto generated Go binding around an Ethereum contract.
type ValidatorPoolStorage struct {
	ValidatorPoolStorageCaller     // Read-only binding to the contract
	ValidatorPoolStorageTransactor // Write-only binding to the contract
	ValidatorPoolStorageFilterer   // Log filterer for contract events
}

// ValidatorPoolStorageCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorPoolStorageCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorPoolStorageTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorPoolStorageTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorPoolStorageFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorPoolStorageFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorPoolStorageSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorPoolStorageSession struct {
	Contract     *ValidatorPoolStorage // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// ValidatorPoolStorageCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorPoolStorageCallerSession struct {
	Contract *ValidatorPoolStorageCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// ValidatorPoolStorageTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorPoolStorageTransactorSession struct {
	Contract     *ValidatorPoolStorageTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// ValidatorPoolStorageRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorPoolStorageRaw struct {
	Contract *ValidatorPoolStorage // Generic contract binding to access the raw methods on
}

// ValidatorPoolStorageCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorPoolStorageCallerRaw struct {
	Contract *ValidatorPoolStorageCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorPoolStorageTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorPoolStorageTransactorRaw struct {
	Contract *ValidatorPoolStorageTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorPoolStorage creates a new instance of ValidatorPoolStorage, bound to a specific deployed contract.
func NewValidatorPoolStorage(address common.Address, backend bind.ContractBackend) (*ValidatorPoolStorage, error) {
	contract, err := bindValidatorPoolStorage(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorPoolStorage{ValidatorPoolStorageCaller: ValidatorPoolStorageCaller{contract: contract}, ValidatorPoolStorageTransactor: ValidatorPoolStorageTransactor{contract: contract}, ValidatorPoolStorageFilterer: ValidatorPoolStorageFilterer{contract: contract}}, nil
}

// NewValidatorPoolStorageCaller creates a new read-only instance of ValidatorPoolStorage, bound to a specific deployed contract.
func NewValidatorPoolStorageCaller(address common.Address, caller bind.ContractCaller) (*ValidatorPoolStorageCaller, error) {
	contract, err := bindValidatorPoolStorage(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorPoolStorageCaller{contract: contract}, nil
}

// NewValidatorPoolStorageTransactor creates a new write-only instance of ValidatorPoolStorage, bound to a specific deployed contract.
func NewValidatorPoolStorageTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorPoolStorageTransactor, error) {
	contract, err := bindValidatorPoolStorage(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorPoolStorageTransactor{contract: contract}, nil
}

// NewValidatorPoolStorageFilterer creates a new log filterer instance of ValidatorPoolStorage, bound to a specific deployed contract.
func NewValidatorPoolStorageFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorPoolStorageFilterer, error) {
	contract, err := bindValidatorPoolStorage(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorPoolStorageFilterer{contract: contract}, nil
}

// bindValidatorPoolStorage binds a generic wrapper to an already deployed contract.
func bindValidatorPoolStorage(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorPoolStorageABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorPoolStorage *ValidatorPoolStorageRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorPoolStorage.Contract.ValidatorPoolStorageCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorPoolStorage *ValidatorPoolStorageRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorPoolStorage.Contract.ValidatorPoolStorageTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorPoolStorage *ValidatorPoolStorageRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorPoolStorage.Contract.ValidatorPoolStorageTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorPoolStorage *ValidatorPoolStorageCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorPoolStorage.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorPoolStorage *ValidatorPoolStorageTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorPoolStorage.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorPoolStorage *ValidatorPoolStorageTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorPoolStorage.Contract.contract.Transact(opts, method, params...)
}

// ClaimPeriod is a free data retrieval call binding the contract method 0x532f1fea.
//
// Solidity: function _claimPeriod() view returns(uint256)
func (_ValidatorPoolStorage *ValidatorPoolStorageCaller) ClaimPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorPoolStorage.contract.Call(opts, &out, "_claimPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ClaimPeriod is a free data retrieval call binding the contract method 0x532f1fea.
//
// Solidity: function _claimPeriod() view returns(uint256)
func (_ValidatorPoolStorage *ValidatorPoolStorageSession) ClaimPeriod() (*big.Int, error) {
	return _ValidatorPoolStorage.Contract.ClaimPeriod(&_ValidatorPoolStorage.CallOpts)
}

// ClaimPeriod is a free data retrieval call binding the contract method 0x532f1fea.
//
// Solidity: function _claimPeriod() view returns(uint256)
func (_ValidatorPoolStorage *ValidatorPoolStorageCallerSession) ClaimPeriod() (*big.Int, error) {
	return _ValidatorPoolStorage.Contract.ClaimPeriod(&_ValidatorPoolStorage.CallOpts)
}

// MaxIntervalWithoutSnapshot is a free data retrieval call binding the contract method 0x4377919b.
//
// Solidity: function _maxIntervalWithoutSnapshot() view returns(uint256)
func (_ValidatorPoolStorage *ValidatorPoolStorageCaller) MaxIntervalWithoutSnapshot(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorPoolStorage.contract.Call(opts, &out, "_maxIntervalWithoutSnapshot")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaxIntervalWithoutSnapshot is a free data retrieval call binding the contract method 0x4377919b.
//
// Solidity: function _maxIntervalWithoutSnapshot() view returns(uint256)
func (_ValidatorPoolStorage *ValidatorPoolStorageSession) MaxIntervalWithoutSnapshot() (*big.Int, error) {
	return _ValidatorPoolStorage.Contract.MaxIntervalWithoutSnapshot(&_ValidatorPoolStorage.CallOpts)
}

// MaxIntervalWithoutSnapshot is a free data retrieval call binding the contract method 0x4377919b.
//
// Solidity: function _maxIntervalWithoutSnapshot() view returns(uint256)
func (_ValidatorPoolStorage *ValidatorPoolStorageCallerSession) MaxIntervalWithoutSnapshot() (*big.Int, error) {
	return _ValidatorPoolStorage.Contract.MaxIntervalWithoutSnapshot(&_ValidatorPoolStorage.CallOpts)
}

// PositionLockPeriod is a free data retrieval call binding the contract method 0x480c57a8.
//
// Solidity: function _positionLockPeriod() view returns(uint256)
func (_ValidatorPoolStorage *ValidatorPoolStorageCaller) PositionLockPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorPoolStorage.contract.Call(opts, &out, "_positionLockPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PositionLockPeriod is a free data retrieval call binding the contract method 0x480c57a8.
//
// Solidity: function _positionLockPeriod() view returns(uint256)
func (_ValidatorPoolStorage *ValidatorPoolStorageSession) PositionLockPeriod() (*big.Int, error) {
	return _ValidatorPoolStorage.Contract.PositionLockPeriod(&_ValidatorPoolStorage.CallOpts)
}

// PositionLockPeriod is a free data retrieval call binding the contract method 0x480c57a8.
//
// Solidity: function _positionLockPeriod() view returns(uint256)
func (_ValidatorPoolStorage *ValidatorPoolStorageCallerSession) PositionLockPeriod() (*big.Int, error) {
	return _ValidatorPoolStorage.Contract.PositionLockPeriod(&_ValidatorPoolStorage.CallOpts)
}

// GetMetamorphicContractAddress is a free data retrieval call binding the contract method 0x8653a465.
//
// Solidity: function getMetamorphicContractAddress(bytes32 _salt, address _factory) pure returns(address)
func (_ValidatorPoolStorage *ValidatorPoolStorageCaller) GetMetamorphicContractAddress(opts *bind.CallOpts, _salt [32]byte, _factory common.Address) (common.Address, error) {
	var out []interface{}
	err := _ValidatorPoolStorage.contract.Call(opts, &out, "getMetamorphicContractAddress", _salt, _factory)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetMetamorphicContractAddress is a free data retrieval call binding the contract method 0x8653a465.
//
// Solidity: function getMetamorphicContractAddress(bytes32 _salt, address _factory) pure returns(address)
func (_ValidatorPoolStorage *ValidatorPoolStorageSession) GetMetamorphicContractAddress(_salt [32]byte, _factory common.Address) (common.Address, error) {
	return _ValidatorPoolStorage.Contract.GetMetamorphicContractAddress(&_ValidatorPoolStorage.CallOpts, _salt, _factory)
}

// GetMetamorphicContractAddress is a free data retrieval call binding the contract method 0x8653a465.
//
// Solidity: function getMetamorphicContractAddress(bytes32 _salt, address _factory) pure returns(address)
func (_ValidatorPoolStorage *ValidatorPoolStorageCallerSession) GetMetamorphicContractAddress(_salt [32]byte, _factory common.Address) (common.Address, error) {
	return _ValidatorPoolStorage.Contract.GetMetamorphicContractAddress(&_ValidatorPoolStorage.CallOpts, _salt, _factory)
}
