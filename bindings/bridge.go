// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// AccessControlLibraryABI is the input ABI used to generate the binding from.
const AccessControlLibraryABI = "[]"

// AccessControlLibraryBin is the compiled bytecode used for deploying new contracts.
var AccessControlLibraryBin = "0x60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220822e41f29d9279b2aa08497a1fa98d6dbaeb95a9bbcf4666b44551f4c26fb70364736f6c63430007060033"

// DeployAccessControlLibrary deploys a new Ethereum contract, binding an instance of AccessControlLibrary to it.
func DeployAccessControlLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *AccessControlLibrary, error) {
	parsed, err := abi.JSON(strings.NewReader(AccessControlLibraryABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(AccessControlLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &AccessControlLibrary{AccessControlLibraryCaller: AccessControlLibraryCaller{contract: contract}, AccessControlLibraryTransactor: AccessControlLibraryTransactor{contract: contract}, AccessControlLibraryFilterer: AccessControlLibraryFilterer{contract: contract}}, nil
}

// AccessControlLibrary is an auto generated Go binding around an Ethereum contract.
type AccessControlLibrary struct {
	AccessControlLibraryCaller     // Read-only binding to the contract
	AccessControlLibraryTransactor // Write-only binding to the contract
	AccessControlLibraryFilterer   // Log filterer for contract events
}

// AccessControlLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type AccessControlLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessControlLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AccessControlLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessControlLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AccessControlLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessControlLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AccessControlLibrarySession struct {
	Contract     *AccessControlLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// AccessControlLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AccessControlLibraryCallerSession struct {
	Contract *AccessControlLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// AccessControlLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AccessControlLibraryTransactorSession struct {
	Contract     *AccessControlLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// AccessControlLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type AccessControlLibraryRaw struct {
	Contract *AccessControlLibrary // Generic contract binding to access the raw methods on
}

// AccessControlLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AccessControlLibraryCallerRaw struct {
	Contract *AccessControlLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// AccessControlLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AccessControlLibraryTransactorRaw struct {
	Contract *AccessControlLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAccessControlLibrary creates a new instance of AccessControlLibrary, bound to a specific deployed contract.
func NewAccessControlLibrary(address common.Address, backend bind.ContractBackend) (*AccessControlLibrary, error) {
	contract, err := bindAccessControlLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AccessControlLibrary{AccessControlLibraryCaller: AccessControlLibraryCaller{contract: contract}, AccessControlLibraryTransactor: AccessControlLibraryTransactor{contract: contract}, AccessControlLibraryFilterer: AccessControlLibraryFilterer{contract: contract}}, nil
}

// NewAccessControlLibraryCaller creates a new read-only instance of AccessControlLibrary, bound to a specific deployed contract.
func NewAccessControlLibraryCaller(address common.Address, caller bind.ContractCaller) (*AccessControlLibraryCaller, error) {
	contract, err := bindAccessControlLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AccessControlLibraryCaller{contract: contract}, nil
}

// NewAccessControlLibraryTransactor creates a new write-only instance of AccessControlLibrary, bound to a specific deployed contract.
func NewAccessControlLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*AccessControlLibraryTransactor, error) {
	contract, err := bindAccessControlLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AccessControlLibraryTransactor{contract: contract}, nil
}

// NewAccessControlLibraryFilterer creates a new log filterer instance of AccessControlLibrary, bound to a specific deployed contract.
func NewAccessControlLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*AccessControlLibraryFilterer, error) {
	contract, err := bindAccessControlLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AccessControlLibraryFilterer{contract: contract}, nil
}

// bindAccessControlLibrary binds a generic wrapper to an already deployed contract.
func bindAccessControlLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AccessControlLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AccessControlLibrary *AccessControlLibraryRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _AccessControlLibrary.Contract.AccessControlLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AccessControlLibrary *AccessControlLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessControlLibrary.Contract.AccessControlLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AccessControlLibrary *AccessControlLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AccessControlLibrary.Contract.AccessControlLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AccessControlLibrary *AccessControlLibraryCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _AccessControlLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AccessControlLibrary *AccessControlLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessControlLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AccessControlLibrary *AccessControlLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AccessControlLibrary.Contract.contract.Transact(opts, method, params...)
}

// AccessControlledABI is the input ABI used to generate the binding from.
const AccessControlledABI = "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// AccessControlledBin is the compiled bytecode used for deploying new contracts.
var AccessControlledBin = "0x608060405234801561001057600080fd5b5060006100256100ca60201b61032a1760201c565b9050338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018160000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550506100f7565b6000807f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90508091505090565b61038d806101066000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063e348da131461003b578063fad8b32a1461007f575b600080fd5b61007d6004803603602081101561005157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506100c3565b005b6100c16004803603602081101561009557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506101fb565b005b60006100cd61032a565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610190576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f6e6c79206f70657261746f727320616c6c6f7765640000000000000000000081525060200191505060405180910390fd5b600061019a61032a565b905060018160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b600061020561032a565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166102c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f6e6c79206f70657261746f727320616c6c6f7765640000000000000000000081525060200191505060405180910390fd5b60006102d261032a565b90508060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff0219169055505050565b6000807f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9050809150509056fea2646970667358221220c391b563b75ada69a732f08c1ea21554191af446584e59088504783116be89e964736f6c63430007060033"

// DeployAccessControlled deploys a new Ethereum contract, binding an instance of AccessControlled to it.
func DeployAccessControlled(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *AccessControlled, error) {
	parsed, err := abi.JSON(strings.NewReader(AccessControlledABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(AccessControlledBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &AccessControlled{AccessControlledCaller: AccessControlledCaller{contract: contract}, AccessControlledTransactor: AccessControlledTransactor{contract: contract}, AccessControlledFilterer: AccessControlledFilterer{contract: contract}}, nil
}

// AccessControlled is an auto generated Go binding around an Ethereum contract.
type AccessControlled struct {
	AccessControlledCaller     // Read-only binding to the contract
	AccessControlledTransactor // Write-only binding to the contract
	AccessControlledFilterer   // Log filterer for contract events
}

// AccessControlledCaller is an auto generated read-only Go binding around an Ethereum contract.
type AccessControlledCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessControlledTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AccessControlledTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessControlledFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AccessControlledFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessControlledSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AccessControlledSession struct {
	Contract     *AccessControlled // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AccessControlledCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AccessControlledCallerSession struct {
	Contract *AccessControlledCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// AccessControlledTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AccessControlledTransactorSession struct {
	Contract     *AccessControlledTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// AccessControlledRaw is an auto generated low-level Go binding around an Ethereum contract.
type AccessControlledRaw struct {
	Contract *AccessControlled // Generic contract binding to access the raw methods on
}

// AccessControlledCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AccessControlledCallerRaw struct {
	Contract *AccessControlledCaller // Generic read-only contract binding to access the raw methods on
}

// AccessControlledTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AccessControlledTransactorRaw struct {
	Contract *AccessControlledTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAccessControlled creates a new instance of AccessControlled, bound to a specific deployed contract.
func NewAccessControlled(address common.Address, backend bind.ContractBackend) (*AccessControlled, error) {
	contract, err := bindAccessControlled(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AccessControlled{AccessControlledCaller: AccessControlledCaller{contract: contract}, AccessControlledTransactor: AccessControlledTransactor{contract: contract}, AccessControlledFilterer: AccessControlledFilterer{contract: contract}}, nil
}

// NewAccessControlledCaller creates a new read-only instance of AccessControlled, bound to a specific deployed contract.
func NewAccessControlledCaller(address common.Address, caller bind.ContractCaller) (*AccessControlledCaller, error) {
	contract, err := bindAccessControlled(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AccessControlledCaller{contract: contract}, nil
}

// NewAccessControlledTransactor creates a new write-only instance of AccessControlled, bound to a specific deployed contract.
func NewAccessControlledTransactor(address common.Address, transactor bind.ContractTransactor) (*AccessControlledTransactor, error) {
	contract, err := bindAccessControlled(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AccessControlledTransactor{contract: contract}, nil
}

// NewAccessControlledFilterer creates a new log filterer instance of AccessControlled, bound to a specific deployed contract.
func NewAccessControlledFilterer(address common.Address, filterer bind.ContractFilterer) (*AccessControlledFilterer, error) {
	contract, err := bindAccessControlled(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AccessControlledFilterer{contract: contract}, nil
}

// bindAccessControlled binds a generic wrapper to an already deployed contract.
func bindAccessControlled(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AccessControlledABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AccessControlled *AccessControlledRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _AccessControlled.Contract.AccessControlledCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AccessControlled *AccessControlledRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessControlled.Contract.AccessControlledTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AccessControlled *AccessControlledRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AccessControlled.Contract.AccessControlledTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AccessControlled *AccessControlledCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _AccessControlled.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AccessControlled *AccessControlledTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessControlled.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AccessControlled *AccessControlledTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AccessControlled.Contract.contract.Transact(opts, method, params...)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_AccessControlled *AccessControlledTransactor) GrantOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _AccessControlled.contract.Transact(opts, "grantOperator", who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_AccessControlled *AccessControlledSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _AccessControlled.Contract.GrantOperator(&_AccessControlled.TransactOpts, who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_AccessControlled *AccessControlledTransactorSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _AccessControlled.Contract.GrantOperator(&_AccessControlled.TransactOpts, who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_AccessControlled *AccessControlledTransactor) RevokeOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _AccessControlled.contract.Transact(opts, "revokeOperator", who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_AccessControlled *AccessControlledSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _AccessControlled.Contract.RevokeOperator(&_AccessControlled.TransactOpts, who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_AccessControlled *AccessControlledTransactorSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _AccessControlled.Contract.RevokeOperator(&_AccessControlled.TransactOpts, who)
}

// BasicERC20ABI is the input ABI used to generate the binding from.
const BasicERC20ABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// BasicERC20 is an auto generated Go binding around an Ethereum contract.
type BasicERC20 struct {
	BasicERC20Caller     // Read-only binding to the contract
	BasicERC20Transactor // Write-only binding to the contract
	BasicERC20Filterer   // Log filterer for contract events
}

// BasicERC20Caller is an auto generated read-only Go binding around an Ethereum contract.
type BasicERC20Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BasicERC20Transactor is an auto generated write-only Go binding around an Ethereum contract.
type BasicERC20Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BasicERC20Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BasicERC20Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BasicERC20Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BasicERC20Session struct {
	Contract     *BasicERC20       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BasicERC20CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BasicERC20CallerSession struct {
	Contract *BasicERC20Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// BasicERC20TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BasicERC20TransactorSession struct {
	Contract     *BasicERC20Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// BasicERC20Raw is an auto generated low-level Go binding around an Ethereum contract.
type BasicERC20Raw struct {
	Contract *BasicERC20 // Generic contract binding to access the raw methods on
}

// BasicERC20CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BasicERC20CallerRaw struct {
	Contract *BasicERC20Caller // Generic read-only contract binding to access the raw methods on
}

// BasicERC20TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BasicERC20TransactorRaw struct {
	Contract *BasicERC20Transactor // Generic write-only contract binding to access the raw methods on
}

// NewBasicERC20 creates a new instance of BasicERC20, bound to a specific deployed contract.
func NewBasicERC20(address common.Address, backend bind.ContractBackend) (*BasicERC20, error) {
	contract, err := bindBasicERC20(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BasicERC20{BasicERC20Caller: BasicERC20Caller{contract: contract}, BasicERC20Transactor: BasicERC20Transactor{contract: contract}, BasicERC20Filterer: BasicERC20Filterer{contract: contract}}, nil
}

// NewBasicERC20Caller creates a new read-only instance of BasicERC20, bound to a specific deployed contract.
func NewBasicERC20Caller(address common.Address, caller bind.ContractCaller) (*BasicERC20Caller, error) {
	contract, err := bindBasicERC20(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BasicERC20Caller{contract: contract}, nil
}

// NewBasicERC20Transactor creates a new write-only instance of BasicERC20, bound to a specific deployed contract.
func NewBasicERC20Transactor(address common.Address, transactor bind.ContractTransactor) (*BasicERC20Transactor, error) {
	contract, err := bindBasicERC20(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BasicERC20Transactor{contract: contract}, nil
}

// NewBasicERC20Filterer creates a new log filterer instance of BasicERC20, bound to a specific deployed contract.
func NewBasicERC20Filterer(address common.Address, filterer bind.ContractFilterer) (*BasicERC20Filterer, error) {
	contract, err := bindBasicERC20(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BasicERC20Filterer{contract: contract}, nil
}

// bindBasicERC20 binds a generic wrapper to an already deployed contract.
func bindBasicERC20(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BasicERC20ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BasicERC20 *BasicERC20Raw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BasicERC20.Contract.BasicERC20Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BasicERC20 *BasicERC20Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BasicERC20.Contract.BasicERC20Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BasicERC20 *BasicERC20Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BasicERC20.Contract.BasicERC20Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BasicERC20 *BasicERC20CallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BasicERC20.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BasicERC20 *BasicERC20TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BasicERC20.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BasicERC20 *BasicERC20TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BasicERC20.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address src, address who) view returns(uint256)
func (_BasicERC20 *BasicERC20Caller) Allowance(opts *bind.CallOpts, src common.Address, who common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BasicERC20.contract.Call(opts, out, "allowance", src, who)
	return *ret0, err
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address src, address who) view returns(uint256)
func (_BasicERC20 *BasicERC20Session) Allowance(src common.Address, who common.Address) (*big.Int, error) {
	return _BasicERC20.Contract.Allowance(&_BasicERC20.CallOpts, src, who)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address src, address who) view returns(uint256)
func (_BasicERC20 *BasicERC20CallerSession) Allowance(src common.Address, who common.Address) (*big.Int, error) {
	return _BasicERC20.Contract.Allowance(&_BasicERC20.CallOpts, src, who)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address who) view returns(uint256)
func (_BasicERC20 *BasicERC20Caller) BalanceOf(opts *bind.CallOpts, who common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BasicERC20.contract.Call(opts, out, "balanceOf", who)
	return *ret0, err
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address who) view returns(uint256)
func (_BasicERC20 *BasicERC20Session) BalanceOf(who common.Address) (*big.Int, error) {
	return _BasicERC20.Contract.BalanceOf(&_BasicERC20.CallOpts, who)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address who) view returns(uint256)
func (_BasicERC20 *BasicERC20CallerSession) BalanceOf(who common.Address) (*big.Int, error) {
	return _BasicERC20.Contract.BalanceOf(&_BasicERC20.CallOpts, who)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_BasicERC20 *BasicERC20Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BasicERC20.contract.Call(opts, out, "totalSupply")
	return *ret0, err
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_BasicERC20 *BasicERC20Session) TotalSupply() (*big.Int, error) {
	return _BasicERC20.Contract.TotalSupply(&_BasicERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_BasicERC20 *BasicERC20CallerSession) TotalSupply() (*big.Int, error) {
	return _BasicERC20.Contract.TotalSupply(&_BasicERC20.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address who, uint256 wad) returns(bool)
func (_BasicERC20 *BasicERC20Transactor) Approve(opts *bind.TransactOpts, who common.Address, wad *big.Int) (*types.Transaction, error) {
	return _BasicERC20.contract.Transact(opts, "approve", who, wad)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address who, uint256 wad) returns(bool)
func (_BasicERC20 *BasicERC20Session) Approve(who common.Address, wad *big.Int) (*types.Transaction, error) {
	return _BasicERC20.Contract.Approve(&_BasicERC20.TransactOpts, who, wad)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address who, uint256 wad) returns(bool)
func (_BasicERC20 *BasicERC20TransactorSession) Approve(who common.Address, wad *big.Int) (*types.Transaction, error) {
	return _BasicERC20.Contract.Approve(&_BasicERC20.TransactOpts, who, wad)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 wad) returns(bool)
func (_BasicERC20 *BasicERC20Transactor) Transfer(opts *bind.TransactOpts, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _BasicERC20.contract.Transact(opts, "transfer", dst, wad)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 wad) returns(bool)
func (_BasicERC20 *BasicERC20Session) Transfer(dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _BasicERC20.Contract.Transfer(&_BasicERC20.TransactOpts, dst, wad)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 wad) returns(bool)
func (_BasicERC20 *BasicERC20TransactorSession) Transfer(dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _BasicERC20.Contract.Transfer(&_BasicERC20.TransactOpts, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_BasicERC20 *BasicERC20Transactor) TransferFrom(opts *bind.TransactOpts, src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _BasicERC20.contract.Transact(opts, "transferFrom", src, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_BasicERC20 *BasicERC20Session) TransferFrom(src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _BasicERC20.Contract.TransferFrom(&_BasicERC20.TransactOpts, src, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_BasicERC20 *BasicERC20TransactorSession) TransferFrom(src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _BasicERC20.Contract.TransferFrom(&_BasicERC20.TransactOpts, src, dst, wad)
}

// ConBaseABI is the input ABI used to generate the binding from.
const ConBaseABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"special_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// ConBaseBin is the compiled bytecode used for deploying new contracts.
var ConBaseBin = "0x608060405234801561001057600080fd5b506040516103143803806103148339818101604052602081101561003357600080fd5b8101908080519060200190929190505050600560008190555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506102778061009d6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80638381f58a1461003b578063d09de08a14610059575b600080fd5b610043610063565b6040518082815260200191505060405180910390f35b610061610069565b005b60005481565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166040516024016040516020818303038152906040527fd09de08a000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b6020831061015a5780518252602082019150602081019050602083039250610137565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d80600081146101ba576040519150601f19603f3d011682016040523d82523d6000602084013e6101bf565b606091505b5050905080610219576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602581526020018061021d6025913960400191505060405180910390fd5b5056fe64656c6567617465642063616c6c206661696c656420666f7220696e6372656d656e742829a2646970667358221220a5e4ab457e9aa52ebe456e44547daaca503dc4573848d522ab2bef036b3d2d3764736f6c63430007060033"

// DeployConBase deploys a new Ethereum contract, binding an instance of ConBase to it.
func DeployConBase(auth *bind.TransactOpts, backend bind.ContractBackend, special_ common.Address) (common.Address, *types.Transaction, *ConBase, error) {
	parsed, err := abi.JSON(strings.NewReader(ConBaseABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ConBaseBin), backend, special_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ConBase{ConBaseCaller: ConBaseCaller{contract: contract}, ConBaseTransactor: ConBaseTransactor{contract: contract}, ConBaseFilterer: ConBaseFilterer{contract: contract}}, nil
}

// ConBase is an auto generated Go binding around an Ethereum contract.
type ConBase struct {
	ConBaseCaller     // Read-only binding to the contract
	ConBaseTransactor // Write-only binding to the contract
	ConBaseFilterer   // Log filterer for contract events
}

// ConBaseCaller is an auto generated read-only Go binding around an Ethereum contract.
type ConBaseCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ConBaseTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ConBaseTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ConBaseFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ConBaseFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ConBaseSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ConBaseSession struct {
	Contract     *ConBase          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ConBaseCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ConBaseCallerSession struct {
	Contract *ConBaseCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// ConBaseTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ConBaseTransactorSession struct {
	Contract     *ConBaseTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// ConBaseRaw is an auto generated low-level Go binding around an Ethereum contract.
type ConBaseRaw struct {
	Contract *ConBase // Generic contract binding to access the raw methods on
}

// ConBaseCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ConBaseCallerRaw struct {
	Contract *ConBaseCaller // Generic read-only contract binding to access the raw methods on
}

// ConBaseTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ConBaseTransactorRaw struct {
	Contract *ConBaseTransactor // Generic write-only contract binding to access the raw methods on
}

// NewConBase creates a new instance of ConBase, bound to a specific deployed contract.
func NewConBase(address common.Address, backend bind.ContractBackend) (*ConBase, error) {
	contract, err := bindConBase(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ConBase{ConBaseCaller: ConBaseCaller{contract: contract}, ConBaseTransactor: ConBaseTransactor{contract: contract}, ConBaseFilterer: ConBaseFilterer{contract: contract}}, nil
}

// NewConBaseCaller creates a new read-only instance of ConBase, bound to a specific deployed contract.
func NewConBaseCaller(address common.Address, caller bind.ContractCaller) (*ConBaseCaller, error) {
	contract, err := bindConBase(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ConBaseCaller{contract: contract}, nil
}

// NewConBaseTransactor creates a new write-only instance of ConBase, bound to a specific deployed contract.
func NewConBaseTransactor(address common.Address, transactor bind.ContractTransactor) (*ConBaseTransactor, error) {
	contract, err := bindConBase(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ConBaseTransactor{contract: contract}, nil
}

// NewConBaseFilterer creates a new log filterer instance of ConBase, bound to a specific deployed contract.
func NewConBaseFilterer(address common.Address, filterer bind.ContractFilterer) (*ConBaseFilterer, error) {
	contract, err := bindConBase(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ConBaseFilterer{contract: contract}, nil
}

// bindConBase binds a generic wrapper to an already deployed contract.
func bindConBase(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ConBaseABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ConBase *ConBaseRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ConBase.Contract.ConBaseCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ConBase *ConBaseRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ConBase.Contract.ConBaseTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ConBase *ConBaseRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ConBase.Contract.ConBaseTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ConBase *ConBaseCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ConBase.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ConBase *ConBaseTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ConBase.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ConBase *ConBaseTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ConBase.Contract.contract.Transact(opts, method, params...)
}

// Number is a free data retrieval call binding the contract method 0x8381f58a.
//
// Solidity: function number() view returns(uint256)
func (_ConBase *ConBaseCaller) Number(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ConBase.contract.Call(opts, out, "number")
	return *ret0, err
}

// Number is a free data retrieval call binding the contract method 0x8381f58a.
//
// Solidity: function number() view returns(uint256)
func (_ConBase *ConBaseSession) Number() (*big.Int, error) {
	return _ConBase.Contract.Number(&_ConBase.CallOpts)
}

// Number is a free data retrieval call binding the contract method 0x8381f58a.
//
// Solidity: function number() view returns(uint256)
func (_ConBase *ConBaseCallerSession) Number() (*big.Int, error) {
	return _ConBase.Contract.Number(&_ConBase.CallOpts)
}

// Increment is a paid mutator transaction binding the contract method 0xd09de08a.
//
// Solidity: function increment() returns()
func (_ConBase *ConBaseTransactor) Increment(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ConBase.contract.Transact(opts, "increment")
}

// Increment is a paid mutator transaction binding the contract method 0xd09de08a.
//
// Solidity: function increment() returns()
func (_ConBase *ConBaseSession) Increment() (*types.Transaction, error) {
	return _ConBase.Contract.Increment(&_ConBase.TransactOpts)
}

// Increment is a paid mutator transaction binding the contract method 0xd09de08a.
//
// Solidity: function increment() returns()
func (_ConBase *ConBaseTransactorSession) Increment() (*types.Transaction, error) {
	return _ConBase.Contract.Increment(&_ConBase.TransactOpts)
}

// ConSpecialABI is the input ABI used to generate the binding from.
const ConSpecialABI = "[{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// ConSpecialBin is the compiled bytecode used for deploying new contracts.
var ConSpecialBin = "0x6080604052348015600f57600080fd5b50600560008190555060aa806100266000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80638381f58a146037578063d09de08a146053575b600080fd5b603d605b565b6040518082815260200191505060405180910390f35b60596061565b005b60005481565b600080815480929190600101919050555056fea264697066735822122081de9f68c5968799ecad9606731e24ee014fe051a96eb65b664f2acfcbc0c0af64736f6c63430007060033"

// DeployConSpecial deploys a new Ethereum contract, binding an instance of ConSpecial to it.
func DeployConSpecial(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ConSpecial, error) {
	parsed, err := abi.JSON(strings.NewReader(ConSpecialABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ConSpecialBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ConSpecial{ConSpecialCaller: ConSpecialCaller{contract: contract}, ConSpecialTransactor: ConSpecialTransactor{contract: contract}, ConSpecialFilterer: ConSpecialFilterer{contract: contract}}, nil
}

// ConSpecial is an auto generated Go binding around an Ethereum contract.
type ConSpecial struct {
	ConSpecialCaller     // Read-only binding to the contract
	ConSpecialTransactor // Write-only binding to the contract
	ConSpecialFilterer   // Log filterer for contract events
}

// ConSpecialCaller is an auto generated read-only Go binding around an Ethereum contract.
type ConSpecialCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ConSpecialTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ConSpecialTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ConSpecialFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ConSpecialFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ConSpecialSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ConSpecialSession struct {
	Contract     *ConSpecial       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ConSpecialCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ConSpecialCallerSession struct {
	Contract *ConSpecialCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// ConSpecialTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ConSpecialTransactorSession struct {
	Contract     *ConSpecialTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// ConSpecialRaw is an auto generated low-level Go binding around an Ethereum contract.
type ConSpecialRaw struct {
	Contract *ConSpecial // Generic contract binding to access the raw methods on
}

// ConSpecialCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ConSpecialCallerRaw struct {
	Contract *ConSpecialCaller // Generic read-only contract binding to access the raw methods on
}

// ConSpecialTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ConSpecialTransactorRaw struct {
	Contract *ConSpecialTransactor // Generic write-only contract binding to access the raw methods on
}

// NewConSpecial creates a new instance of ConSpecial, bound to a specific deployed contract.
func NewConSpecial(address common.Address, backend bind.ContractBackend) (*ConSpecial, error) {
	contract, err := bindConSpecial(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ConSpecial{ConSpecialCaller: ConSpecialCaller{contract: contract}, ConSpecialTransactor: ConSpecialTransactor{contract: contract}, ConSpecialFilterer: ConSpecialFilterer{contract: contract}}, nil
}

// NewConSpecialCaller creates a new read-only instance of ConSpecial, bound to a specific deployed contract.
func NewConSpecialCaller(address common.Address, caller bind.ContractCaller) (*ConSpecialCaller, error) {
	contract, err := bindConSpecial(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ConSpecialCaller{contract: contract}, nil
}

// NewConSpecialTransactor creates a new write-only instance of ConSpecial, bound to a specific deployed contract.
func NewConSpecialTransactor(address common.Address, transactor bind.ContractTransactor) (*ConSpecialTransactor, error) {
	contract, err := bindConSpecial(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ConSpecialTransactor{contract: contract}, nil
}

// NewConSpecialFilterer creates a new log filterer instance of ConSpecial, bound to a specific deployed contract.
func NewConSpecialFilterer(address common.Address, filterer bind.ContractFilterer) (*ConSpecialFilterer, error) {
	contract, err := bindConSpecial(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ConSpecialFilterer{contract: contract}, nil
}

// bindConSpecial binds a generic wrapper to an already deployed contract.
func bindConSpecial(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ConSpecialABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ConSpecial *ConSpecialRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ConSpecial.Contract.ConSpecialCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ConSpecial *ConSpecialRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ConSpecial.Contract.ConSpecialTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ConSpecial *ConSpecialRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ConSpecial.Contract.ConSpecialTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ConSpecial *ConSpecialCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ConSpecial.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ConSpecial *ConSpecialTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ConSpecial.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ConSpecial *ConSpecialTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ConSpecial.Contract.contract.Transact(opts, method, params...)
}

// Number is a free data retrieval call binding the contract method 0x8381f58a.
//
// Solidity: function number() view returns(uint256)
func (_ConSpecial *ConSpecialCaller) Number(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ConSpecial.contract.Call(opts, out, "number")
	return *ret0, err
}

// Number is a free data retrieval call binding the contract method 0x8381f58a.
//
// Solidity: function number() view returns(uint256)
func (_ConSpecial *ConSpecialSession) Number() (*big.Int, error) {
	return _ConSpecial.Contract.Number(&_ConSpecial.CallOpts)
}

// Number is a free data retrieval call binding the contract method 0x8381f58a.
//
// Solidity: function number() view returns(uint256)
func (_ConSpecial *ConSpecialCallerSession) Number() (*big.Int, error) {
	return _ConSpecial.Contract.Number(&_ConSpecial.CallOpts)
}

// Increment is a paid mutator transaction binding the contract method 0xd09de08a.
//
// Solidity: function increment() returns()
func (_ConSpecial *ConSpecialTransactor) Increment(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ConSpecial.contract.Transact(opts, "increment")
}

// Increment is a paid mutator transaction binding the contract method 0xd09de08a.
//
// Solidity: function increment() returns()
func (_ConSpecial *ConSpecialSession) Increment() (*types.Transaction, error) {
	return _ConSpecial.Contract.Increment(&_ConSpecial.TransactOpts)
}

// Increment is a paid mutator transaction binding the contract method 0xd09de08a.
//
// Solidity: function increment() returns()
func (_ConSpecial *ConSpecialTransactorSession) Increment() (*types.Transaction, error) {
	return _ConSpecial.Contract.Increment(&_ConSpecial.TransactOpts)
}

// ConStorageABI is the input ABI used to generate the binding from.
const ConStorageABI = "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// ConStorageBin is the compiled bytecode used for deploying new contracts.
var ConStorageBin = "0x6080604052348015600f57600080fd5b5060056000819055506085806100266000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80638381f58a14602d575b600080fd5b60336049565b6040518082815260200191505060405180910390f35b6000548156fea26469706673582212207adac23590bdd99a06cf780e3356ffb031ea9fbcf8c5e5c84b113bcc59746f9764736f6c63430007060033"

// DeployConStorage deploys a new Ethereum contract, binding an instance of ConStorage to it.
func DeployConStorage(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ConStorage, error) {
	parsed, err := abi.JSON(strings.NewReader(ConStorageABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ConStorageBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ConStorage{ConStorageCaller: ConStorageCaller{contract: contract}, ConStorageTransactor: ConStorageTransactor{contract: contract}, ConStorageFilterer: ConStorageFilterer{contract: contract}}, nil
}

// ConStorage is an auto generated Go binding around an Ethereum contract.
type ConStorage struct {
	ConStorageCaller     // Read-only binding to the contract
	ConStorageTransactor // Write-only binding to the contract
	ConStorageFilterer   // Log filterer for contract events
}

// ConStorageCaller is an auto generated read-only Go binding around an Ethereum contract.
type ConStorageCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ConStorageTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ConStorageTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ConStorageFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ConStorageFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ConStorageSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ConStorageSession struct {
	Contract     *ConStorage       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ConStorageCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ConStorageCallerSession struct {
	Contract *ConStorageCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// ConStorageTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ConStorageTransactorSession struct {
	Contract     *ConStorageTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// ConStorageRaw is an auto generated low-level Go binding around an Ethereum contract.
type ConStorageRaw struct {
	Contract *ConStorage // Generic contract binding to access the raw methods on
}

// ConStorageCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ConStorageCallerRaw struct {
	Contract *ConStorageCaller // Generic read-only contract binding to access the raw methods on
}

// ConStorageTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ConStorageTransactorRaw struct {
	Contract *ConStorageTransactor // Generic write-only contract binding to access the raw methods on
}

// NewConStorage creates a new instance of ConStorage, bound to a specific deployed contract.
func NewConStorage(address common.Address, backend bind.ContractBackend) (*ConStorage, error) {
	contract, err := bindConStorage(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ConStorage{ConStorageCaller: ConStorageCaller{contract: contract}, ConStorageTransactor: ConStorageTransactor{contract: contract}, ConStorageFilterer: ConStorageFilterer{contract: contract}}, nil
}

// NewConStorageCaller creates a new read-only instance of ConStorage, bound to a specific deployed contract.
func NewConStorageCaller(address common.Address, caller bind.ContractCaller) (*ConStorageCaller, error) {
	contract, err := bindConStorage(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ConStorageCaller{contract: contract}, nil
}

// NewConStorageTransactor creates a new write-only instance of ConStorage, bound to a specific deployed contract.
func NewConStorageTransactor(address common.Address, transactor bind.ContractTransactor) (*ConStorageTransactor, error) {
	contract, err := bindConStorage(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ConStorageTransactor{contract: contract}, nil
}

// NewConStorageFilterer creates a new log filterer instance of ConStorage, bound to a specific deployed contract.
func NewConStorageFilterer(address common.Address, filterer bind.ContractFilterer) (*ConStorageFilterer, error) {
	contract, err := bindConStorage(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ConStorageFilterer{contract: contract}, nil
}

// bindConStorage binds a generic wrapper to an already deployed contract.
func bindConStorage(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ConStorageABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ConStorage *ConStorageRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ConStorage.Contract.ConStorageCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ConStorage *ConStorageRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ConStorage.Contract.ConStorageTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ConStorage *ConStorageRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ConStorage.Contract.ConStorageTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ConStorage *ConStorageCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ConStorage.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ConStorage *ConStorageTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ConStorage.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ConStorage *ConStorageTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ConStorage.Contract.contract.Transact(opts, method, params...)
}

// Number is a free data retrieval call binding the contract method 0x8381f58a.
//
// Solidity: function number() view returns(uint256)
func (_ConStorage *ConStorageCaller) Number(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ConStorage.contract.Call(opts, out, "number")
	return *ret0, err
}

// Number is a free data retrieval call binding the contract method 0x8381f58a.
//
// Solidity: function number() view returns(uint256)
func (_ConStorage *ConStorageSession) Number() (*big.Int, error) {
	return _ConStorage.Contract.Number(&_ConStorage.CallOpts)
}

// Number is a free data retrieval call binding the contract method 0x8381f58a.
//
// Solidity: function number() view returns(uint256)
func (_ConStorage *ConStorageCallerSession) Number() (*big.Int, error) {
	return _ConStorage.Contract.Number(&_ConStorage.CallOpts)
}

// ConbaseTestABI is the input ABI used to generate the binding from.
const ConbaseTestABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"log_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"log_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"log_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"name\":\"log_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"log_named_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\"}],\"name\":\"log_named_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\"}],\"name\":\"log_named_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"}],\"name\":\"log_named_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"}],\"name\":\"log_named_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"log_named_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"log_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"logs\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testWeird\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// ConbaseTestBin is the compiled bytecode used for deploying new contracts.
var ConbaseTestBin = "0x608060405260016000806101000a81548160ff02191690831515021790555034801561002a57600080fd5b5061090c8061003a6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630957af15146100515780630a9254e41461005b578063ba414fa614610065578063fa7626d414610085575b600080fd5b6100596100a5565b005b610063610283565b005b61006d610337565b60405180821515815260200191505060405180910390f35b61008d61034a565b60405180821515815260200191505060405180910390f35b610152600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638381f58a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561011057600080fd5b505afa158015610124573d6000803e3d6000fd5b505050506040513d602081101561013a57600080fd5b8101908080519060200190929190505050600561035b565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d09de08a6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156101bc57600080fd5b505af11580156101d0573d6000803e3d6000fd5b50505050610281600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638381f58a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561023f57600080fd5b505afa158015610253573d6000803e3d6000fd5b505050506040513d602081101561026957600080fd5b8101908080519060200190929190505050600661035b565b565b60405161028f906104b7565b604051809103906000f0801580156102ab573d6000803e3d6000fd5b506040516102b8906104c3565b808273ffffffffffffffffffffffffffffffffffffffff168152602001915050604051809103906000f0801580156102f4573d6000803e3d6000fd5b50600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600060019054906101000a900460ff1681565b60008054906101000a900460ff1681565b808214610496577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040518080602001828103825260228152602001806108b56022913960400191505060405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a88160405180806020018381526020018281038252600a8152602001807f20204578706563746564000000000000000000000000000000000000000000008152506020019250505060405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a88260405180806020018381526020018281038252600a8152602001807f2020202041637475616c000000000000000000000000000000000000000000008152506020019250505060405180910390a161049561049a565b5b5050565b6001600060016101000a81548160ff021916908315150217905550565b60d0806104d183390190565b610314806105a18339019056fe6080604052348015600f57600080fd5b50600560008190555060aa806100266000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80638381f58a146037578063d09de08a146053575b600080fd5b603d605b565b6040518082815260200191505060405180910390f35b60596061565b005b60005481565b600080815480929190600101919050555056fea264697066735822122081de9f68c5968799ecad9606731e24ee014fe051a96eb65b664f2acfcbc0c0af64736f6c63430007060033608060405234801561001057600080fd5b506040516103143803806103148339818101604052602081101561003357600080fd5b8101908080519060200190929190505050600560008190555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506102778061009d6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80638381f58a1461003b578063d09de08a14610059575b600080fd5b610043610063565b6040518082815260200191505060405180910390f35b610061610069565b005b60005481565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166040516024016040516020818303038152906040527fd09de08a000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b6020831061015a5780518252602082019150602081019050602083039250610137565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d80600081146101ba576040519150601f19603f3d011682016040523d82523d6000602084013e6101bf565b606091505b5050905080610219576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602581526020018061021d6025913960400191505060405180910390fd5b5056fe64656c6567617465642063616c6c206661696c656420666f7220696e6372656d656e742829a2646970667358221220a5e4ab457e9aa52ebe456e44547daaca503dc4573848d522ab2bef036b3d2d3764736f6c634300070600334572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e745da26469706673582212208d70589e4c7174e99304bfbc2c28a1775a9690512062bbee95d2d34d060a34f264736f6c63430007060033"

// DeployConbaseTest deploys a new Ethereum contract, binding an instance of ConbaseTest to it.
func DeployConbaseTest(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ConbaseTest, error) {
	parsed, err := abi.JSON(strings.NewReader(ConbaseTestABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ConbaseTestBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ConbaseTest{ConbaseTestCaller: ConbaseTestCaller{contract: contract}, ConbaseTestTransactor: ConbaseTestTransactor{contract: contract}, ConbaseTestFilterer: ConbaseTestFilterer{contract: contract}}, nil
}

// ConbaseTest is an auto generated Go binding around an Ethereum contract.
type ConbaseTest struct {
	ConbaseTestCaller     // Read-only binding to the contract
	ConbaseTestTransactor // Write-only binding to the contract
	ConbaseTestFilterer   // Log filterer for contract events
}

// ConbaseTestCaller is an auto generated read-only Go binding around an Ethereum contract.
type ConbaseTestCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ConbaseTestTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ConbaseTestTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ConbaseTestFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ConbaseTestFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ConbaseTestSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ConbaseTestSession struct {
	Contract     *ConbaseTest      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ConbaseTestCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ConbaseTestCallerSession struct {
	Contract *ConbaseTestCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// ConbaseTestTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ConbaseTestTransactorSession struct {
	Contract     *ConbaseTestTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// ConbaseTestRaw is an auto generated low-level Go binding around an Ethereum contract.
type ConbaseTestRaw struct {
	Contract *ConbaseTest // Generic contract binding to access the raw methods on
}

// ConbaseTestCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ConbaseTestCallerRaw struct {
	Contract *ConbaseTestCaller // Generic read-only contract binding to access the raw methods on
}

// ConbaseTestTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ConbaseTestTransactorRaw struct {
	Contract *ConbaseTestTransactor // Generic write-only contract binding to access the raw methods on
}

// NewConbaseTest creates a new instance of ConbaseTest, bound to a specific deployed contract.
func NewConbaseTest(address common.Address, backend bind.ContractBackend) (*ConbaseTest, error) {
	contract, err := bindConbaseTest(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ConbaseTest{ConbaseTestCaller: ConbaseTestCaller{contract: contract}, ConbaseTestTransactor: ConbaseTestTransactor{contract: contract}, ConbaseTestFilterer: ConbaseTestFilterer{contract: contract}}, nil
}

// NewConbaseTestCaller creates a new read-only instance of ConbaseTest, bound to a specific deployed contract.
func NewConbaseTestCaller(address common.Address, caller bind.ContractCaller) (*ConbaseTestCaller, error) {
	contract, err := bindConbaseTest(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ConbaseTestCaller{contract: contract}, nil
}

// NewConbaseTestTransactor creates a new write-only instance of ConbaseTest, bound to a specific deployed contract.
func NewConbaseTestTransactor(address common.Address, transactor bind.ContractTransactor) (*ConbaseTestTransactor, error) {
	contract, err := bindConbaseTest(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ConbaseTestTransactor{contract: contract}, nil
}

// NewConbaseTestFilterer creates a new log filterer instance of ConbaseTest, bound to a specific deployed contract.
func NewConbaseTestFilterer(address common.Address, filterer bind.ContractFilterer) (*ConbaseTestFilterer, error) {
	contract, err := bindConbaseTest(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ConbaseTestFilterer{contract: contract}, nil
}

// bindConbaseTest binds a generic wrapper to an already deployed contract.
func bindConbaseTest(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ConbaseTestABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ConbaseTest *ConbaseTestRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ConbaseTest.Contract.ConbaseTestCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ConbaseTest *ConbaseTestRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ConbaseTest.Contract.ConbaseTestTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ConbaseTest *ConbaseTestRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ConbaseTest.Contract.ConbaseTestTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ConbaseTest *ConbaseTestCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ConbaseTest.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ConbaseTest *ConbaseTestTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ConbaseTest.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ConbaseTest *ConbaseTestTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ConbaseTest.Contract.contract.Transact(opts, method, params...)
}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_ConbaseTest *ConbaseTestCaller) ISTEST(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ConbaseTest.contract.Call(opts, out, "IS_TEST")
	return *ret0, err
}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_ConbaseTest *ConbaseTestSession) ISTEST() (bool, error) {
	return _ConbaseTest.Contract.ISTEST(&_ConbaseTest.CallOpts)
}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_ConbaseTest *ConbaseTestCallerSession) ISTEST() (bool, error) {
	return _ConbaseTest.Contract.ISTEST(&_ConbaseTest.CallOpts)
}

// Failed is a free data retrieval call binding the contract method 0xba414fa6.
//
// Solidity: function failed() view returns(bool)
func (_ConbaseTest *ConbaseTestCaller) Failed(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ConbaseTest.contract.Call(opts, out, "failed")
	return *ret0, err
}

// Failed is a free data retrieval call binding the contract method 0xba414fa6.
//
// Solidity: function failed() view returns(bool)
func (_ConbaseTest *ConbaseTestSession) Failed() (bool, error) {
	return _ConbaseTest.Contract.Failed(&_ConbaseTest.CallOpts)
}

// Failed is a free data retrieval call binding the contract method 0xba414fa6.
//
// Solidity: function failed() view returns(bool)
func (_ConbaseTest *ConbaseTestCallerSession) Failed() (bool, error) {
	return _ConbaseTest.Contract.Failed(&_ConbaseTest.CallOpts)
}

// SetUp is a paid mutator transaction binding the contract method 0x0a9254e4.
//
// Solidity: function setUp() returns()
func (_ConbaseTest *ConbaseTestTransactor) SetUp(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ConbaseTest.contract.Transact(opts, "setUp")
}

// SetUp is a paid mutator transaction binding the contract method 0x0a9254e4.
//
// Solidity: function setUp() returns()
func (_ConbaseTest *ConbaseTestSession) SetUp() (*types.Transaction, error) {
	return _ConbaseTest.Contract.SetUp(&_ConbaseTest.TransactOpts)
}

// SetUp is a paid mutator transaction binding the contract method 0x0a9254e4.
//
// Solidity: function setUp() returns()
func (_ConbaseTest *ConbaseTestTransactorSession) SetUp() (*types.Transaction, error) {
	return _ConbaseTest.Contract.SetUp(&_ConbaseTest.TransactOpts)
}

// TestWeird is a paid mutator transaction binding the contract method 0x0957af15.
//
// Solidity: function testWeird() returns()
func (_ConbaseTest *ConbaseTestTransactor) TestWeird(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ConbaseTest.contract.Transact(opts, "testWeird")
}

// TestWeird is a paid mutator transaction binding the contract method 0x0957af15.
//
// Solidity: function testWeird() returns()
func (_ConbaseTest *ConbaseTestSession) TestWeird() (*types.Transaction, error) {
	return _ConbaseTest.Contract.TestWeird(&_ConbaseTest.TransactOpts)
}

// TestWeird is a paid mutator transaction binding the contract method 0x0957af15.
//
// Solidity: function testWeird() returns()
func (_ConbaseTest *ConbaseTestTransactorSession) TestWeird() (*types.Transaction, error) {
	return _ConbaseTest.Contract.TestWeird(&_ConbaseTest.TransactOpts)
}

// ConbaseTestLogIterator is returned from FilterLog and is used to iterate over the raw logs and unpacked data for Log events raised by the ConbaseTest contract.
type ConbaseTestLogIterator struct {
	Event *ConbaseTestLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ConbaseTestLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ConbaseTestLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ConbaseTestLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ConbaseTestLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ConbaseTestLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ConbaseTestLog represents a Log event raised by the ConbaseTest contract.
type ConbaseTestLog struct {
	Arg0 string
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLog is a free log retrieval operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_ConbaseTest *ConbaseTestFilterer) FilterLog(opts *bind.FilterOpts) (*ConbaseTestLogIterator, error) {

	logs, sub, err := _ConbaseTest.contract.FilterLogs(opts, "log")
	if err != nil {
		return nil, err
	}
	return &ConbaseTestLogIterator{contract: _ConbaseTest.contract, event: "log", logs: logs, sub: sub}, nil
}

// WatchLog is a free log subscription operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_ConbaseTest *ConbaseTestFilterer) WatchLog(opts *bind.WatchOpts, sink chan<- *ConbaseTestLog) (event.Subscription, error) {

	logs, sub, err := _ConbaseTest.contract.WatchLogs(opts, "log")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ConbaseTestLog)
				if err := _ConbaseTest.contract.UnpackLog(event, "log", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLog is a log parse operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_ConbaseTest *ConbaseTestFilterer) ParseLog(log types.Log) (*ConbaseTestLog, error) {
	event := new(ConbaseTestLog)
	if err := _ConbaseTest.contract.UnpackLog(event, "log", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ConbaseTestLogAddressIterator is returned from FilterLogAddress and is used to iterate over the raw logs and unpacked data for LogAddress events raised by the ConbaseTest contract.
type ConbaseTestLogAddressIterator struct {
	Event *ConbaseTestLogAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ConbaseTestLogAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ConbaseTestLogAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ConbaseTestLogAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ConbaseTestLogAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ConbaseTestLogAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ConbaseTestLogAddress represents a LogAddress event raised by the ConbaseTest contract.
type ConbaseTestLogAddress struct {
	Arg0 common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogAddress is a free log retrieval operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_ConbaseTest *ConbaseTestFilterer) FilterLogAddress(opts *bind.FilterOpts) (*ConbaseTestLogAddressIterator, error) {

	logs, sub, err := _ConbaseTest.contract.FilterLogs(opts, "log_address")
	if err != nil {
		return nil, err
	}
	return &ConbaseTestLogAddressIterator{contract: _ConbaseTest.contract, event: "log_address", logs: logs, sub: sub}, nil
}

// WatchLogAddress is a free log subscription operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_ConbaseTest *ConbaseTestFilterer) WatchLogAddress(opts *bind.WatchOpts, sink chan<- *ConbaseTestLogAddress) (event.Subscription, error) {

	logs, sub, err := _ConbaseTest.contract.WatchLogs(opts, "log_address")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ConbaseTestLogAddress)
				if err := _ConbaseTest.contract.UnpackLog(event, "log_address", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogAddress is a log parse operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_ConbaseTest *ConbaseTestFilterer) ParseLogAddress(log types.Log) (*ConbaseTestLogAddress, error) {
	event := new(ConbaseTestLogAddress)
	if err := _ConbaseTest.contract.UnpackLog(event, "log_address", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ConbaseTestLogBytesIterator is returned from FilterLogBytes and is used to iterate over the raw logs and unpacked data for LogBytes events raised by the ConbaseTest contract.
type ConbaseTestLogBytesIterator struct {
	Event *ConbaseTestLogBytes // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ConbaseTestLogBytesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ConbaseTestLogBytes)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ConbaseTestLogBytes)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ConbaseTestLogBytesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ConbaseTestLogBytesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ConbaseTestLogBytes represents a LogBytes event raised by the ConbaseTest contract.
type ConbaseTestLogBytes struct {
	Arg0 []byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogBytes is a free log retrieval operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_ConbaseTest *ConbaseTestFilterer) FilterLogBytes(opts *bind.FilterOpts) (*ConbaseTestLogBytesIterator, error) {

	logs, sub, err := _ConbaseTest.contract.FilterLogs(opts, "log_bytes")
	if err != nil {
		return nil, err
	}
	return &ConbaseTestLogBytesIterator{contract: _ConbaseTest.contract, event: "log_bytes", logs: logs, sub: sub}, nil
}

// WatchLogBytes is a free log subscription operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_ConbaseTest *ConbaseTestFilterer) WatchLogBytes(opts *bind.WatchOpts, sink chan<- *ConbaseTestLogBytes) (event.Subscription, error) {

	logs, sub, err := _ConbaseTest.contract.WatchLogs(opts, "log_bytes")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ConbaseTestLogBytes)
				if err := _ConbaseTest.contract.UnpackLog(event, "log_bytes", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes is a log parse operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_ConbaseTest *ConbaseTestFilterer) ParseLogBytes(log types.Log) (*ConbaseTestLogBytes, error) {
	event := new(ConbaseTestLogBytes)
	if err := _ConbaseTest.contract.UnpackLog(event, "log_bytes", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ConbaseTestLogBytes32Iterator is returned from FilterLogBytes32 and is used to iterate over the raw logs and unpacked data for LogBytes32 events raised by the ConbaseTest contract.
type ConbaseTestLogBytes32Iterator struct {
	Event *ConbaseTestLogBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ConbaseTestLogBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ConbaseTestLogBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ConbaseTestLogBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ConbaseTestLogBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ConbaseTestLogBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ConbaseTestLogBytes32 represents a LogBytes32 event raised by the ConbaseTest contract.
type ConbaseTestLogBytes32 struct {
	Arg0 [32]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogBytes32 is a free log retrieval operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_ConbaseTest *ConbaseTestFilterer) FilterLogBytes32(opts *bind.FilterOpts) (*ConbaseTestLogBytes32Iterator, error) {

	logs, sub, err := _ConbaseTest.contract.FilterLogs(opts, "log_bytes32")
	if err != nil {
		return nil, err
	}
	return &ConbaseTestLogBytes32Iterator{contract: _ConbaseTest.contract, event: "log_bytes32", logs: logs, sub: sub}, nil
}

// WatchLogBytes32 is a free log subscription operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_ConbaseTest *ConbaseTestFilterer) WatchLogBytes32(opts *bind.WatchOpts, sink chan<- *ConbaseTestLogBytes32) (event.Subscription, error) {

	logs, sub, err := _ConbaseTest.contract.WatchLogs(opts, "log_bytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ConbaseTestLogBytes32)
				if err := _ConbaseTest.contract.UnpackLog(event, "log_bytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes32 is a log parse operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_ConbaseTest *ConbaseTestFilterer) ParseLogBytes32(log types.Log) (*ConbaseTestLogBytes32, error) {
	event := new(ConbaseTestLogBytes32)
	if err := _ConbaseTest.contract.UnpackLog(event, "log_bytes32", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ConbaseTestLogIntIterator is returned from FilterLogInt and is used to iterate over the raw logs and unpacked data for LogInt events raised by the ConbaseTest contract.
type ConbaseTestLogIntIterator struct {
	Event *ConbaseTestLogInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ConbaseTestLogIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ConbaseTestLogInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ConbaseTestLogInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ConbaseTestLogIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ConbaseTestLogIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ConbaseTestLogInt represents a LogInt event raised by the ConbaseTest contract.
type ConbaseTestLogInt struct {
	Arg0 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogInt is a free log retrieval operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_ConbaseTest *ConbaseTestFilterer) FilterLogInt(opts *bind.FilterOpts) (*ConbaseTestLogIntIterator, error) {

	logs, sub, err := _ConbaseTest.contract.FilterLogs(opts, "log_int")
	if err != nil {
		return nil, err
	}
	return &ConbaseTestLogIntIterator{contract: _ConbaseTest.contract, event: "log_int", logs: logs, sub: sub}, nil
}

// WatchLogInt is a free log subscription operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_ConbaseTest *ConbaseTestFilterer) WatchLogInt(opts *bind.WatchOpts, sink chan<- *ConbaseTestLogInt) (event.Subscription, error) {

	logs, sub, err := _ConbaseTest.contract.WatchLogs(opts, "log_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ConbaseTestLogInt)
				if err := _ConbaseTest.contract.UnpackLog(event, "log_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogInt is a log parse operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_ConbaseTest *ConbaseTestFilterer) ParseLogInt(log types.Log) (*ConbaseTestLogInt, error) {
	event := new(ConbaseTestLogInt)
	if err := _ConbaseTest.contract.UnpackLog(event, "log_int", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ConbaseTestLogNamedAddressIterator is returned from FilterLogNamedAddress and is used to iterate over the raw logs and unpacked data for LogNamedAddress events raised by the ConbaseTest contract.
type ConbaseTestLogNamedAddressIterator struct {
	Event *ConbaseTestLogNamedAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ConbaseTestLogNamedAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ConbaseTestLogNamedAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ConbaseTestLogNamedAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ConbaseTestLogNamedAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ConbaseTestLogNamedAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ConbaseTestLogNamedAddress represents a LogNamedAddress event raised by the ConbaseTest contract.
type ConbaseTestLogNamedAddress struct {
	Key string
	Val common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedAddress is a free log retrieval operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_ConbaseTest *ConbaseTestFilterer) FilterLogNamedAddress(opts *bind.FilterOpts) (*ConbaseTestLogNamedAddressIterator, error) {

	logs, sub, err := _ConbaseTest.contract.FilterLogs(opts, "log_named_address")
	if err != nil {
		return nil, err
	}
	return &ConbaseTestLogNamedAddressIterator{contract: _ConbaseTest.contract, event: "log_named_address", logs: logs, sub: sub}, nil
}

// WatchLogNamedAddress is a free log subscription operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_ConbaseTest *ConbaseTestFilterer) WatchLogNamedAddress(opts *bind.WatchOpts, sink chan<- *ConbaseTestLogNamedAddress) (event.Subscription, error) {

	logs, sub, err := _ConbaseTest.contract.WatchLogs(opts, "log_named_address")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ConbaseTestLogNamedAddress)
				if err := _ConbaseTest.contract.UnpackLog(event, "log_named_address", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedAddress is a log parse operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_ConbaseTest *ConbaseTestFilterer) ParseLogNamedAddress(log types.Log) (*ConbaseTestLogNamedAddress, error) {
	event := new(ConbaseTestLogNamedAddress)
	if err := _ConbaseTest.contract.UnpackLog(event, "log_named_address", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ConbaseTestLogNamedBytesIterator is returned from FilterLogNamedBytes and is used to iterate over the raw logs and unpacked data for LogNamedBytes events raised by the ConbaseTest contract.
type ConbaseTestLogNamedBytesIterator struct {
	Event *ConbaseTestLogNamedBytes // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ConbaseTestLogNamedBytesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ConbaseTestLogNamedBytes)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ConbaseTestLogNamedBytes)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ConbaseTestLogNamedBytesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ConbaseTestLogNamedBytesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ConbaseTestLogNamedBytes represents a LogNamedBytes event raised by the ConbaseTest contract.
type ConbaseTestLogNamedBytes struct {
	Key string
	Val []byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedBytes is a free log retrieval operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_ConbaseTest *ConbaseTestFilterer) FilterLogNamedBytes(opts *bind.FilterOpts) (*ConbaseTestLogNamedBytesIterator, error) {

	logs, sub, err := _ConbaseTest.contract.FilterLogs(opts, "log_named_bytes")
	if err != nil {
		return nil, err
	}
	return &ConbaseTestLogNamedBytesIterator{contract: _ConbaseTest.contract, event: "log_named_bytes", logs: logs, sub: sub}, nil
}

// WatchLogNamedBytes is a free log subscription operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_ConbaseTest *ConbaseTestFilterer) WatchLogNamedBytes(opts *bind.WatchOpts, sink chan<- *ConbaseTestLogNamedBytes) (event.Subscription, error) {

	logs, sub, err := _ConbaseTest.contract.WatchLogs(opts, "log_named_bytes")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ConbaseTestLogNamedBytes)
				if err := _ConbaseTest.contract.UnpackLog(event, "log_named_bytes", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedBytes is a log parse operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_ConbaseTest *ConbaseTestFilterer) ParseLogNamedBytes(log types.Log) (*ConbaseTestLogNamedBytes, error) {
	event := new(ConbaseTestLogNamedBytes)
	if err := _ConbaseTest.contract.UnpackLog(event, "log_named_bytes", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ConbaseTestLogNamedBytes32Iterator is returned from FilterLogNamedBytes32 and is used to iterate over the raw logs and unpacked data for LogNamedBytes32 events raised by the ConbaseTest contract.
type ConbaseTestLogNamedBytes32Iterator struct {
	Event *ConbaseTestLogNamedBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ConbaseTestLogNamedBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ConbaseTestLogNamedBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ConbaseTestLogNamedBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ConbaseTestLogNamedBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ConbaseTestLogNamedBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ConbaseTestLogNamedBytes32 represents a LogNamedBytes32 event raised by the ConbaseTest contract.
type ConbaseTestLogNamedBytes32 struct {
	Key string
	Val [32]byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedBytes32 is a free log retrieval operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_ConbaseTest *ConbaseTestFilterer) FilterLogNamedBytes32(opts *bind.FilterOpts) (*ConbaseTestLogNamedBytes32Iterator, error) {

	logs, sub, err := _ConbaseTest.contract.FilterLogs(opts, "log_named_bytes32")
	if err != nil {
		return nil, err
	}
	return &ConbaseTestLogNamedBytes32Iterator{contract: _ConbaseTest.contract, event: "log_named_bytes32", logs: logs, sub: sub}, nil
}

// WatchLogNamedBytes32 is a free log subscription operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_ConbaseTest *ConbaseTestFilterer) WatchLogNamedBytes32(opts *bind.WatchOpts, sink chan<- *ConbaseTestLogNamedBytes32) (event.Subscription, error) {

	logs, sub, err := _ConbaseTest.contract.WatchLogs(opts, "log_named_bytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ConbaseTestLogNamedBytes32)
				if err := _ConbaseTest.contract.UnpackLog(event, "log_named_bytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedBytes32 is a log parse operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_ConbaseTest *ConbaseTestFilterer) ParseLogNamedBytes32(log types.Log) (*ConbaseTestLogNamedBytes32, error) {
	event := new(ConbaseTestLogNamedBytes32)
	if err := _ConbaseTest.contract.UnpackLog(event, "log_named_bytes32", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ConbaseTestLogNamedDecimalIntIterator is returned from FilterLogNamedDecimalInt and is used to iterate over the raw logs and unpacked data for LogNamedDecimalInt events raised by the ConbaseTest contract.
type ConbaseTestLogNamedDecimalIntIterator struct {
	Event *ConbaseTestLogNamedDecimalInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ConbaseTestLogNamedDecimalIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ConbaseTestLogNamedDecimalInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ConbaseTestLogNamedDecimalInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ConbaseTestLogNamedDecimalIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ConbaseTestLogNamedDecimalIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ConbaseTestLogNamedDecimalInt represents a LogNamedDecimalInt event raised by the ConbaseTest contract.
type ConbaseTestLogNamedDecimalInt struct {
	Key      string
	Val      *big.Int
	Decimals *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogNamedDecimalInt is a free log retrieval operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_ConbaseTest *ConbaseTestFilterer) FilterLogNamedDecimalInt(opts *bind.FilterOpts) (*ConbaseTestLogNamedDecimalIntIterator, error) {

	logs, sub, err := _ConbaseTest.contract.FilterLogs(opts, "log_named_decimal_int")
	if err != nil {
		return nil, err
	}
	return &ConbaseTestLogNamedDecimalIntIterator{contract: _ConbaseTest.contract, event: "log_named_decimal_int", logs: logs, sub: sub}, nil
}

// WatchLogNamedDecimalInt is a free log subscription operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_ConbaseTest *ConbaseTestFilterer) WatchLogNamedDecimalInt(opts *bind.WatchOpts, sink chan<- *ConbaseTestLogNamedDecimalInt) (event.Subscription, error) {

	logs, sub, err := _ConbaseTest.contract.WatchLogs(opts, "log_named_decimal_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ConbaseTestLogNamedDecimalInt)
				if err := _ConbaseTest.contract.UnpackLog(event, "log_named_decimal_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedDecimalInt is a log parse operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_ConbaseTest *ConbaseTestFilterer) ParseLogNamedDecimalInt(log types.Log) (*ConbaseTestLogNamedDecimalInt, error) {
	event := new(ConbaseTestLogNamedDecimalInt)
	if err := _ConbaseTest.contract.UnpackLog(event, "log_named_decimal_int", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ConbaseTestLogNamedDecimalUintIterator is returned from FilterLogNamedDecimalUint and is used to iterate over the raw logs and unpacked data for LogNamedDecimalUint events raised by the ConbaseTest contract.
type ConbaseTestLogNamedDecimalUintIterator struct {
	Event *ConbaseTestLogNamedDecimalUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ConbaseTestLogNamedDecimalUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ConbaseTestLogNamedDecimalUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ConbaseTestLogNamedDecimalUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ConbaseTestLogNamedDecimalUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ConbaseTestLogNamedDecimalUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ConbaseTestLogNamedDecimalUint represents a LogNamedDecimalUint event raised by the ConbaseTest contract.
type ConbaseTestLogNamedDecimalUint struct {
	Key      string
	Val      *big.Int
	Decimals *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogNamedDecimalUint is a free log retrieval operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_ConbaseTest *ConbaseTestFilterer) FilterLogNamedDecimalUint(opts *bind.FilterOpts) (*ConbaseTestLogNamedDecimalUintIterator, error) {

	logs, sub, err := _ConbaseTest.contract.FilterLogs(opts, "log_named_decimal_uint")
	if err != nil {
		return nil, err
	}
	return &ConbaseTestLogNamedDecimalUintIterator{contract: _ConbaseTest.contract, event: "log_named_decimal_uint", logs: logs, sub: sub}, nil
}

// WatchLogNamedDecimalUint is a free log subscription operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_ConbaseTest *ConbaseTestFilterer) WatchLogNamedDecimalUint(opts *bind.WatchOpts, sink chan<- *ConbaseTestLogNamedDecimalUint) (event.Subscription, error) {

	logs, sub, err := _ConbaseTest.contract.WatchLogs(opts, "log_named_decimal_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ConbaseTestLogNamedDecimalUint)
				if err := _ConbaseTest.contract.UnpackLog(event, "log_named_decimal_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedDecimalUint is a log parse operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_ConbaseTest *ConbaseTestFilterer) ParseLogNamedDecimalUint(log types.Log) (*ConbaseTestLogNamedDecimalUint, error) {
	event := new(ConbaseTestLogNamedDecimalUint)
	if err := _ConbaseTest.contract.UnpackLog(event, "log_named_decimal_uint", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ConbaseTestLogNamedIntIterator is returned from FilterLogNamedInt and is used to iterate over the raw logs and unpacked data for LogNamedInt events raised by the ConbaseTest contract.
type ConbaseTestLogNamedIntIterator struct {
	Event *ConbaseTestLogNamedInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ConbaseTestLogNamedIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ConbaseTestLogNamedInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ConbaseTestLogNamedInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ConbaseTestLogNamedIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ConbaseTestLogNamedIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ConbaseTestLogNamedInt represents a LogNamedInt event raised by the ConbaseTest contract.
type ConbaseTestLogNamedInt struct {
	Key string
	Val *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedInt is a free log retrieval operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_ConbaseTest *ConbaseTestFilterer) FilterLogNamedInt(opts *bind.FilterOpts) (*ConbaseTestLogNamedIntIterator, error) {

	logs, sub, err := _ConbaseTest.contract.FilterLogs(opts, "log_named_int")
	if err != nil {
		return nil, err
	}
	return &ConbaseTestLogNamedIntIterator{contract: _ConbaseTest.contract, event: "log_named_int", logs: logs, sub: sub}, nil
}

// WatchLogNamedInt is a free log subscription operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_ConbaseTest *ConbaseTestFilterer) WatchLogNamedInt(opts *bind.WatchOpts, sink chan<- *ConbaseTestLogNamedInt) (event.Subscription, error) {

	logs, sub, err := _ConbaseTest.contract.WatchLogs(opts, "log_named_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ConbaseTestLogNamedInt)
				if err := _ConbaseTest.contract.UnpackLog(event, "log_named_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedInt is a log parse operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_ConbaseTest *ConbaseTestFilterer) ParseLogNamedInt(log types.Log) (*ConbaseTestLogNamedInt, error) {
	event := new(ConbaseTestLogNamedInt)
	if err := _ConbaseTest.contract.UnpackLog(event, "log_named_int", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ConbaseTestLogNamedStringIterator is returned from FilterLogNamedString and is used to iterate over the raw logs and unpacked data for LogNamedString events raised by the ConbaseTest contract.
type ConbaseTestLogNamedStringIterator struct {
	Event *ConbaseTestLogNamedString // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ConbaseTestLogNamedStringIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ConbaseTestLogNamedString)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ConbaseTestLogNamedString)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ConbaseTestLogNamedStringIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ConbaseTestLogNamedStringIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ConbaseTestLogNamedString represents a LogNamedString event raised by the ConbaseTest contract.
type ConbaseTestLogNamedString struct {
	Key string
	Val string
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedString is a free log retrieval operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_ConbaseTest *ConbaseTestFilterer) FilterLogNamedString(opts *bind.FilterOpts) (*ConbaseTestLogNamedStringIterator, error) {

	logs, sub, err := _ConbaseTest.contract.FilterLogs(opts, "log_named_string")
	if err != nil {
		return nil, err
	}
	return &ConbaseTestLogNamedStringIterator{contract: _ConbaseTest.contract, event: "log_named_string", logs: logs, sub: sub}, nil
}

// WatchLogNamedString is a free log subscription operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_ConbaseTest *ConbaseTestFilterer) WatchLogNamedString(opts *bind.WatchOpts, sink chan<- *ConbaseTestLogNamedString) (event.Subscription, error) {

	logs, sub, err := _ConbaseTest.contract.WatchLogs(opts, "log_named_string")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ConbaseTestLogNamedString)
				if err := _ConbaseTest.contract.UnpackLog(event, "log_named_string", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedString is a log parse operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_ConbaseTest *ConbaseTestFilterer) ParseLogNamedString(log types.Log) (*ConbaseTestLogNamedString, error) {
	event := new(ConbaseTestLogNamedString)
	if err := _ConbaseTest.contract.UnpackLog(event, "log_named_string", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ConbaseTestLogNamedUintIterator is returned from FilterLogNamedUint and is used to iterate over the raw logs and unpacked data for LogNamedUint events raised by the ConbaseTest contract.
type ConbaseTestLogNamedUintIterator struct {
	Event *ConbaseTestLogNamedUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ConbaseTestLogNamedUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ConbaseTestLogNamedUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ConbaseTestLogNamedUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ConbaseTestLogNamedUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ConbaseTestLogNamedUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ConbaseTestLogNamedUint represents a LogNamedUint event raised by the ConbaseTest contract.
type ConbaseTestLogNamedUint struct {
	Key string
	Val *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedUint is a free log retrieval operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_ConbaseTest *ConbaseTestFilterer) FilterLogNamedUint(opts *bind.FilterOpts) (*ConbaseTestLogNamedUintIterator, error) {

	logs, sub, err := _ConbaseTest.contract.FilterLogs(opts, "log_named_uint")
	if err != nil {
		return nil, err
	}
	return &ConbaseTestLogNamedUintIterator{contract: _ConbaseTest.contract, event: "log_named_uint", logs: logs, sub: sub}, nil
}

// WatchLogNamedUint is a free log subscription operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_ConbaseTest *ConbaseTestFilterer) WatchLogNamedUint(opts *bind.WatchOpts, sink chan<- *ConbaseTestLogNamedUint) (event.Subscription, error) {

	logs, sub, err := _ConbaseTest.contract.WatchLogs(opts, "log_named_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ConbaseTestLogNamedUint)
				if err := _ConbaseTest.contract.UnpackLog(event, "log_named_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedUint is a log parse operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_ConbaseTest *ConbaseTestFilterer) ParseLogNamedUint(log types.Log) (*ConbaseTestLogNamedUint, error) {
	event := new(ConbaseTestLogNamedUint)
	if err := _ConbaseTest.contract.UnpackLog(event, "log_named_uint", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ConbaseTestLogStringIterator is returned from FilterLogString and is used to iterate over the raw logs and unpacked data for LogString events raised by the ConbaseTest contract.
type ConbaseTestLogStringIterator struct {
	Event *ConbaseTestLogString // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ConbaseTestLogStringIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ConbaseTestLogString)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ConbaseTestLogString)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ConbaseTestLogStringIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ConbaseTestLogStringIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ConbaseTestLogString represents a LogString event raised by the ConbaseTest contract.
type ConbaseTestLogString struct {
	Arg0 string
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogString is a free log retrieval operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_ConbaseTest *ConbaseTestFilterer) FilterLogString(opts *bind.FilterOpts) (*ConbaseTestLogStringIterator, error) {

	logs, sub, err := _ConbaseTest.contract.FilterLogs(opts, "log_string")
	if err != nil {
		return nil, err
	}
	return &ConbaseTestLogStringIterator{contract: _ConbaseTest.contract, event: "log_string", logs: logs, sub: sub}, nil
}

// WatchLogString is a free log subscription operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_ConbaseTest *ConbaseTestFilterer) WatchLogString(opts *bind.WatchOpts, sink chan<- *ConbaseTestLogString) (event.Subscription, error) {

	logs, sub, err := _ConbaseTest.contract.WatchLogs(opts, "log_string")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ConbaseTestLogString)
				if err := _ConbaseTest.contract.UnpackLog(event, "log_string", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogString is a log parse operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_ConbaseTest *ConbaseTestFilterer) ParseLogString(log types.Log) (*ConbaseTestLogString, error) {
	event := new(ConbaseTestLogString)
	if err := _ConbaseTest.contract.UnpackLog(event, "log_string", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ConbaseTestLogUintIterator is returned from FilterLogUint and is used to iterate over the raw logs and unpacked data for LogUint events raised by the ConbaseTest contract.
type ConbaseTestLogUintIterator struct {
	Event *ConbaseTestLogUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ConbaseTestLogUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ConbaseTestLogUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ConbaseTestLogUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ConbaseTestLogUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ConbaseTestLogUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ConbaseTestLogUint represents a LogUint event raised by the ConbaseTest contract.
type ConbaseTestLogUint struct {
	Arg0 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogUint is a free log retrieval operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_ConbaseTest *ConbaseTestFilterer) FilterLogUint(opts *bind.FilterOpts) (*ConbaseTestLogUintIterator, error) {

	logs, sub, err := _ConbaseTest.contract.FilterLogs(opts, "log_uint")
	if err != nil {
		return nil, err
	}
	return &ConbaseTestLogUintIterator{contract: _ConbaseTest.contract, event: "log_uint", logs: logs, sub: sub}, nil
}

// WatchLogUint is a free log subscription operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_ConbaseTest *ConbaseTestFilterer) WatchLogUint(opts *bind.WatchOpts, sink chan<- *ConbaseTestLogUint) (event.Subscription, error) {

	logs, sub, err := _ConbaseTest.contract.WatchLogs(opts, "log_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ConbaseTestLogUint)
				if err := _ConbaseTest.contract.UnpackLog(event, "log_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogUint is a log parse operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_ConbaseTest *ConbaseTestFilterer) ParseLogUint(log types.Log) (*ConbaseTestLogUint, error) {
	event := new(ConbaseTestLogUint)
	if err := _ConbaseTest.contract.UnpackLog(event, "log_uint", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ConbaseTestLogsIterator is returned from FilterLogs and is used to iterate over the raw logs and unpacked data for Logs events raised by the ConbaseTest contract.
type ConbaseTestLogsIterator struct {
	Event *ConbaseTestLogs // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ConbaseTestLogsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ConbaseTestLogs)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ConbaseTestLogs)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ConbaseTestLogsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ConbaseTestLogsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ConbaseTestLogs represents a Logs event raised by the ConbaseTest contract.
type ConbaseTestLogs struct {
	Arg0 []byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogs is a free log retrieval operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_ConbaseTest *ConbaseTestFilterer) FilterLogs(opts *bind.FilterOpts) (*ConbaseTestLogsIterator, error) {

	logs, sub, err := _ConbaseTest.contract.FilterLogs(opts, "logs")
	if err != nil {
		return nil, err
	}
	return &ConbaseTestLogsIterator{contract: _ConbaseTest.contract, event: "logs", logs: logs, sub: sub}, nil
}

// WatchLogs is a free log subscription operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_ConbaseTest *ConbaseTestFilterer) WatchLogs(opts *bind.WatchOpts, sink chan<- *ConbaseTestLogs) (event.Subscription, error) {

	logs, sub, err := _ConbaseTest.contract.WatchLogs(opts, "logs")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ConbaseTestLogs)
				if err := _ConbaseTest.contract.UnpackLog(event, "logs", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogs is a log parse operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_ConbaseTest *ConbaseTestFilterer) ParseLogs(log types.Log) (*ConbaseTestLogs, error) {
	event := new(ConbaseTestLogs)
	if err := _ConbaseTest.contract.UnpackLog(event, "logs", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ConstantsABI is the input ABI used to generate the binding from.
const ConstantsABI = "[]"

// ConstantsBin is the compiled bytecode used for deploying new contracts.
var ConstantsBin = "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220e7b317941ab1f239f9aec8807eb84f1f80aa277add0263ce1f9c0475401eaaa564736f6c63430007060033"

// DeployConstants deploys a new Ethereum contract, binding an instance of Constants to it.
func DeployConstants(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Constants, error) {
	parsed, err := abi.JSON(strings.NewReader(ConstantsABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ConstantsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Constants{ConstantsCaller: ConstantsCaller{contract: contract}, ConstantsTransactor: ConstantsTransactor{contract: contract}, ConstantsFilterer: ConstantsFilterer{contract: contract}}, nil
}

// Constants is an auto generated Go binding around an Ethereum contract.
type Constants struct {
	ConstantsCaller     // Read-only binding to the contract
	ConstantsTransactor // Write-only binding to the contract
	ConstantsFilterer   // Log filterer for contract events
}

// ConstantsCaller is an auto generated read-only Go binding around an Ethereum contract.
type ConstantsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ConstantsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ConstantsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ConstantsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ConstantsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ConstantsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ConstantsSession struct {
	Contract     *Constants        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ConstantsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ConstantsCallerSession struct {
	Contract *ConstantsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// ConstantsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ConstantsTransactorSession struct {
	Contract     *ConstantsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// ConstantsRaw is an auto generated low-level Go binding around an Ethereum contract.
type ConstantsRaw struct {
	Contract *Constants // Generic contract binding to access the raw methods on
}

// ConstantsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ConstantsCallerRaw struct {
	Contract *ConstantsCaller // Generic read-only contract binding to access the raw methods on
}

// ConstantsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ConstantsTransactorRaw struct {
	Contract *ConstantsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewConstants creates a new instance of Constants, bound to a specific deployed contract.
func NewConstants(address common.Address, backend bind.ContractBackend) (*Constants, error) {
	contract, err := bindConstants(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Constants{ConstantsCaller: ConstantsCaller{contract: contract}, ConstantsTransactor: ConstantsTransactor{contract: contract}, ConstantsFilterer: ConstantsFilterer{contract: contract}}, nil
}

// NewConstantsCaller creates a new read-only instance of Constants, bound to a specific deployed contract.
func NewConstantsCaller(address common.Address, caller bind.ContractCaller) (*ConstantsCaller, error) {
	contract, err := bindConstants(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ConstantsCaller{contract: contract}, nil
}

// NewConstantsTransactor creates a new write-only instance of Constants, bound to a specific deployed contract.
func NewConstantsTransactor(address common.Address, transactor bind.ContractTransactor) (*ConstantsTransactor, error) {
	contract, err := bindConstants(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ConstantsTransactor{contract: contract}, nil
}

// NewConstantsFilterer creates a new log filterer instance of Constants, bound to a specific deployed contract.
func NewConstantsFilterer(address common.Address, filterer bind.ContractFilterer) (*ConstantsFilterer, error) {
	contract, err := bindConstants(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ConstantsFilterer{contract: contract}, nil
}

// bindConstants binds a generic wrapper to an already deployed contract.
func bindConstants(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ConstantsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Constants *ConstantsRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Constants.Contract.ConstantsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Constants *ConstantsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Constants.Contract.ConstantsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Constants *ConstantsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Constants.Contract.ConstantsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Constants *ConstantsCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Constants.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Constants *ConstantsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Constants.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Constants *ConstantsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Constants.Contract.contract.Transact(opts, method, params...)
}

// CryptoABI is the input ABI used to generate the binding from.
const CryptoABI = "[{\"inputs\":[{\"internalType\":\"uint256[2][]\",\"name\":\"sigs\",\"type\":\"uint256[2][]\"},{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"invArray\",\"type\":\"uint256[]\"}],\"name\":\"AggregateSignatures\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"HashToG1\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"h\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"privK\",\"type\":\"uint256\"}],\"name\":\"Sign\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"sig\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"uint256[2]\",\"name\":\"sig\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"pubK\",\"type\":\"uint256[4]\"}],\"name\":\"Verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"v\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"input\",\"type\":\"uint256[4]\"}],\"name\":\"bn128_add\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"result\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"point\",\"type\":\"uint256[2]\"}],\"name\":\"bn128_is_on_curve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"input\",\"type\":\"uint256[3]\"}],\"name\":\"bn128_multiply\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"result\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"honestIndices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"dishonestIndices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"checkIndices\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"validIndices\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"invArray\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"maxIndex\",\"type\":\"uint256\"}],\"name\":\"checkInverses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"x1\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y1\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"x2\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y2\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"proof\",\"type\":\"uint256[2]\"}],\"name\":\"dleq_verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"proof_is_valid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"input\",\"type\":\"uint256[2]\"}],\"name\":\"safeSigningPoint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]"

// CryptoBin is the compiled bytecode used for deploying new contracts.
var CryptoBin = "0x608060405234801561001057600080fd5b506129f3806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c806396d95a6f1161007157806396d95a6f14610606578063e480a92e14610681578063e664725b14610759578063e81ee0e3146107fa578063f022e0611461097a578063f4d7d33d14610bdc576100a9565b806306367587146100ae5780636bdf477c1461020157806380f4a9221461030257806382688f141461046e57806395add79c1461050f575b600080fd5b6101e9600480360360e08110156100c457600080fd5b81019080803590602001906401000000008111156100e157600080fd5b8201836020820111156100f357600080fd5b8035906020019184600183028401116401000000008311171561011557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f820116905080830192505050505050919291929080608001906004806020026040519081016040528092919082600460200280828437600081840152601f19601f8201169050808301925050505050509192919290505050610c57565b60405180821515815260200191505060405180910390f35b6102c46004803603604081101561021757600080fd5b810190808035906020019064010000000081111561023457600080fd5b82018360208201111561024657600080fd5b8035906020019184600183028401116401000000008311171561026857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190505050610dd8565b6040518082600260200280838360005b838110156102ef5780820151818401526020810190506102d4565b5050505090500191505060405180910390f35b6104566004803603606081101561031857600080fd5b810190808035906020019064010000000081111561033557600080fd5b82018360208201111561034757600080fd5b8035906020019184602083028401116401000000008311171561036957600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156103c957600080fd5b8201836020820111156103db57600080fd5b803590602001918460208302840111640100000000831117156103fd57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190505050610e41565b60405180821515815260200191505060405180910390f35b6104d16004803603606081101561048457600080fd5b8101908080606001906003806020026040519081016040528092919082600360200280828437600081840152601f19601f8201169050808301925050505050509192919290505050610f5e565b6040518082600260200280838360005b838110156104fc5780820151818401526020810190506104e1565b5050505090500191505060405180910390f35b6105c86004803603602081101561052557600080fd5b810190808035906020019064010000000081111561054257600080fd5b82018360208201111561055457600080fd5b8035906020019184600183028401116401000000008311171561057657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610fd2565b6040518082600260200280838360005b838110156105f35780820151818401526020810190506105d8565b5050505090500191505060405180910390f35b6106696004803603604081101561061c57600080fd5b8101908080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f8201169050808301925050505050509192919290505050611156565b60405180821515815260200191505060405180910390f35b6107416004803603604081101561069757600080fd5b81019080803590602001906401000000008111156106b457600080fd5b8201836020820111156106c657600080fd5b803590602001918460208302840111640100000000831117156106e857600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803590602001909291905050506111a0565b60405180821515815260200191505060405180910390f35b6107bc6004803603608081101561076f57600080fd5b8101908080608001906004806020026040519081016040528092919082600460200280828437600081840152601f19601f8201169050808301925050505050509192919290505050611287565b6040518082600260200280838360005b838110156107e75780820151818401526020810190506107cc565b5050505090500191505060405180910390f35b610962600480360361014081101561081157600080fd5b8101908080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f820116905080830192505050505050919291929080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f820116905080830192505050505050919291929080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f820116905080830192505050505050919291929080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f820116905080830192505050505050919291929080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f8201169050808301925050505050509192919290505050611318565b60405180821515815260200191505060405180910390f35b610b9e6004803603608081101561099057600080fd5b81019080803590602001906401000000008111156109ad57600080fd5b8201836020820111156109bf57600080fd5b803590602001918460408302840111640100000000831117156109e157600080fd5b9190808060200260200160405190810160405280939291908181526020016000905b82821015610a5a578484839050604002016002806020026040519081016040528092919082600260200280828437600081840152601f19601f82011690508083019250505050505081526020019060010190610a03565b5050505050919291929080359060200190640100000000811115610a7d57600080fd5b820183602082011115610a8f57600080fd5b80359060200191846020830284011164010000000083111715610ab157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019092919080359060200190640100000000811115610b1b57600080fd5b820183602082011115610b2d57600080fd5b80359060200191846020830284011164010000000083111715610b4f57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192905050506116d6565b6040518082600260200280838360005b83811015610bc9578082015181840152602081019050610bae565b5050505090500191505060405180910390f35b610c3f60048036036040811015610bf257600080fd5b8101908080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f8201169050808301925050505050509192919290505050611820565b60405180821515815260200191505060405180910390f35b6000610c616127a1565b610c6a85610fd2565b9050610dce60405180610180016040528086600060028110610c8857fe5b6020020151815260200186600160028110610c9f57fe5b602002015181526020017f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed81526020017f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec81526020017f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d815260200183600060028110610d4e57fe5b6020020151815260200183600160028110610d6557fe5b6020020151815260200185600060048110610d7c57fe5b6020020151815260200185600160048110610d9357fe5b6020020151815260200185600260048110610daa57fe5b6020020151815260200185600360048110610dc157fe5b602002015181525061192a565b9150509392505050565b610de06127a1565b610de86127a1565b610df184610fd2565b9050610e38604051806060016040528083600060028110610e0e57fe5b6020020151815260200183600160028110610e2557fe5b6020020151815260200185815250610f5e565b91505092915050565b6000600190506000806000808511610e5557fe5b6101008510610e6057fe5b600092505b8651831015610ed357868381518110610e7a57fe5b602002602001015190506000811480610e9257508481115b15610ea05760009350610ed3565b6000816001901b83161415610ebd57806001901b82179150610ec6565b60009350610ed3565b8280600101935050610e65565b83610ee057505050610f57565b600092505b8551831015610f5357858381518110610efa57fe5b602002602001015190506000811480610f1257508481115b15610f205760009350610f53565b6000816001901b83161415610f3d57806001901b82179150610f46565b60009350610f53565b8280600101935050610ee5565b5050505b9392505050565b610f666127a1565b60006040826060856007600019fa905080610fcc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602481526020018061299a6024913960400191505060405180910390fd5b50919050565b610fda6127a1565b6000610fef83600060f81b600160f81b6119d6565b9050600061100684600260f81b600360f81b6119d6565b9050600061101383611b9d565b9050600061102083611b9d565b905061108f60405180608001604052808460006002811061103d57fe5b602002015181526020018460016002811061105457fe5b602002015181526020018360006002811061106b57fe5b602002015181526020018360016002811061108257fe5b6020020151815250611287565b945061109a85611820565b6110ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001806127e66029913960400191505060405180910390fd5b6110f885611156565b61114d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180612907602a913960400191505060405180910390fd5b50505050919050565b6000808260006002811061116657fe5b60200201511480611188575060018260006002811061118157fe5b6020020151145b15611196576000905061119b565b600190505b919050565b6000806000806000600190508651600187031115611209576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252604481526020018061280f6044913960600191505060405180910390fd5b600193505b8584101561127a5786600185038151811061122557fe5b602002602001015192507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018061125757fe5b83850991506001821461126d576000905061127a565b838060010194505061120e565b8094505050505092915050565b61128f6127a1565b60006040826080856006600019fa905080611312576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f656c6c6970746963206375727665206164646974696f6e206661696c6564000081525060200191505060405180910390fd5b50919050565b60006113226127a1565b61132a6127a1565b61138060405180606001604052808a60006002811061134557fe5b602002015181526020018a60016002811061135c57fe5b602002015181526020018660016002811061137357fe5b6020020151815250610f5e565b91506113d860405180606001604052808960006002811061139d57fe5b60200201518152602001896001600281106113b457fe5b60200201518152602001866000600281106113cb57fe5b6020020151815250610f5e565b905060006114496040518060800160405280856000600281106113f757fe5b602002015181526020018560016002811061140e57fe5b602002015181526020018460006002811061142557fe5b602002015181526020018460016002811061143c57fe5b6020020151815250611287565b90506114a160405180606001604052808960006002811061146657fe5b602002015181526020018960016002811061147d57fe5b602002015181526020018760016002811061149457fe5b6020020151815250610f5e565b92506114f96040518060600160405280886000600281106114be57fe5b60200201518152602001886001600281106114d557fe5b60200201518152602001876000600281106114ec57fe5b6020020151815250610f5e565b9150600061156a60405180608001604052808660006002811061151857fe5b602002015181526020018660016002811061152f57fe5b602002015181526020018560006002811061154657fe5b602002015181526020018560016002811061155d57fe5b6020020151815250611287565b905060008a8a8a8a86866040516020018087600260200280838360005b838110156115a2578082015181840152602081019050611587565b5050505090500186600260200280838360005b838110156115d05780820151818401526020810190506115b5565b5050505090500185600260200280838360005b838110156115fe5780820151818401526020810190506115e3565b5050505090500184600260200280838360005b8381101561162c578082015181840152602081019050611611565b5050505090500183600260200280838360005b8381101561165a57808201518184015260208101905061163f565b5050505090500182600260200280838360005b8381101561168857808201518184015260208101905061166d565b5050505090500196505050505050506040516020818303038152906040528051906020012060001c9050866000600281106116bf57fe5b602002015181149550505050505095945050505050565b6116de6127a1565b8351855114611738576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260358152602001806129316035913960400191505060405180910390fd5b82855111611791576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603a815260200180612877603a913960400191505060405180910390fd5b600061179c85612168565b90506117a883826111a0565b6117fd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001806128b1602a913960400191505060405180910390fd5b6118056127a1565b611811878787876121ce565b90508092505050949350505050565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061184a57fe5b60037f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061187457fe5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061189c57fe5b856000600281106118a957fe5b6020020151866000600281106118bb57fe5b602002015109856000600281106118ce57fe5b602002015109087f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806118fd57fe5b8360016002811061190a57fe5b60200201518460016002811061191c57fe5b602002015109149050919050565b60006119346127c3565b6000602082610180866008600019fa9050806119b8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f656c6c69707469632063757276652070616972696e67206661696c656400000081525060200191505060405180910390fd5b6001826000600181106119c757fe5b60200201511492505050919050565b600080838560405160200180837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260010182805190602001908083835b60208310611a395780518252602082019150602081019050602083039250611a16565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040528051906020012060001c90506000838660405160200180837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260010182805190602001908083835b60208310611adc5780518252602082019150602081019050602083039250611ab9565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040528051906020012060001c90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611b4557fe5b817f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611b6e57fe5b7f0e0a77c19a07df2f666ea36f7879462c0a78eb28f5c70b3dd35d438dc58f0d9d850908925050509392505050565b611ba56127a1565b60008060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611bd257fe5b85860992507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611bff57fe5b6004840891507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611c2d57fe5b8284099050611c3b81612420565b905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611c6757fe5b83840990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611c9457fe5b83820990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611cc157fe5b848509935060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611cf057fe5b8577b3c4d79d41a91759a9e4c7e359b6b89eaec68e62effffffd0990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611d3557fe5b8382099050611d4381612474565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611d6d57fe5b7759e26bcea0d48bacd4f263f1acdb5c4f5763473177fffffe8208905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611db457fe5b600183089050611dc381612474565b905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611def57fe5b847f2042def740cbc01bd03583cf0100e593ba56470b9af68708d2c05d64905353850990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611e3c57fe5b8582099050611e4a81612474565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611e7457fe5b60018208905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611ea457fe5b84850990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611ed157fe5b84820990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611efe57fe5b6003820890506000611f0f826124b2565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611f3957fe5b84850991507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611f6657fe5b84830991507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780611f9357fe5b6003830891506000611fa4836124b2565b905060006001600460038403600186030281611fbc57fe5b0501905060006001821415611fd357879050611fe9565b6002821415611fe457869050611fe8565b8590505b5b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061201157fe5b81820994507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061203e57fe5b81860994507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061206b57fe5b60038608945061207a85612525565b945060006120878f612579565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806120b157fe5b81870995506120d3604051806040016040528084815260200188815250611820565b612128576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806128536024913960400191505060405180910390fd5b818e60006002811061213657fe5b602002018181525050858e60016002811061214d57fe5b60200201818152505050505050505050505050505050919050565b60008060008360008151811061217a57fe5b602002602001015190506000600190505b84518110156121c3578481815181106121a057fe5b60200260200101519250818311156121b6578291505b808060010191505061218b565b508092505050919050565b6121d66127a1565b8351855114612230576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c8152602001806128db602c913960400191505060405180910390fd5b6122386127a1565b60008160006002811061224757fe5b60200201818152505060008160016002811061225f57fe5b6020020181815250506000806000806000806122796127a1565b600096505b8b5187101561240d578b878151811061229357fe5b602002602001015194508a8711156122aa5761240d565b60019250600095505b8b51861015612334578b86815181106122c857fe5b602002602001015193508a8611156122df57612334565b848414156122ec57612327565b6122f784868c6125d0565b91507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018061232157fe5b82840992505b85806001019650506122b3565b8c878151811061234057fe5b6020026020010151905061238f60405180606001604052808360006002811061236557fe5b602002015181526020018360016002811061237c57fe5b6020020151815260200185815250610f5e565b90506123fe60405180608001604052808a6000600281106123ac57fe5b602002015181526020018a6001600281106123c357fe5b60200201518152602001836000600281106123da57fe5b60200201518152602001836001600281106123f157fe5b6020020151815250611287565b9750868060010197505061227e565b8798505050505050505050949350505050565b600061246d827f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd457f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476126ec565b9050919050565b60008082141561248757600090506124ad565b817f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd470390505b919050565b600080612500837f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea37f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476126ec565b90506000811461251a57600180821660020203915061251f565b600091505b50919050565b6000612572827f0c19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476126ec565b9050919050565b6000600190507f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea38211156125cb577f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4690505b919050565b60008284141561262b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260348152602001806129666034913960400191505060405180910390fd5b600084905060008486111561264457848603905061269a565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018061266c57fe5b60017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001038309915085850390505b8360018203815181106126a957fe5b602002602001015190507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001806126db57fe5b818309905080925050509392505050565b60008060405160208152602080820152602060408201528560608201528460808201528360a082015260208160c08360055afa9150805192505080612799576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f6d6f64756c6172206578706f6e656e74696174696f6e2066616c69656400000081525060200191505060405180910390fd5b509392505050565b6040518060400160405280600290602082028036833780820191505090505090565b604051806020016040528060019060208202803683378082019150509050509056fe496e76616c6964206861736820706f696e743a206e6f74206f6e20656c6c6970746963206375727665636865636b496e7665727365733a20696e73756666696369656e7420696e76657273657320666f722067726f7570207369676e61747572652063616c63756c6174696f6e496e76616c696420706f696e743a206e6f74206f6e20656c6c69707469632063757276654661696c656420746f206d656574207265717569726564206e756d626572206f66207369676e61747572657320666f72207468726573686f6c64696e76417272617920646f6573206e6f7420696e636c75646520636f727265637420696e7665727365734d69736d61746368206265747765656e20706f696e7473473120616e6420696e64696365732061727261797344616e6765726f7573206861736820706f696e743a206e6f74207361666520666f72207369676e696e674d69736d61746368206265747765656e206c656e677468206f66207369676e61747572657320616e6420696e6465782061727261794d7573742068617665206b20213d206a207768656e20636f6d707574696e6720526a207061727469616c20636f6e7374616e7473656c6c6970746963206375727665206d756c7469706c69636174696f6e206661696c6564a26469706673582212208220f0a7002427faf81ae90c4b4e1ba8141af5ffae6d75b6a6f185dcad7ebd1364736f6c63430007060033"

// DeployCrypto deploys a new Ethereum contract, binding an instance of Crypto to it.
func DeployCrypto(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Crypto, error) {
	parsed, err := abi.JSON(strings.NewReader(CryptoABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(CryptoBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Crypto{CryptoCaller: CryptoCaller{contract: contract}, CryptoTransactor: CryptoTransactor{contract: contract}, CryptoFilterer: CryptoFilterer{contract: contract}}, nil
}

// Crypto is an auto generated Go binding around an Ethereum contract.
type Crypto struct {
	CryptoCaller     // Read-only binding to the contract
	CryptoTransactor // Write-only binding to the contract
	CryptoFilterer   // Log filterer for contract events
}

// CryptoCaller is an auto generated read-only Go binding around an Ethereum contract.
type CryptoCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CryptoTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CryptoTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CryptoFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CryptoFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CryptoSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CryptoSession struct {
	Contract     *Crypto           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CryptoCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CryptoCallerSession struct {
	Contract *CryptoCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// CryptoTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CryptoTransactorSession struct {
	Contract     *CryptoTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CryptoRaw is an auto generated low-level Go binding around an Ethereum contract.
type CryptoRaw struct {
	Contract *Crypto // Generic contract binding to access the raw methods on
}

// CryptoCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CryptoCallerRaw struct {
	Contract *CryptoCaller // Generic read-only contract binding to access the raw methods on
}

// CryptoTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CryptoTransactorRaw struct {
	Contract *CryptoTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCrypto creates a new instance of Crypto, bound to a specific deployed contract.
func NewCrypto(address common.Address, backend bind.ContractBackend) (*Crypto, error) {
	contract, err := bindCrypto(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Crypto{CryptoCaller: CryptoCaller{contract: contract}, CryptoTransactor: CryptoTransactor{contract: contract}, CryptoFilterer: CryptoFilterer{contract: contract}}, nil
}

// NewCryptoCaller creates a new read-only instance of Crypto, bound to a specific deployed contract.
func NewCryptoCaller(address common.Address, caller bind.ContractCaller) (*CryptoCaller, error) {
	contract, err := bindCrypto(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CryptoCaller{contract: contract}, nil
}

// NewCryptoTransactor creates a new write-only instance of Crypto, bound to a specific deployed contract.
func NewCryptoTransactor(address common.Address, transactor bind.ContractTransactor) (*CryptoTransactor, error) {
	contract, err := bindCrypto(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CryptoTransactor{contract: contract}, nil
}

// NewCryptoFilterer creates a new log filterer instance of Crypto, bound to a specific deployed contract.
func NewCryptoFilterer(address common.Address, filterer bind.ContractFilterer) (*CryptoFilterer, error) {
	contract, err := bindCrypto(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CryptoFilterer{contract: contract}, nil
}

// bindCrypto binds a generic wrapper to an already deployed contract.
func bindCrypto(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(CryptoABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Crypto *CryptoRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Crypto.Contract.CryptoCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Crypto *CryptoRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Crypto.Contract.CryptoTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Crypto *CryptoRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Crypto.Contract.CryptoTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Crypto *CryptoCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Crypto.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Crypto *CryptoTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Crypto.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Crypto *CryptoTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Crypto.Contract.contract.Transact(opts, method, params...)
}

// AggregateSignatures is a free data retrieval call binding the contract method 0xf022e061.
//
// Solidity: function AggregateSignatures(uint256[2][] sigs, uint256[] indices, uint256 threshold, uint256[] invArray) view returns(uint256[2])
func (_Crypto *CryptoCaller) AggregateSignatures(opts *bind.CallOpts, sigs [][2]*big.Int, indices []*big.Int, threshold *big.Int, invArray []*big.Int) ([2]*big.Int, error) {
	var (
		ret0 = new([2]*big.Int)
	)
	out := ret0
	err := _Crypto.contract.Call(opts, out, "AggregateSignatures", sigs, indices, threshold, invArray)
	return *ret0, err
}

// AggregateSignatures is a free data retrieval call binding the contract method 0xf022e061.
//
// Solidity: function AggregateSignatures(uint256[2][] sigs, uint256[] indices, uint256 threshold, uint256[] invArray) view returns(uint256[2])
func (_Crypto *CryptoSession) AggregateSignatures(sigs [][2]*big.Int, indices []*big.Int, threshold *big.Int, invArray []*big.Int) ([2]*big.Int, error) {
	return _Crypto.Contract.AggregateSignatures(&_Crypto.CallOpts, sigs, indices, threshold, invArray)
}

// AggregateSignatures is a free data retrieval call binding the contract method 0xf022e061.
//
// Solidity: function AggregateSignatures(uint256[2][] sigs, uint256[] indices, uint256 threshold, uint256[] invArray) view returns(uint256[2])
func (_Crypto *CryptoCallerSession) AggregateSignatures(sigs [][2]*big.Int, indices []*big.Int, threshold *big.Int, invArray []*big.Int) ([2]*big.Int, error) {
	return _Crypto.Contract.AggregateSignatures(&_Crypto.CallOpts, sigs, indices, threshold, invArray)
}

// HashToG1 is a free data retrieval call binding the contract method 0x95add79c.
//
// Solidity: function HashToG1(bytes message) view returns(uint256[2] h)
func (_Crypto *CryptoCaller) HashToG1(opts *bind.CallOpts, message []byte) ([2]*big.Int, error) {
	var (
		ret0 = new([2]*big.Int)
	)
	out := ret0
	err := _Crypto.contract.Call(opts, out, "HashToG1", message)
	return *ret0, err
}

// HashToG1 is a free data retrieval call binding the contract method 0x95add79c.
//
// Solidity: function HashToG1(bytes message) view returns(uint256[2] h)
func (_Crypto *CryptoSession) HashToG1(message []byte) ([2]*big.Int, error) {
	return _Crypto.Contract.HashToG1(&_Crypto.CallOpts, message)
}

// HashToG1 is a free data retrieval call binding the contract method 0x95add79c.
//
// Solidity: function HashToG1(bytes message) view returns(uint256[2] h)
func (_Crypto *CryptoCallerSession) HashToG1(message []byte) ([2]*big.Int, error) {
	return _Crypto.Contract.HashToG1(&_Crypto.CallOpts, message)
}

// Sign is a free data retrieval call binding the contract method 0x6bdf477c.
//
// Solidity: function Sign(bytes message, uint256 privK) view returns(uint256[2] sig)
func (_Crypto *CryptoCaller) Sign(opts *bind.CallOpts, message []byte, privK *big.Int) ([2]*big.Int, error) {
	var (
		ret0 = new([2]*big.Int)
	)
	out := ret0
	err := _Crypto.contract.Call(opts, out, "Sign", message, privK)
	return *ret0, err
}

// Sign is a free data retrieval call binding the contract method 0x6bdf477c.
//
// Solidity: function Sign(bytes message, uint256 privK) view returns(uint256[2] sig)
func (_Crypto *CryptoSession) Sign(message []byte, privK *big.Int) ([2]*big.Int, error) {
	return _Crypto.Contract.Sign(&_Crypto.CallOpts, message, privK)
}

// Sign is a free data retrieval call binding the contract method 0x6bdf477c.
//
// Solidity: function Sign(bytes message, uint256 privK) view returns(uint256[2] sig)
func (_Crypto *CryptoCallerSession) Sign(message []byte, privK *big.Int) ([2]*big.Int, error) {
	return _Crypto.Contract.Sign(&_Crypto.CallOpts, message, privK)
}

// Verify is a free data retrieval call binding the contract method 0x06367587.
//
// Solidity: function Verify(bytes message, uint256[2] sig, uint256[4] pubK) view returns(bool v)
func (_Crypto *CryptoCaller) Verify(opts *bind.CallOpts, message []byte, sig [2]*big.Int, pubK [4]*big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Crypto.contract.Call(opts, out, "Verify", message, sig, pubK)
	return *ret0, err
}

// Verify is a free data retrieval call binding the contract method 0x06367587.
//
// Solidity: function Verify(bytes message, uint256[2] sig, uint256[4] pubK) view returns(bool v)
func (_Crypto *CryptoSession) Verify(message []byte, sig [2]*big.Int, pubK [4]*big.Int) (bool, error) {
	return _Crypto.Contract.Verify(&_Crypto.CallOpts, message, sig, pubK)
}

// Verify is a free data retrieval call binding the contract method 0x06367587.
//
// Solidity: function Verify(bytes message, uint256[2] sig, uint256[4] pubK) view returns(bool v)
func (_Crypto *CryptoCallerSession) Verify(message []byte, sig [2]*big.Int, pubK [4]*big.Int) (bool, error) {
	return _Crypto.Contract.Verify(&_Crypto.CallOpts, message, sig, pubK)
}

// Bn128Add is a free data retrieval call binding the contract method 0xe664725b.
//
// Solidity: function bn128_add(uint256[4] input) view returns(uint256[2] result)
func (_Crypto *CryptoCaller) Bn128Add(opts *bind.CallOpts, input [4]*big.Int) ([2]*big.Int, error) {
	var (
		ret0 = new([2]*big.Int)
	)
	out := ret0
	err := _Crypto.contract.Call(opts, out, "bn128_add", input)
	return *ret0, err
}

// Bn128Add is a free data retrieval call binding the contract method 0xe664725b.
//
// Solidity: function bn128_add(uint256[4] input) view returns(uint256[2] result)
func (_Crypto *CryptoSession) Bn128Add(input [4]*big.Int) ([2]*big.Int, error) {
	return _Crypto.Contract.Bn128Add(&_Crypto.CallOpts, input)
}

// Bn128Add is a free data retrieval call binding the contract method 0xe664725b.
//
// Solidity: function bn128_add(uint256[4] input) view returns(uint256[2] result)
func (_Crypto *CryptoCallerSession) Bn128Add(input [4]*big.Int) ([2]*big.Int, error) {
	return _Crypto.Contract.Bn128Add(&_Crypto.CallOpts, input)
}

// Bn128IsOnCurve is a free data retrieval call binding the contract method 0xf4d7d33d.
//
// Solidity: function bn128_is_on_curve(uint256[2] point) pure returns(bool)
func (_Crypto *CryptoCaller) Bn128IsOnCurve(opts *bind.CallOpts, point [2]*big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Crypto.contract.Call(opts, out, "bn128_is_on_curve", point)
	return *ret0, err
}

// Bn128IsOnCurve is a free data retrieval call binding the contract method 0xf4d7d33d.
//
// Solidity: function bn128_is_on_curve(uint256[2] point) pure returns(bool)
func (_Crypto *CryptoSession) Bn128IsOnCurve(point [2]*big.Int) (bool, error) {
	return _Crypto.Contract.Bn128IsOnCurve(&_Crypto.CallOpts, point)
}

// Bn128IsOnCurve is a free data retrieval call binding the contract method 0xf4d7d33d.
//
// Solidity: function bn128_is_on_curve(uint256[2] point) pure returns(bool)
func (_Crypto *CryptoCallerSession) Bn128IsOnCurve(point [2]*big.Int) (bool, error) {
	return _Crypto.Contract.Bn128IsOnCurve(&_Crypto.CallOpts, point)
}

// Bn128Multiply is a free data retrieval call binding the contract method 0x82688f14.
//
// Solidity: function bn128_multiply(uint256[3] input) view returns(uint256[2] result)
func (_Crypto *CryptoCaller) Bn128Multiply(opts *bind.CallOpts, input [3]*big.Int) ([2]*big.Int, error) {
	var (
		ret0 = new([2]*big.Int)
	)
	out := ret0
	err := _Crypto.contract.Call(opts, out, "bn128_multiply", input)
	return *ret0, err
}

// Bn128Multiply is a free data retrieval call binding the contract method 0x82688f14.
//
// Solidity: function bn128_multiply(uint256[3] input) view returns(uint256[2] result)
func (_Crypto *CryptoSession) Bn128Multiply(input [3]*big.Int) ([2]*big.Int, error) {
	return _Crypto.Contract.Bn128Multiply(&_Crypto.CallOpts, input)
}

// Bn128Multiply is a free data retrieval call binding the contract method 0x82688f14.
//
// Solidity: function bn128_multiply(uint256[3] input) view returns(uint256[2] result)
func (_Crypto *CryptoCallerSession) Bn128Multiply(input [3]*big.Int) ([2]*big.Int, error) {
	return _Crypto.Contract.Bn128Multiply(&_Crypto.CallOpts, input)
}

// CheckIndices is a free data retrieval call binding the contract method 0x80f4a922.
//
// Solidity: function checkIndices(uint256[] honestIndices, uint256[] dishonestIndices, uint256 n) pure returns(bool validIndices)
func (_Crypto *CryptoCaller) CheckIndices(opts *bind.CallOpts, honestIndices []*big.Int, dishonestIndices []*big.Int, n *big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Crypto.contract.Call(opts, out, "checkIndices", honestIndices, dishonestIndices, n)
	return *ret0, err
}

// CheckIndices is a free data retrieval call binding the contract method 0x80f4a922.
//
// Solidity: function checkIndices(uint256[] honestIndices, uint256[] dishonestIndices, uint256 n) pure returns(bool validIndices)
func (_Crypto *CryptoSession) CheckIndices(honestIndices []*big.Int, dishonestIndices []*big.Int, n *big.Int) (bool, error) {
	return _Crypto.Contract.CheckIndices(&_Crypto.CallOpts, honestIndices, dishonestIndices, n)
}

// CheckIndices is a free data retrieval call binding the contract method 0x80f4a922.
//
// Solidity: function checkIndices(uint256[] honestIndices, uint256[] dishonestIndices, uint256 n) pure returns(bool validIndices)
func (_Crypto *CryptoCallerSession) CheckIndices(honestIndices []*big.Int, dishonestIndices []*big.Int, n *big.Int) (bool, error) {
	return _Crypto.Contract.CheckIndices(&_Crypto.CallOpts, honestIndices, dishonestIndices, n)
}

// CheckInverses is a free data retrieval call binding the contract method 0xe480a92e.
//
// Solidity: function checkInverses(uint256[] invArray, uint256 maxIndex) pure returns(bool)
func (_Crypto *CryptoCaller) CheckInverses(opts *bind.CallOpts, invArray []*big.Int, maxIndex *big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Crypto.contract.Call(opts, out, "checkInverses", invArray, maxIndex)
	return *ret0, err
}

// CheckInverses is a free data retrieval call binding the contract method 0xe480a92e.
//
// Solidity: function checkInverses(uint256[] invArray, uint256 maxIndex) pure returns(bool)
func (_Crypto *CryptoSession) CheckInverses(invArray []*big.Int, maxIndex *big.Int) (bool, error) {
	return _Crypto.Contract.CheckInverses(&_Crypto.CallOpts, invArray, maxIndex)
}

// CheckInverses is a free data retrieval call binding the contract method 0xe480a92e.
//
// Solidity: function checkInverses(uint256[] invArray, uint256 maxIndex) pure returns(bool)
func (_Crypto *CryptoCallerSession) CheckInverses(invArray []*big.Int, maxIndex *big.Int) (bool, error) {
	return _Crypto.Contract.CheckInverses(&_Crypto.CallOpts, invArray, maxIndex)
}

// DleqVerify is a free data retrieval call binding the contract method 0xe81ee0e3.
//
// Solidity: function dleq_verify(uint256[2] x1, uint256[2] y1, uint256[2] x2, uint256[2] y2, uint256[2] proof) view returns(bool proof_is_valid)
func (_Crypto *CryptoCaller) DleqVerify(opts *bind.CallOpts, x1 [2]*big.Int, y1 [2]*big.Int, x2 [2]*big.Int, y2 [2]*big.Int, proof [2]*big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Crypto.contract.Call(opts, out, "dleq_verify", x1, y1, x2, y2, proof)
	return *ret0, err
}

// DleqVerify is a free data retrieval call binding the contract method 0xe81ee0e3.
//
// Solidity: function dleq_verify(uint256[2] x1, uint256[2] y1, uint256[2] x2, uint256[2] y2, uint256[2] proof) view returns(bool proof_is_valid)
func (_Crypto *CryptoSession) DleqVerify(x1 [2]*big.Int, y1 [2]*big.Int, x2 [2]*big.Int, y2 [2]*big.Int, proof [2]*big.Int) (bool, error) {
	return _Crypto.Contract.DleqVerify(&_Crypto.CallOpts, x1, y1, x2, y2, proof)
}

// DleqVerify is a free data retrieval call binding the contract method 0xe81ee0e3.
//
// Solidity: function dleq_verify(uint256[2] x1, uint256[2] y1, uint256[2] x2, uint256[2] y2, uint256[2] proof) view returns(bool proof_is_valid)
func (_Crypto *CryptoCallerSession) DleqVerify(x1 [2]*big.Int, y1 [2]*big.Int, x2 [2]*big.Int, y2 [2]*big.Int, proof [2]*big.Int) (bool, error) {
	return _Crypto.Contract.DleqVerify(&_Crypto.CallOpts, x1, y1, x2, y2, proof)
}

// SafeSigningPoint is a free data retrieval call binding the contract method 0x96d95a6f.
//
// Solidity: function safeSigningPoint(uint256[2] input) pure returns(bool)
func (_Crypto *CryptoCaller) SafeSigningPoint(opts *bind.CallOpts, input [2]*big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Crypto.contract.Call(opts, out, "safeSigningPoint", input)
	return *ret0, err
}

// SafeSigningPoint is a free data retrieval call binding the contract method 0x96d95a6f.
//
// Solidity: function safeSigningPoint(uint256[2] input) pure returns(bool)
func (_Crypto *CryptoSession) SafeSigningPoint(input [2]*big.Int) (bool, error) {
	return _Crypto.Contract.SafeSigningPoint(&_Crypto.CallOpts, input)
}

// SafeSigningPoint is a free data retrieval call binding the contract method 0x96d95a6f.
//
// Solidity: function safeSigningPoint(uint256[2] input) pure returns(bool)
func (_Crypto *CryptoCallerSession) SafeSigningPoint(input [2]*big.Int) (bool, error) {
	return _Crypto.Contract.SafeSigningPoint(&_Crypto.CallOpts, input)
}

// DepositABI is the input ABI used to generate the binding from.
const DepositABI = "[{\"inputs\":[{\"internalType\":\"contractRegistry\",\"name\":\"registry_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositReceived\",\"type\":\"event\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"foo\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"bar\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"fax\",\"type\":\"bytes\"}],\"name\":\"LogNote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contractDSAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contractRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reloadRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractDSAuthority\",\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contractBasicERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// DepositBin is the compiled bytecode used for deploying new contracts.
var DepositBin = "0x6080604052600160085534801561001557600080fd5b506040516119923803806119928339818101604052602081101561003857600080fd5b810190808051906020019092919050505033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9460405160405180910390a233600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061013f600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661018660201b60201c565b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506102ed565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061022b5750600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610280576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806119616031913960400191505060405180910390fd5b6001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060036000815480929190600101919050555050565b611665806102fc6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063b311744611610097578063e348da1311610066578063e348da131461030b578063fad8b32a1461034f578063fc0c546a14610393578063ff50abdc146103c757610100565b8063b31174461461026b578063b6b55f2514610289578063be9a6555146102cd578063bf7e214f146102d757610100565b80637a9e5e4b116100d35780637a9e5e4b1461017d5780637b103999146101c15780638da5cb5b146101f5578063b02c43d01461022957610100565b806307da68f51461010557806313af40351461010f5780631476601d1461015357806375f12b211461015d575b600080fd5b61010d6103e5565b005b6101516004803603602081101561012557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061055e565b005b61015b6106a7565b005b6101656109f0565b60405180821515815260200191505060405180910390f35b6101bf6004803603602081101561019357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a03565b005b6101c9610b49565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101fd610b6f565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6102556004803603602081101561023f57600080fd5b8101908080359060200190929190505050610b95565b6040518082815260200191505060405180910390f35b610273610bb3565b6040518082815260200191505060405180910390f35b6102b56004803603602081101561029f57600080fd5b8101908080359060200190929190505050610bb9565b60405180821515815260200191505060405180910390f35b6102d5610c4f565b005b6102df610dc9565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61034d6004803603602081101561032157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ded565b005b6103916004803603602081101561036557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f54565b005b61039b61112b565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6103cf611151565b6040518082815260200191505060405180910390f35b610413336000357fffffffff0000000000000000000000000000000000000000000000000000000016611157565b610485576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f64732d617574682d756e617574686f72697a656400000000000000000000000081525060200191505060405180910390fd5b60008060006004359250602435915034905060018060146101000a81548160ff02191690831515021790555081833373ffffffffffffffffffffffffffffffffffffffff166000357fffffffff00000000000000000000000000000000000000000000000000000000167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168460003660405180848152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505094505050505060405180910390a4505050565b61058c336000357fffffffff0000000000000000000000000000000000000000000000000000000016611157565b6105fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f64732d617574682d756e617574686f72697a656400000000000000000000000081525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9460405160405180910390a250565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061074c5750600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6107a1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806115ff6031913960400191505060405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f67187ac6040518060400160405280600f81526020017f7574696c697479546f6b656e2f763100000000000000000000000000000000008152506040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610864578082015181840152602081019050610849565b50505050905090810190601f1680156108915780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b1580156108ae57600080fd5b505afa1580156108c2573d6000803e3d6000fd5b505050506040513d60208110156108d857600080fd5b8101908080519060200190929190505050600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156109ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f696e76616c6964206164647265737320666f7220746f6b656e0000000000000081525060200191505060405180910390fd5b565b600160149054906101000a900460ff1681565b610a31336000357fffffffff0000000000000000000000000000000000000000000000000000000016611157565b610aa3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f64732d617574682d756e617574686f72697a656400000000000000000000000081525060200191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada460405160405180910390a250565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60096020528060005260406000206000915090508060000154905081565b60085481565b6000600160149054906101000a900460ff1615610c3e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f64732d73746f702d69732d73746f70706564000000000000000000000000000081525060200191505060405180910390fd5b610c483383611363565b9050919050565b610c7d336000357fffffffff0000000000000000000000000000000000000000000000000000000016611157565b610cef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f64732d617574682d756e617574686f72697a656400000000000000000000000081525060200191505060405180910390fd5b6000806000600435925060243591503490506000600160146101000a81548160ff02191690831515021790555081833373ffffffffffffffffffffffffffffffffffffffff166000357fffffffff00000000000000000000000000000000000000000000000000000000167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168460003660405180848152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505094505050505060405180910390a4505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610e925750600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610ee7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806115ff6031913960400191505060405180910390fd5b6001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060036000815480929190600101919050555050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610ff95750600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b61104e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806115ff6031913960400191505060405180910390fd5b6001600354116110c6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f43616e27742072656d6f766520616c6c206f70657261746f727300000000000081525060200191505060405180910390fd5b600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff02191690556003600081548092919060019003919050555050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60075481565b60003073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611196576001905061135d565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156111f5576001905061135d565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611253576000905061135d565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b70096138430856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff168152602001827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001935050505060206040518083038186803b15801561131f57600080fd5b505afa158015611333573d6000803e3d6000fd5b505050506040513d602081101561134957600080fd5b810190808051906020019092919050505090505b92915050565b600080600960006008548152602001908152602001600020905082816000018190555061139b8360075461157b90919063ffffffff16565b6007819055507f5b063c6569a91e8133fc6cd71d31a4ca5c65c652fd53ae093f46107754f085416008548585604051808481526020018373ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a1600860008154809291906001019190505550600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8530866040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1580156114c357600080fd5b505af11580156114d7573d6000803e3d6000fd5b505050506040513d60208110156114ed57600080fd5b8101908080519060200190929190505050611570576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f5472616e73666572206661696c6564000000000000000000000000000000000081525060200191505060405180910390fd5b600191505092915050565b60008282840191508110156115f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f64732d6d6174682d6164642d6f766572666c6f7700000000000000000000000081525060200191505060405180910390fd5b9291505056fe46756e6374696f6e616c697479207265737472696374656420746f20617574686f72697a6564206f70657261746f72732ea26469706673582212207e65653802b7945e15fd1c66aeaae6cafc8cecd6eccc6fb58f7de90fec3e15d264736f6c6343000706003346756e6374696f6e616c697479207265737472696374656420746f20617574686f72697a6564206f70657261746f72732e"

// DeployDeposit deploys a new Ethereum contract, binding an instance of Deposit to it.
func DeployDeposit(auth *bind.TransactOpts, backend bind.ContractBackend, registry_ common.Address) (common.Address, *types.Transaction, *Deposit, error) {
	parsed, err := abi.JSON(strings.NewReader(DepositABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(DepositBin), backend, registry_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Deposit{DepositCaller: DepositCaller{contract: contract}, DepositTransactor: DepositTransactor{contract: contract}, DepositFilterer: DepositFilterer{contract: contract}}, nil
}

// Deposit is an auto generated Go binding around an Ethereum contract.
type Deposit struct {
	DepositCaller     // Read-only binding to the contract
	DepositTransactor // Write-only binding to the contract
	DepositFilterer   // Log filterer for contract events
}

// DepositCaller is an auto generated read-only Go binding around an Ethereum contract.
type DepositCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DepositTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DepositTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DepositFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DepositFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DepositSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DepositSession struct {
	Contract     *Deposit          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DepositCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DepositCallerSession struct {
	Contract *DepositCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// DepositTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DepositTransactorSession struct {
	Contract     *DepositTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// DepositRaw is an auto generated low-level Go binding around an Ethereum contract.
type DepositRaw struct {
	Contract *Deposit // Generic contract binding to access the raw methods on
}

// DepositCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DepositCallerRaw struct {
	Contract *DepositCaller // Generic read-only contract binding to access the raw methods on
}

// DepositTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DepositTransactorRaw struct {
	Contract *DepositTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDeposit creates a new instance of Deposit, bound to a specific deployed contract.
func NewDeposit(address common.Address, backend bind.ContractBackend) (*Deposit, error) {
	contract, err := bindDeposit(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Deposit{DepositCaller: DepositCaller{contract: contract}, DepositTransactor: DepositTransactor{contract: contract}, DepositFilterer: DepositFilterer{contract: contract}}, nil
}

// NewDepositCaller creates a new read-only instance of Deposit, bound to a specific deployed contract.
func NewDepositCaller(address common.Address, caller bind.ContractCaller) (*DepositCaller, error) {
	contract, err := bindDeposit(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DepositCaller{contract: contract}, nil
}

// NewDepositTransactor creates a new write-only instance of Deposit, bound to a specific deployed contract.
func NewDepositTransactor(address common.Address, transactor bind.ContractTransactor) (*DepositTransactor, error) {
	contract, err := bindDeposit(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DepositTransactor{contract: contract}, nil
}

// NewDepositFilterer creates a new log filterer instance of Deposit, bound to a specific deployed contract.
func NewDepositFilterer(address common.Address, filterer bind.ContractFilterer) (*DepositFilterer, error) {
	contract, err := bindDeposit(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DepositFilterer{contract: contract}, nil
}

// bindDeposit binds a generic wrapper to an already deployed contract.
func bindDeposit(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DepositABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Deposit *DepositRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Deposit.Contract.DepositCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Deposit *DepositRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Deposit.Contract.DepositTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Deposit *DepositRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Deposit.Contract.DepositTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Deposit *DepositCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Deposit.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Deposit *DepositTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Deposit.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Deposit *DepositTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Deposit.Contract.contract.Transact(opts, method, params...)
}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_Deposit *DepositCaller) Authority(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Deposit.contract.Call(opts, out, "authority")
	return *ret0, err
}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_Deposit *DepositSession) Authority() (common.Address, error) {
	return _Deposit.Contract.Authority(&_Deposit.CallOpts)
}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_Deposit *DepositCallerSession) Authority() (common.Address, error) {
	return _Deposit.Contract.Authority(&_Deposit.CallOpts)
}

// DepositID is a free data retrieval call binding the contract method 0xb3117446.
//
// Solidity: function depositID() view returns(uint256)
func (_Deposit *DepositCaller) DepositID(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Deposit.contract.Call(opts, out, "depositID")
	return *ret0, err
}

// DepositID is a free data retrieval call binding the contract method 0xb3117446.
//
// Solidity: function depositID() view returns(uint256)
func (_Deposit *DepositSession) DepositID() (*big.Int, error) {
	return _Deposit.Contract.DepositID(&_Deposit.CallOpts)
}

// DepositID is a free data retrieval call binding the contract method 0xb3117446.
//
// Solidity: function depositID() view returns(uint256)
func (_Deposit *DepositCallerSession) DepositID() (*big.Int, error) {
	return _Deposit.Contract.DepositID(&_Deposit.CallOpts)
}

// Deposits is a free data retrieval call binding the contract method 0xb02c43d0.
//
// Solidity: function deposits(uint256 ) view returns(uint256 amount)
func (_Deposit *DepositCaller) Deposits(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Deposit.contract.Call(opts, out, "deposits", arg0)
	return *ret0, err
}

// Deposits is a free data retrieval call binding the contract method 0xb02c43d0.
//
// Solidity: function deposits(uint256 ) view returns(uint256 amount)
func (_Deposit *DepositSession) Deposits(arg0 *big.Int) (*big.Int, error) {
	return _Deposit.Contract.Deposits(&_Deposit.CallOpts, arg0)
}

// Deposits is a free data retrieval call binding the contract method 0xb02c43d0.
//
// Solidity: function deposits(uint256 ) view returns(uint256 amount)
func (_Deposit *DepositCallerSession) Deposits(arg0 *big.Int) (*big.Int, error) {
	return _Deposit.Contract.Deposits(&_Deposit.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Deposit *DepositCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Deposit.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Deposit *DepositSession) Owner() (common.Address, error) {
	return _Deposit.Contract.Owner(&_Deposit.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Deposit *DepositCallerSession) Owner() (common.Address, error) {
	return _Deposit.Contract.Owner(&_Deposit.CallOpts)
}

// Registry is a free data retrieval call binding the contract method 0x7b103999.
//
// Solidity: function registry() view returns(address)
func (_Deposit *DepositCaller) Registry(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Deposit.contract.Call(opts, out, "registry")
	return *ret0, err
}

// Registry is a free data retrieval call binding the contract method 0x7b103999.
//
// Solidity: function registry() view returns(address)
func (_Deposit *DepositSession) Registry() (common.Address, error) {
	return _Deposit.Contract.Registry(&_Deposit.CallOpts)
}

// Registry is a free data retrieval call binding the contract method 0x7b103999.
//
// Solidity: function registry() view returns(address)
func (_Deposit *DepositCallerSession) Registry() (common.Address, error) {
	return _Deposit.Contract.Registry(&_Deposit.CallOpts)
}

// Stopped is a free data retrieval call binding the contract method 0x75f12b21.
//
// Solidity: function stopped() view returns(bool)
func (_Deposit *DepositCaller) Stopped(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Deposit.contract.Call(opts, out, "stopped")
	return *ret0, err
}

// Stopped is a free data retrieval call binding the contract method 0x75f12b21.
//
// Solidity: function stopped() view returns(bool)
func (_Deposit *DepositSession) Stopped() (bool, error) {
	return _Deposit.Contract.Stopped(&_Deposit.CallOpts)
}

// Stopped is a free data retrieval call binding the contract method 0x75f12b21.
//
// Solidity: function stopped() view returns(bool)
func (_Deposit *DepositCallerSession) Stopped() (bool, error) {
	return _Deposit.Contract.Stopped(&_Deposit.CallOpts)
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_Deposit *DepositCaller) Token(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Deposit.contract.Call(opts, out, "token")
	return *ret0, err
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_Deposit *DepositSession) Token() (common.Address, error) {
	return _Deposit.Contract.Token(&_Deposit.CallOpts)
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_Deposit *DepositCallerSession) Token() (common.Address, error) {
	return _Deposit.Contract.Token(&_Deposit.CallOpts)
}

// TotalDeposited is a free data retrieval call binding the contract method 0xff50abdc.
//
// Solidity: function totalDeposited() view returns(uint256)
func (_Deposit *DepositCaller) TotalDeposited(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Deposit.contract.Call(opts, out, "totalDeposited")
	return *ret0, err
}

// TotalDeposited is a free data retrieval call binding the contract method 0xff50abdc.
//
// Solidity: function totalDeposited() view returns(uint256)
func (_Deposit *DepositSession) TotalDeposited() (*big.Int, error) {
	return _Deposit.Contract.TotalDeposited(&_Deposit.CallOpts)
}

// TotalDeposited is a free data retrieval call binding the contract method 0xff50abdc.
//
// Solidity: function totalDeposited() view returns(uint256)
func (_Deposit *DepositCallerSession) TotalDeposited() (*big.Int, error) {
	return _Deposit.Contract.TotalDeposited(&_Deposit.CallOpts)
}

// Deposit is a paid mutator transaction binding the contract method 0xb6b55f25.
//
// Solidity: function deposit(uint256 amount) returns(bool)
func (_Deposit *DepositTransactor) Deposit(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Deposit.contract.Transact(opts, "deposit", amount)
}

// Deposit is a paid mutator transaction binding the contract method 0xb6b55f25.
//
// Solidity: function deposit(uint256 amount) returns(bool)
func (_Deposit *DepositSession) Deposit(amount *big.Int) (*types.Transaction, error) {
	return _Deposit.Contract.Deposit(&_Deposit.TransactOpts, amount)
}

// Deposit is a paid mutator transaction binding the contract method 0xb6b55f25.
//
// Solidity: function deposit(uint256 amount) returns(bool)
func (_Deposit *DepositTransactorSession) Deposit(amount *big.Int) (*types.Transaction, error) {
	return _Deposit.Contract.Deposit(&_Deposit.TransactOpts, amount)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_Deposit *DepositTransactor) GrantOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _Deposit.contract.Transact(opts, "grantOperator", _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_Deposit *DepositSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _Deposit.Contract.GrantOperator(&_Deposit.TransactOpts, _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_Deposit *DepositTransactorSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _Deposit.Contract.GrantOperator(&_Deposit.TransactOpts, _operator)
}

// ReloadRegistry is a paid mutator transaction binding the contract method 0x1476601d.
//
// Solidity: function reloadRegistry() returns()
func (_Deposit *DepositTransactor) ReloadRegistry(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Deposit.contract.Transact(opts, "reloadRegistry")
}

// ReloadRegistry is a paid mutator transaction binding the contract method 0x1476601d.
//
// Solidity: function reloadRegistry() returns()
func (_Deposit *DepositSession) ReloadRegistry() (*types.Transaction, error) {
	return _Deposit.Contract.ReloadRegistry(&_Deposit.TransactOpts)
}

// ReloadRegistry is a paid mutator transaction binding the contract method 0x1476601d.
//
// Solidity: function reloadRegistry() returns()
func (_Deposit *DepositTransactorSession) ReloadRegistry() (*types.Transaction, error) {
	return _Deposit.Contract.ReloadRegistry(&_Deposit.TransactOpts)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_Deposit *DepositTransactor) RevokeOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _Deposit.contract.Transact(opts, "revokeOperator", _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_Deposit *DepositSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _Deposit.Contract.RevokeOperator(&_Deposit.TransactOpts, _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_Deposit *DepositTransactorSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _Deposit.Contract.RevokeOperator(&_Deposit.TransactOpts, _operator)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_Deposit *DepositTransactor) SetAuthority(opts *bind.TransactOpts, authority_ common.Address) (*types.Transaction, error) {
	return _Deposit.contract.Transact(opts, "setAuthority", authority_)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_Deposit *DepositSession) SetAuthority(authority_ common.Address) (*types.Transaction, error) {
	return _Deposit.Contract.SetAuthority(&_Deposit.TransactOpts, authority_)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_Deposit *DepositTransactorSession) SetAuthority(authority_ common.Address) (*types.Transaction, error) {
	return _Deposit.Contract.SetAuthority(&_Deposit.TransactOpts, authority_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_Deposit *DepositTransactor) SetOwner(opts *bind.TransactOpts, owner_ common.Address) (*types.Transaction, error) {
	return _Deposit.contract.Transact(opts, "setOwner", owner_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_Deposit *DepositSession) SetOwner(owner_ common.Address) (*types.Transaction, error) {
	return _Deposit.Contract.SetOwner(&_Deposit.TransactOpts, owner_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_Deposit *DepositTransactorSession) SetOwner(owner_ common.Address) (*types.Transaction, error) {
	return _Deposit.Contract.SetOwner(&_Deposit.TransactOpts, owner_)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_Deposit *DepositTransactor) Start(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Deposit.contract.Transact(opts, "start")
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_Deposit *DepositSession) Start() (*types.Transaction, error) {
	return _Deposit.Contract.Start(&_Deposit.TransactOpts)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_Deposit *DepositTransactorSession) Start() (*types.Transaction, error) {
	return _Deposit.Contract.Start(&_Deposit.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_Deposit *DepositTransactor) Stop(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Deposit.contract.Transact(opts, "stop")
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_Deposit *DepositSession) Stop() (*types.Transaction, error) {
	return _Deposit.Contract.Stop(&_Deposit.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_Deposit *DepositTransactorSession) Stop() (*types.Transaction, error) {
	return _Deposit.Contract.Stop(&_Deposit.TransactOpts)
}

// DepositDepositReceivedIterator is returned from FilterDepositReceived and is used to iterate over the raw logs and unpacked data for DepositReceived events raised by the Deposit contract.
type DepositDepositReceivedIterator struct {
	Event *DepositDepositReceived // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DepositDepositReceivedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DepositDepositReceived)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DepositDepositReceived)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DepositDepositReceivedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DepositDepositReceivedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DepositDepositReceived represents a DepositReceived event raised by the Deposit contract.
type DepositDepositReceived struct {
	DepositID *big.Int
	Depositor common.Address
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterDepositReceived is a free log retrieval operation binding the contract event 0x5b063c6569a91e8133fc6cd71d31a4ca5c65c652fd53ae093f46107754f08541.
//
// Solidity: event DepositReceived(uint256 depositID, address depositor, uint256 amount)
func (_Deposit *DepositFilterer) FilterDepositReceived(opts *bind.FilterOpts) (*DepositDepositReceivedIterator, error) {

	logs, sub, err := _Deposit.contract.FilterLogs(opts, "DepositReceived")
	if err != nil {
		return nil, err
	}
	return &DepositDepositReceivedIterator{contract: _Deposit.contract, event: "DepositReceived", logs: logs, sub: sub}, nil
}

// WatchDepositReceived is a free log subscription operation binding the contract event 0x5b063c6569a91e8133fc6cd71d31a4ca5c65c652fd53ae093f46107754f08541.
//
// Solidity: event DepositReceived(uint256 depositID, address depositor, uint256 amount)
func (_Deposit *DepositFilterer) WatchDepositReceived(opts *bind.WatchOpts, sink chan<- *DepositDepositReceived) (event.Subscription, error) {

	logs, sub, err := _Deposit.contract.WatchLogs(opts, "DepositReceived")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DepositDepositReceived)
				if err := _Deposit.contract.UnpackLog(event, "DepositReceived", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositReceived is a log parse operation binding the contract event 0x5b063c6569a91e8133fc6cd71d31a4ca5c65c652fd53ae093f46107754f08541.
//
// Solidity: event DepositReceived(uint256 depositID, address depositor, uint256 amount)
func (_Deposit *DepositFilterer) ParseDepositReceived(log types.Log) (*DepositDepositReceived, error) {
	event := new(DepositDepositReceived)
	if err := _Deposit.contract.UnpackLog(event, "DepositReceived", log); err != nil {
		return nil, err
	}
	return event, nil
}

// DepositLogSetAuthorityIterator is returned from FilterLogSetAuthority and is used to iterate over the raw logs and unpacked data for LogSetAuthority events raised by the Deposit contract.
type DepositLogSetAuthorityIterator struct {
	Event *DepositLogSetAuthority // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DepositLogSetAuthorityIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DepositLogSetAuthority)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DepositLogSetAuthority)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DepositLogSetAuthorityIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DepositLogSetAuthorityIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DepositLogSetAuthority represents a LogSetAuthority event raised by the Deposit contract.
type DepositLogSetAuthority struct {
	Authority common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterLogSetAuthority is a free log retrieval operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_Deposit *DepositFilterer) FilterLogSetAuthority(opts *bind.FilterOpts, authority []common.Address) (*DepositLogSetAuthorityIterator, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}

	logs, sub, err := _Deposit.contract.FilterLogs(opts, "LogSetAuthority", authorityRule)
	if err != nil {
		return nil, err
	}
	return &DepositLogSetAuthorityIterator{contract: _Deposit.contract, event: "LogSetAuthority", logs: logs, sub: sub}, nil
}

// WatchLogSetAuthority is a free log subscription operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_Deposit *DepositFilterer) WatchLogSetAuthority(opts *bind.WatchOpts, sink chan<- *DepositLogSetAuthority, authority []common.Address) (event.Subscription, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}

	logs, sub, err := _Deposit.contract.WatchLogs(opts, "LogSetAuthority", authorityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DepositLogSetAuthority)
				if err := _Deposit.contract.UnpackLog(event, "LogSetAuthority", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogSetAuthority is a log parse operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_Deposit *DepositFilterer) ParseLogSetAuthority(log types.Log) (*DepositLogSetAuthority, error) {
	event := new(DepositLogSetAuthority)
	if err := _Deposit.contract.UnpackLog(event, "LogSetAuthority", log); err != nil {
		return nil, err
	}
	return event, nil
}

// DepositLogSetOwnerIterator is returned from FilterLogSetOwner and is used to iterate over the raw logs and unpacked data for LogSetOwner events raised by the Deposit contract.
type DepositLogSetOwnerIterator struct {
	Event *DepositLogSetOwner // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DepositLogSetOwnerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DepositLogSetOwner)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DepositLogSetOwner)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DepositLogSetOwnerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DepositLogSetOwnerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DepositLogSetOwner represents a LogSetOwner event raised by the Deposit contract.
type DepositLogSetOwner struct {
	Owner common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogSetOwner is a free log retrieval operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_Deposit *DepositFilterer) FilterLogSetOwner(opts *bind.FilterOpts, owner []common.Address) (*DepositLogSetOwnerIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Deposit.contract.FilterLogs(opts, "LogSetOwner", ownerRule)
	if err != nil {
		return nil, err
	}
	return &DepositLogSetOwnerIterator{contract: _Deposit.contract, event: "LogSetOwner", logs: logs, sub: sub}, nil
}

// WatchLogSetOwner is a free log subscription operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_Deposit *DepositFilterer) WatchLogSetOwner(opts *bind.WatchOpts, sink chan<- *DepositLogSetOwner, owner []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Deposit.contract.WatchLogs(opts, "LogSetOwner", ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DepositLogSetOwner)
				if err := _Deposit.contract.UnpackLog(event, "LogSetOwner", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogSetOwner is a log parse operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_Deposit *DepositFilterer) ParseLogSetOwner(log types.Log) (*DepositLogSetOwner, error) {
	event := new(DepositLogSetOwner)
	if err := _Deposit.contract.UnpackLog(event, "LogSetOwner", log); err != nil {
		return nil, err
	}
	return event, nil
}

// DepositEventsABI is the input ABI used to generate the binding from.
const DepositEventsABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositReceived\",\"type\":\"event\"}]"

// DepositEvents is an auto generated Go binding around an Ethereum contract.
type DepositEvents struct {
	DepositEventsCaller     // Read-only binding to the contract
	DepositEventsTransactor // Write-only binding to the contract
	DepositEventsFilterer   // Log filterer for contract events
}

// DepositEventsCaller is an auto generated read-only Go binding around an Ethereum contract.
type DepositEventsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DepositEventsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DepositEventsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DepositEventsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DepositEventsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DepositEventsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DepositEventsSession struct {
	Contract     *DepositEvents    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DepositEventsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DepositEventsCallerSession struct {
	Contract *DepositEventsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// DepositEventsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DepositEventsTransactorSession struct {
	Contract     *DepositEventsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// DepositEventsRaw is an auto generated low-level Go binding around an Ethereum contract.
type DepositEventsRaw struct {
	Contract *DepositEvents // Generic contract binding to access the raw methods on
}

// DepositEventsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DepositEventsCallerRaw struct {
	Contract *DepositEventsCaller // Generic read-only contract binding to access the raw methods on
}

// DepositEventsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DepositEventsTransactorRaw struct {
	Contract *DepositEventsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDepositEvents creates a new instance of DepositEvents, bound to a specific deployed contract.
func NewDepositEvents(address common.Address, backend bind.ContractBackend) (*DepositEvents, error) {
	contract, err := bindDepositEvents(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DepositEvents{DepositEventsCaller: DepositEventsCaller{contract: contract}, DepositEventsTransactor: DepositEventsTransactor{contract: contract}, DepositEventsFilterer: DepositEventsFilterer{contract: contract}}, nil
}

// NewDepositEventsCaller creates a new read-only instance of DepositEvents, bound to a specific deployed contract.
func NewDepositEventsCaller(address common.Address, caller bind.ContractCaller) (*DepositEventsCaller, error) {
	contract, err := bindDepositEvents(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DepositEventsCaller{contract: contract}, nil
}

// NewDepositEventsTransactor creates a new write-only instance of DepositEvents, bound to a specific deployed contract.
func NewDepositEventsTransactor(address common.Address, transactor bind.ContractTransactor) (*DepositEventsTransactor, error) {
	contract, err := bindDepositEvents(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DepositEventsTransactor{contract: contract}, nil
}

// NewDepositEventsFilterer creates a new log filterer instance of DepositEvents, bound to a specific deployed contract.
func NewDepositEventsFilterer(address common.Address, filterer bind.ContractFilterer) (*DepositEventsFilterer, error) {
	contract, err := bindDepositEvents(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DepositEventsFilterer{contract: contract}, nil
}

// bindDepositEvents binds a generic wrapper to an already deployed contract.
func bindDepositEvents(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DepositEventsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DepositEvents *DepositEventsRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _DepositEvents.Contract.DepositEventsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DepositEvents *DepositEventsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DepositEvents.Contract.DepositEventsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DepositEvents *DepositEventsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DepositEvents.Contract.DepositEventsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DepositEvents *DepositEventsCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _DepositEvents.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DepositEvents *DepositEventsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DepositEvents.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DepositEvents *DepositEventsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DepositEvents.Contract.contract.Transact(opts, method, params...)
}

// DepositEventsDepositReceivedIterator is returned from FilterDepositReceived and is used to iterate over the raw logs and unpacked data for DepositReceived events raised by the DepositEvents contract.
type DepositEventsDepositReceivedIterator struct {
	Event *DepositEventsDepositReceived // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DepositEventsDepositReceivedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DepositEventsDepositReceived)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DepositEventsDepositReceived)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DepositEventsDepositReceivedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DepositEventsDepositReceivedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DepositEventsDepositReceived represents a DepositReceived event raised by the DepositEvents contract.
type DepositEventsDepositReceived struct {
	DepositID *big.Int
	Depositor common.Address
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterDepositReceived is a free log retrieval operation binding the contract event 0x5b063c6569a91e8133fc6cd71d31a4ca5c65c652fd53ae093f46107754f08541.
//
// Solidity: event DepositReceived(uint256 depositID, address depositor, uint256 amount)
func (_DepositEvents *DepositEventsFilterer) FilterDepositReceived(opts *bind.FilterOpts) (*DepositEventsDepositReceivedIterator, error) {

	logs, sub, err := _DepositEvents.contract.FilterLogs(opts, "DepositReceived")
	if err != nil {
		return nil, err
	}
	return &DepositEventsDepositReceivedIterator{contract: _DepositEvents.contract, event: "DepositReceived", logs: logs, sub: sub}, nil
}

// WatchDepositReceived is a free log subscription operation binding the contract event 0x5b063c6569a91e8133fc6cd71d31a4ca5c65c652fd53ae093f46107754f08541.
//
// Solidity: event DepositReceived(uint256 depositID, address depositor, uint256 amount)
func (_DepositEvents *DepositEventsFilterer) WatchDepositReceived(opts *bind.WatchOpts, sink chan<- *DepositEventsDepositReceived) (event.Subscription, error) {

	logs, sub, err := _DepositEvents.contract.WatchLogs(opts, "DepositReceived")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DepositEventsDepositReceived)
				if err := _DepositEvents.contract.UnpackLog(event, "DepositReceived", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositReceived is a log parse operation binding the contract event 0x5b063c6569a91e8133fc6cd71d31a4ca5c65c652fd53ae093f46107754f08541.
//
// Solidity: event DepositReceived(uint256 depositID, address depositor, uint256 amount)
func (_DepositEvents *DepositEventsFilterer) ParseDepositReceived(log types.Log) (*DepositEventsDepositReceived, error) {
	event := new(DepositEventsDepositReceived)
	if err := _DepositEvents.contract.UnpackLog(event, "DepositReceived", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ETHDKGABI is the input ABI used to generate the binding from.
const ETHDKGABI = "[{\"inputs\":[{\"internalType\":\"contractRegistry\",\"name\":\"registry_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"key_share_G1\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"key_share_G1_correctness_proof\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"key_share_G2\",\"type\":\"uint256[4]\"}],\"name\":\"KeyShareSubmission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dkgStarts\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"registrationEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shareDistributionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disputeEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"keyShareSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mpkSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gpkjSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gpkjDisputeEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dkgComplete\",\"type\":\"uint256\"}],\"name\":\"RegistrationOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"encrypted_shares\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"}],\"name\":\"ShareDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share3\",\"type\":\"uint256\"}],\"name\":\"ValidatorMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"validatorCount\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"ethHeight\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"madHeight\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey3\",\"type\":\"uint256\"}],\"name\":\"ValidatorSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELTA_CONFIRM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"invArray\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"honestIndices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"dishonestIndices\",\"type\":\"uint256[]\"}],\"name\":\"Group_Accusation_GPKj\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"gpkj\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[2]\",\"name\":\"sig\",\"type\":\"uint256[2]\"}],\"name\":\"Submit_GPKj\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Successful_Completion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_DISPUTE_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_DKG_COMPLETE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_GPKJ_DISPUTE_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_GPKJ_SUBMISSION_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_KEY_SHARE_SUBMISSION_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_MPK_SUBMISSION_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_REGISTRATION_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_SHARE_DISTRIBUTION_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"commitments_1st_coefficient\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"completion_check\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"encrypted_shares\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"}],\"name\":\"distribute_shares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPhaseLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gpkj_submissions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initial_message\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"initial_signatures\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"is_malicious\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"key_share_submission_check\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"key_shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"master_public_key\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mpk_submission_check\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfRegistrations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"public_keys\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"public_key\",\"type\":\"uint256[2]\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registration_check\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reloadRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"share_distribution_check\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"share_distribution_hashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"issuer_list_idx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"disputer_list_idx\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"encrypted_shares\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"},{\"internalType\":\"uint256[2]\",\"name\":\"shared_key\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"shared_key_correctness_proof\",\"type\":\"uint256[2]\"}],\"name\":\"submit_dispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"key_share_G1\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"key_share_G1_correctness_proof\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"key_share_G2\",\"type\":\"uint256[4]\"}],\"name\":\"submit_key_share\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"_master_public_key\",\"type\":\"uint256[4]\"}],\"name\":\"submit_master_public_key\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDelta\",\"type\":\"uint256\"}],\"name\":\"updatePhaseLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// ETHDKGBin is the compiled bytecode used for deploying new contracts.
var ETHDKGBin = "0x608060405260405160200180807f43727970746f67726170687920697320677265617400000000000000000000008152506015019050604051602081830303815290604052600d90805190602001906200005b9291906200012e565b5060286017553480156200006e57600080fd5b5060405162005eb238038062005eb2833981810160405260208110156200009457600080fd5b810190808051906020019092919050505080601a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033601860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620001e4565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282620001665760008555620001b2565b82601f106200018157805160ff1916838001178555620001b2565b82800160010185558215620001b2579182015b82811115620001b157825182559160200191906001019062000194565b5b509050620001c19190620001c5565b5090565b5b80821115620001e0576000816000905550600101620001c6565b5090565b615cbe80620001f46000396000f3fe608060405234801561001057600080fd5b50600436106102275760003560e01c806392896b2d11610130578063d3cf6186116100b8578063e65113781161007c578063e651137814610e7f578063eadfcadc14610ec1578063edf26d9b14610f1b578063f47ae6a914610f73578063fef001a914610fd857610227565b8063d3cf618614610d61578063d8f63eb714610d7f578063dc5e8a0a14610d9d578063dc614e2814610e43578063e2291ec314610e6157610227565b8063a88c9e1c116100ff578063a88c9e1c14610be6578063aa7bd33814610c48578063ab63c72214610ccb578063b7b09ed614610ce9578063c21bee8314610d0957610227565b806392896b2d146107fe5780639c2aa83814610860578063a080e5e01461087e578063a687283314610a0657610227565b80633442af5c116101b35780637543b80f116101825780637543b80f1461077857806375f7ed6a1461079657806377fbebd1146107b657806382571195146107d4578063836889dc146107de57610227565b80633442af5c1461059f57806365c97c01146106045780637163525e1461060e5780637328f8261461071657610227565b80631476601d116101fa5780631476601d146102a65780632a702773146102b05780632cf4050b146102de5780632f11b985146103405780632f123ffc1461036057610227565b8063050a54f01461022c57806307f02c541461024c5780630de1553f1461026a578063106da57d14610288575b600080fd5b61023461103a565b60405180821515815260200191505060405180910390f35b61025461104d565b6040518082815260200191505060405180910390f35b610272611053565b6040518082815260200191505060405180910390f35b610290611059565b6040518082815260200191505060405180910390f35b6102ae611063565b005b6102dc600480360360208110156102c657600080fd5b8101908080359060200190929190505050611a58565b005b61032a600480360360408110156102f457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611b25565b6040518082815260200191505060405180910390f35b610348611b4d565b60405180821515815260200191505060405180910390f35b61059d600480360361012081101561037757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803590602001906401000000008111156103c857600080fd5b8201836020820111156103da57600080fd5b803590602001918460208302840111640100000000831117156103fc57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561045c57600080fd5b82018360208201111561046e57600080fd5b8035906020019184604083028401116401000000008311171561049057600080fd5b9190808060200260200160405190810160405280939291908181526020016000905b82821015610509578484839050604002016002806020026040519081016040528092919082600260200280828437600081840152601f19601f820116905080830192505050505050815260200190600101906104b2565b5050505050919291929080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f820116905080830192505050505050919291929080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f8201169050808301925050505050509192919290505050611b60565b005b610602600480360360408110156105b557600080fd5b8101908080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f8201169050808301925050505050509192919290505050612987565b005b61060c612f65565b005b610714600480360361012081101561062557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f820116905080830192505050505050919291929080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f820116905080830192505050505050919291929080608001906004806020026040519081016040528092919082600460200280828437600081840152601f19601f8201169050808301925050505050509192919290505050613155565b005b6107626004803603604081101561072c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050613ad5565b6040518082815260200191505060405180910390f35b610780613afd565b6040518082815260200191505060405180910390f35b61079e613b02565b60405180821515815260200191505060405180910390f35b6107be613b15565b6040518082815260200191505060405180910390f35b6107dc613b1b565b005b6107e6613c40565b60405180821515815260200191505060405180910390f35b61084a6004803603604081101561081457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050613c53565b6040518082815260200191505060405180910390f35b610868613c7b565b6040518082815260200191505060405180910390f35b610a046004803603604081101561089457600080fd5b81019080803590602001906401000000008111156108b157600080fd5b8201836020820111156108c357600080fd5b803590602001918460208302840111640100000000831117156108e557600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561094557600080fd5b82018360208201111561095757600080fd5b8035906020019184604083028401116401000000008311171561097957600080fd5b9190808060200260200160405190810160405280939291908181526020016000905b828210156109f2578484839050604002016002806020026040519081016040528092919082600260200280828437600081840152601f19601f8201169050808301925050505050508152602001906001019061099b565b50505050509192919290505050613c81565b005b610be460048036036060811015610a1c57600080fd5b8101908080359060200190640100000000811115610a3957600080fd5b820183602082011115610a4b57600080fd5b80359060200191846020830284011164010000000083111715610a6d57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115610acd57600080fd5b820183602082011115610adf57600080fd5b80359060200191846020830284011164010000000083111715610b0157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115610b6157600080fd5b820183602082011115610b7357600080fd5b80359060200191846020830284011164010000000083111715610b9557600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192905050506143d8565b005b610c3260048036036040811015610bfc57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061466c565b6040518082815260200191505060405180910390f35b610c50614694565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610c90578082015181840152602081019050610c75565b50505050905090810190601f168015610cbd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610cd3614732565b6040518082815260200191505060405180910390f35b610cf1614738565b60405180821515815260200191505060405180910390f35b610d4b60048036036020811015610d1f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061474b565b6040518082815260200191505060405180910390f35b610d69614763565b6040518082815260200191505060405180910390f35b610d87614769565b6040518082815260200191505060405180910390f35b610e41600480360360c0811015610db357600080fd5b8101908080608001906004806020026040519081016040528092919082600460200280828437600081840152601f19601f820116905080830192505050505050919291929080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f82011690508083019250505050505091929192905050506147ed565b005b610e4b614e79565b6040518082815260200191505060405180910390f35b610e69614e7f565b6040518082815260200191505060405180910390f35b610eab60048036036020811015610e9557600080fd5b8101908080359060200190929190505050614e85565b6040518082815260200191505060405180910390f35b610f0360048036036020811015610ed757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050614ea0565b60405180821515815260200191505060405180910390f35b610f4760048036036020811015610f3157600080fd5b8101908080359060200190929190505050614ec0565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610fd660048036036080811015610f8957600080fd5b8101908080608001906004806020026040519081016040528092919082600460200280828437600081840152601f19601f8201169050808301925050505050509192919290505050614eff565b005b61102460048036036040811015610fee57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050615123565b6040518082815260200191505060405180910390f35b600e60039054906101000a900460ff1681565b60135481565b600f5481565b6000601754905090565b601860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611126576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f4e6f7420617574686f72697a656400000000000000000000000000000000000081525060200191505060405180910390fd5b601a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f67187ac6040518060400160405280600981526020017f63727970746f2f763100000000000000000000000000000000000000000000008152506040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156111e95780820151818401526020810190506111ce565b50505050905090810190601f1680156112165780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b15801561123357600080fd5b505afa158015611247573d6000803e3d6000fd5b505050506040513d602081101561125d57600080fd5b8101908080519060200190929190505050601960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550601a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f67187ac6040518060400160405280600d81526020017f76616c696461746f72732f7631000000000000000000000000000000000000008152506040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611371578082015181840152602081019050611356565b50505050905090810190601f16801561139e5780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b1580156113bb57600080fd5b505afa1580156113cf573d6000803e3d6000fd5b505050506040513d60208110156113e557600080fd5b8101908080519060200190929190505050601b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550601a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f67187ac6040518060400160405280601581526020017f76616c696461746f7273536e617073686f742f763100000000000000000000008152506040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156114f95780820151818401526020810190506114de565b50505050905090810190601f1680156115265780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b15801561154357600080fd5b505afa158015611557573d6000803e3d6000fd5b505050506040513d602081101561156d57600080fd5b8101908080519060200190929190505050601c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550601a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f67187ac6040518060400160405280601381526020017f657468646b67436f6d706c6574696f6e2f7631000000000000000000000000008152506040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611681578082015181840152602081019050611666565b50505050905090810190601f1680156116ae5780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b1580156116cb57600080fd5b505afa1580156116df573d6000803e3d6000fd5b505050506040513d60208110156116f557600080fd5b8101908080519060200190929190505050601d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550601a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f67187ac6040518060400160405280601881526020017f657468646b6747726f757041636375736174696f6e2f763100000000000000008152506040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156118095780820151818401526020810190506117ee565b50505050905090810190601f1680156118365780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b15801561185357600080fd5b505afa158015611867573d6000803e3d6000fd5b505050506040513d602081101561187d57600080fd5b8101908080519060200190929190505050601e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550601a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f67187ac6040518060400160405280601281526020017f657468646b675375626d69744d504b2f763100000000000000000000000000008152506040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611991578082015181840152602081019050611976565b50505050905090810190601f1680156119be5780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b1580156119db57600080fd5b505afa1580156119ef573d6000803e3d6000fd5b505050506040513d6020811015611a0557600080fd5b8101908080519060200190929190505050601f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b601860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611b1b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f4e6f7420617574686f72697a656400000000000000000000000000000000000081525060200191505060405180910390fd5b8060178190555050565b60036020528160005260406000208160028110611b4157600080fd5b01600091509150505481565b600e60019054906101000a900460ff1681565b43601054108015611b7357506011544311155b611bc8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806158f96031913960400191505060405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff1660008781548110611bec57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148015611c9c57503373ffffffffffffffffffffffffffffffffffffffff1660008681548110611c5957fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b611cf1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806159bc6025913960400191505060405180910390fd5b6000801b600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415611d405761297e565b838360405160200180838051906020019060200280838360005b83811015611d75578082015181840152602081019050611d5a565b505050509050018280516000925b81841015611dcc5782846020026020010151600260200280838360005b83811015611dbb578082015181840152602081019050611da0565b505050509050019260010192611d83565b925050509250505060405160208183030381529060405280519060200120600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414611e80576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260368152602001806157e76036913960400191505060405180910390fd5b601960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e81ee0e36040518060400160405280600181526020016002815250600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002086866040518663ffffffff1660e01b81526004018086600260200280838360005b83811015611f8f578082015181840152602081019050611f74565b505050509050018560028015611fba576020028201915b815481526020019060010190808311611fa6575b50508460028015611fe0576020028201915b815481526020019060010190808311611fcc575b505083600260200280838360005b83811015612009578082015181840152602081019050611fee565b5050505090500182600260200280838360005b8381101561203757808201518184015260208101905061201c565b505050509050019550505050505060206040518083038186803b15801561205d57600080fd5b505afa158015612071573d6000803e3d6000fd5b505050506040513d602081101561208757600080fd5b81019080805190602001909291905050506120ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180615a28602c913960400191505060405180910390fd5b600080600187019050878710156121195785878151811061210a57fe5b60200260200101519150612133565b85600188038151811061212857fe5b602002602001015191505b60008460006002811061214257fe5b60200201518260405160200180838152602001828152602001925050506040516020818303038152906040528051906020012060001c90508083189250600082905060008760008151811061219357fe5b602002602001015190506000601960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166382688f1460405180606001604052808c6001815181106121f557fe5b602002602001015160006002811061220957fe5b602002015181526020018c60018151811061222057fe5b602002602001015160016002811061223457fe5b60200201518152602001868152506040518263ffffffff1660e01b81526004018082600360200280838360005b8381101561227c578082015181840152602081019050612261565b50505050905001915050604080518083038186803b15801561229d57600080fd5b505afa1580156122b1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525060408110156122d657600080fd5b81019080919050509050601960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e664725b60405180608001604052808560006002811061233657fe5b602002015181526020018560016002811061234d57fe5b602002015181526020018460006002811061236457fe5b602002015181526020018460016002811061237b57fe5b60200201518152506040518263ffffffff1660e01b81526004018082600460200280838360005b838110156123bd5780820151818401526020810190506123a2565b50505050905001915050604080518083038186803b1580156123de57600080fd5b505afa1580156123f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250604081101561241757600080fd5b810190809190505091506000600290505b89518110156126e9577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018061245957fe5b8685099350601960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166382688f1460405180606001604052808d85815181106124b357fe5b60200260200101516000600281106124c757fe5b602002015181526020018d85815181106124dd57fe5b60200260200101516001600281106124f157fe5b60200201518152602001878152506040518263ffffffff1660e01b81526004018082600360200280838360005b8381101561253957808201518184015260208101905061251e565b50505050905001915050604080518083038186803b15801561255a57600080fd5b505afa15801561256e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250604081101561259357600080fd5b81019080919050509150601960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e664725b6040518060800160405280866000600281106125f357fe5b602002015181526020018660016002811061260a57fe5b602002015181526020018560006002811061262157fe5b602002015181526020018560016002811061263857fe5b60200201518152506040518263ffffffff1660e01b81526004018082600460200280838360005b8381101561267a57808201518184015260208101905061265f565b50505050905001915050604080518083038186803b15801561269b57600080fd5b505afa1580156126af573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525060408110156126d457600080fd5b81019080919050509250600181019050612428565b50601960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166382688f1460405180606001604052806001815260200160028152602001898152506040518263ffffffff1660e01b81526004018082600360200280838360005b8381101561277f578082015181840152602081019050612764565b50505050905001915050604080518083038186803b1580156127a057600080fd5b505afa1580156127b4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525060408110156127d957600080fd5b81019080919050509050806000600281106127f057fe5b60200201518260006002811061280257fe5b602002015114158061283657508060016002811061281c57fe5b60200201518260016002811061282e57fe5b602002015114155b156128db57600260008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600090556001600860008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612977565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600090556001600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b5050505050505b50505050505050565b60008160006002811061299657fe5b602002015114156129f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001806159946028913960400191505060405180910390fd5b600081600160028110612a0157fe5b60200201511415612a5d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602881526020018061581d6028913960400191505060405180910390fd5b600f54431115612ab8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603b81526020018061588a603b913960400191505060405180910390fd5b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060028110612b0557fe5b015414612b5d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603d815260200180615763603d913960400191505060405180910390fd5b601960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f4d7d33d826040518263ffffffff1660e01b81526004018082600260200280838360005b83811015612bd6578082015181840152602081019050612bbb565b5050505090500191505060206040518083038186803b158015612bf857600080fd5b505afa158015612c0c573d6000803e3d6000fd5b505050506040513d6020811015612c2257600080fd5b8101908080519060200190929190505050612c88576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603681526020018061592a6036913960400191505060405180910390fd5b601b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166335c6a1636040518163ffffffff1660e01b8152600401602060405180830381600087803b158015612cf257600080fd5b505af1158015612d06573d6000803e3d6000fd5b505050506040513d6020811015612d1c57600080fd5b810190808051906020019092919050505050601b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663facd743b336040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015612db757600080fd5b505afa158015612dcb573d6000803e3d6000fd5b505050506040513d6020811015612de157600080fd5b8101908080519060200190929190505050612e64576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f76616c696461746f72206e6f7420616c6c6f776564000000000000000000000081525060200191505060405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020906002612f15929190615679565b50600160008054905003600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b600080601d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166040516024016040516020818303038152906040527f65c97c01000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b602083106130575780518252602082019150602081019050602083039250613034565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d80600081146130b7576040519150601f19603f3d011682016040523d82523d6000602084013e6130bc565b606091505b509150915081613117576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526031815260200180615a546031913960400191505060405180910390fd5b600081806020019051602081101561312e57600080fd5b8101908080519060200190929190505050905080156131505761314f61514b565b5b505050565b4360115410801561316857506012544311155b6131bd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526045815260200180615b1c6045913960600191505060405180910390fd5b600e60019054906101000a900460ff1661344e5760006001905060005b60008054905081101561341d5760008082815481106131f557fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000801b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141561340f57600860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561336657601b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166357b4f82a826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561334957600080fd5b505af115801561335d573d6000803e3d6000fd5b5050505061340a565b601b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d2a2c55c826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156133f157600080fd5b505af1158015613405573d6000803e3d6000fd5b505050505b600092505b5080806001019150506131da565b50806134315761342b61514b565b50613acf565b6001600e60016101000a81548160ff021916908315150217905550505b6000600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006002811061349b57fe5b0154146134a757613acf565b6000801b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415613542576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526032815260200180615a856032913960400191505060405180910390fd5b601960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e81ee0e360405180604001604052807f062a0ad5cf656709286b38ae4fb927fc901c5f9cf9623bfd0b6d22d30f95a1f381526020017f1b4af7018d896f006d7e5c23d05903b5d2698da94674e546e51f77b6df70ffac815250856040518060400160405280600181526020016002815250600360008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020876040518663ffffffff1660e01b81526004018086600260200280838360005b8381101561366757808201518184015260208101905061364c565b5050505090500185600260200280838360005b8381101561369557808201518184015260208101905061367a565b5050505090500184600260200280838360005b838110156136c35780820151818401526020810190506136a8565b5050505090500183600280156136ee576020028201915b8154815260200190600101908083116136da575b505082600260200280838360005b838110156137175780820151818401526020810190506136fc565b505050509050019550505050505060206040518083038186803b15801561373d57600080fd5b505afa158015613751573d6000803e3d6000fd5b505050506040513d602081101561376757600080fd5b81019080805190602001909291905050506137cd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526034815260200180615ae86034913960400191505060405180910390fd5b61394d604051806101800160405280856000600281106137e957fe5b602002015181526020018560016002811061380057fe5b602002015181526020017f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed81526020017f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec81526020017f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d81526020017f062a0ad5cf656709286b38ae4fb927fc901c5f9cf9623bfd0b6d22d30f95a1f381526020017f1b4af7018d896f006d7e5c23d05903b5d2698da94674e546e51f77b6df70ffac8152602001836000600481106138fb57fe5b602002015181526020018360016004811061391257fe5b602002015181526020018360026004811061392957fe5b602002015181526020018360036004811061394057fe5b60200201518152506155cd565b6139a2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260348152602001806158c56034913960400191505060405180910390fd5b82600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209060026139f0929190615679565b507fb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc84848484604051808573ffffffffffffffffffffffffffffffffffffffff16815260200184600260200280838360005b83811015613a5d578082015181840152602081019050613a42565b5050505090500183600260200280838360005b83811015613a8b578082015181840152602081019050613a70565b5050505090500182600460200280838360005b83811015613ab9578082015181840152602081019050613a9e565b5050505090500194505050505060405180910390a15b50505050565b60066020528160005260406000208160028110613af157600080fd5b01600091509150505481565b600681565b600e60049054906101000a900460ff1681565b60165481565b601860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480613bc45750601b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b613c36576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f4e6f7420617574686f72697a656400000000000000000000000000000000000081525060200191505060405180910390fd5b613c3e61514b565b565b600e60029054906101000a900460ff1681565b60016020528160005260406000208160028110613c6f57600080fd5b01600091509150505481565b60145481565b43600f54108015613c9457506010544311155b613ce9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260478152602001806157a06047913960600191505060405180910390fd5b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060028110613d3657fe5b0154148015613d9157506000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600160028110613d8d57fe5b0154145b613e03576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f73686172657320616c726561647920646973747269627574656400000000000081525060200191505060405180910390fd5b600e60009054906101000a900460ff16613e4e5760046000805490501015613e3257613e2d61514b565b6143d4565b6001600e60006101000a81548160ff0219169083151502179055505b600080805490509050600060038281613e6357fe5b049050600081600202905081600302830360021415613e83576001810190505b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060028110613ed057fe5b01541415613f29576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603f815260200180615bab603f913960400191505060405180910390fd5b60018303855114613f85576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260478152602001806159e16047913960600191505060405180910390fd5b60018101845114613fe1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603b815260200180615bea603b913960400191505060405180910390fd5b600091505b80821161413657601960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f4d7d33d85848151811061403757fe5b60200260200101516040518263ffffffff1660e01b81526004018082600260200280838360005b8381101561407957808201518184015260208101905061405e565b5050505090500191505060206040518083038186803b15801561409b57600080fd5b505afa1580156140af573d6000803e3d6000fd5b505050506040513d60208110156140c557600080fd5b810190808051906020019092919050505061412b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526035815260200180615c546035913960400191505060405180910390fd5b600182019150613fe6565b848460405160200180838051906020019060200280838360005b8381101561416b578082015181840152602081019050614150565b505050509050018280516000925b818410156141c25782846020026020010151600260200280838360005b838110156141b1578082015181840152602081019050614196565b505050509050019260010192614179565b925050509250505060405160208183030381529060405280519060200120600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508360008151811061423057fe5b6020026020010151600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020906002614285929190615679565b507fa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10336001600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054018787604051808573ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561435657808201518184015260208101905061433b565b505050509050018381038252848181518152602001915080516000925b818410156143bc5782846020026020010151600260200280838360005b838110156143ab578082015181840152602081019050614390565b505050509050019260010192614373565b92505050965050505050505060405180910390a15050505b5050565b6000601e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1684848460405160240180806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b83811015614464578082015181840152602081019050614449565b50505050905001848103835286818151815260200191508051906020019060200280838360005b838110156144a657808201518184015260208101905061448b565b50505050905001848103825285818151815260200191508051906020019060200280838360005b838110156144e85780820151818401526020810190506144cd565b5050505090500196505050505050506040516020818303038152906040527fa6872833000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b602083106145a75780518252602082019150602081019050602083039250614584565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d8060008114614607576040519150601f19603f3d011682016040523d82523d6000602084013e61460c565b606091505b5050905080614666576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526031815260200180615ab76031913960400191505060405180910390fd5b50505050565b6004602052816000526040600020816002811061468857600080fd5b01600091509150505481565b600d8054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561472a5780601f106146ff5761010080835404028352916020019161472a565b820191906000526020600020905b81548152906001019060200180831161470d57829003601f168201915b505050505081565b60155481565b600e60009054906101000a900460ff1681565b60026020528060005260406000206000915090505481565b60115481565b6000600f5443116147e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f726567697374726174696f6e206e6f7420636f6d706c6574650000000000000081525060200191505060405180910390fd5b600080549050905090565b4360135410801561480057506014544311155b614855576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260458152602001806158456045913960600191505060405180910390fd5b600e60039054906101000a900460ff166148fb576000600960006004811061487957fe5b015414801561489757506000600960016004811061489357fe5b0154145b80156148b25750600060096002600481106148ae57fe5b0154145b80156148cd5750600060096003600481106148c957fe5b0154145b156148df576148da61514b565b614e75565b6001600e60036101000a81548160ff0219169083151502179055505b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006004811061494857fe5b01541480156149a357506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060016004811061499f57fe5b0154145b80156149fb57506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002600481106149f757fe5b0154145b8015614a5357506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600360048110614a4f57fe5b0154145b614aa8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f815260200180615c25602f913960400191505060405180910390fd5b601960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f4d7d33d826040518263ffffffff1660e01b81526004018082600260200280838360005b83811015614b21578082015181840152602081019050614b06565b5050505090500191505060206040518083038186803b158015614b4357600080fd5b505afa158015614b57573d6000803e3d6000fd5b505050506040513d6020811015614b6d57600080fd5b8101908080519060200190929190505050614bf0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f496e76616c6964207369676e617475726520286e6f74206f6e2063757276652981525060200191505060405180910390fd5b601960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306367587600d83856040518463ffffffff1660e01b8152600401808060200184600260200280838360005b83811015614c70578082015181840152602081019050614c55565b5050505090500183600460200280838360005b83811015614c9e578082015181840152602081019050614c83565b50505050905001828103825285818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015614d265780601f10614cfb57610100808354040283529160200191614d26565b820191906000526020600020905b815481529060010190602001808311614d0957829003601f168201915b505094505050505060206040518083038186803b158015614d4657600080fd5b505afa158015614d5a573d6000803e3d6000fd5b505050506040513d6020811015614d7057600080fd5b8101908080519060200190929190505050614dd6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252604a815260200180615b61604a913960600191505060405180910390fd5b81600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020906004614e249291906156b9565b5080600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020906002614e73929190615679565b505b5050565b60105481565b60125481565b60098160048110614e9557600080fd5b016000915090505481565b60086020528060005260406000206000915054906101000a900460ff1681565b60008181548110614ed057600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080601f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16836040516024018082600460200280838360005b83811015614f6a578082015181840152602081019050614f4f565b505050509050019150506040516020818303038152906040527ff47ae6a9000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b602083106150245780518252602082019150602081019050602083039250615001565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d8060008114615084576040519150601f19603f3d011682016040523d82523d6000602084013e615089565b606091505b5091509150816150e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260348152602001806159606034913960400191505060405180910390fd5b60008180602001905160208110156150fb57600080fd5b81019080805190602001909291905050509050801561511d5761511c61514b565b5b50505050565b6005602052816000526040600020816004811061513f57600080fd5b01600091509150505481565b60004390506017548101600f819055506017546006600f5401016010819055506017546006601054010160118190555060175460066011540101601281905550601754600660125401016013819055506017546006601354010160148190555060175460066014540101601581905550601754600660155401016016819055507f9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e9781600f54601054601154601254601354601454601554601654604051808a8152602001898152602001888152602001878152602001868152602001858152602001848152602001838152602001828152602001995050505050505050505060405180910390a16000600e60006101000a81548160ff0219169083151502179055506000600e60016101000a81548160ff0219169083151502179055506000600e60026101000a81548160ff0219169083151502179055506000600e60036101000a81548160ff0219169083151502179055506000600e60046101000a81548160ff021916908315150217905550600960006152e791906156f9565b5b6000808054905011156155ca576000806001600080549050038154811061530b57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006153839190615715565b600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009055600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006154119190615715565b600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600061545c9190615715565b600560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006154a791906156f9565b600660008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006154f29190615715565b600860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff0219169055600760008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009055600080548061558f57fe5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055506152e8565b50565b60006155d7615723565b6000602082610180866008600019fa90508061565b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f656c6c69707469632063757276652070616972696e67206661696c656400000081525060200191505060405180910390fd5b60018260006001811061566a57fe5b60200201511492505050919050565b82600281019282156156a8579160200282015b828111156156a757825182559160200191906001019061568c565b5b5090506156b59190615745565b5090565b82600481019282156156e8579160200282015b828111156156e75782518255916020019190600101906156cc565b5b5090506156f59190615745565b5090565b5060008155600101600081556001016000815560010160009055565b506000815560010160009055565b6040518060200160405280600190602082028036833780820191505090505090565b5b8082111561575e576000816000905550600101615746565b509056fe726567697374726174696f6e206661696c656420286163636f756e7420616c726561647920726567697374657265642061207075626c6963206b657929736861726520646973747269627574696f6e206661696c65642028636f6e7472616374206973206e6f7420696e20736861726520646973747269627574696f6e2070686173652964697370757465206661696c65642028696e76616c6964207265706c6179206f662073686172696e67207472616e73616374696f6e29726567697374726174696f6e206661696c656420287075626c6963206b65795b315d203d3d20302967706b6a206b6579207375626d697373696f6e206661696c65642028636f6e7472616374206973206e6f7420696e2067706b6a2064657269766174696f6e20706861736529726567697374726174696f6e206661696c65642028636f6e7472616374206973206e6f7420696e20726567697374726174696f6e207068617365296b6579207368617265207375626d697373696f6e206661696c65642028696e76616c6964206b657920736861726520284732292964697370757465206661696c65642028636f6e7472616374206973206e6f7420696e206469737075746520706861736529726567697374726174696f6e206661696c656420287075626c6963206b6579206e6f74206f6e20656c6c69707469632063757276652964656c6567617465642063616c6c206661696c656420666f72207375626d69745f6d61737465725f7075626c69635f6b65792829726567697374726174696f6e206661696c656420287075626c6963206b65795b305d203d3d20302964697370757465206661696c65642028696e76616c6964206c69737420696e646963657329736861726520646973747269627574696f6e206661696c65642028696e76616c6964206e756d626572206f6620656e63727970746564207368617265732070726f76696465642964697370757465206661696c65642028696e76616c696420736861726564206b6579206f722070726f6f662964656c6567617465642063616c6c206661696c656420666f72205375636365737366756c5f436f6d706c6574696f6e28296b6579207368617265207375626d697373696f6e206661696c65642028697373756572206e6f74207175616c69666965642964656c6567617465642063616c6c206661696c656420666f722047726f75705f41636375736174696f6e5f47504b6a28296b6579207368617265207375626d697373696f6e206661696c65642028696e76616c6964206b65792073686172652028473129296b6579207368617265207375626d697373696f6e206661696c65642028636f6e7472616374206973206e6f7420696e206b65792064657269766174696f6e2070686173652947504b6a207375626d697373696f6e206661696c656420287369676e617475726520766572696669636174696f6e206661696c65642064756520746f20696e76616c69642067706b6a29736861726520646973747269627574696f6e206661696c65642028657468657265756d206163636f756e7420686173206e6f742072656769737465726564296b65792073686172696e67206661696c65642028696e76616c6964206e756d626572206f6620636f6d6d69746d656e74732070726f76696465642947504b6a207375626d697373696f6e206661696c65642028616c7265616479207375626d69747465642067706b6a296b65792073686172696e67206661696c65642028636f6d6d69746d656e74206e6f74206f6e20656c6c697074696320637572766529a26469706673582212202040b256d368b4762930937582f2c8cdc18441ca6130f2bf94a042586edbf07064736f6c63430007060033"

// DeployETHDKG deploys a new Ethereum contract, binding an instance of ETHDKG to it.
func DeployETHDKG(auth *bind.TransactOpts, backend bind.ContractBackend, registry_ common.Address) (common.Address, *types.Transaction, *ETHDKG, error) {
	parsed, err := abi.JSON(strings.NewReader(ETHDKGABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ETHDKGBin), backend, registry_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ETHDKG{ETHDKGCaller: ETHDKGCaller{contract: contract}, ETHDKGTransactor: ETHDKGTransactor{contract: contract}, ETHDKGFilterer: ETHDKGFilterer{contract: contract}}, nil
}

// ETHDKG is an auto generated Go binding around an Ethereum contract.
type ETHDKG struct {
	ETHDKGCaller     // Read-only binding to the contract
	ETHDKGTransactor // Write-only binding to the contract
	ETHDKGFilterer   // Log filterer for contract events
}

// ETHDKGCaller is an auto generated read-only Go binding around an Ethereum contract.
type ETHDKGCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ETHDKGTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ETHDKGFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ETHDKGSession struct {
	Contract     *ETHDKG           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ETHDKGCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ETHDKGCallerSession struct {
	Contract *ETHDKGCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ETHDKGTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ETHDKGTransactorSession struct {
	Contract     *ETHDKGTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ETHDKGRaw is an auto generated low-level Go binding around an Ethereum contract.
type ETHDKGRaw struct {
	Contract *ETHDKG // Generic contract binding to access the raw methods on
}

// ETHDKGCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ETHDKGCallerRaw struct {
	Contract *ETHDKGCaller // Generic read-only contract binding to access the raw methods on
}

// ETHDKGTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ETHDKGTransactorRaw struct {
	Contract *ETHDKGTransactor // Generic write-only contract binding to access the raw methods on
}

// NewETHDKG creates a new instance of ETHDKG, bound to a specific deployed contract.
func NewETHDKG(address common.Address, backend bind.ContractBackend) (*ETHDKG, error) {
	contract, err := bindETHDKG(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ETHDKG{ETHDKGCaller: ETHDKGCaller{contract: contract}, ETHDKGTransactor: ETHDKGTransactor{contract: contract}, ETHDKGFilterer: ETHDKGFilterer{contract: contract}}, nil
}

// NewETHDKGCaller creates a new read-only instance of ETHDKG, bound to a specific deployed contract.
func NewETHDKGCaller(address common.Address, caller bind.ContractCaller) (*ETHDKGCaller, error) {
	contract, err := bindETHDKG(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ETHDKGCaller{contract: contract}, nil
}

// NewETHDKGTransactor creates a new write-only instance of ETHDKG, bound to a specific deployed contract.
func NewETHDKGTransactor(address common.Address, transactor bind.ContractTransactor) (*ETHDKGTransactor, error) {
	contract, err := bindETHDKG(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ETHDKGTransactor{contract: contract}, nil
}

// NewETHDKGFilterer creates a new log filterer instance of ETHDKG, bound to a specific deployed contract.
func NewETHDKGFilterer(address common.Address, filterer bind.ContractFilterer) (*ETHDKGFilterer, error) {
	contract, err := bindETHDKG(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ETHDKGFilterer{contract: contract}, nil
}

// bindETHDKG binds a generic wrapper to an already deployed contract.
func bindETHDKG(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ETHDKGABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETHDKG *ETHDKGRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ETHDKG.Contract.ETHDKGCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETHDKG *ETHDKGRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKG.Contract.ETHDKGTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETHDKG *ETHDKGRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETHDKG.Contract.ETHDKGTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETHDKG *ETHDKGCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ETHDKG.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETHDKG *ETHDKGTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKG.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETHDKG *ETHDKGTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETHDKG.Contract.contract.Transact(opts, method, params...)
}

// DELTACONFIRM is a free data retrieval call binding the contract method 0x7543b80f.
//
// Solidity: function DELTA_CONFIRM() view returns(uint256)
func (_ETHDKG *ETHDKGCaller) DELTACONFIRM(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKG.contract.Call(opts, out, "DELTA_CONFIRM")
	return *ret0, err
}

// DELTACONFIRM is a free data retrieval call binding the contract method 0x7543b80f.
//
// Solidity: function DELTA_CONFIRM() view returns(uint256)
func (_ETHDKG *ETHDKGSession) DELTACONFIRM() (*big.Int, error) {
	return _ETHDKG.Contract.DELTACONFIRM(&_ETHDKG.CallOpts)
}

// DELTACONFIRM is a free data retrieval call binding the contract method 0x7543b80f.
//
// Solidity: function DELTA_CONFIRM() view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) DELTACONFIRM() (*big.Int, error) {
	return _ETHDKG.Contract.DELTACONFIRM(&_ETHDKG.CallOpts)
}

// TDISPUTEEND is a free data retrieval call binding the contract method 0xd3cf6186.
//
// Solidity: function T_DISPUTE_END() view returns(uint256)
func (_ETHDKG *ETHDKGCaller) TDISPUTEEND(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKG.contract.Call(opts, out, "T_DISPUTE_END")
	return *ret0, err
}

// TDISPUTEEND is a free data retrieval call binding the contract method 0xd3cf6186.
//
// Solidity: function T_DISPUTE_END() view returns(uint256)
func (_ETHDKG *ETHDKGSession) TDISPUTEEND() (*big.Int, error) {
	return _ETHDKG.Contract.TDISPUTEEND(&_ETHDKG.CallOpts)
}

// TDISPUTEEND is a free data retrieval call binding the contract method 0xd3cf6186.
//
// Solidity: function T_DISPUTE_END() view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) TDISPUTEEND() (*big.Int, error) {
	return _ETHDKG.Contract.TDISPUTEEND(&_ETHDKG.CallOpts)
}

// TDKGCOMPLETE is a free data retrieval call binding the contract method 0x77fbebd1.
//
// Solidity: function T_DKG_COMPLETE() view returns(uint256)
func (_ETHDKG *ETHDKGCaller) TDKGCOMPLETE(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKG.contract.Call(opts, out, "T_DKG_COMPLETE")
	return *ret0, err
}

// TDKGCOMPLETE is a free data retrieval call binding the contract method 0x77fbebd1.
//
// Solidity: function T_DKG_COMPLETE() view returns(uint256)
func (_ETHDKG *ETHDKGSession) TDKGCOMPLETE() (*big.Int, error) {
	return _ETHDKG.Contract.TDKGCOMPLETE(&_ETHDKG.CallOpts)
}

// TDKGCOMPLETE is a free data retrieval call binding the contract method 0x77fbebd1.
//
// Solidity: function T_DKG_COMPLETE() view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) TDKGCOMPLETE() (*big.Int, error) {
	return _ETHDKG.Contract.TDKGCOMPLETE(&_ETHDKG.CallOpts)
}

// TGPKJDISPUTEEND is a free data retrieval call binding the contract method 0xab63c722.
//
// Solidity: function T_GPKJ_DISPUTE_END() view returns(uint256)
func (_ETHDKG *ETHDKGCaller) TGPKJDISPUTEEND(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKG.contract.Call(opts, out, "T_GPKJ_DISPUTE_END")
	return *ret0, err
}

// TGPKJDISPUTEEND is a free data retrieval call binding the contract method 0xab63c722.
//
// Solidity: function T_GPKJ_DISPUTE_END() view returns(uint256)
func (_ETHDKG *ETHDKGSession) TGPKJDISPUTEEND() (*big.Int, error) {
	return _ETHDKG.Contract.TGPKJDISPUTEEND(&_ETHDKG.CallOpts)
}

// TGPKJDISPUTEEND is a free data retrieval call binding the contract method 0xab63c722.
//
// Solidity: function T_GPKJ_DISPUTE_END() view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) TGPKJDISPUTEEND() (*big.Int, error) {
	return _ETHDKG.Contract.TGPKJDISPUTEEND(&_ETHDKG.CallOpts)
}

// TGPKJSUBMISSIONEND is a free data retrieval call binding the contract method 0x9c2aa838.
//
// Solidity: function T_GPKJ_SUBMISSION_END() view returns(uint256)
func (_ETHDKG *ETHDKGCaller) TGPKJSUBMISSIONEND(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKG.contract.Call(opts, out, "T_GPKJ_SUBMISSION_END")
	return *ret0, err
}

// TGPKJSUBMISSIONEND is a free data retrieval call binding the contract method 0x9c2aa838.
//
// Solidity: function T_GPKJ_SUBMISSION_END() view returns(uint256)
func (_ETHDKG *ETHDKGSession) TGPKJSUBMISSIONEND() (*big.Int, error) {
	return _ETHDKG.Contract.TGPKJSUBMISSIONEND(&_ETHDKG.CallOpts)
}

// TGPKJSUBMISSIONEND is a free data retrieval call binding the contract method 0x9c2aa838.
//
// Solidity: function T_GPKJ_SUBMISSION_END() view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) TGPKJSUBMISSIONEND() (*big.Int, error) {
	return _ETHDKG.Contract.TGPKJSUBMISSIONEND(&_ETHDKG.CallOpts)
}

// TKEYSHARESUBMISSIONEND is a free data retrieval call binding the contract method 0xe2291ec3.
//
// Solidity: function T_KEY_SHARE_SUBMISSION_END() view returns(uint256)
func (_ETHDKG *ETHDKGCaller) TKEYSHARESUBMISSIONEND(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKG.contract.Call(opts, out, "T_KEY_SHARE_SUBMISSION_END")
	return *ret0, err
}

// TKEYSHARESUBMISSIONEND is a free data retrieval call binding the contract method 0xe2291ec3.
//
// Solidity: function T_KEY_SHARE_SUBMISSION_END() view returns(uint256)
func (_ETHDKG *ETHDKGSession) TKEYSHARESUBMISSIONEND() (*big.Int, error) {
	return _ETHDKG.Contract.TKEYSHARESUBMISSIONEND(&_ETHDKG.CallOpts)
}

// TKEYSHARESUBMISSIONEND is a free data retrieval call binding the contract method 0xe2291ec3.
//
// Solidity: function T_KEY_SHARE_SUBMISSION_END() view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) TKEYSHARESUBMISSIONEND() (*big.Int, error) {
	return _ETHDKG.Contract.TKEYSHARESUBMISSIONEND(&_ETHDKG.CallOpts)
}

// TMPKSUBMISSIONEND is a free data retrieval call binding the contract method 0x07f02c54.
//
// Solidity: function T_MPK_SUBMISSION_END() view returns(uint256)
func (_ETHDKG *ETHDKGCaller) TMPKSUBMISSIONEND(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKG.contract.Call(opts, out, "T_MPK_SUBMISSION_END")
	return *ret0, err
}

// TMPKSUBMISSIONEND is a free data retrieval call binding the contract method 0x07f02c54.
//
// Solidity: function T_MPK_SUBMISSION_END() view returns(uint256)
func (_ETHDKG *ETHDKGSession) TMPKSUBMISSIONEND() (*big.Int, error) {
	return _ETHDKG.Contract.TMPKSUBMISSIONEND(&_ETHDKG.CallOpts)
}

// TMPKSUBMISSIONEND is a free data retrieval call binding the contract method 0x07f02c54.
//
// Solidity: function T_MPK_SUBMISSION_END() view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) TMPKSUBMISSIONEND() (*big.Int, error) {
	return _ETHDKG.Contract.TMPKSUBMISSIONEND(&_ETHDKG.CallOpts)
}

// TREGISTRATIONEND is a free data retrieval call binding the contract method 0x0de1553f.
//
// Solidity: function T_REGISTRATION_END() view returns(uint256)
func (_ETHDKG *ETHDKGCaller) TREGISTRATIONEND(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKG.contract.Call(opts, out, "T_REGISTRATION_END")
	return *ret0, err
}

// TREGISTRATIONEND is a free data retrieval call binding the contract method 0x0de1553f.
//
// Solidity: function T_REGISTRATION_END() view returns(uint256)
func (_ETHDKG *ETHDKGSession) TREGISTRATIONEND() (*big.Int, error) {
	return _ETHDKG.Contract.TREGISTRATIONEND(&_ETHDKG.CallOpts)
}

// TREGISTRATIONEND is a free data retrieval call binding the contract method 0x0de1553f.
//
// Solidity: function T_REGISTRATION_END() view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) TREGISTRATIONEND() (*big.Int, error) {
	return _ETHDKG.Contract.TREGISTRATIONEND(&_ETHDKG.CallOpts)
}

// TSHAREDISTRIBUTIONEND is a free data retrieval call binding the contract method 0xdc614e28.
//
// Solidity: function T_SHARE_DISTRIBUTION_END() view returns(uint256)
func (_ETHDKG *ETHDKGCaller) TSHAREDISTRIBUTIONEND(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKG.contract.Call(opts, out, "T_SHARE_DISTRIBUTION_END")
	return *ret0, err
}

// TSHAREDISTRIBUTIONEND is a free data retrieval call binding the contract method 0xdc614e28.
//
// Solidity: function T_SHARE_DISTRIBUTION_END() view returns(uint256)
func (_ETHDKG *ETHDKGSession) TSHAREDISTRIBUTIONEND() (*big.Int, error) {
	return _ETHDKG.Contract.TSHAREDISTRIBUTIONEND(&_ETHDKG.CallOpts)
}

// TSHAREDISTRIBUTIONEND is a free data retrieval call binding the contract method 0xdc614e28.
//
// Solidity: function T_SHARE_DISTRIBUTION_END() view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) TSHAREDISTRIBUTIONEND() (*big.Int, error) {
	return _ETHDKG.Contract.TSHAREDISTRIBUTIONEND(&_ETHDKG.CallOpts)
}

// Addresses is a free data retrieval call binding the contract method 0xedf26d9b.
//
// Solidity: function addresses(uint256 ) view returns(address)
func (_ETHDKG *ETHDKGCaller) Addresses(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ETHDKG.contract.Call(opts, out, "addresses", arg0)
	return *ret0, err
}

// Addresses is a free data retrieval call binding the contract method 0xedf26d9b.
//
// Solidity: function addresses(uint256 ) view returns(address)
func (_ETHDKG *ETHDKGSession) Addresses(arg0 *big.Int) (common.Address, error) {
	return _ETHDKG.Contract.Addresses(&_ETHDKG.CallOpts, arg0)
}

// Addresses is a free data retrieval call binding the contract method 0xedf26d9b.
//
// Solidity: function addresses(uint256 ) view returns(address)
func (_ETHDKG *ETHDKGCallerSession) Addresses(arg0 *big.Int) (common.Address, error) {
	return _ETHDKG.Contract.Addresses(&_ETHDKG.CallOpts, arg0)
}

// Commitments1stCoefficient is a free data retrieval call binding the contract method 0x2cf4050b.
//
// Solidity: function commitments_1st_coefficient(address , uint256 ) view returns(uint256)
func (_ETHDKG *ETHDKGCaller) Commitments1stCoefficient(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKG.contract.Call(opts, out, "commitments_1st_coefficient", arg0, arg1)
	return *ret0, err
}

// Commitments1stCoefficient is a free data retrieval call binding the contract method 0x2cf4050b.
//
// Solidity: function commitments_1st_coefficient(address , uint256 ) view returns(uint256)
func (_ETHDKG *ETHDKGSession) Commitments1stCoefficient(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _ETHDKG.Contract.Commitments1stCoefficient(&_ETHDKG.CallOpts, arg0, arg1)
}

// Commitments1stCoefficient is a free data retrieval call binding the contract method 0x2cf4050b.
//
// Solidity: function commitments_1st_coefficient(address , uint256 ) view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) Commitments1stCoefficient(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _ETHDKG.Contract.Commitments1stCoefficient(&_ETHDKG.CallOpts, arg0, arg1)
}

// CompletionCheck is a free data retrieval call binding the contract method 0x75f7ed6a.
//
// Solidity: function completion_check() view returns(bool)
func (_ETHDKG *ETHDKGCaller) CompletionCheck(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ETHDKG.contract.Call(opts, out, "completion_check")
	return *ret0, err
}

// CompletionCheck is a free data retrieval call binding the contract method 0x75f7ed6a.
//
// Solidity: function completion_check() view returns(bool)
func (_ETHDKG *ETHDKGSession) CompletionCheck() (bool, error) {
	return _ETHDKG.Contract.CompletionCheck(&_ETHDKG.CallOpts)
}

// CompletionCheck is a free data retrieval call binding the contract method 0x75f7ed6a.
//
// Solidity: function completion_check() view returns(bool)
func (_ETHDKG *ETHDKGCallerSession) CompletionCheck() (bool, error) {
	return _ETHDKG.Contract.CompletionCheck(&_ETHDKG.CallOpts)
}

// GetPhaseLength is a free data retrieval call binding the contract method 0x106da57d.
//
// Solidity: function getPhaseLength() view returns(uint256)
func (_ETHDKG *ETHDKGCaller) GetPhaseLength(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKG.contract.Call(opts, out, "getPhaseLength")
	return *ret0, err
}

// GetPhaseLength is a free data retrieval call binding the contract method 0x106da57d.
//
// Solidity: function getPhaseLength() view returns(uint256)
func (_ETHDKG *ETHDKGSession) GetPhaseLength() (*big.Int, error) {
	return _ETHDKG.Contract.GetPhaseLength(&_ETHDKG.CallOpts)
}

// GetPhaseLength is a free data retrieval call binding the contract method 0x106da57d.
//
// Solidity: function getPhaseLength() view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) GetPhaseLength() (*big.Int, error) {
	return _ETHDKG.Contract.GetPhaseLength(&_ETHDKG.CallOpts)
}

// GpkjSubmissions is a free data retrieval call binding the contract method 0xfef001a9.
//
// Solidity: function gpkj_submissions(address , uint256 ) view returns(uint256)
func (_ETHDKG *ETHDKGCaller) GpkjSubmissions(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKG.contract.Call(opts, out, "gpkj_submissions", arg0, arg1)
	return *ret0, err
}

// GpkjSubmissions is a free data retrieval call binding the contract method 0xfef001a9.
//
// Solidity: function gpkj_submissions(address , uint256 ) view returns(uint256)
func (_ETHDKG *ETHDKGSession) GpkjSubmissions(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _ETHDKG.Contract.GpkjSubmissions(&_ETHDKG.CallOpts, arg0, arg1)
}

// GpkjSubmissions is a free data retrieval call binding the contract method 0xfef001a9.
//
// Solidity: function gpkj_submissions(address , uint256 ) view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) GpkjSubmissions(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _ETHDKG.Contract.GpkjSubmissions(&_ETHDKG.CallOpts, arg0, arg1)
}

// InitialMessage is a free data retrieval call binding the contract method 0xaa7bd338.
//
// Solidity: function initial_message() view returns(bytes)
func (_ETHDKG *ETHDKGCaller) InitialMessage(opts *bind.CallOpts) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _ETHDKG.contract.Call(opts, out, "initial_message")
	return *ret0, err
}

// InitialMessage is a free data retrieval call binding the contract method 0xaa7bd338.
//
// Solidity: function initial_message() view returns(bytes)
func (_ETHDKG *ETHDKGSession) InitialMessage() ([]byte, error) {
	return _ETHDKG.Contract.InitialMessage(&_ETHDKG.CallOpts)
}

// InitialMessage is a free data retrieval call binding the contract method 0xaa7bd338.
//
// Solidity: function initial_message() view returns(bytes)
func (_ETHDKG *ETHDKGCallerSession) InitialMessage() ([]byte, error) {
	return _ETHDKG.Contract.InitialMessage(&_ETHDKG.CallOpts)
}

// InitialSignatures is a free data retrieval call binding the contract method 0x7328f826.
//
// Solidity: function initial_signatures(address , uint256 ) view returns(uint256)
func (_ETHDKG *ETHDKGCaller) InitialSignatures(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKG.contract.Call(opts, out, "initial_signatures", arg0, arg1)
	return *ret0, err
}

// InitialSignatures is a free data retrieval call binding the contract method 0x7328f826.
//
// Solidity: function initial_signatures(address , uint256 ) view returns(uint256)
func (_ETHDKG *ETHDKGSession) InitialSignatures(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _ETHDKG.Contract.InitialSignatures(&_ETHDKG.CallOpts, arg0, arg1)
}

// InitialSignatures is a free data retrieval call binding the contract method 0x7328f826.
//
// Solidity: function initial_signatures(address , uint256 ) view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) InitialSignatures(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _ETHDKG.Contract.InitialSignatures(&_ETHDKG.CallOpts, arg0, arg1)
}

// IsMalicious is a free data retrieval call binding the contract method 0xeadfcadc.
//
// Solidity: function is_malicious(address ) view returns(bool)
func (_ETHDKG *ETHDKGCaller) IsMalicious(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ETHDKG.contract.Call(opts, out, "is_malicious", arg0)
	return *ret0, err
}

// IsMalicious is a free data retrieval call binding the contract method 0xeadfcadc.
//
// Solidity: function is_malicious(address ) view returns(bool)
func (_ETHDKG *ETHDKGSession) IsMalicious(arg0 common.Address) (bool, error) {
	return _ETHDKG.Contract.IsMalicious(&_ETHDKG.CallOpts, arg0)
}

// IsMalicious is a free data retrieval call binding the contract method 0xeadfcadc.
//
// Solidity: function is_malicious(address ) view returns(bool)
func (_ETHDKG *ETHDKGCallerSession) IsMalicious(arg0 common.Address) (bool, error) {
	return _ETHDKG.Contract.IsMalicious(&_ETHDKG.CallOpts, arg0)
}

// KeyShareSubmissionCheck is a free data retrieval call binding the contract method 0x836889dc.
//
// Solidity: function key_share_submission_check() view returns(bool)
func (_ETHDKG *ETHDKGCaller) KeyShareSubmissionCheck(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ETHDKG.contract.Call(opts, out, "key_share_submission_check")
	return *ret0, err
}

// KeyShareSubmissionCheck is a free data retrieval call binding the contract method 0x836889dc.
//
// Solidity: function key_share_submission_check() view returns(bool)
func (_ETHDKG *ETHDKGSession) KeyShareSubmissionCheck() (bool, error) {
	return _ETHDKG.Contract.KeyShareSubmissionCheck(&_ETHDKG.CallOpts)
}

// KeyShareSubmissionCheck is a free data retrieval call binding the contract method 0x836889dc.
//
// Solidity: function key_share_submission_check() view returns(bool)
func (_ETHDKG *ETHDKGCallerSession) KeyShareSubmissionCheck() (bool, error) {
	return _ETHDKG.Contract.KeyShareSubmissionCheck(&_ETHDKG.CallOpts)
}

// KeyShares is a free data retrieval call binding the contract method 0xa88c9e1c.
//
// Solidity: function key_shares(address , uint256 ) view returns(uint256)
func (_ETHDKG *ETHDKGCaller) KeyShares(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKG.contract.Call(opts, out, "key_shares", arg0, arg1)
	return *ret0, err
}

// KeyShares is a free data retrieval call binding the contract method 0xa88c9e1c.
//
// Solidity: function key_shares(address , uint256 ) view returns(uint256)
func (_ETHDKG *ETHDKGSession) KeyShares(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _ETHDKG.Contract.KeyShares(&_ETHDKG.CallOpts, arg0, arg1)
}

// KeyShares is a free data retrieval call binding the contract method 0xa88c9e1c.
//
// Solidity: function key_shares(address , uint256 ) view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) KeyShares(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _ETHDKG.Contract.KeyShares(&_ETHDKG.CallOpts, arg0, arg1)
}

// MasterPublicKey is a free data retrieval call binding the contract method 0xe6511378.
//
// Solidity: function master_public_key(uint256 ) view returns(uint256)
func (_ETHDKG *ETHDKGCaller) MasterPublicKey(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKG.contract.Call(opts, out, "master_public_key", arg0)
	return *ret0, err
}

// MasterPublicKey is a free data retrieval call binding the contract method 0xe6511378.
//
// Solidity: function master_public_key(uint256 ) view returns(uint256)
func (_ETHDKG *ETHDKGSession) MasterPublicKey(arg0 *big.Int) (*big.Int, error) {
	return _ETHDKG.Contract.MasterPublicKey(&_ETHDKG.CallOpts, arg0)
}

// MasterPublicKey is a free data retrieval call binding the contract method 0xe6511378.
//
// Solidity: function master_public_key(uint256 ) view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) MasterPublicKey(arg0 *big.Int) (*big.Int, error) {
	return _ETHDKG.Contract.MasterPublicKey(&_ETHDKG.CallOpts, arg0)
}

// MpkSubmissionCheck is a free data retrieval call binding the contract method 0x050a54f0.
//
// Solidity: function mpk_submission_check() view returns(bool)
func (_ETHDKG *ETHDKGCaller) MpkSubmissionCheck(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ETHDKG.contract.Call(opts, out, "mpk_submission_check")
	return *ret0, err
}

// MpkSubmissionCheck is a free data retrieval call binding the contract method 0x050a54f0.
//
// Solidity: function mpk_submission_check() view returns(bool)
func (_ETHDKG *ETHDKGSession) MpkSubmissionCheck() (bool, error) {
	return _ETHDKG.Contract.MpkSubmissionCheck(&_ETHDKG.CallOpts)
}

// MpkSubmissionCheck is a free data retrieval call binding the contract method 0x050a54f0.
//
// Solidity: function mpk_submission_check() view returns(bool)
func (_ETHDKG *ETHDKGCallerSession) MpkSubmissionCheck() (bool, error) {
	return _ETHDKG.Contract.MpkSubmissionCheck(&_ETHDKG.CallOpts)
}

// NumberOfRegistrations is a free data retrieval call binding the contract method 0xd8f63eb7.
//
// Solidity: function numberOfRegistrations() view returns(uint256)
func (_ETHDKG *ETHDKGCaller) NumberOfRegistrations(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKG.contract.Call(opts, out, "numberOfRegistrations")
	return *ret0, err
}

// NumberOfRegistrations is a free data retrieval call binding the contract method 0xd8f63eb7.
//
// Solidity: function numberOfRegistrations() view returns(uint256)
func (_ETHDKG *ETHDKGSession) NumberOfRegistrations() (*big.Int, error) {
	return _ETHDKG.Contract.NumberOfRegistrations(&_ETHDKG.CallOpts)
}

// NumberOfRegistrations is a free data retrieval call binding the contract method 0xd8f63eb7.
//
// Solidity: function numberOfRegistrations() view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) NumberOfRegistrations() (*big.Int, error) {
	return _ETHDKG.Contract.NumberOfRegistrations(&_ETHDKG.CallOpts)
}

// PublicKeys is a free data retrieval call binding the contract method 0x92896b2d.
//
// Solidity: function public_keys(address , uint256 ) view returns(uint256)
func (_ETHDKG *ETHDKGCaller) PublicKeys(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKG.contract.Call(opts, out, "public_keys", arg0, arg1)
	return *ret0, err
}

// PublicKeys is a free data retrieval call binding the contract method 0x92896b2d.
//
// Solidity: function public_keys(address , uint256 ) view returns(uint256)
func (_ETHDKG *ETHDKGSession) PublicKeys(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _ETHDKG.Contract.PublicKeys(&_ETHDKG.CallOpts, arg0, arg1)
}

// PublicKeys is a free data retrieval call binding the contract method 0x92896b2d.
//
// Solidity: function public_keys(address , uint256 ) view returns(uint256)
func (_ETHDKG *ETHDKGCallerSession) PublicKeys(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _ETHDKG.Contract.PublicKeys(&_ETHDKG.CallOpts, arg0, arg1)
}

// RegistrationCheck is a free data retrieval call binding the contract method 0xb7b09ed6.
//
// Solidity: function registration_check() view returns(bool)
func (_ETHDKG *ETHDKGCaller) RegistrationCheck(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ETHDKG.contract.Call(opts, out, "registration_check")
	return *ret0, err
}

// RegistrationCheck is a free data retrieval call binding the contract method 0xb7b09ed6.
//
// Solidity: function registration_check() view returns(bool)
func (_ETHDKG *ETHDKGSession) RegistrationCheck() (bool, error) {
	return _ETHDKG.Contract.RegistrationCheck(&_ETHDKG.CallOpts)
}

// RegistrationCheck is a free data retrieval call binding the contract method 0xb7b09ed6.
//
// Solidity: function registration_check() view returns(bool)
func (_ETHDKG *ETHDKGCallerSession) RegistrationCheck() (bool, error) {
	return _ETHDKG.Contract.RegistrationCheck(&_ETHDKG.CallOpts)
}

// ShareDistributionCheck is a free data retrieval call binding the contract method 0x2f11b985.
//
// Solidity: function share_distribution_check() view returns(bool)
func (_ETHDKG *ETHDKGCaller) ShareDistributionCheck(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ETHDKG.contract.Call(opts, out, "share_distribution_check")
	return *ret0, err
}

// ShareDistributionCheck is a free data retrieval call binding the contract method 0x2f11b985.
//
// Solidity: function share_distribution_check() view returns(bool)
func (_ETHDKG *ETHDKGSession) ShareDistributionCheck() (bool, error) {
	return _ETHDKG.Contract.ShareDistributionCheck(&_ETHDKG.CallOpts)
}

// ShareDistributionCheck is a free data retrieval call binding the contract method 0x2f11b985.
//
// Solidity: function share_distribution_check() view returns(bool)
func (_ETHDKG *ETHDKGCallerSession) ShareDistributionCheck() (bool, error) {
	return _ETHDKG.Contract.ShareDistributionCheck(&_ETHDKG.CallOpts)
}

// ShareDistributionHashes is a free data retrieval call binding the contract method 0xc21bee83.
//
// Solidity: function share_distribution_hashes(address ) view returns(bytes32)
func (_ETHDKG *ETHDKGCaller) ShareDistributionHashes(opts *bind.CallOpts, arg0 common.Address) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _ETHDKG.contract.Call(opts, out, "share_distribution_hashes", arg0)
	return *ret0, err
}

// ShareDistributionHashes is a free data retrieval call binding the contract method 0xc21bee83.
//
// Solidity: function share_distribution_hashes(address ) view returns(bytes32)
func (_ETHDKG *ETHDKGSession) ShareDistributionHashes(arg0 common.Address) ([32]byte, error) {
	return _ETHDKG.Contract.ShareDistributionHashes(&_ETHDKG.CallOpts, arg0)
}

// ShareDistributionHashes is a free data retrieval call binding the contract method 0xc21bee83.
//
// Solidity: function share_distribution_hashes(address ) view returns(bytes32)
func (_ETHDKG *ETHDKGCallerSession) ShareDistributionHashes(arg0 common.Address) ([32]byte, error) {
	return _ETHDKG.Contract.ShareDistributionHashes(&_ETHDKG.CallOpts, arg0)
}

// GroupAccusationGPKj is a paid mutator transaction binding the contract method 0xa6872833.
//
// Solidity: function Group_Accusation_GPKj(uint256[] invArray, uint256[] honestIndices, uint256[] dishonestIndices) returns()
func (_ETHDKG *ETHDKGTransactor) GroupAccusationGPKj(opts *bind.TransactOpts, invArray []*big.Int, honestIndices []*big.Int, dishonestIndices []*big.Int) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "Group_Accusation_GPKj", invArray, honestIndices, dishonestIndices)
}

// GroupAccusationGPKj is a paid mutator transaction binding the contract method 0xa6872833.
//
// Solidity: function Group_Accusation_GPKj(uint256[] invArray, uint256[] honestIndices, uint256[] dishonestIndices) returns()
func (_ETHDKG *ETHDKGSession) GroupAccusationGPKj(invArray []*big.Int, honestIndices []*big.Int, dishonestIndices []*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.GroupAccusationGPKj(&_ETHDKG.TransactOpts, invArray, honestIndices, dishonestIndices)
}

// GroupAccusationGPKj is a paid mutator transaction binding the contract method 0xa6872833.
//
// Solidity: function Group_Accusation_GPKj(uint256[] invArray, uint256[] honestIndices, uint256[] dishonestIndices) returns()
func (_ETHDKG *ETHDKGTransactorSession) GroupAccusationGPKj(invArray []*big.Int, honestIndices []*big.Int, dishonestIndices []*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.GroupAccusationGPKj(&_ETHDKG.TransactOpts, invArray, honestIndices, dishonestIndices)
}

// SubmitGPKj is a paid mutator transaction binding the contract method 0xdc5e8a0a.
//
// Solidity: function Submit_GPKj(uint256[4] gpkj, uint256[2] sig) returns()
func (_ETHDKG *ETHDKGTransactor) SubmitGPKj(opts *bind.TransactOpts, gpkj [4]*big.Int, sig [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "Submit_GPKj", gpkj, sig)
}

// SubmitGPKj is a paid mutator transaction binding the contract method 0xdc5e8a0a.
//
// Solidity: function Submit_GPKj(uint256[4] gpkj, uint256[2] sig) returns()
func (_ETHDKG *ETHDKGSession) SubmitGPKj(gpkj [4]*big.Int, sig [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.SubmitGPKj(&_ETHDKG.TransactOpts, gpkj, sig)
}

// SubmitGPKj is a paid mutator transaction binding the contract method 0xdc5e8a0a.
//
// Solidity: function Submit_GPKj(uint256[4] gpkj, uint256[2] sig) returns()
func (_ETHDKG *ETHDKGTransactorSession) SubmitGPKj(gpkj [4]*big.Int, sig [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.SubmitGPKj(&_ETHDKG.TransactOpts, gpkj, sig)
}

// SuccessfulCompletion is a paid mutator transaction binding the contract method 0x65c97c01.
//
// Solidity: function Successful_Completion() returns()
func (_ETHDKG *ETHDKGTransactor) SuccessfulCompletion(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "Successful_Completion")
}

// SuccessfulCompletion is a paid mutator transaction binding the contract method 0x65c97c01.
//
// Solidity: function Successful_Completion() returns()
func (_ETHDKG *ETHDKGSession) SuccessfulCompletion() (*types.Transaction, error) {
	return _ETHDKG.Contract.SuccessfulCompletion(&_ETHDKG.TransactOpts)
}

// SuccessfulCompletion is a paid mutator transaction binding the contract method 0x65c97c01.
//
// Solidity: function Successful_Completion() returns()
func (_ETHDKG *ETHDKGTransactorSession) SuccessfulCompletion() (*types.Transaction, error) {
	return _ETHDKG.Contract.SuccessfulCompletion(&_ETHDKG.TransactOpts)
}

// DistributeShares is a paid mutator transaction binding the contract method 0xa080e5e0.
//
// Solidity: function distribute_shares(uint256[] encrypted_shares, uint256[2][] commitments) returns()
func (_ETHDKG *ETHDKGTransactor) DistributeShares(opts *bind.TransactOpts, encrypted_shares []*big.Int, commitments [][2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "distribute_shares", encrypted_shares, commitments)
}

// DistributeShares is a paid mutator transaction binding the contract method 0xa080e5e0.
//
// Solidity: function distribute_shares(uint256[] encrypted_shares, uint256[2][] commitments) returns()
func (_ETHDKG *ETHDKGSession) DistributeShares(encrypted_shares []*big.Int, commitments [][2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.DistributeShares(&_ETHDKG.TransactOpts, encrypted_shares, commitments)
}

// DistributeShares is a paid mutator transaction binding the contract method 0xa080e5e0.
//
// Solidity: function distribute_shares(uint256[] encrypted_shares, uint256[2][] commitments) returns()
func (_ETHDKG *ETHDKGTransactorSession) DistributeShares(encrypted_shares []*big.Int, commitments [][2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.DistributeShares(&_ETHDKG.TransactOpts, encrypted_shares, commitments)
}

// InitializeState is a paid mutator transaction binding the contract method 0x82571195.
//
// Solidity: function initializeState() returns()
func (_ETHDKG *ETHDKGTransactor) InitializeState(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "initializeState")
}

// InitializeState is a paid mutator transaction binding the contract method 0x82571195.
//
// Solidity: function initializeState() returns()
func (_ETHDKG *ETHDKGSession) InitializeState() (*types.Transaction, error) {
	return _ETHDKG.Contract.InitializeState(&_ETHDKG.TransactOpts)
}

// InitializeState is a paid mutator transaction binding the contract method 0x82571195.
//
// Solidity: function initializeState() returns()
func (_ETHDKG *ETHDKGTransactorSession) InitializeState() (*types.Transaction, error) {
	return _ETHDKG.Contract.InitializeState(&_ETHDKG.TransactOpts)
}

// Register is a paid mutator transaction binding the contract method 0x3442af5c.
//
// Solidity: function register(uint256[2] public_key) returns()
func (_ETHDKG *ETHDKGTransactor) Register(opts *bind.TransactOpts, public_key [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "register", public_key)
}

// Register is a paid mutator transaction binding the contract method 0x3442af5c.
//
// Solidity: function register(uint256[2] public_key) returns()
func (_ETHDKG *ETHDKGSession) Register(public_key [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.Register(&_ETHDKG.TransactOpts, public_key)
}

// Register is a paid mutator transaction binding the contract method 0x3442af5c.
//
// Solidity: function register(uint256[2] public_key) returns()
func (_ETHDKG *ETHDKGTransactorSession) Register(public_key [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.Register(&_ETHDKG.TransactOpts, public_key)
}

// ReloadRegistry is a paid mutator transaction binding the contract method 0x1476601d.
//
// Solidity: function reloadRegistry() returns()
func (_ETHDKG *ETHDKGTransactor) ReloadRegistry(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "reloadRegistry")
}

// ReloadRegistry is a paid mutator transaction binding the contract method 0x1476601d.
//
// Solidity: function reloadRegistry() returns()
func (_ETHDKG *ETHDKGSession) ReloadRegistry() (*types.Transaction, error) {
	return _ETHDKG.Contract.ReloadRegistry(&_ETHDKG.TransactOpts)
}

// ReloadRegistry is a paid mutator transaction binding the contract method 0x1476601d.
//
// Solidity: function reloadRegistry() returns()
func (_ETHDKG *ETHDKGTransactorSession) ReloadRegistry() (*types.Transaction, error) {
	return _ETHDKG.Contract.ReloadRegistry(&_ETHDKG.TransactOpts)
}

// SubmitDispute is a paid mutator transaction binding the contract method 0x2f123ffc.
//
// Solidity: function submit_dispute(address issuer, uint256 issuer_list_idx, uint256 disputer_list_idx, uint256[] encrypted_shares, uint256[2][] commitments, uint256[2] shared_key, uint256[2] shared_key_correctness_proof) returns()
func (_ETHDKG *ETHDKGTransactor) SubmitDispute(opts *bind.TransactOpts, issuer common.Address, issuer_list_idx *big.Int, disputer_list_idx *big.Int, encrypted_shares []*big.Int, commitments [][2]*big.Int, shared_key [2]*big.Int, shared_key_correctness_proof [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "submit_dispute", issuer, issuer_list_idx, disputer_list_idx, encrypted_shares, commitments, shared_key, shared_key_correctness_proof)
}

// SubmitDispute is a paid mutator transaction binding the contract method 0x2f123ffc.
//
// Solidity: function submit_dispute(address issuer, uint256 issuer_list_idx, uint256 disputer_list_idx, uint256[] encrypted_shares, uint256[2][] commitments, uint256[2] shared_key, uint256[2] shared_key_correctness_proof) returns()
func (_ETHDKG *ETHDKGSession) SubmitDispute(issuer common.Address, issuer_list_idx *big.Int, disputer_list_idx *big.Int, encrypted_shares []*big.Int, commitments [][2]*big.Int, shared_key [2]*big.Int, shared_key_correctness_proof [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.SubmitDispute(&_ETHDKG.TransactOpts, issuer, issuer_list_idx, disputer_list_idx, encrypted_shares, commitments, shared_key, shared_key_correctness_proof)
}

// SubmitDispute is a paid mutator transaction binding the contract method 0x2f123ffc.
//
// Solidity: function submit_dispute(address issuer, uint256 issuer_list_idx, uint256 disputer_list_idx, uint256[] encrypted_shares, uint256[2][] commitments, uint256[2] shared_key, uint256[2] shared_key_correctness_proof) returns()
func (_ETHDKG *ETHDKGTransactorSession) SubmitDispute(issuer common.Address, issuer_list_idx *big.Int, disputer_list_idx *big.Int, encrypted_shares []*big.Int, commitments [][2]*big.Int, shared_key [2]*big.Int, shared_key_correctness_proof [2]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.SubmitDispute(&_ETHDKG.TransactOpts, issuer, issuer_list_idx, disputer_list_idx, encrypted_shares, commitments, shared_key, shared_key_correctness_proof)
}

// SubmitKeyShare is a paid mutator transaction binding the contract method 0x7163525e.
//
// Solidity: function submit_key_share(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2) returns()
func (_ETHDKG *ETHDKGTransactor) SubmitKeyShare(opts *bind.TransactOpts, issuer common.Address, key_share_G1 [2]*big.Int, key_share_G1_correctness_proof [2]*big.Int, key_share_G2 [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "submit_key_share", issuer, key_share_G1, key_share_G1_correctness_proof, key_share_G2)
}

// SubmitKeyShare is a paid mutator transaction binding the contract method 0x7163525e.
//
// Solidity: function submit_key_share(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2) returns()
func (_ETHDKG *ETHDKGSession) SubmitKeyShare(issuer common.Address, key_share_G1 [2]*big.Int, key_share_G1_correctness_proof [2]*big.Int, key_share_G2 [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.SubmitKeyShare(&_ETHDKG.TransactOpts, issuer, key_share_G1, key_share_G1_correctness_proof, key_share_G2)
}

// SubmitKeyShare is a paid mutator transaction binding the contract method 0x7163525e.
//
// Solidity: function submit_key_share(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2) returns()
func (_ETHDKG *ETHDKGTransactorSession) SubmitKeyShare(issuer common.Address, key_share_G1 [2]*big.Int, key_share_G1_correctness_proof [2]*big.Int, key_share_G2 [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.SubmitKeyShare(&_ETHDKG.TransactOpts, issuer, key_share_G1, key_share_G1_correctness_proof, key_share_G2)
}

// SubmitMasterPublicKey is a paid mutator transaction binding the contract method 0xf47ae6a9.
//
// Solidity: function submit_master_public_key(uint256[4] _master_public_key) returns()
func (_ETHDKG *ETHDKGTransactor) SubmitMasterPublicKey(opts *bind.TransactOpts, _master_public_key [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "submit_master_public_key", _master_public_key)
}

// SubmitMasterPublicKey is a paid mutator transaction binding the contract method 0xf47ae6a9.
//
// Solidity: function submit_master_public_key(uint256[4] _master_public_key) returns()
func (_ETHDKG *ETHDKGSession) SubmitMasterPublicKey(_master_public_key [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.SubmitMasterPublicKey(&_ETHDKG.TransactOpts, _master_public_key)
}

// SubmitMasterPublicKey is a paid mutator transaction binding the contract method 0xf47ae6a9.
//
// Solidity: function submit_master_public_key(uint256[4] _master_public_key) returns()
func (_ETHDKG *ETHDKGTransactorSession) SubmitMasterPublicKey(_master_public_key [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.SubmitMasterPublicKey(&_ETHDKG.TransactOpts, _master_public_key)
}

// UpdatePhaseLength is a paid mutator transaction binding the contract method 0x2a702773.
//
// Solidity: function updatePhaseLength(uint256 newDelta) returns()
func (_ETHDKG *ETHDKGTransactor) UpdatePhaseLength(opts *bind.TransactOpts, newDelta *big.Int) (*types.Transaction, error) {
	return _ETHDKG.contract.Transact(opts, "updatePhaseLength", newDelta)
}

// UpdatePhaseLength is a paid mutator transaction binding the contract method 0x2a702773.
//
// Solidity: function updatePhaseLength(uint256 newDelta) returns()
func (_ETHDKG *ETHDKGSession) UpdatePhaseLength(newDelta *big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.UpdatePhaseLength(&_ETHDKG.TransactOpts, newDelta)
}

// UpdatePhaseLength is a paid mutator transaction binding the contract method 0x2a702773.
//
// Solidity: function updatePhaseLength(uint256 newDelta) returns()
func (_ETHDKG *ETHDKGTransactorSession) UpdatePhaseLength(newDelta *big.Int) (*types.Transaction, error) {
	return _ETHDKG.Contract.UpdatePhaseLength(&_ETHDKG.TransactOpts, newDelta)
}

// ETHDKGKeyShareSubmissionIterator is returned from FilterKeyShareSubmission and is used to iterate over the raw logs and unpacked data for KeyShareSubmission events raised by the ETHDKG contract.
type ETHDKGKeyShareSubmissionIterator struct {
	Event *ETHDKGKeyShareSubmission // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGKeyShareSubmissionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGKeyShareSubmission)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGKeyShareSubmission)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGKeyShareSubmissionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGKeyShareSubmissionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGKeyShareSubmission represents a KeyShareSubmission event raised by the ETHDKG contract.
type ETHDKGKeyShareSubmission struct {
	Issuer                     common.Address
	KeyShareG1                 [2]*big.Int
	KeyShareG1CorrectnessProof [2]*big.Int
	KeyShareG2                 [4]*big.Int
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterKeyShareSubmission is a free log retrieval operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_ETHDKG *ETHDKGFilterer) FilterKeyShareSubmission(opts *bind.FilterOpts) (*ETHDKGKeyShareSubmissionIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "KeyShareSubmission")
	if err != nil {
		return nil, err
	}
	return &ETHDKGKeyShareSubmissionIterator{contract: _ETHDKG.contract, event: "KeyShareSubmission", logs: logs, sub: sub}, nil
}

// WatchKeyShareSubmission is a free log subscription operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_ETHDKG *ETHDKGFilterer) WatchKeyShareSubmission(opts *bind.WatchOpts, sink chan<- *ETHDKGKeyShareSubmission) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "KeyShareSubmission")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGKeyShareSubmission)
				if err := _ETHDKG.contract.UnpackLog(event, "KeyShareSubmission", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyShareSubmission is a log parse operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_ETHDKG *ETHDKGFilterer) ParseKeyShareSubmission(log types.Log) (*ETHDKGKeyShareSubmission, error) {
	event := new(ETHDKGKeyShareSubmission)
	if err := _ETHDKG.contract.UnpackLog(event, "KeyShareSubmission", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ETHDKGRegistrationOpenIterator is returned from FilterRegistrationOpen and is used to iterate over the raw logs and unpacked data for RegistrationOpen events raised by the ETHDKG contract.
type ETHDKGRegistrationOpenIterator struct {
	Event *ETHDKGRegistrationOpen // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGRegistrationOpenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGRegistrationOpen)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGRegistrationOpen)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGRegistrationOpenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGRegistrationOpenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGRegistrationOpen represents a RegistrationOpen event raised by the ETHDKG contract.
type ETHDKGRegistrationOpen struct {
	DkgStarts              *big.Int
	RegistrationEnds       *big.Int
	ShareDistributionEnds  *big.Int
	DisputeEnds            *big.Int
	KeyShareSubmissionEnds *big.Int
	MpkSubmissionEnds      *big.Int
	GpkjSubmissionEnds     *big.Int
	GpkjDisputeEnds        *big.Int
	DkgComplete            *big.Int
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterRegistrationOpen is a free log retrieval operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_ETHDKG *ETHDKGFilterer) FilterRegistrationOpen(opts *bind.FilterOpts) (*ETHDKGRegistrationOpenIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "RegistrationOpen")
	if err != nil {
		return nil, err
	}
	return &ETHDKGRegistrationOpenIterator{contract: _ETHDKG.contract, event: "RegistrationOpen", logs: logs, sub: sub}, nil
}

// WatchRegistrationOpen is a free log subscription operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_ETHDKG *ETHDKGFilterer) WatchRegistrationOpen(opts *bind.WatchOpts, sink chan<- *ETHDKGRegistrationOpen) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "RegistrationOpen")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGRegistrationOpen)
				if err := _ETHDKG.contract.UnpackLog(event, "RegistrationOpen", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistrationOpen is a log parse operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_ETHDKG *ETHDKGFilterer) ParseRegistrationOpen(log types.Log) (*ETHDKGRegistrationOpen, error) {
	event := new(ETHDKGRegistrationOpen)
	if err := _ETHDKG.contract.UnpackLog(event, "RegistrationOpen", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ETHDKGShareDistributionIterator is returned from FilterShareDistribution and is used to iterate over the raw logs and unpacked data for ShareDistribution events raised by the ETHDKG contract.
type ETHDKGShareDistributionIterator struct {
	Event *ETHDKGShareDistribution // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGShareDistributionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGShareDistribution)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGShareDistribution)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGShareDistributionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGShareDistributionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGShareDistribution represents a ShareDistribution event raised by the ETHDKG contract.
type ETHDKGShareDistribution struct {
	Issuer          common.Address
	Index           *big.Int
	EncryptedShares []*big.Int
	Commitments     [][2]*big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterShareDistribution is a free log retrieval operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_ETHDKG *ETHDKGFilterer) FilterShareDistribution(opts *bind.FilterOpts) (*ETHDKGShareDistributionIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "ShareDistribution")
	if err != nil {
		return nil, err
	}
	return &ETHDKGShareDistributionIterator{contract: _ETHDKG.contract, event: "ShareDistribution", logs: logs, sub: sub}, nil
}

// WatchShareDistribution is a free log subscription operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_ETHDKG *ETHDKGFilterer) WatchShareDistribution(opts *bind.WatchOpts, sink chan<- *ETHDKGShareDistribution) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "ShareDistribution")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGShareDistribution)
				if err := _ETHDKG.contract.UnpackLog(event, "ShareDistribution", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseShareDistribution is a log parse operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_ETHDKG *ETHDKGFilterer) ParseShareDistribution(log types.Log) (*ETHDKGShareDistribution, error) {
	event := new(ETHDKGShareDistribution)
	if err := _ETHDKG.contract.UnpackLog(event, "ShareDistribution", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ETHDKGValidatorMemberIterator is returned from FilterValidatorMember and is used to iterate over the raw logs and unpacked data for ValidatorMember events raised by the ETHDKG contract.
type ETHDKGValidatorMemberIterator struct {
	Event *ETHDKGValidatorMember // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGValidatorMemberIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGValidatorMember)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGValidatorMember)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGValidatorMemberIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGValidatorMemberIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGValidatorMember represents a ValidatorMember event raised by the ETHDKG contract.
type ETHDKGValidatorMember struct {
	Account common.Address
	Epoch   *big.Int
	Index   *big.Int
	Share0  *big.Int
	Share1  *big.Int
	Share2  *big.Int
	Share3  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterValidatorMember is a free log retrieval operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ETHDKG *ETHDKGFilterer) FilterValidatorMember(opts *bind.FilterOpts) (*ETHDKGValidatorMemberIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "ValidatorMember")
	if err != nil {
		return nil, err
	}
	return &ETHDKGValidatorMemberIterator{contract: _ETHDKG.contract, event: "ValidatorMember", logs: logs, sub: sub}, nil
}

// WatchValidatorMember is a free log subscription operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ETHDKG *ETHDKGFilterer) WatchValidatorMember(opts *bind.WatchOpts, sink chan<- *ETHDKGValidatorMember) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "ValidatorMember")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGValidatorMember)
				if err := _ETHDKG.contract.UnpackLog(event, "ValidatorMember", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorMember is a log parse operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ETHDKG *ETHDKGFilterer) ParseValidatorMember(log types.Log) (*ETHDKGValidatorMember, error) {
	event := new(ETHDKGValidatorMember)
	if err := _ETHDKG.contract.UnpackLog(event, "ValidatorMember", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ETHDKGValidatorSetIterator is returned from FilterValidatorSet and is used to iterate over the raw logs and unpacked data for ValidatorSet events raised by the ETHDKG contract.
type ETHDKGValidatorSetIterator struct {
	Event *ETHDKGValidatorSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGValidatorSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGValidatorSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGValidatorSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGValidatorSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGValidatorSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGValidatorSet represents a ValidatorSet event raised by the ETHDKG contract.
type ETHDKGValidatorSet struct {
	ValidatorCount uint8
	Epoch          *big.Int
	EthHeight      uint32
	MadHeight      uint32
	GroupKey0      *big.Int
	GroupKey1      *big.Int
	GroupKey2      *big.Int
	GroupKey3      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterValidatorSet is a free log retrieval operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ETHDKG *ETHDKGFilterer) FilterValidatorSet(opts *bind.FilterOpts) (*ETHDKGValidatorSetIterator, error) {

	logs, sub, err := _ETHDKG.contract.FilterLogs(opts, "ValidatorSet")
	if err != nil {
		return nil, err
	}
	return &ETHDKGValidatorSetIterator{contract: _ETHDKG.contract, event: "ValidatorSet", logs: logs, sub: sub}, nil
}

// WatchValidatorSet is a free log subscription operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ETHDKG *ETHDKGFilterer) WatchValidatorSet(opts *bind.WatchOpts, sink chan<- *ETHDKGValidatorSet) (event.Subscription, error) {

	logs, sub, err := _ETHDKG.contract.WatchLogs(opts, "ValidatorSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGValidatorSet)
				if err := _ETHDKG.contract.UnpackLog(event, "ValidatorSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorSet is a log parse operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ETHDKG *ETHDKGFilterer) ParseValidatorSet(log types.Log) (*ETHDKGValidatorSet, error) {
	event := new(ETHDKGValidatorSet)
	if err := _ETHDKG.contract.UnpackLog(event, "ValidatorSet", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ETHDKGCompletionABI is the input ABI used to generate the binding from.
const ETHDKGCompletionABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"key_share_G1\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"key_share_G1_correctness_proof\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"key_share_G2\",\"type\":\"uint256[4]\"}],\"name\":\"KeyShareSubmission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dkgStarts\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"registrationEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shareDistributionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disputeEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"keyShareSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mpkSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gpkjSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gpkjDisputeEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dkgComplete\",\"type\":\"uint256\"}],\"name\":\"RegistrationOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"encrypted_shares\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"}],\"name\":\"ShareDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share3\",\"type\":\"uint256\"}],\"name\":\"ValidatorMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"validatorCount\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"ethHeight\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"madHeight\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey3\",\"type\":\"uint256\"}],\"name\":\"ValidatorSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELTA_CONFIRM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Successful_Completion\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_DISPUTE_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_DKG_COMPLETE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_GPKJ_DISPUTE_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_GPKJ_SUBMISSION_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_KEY_SHARE_SUBMISSION_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_MPK_SUBMISSION_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_REGISTRATION_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_SHARE_DISTRIBUTION_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"commitments_1st_coefficient\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"completion_check\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gpkj_submissions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initial_message\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"initial_signatures\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"is_malicious\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"key_share_submission_check\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"key_shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"master_public_key\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mpk_submission_check\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"public_keys\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registration_check\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"share_distribution_check\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"share_distribution_hashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// ETHDKGCompletionBin is the compiled bytecode used for deploying new contracts.
var ETHDKGCompletionBin = "0x608060405260405160200180807f43727970746f67726170687920697320677265617400000000000000000000008152506015019050604051602081830303815290604052600d90805190602001906200005b92919062000075565b5060286017553480156200006e57600080fd5b506200012b565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282620000ad5760008555620000f9565b82601f10620000c857805160ff1916838001178555620000f9565b82800160010185558215620000f9579182015b82811115620000f8578251825591602001919060010190620000db565b5b5090506200010891906200010c565b5090565b5b80821115620001275760008160009055506001016200010d565b5090565b611443806200013b6000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c80639c2aa838116100de578063d3cf618611610097578063e651137811610071578063e6511378146105a9578063eadfcadc146105eb578063edf26d9b14610645578063fef001a91461069d57610173565b8063d3cf61861461054f578063dc614e281461056d578063e2291ec31461058b57610173565b80639c2aa838146103b6578063a88c9e1c146103d4578063aa7bd33814610436578063ab63c722146104b9578063b7b09ed6146104d7578063c21bee83146104f757610173565b80637328f826116101305780637328f826146102765780637543b80f146102d857806375f7ed6a146102f657806377fbebd114610316578063836889dc1461033457806392896b2d1461035457610173565b8063050a54f01461017857806307f02c54146101985780630de1553f146101b65780632cf4050b146101d45780632f11b9851461023657806365c97c0114610256575b600080fd5b6101806106ff565b60405180821515815260200191505060405180910390f35b6101a0610712565b6040518082815260200191505060405180910390f35b6101be610718565b6040518082815260200191505060405180910390f35b610220600480360360408110156101ea57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061071e565b6040518082815260200191505060405180910390f35b61023e610746565b60405180821515815260200191505060405180910390f35b61025e610759565b60405180821515815260200191505060405180910390f35b6102c26004803603604081101561028c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611196565b6040518082815260200191505060405180910390f35b6102e06111be565b6040518082815260200191505060405180910390f35b6102fe6111c3565b60405180821515815260200191505060405180910390f35b61031e6111d6565b6040518082815260200191505060405180910390f35b61033c6111dc565b60405180821515815260200191505060405180910390f35b6103a06004803603604081101561036a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506111ef565b6040518082815260200191505060405180910390f35b6103be611217565b6040518082815260200191505060405180910390f35b610420600480360360408110156103ea57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061121d565b6040518082815260200191505060405180910390f35b61043e611245565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561047e578082015181840152602081019050610463565b50505050905090810190601f1680156104ab5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6104c16112e3565b6040518082815260200191505060405180910390f35b6104df6112e9565b60405180821515815260200191505060405180910390f35b6105396004803603602081101561050d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506112fc565b6040518082815260200191505060405180910390f35b610557611314565b6040518082815260200191505060405180910390f35b61057561131a565b6040518082815260200191505060405180910390f35b610593611320565b6040518082815260200191505060405180910390f35b6105d5600480360360208110156105bf57600080fd5b8101908080359060200190929190505050611326565b6040518082815260200191505060405180910390f35b61062d6004803603602081101561060157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611341565b60405180821515815260200191505060405180910390f35b6106716004803603602081101561065b57600080fd5b8101908080359060200190929190505050611361565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6106e9600480360360408110156106b357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506113a0565b6040518082815260200191505060405180910390f35b600e60039054906101000a900460ff1681565b60135481565b600f5481565b6003602052816000526040600020816002811061073a57600080fd5b01600091509150505481565b600e60019054906101000a900460ff1681565b60004360155410801561076e57506016544311155b6107c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260458152602001806113c96045913960600191505060405180910390fd5b6000600e60049054906101000a900460ff1661118f5760006001905060005b600080549050811015610b385760008082815481106107fd57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006004811061087757fe5b01541480156108d257506000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001600481106108ce57fe5b0154145b801561092a57506000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060026004811061092657fe5b0154145b801561098257506000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060036004811061097e57fe5b0154145b15610b2a57600860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610a8157601b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166357b4f82a826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015610a6457600080fd5b505af1158015610a78573d6000803e3d6000fd5b50505050610b25565b601b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d2a2c55c826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015610b0c57600080fd5b505af1158015610b20573d6000803e3d6000fd5b505050505b600092505b5080806001019150506107e2565b5080610b47576001915061118d565b6001600e60046101000a81548160ff02191690831515021790555060006001601b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663900cf0cf6040518163ffffffff1660e01b815260040160206040518083038186803b158015610bce57600080fd5b505afa158015610be2573d6000803e3d6000fd5b505050506040513d6020811015610bf857600080fd5b81019080805190602001909291905050500390506000601b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e380b228836040518263ffffffff1660e01b8152600401808263ffffffff16815260200191505060206040518083038186803b158015610c8757600080fd5b505afa158015610c9b573d6000803e3d6000fd5b505050506040513d6020811015610cb157600080fd5b810190808051906020019092919050505090506000601b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634f4ea614846040518263ffffffff1660e01b8152600401808263ffffffff16815260200191505060206040518083038186803b158015610d3f57600080fd5b505afa158015610d53573d6000803e3d6000fd5b505050506040513d6020811015610d6957600080fd5b810190808051906020019092919050505090507f1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f600080549050601b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663900cf0cf6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e0b57600080fd5b505afa158015610e1f573d6000803e3d6000fd5b505050506040513d6020811015610e3557600080fd5b810190808051906020019092919050505084846009600060048110610e5657fe5b01546009600160048110610e6657fe5b01546009600260048110610e7657fe5b01546009600360048110610e8657fe5b0154604051808960ff1681526020018881526020018763ffffffff1681526020018663ffffffff1681526020018581526020018481526020018381526020018281526020019850505050505050505060405180910390a160005b600080549050811015611188576000808281548110610efb57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690507f113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b081601b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663900cf0cf6040518163ffffffff1660e01b815260040160206040518083038186803b158015610fb257600080fd5b505afa158015610fc6573d6000803e3d6000fd5b505050506040513d6020811015610fdc57600080fd5b810190808051906020019092919050505060018501600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006004811061103c57fe5b0154600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060016004811061108957fe5b0154600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002600481106110d657fe5b0154600560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060036004811061112357fe5b0154604051808873ffffffffffffffffffffffffffffffffffffffff16815260200187815260200186815260200185815260200184815260200183815260200182815260200197505050505050505060405180910390a1508080600101915050610ee0565b505050505b505b8091505090565b600660205281600052604060002081600281106111b257600080fd5b01600091509150505481565b600681565b600e60049054906101000a900460ff1681565b60165481565b600e60029054906101000a900460ff1681565b6001602052816000526040600020816002811061120b57600080fd5b01600091509150505481565b60145481565b6004602052816000526040600020816002811061123957600080fd5b01600091509150505481565b600d8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112db5780601f106112b0576101008083540402835291602001916112db565b820191906000526020600020905b8154815290600101906020018083116112be57829003601f168201915b505050505081565b60155481565b600e60009054906101000a900460ff1681565b60026020528060005260406000206000915090505481565b60115481565b60105481565b60125481565b6009816004811061133657600080fd5b016000915090505481565b60086020528060005260406000206000915054906101000a900460ff1681565b6000818154811061137157600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560205281600052604060002081600481106113bc57600080fd5b0160009150915050548156fe7375636365737366756c20636f6d706c6574696f6e206973206f6e6c792061667465722077696e646f7720666f722061636375736174696f6e732068617320636c6f736564a2646970667358221220f5ad22e55aa7ec3d7ce8b31e34d424a78fb85eca363f06f9b9d0f464f858aba864736f6c63430007060033"

// DeployETHDKGCompletion deploys a new Ethereum contract, binding an instance of ETHDKGCompletion to it.
func DeployETHDKGCompletion(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ETHDKGCompletion, error) {
	parsed, err := abi.JSON(strings.NewReader(ETHDKGCompletionABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ETHDKGCompletionBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ETHDKGCompletion{ETHDKGCompletionCaller: ETHDKGCompletionCaller{contract: contract}, ETHDKGCompletionTransactor: ETHDKGCompletionTransactor{contract: contract}, ETHDKGCompletionFilterer: ETHDKGCompletionFilterer{contract: contract}}, nil
}

// ETHDKGCompletion is an auto generated Go binding around an Ethereum contract.
type ETHDKGCompletion struct {
	ETHDKGCompletionCaller     // Read-only binding to the contract
	ETHDKGCompletionTransactor // Write-only binding to the contract
	ETHDKGCompletionFilterer   // Log filterer for contract events
}

// ETHDKGCompletionCaller is an auto generated read-only Go binding around an Ethereum contract.
type ETHDKGCompletionCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGCompletionTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ETHDKGCompletionTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGCompletionFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ETHDKGCompletionFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGCompletionSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ETHDKGCompletionSession struct {
	Contract     *ETHDKGCompletion // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ETHDKGCompletionCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ETHDKGCompletionCallerSession struct {
	Contract *ETHDKGCompletionCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// ETHDKGCompletionTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ETHDKGCompletionTransactorSession struct {
	Contract     *ETHDKGCompletionTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// ETHDKGCompletionRaw is an auto generated low-level Go binding around an Ethereum contract.
type ETHDKGCompletionRaw struct {
	Contract *ETHDKGCompletion // Generic contract binding to access the raw methods on
}

// ETHDKGCompletionCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ETHDKGCompletionCallerRaw struct {
	Contract *ETHDKGCompletionCaller // Generic read-only contract binding to access the raw methods on
}

// ETHDKGCompletionTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ETHDKGCompletionTransactorRaw struct {
	Contract *ETHDKGCompletionTransactor // Generic write-only contract binding to access the raw methods on
}

// NewETHDKGCompletion creates a new instance of ETHDKGCompletion, bound to a specific deployed contract.
func NewETHDKGCompletion(address common.Address, backend bind.ContractBackend) (*ETHDKGCompletion, error) {
	contract, err := bindETHDKGCompletion(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ETHDKGCompletion{ETHDKGCompletionCaller: ETHDKGCompletionCaller{contract: contract}, ETHDKGCompletionTransactor: ETHDKGCompletionTransactor{contract: contract}, ETHDKGCompletionFilterer: ETHDKGCompletionFilterer{contract: contract}}, nil
}

// NewETHDKGCompletionCaller creates a new read-only instance of ETHDKGCompletion, bound to a specific deployed contract.
func NewETHDKGCompletionCaller(address common.Address, caller bind.ContractCaller) (*ETHDKGCompletionCaller, error) {
	contract, err := bindETHDKGCompletion(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ETHDKGCompletionCaller{contract: contract}, nil
}

// NewETHDKGCompletionTransactor creates a new write-only instance of ETHDKGCompletion, bound to a specific deployed contract.
func NewETHDKGCompletionTransactor(address common.Address, transactor bind.ContractTransactor) (*ETHDKGCompletionTransactor, error) {
	contract, err := bindETHDKGCompletion(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ETHDKGCompletionTransactor{contract: contract}, nil
}

// NewETHDKGCompletionFilterer creates a new log filterer instance of ETHDKGCompletion, bound to a specific deployed contract.
func NewETHDKGCompletionFilterer(address common.Address, filterer bind.ContractFilterer) (*ETHDKGCompletionFilterer, error) {
	contract, err := bindETHDKGCompletion(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ETHDKGCompletionFilterer{contract: contract}, nil
}

// bindETHDKGCompletion binds a generic wrapper to an already deployed contract.
func bindETHDKGCompletion(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ETHDKGCompletionABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETHDKGCompletion *ETHDKGCompletionRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ETHDKGCompletion.Contract.ETHDKGCompletionCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETHDKGCompletion *ETHDKGCompletionRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKGCompletion.Contract.ETHDKGCompletionTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETHDKGCompletion *ETHDKGCompletionRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETHDKGCompletion.Contract.ETHDKGCompletionTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETHDKGCompletion *ETHDKGCompletionCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ETHDKGCompletion.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETHDKGCompletion *ETHDKGCompletionTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKGCompletion.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETHDKGCompletion *ETHDKGCompletionTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETHDKGCompletion.Contract.contract.Transact(opts, method, params...)
}

// DELTACONFIRM is a free data retrieval call binding the contract method 0x7543b80f.
//
// Solidity: function DELTA_CONFIRM() view returns(uint256)
func (_ETHDKGCompletion *ETHDKGCompletionCaller) DELTACONFIRM(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGCompletion.contract.Call(opts, out, "DELTA_CONFIRM")
	return *ret0, err
}

// DELTACONFIRM is a free data retrieval call binding the contract method 0x7543b80f.
//
// Solidity: function DELTA_CONFIRM() view returns(uint256)
func (_ETHDKGCompletion *ETHDKGCompletionSession) DELTACONFIRM() (*big.Int, error) {
	return _ETHDKGCompletion.Contract.DELTACONFIRM(&_ETHDKGCompletion.CallOpts)
}

// DELTACONFIRM is a free data retrieval call binding the contract method 0x7543b80f.
//
// Solidity: function DELTA_CONFIRM() view returns(uint256)
func (_ETHDKGCompletion *ETHDKGCompletionCallerSession) DELTACONFIRM() (*big.Int, error) {
	return _ETHDKGCompletion.Contract.DELTACONFIRM(&_ETHDKGCompletion.CallOpts)
}

// TDISPUTEEND is a free data retrieval call binding the contract method 0xd3cf6186.
//
// Solidity: function T_DISPUTE_END() view returns(uint256)
func (_ETHDKGCompletion *ETHDKGCompletionCaller) TDISPUTEEND(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGCompletion.contract.Call(opts, out, "T_DISPUTE_END")
	return *ret0, err
}

// TDISPUTEEND is a free data retrieval call binding the contract method 0xd3cf6186.
//
// Solidity: function T_DISPUTE_END() view returns(uint256)
func (_ETHDKGCompletion *ETHDKGCompletionSession) TDISPUTEEND() (*big.Int, error) {
	return _ETHDKGCompletion.Contract.TDISPUTEEND(&_ETHDKGCompletion.CallOpts)
}

// TDISPUTEEND is a free data retrieval call binding the contract method 0xd3cf6186.
//
// Solidity: function T_DISPUTE_END() view returns(uint256)
func (_ETHDKGCompletion *ETHDKGCompletionCallerSession) TDISPUTEEND() (*big.Int, error) {
	return _ETHDKGCompletion.Contract.TDISPUTEEND(&_ETHDKGCompletion.CallOpts)
}

// TDKGCOMPLETE is a free data retrieval call binding the contract method 0x77fbebd1.
//
// Solidity: function T_DKG_COMPLETE() view returns(uint256)
func (_ETHDKGCompletion *ETHDKGCompletionCaller) TDKGCOMPLETE(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGCompletion.contract.Call(opts, out, "T_DKG_COMPLETE")
	return *ret0, err
}

// TDKGCOMPLETE is a free data retrieval call binding the contract method 0x77fbebd1.
//
// Solidity: function T_DKG_COMPLETE() view returns(uint256)
func (_ETHDKGCompletion *ETHDKGCompletionSession) TDKGCOMPLETE() (*big.Int, error) {
	return _ETHDKGCompletion.Contract.TDKGCOMPLETE(&_ETHDKGCompletion.CallOpts)
}

// TDKGCOMPLETE is a free data retrieval call binding the contract method 0x77fbebd1.
//
// Solidity: function T_DKG_COMPLETE() view returns(uint256)
func (_ETHDKGCompletion *ETHDKGCompletionCallerSession) TDKGCOMPLETE() (*big.Int, error) {
	return _ETHDKGCompletion.Contract.TDKGCOMPLETE(&_ETHDKGCompletion.CallOpts)
}

// TGPKJDISPUTEEND is a free data retrieval call binding the contract method 0xab63c722.
//
// Solidity: function T_GPKJ_DISPUTE_END() view returns(uint256)
func (_ETHDKGCompletion *ETHDKGCompletionCaller) TGPKJDISPUTEEND(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGCompletion.contract.Call(opts, out, "T_GPKJ_DISPUTE_END")
	return *ret0, err
}

// TGPKJDISPUTEEND is a free data retrieval call binding the contract method 0xab63c722.
//
// Solidity: function T_GPKJ_DISPUTE_END() view returns(uint256)
func (_ETHDKGCompletion *ETHDKGCompletionSession) TGPKJDISPUTEEND() (*big.Int, error) {
	return _ETHDKGCompletion.Contract.TGPKJDISPUTEEND(&_ETHDKGCompletion.CallOpts)
}

// TGPKJDISPUTEEND is a free data retrieval call binding the contract method 0xab63c722.
//
// Solidity: function T_GPKJ_DISPUTE_END() view returns(uint256)
func (_ETHDKGCompletion *ETHDKGCompletionCallerSession) TGPKJDISPUTEEND() (*big.Int, error) {
	return _ETHDKGCompletion.Contract.TGPKJDISPUTEEND(&_ETHDKGCompletion.CallOpts)
}

// TGPKJSUBMISSIONEND is a free data retrieval call binding the contract method 0x9c2aa838.
//
// Solidity: function T_GPKJ_SUBMISSION_END() view returns(uint256)
func (_ETHDKGCompletion *ETHDKGCompletionCaller) TGPKJSUBMISSIONEND(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGCompletion.contract.Call(opts, out, "T_GPKJ_SUBMISSION_END")
	return *ret0, err
}

// TGPKJSUBMISSIONEND is a free data retrieval call binding the contract method 0x9c2aa838.
//
// Solidity: function T_GPKJ_SUBMISSION_END() view returns(uint256)
func (_ETHDKGCompletion *ETHDKGCompletionSession) TGPKJSUBMISSIONEND() (*big.Int, error) {
	return _ETHDKGCompletion.Contract.TGPKJSUBMISSIONEND(&_ETHDKGCompletion.CallOpts)
}

// TGPKJSUBMISSIONEND is a free data retrieval call binding the contract method 0x9c2aa838.
//
// Solidity: function T_GPKJ_SUBMISSION_END() view returns(uint256)
func (_ETHDKGCompletion *ETHDKGCompletionCallerSession) TGPKJSUBMISSIONEND() (*big.Int, error) {
	return _ETHDKGCompletion.Contract.TGPKJSUBMISSIONEND(&_ETHDKGCompletion.CallOpts)
}

// TKEYSHARESUBMISSIONEND is a free data retrieval call binding the contract method 0xe2291ec3.
//
// Solidity: function T_KEY_SHARE_SUBMISSION_END() view returns(uint256)
func (_ETHDKGCompletion *ETHDKGCompletionCaller) TKEYSHARESUBMISSIONEND(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGCompletion.contract.Call(opts, out, "T_KEY_SHARE_SUBMISSION_END")
	return *ret0, err
}

// TKEYSHARESUBMISSIONEND is a free data retrieval call binding the contract method 0xe2291ec3.
//
// Solidity: function T_KEY_SHARE_SUBMISSION_END() view returns(uint256)
func (_ETHDKGCompletion *ETHDKGCompletionSession) TKEYSHARESUBMISSIONEND() (*big.Int, error) {
	return _ETHDKGCompletion.Contract.TKEYSHARESUBMISSIONEND(&_ETHDKGCompletion.CallOpts)
}

// TKEYSHARESUBMISSIONEND is a free data retrieval call binding the contract method 0xe2291ec3.
//
// Solidity: function T_KEY_SHARE_SUBMISSION_END() view returns(uint256)
func (_ETHDKGCompletion *ETHDKGCompletionCallerSession) TKEYSHARESUBMISSIONEND() (*big.Int, error) {
	return _ETHDKGCompletion.Contract.TKEYSHARESUBMISSIONEND(&_ETHDKGCompletion.CallOpts)
}

// TMPKSUBMISSIONEND is a free data retrieval call binding the contract method 0x07f02c54.
//
// Solidity: function T_MPK_SUBMISSION_END() view returns(uint256)
func (_ETHDKGCompletion *ETHDKGCompletionCaller) TMPKSUBMISSIONEND(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGCompletion.contract.Call(opts, out, "T_MPK_SUBMISSION_END")
	return *ret0, err
}

// TMPKSUBMISSIONEND is a free data retrieval call binding the contract method 0x07f02c54.
//
// Solidity: function T_MPK_SUBMISSION_END() view returns(uint256)
func (_ETHDKGCompletion *ETHDKGCompletionSession) TMPKSUBMISSIONEND() (*big.Int, error) {
	return _ETHDKGCompletion.Contract.TMPKSUBMISSIONEND(&_ETHDKGCompletion.CallOpts)
}

// TMPKSUBMISSIONEND is a free data retrieval call binding the contract method 0x07f02c54.
//
// Solidity: function T_MPK_SUBMISSION_END() view returns(uint256)
func (_ETHDKGCompletion *ETHDKGCompletionCallerSession) TMPKSUBMISSIONEND() (*big.Int, error) {
	return _ETHDKGCompletion.Contract.TMPKSUBMISSIONEND(&_ETHDKGCompletion.CallOpts)
}

// TREGISTRATIONEND is a free data retrieval call binding the contract method 0x0de1553f.
//
// Solidity: function T_REGISTRATION_END() view returns(uint256)
func (_ETHDKGCompletion *ETHDKGCompletionCaller) TREGISTRATIONEND(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGCompletion.contract.Call(opts, out, "T_REGISTRATION_END")
	return *ret0, err
}

// TREGISTRATIONEND is a free data retrieval call binding the contract method 0x0de1553f.
//
// Solidity: function T_REGISTRATION_END() view returns(uint256)
func (_ETHDKGCompletion *ETHDKGCompletionSession) TREGISTRATIONEND() (*big.Int, error) {
	return _ETHDKGCompletion.Contract.TREGISTRATIONEND(&_ETHDKGCompletion.CallOpts)
}

// TREGISTRATIONEND is a free data retrieval call binding the contract method 0x0de1553f.
//
// Solidity: function T_REGISTRATION_END() view returns(uint256)
func (_ETHDKGCompletion *ETHDKGCompletionCallerSession) TREGISTRATIONEND() (*big.Int, error) {
	return _ETHDKGCompletion.Contract.TREGISTRATIONEND(&_ETHDKGCompletion.CallOpts)
}

// TSHAREDISTRIBUTIONEND is a free data retrieval call binding the contract method 0xdc614e28.
//
// Solidity: function T_SHARE_DISTRIBUTION_END() view returns(uint256)
func (_ETHDKGCompletion *ETHDKGCompletionCaller) TSHAREDISTRIBUTIONEND(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGCompletion.contract.Call(opts, out, "T_SHARE_DISTRIBUTION_END")
	return *ret0, err
}

// TSHAREDISTRIBUTIONEND is a free data retrieval call binding the contract method 0xdc614e28.
//
// Solidity: function T_SHARE_DISTRIBUTION_END() view returns(uint256)
func (_ETHDKGCompletion *ETHDKGCompletionSession) TSHAREDISTRIBUTIONEND() (*big.Int, error) {
	return _ETHDKGCompletion.Contract.TSHAREDISTRIBUTIONEND(&_ETHDKGCompletion.CallOpts)
}

// TSHAREDISTRIBUTIONEND is a free data retrieval call binding the contract method 0xdc614e28.
//
// Solidity: function T_SHARE_DISTRIBUTION_END() view returns(uint256)
func (_ETHDKGCompletion *ETHDKGCompletionCallerSession) TSHAREDISTRIBUTIONEND() (*big.Int, error) {
	return _ETHDKGCompletion.Contract.TSHAREDISTRIBUTIONEND(&_ETHDKGCompletion.CallOpts)
}

// Addresses is a free data retrieval call binding the contract method 0xedf26d9b.
//
// Solidity: function addresses(uint256 ) view returns(address)
func (_ETHDKGCompletion *ETHDKGCompletionCaller) Addresses(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ETHDKGCompletion.contract.Call(opts, out, "addresses", arg0)
	return *ret0, err
}

// Addresses is a free data retrieval call binding the contract method 0xedf26d9b.
//
// Solidity: function addresses(uint256 ) view returns(address)
func (_ETHDKGCompletion *ETHDKGCompletionSession) Addresses(arg0 *big.Int) (common.Address, error) {
	return _ETHDKGCompletion.Contract.Addresses(&_ETHDKGCompletion.CallOpts, arg0)
}

// Addresses is a free data retrieval call binding the contract method 0xedf26d9b.
//
// Solidity: function addresses(uint256 ) view returns(address)
func (_ETHDKGCompletion *ETHDKGCompletionCallerSession) Addresses(arg0 *big.Int) (common.Address, error) {
	return _ETHDKGCompletion.Contract.Addresses(&_ETHDKGCompletion.CallOpts, arg0)
}

// Commitments1stCoefficient is a free data retrieval call binding the contract method 0x2cf4050b.
//
// Solidity: function commitments_1st_coefficient(address , uint256 ) view returns(uint256)
func (_ETHDKGCompletion *ETHDKGCompletionCaller) Commitments1stCoefficient(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGCompletion.contract.Call(opts, out, "commitments_1st_coefficient", arg0, arg1)
	return *ret0, err
}

// Commitments1stCoefficient is a free data retrieval call binding the contract method 0x2cf4050b.
//
// Solidity: function commitments_1st_coefficient(address , uint256 ) view returns(uint256)
func (_ETHDKGCompletion *ETHDKGCompletionSession) Commitments1stCoefficient(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _ETHDKGCompletion.Contract.Commitments1stCoefficient(&_ETHDKGCompletion.CallOpts, arg0, arg1)
}

// Commitments1stCoefficient is a free data retrieval call binding the contract method 0x2cf4050b.
//
// Solidity: function commitments_1st_coefficient(address , uint256 ) view returns(uint256)
func (_ETHDKGCompletion *ETHDKGCompletionCallerSession) Commitments1stCoefficient(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _ETHDKGCompletion.Contract.Commitments1stCoefficient(&_ETHDKGCompletion.CallOpts, arg0, arg1)
}

// CompletionCheck is a free data retrieval call binding the contract method 0x75f7ed6a.
//
// Solidity: function completion_check() view returns(bool)
func (_ETHDKGCompletion *ETHDKGCompletionCaller) CompletionCheck(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ETHDKGCompletion.contract.Call(opts, out, "completion_check")
	return *ret0, err
}

// CompletionCheck is a free data retrieval call binding the contract method 0x75f7ed6a.
//
// Solidity: function completion_check() view returns(bool)
func (_ETHDKGCompletion *ETHDKGCompletionSession) CompletionCheck() (bool, error) {
	return _ETHDKGCompletion.Contract.CompletionCheck(&_ETHDKGCompletion.CallOpts)
}

// CompletionCheck is a free data retrieval call binding the contract method 0x75f7ed6a.
//
// Solidity: function completion_check() view returns(bool)
func (_ETHDKGCompletion *ETHDKGCompletionCallerSession) CompletionCheck() (bool, error) {
	return _ETHDKGCompletion.Contract.CompletionCheck(&_ETHDKGCompletion.CallOpts)
}

// GpkjSubmissions is a free data retrieval call binding the contract method 0xfef001a9.
//
// Solidity: function gpkj_submissions(address , uint256 ) view returns(uint256)
func (_ETHDKGCompletion *ETHDKGCompletionCaller) GpkjSubmissions(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGCompletion.contract.Call(opts, out, "gpkj_submissions", arg0, arg1)
	return *ret0, err
}

// GpkjSubmissions is a free data retrieval call binding the contract method 0xfef001a9.
//
// Solidity: function gpkj_submissions(address , uint256 ) view returns(uint256)
func (_ETHDKGCompletion *ETHDKGCompletionSession) GpkjSubmissions(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _ETHDKGCompletion.Contract.GpkjSubmissions(&_ETHDKGCompletion.CallOpts, arg0, arg1)
}

// GpkjSubmissions is a free data retrieval call binding the contract method 0xfef001a9.
//
// Solidity: function gpkj_submissions(address , uint256 ) view returns(uint256)
func (_ETHDKGCompletion *ETHDKGCompletionCallerSession) GpkjSubmissions(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _ETHDKGCompletion.Contract.GpkjSubmissions(&_ETHDKGCompletion.CallOpts, arg0, arg1)
}

// InitialMessage is a free data retrieval call binding the contract method 0xaa7bd338.
//
// Solidity: function initial_message() view returns(bytes)
func (_ETHDKGCompletion *ETHDKGCompletionCaller) InitialMessage(opts *bind.CallOpts) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _ETHDKGCompletion.contract.Call(opts, out, "initial_message")
	return *ret0, err
}

// InitialMessage is a free data retrieval call binding the contract method 0xaa7bd338.
//
// Solidity: function initial_message() view returns(bytes)
func (_ETHDKGCompletion *ETHDKGCompletionSession) InitialMessage() ([]byte, error) {
	return _ETHDKGCompletion.Contract.InitialMessage(&_ETHDKGCompletion.CallOpts)
}

// InitialMessage is a free data retrieval call binding the contract method 0xaa7bd338.
//
// Solidity: function initial_message() view returns(bytes)
func (_ETHDKGCompletion *ETHDKGCompletionCallerSession) InitialMessage() ([]byte, error) {
	return _ETHDKGCompletion.Contract.InitialMessage(&_ETHDKGCompletion.CallOpts)
}

// InitialSignatures is a free data retrieval call binding the contract method 0x7328f826.
//
// Solidity: function initial_signatures(address , uint256 ) view returns(uint256)
func (_ETHDKGCompletion *ETHDKGCompletionCaller) InitialSignatures(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGCompletion.contract.Call(opts, out, "initial_signatures", arg0, arg1)
	return *ret0, err
}

// InitialSignatures is a free data retrieval call binding the contract method 0x7328f826.
//
// Solidity: function initial_signatures(address , uint256 ) view returns(uint256)
func (_ETHDKGCompletion *ETHDKGCompletionSession) InitialSignatures(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _ETHDKGCompletion.Contract.InitialSignatures(&_ETHDKGCompletion.CallOpts, arg0, arg1)
}

// InitialSignatures is a free data retrieval call binding the contract method 0x7328f826.
//
// Solidity: function initial_signatures(address , uint256 ) view returns(uint256)
func (_ETHDKGCompletion *ETHDKGCompletionCallerSession) InitialSignatures(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _ETHDKGCompletion.Contract.InitialSignatures(&_ETHDKGCompletion.CallOpts, arg0, arg1)
}

// IsMalicious is a free data retrieval call binding the contract method 0xeadfcadc.
//
// Solidity: function is_malicious(address ) view returns(bool)
func (_ETHDKGCompletion *ETHDKGCompletionCaller) IsMalicious(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ETHDKGCompletion.contract.Call(opts, out, "is_malicious", arg0)
	return *ret0, err
}

// IsMalicious is a free data retrieval call binding the contract method 0xeadfcadc.
//
// Solidity: function is_malicious(address ) view returns(bool)
func (_ETHDKGCompletion *ETHDKGCompletionSession) IsMalicious(arg0 common.Address) (bool, error) {
	return _ETHDKGCompletion.Contract.IsMalicious(&_ETHDKGCompletion.CallOpts, arg0)
}

// IsMalicious is a free data retrieval call binding the contract method 0xeadfcadc.
//
// Solidity: function is_malicious(address ) view returns(bool)
func (_ETHDKGCompletion *ETHDKGCompletionCallerSession) IsMalicious(arg0 common.Address) (bool, error) {
	return _ETHDKGCompletion.Contract.IsMalicious(&_ETHDKGCompletion.CallOpts, arg0)
}

// KeyShareSubmissionCheck is a free data retrieval call binding the contract method 0x836889dc.
//
// Solidity: function key_share_submission_check() view returns(bool)
func (_ETHDKGCompletion *ETHDKGCompletionCaller) KeyShareSubmissionCheck(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ETHDKGCompletion.contract.Call(opts, out, "key_share_submission_check")
	return *ret0, err
}

// KeyShareSubmissionCheck is a free data retrieval call binding the contract method 0x836889dc.
//
// Solidity: function key_share_submission_check() view returns(bool)
func (_ETHDKGCompletion *ETHDKGCompletionSession) KeyShareSubmissionCheck() (bool, error) {
	return _ETHDKGCompletion.Contract.KeyShareSubmissionCheck(&_ETHDKGCompletion.CallOpts)
}

// KeyShareSubmissionCheck is a free data retrieval call binding the contract method 0x836889dc.
//
// Solidity: function key_share_submission_check() view returns(bool)
func (_ETHDKGCompletion *ETHDKGCompletionCallerSession) KeyShareSubmissionCheck() (bool, error) {
	return _ETHDKGCompletion.Contract.KeyShareSubmissionCheck(&_ETHDKGCompletion.CallOpts)
}

// KeyShares is a free data retrieval call binding the contract method 0xa88c9e1c.
//
// Solidity: function key_shares(address , uint256 ) view returns(uint256)
func (_ETHDKGCompletion *ETHDKGCompletionCaller) KeyShares(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGCompletion.contract.Call(opts, out, "key_shares", arg0, arg1)
	return *ret0, err
}

// KeyShares is a free data retrieval call binding the contract method 0xa88c9e1c.
//
// Solidity: function key_shares(address , uint256 ) view returns(uint256)
func (_ETHDKGCompletion *ETHDKGCompletionSession) KeyShares(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _ETHDKGCompletion.Contract.KeyShares(&_ETHDKGCompletion.CallOpts, arg0, arg1)
}

// KeyShares is a free data retrieval call binding the contract method 0xa88c9e1c.
//
// Solidity: function key_shares(address , uint256 ) view returns(uint256)
func (_ETHDKGCompletion *ETHDKGCompletionCallerSession) KeyShares(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _ETHDKGCompletion.Contract.KeyShares(&_ETHDKGCompletion.CallOpts, arg0, arg1)
}

// MasterPublicKey is a free data retrieval call binding the contract method 0xe6511378.
//
// Solidity: function master_public_key(uint256 ) view returns(uint256)
func (_ETHDKGCompletion *ETHDKGCompletionCaller) MasterPublicKey(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGCompletion.contract.Call(opts, out, "master_public_key", arg0)
	return *ret0, err
}

// MasterPublicKey is a free data retrieval call binding the contract method 0xe6511378.
//
// Solidity: function master_public_key(uint256 ) view returns(uint256)
func (_ETHDKGCompletion *ETHDKGCompletionSession) MasterPublicKey(arg0 *big.Int) (*big.Int, error) {
	return _ETHDKGCompletion.Contract.MasterPublicKey(&_ETHDKGCompletion.CallOpts, arg0)
}

// MasterPublicKey is a free data retrieval call binding the contract method 0xe6511378.
//
// Solidity: function master_public_key(uint256 ) view returns(uint256)
func (_ETHDKGCompletion *ETHDKGCompletionCallerSession) MasterPublicKey(arg0 *big.Int) (*big.Int, error) {
	return _ETHDKGCompletion.Contract.MasterPublicKey(&_ETHDKGCompletion.CallOpts, arg0)
}

// MpkSubmissionCheck is a free data retrieval call binding the contract method 0x050a54f0.
//
// Solidity: function mpk_submission_check() view returns(bool)
func (_ETHDKGCompletion *ETHDKGCompletionCaller) MpkSubmissionCheck(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ETHDKGCompletion.contract.Call(opts, out, "mpk_submission_check")
	return *ret0, err
}

// MpkSubmissionCheck is a free data retrieval call binding the contract method 0x050a54f0.
//
// Solidity: function mpk_submission_check() view returns(bool)
func (_ETHDKGCompletion *ETHDKGCompletionSession) MpkSubmissionCheck() (bool, error) {
	return _ETHDKGCompletion.Contract.MpkSubmissionCheck(&_ETHDKGCompletion.CallOpts)
}

// MpkSubmissionCheck is a free data retrieval call binding the contract method 0x050a54f0.
//
// Solidity: function mpk_submission_check() view returns(bool)
func (_ETHDKGCompletion *ETHDKGCompletionCallerSession) MpkSubmissionCheck() (bool, error) {
	return _ETHDKGCompletion.Contract.MpkSubmissionCheck(&_ETHDKGCompletion.CallOpts)
}

// PublicKeys is a free data retrieval call binding the contract method 0x92896b2d.
//
// Solidity: function public_keys(address , uint256 ) view returns(uint256)
func (_ETHDKGCompletion *ETHDKGCompletionCaller) PublicKeys(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGCompletion.contract.Call(opts, out, "public_keys", arg0, arg1)
	return *ret0, err
}

// PublicKeys is a free data retrieval call binding the contract method 0x92896b2d.
//
// Solidity: function public_keys(address , uint256 ) view returns(uint256)
func (_ETHDKGCompletion *ETHDKGCompletionSession) PublicKeys(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _ETHDKGCompletion.Contract.PublicKeys(&_ETHDKGCompletion.CallOpts, arg0, arg1)
}

// PublicKeys is a free data retrieval call binding the contract method 0x92896b2d.
//
// Solidity: function public_keys(address , uint256 ) view returns(uint256)
func (_ETHDKGCompletion *ETHDKGCompletionCallerSession) PublicKeys(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _ETHDKGCompletion.Contract.PublicKeys(&_ETHDKGCompletion.CallOpts, arg0, arg1)
}

// RegistrationCheck is a free data retrieval call binding the contract method 0xb7b09ed6.
//
// Solidity: function registration_check() view returns(bool)
func (_ETHDKGCompletion *ETHDKGCompletionCaller) RegistrationCheck(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ETHDKGCompletion.contract.Call(opts, out, "registration_check")
	return *ret0, err
}

// RegistrationCheck is a free data retrieval call binding the contract method 0xb7b09ed6.
//
// Solidity: function registration_check() view returns(bool)
func (_ETHDKGCompletion *ETHDKGCompletionSession) RegistrationCheck() (bool, error) {
	return _ETHDKGCompletion.Contract.RegistrationCheck(&_ETHDKGCompletion.CallOpts)
}

// RegistrationCheck is a free data retrieval call binding the contract method 0xb7b09ed6.
//
// Solidity: function registration_check() view returns(bool)
func (_ETHDKGCompletion *ETHDKGCompletionCallerSession) RegistrationCheck() (bool, error) {
	return _ETHDKGCompletion.Contract.RegistrationCheck(&_ETHDKGCompletion.CallOpts)
}

// ShareDistributionCheck is a free data retrieval call binding the contract method 0x2f11b985.
//
// Solidity: function share_distribution_check() view returns(bool)
func (_ETHDKGCompletion *ETHDKGCompletionCaller) ShareDistributionCheck(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ETHDKGCompletion.contract.Call(opts, out, "share_distribution_check")
	return *ret0, err
}

// ShareDistributionCheck is a free data retrieval call binding the contract method 0x2f11b985.
//
// Solidity: function share_distribution_check() view returns(bool)
func (_ETHDKGCompletion *ETHDKGCompletionSession) ShareDistributionCheck() (bool, error) {
	return _ETHDKGCompletion.Contract.ShareDistributionCheck(&_ETHDKGCompletion.CallOpts)
}

// ShareDistributionCheck is a free data retrieval call binding the contract method 0x2f11b985.
//
// Solidity: function share_distribution_check() view returns(bool)
func (_ETHDKGCompletion *ETHDKGCompletionCallerSession) ShareDistributionCheck() (bool, error) {
	return _ETHDKGCompletion.Contract.ShareDistributionCheck(&_ETHDKGCompletion.CallOpts)
}

// ShareDistributionHashes is a free data retrieval call binding the contract method 0xc21bee83.
//
// Solidity: function share_distribution_hashes(address ) view returns(bytes32)
func (_ETHDKGCompletion *ETHDKGCompletionCaller) ShareDistributionHashes(opts *bind.CallOpts, arg0 common.Address) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _ETHDKGCompletion.contract.Call(opts, out, "share_distribution_hashes", arg0)
	return *ret0, err
}

// ShareDistributionHashes is a free data retrieval call binding the contract method 0xc21bee83.
//
// Solidity: function share_distribution_hashes(address ) view returns(bytes32)
func (_ETHDKGCompletion *ETHDKGCompletionSession) ShareDistributionHashes(arg0 common.Address) ([32]byte, error) {
	return _ETHDKGCompletion.Contract.ShareDistributionHashes(&_ETHDKGCompletion.CallOpts, arg0)
}

// ShareDistributionHashes is a free data retrieval call binding the contract method 0xc21bee83.
//
// Solidity: function share_distribution_hashes(address ) view returns(bytes32)
func (_ETHDKGCompletion *ETHDKGCompletionCallerSession) ShareDistributionHashes(arg0 common.Address) ([32]byte, error) {
	return _ETHDKGCompletion.Contract.ShareDistributionHashes(&_ETHDKGCompletion.CallOpts, arg0)
}

// SuccessfulCompletion is a paid mutator transaction binding the contract method 0x65c97c01.
//
// Solidity: function Successful_Completion() returns(bool)
func (_ETHDKGCompletion *ETHDKGCompletionTransactor) SuccessfulCompletion(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKGCompletion.contract.Transact(opts, "Successful_Completion")
}

// SuccessfulCompletion is a paid mutator transaction binding the contract method 0x65c97c01.
//
// Solidity: function Successful_Completion() returns(bool)
func (_ETHDKGCompletion *ETHDKGCompletionSession) SuccessfulCompletion() (*types.Transaction, error) {
	return _ETHDKGCompletion.Contract.SuccessfulCompletion(&_ETHDKGCompletion.TransactOpts)
}

// SuccessfulCompletion is a paid mutator transaction binding the contract method 0x65c97c01.
//
// Solidity: function Successful_Completion() returns(bool)
func (_ETHDKGCompletion *ETHDKGCompletionTransactorSession) SuccessfulCompletion() (*types.Transaction, error) {
	return _ETHDKGCompletion.Contract.SuccessfulCompletion(&_ETHDKGCompletion.TransactOpts)
}

// ETHDKGCompletionKeyShareSubmissionIterator is returned from FilterKeyShareSubmission and is used to iterate over the raw logs and unpacked data for KeyShareSubmission events raised by the ETHDKGCompletion contract.
type ETHDKGCompletionKeyShareSubmissionIterator struct {
	Event *ETHDKGCompletionKeyShareSubmission // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGCompletionKeyShareSubmissionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGCompletionKeyShareSubmission)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGCompletionKeyShareSubmission)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGCompletionKeyShareSubmissionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGCompletionKeyShareSubmissionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGCompletionKeyShareSubmission represents a KeyShareSubmission event raised by the ETHDKGCompletion contract.
type ETHDKGCompletionKeyShareSubmission struct {
	Issuer                     common.Address
	KeyShareG1                 [2]*big.Int
	KeyShareG1CorrectnessProof [2]*big.Int
	KeyShareG2                 [4]*big.Int
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterKeyShareSubmission is a free log retrieval operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_ETHDKGCompletion *ETHDKGCompletionFilterer) FilterKeyShareSubmission(opts *bind.FilterOpts) (*ETHDKGCompletionKeyShareSubmissionIterator, error) {

	logs, sub, err := _ETHDKGCompletion.contract.FilterLogs(opts, "KeyShareSubmission")
	if err != nil {
		return nil, err
	}
	return &ETHDKGCompletionKeyShareSubmissionIterator{contract: _ETHDKGCompletion.contract, event: "KeyShareSubmission", logs: logs, sub: sub}, nil
}

// WatchKeyShareSubmission is a free log subscription operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_ETHDKGCompletion *ETHDKGCompletionFilterer) WatchKeyShareSubmission(opts *bind.WatchOpts, sink chan<- *ETHDKGCompletionKeyShareSubmission) (event.Subscription, error) {

	logs, sub, err := _ETHDKGCompletion.contract.WatchLogs(opts, "KeyShareSubmission")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGCompletionKeyShareSubmission)
				if err := _ETHDKGCompletion.contract.UnpackLog(event, "KeyShareSubmission", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyShareSubmission is a log parse operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_ETHDKGCompletion *ETHDKGCompletionFilterer) ParseKeyShareSubmission(log types.Log) (*ETHDKGCompletionKeyShareSubmission, error) {
	event := new(ETHDKGCompletionKeyShareSubmission)
	if err := _ETHDKGCompletion.contract.UnpackLog(event, "KeyShareSubmission", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ETHDKGCompletionRegistrationOpenIterator is returned from FilterRegistrationOpen and is used to iterate over the raw logs and unpacked data for RegistrationOpen events raised by the ETHDKGCompletion contract.
type ETHDKGCompletionRegistrationOpenIterator struct {
	Event *ETHDKGCompletionRegistrationOpen // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGCompletionRegistrationOpenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGCompletionRegistrationOpen)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGCompletionRegistrationOpen)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGCompletionRegistrationOpenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGCompletionRegistrationOpenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGCompletionRegistrationOpen represents a RegistrationOpen event raised by the ETHDKGCompletion contract.
type ETHDKGCompletionRegistrationOpen struct {
	DkgStarts              *big.Int
	RegistrationEnds       *big.Int
	ShareDistributionEnds  *big.Int
	DisputeEnds            *big.Int
	KeyShareSubmissionEnds *big.Int
	MpkSubmissionEnds      *big.Int
	GpkjSubmissionEnds     *big.Int
	GpkjDisputeEnds        *big.Int
	DkgComplete            *big.Int
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterRegistrationOpen is a free log retrieval operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_ETHDKGCompletion *ETHDKGCompletionFilterer) FilterRegistrationOpen(opts *bind.FilterOpts) (*ETHDKGCompletionRegistrationOpenIterator, error) {

	logs, sub, err := _ETHDKGCompletion.contract.FilterLogs(opts, "RegistrationOpen")
	if err != nil {
		return nil, err
	}
	return &ETHDKGCompletionRegistrationOpenIterator{contract: _ETHDKGCompletion.contract, event: "RegistrationOpen", logs: logs, sub: sub}, nil
}

// WatchRegistrationOpen is a free log subscription operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_ETHDKGCompletion *ETHDKGCompletionFilterer) WatchRegistrationOpen(opts *bind.WatchOpts, sink chan<- *ETHDKGCompletionRegistrationOpen) (event.Subscription, error) {

	logs, sub, err := _ETHDKGCompletion.contract.WatchLogs(opts, "RegistrationOpen")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGCompletionRegistrationOpen)
				if err := _ETHDKGCompletion.contract.UnpackLog(event, "RegistrationOpen", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistrationOpen is a log parse operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_ETHDKGCompletion *ETHDKGCompletionFilterer) ParseRegistrationOpen(log types.Log) (*ETHDKGCompletionRegistrationOpen, error) {
	event := new(ETHDKGCompletionRegistrationOpen)
	if err := _ETHDKGCompletion.contract.UnpackLog(event, "RegistrationOpen", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ETHDKGCompletionShareDistributionIterator is returned from FilterShareDistribution and is used to iterate over the raw logs and unpacked data for ShareDistribution events raised by the ETHDKGCompletion contract.
type ETHDKGCompletionShareDistributionIterator struct {
	Event *ETHDKGCompletionShareDistribution // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGCompletionShareDistributionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGCompletionShareDistribution)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGCompletionShareDistribution)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGCompletionShareDistributionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGCompletionShareDistributionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGCompletionShareDistribution represents a ShareDistribution event raised by the ETHDKGCompletion contract.
type ETHDKGCompletionShareDistribution struct {
	Issuer          common.Address
	Index           *big.Int
	EncryptedShares []*big.Int
	Commitments     [][2]*big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterShareDistribution is a free log retrieval operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_ETHDKGCompletion *ETHDKGCompletionFilterer) FilterShareDistribution(opts *bind.FilterOpts) (*ETHDKGCompletionShareDistributionIterator, error) {

	logs, sub, err := _ETHDKGCompletion.contract.FilterLogs(opts, "ShareDistribution")
	if err != nil {
		return nil, err
	}
	return &ETHDKGCompletionShareDistributionIterator{contract: _ETHDKGCompletion.contract, event: "ShareDistribution", logs: logs, sub: sub}, nil
}

// WatchShareDistribution is a free log subscription operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_ETHDKGCompletion *ETHDKGCompletionFilterer) WatchShareDistribution(opts *bind.WatchOpts, sink chan<- *ETHDKGCompletionShareDistribution) (event.Subscription, error) {

	logs, sub, err := _ETHDKGCompletion.contract.WatchLogs(opts, "ShareDistribution")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGCompletionShareDistribution)
				if err := _ETHDKGCompletion.contract.UnpackLog(event, "ShareDistribution", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseShareDistribution is a log parse operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_ETHDKGCompletion *ETHDKGCompletionFilterer) ParseShareDistribution(log types.Log) (*ETHDKGCompletionShareDistribution, error) {
	event := new(ETHDKGCompletionShareDistribution)
	if err := _ETHDKGCompletion.contract.UnpackLog(event, "ShareDistribution", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ETHDKGCompletionValidatorMemberIterator is returned from FilterValidatorMember and is used to iterate over the raw logs and unpacked data for ValidatorMember events raised by the ETHDKGCompletion contract.
type ETHDKGCompletionValidatorMemberIterator struct {
	Event *ETHDKGCompletionValidatorMember // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGCompletionValidatorMemberIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGCompletionValidatorMember)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGCompletionValidatorMember)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGCompletionValidatorMemberIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGCompletionValidatorMemberIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGCompletionValidatorMember represents a ValidatorMember event raised by the ETHDKGCompletion contract.
type ETHDKGCompletionValidatorMember struct {
	Account common.Address
	Epoch   *big.Int
	Index   *big.Int
	Share0  *big.Int
	Share1  *big.Int
	Share2  *big.Int
	Share3  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterValidatorMember is a free log retrieval operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ETHDKGCompletion *ETHDKGCompletionFilterer) FilterValidatorMember(opts *bind.FilterOpts) (*ETHDKGCompletionValidatorMemberIterator, error) {

	logs, sub, err := _ETHDKGCompletion.contract.FilterLogs(opts, "ValidatorMember")
	if err != nil {
		return nil, err
	}
	return &ETHDKGCompletionValidatorMemberIterator{contract: _ETHDKGCompletion.contract, event: "ValidatorMember", logs: logs, sub: sub}, nil
}

// WatchValidatorMember is a free log subscription operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ETHDKGCompletion *ETHDKGCompletionFilterer) WatchValidatorMember(opts *bind.WatchOpts, sink chan<- *ETHDKGCompletionValidatorMember) (event.Subscription, error) {

	logs, sub, err := _ETHDKGCompletion.contract.WatchLogs(opts, "ValidatorMember")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGCompletionValidatorMember)
				if err := _ETHDKGCompletion.contract.UnpackLog(event, "ValidatorMember", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorMember is a log parse operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ETHDKGCompletion *ETHDKGCompletionFilterer) ParseValidatorMember(log types.Log) (*ETHDKGCompletionValidatorMember, error) {
	event := new(ETHDKGCompletionValidatorMember)
	if err := _ETHDKGCompletion.contract.UnpackLog(event, "ValidatorMember", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ETHDKGCompletionValidatorSetIterator is returned from FilterValidatorSet and is used to iterate over the raw logs and unpacked data for ValidatorSet events raised by the ETHDKGCompletion contract.
type ETHDKGCompletionValidatorSetIterator struct {
	Event *ETHDKGCompletionValidatorSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGCompletionValidatorSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGCompletionValidatorSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGCompletionValidatorSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGCompletionValidatorSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGCompletionValidatorSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGCompletionValidatorSet represents a ValidatorSet event raised by the ETHDKGCompletion contract.
type ETHDKGCompletionValidatorSet struct {
	ValidatorCount uint8
	Epoch          *big.Int
	EthHeight      uint32
	MadHeight      uint32
	GroupKey0      *big.Int
	GroupKey1      *big.Int
	GroupKey2      *big.Int
	GroupKey3      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterValidatorSet is a free log retrieval operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ETHDKGCompletion *ETHDKGCompletionFilterer) FilterValidatorSet(opts *bind.FilterOpts) (*ETHDKGCompletionValidatorSetIterator, error) {

	logs, sub, err := _ETHDKGCompletion.contract.FilterLogs(opts, "ValidatorSet")
	if err != nil {
		return nil, err
	}
	return &ETHDKGCompletionValidatorSetIterator{contract: _ETHDKGCompletion.contract, event: "ValidatorSet", logs: logs, sub: sub}, nil
}

// WatchValidatorSet is a free log subscription operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ETHDKGCompletion *ETHDKGCompletionFilterer) WatchValidatorSet(opts *bind.WatchOpts, sink chan<- *ETHDKGCompletionValidatorSet) (event.Subscription, error) {

	logs, sub, err := _ETHDKGCompletion.contract.WatchLogs(opts, "ValidatorSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGCompletionValidatorSet)
				if err := _ETHDKGCompletion.contract.UnpackLog(event, "ValidatorSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorSet is a log parse operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ETHDKGCompletion *ETHDKGCompletionFilterer) ParseValidatorSet(log types.Log) (*ETHDKGCompletionValidatorSet, error) {
	event := new(ETHDKGCompletionValidatorSet)
	if err := _ETHDKGCompletion.contract.UnpackLog(event, "ValidatorSet", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ETHDKGGroupAccusationABI is the input ABI used to generate the binding from.
const ETHDKGGroupAccusationABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"key_share_G1\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"key_share_G1_correctness_proof\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"key_share_G2\",\"type\":\"uint256[4]\"}],\"name\":\"KeyShareSubmission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dkgStarts\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"registrationEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shareDistributionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disputeEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"keyShareSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mpkSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gpkjSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gpkjDisputeEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dkgComplete\",\"type\":\"uint256\"}],\"name\":\"RegistrationOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"encrypted_shares\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"}],\"name\":\"ShareDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share3\",\"type\":\"uint256\"}],\"name\":\"ValidatorMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"validatorCount\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"ethHeight\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"madHeight\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey3\",\"type\":\"uint256\"}],\"name\":\"ValidatorSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELTA_CONFIRM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"invArray\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"honestIndices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"dishonestIndices\",\"type\":\"uint256[]\"}],\"name\":\"Group_Accusation_GPKj\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_DISPUTE_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_DKG_COMPLETE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_GPKJ_DISPUTE_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_GPKJ_SUBMISSION_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_KEY_SHARE_SUBMISSION_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_MPK_SUBMISSION_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_REGISTRATION_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_SHARE_DISTRIBUTION_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"commitments_1st_coefficient\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"completion_check\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gpkj_submissions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initial_message\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"initial_signatures\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"is_malicious\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"key_share_submission_check\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"key_shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"master_public_key\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mpk_submission_check\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"public_keys\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registration_check\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"share_distribution_check\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"share_distribution_hashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// ETHDKGGroupAccusationBin is the compiled bytecode used for deploying new contracts.
var ETHDKGGroupAccusationBin = "0x608060405260405160200180807f43727970746f67726170687920697320677265617400000000000000000000008152506015019050604051602081830303815290604052600d90805190602001906200005b92919062000075565b5060286017553480156200006e57600080fd5b506200012b565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282620000ad5760008555620000f9565b82601f10620000c857805160ff1916838001178555620000f9565b82800160010185558215620000f9579182015b82811115620000f8578251825591602001919060010190620000db565b5b5090506200010891906200010c565b5090565b5b80821115620001275760008160009055506001016200010d565b5090565b611bb7806200013b6000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c8063a6872833116100de578063d3cf618611610097578063e651137811610071578063e651137814610769578063eadfcadc146107ab578063edf26d9b14610805578063fef001a91461085d57610173565b8063d3cf61861461070f578063dc614e281461072d578063e2291ec31461074b57610173565b8063a6872833146103b4578063a88c9e1c14610594578063aa7bd338146105f6578063ab63c72214610679578063b7b09ed614610697578063c21bee83146106b757610173565b80637543b80f116101305780637543b80f146102b857806375f7ed6a146102d657806377fbebd1146102f6578063836889dc1461031457806392896b2d146103345780639c2aa8381461039657610173565b8063050a54f01461017857806307f02c54146101985780630de1553f146101b65780632cf4050b146101d45780632f11b985146102365780637328f82614610256575b600080fd5b6101806108bf565b60405180821515815260200191505060405180910390f35b6101a06108d2565b6040518082815260200191505060405180910390f35b6101be6108d8565b6040518082815260200191505060405180910390f35b610220600480360360408110156101ea57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506108de565b6040518082815260200191505060405180910390f35b61023e610906565b60405180821515815260200191505060405180910390f35b6102a26004803603604081101561026c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610919565b6040518082815260200191505060405180910390f35b6102c0610941565b6040518082815260200191505060405180910390f35b6102de610946565b60405180821515815260200191505060405180910390f35b6102fe610959565b6040518082815260200191505060405180910390f35b61031c61095f565b60405180821515815260200191505060405180910390f35b6103806004803603604081101561034a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610972565b6040518082815260200191505060405180910390f35b61039e61099a565b6040518082815260200191505060405180910390f35b610592600480360360608110156103ca57600080fd5b81019080803590602001906401000000008111156103e757600080fd5b8201836020820111156103f957600080fd5b8035906020019184602083028401116401000000008311171561041b57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561047b57600080fd5b82018360208201111561048d57600080fd5b803590602001918460208302840111640100000000831117156104af57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561050f57600080fd5b82018360208201111561052157600080fd5b8035906020019184602083028401116401000000008311171561054357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192905050506109a0565b005b6105e0600480360360408110156105aa57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061188d565b6040518082815260200191505060405180910390f35b6105fe6118b5565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561063e578082015181840152602081019050610623565b50505050905090810190601f16801561066b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610681611953565b6040518082815260200191505060405180910390f35b61069f611959565b60405180821515815260200191505060405180910390f35b6106f9600480360360208110156106cd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061196c565b6040518082815260200191505060405180910390f35b610717611984565b6040518082815260200191505060405180910390f35b61073561198a565b6040518082815260200191505060405180910390f35b610753611990565b6040518082815260200191505060405180910390f35b6107956004803603602081101561077f57600080fd5b8101908080359060200190929190505050611996565b6040518082815260200191505060405180910390f35b6107ed600480360360208110156107c157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506119b1565b60405180821515815260200191505060405180910390f35b6108316004803603602081101561081b57600080fd5b81019080803590602001909291905050506119d1565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6108a96004803603604081101561087357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611a10565b6040518082815260200191505060405180910390f35b600e60039054906101000a900460ff1681565b60135481565b600f5481565b600360205281600052604060002081600281106108fa57600080fd5b01600091509150505481565b600e60019054906101000a900460ff1681565b6006602052816000526040600020816002811061093557600080fd5b01600091509150505481565b600681565b600e60049054906101000a900460ff1681565b60165481565b600e60029054906101000a900460ff1681565b6001602052816000526040600020816002811061098e57600080fd5b01600091509150505481565b60145481565b436014541080156109b357506015544311155b610a08576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526041815260200180611a776041913960600191505060405180910390fd5b6000600360008054905081610a1957fe5b0490506000816002029050816003026000805490500360021415610a3e576001810190505b6001810184511015610a9b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b815260200180611b57602b913960400191505060405180910390fd5b601960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166380f4a92285856000805490506040518463ffffffff1660e01b8152600401808060200180602001848152602001838103835286818151815260200191508051906020019060200280838360005b83811015610b3d578082015181840152602081019050610b22565b50505050905001838103825285818151815260200191508051906020019060200280838360005b83811015610b7f578082015181840152602081019050610b64565b505050509050019550505050505060206040518083038186803b158015610ba557600080fd5b505afa158015610bb9573d6000803e3d6000fd5b505050506040513d6020811015610bcf57600080fd5b8101908080519060200190929190505050610c35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526040815260200180611ae26040913960400191505060405180910390fd5b60606001820167ffffffffffffffff81118015610c5157600080fd5b50604051908082528060200260200182016040528015610c8b57816020015b610c78611a38565b815260200190600190039081610c705790505b50905060606001830167ffffffffffffffff81118015610caa57600080fd5b50604051908082528060200260200182016040528015610cd95781602001602082028036833780820191505090505b509050600080601960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e480a92e8a6000805490506040518363ffffffff1660e01b81526004018080602001838152602001828103825284818151815260200191508051906020019060200280838360005b83811015610d7c578082015181840152602081019050610d61565b50505050905001935050505060206040518083038186803b158015610da057600080fd5b505afa158015610db4573d6000803e3d6000fd5b505050506040513d6020811015610dca57600080fd5b8101908080519060200190929190505050610e30576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180611ab8602a913960400191505060405180910390fd5b600095505b60018501861015610f4b57878681518110610e4c57fe5b6020026020010151915060006001830381548110610e6657fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600660008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600280602002604051908101604052809291908260028015610f09576020028201915b815481526020019060010190808311610ef5575b5050505050848781518110610f1a57fe5b602002602001018190525081838781518110610f3257fe5b6020026020010181815250508580600101965050610e35565b6000601960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f022e0618686898e6040518563ffffffff1660e01b8152600401808060200180602001858152602001806020018481038452888181518152602001915080516000925b818410156110135782846020026020010151600260200280838360005b83811015611002578082015181840152602081019050610fe7565b505050509050019260010192610fca565b92505050848103835287818151815260200191508051906020019060200280838360005b83811015611052578082015181840152602081019050611037565b50505050905001848103825285818151815260200191508051906020019060200280838360005b83811015611094578082015181840152602081019050611079565b50505050905001975050505050505050604080518083038186803b1580156110bb57600080fd5b505afa1580156110cf573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525060408110156110f457600080fd5b81019080919050509050601960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306367587600d8360096040518463ffffffff1660e01b8152600401808060200184600260200280838360005b8381101561117f578082015181840152602081019050611164565b5050505090500183600480156111aa576020028201915b815481526020019060010190808311611196575b505082810382528581815460018160011615610100020316600290048152602001915080546001816001161561010002031660029004801561122d5780601f106112025761010080835404028352916020019161122d565b820191906000526020600020905b81548152906001019060200180831161121057829003601f168201915b505094505050505060206040518083038186803b15801561124d57600080fd5b505afa158015611261573d6000803e3d6000fd5b505050506040513d602081101561127757600080fd5b81019080805190602001909291905050506112dd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526035815260200180611b226035913960400191505060405180910390fd5b600096505b8751871015611881578787815181106112f757fe5b602002602001015192506000600184038154811061131157fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691508284878151811061134b57fe5b602002602001018181525050600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002806020026040519081016040528092919082600280156113cd576020028201915b8154815260200190600101908083116113b9575b50505050508587815181106113de57fe5b6020026020010181905250601960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f022e0618686898e6040518563ffffffff1660e01b8152600401808060200180602001858152602001806020018481038452888181518152602001915080516000925b818410156114af5782846020026020010151600260200280838360005b8381101561149e578082015181840152602081019050611483565b505050509050019260010192611466565b92505050848103835287818151815260200191508051906020019060200280838360005b838110156114ee5780820151818401526020810190506114d3565b50505050905001848103825285818151815260200191508051906020019060200280838360005b83811015611530578082015181840152602081019050611515565b50505050905001975050505050505050604080518083038186803b15801561155757600080fd5b505afa15801561156b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250604081101561159057600080fd5b81019080919050509050601960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306367587600d8360096040518463ffffffff1660e01b8152600401808060200184600260200280838360005b8381101561161b578082015181840152602081019050611600565b505050509050018360048015611646576020028201915b815481526020019060010190808311611632575b50508281038252858181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156116c95780601f1061169e576101008083540402835291602001916116c9565b820191906000526020600020905b8154815290600101906020018083116116ac57829003601f168201915b505094505050505060206040518083038186803b1580156116e957600080fd5b505afa1580156116fd573d6000803e3d6000fd5b505050506040513d602081101561171357600080fd5b81019080805190602001909291905050506117d057600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006117739190611a5a565b6001600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611874565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600061181b9190611a5a565b6001600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b86806001019750506112e2565b50505050505050505050565b600460205281600052604060002081600281106118a957600080fd5b01600091509150505481565b600d8054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561194b5780601f106119205761010080835404028352916020019161194b565b820191906000526020600020905b81548152906001019060200180831161192e57829003601f168201915b505050505081565b60155481565b600e60009054906101000a900460ff1681565b60026020528060005260406000206000915090505481565b60115481565b60105481565b60125481565b600981600481106119a657600080fd5b016000915090505481565b60086020528060005260406000206000915054906101000a900460ff1681565b600081815481106119e157600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60056020528160005260406000208160048110611a2c57600080fd5b01600091509150505481565b6040518060400160405280600290602082028036833780820191505090505090565b506000815560010160008155600101600081556001016000905556fe67706b6a2061636375736174696f6e206661696c65642028636f6e7472616374206973206e6f7420696e2067706b6a2061636375736174696f6e20706861736529696e76417272617920646f6573206e6f7420696e636c75646520636f727265637420696e766572736573686f6e657374496e646963657320616e6420646973686f6e657374496e646963657320646f206e6f7420636f6e7461696e20756e6971756520696e6469636573686f6e657374496e6469636573206661696c656420746f2070726f647563652076616c69642067726f7570207369676e6174757265496e636f7272656374206e756d626572206f6620686f6e6573742076616c696461746f72733b2065786974a2646970667358221220766c8717fa618bde20fd9cb6666a89f8697724956767317965deac182baf65a364736f6c63430007060033"

// DeployETHDKGGroupAccusation deploys a new Ethereum contract, binding an instance of ETHDKGGroupAccusation to it.
func DeployETHDKGGroupAccusation(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ETHDKGGroupAccusation, error) {
	parsed, err := abi.JSON(strings.NewReader(ETHDKGGroupAccusationABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ETHDKGGroupAccusationBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ETHDKGGroupAccusation{ETHDKGGroupAccusationCaller: ETHDKGGroupAccusationCaller{contract: contract}, ETHDKGGroupAccusationTransactor: ETHDKGGroupAccusationTransactor{contract: contract}, ETHDKGGroupAccusationFilterer: ETHDKGGroupAccusationFilterer{contract: contract}}, nil
}

// ETHDKGGroupAccusation is an auto generated Go binding around an Ethereum contract.
type ETHDKGGroupAccusation struct {
	ETHDKGGroupAccusationCaller     // Read-only binding to the contract
	ETHDKGGroupAccusationTransactor // Write-only binding to the contract
	ETHDKGGroupAccusationFilterer   // Log filterer for contract events
}

// ETHDKGGroupAccusationCaller is an auto generated read-only Go binding around an Ethereum contract.
type ETHDKGGroupAccusationCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGGroupAccusationTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ETHDKGGroupAccusationTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGGroupAccusationFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ETHDKGGroupAccusationFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGGroupAccusationSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ETHDKGGroupAccusationSession struct {
	Contract     *ETHDKGGroupAccusation // Generic contract binding to set the session for
	CallOpts     bind.CallOpts          // Call options to use throughout this session
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// ETHDKGGroupAccusationCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ETHDKGGroupAccusationCallerSession struct {
	Contract *ETHDKGGroupAccusationCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                // Call options to use throughout this session
}

// ETHDKGGroupAccusationTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ETHDKGGroupAccusationTransactorSession struct {
	Contract     *ETHDKGGroupAccusationTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                // Transaction auth options to use throughout this session
}

// ETHDKGGroupAccusationRaw is an auto generated low-level Go binding around an Ethereum contract.
type ETHDKGGroupAccusationRaw struct {
	Contract *ETHDKGGroupAccusation // Generic contract binding to access the raw methods on
}

// ETHDKGGroupAccusationCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ETHDKGGroupAccusationCallerRaw struct {
	Contract *ETHDKGGroupAccusationCaller // Generic read-only contract binding to access the raw methods on
}

// ETHDKGGroupAccusationTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ETHDKGGroupAccusationTransactorRaw struct {
	Contract *ETHDKGGroupAccusationTransactor // Generic write-only contract binding to access the raw methods on
}

// NewETHDKGGroupAccusation creates a new instance of ETHDKGGroupAccusation, bound to a specific deployed contract.
func NewETHDKGGroupAccusation(address common.Address, backend bind.ContractBackend) (*ETHDKGGroupAccusation, error) {
	contract, err := bindETHDKGGroupAccusation(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ETHDKGGroupAccusation{ETHDKGGroupAccusationCaller: ETHDKGGroupAccusationCaller{contract: contract}, ETHDKGGroupAccusationTransactor: ETHDKGGroupAccusationTransactor{contract: contract}, ETHDKGGroupAccusationFilterer: ETHDKGGroupAccusationFilterer{contract: contract}}, nil
}

// NewETHDKGGroupAccusationCaller creates a new read-only instance of ETHDKGGroupAccusation, bound to a specific deployed contract.
func NewETHDKGGroupAccusationCaller(address common.Address, caller bind.ContractCaller) (*ETHDKGGroupAccusationCaller, error) {
	contract, err := bindETHDKGGroupAccusation(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ETHDKGGroupAccusationCaller{contract: contract}, nil
}

// NewETHDKGGroupAccusationTransactor creates a new write-only instance of ETHDKGGroupAccusation, bound to a specific deployed contract.
func NewETHDKGGroupAccusationTransactor(address common.Address, transactor bind.ContractTransactor) (*ETHDKGGroupAccusationTransactor, error) {
	contract, err := bindETHDKGGroupAccusation(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ETHDKGGroupAccusationTransactor{contract: contract}, nil
}

// NewETHDKGGroupAccusationFilterer creates a new log filterer instance of ETHDKGGroupAccusation, bound to a specific deployed contract.
func NewETHDKGGroupAccusationFilterer(address common.Address, filterer bind.ContractFilterer) (*ETHDKGGroupAccusationFilterer, error) {
	contract, err := bindETHDKGGroupAccusation(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ETHDKGGroupAccusationFilterer{contract: contract}, nil
}

// bindETHDKGGroupAccusation binds a generic wrapper to an already deployed contract.
func bindETHDKGGroupAccusation(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ETHDKGGroupAccusationABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ETHDKGGroupAccusation.Contract.ETHDKGGroupAccusationCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKGGroupAccusation.Contract.ETHDKGGroupAccusationTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETHDKGGroupAccusation.Contract.ETHDKGGroupAccusationTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ETHDKGGroupAccusation.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKGGroupAccusation.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETHDKGGroupAccusation.Contract.contract.Transact(opts, method, params...)
}

// DELTACONFIRM is a free data retrieval call binding the contract method 0x7543b80f.
//
// Solidity: function DELTA_CONFIRM() view returns(uint256)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationCaller) DELTACONFIRM(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGGroupAccusation.contract.Call(opts, out, "DELTA_CONFIRM")
	return *ret0, err
}

// DELTACONFIRM is a free data retrieval call binding the contract method 0x7543b80f.
//
// Solidity: function DELTA_CONFIRM() view returns(uint256)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationSession) DELTACONFIRM() (*big.Int, error) {
	return _ETHDKGGroupAccusation.Contract.DELTACONFIRM(&_ETHDKGGroupAccusation.CallOpts)
}

// DELTACONFIRM is a free data retrieval call binding the contract method 0x7543b80f.
//
// Solidity: function DELTA_CONFIRM() view returns(uint256)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationCallerSession) DELTACONFIRM() (*big.Int, error) {
	return _ETHDKGGroupAccusation.Contract.DELTACONFIRM(&_ETHDKGGroupAccusation.CallOpts)
}

// TDISPUTEEND is a free data retrieval call binding the contract method 0xd3cf6186.
//
// Solidity: function T_DISPUTE_END() view returns(uint256)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationCaller) TDISPUTEEND(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGGroupAccusation.contract.Call(opts, out, "T_DISPUTE_END")
	return *ret0, err
}

// TDISPUTEEND is a free data retrieval call binding the contract method 0xd3cf6186.
//
// Solidity: function T_DISPUTE_END() view returns(uint256)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationSession) TDISPUTEEND() (*big.Int, error) {
	return _ETHDKGGroupAccusation.Contract.TDISPUTEEND(&_ETHDKGGroupAccusation.CallOpts)
}

// TDISPUTEEND is a free data retrieval call binding the contract method 0xd3cf6186.
//
// Solidity: function T_DISPUTE_END() view returns(uint256)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationCallerSession) TDISPUTEEND() (*big.Int, error) {
	return _ETHDKGGroupAccusation.Contract.TDISPUTEEND(&_ETHDKGGroupAccusation.CallOpts)
}

// TDKGCOMPLETE is a free data retrieval call binding the contract method 0x77fbebd1.
//
// Solidity: function T_DKG_COMPLETE() view returns(uint256)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationCaller) TDKGCOMPLETE(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGGroupAccusation.contract.Call(opts, out, "T_DKG_COMPLETE")
	return *ret0, err
}

// TDKGCOMPLETE is a free data retrieval call binding the contract method 0x77fbebd1.
//
// Solidity: function T_DKG_COMPLETE() view returns(uint256)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationSession) TDKGCOMPLETE() (*big.Int, error) {
	return _ETHDKGGroupAccusation.Contract.TDKGCOMPLETE(&_ETHDKGGroupAccusation.CallOpts)
}

// TDKGCOMPLETE is a free data retrieval call binding the contract method 0x77fbebd1.
//
// Solidity: function T_DKG_COMPLETE() view returns(uint256)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationCallerSession) TDKGCOMPLETE() (*big.Int, error) {
	return _ETHDKGGroupAccusation.Contract.TDKGCOMPLETE(&_ETHDKGGroupAccusation.CallOpts)
}

// TGPKJDISPUTEEND is a free data retrieval call binding the contract method 0xab63c722.
//
// Solidity: function T_GPKJ_DISPUTE_END() view returns(uint256)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationCaller) TGPKJDISPUTEEND(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGGroupAccusation.contract.Call(opts, out, "T_GPKJ_DISPUTE_END")
	return *ret0, err
}

// TGPKJDISPUTEEND is a free data retrieval call binding the contract method 0xab63c722.
//
// Solidity: function T_GPKJ_DISPUTE_END() view returns(uint256)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationSession) TGPKJDISPUTEEND() (*big.Int, error) {
	return _ETHDKGGroupAccusation.Contract.TGPKJDISPUTEEND(&_ETHDKGGroupAccusation.CallOpts)
}

// TGPKJDISPUTEEND is a free data retrieval call binding the contract method 0xab63c722.
//
// Solidity: function T_GPKJ_DISPUTE_END() view returns(uint256)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationCallerSession) TGPKJDISPUTEEND() (*big.Int, error) {
	return _ETHDKGGroupAccusation.Contract.TGPKJDISPUTEEND(&_ETHDKGGroupAccusation.CallOpts)
}

// TGPKJSUBMISSIONEND is a free data retrieval call binding the contract method 0x9c2aa838.
//
// Solidity: function T_GPKJ_SUBMISSION_END() view returns(uint256)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationCaller) TGPKJSUBMISSIONEND(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGGroupAccusation.contract.Call(opts, out, "T_GPKJ_SUBMISSION_END")
	return *ret0, err
}

// TGPKJSUBMISSIONEND is a free data retrieval call binding the contract method 0x9c2aa838.
//
// Solidity: function T_GPKJ_SUBMISSION_END() view returns(uint256)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationSession) TGPKJSUBMISSIONEND() (*big.Int, error) {
	return _ETHDKGGroupAccusation.Contract.TGPKJSUBMISSIONEND(&_ETHDKGGroupAccusation.CallOpts)
}

// TGPKJSUBMISSIONEND is a free data retrieval call binding the contract method 0x9c2aa838.
//
// Solidity: function T_GPKJ_SUBMISSION_END() view returns(uint256)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationCallerSession) TGPKJSUBMISSIONEND() (*big.Int, error) {
	return _ETHDKGGroupAccusation.Contract.TGPKJSUBMISSIONEND(&_ETHDKGGroupAccusation.CallOpts)
}

// TKEYSHARESUBMISSIONEND is a free data retrieval call binding the contract method 0xe2291ec3.
//
// Solidity: function T_KEY_SHARE_SUBMISSION_END() view returns(uint256)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationCaller) TKEYSHARESUBMISSIONEND(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGGroupAccusation.contract.Call(opts, out, "T_KEY_SHARE_SUBMISSION_END")
	return *ret0, err
}

// TKEYSHARESUBMISSIONEND is a free data retrieval call binding the contract method 0xe2291ec3.
//
// Solidity: function T_KEY_SHARE_SUBMISSION_END() view returns(uint256)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationSession) TKEYSHARESUBMISSIONEND() (*big.Int, error) {
	return _ETHDKGGroupAccusation.Contract.TKEYSHARESUBMISSIONEND(&_ETHDKGGroupAccusation.CallOpts)
}

// TKEYSHARESUBMISSIONEND is a free data retrieval call binding the contract method 0xe2291ec3.
//
// Solidity: function T_KEY_SHARE_SUBMISSION_END() view returns(uint256)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationCallerSession) TKEYSHARESUBMISSIONEND() (*big.Int, error) {
	return _ETHDKGGroupAccusation.Contract.TKEYSHARESUBMISSIONEND(&_ETHDKGGroupAccusation.CallOpts)
}

// TMPKSUBMISSIONEND is a free data retrieval call binding the contract method 0x07f02c54.
//
// Solidity: function T_MPK_SUBMISSION_END() view returns(uint256)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationCaller) TMPKSUBMISSIONEND(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGGroupAccusation.contract.Call(opts, out, "T_MPK_SUBMISSION_END")
	return *ret0, err
}

// TMPKSUBMISSIONEND is a free data retrieval call binding the contract method 0x07f02c54.
//
// Solidity: function T_MPK_SUBMISSION_END() view returns(uint256)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationSession) TMPKSUBMISSIONEND() (*big.Int, error) {
	return _ETHDKGGroupAccusation.Contract.TMPKSUBMISSIONEND(&_ETHDKGGroupAccusation.CallOpts)
}

// TMPKSUBMISSIONEND is a free data retrieval call binding the contract method 0x07f02c54.
//
// Solidity: function T_MPK_SUBMISSION_END() view returns(uint256)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationCallerSession) TMPKSUBMISSIONEND() (*big.Int, error) {
	return _ETHDKGGroupAccusation.Contract.TMPKSUBMISSIONEND(&_ETHDKGGroupAccusation.CallOpts)
}

// TREGISTRATIONEND is a free data retrieval call binding the contract method 0x0de1553f.
//
// Solidity: function T_REGISTRATION_END() view returns(uint256)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationCaller) TREGISTRATIONEND(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGGroupAccusation.contract.Call(opts, out, "T_REGISTRATION_END")
	return *ret0, err
}

// TREGISTRATIONEND is a free data retrieval call binding the contract method 0x0de1553f.
//
// Solidity: function T_REGISTRATION_END() view returns(uint256)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationSession) TREGISTRATIONEND() (*big.Int, error) {
	return _ETHDKGGroupAccusation.Contract.TREGISTRATIONEND(&_ETHDKGGroupAccusation.CallOpts)
}

// TREGISTRATIONEND is a free data retrieval call binding the contract method 0x0de1553f.
//
// Solidity: function T_REGISTRATION_END() view returns(uint256)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationCallerSession) TREGISTRATIONEND() (*big.Int, error) {
	return _ETHDKGGroupAccusation.Contract.TREGISTRATIONEND(&_ETHDKGGroupAccusation.CallOpts)
}

// TSHAREDISTRIBUTIONEND is a free data retrieval call binding the contract method 0xdc614e28.
//
// Solidity: function T_SHARE_DISTRIBUTION_END() view returns(uint256)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationCaller) TSHAREDISTRIBUTIONEND(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGGroupAccusation.contract.Call(opts, out, "T_SHARE_DISTRIBUTION_END")
	return *ret0, err
}

// TSHAREDISTRIBUTIONEND is a free data retrieval call binding the contract method 0xdc614e28.
//
// Solidity: function T_SHARE_DISTRIBUTION_END() view returns(uint256)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationSession) TSHAREDISTRIBUTIONEND() (*big.Int, error) {
	return _ETHDKGGroupAccusation.Contract.TSHAREDISTRIBUTIONEND(&_ETHDKGGroupAccusation.CallOpts)
}

// TSHAREDISTRIBUTIONEND is a free data retrieval call binding the contract method 0xdc614e28.
//
// Solidity: function T_SHARE_DISTRIBUTION_END() view returns(uint256)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationCallerSession) TSHAREDISTRIBUTIONEND() (*big.Int, error) {
	return _ETHDKGGroupAccusation.Contract.TSHAREDISTRIBUTIONEND(&_ETHDKGGroupAccusation.CallOpts)
}

// Addresses is a free data retrieval call binding the contract method 0xedf26d9b.
//
// Solidity: function addresses(uint256 ) view returns(address)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationCaller) Addresses(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ETHDKGGroupAccusation.contract.Call(opts, out, "addresses", arg0)
	return *ret0, err
}

// Addresses is a free data retrieval call binding the contract method 0xedf26d9b.
//
// Solidity: function addresses(uint256 ) view returns(address)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationSession) Addresses(arg0 *big.Int) (common.Address, error) {
	return _ETHDKGGroupAccusation.Contract.Addresses(&_ETHDKGGroupAccusation.CallOpts, arg0)
}

// Addresses is a free data retrieval call binding the contract method 0xedf26d9b.
//
// Solidity: function addresses(uint256 ) view returns(address)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationCallerSession) Addresses(arg0 *big.Int) (common.Address, error) {
	return _ETHDKGGroupAccusation.Contract.Addresses(&_ETHDKGGroupAccusation.CallOpts, arg0)
}

// Commitments1stCoefficient is a free data retrieval call binding the contract method 0x2cf4050b.
//
// Solidity: function commitments_1st_coefficient(address , uint256 ) view returns(uint256)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationCaller) Commitments1stCoefficient(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGGroupAccusation.contract.Call(opts, out, "commitments_1st_coefficient", arg0, arg1)
	return *ret0, err
}

// Commitments1stCoefficient is a free data retrieval call binding the contract method 0x2cf4050b.
//
// Solidity: function commitments_1st_coefficient(address , uint256 ) view returns(uint256)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationSession) Commitments1stCoefficient(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _ETHDKGGroupAccusation.Contract.Commitments1stCoefficient(&_ETHDKGGroupAccusation.CallOpts, arg0, arg1)
}

// Commitments1stCoefficient is a free data retrieval call binding the contract method 0x2cf4050b.
//
// Solidity: function commitments_1st_coefficient(address , uint256 ) view returns(uint256)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationCallerSession) Commitments1stCoefficient(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _ETHDKGGroupAccusation.Contract.Commitments1stCoefficient(&_ETHDKGGroupAccusation.CallOpts, arg0, arg1)
}

// CompletionCheck is a free data retrieval call binding the contract method 0x75f7ed6a.
//
// Solidity: function completion_check() view returns(bool)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationCaller) CompletionCheck(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ETHDKGGroupAccusation.contract.Call(opts, out, "completion_check")
	return *ret0, err
}

// CompletionCheck is a free data retrieval call binding the contract method 0x75f7ed6a.
//
// Solidity: function completion_check() view returns(bool)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationSession) CompletionCheck() (bool, error) {
	return _ETHDKGGroupAccusation.Contract.CompletionCheck(&_ETHDKGGroupAccusation.CallOpts)
}

// CompletionCheck is a free data retrieval call binding the contract method 0x75f7ed6a.
//
// Solidity: function completion_check() view returns(bool)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationCallerSession) CompletionCheck() (bool, error) {
	return _ETHDKGGroupAccusation.Contract.CompletionCheck(&_ETHDKGGroupAccusation.CallOpts)
}

// GpkjSubmissions is a free data retrieval call binding the contract method 0xfef001a9.
//
// Solidity: function gpkj_submissions(address , uint256 ) view returns(uint256)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationCaller) GpkjSubmissions(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGGroupAccusation.contract.Call(opts, out, "gpkj_submissions", arg0, arg1)
	return *ret0, err
}

// GpkjSubmissions is a free data retrieval call binding the contract method 0xfef001a9.
//
// Solidity: function gpkj_submissions(address , uint256 ) view returns(uint256)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationSession) GpkjSubmissions(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _ETHDKGGroupAccusation.Contract.GpkjSubmissions(&_ETHDKGGroupAccusation.CallOpts, arg0, arg1)
}

// GpkjSubmissions is a free data retrieval call binding the contract method 0xfef001a9.
//
// Solidity: function gpkj_submissions(address , uint256 ) view returns(uint256)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationCallerSession) GpkjSubmissions(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _ETHDKGGroupAccusation.Contract.GpkjSubmissions(&_ETHDKGGroupAccusation.CallOpts, arg0, arg1)
}

// InitialMessage is a free data retrieval call binding the contract method 0xaa7bd338.
//
// Solidity: function initial_message() view returns(bytes)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationCaller) InitialMessage(opts *bind.CallOpts) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _ETHDKGGroupAccusation.contract.Call(opts, out, "initial_message")
	return *ret0, err
}

// InitialMessage is a free data retrieval call binding the contract method 0xaa7bd338.
//
// Solidity: function initial_message() view returns(bytes)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationSession) InitialMessage() ([]byte, error) {
	return _ETHDKGGroupAccusation.Contract.InitialMessage(&_ETHDKGGroupAccusation.CallOpts)
}

// InitialMessage is a free data retrieval call binding the contract method 0xaa7bd338.
//
// Solidity: function initial_message() view returns(bytes)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationCallerSession) InitialMessage() ([]byte, error) {
	return _ETHDKGGroupAccusation.Contract.InitialMessage(&_ETHDKGGroupAccusation.CallOpts)
}

// InitialSignatures is a free data retrieval call binding the contract method 0x7328f826.
//
// Solidity: function initial_signatures(address , uint256 ) view returns(uint256)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationCaller) InitialSignatures(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGGroupAccusation.contract.Call(opts, out, "initial_signatures", arg0, arg1)
	return *ret0, err
}

// InitialSignatures is a free data retrieval call binding the contract method 0x7328f826.
//
// Solidity: function initial_signatures(address , uint256 ) view returns(uint256)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationSession) InitialSignatures(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _ETHDKGGroupAccusation.Contract.InitialSignatures(&_ETHDKGGroupAccusation.CallOpts, arg0, arg1)
}

// InitialSignatures is a free data retrieval call binding the contract method 0x7328f826.
//
// Solidity: function initial_signatures(address , uint256 ) view returns(uint256)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationCallerSession) InitialSignatures(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _ETHDKGGroupAccusation.Contract.InitialSignatures(&_ETHDKGGroupAccusation.CallOpts, arg0, arg1)
}

// IsMalicious is a free data retrieval call binding the contract method 0xeadfcadc.
//
// Solidity: function is_malicious(address ) view returns(bool)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationCaller) IsMalicious(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ETHDKGGroupAccusation.contract.Call(opts, out, "is_malicious", arg0)
	return *ret0, err
}

// IsMalicious is a free data retrieval call binding the contract method 0xeadfcadc.
//
// Solidity: function is_malicious(address ) view returns(bool)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationSession) IsMalicious(arg0 common.Address) (bool, error) {
	return _ETHDKGGroupAccusation.Contract.IsMalicious(&_ETHDKGGroupAccusation.CallOpts, arg0)
}

// IsMalicious is a free data retrieval call binding the contract method 0xeadfcadc.
//
// Solidity: function is_malicious(address ) view returns(bool)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationCallerSession) IsMalicious(arg0 common.Address) (bool, error) {
	return _ETHDKGGroupAccusation.Contract.IsMalicious(&_ETHDKGGroupAccusation.CallOpts, arg0)
}

// KeyShareSubmissionCheck is a free data retrieval call binding the contract method 0x836889dc.
//
// Solidity: function key_share_submission_check() view returns(bool)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationCaller) KeyShareSubmissionCheck(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ETHDKGGroupAccusation.contract.Call(opts, out, "key_share_submission_check")
	return *ret0, err
}

// KeyShareSubmissionCheck is a free data retrieval call binding the contract method 0x836889dc.
//
// Solidity: function key_share_submission_check() view returns(bool)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationSession) KeyShareSubmissionCheck() (bool, error) {
	return _ETHDKGGroupAccusation.Contract.KeyShareSubmissionCheck(&_ETHDKGGroupAccusation.CallOpts)
}

// KeyShareSubmissionCheck is a free data retrieval call binding the contract method 0x836889dc.
//
// Solidity: function key_share_submission_check() view returns(bool)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationCallerSession) KeyShareSubmissionCheck() (bool, error) {
	return _ETHDKGGroupAccusation.Contract.KeyShareSubmissionCheck(&_ETHDKGGroupAccusation.CallOpts)
}

// KeyShares is a free data retrieval call binding the contract method 0xa88c9e1c.
//
// Solidity: function key_shares(address , uint256 ) view returns(uint256)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationCaller) KeyShares(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGGroupAccusation.contract.Call(opts, out, "key_shares", arg0, arg1)
	return *ret0, err
}

// KeyShares is a free data retrieval call binding the contract method 0xa88c9e1c.
//
// Solidity: function key_shares(address , uint256 ) view returns(uint256)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationSession) KeyShares(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _ETHDKGGroupAccusation.Contract.KeyShares(&_ETHDKGGroupAccusation.CallOpts, arg0, arg1)
}

// KeyShares is a free data retrieval call binding the contract method 0xa88c9e1c.
//
// Solidity: function key_shares(address , uint256 ) view returns(uint256)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationCallerSession) KeyShares(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _ETHDKGGroupAccusation.Contract.KeyShares(&_ETHDKGGroupAccusation.CallOpts, arg0, arg1)
}

// MasterPublicKey is a free data retrieval call binding the contract method 0xe6511378.
//
// Solidity: function master_public_key(uint256 ) view returns(uint256)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationCaller) MasterPublicKey(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGGroupAccusation.contract.Call(opts, out, "master_public_key", arg0)
	return *ret0, err
}

// MasterPublicKey is a free data retrieval call binding the contract method 0xe6511378.
//
// Solidity: function master_public_key(uint256 ) view returns(uint256)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationSession) MasterPublicKey(arg0 *big.Int) (*big.Int, error) {
	return _ETHDKGGroupAccusation.Contract.MasterPublicKey(&_ETHDKGGroupAccusation.CallOpts, arg0)
}

// MasterPublicKey is a free data retrieval call binding the contract method 0xe6511378.
//
// Solidity: function master_public_key(uint256 ) view returns(uint256)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationCallerSession) MasterPublicKey(arg0 *big.Int) (*big.Int, error) {
	return _ETHDKGGroupAccusation.Contract.MasterPublicKey(&_ETHDKGGroupAccusation.CallOpts, arg0)
}

// MpkSubmissionCheck is a free data retrieval call binding the contract method 0x050a54f0.
//
// Solidity: function mpk_submission_check() view returns(bool)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationCaller) MpkSubmissionCheck(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ETHDKGGroupAccusation.contract.Call(opts, out, "mpk_submission_check")
	return *ret0, err
}

// MpkSubmissionCheck is a free data retrieval call binding the contract method 0x050a54f0.
//
// Solidity: function mpk_submission_check() view returns(bool)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationSession) MpkSubmissionCheck() (bool, error) {
	return _ETHDKGGroupAccusation.Contract.MpkSubmissionCheck(&_ETHDKGGroupAccusation.CallOpts)
}

// MpkSubmissionCheck is a free data retrieval call binding the contract method 0x050a54f0.
//
// Solidity: function mpk_submission_check() view returns(bool)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationCallerSession) MpkSubmissionCheck() (bool, error) {
	return _ETHDKGGroupAccusation.Contract.MpkSubmissionCheck(&_ETHDKGGroupAccusation.CallOpts)
}

// PublicKeys is a free data retrieval call binding the contract method 0x92896b2d.
//
// Solidity: function public_keys(address , uint256 ) view returns(uint256)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationCaller) PublicKeys(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGGroupAccusation.contract.Call(opts, out, "public_keys", arg0, arg1)
	return *ret0, err
}

// PublicKeys is a free data retrieval call binding the contract method 0x92896b2d.
//
// Solidity: function public_keys(address , uint256 ) view returns(uint256)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationSession) PublicKeys(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _ETHDKGGroupAccusation.Contract.PublicKeys(&_ETHDKGGroupAccusation.CallOpts, arg0, arg1)
}

// PublicKeys is a free data retrieval call binding the contract method 0x92896b2d.
//
// Solidity: function public_keys(address , uint256 ) view returns(uint256)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationCallerSession) PublicKeys(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _ETHDKGGroupAccusation.Contract.PublicKeys(&_ETHDKGGroupAccusation.CallOpts, arg0, arg1)
}

// RegistrationCheck is a free data retrieval call binding the contract method 0xb7b09ed6.
//
// Solidity: function registration_check() view returns(bool)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationCaller) RegistrationCheck(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ETHDKGGroupAccusation.contract.Call(opts, out, "registration_check")
	return *ret0, err
}

// RegistrationCheck is a free data retrieval call binding the contract method 0xb7b09ed6.
//
// Solidity: function registration_check() view returns(bool)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationSession) RegistrationCheck() (bool, error) {
	return _ETHDKGGroupAccusation.Contract.RegistrationCheck(&_ETHDKGGroupAccusation.CallOpts)
}

// RegistrationCheck is a free data retrieval call binding the contract method 0xb7b09ed6.
//
// Solidity: function registration_check() view returns(bool)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationCallerSession) RegistrationCheck() (bool, error) {
	return _ETHDKGGroupAccusation.Contract.RegistrationCheck(&_ETHDKGGroupAccusation.CallOpts)
}

// ShareDistributionCheck is a free data retrieval call binding the contract method 0x2f11b985.
//
// Solidity: function share_distribution_check() view returns(bool)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationCaller) ShareDistributionCheck(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ETHDKGGroupAccusation.contract.Call(opts, out, "share_distribution_check")
	return *ret0, err
}

// ShareDistributionCheck is a free data retrieval call binding the contract method 0x2f11b985.
//
// Solidity: function share_distribution_check() view returns(bool)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationSession) ShareDistributionCheck() (bool, error) {
	return _ETHDKGGroupAccusation.Contract.ShareDistributionCheck(&_ETHDKGGroupAccusation.CallOpts)
}

// ShareDistributionCheck is a free data retrieval call binding the contract method 0x2f11b985.
//
// Solidity: function share_distribution_check() view returns(bool)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationCallerSession) ShareDistributionCheck() (bool, error) {
	return _ETHDKGGroupAccusation.Contract.ShareDistributionCheck(&_ETHDKGGroupAccusation.CallOpts)
}

// ShareDistributionHashes is a free data retrieval call binding the contract method 0xc21bee83.
//
// Solidity: function share_distribution_hashes(address ) view returns(bytes32)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationCaller) ShareDistributionHashes(opts *bind.CallOpts, arg0 common.Address) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _ETHDKGGroupAccusation.contract.Call(opts, out, "share_distribution_hashes", arg0)
	return *ret0, err
}

// ShareDistributionHashes is a free data retrieval call binding the contract method 0xc21bee83.
//
// Solidity: function share_distribution_hashes(address ) view returns(bytes32)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationSession) ShareDistributionHashes(arg0 common.Address) ([32]byte, error) {
	return _ETHDKGGroupAccusation.Contract.ShareDistributionHashes(&_ETHDKGGroupAccusation.CallOpts, arg0)
}

// ShareDistributionHashes is a free data retrieval call binding the contract method 0xc21bee83.
//
// Solidity: function share_distribution_hashes(address ) view returns(bytes32)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationCallerSession) ShareDistributionHashes(arg0 common.Address) ([32]byte, error) {
	return _ETHDKGGroupAccusation.Contract.ShareDistributionHashes(&_ETHDKGGroupAccusation.CallOpts, arg0)
}

// GroupAccusationGPKj is a paid mutator transaction binding the contract method 0xa6872833.
//
// Solidity: function Group_Accusation_GPKj(uint256[] invArray, uint256[] honestIndices, uint256[] dishonestIndices) returns()
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationTransactor) GroupAccusationGPKj(opts *bind.TransactOpts, invArray []*big.Int, honestIndices []*big.Int, dishonestIndices []*big.Int) (*types.Transaction, error) {
	return _ETHDKGGroupAccusation.contract.Transact(opts, "Group_Accusation_GPKj", invArray, honestIndices, dishonestIndices)
}

// GroupAccusationGPKj is a paid mutator transaction binding the contract method 0xa6872833.
//
// Solidity: function Group_Accusation_GPKj(uint256[] invArray, uint256[] honestIndices, uint256[] dishonestIndices) returns()
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationSession) GroupAccusationGPKj(invArray []*big.Int, honestIndices []*big.Int, dishonestIndices []*big.Int) (*types.Transaction, error) {
	return _ETHDKGGroupAccusation.Contract.GroupAccusationGPKj(&_ETHDKGGroupAccusation.TransactOpts, invArray, honestIndices, dishonestIndices)
}

// GroupAccusationGPKj is a paid mutator transaction binding the contract method 0xa6872833.
//
// Solidity: function Group_Accusation_GPKj(uint256[] invArray, uint256[] honestIndices, uint256[] dishonestIndices) returns()
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationTransactorSession) GroupAccusationGPKj(invArray []*big.Int, honestIndices []*big.Int, dishonestIndices []*big.Int) (*types.Transaction, error) {
	return _ETHDKGGroupAccusation.Contract.GroupAccusationGPKj(&_ETHDKGGroupAccusation.TransactOpts, invArray, honestIndices, dishonestIndices)
}

// ETHDKGGroupAccusationKeyShareSubmissionIterator is returned from FilterKeyShareSubmission and is used to iterate over the raw logs and unpacked data for KeyShareSubmission events raised by the ETHDKGGroupAccusation contract.
type ETHDKGGroupAccusationKeyShareSubmissionIterator struct {
	Event *ETHDKGGroupAccusationKeyShareSubmission // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGGroupAccusationKeyShareSubmissionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGGroupAccusationKeyShareSubmission)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGGroupAccusationKeyShareSubmission)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGGroupAccusationKeyShareSubmissionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGGroupAccusationKeyShareSubmissionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGGroupAccusationKeyShareSubmission represents a KeyShareSubmission event raised by the ETHDKGGroupAccusation contract.
type ETHDKGGroupAccusationKeyShareSubmission struct {
	Issuer                     common.Address
	KeyShareG1                 [2]*big.Int
	KeyShareG1CorrectnessProof [2]*big.Int
	KeyShareG2                 [4]*big.Int
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterKeyShareSubmission is a free log retrieval operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationFilterer) FilterKeyShareSubmission(opts *bind.FilterOpts) (*ETHDKGGroupAccusationKeyShareSubmissionIterator, error) {

	logs, sub, err := _ETHDKGGroupAccusation.contract.FilterLogs(opts, "KeyShareSubmission")
	if err != nil {
		return nil, err
	}
	return &ETHDKGGroupAccusationKeyShareSubmissionIterator{contract: _ETHDKGGroupAccusation.contract, event: "KeyShareSubmission", logs: logs, sub: sub}, nil
}

// WatchKeyShareSubmission is a free log subscription operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationFilterer) WatchKeyShareSubmission(opts *bind.WatchOpts, sink chan<- *ETHDKGGroupAccusationKeyShareSubmission) (event.Subscription, error) {

	logs, sub, err := _ETHDKGGroupAccusation.contract.WatchLogs(opts, "KeyShareSubmission")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGGroupAccusationKeyShareSubmission)
				if err := _ETHDKGGroupAccusation.contract.UnpackLog(event, "KeyShareSubmission", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyShareSubmission is a log parse operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationFilterer) ParseKeyShareSubmission(log types.Log) (*ETHDKGGroupAccusationKeyShareSubmission, error) {
	event := new(ETHDKGGroupAccusationKeyShareSubmission)
	if err := _ETHDKGGroupAccusation.contract.UnpackLog(event, "KeyShareSubmission", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ETHDKGGroupAccusationRegistrationOpenIterator is returned from FilterRegistrationOpen and is used to iterate over the raw logs and unpacked data for RegistrationOpen events raised by the ETHDKGGroupAccusation contract.
type ETHDKGGroupAccusationRegistrationOpenIterator struct {
	Event *ETHDKGGroupAccusationRegistrationOpen // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGGroupAccusationRegistrationOpenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGGroupAccusationRegistrationOpen)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGGroupAccusationRegistrationOpen)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGGroupAccusationRegistrationOpenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGGroupAccusationRegistrationOpenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGGroupAccusationRegistrationOpen represents a RegistrationOpen event raised by the ETHDKGGroupAccusation contract.
type ETHDKGGroupAccusationRegistrationOpen struct {
	DkgStarts              *big.Int
	RegistrationEnds       *big.Int
	ShareDistributionEnds  *big.Int
	DisputeEnds            *big.Int
	KeyShareSubmissionEnds *big.Int
	MpkSubmissionEnds      *big.Int
	GpkjSubmissionEnds     *big.Int
	GpkjDisputeEnds        *big.Int
	DkgComplete            *big.Int
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterRegistrationOpen is a free log retrieval operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationFilterer) FilterRegistrationOpen(opts *bind.FilterOpts) (*ETHDKGGroupAccusationRegistrationOpenIterator, error) {

	logs, sub, err := _ETHDKGGroupAccusation.contract.FilterLogs(opts, "RegistrationOpen")
	if err != nil {
		return nil, err
	}
	return &ETHDKGGroupAccusationRegistrationOpenIterator{contract: _ETHDKGGroupAccusation.contract, event: "RegistrationOpen", logs: logs, sub: sub}, nil
}

// WatchRegistrationOpen is a free log subscription operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationFilterer) WatchRegistrationOpen(opts *bind.WatchOpts, sink chan<- *ETHDKGGroupAccusationRegistrationOpen) (event.Subscription, error) {

	logs, sub, err := _ETHDKGGroupAccusation.contract.WatchLogs(opts, "RegistrationOpen")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGGroupAccusationRegistrationOpen)
				if err := _ETHDKGGroupAccusation.contract.UnpackLog(event, "RegistrationOpen", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistrationOpen is a log parse operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationFilterer) ParseRegistrationOpen(log types.Log) (*ETHDKGGroupAccusationRegistrationOpen, error) {
	event := new(ETHDKGGroupAccusationRegistrationOpen)
	if err := _ETHDKGGroupAccusation.contract.UnpackLog(event, "RegistrationOpen", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ETHDKGGroupAccusationShareDistributionIterator is returned from FilterShareDistribution and is used to iterate over the raw logs and unpacked data for ShareDistribution events raised by the ETHDKGGroupAccusation contract.
type ETHDKGGroupAccusationShareDistributionIterator struct {
	Event *ETHDKGGroupAccusationShareDistribution // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGGroupAccusationShareDistributionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGGroupAccusationShareDistribution)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGGroupAccusationShareDistribution)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGGroupAccusationShareDistributionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGGroupAccusationShareDistributionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGGroupAccusationShareDistribution represents a ShareDistribution event raised by the ETHDKGGroupAccusation contract.
type ETHDKGGroupAccusationShareDistribution struct {
	Issuer          common.Address
	Index           *big.Int
	EncryptedShares []*big.Int
	Commitments     [][2]*big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterShareDistribution is a free log retrieval operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationFilterer) FilterShareDistribution(opts *bind.FilterOpts) (*ETHDKGGroupAccusationShareDistributionIterator, error) {

	logs, sub, err := _ETHDKGGroupAccusation.contract.FilterLogs(opts, "ShareDistribution")
	if err != nil {
		return nil, err
	}
	return &ETHDKGGroupAccusationShareDistributionIterator{contract: _ETHDKGGroupAccusation.contract, event: "ShareDistribution", logs: logs, sub: sub}, nil
}

// WatchShareDistribution is a free log subscription operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationFilterer) WatchShareDistribution(opts *bind.WatchOpts, sink chan<- *ETHDKGGroupAccusationShareDistribution) (event.Subscription, error) {

	logs, sub, err := _ETHDKGGroupAccusation.contract.WatchLogs(opts, "ShareDistribution")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGGroupAccusationShareDistribution)
				if err := _ETHDKGGroupAccusation.contract.UnpackLog(event, "ShareDistribution", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseShareDistribution is a log parse operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationFilterer) ParseShareDistribution(log types.Log) (*ETHDKGGroupAccusationShareDistribution, error) {
	event := new(ETHDKGGroupAccusationShareDistribution)
	if err := _ETHDKGGroupAccusation.contract.UnpackLog(event, "ShareDistribution", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ETHDKGGroupAccusationValidatorMemberIterator is returned from FilterValidatorMember and is used to iterate over the raw logs and unpacked data for ValidatorMember events raised by the ETHDKGGroupAccusation contract.
type ETHDKGGroupAccusationValidatorMemberIterator struct {
	Event *ETHDKGGroupAccusationValidatorMember // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGGroupAccusationValidatorMemberIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGGroupAccusationValidatorMember)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGGroupAccusationValidatorMember)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGGroupAccusationValidatorMemberIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGGroupAccusationValidatorMemberIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGGroupAccusationValidatorMember represents a ValidatorMember event raised by the ETHDKGGroupAccusation contract.
type ETHDKGGroupAccusationValidatorMember struct {
	Account common.Address
	Epoch   *big.Int
	Index   *big.Int
	Share0  *big.Int
	Share1  *big.Int
	Share2  *big.Int
	Share3  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterValidatorMember is a free log retrieval operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationFilterer) FilterValidatorMember(opts *bind.FilterOpts) (*ETHDKGGroupAccusationValidatorMemberIterator, error) {

	logs, sub, err := _ETHDKGGroupAccusation.contract.FilterLogs(opts, "ValidatorMember")
	if err != nil {
		return nil, err
	}
	return &ETHDKGGroupAccusationValidatorMemberIterator{contract: _ETHDKGGroupAccusation.contract, event: "ValidatorMember", logs: logs, sub: sub}, nil
}

// WatchValidatorMember is a free log subscription operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationFilterer) WatchValidatorMember(opts *bind.WatchOpts, sink chan<- *ETHDKGGroupAccusationValidatorMember) (event.Subscription, error) {

	logs, sub, err := _ETHDKGGroupAccusation.contract.WatchLogs(opts, "ValidatorMember")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGGroupAccusationValidatorMember)
				if err := _ETHDKGGroupAccusation.contract.UnpackLog(event, "ValidatorMember", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorMember is a log parse operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationFilterer) ParseValidatorMember(log types.Log) (*ETHDKGGroupAccusationValidatorMember, error) {
	event := new(ETHDKGGroupAccusationValidatorMember)
	if err := _ETHDKGGroupAccusation.contract.UnpackLog(event, "ValidatorMember", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ETHDKGGroupAccusationValidatorSetIterator is returned from FilterValidatorSet and is used to iterate over the raw logs and unpacked data for ValidatorSet events raised by the ETHDKGGroupAccusation contract.
type ETHDKGGroupAccusationValidatorSetIterator struct {
	Event *ETHDKGGroupAccusationValidatorSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGGroupAccusationValidatorSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGGroupAccusationValidatorSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGGroupAccusationValidatorSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGGroupAccusationValidatorSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGGroupAccusationValidatorSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGGroupAccusationValidatorSet represents a ValidatorSet event raised by the ETHDKGGroupAccusation contract.
type ETHDKGGroupAccusationValidatorSet struct {
	ValidatorCount uint8
	Epoch          *big.Int
	EthHeight      uint32
	MadHeight      uint32
	GroupKey0      *big.Int
	GroupKey1      *big.Int
	GroupKey2      *big.Int
	GroupKey3      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterValidatorSet is a free log retrieval operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationFilterer) FilterValidatorSet(opts *bind.FilterOpts) (*ETHDKGGroupAccusationValidatorSetIterator, error) {

	logs, sub, err := _ETHDKGGroupAccusation.contract.FilterLogs(opts, "ValidatorSet")
	if err != nil {
		return nil, err
	}
	return &ETHDKGGroupAccusationValidatorSetIterator{contract: _ETHDKGGroupAccusation.contract, event: "ValidatorSet", logs: logs, sub: sub}, nil
}

// WatchValidatorSet is a free log subscription operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationFilterer) WatchValidatorSet(opts *bind.WatchOpts, sink chan<- *ETHDKGGroupAccusationValidatorSet) (event.Subscription, error) {

	logs, sub, err := _ETHDKGGroupAccusation.contract.WatchLogs(opts, "ValidatorSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGGroupAccusationValidatorSet)
				if err := _ETHDKGGroupAccusation.contract.UnpackLog(event, "ValidatorSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorSet is a log parse operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ETHDKGGroupAccusation *ETHDKGGroupAccusationFilterer) ParseValidatorSet(log types.Log) (*ETHDKGGroupAccusationValidatorSet, error) {
	event := new(ETHDKGGroupAccusationValidatorSet)
	if err := _ETHDKGGroupAccusation.contract.UnpackLog(event, "ValidatorSet", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ETHDKGStorageABI is the input ABI used to generate the binding from.
const ETHDKGStorageABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"key_share_G1\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"key_share_G1_correctness_proof\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"key_share_G2\",\"type\":\"uint256[4]\"}],\"name\":\"KeyShareSubmission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dkgStarts\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"registrationEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shareDistributionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disputeEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"keyShareSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mpkSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gpkjSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gpkjDisputeEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dkgComplete\",\"type\":\"uint256\"}],\"name\":\"RegistrationOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"encrypted_shares\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"}],\"name\":\"ShareDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share3\",\"type\":\"uint256\"}],\"name\":\"ValidatorMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"validatorCount\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"ethHeight\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"madHeight\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey3\",\"type\":\"uint256\"}],\"name\":\"ValidatorSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELTA_CONFIRM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_DISPUTE_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_DKG_COMPLETE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_GPKJ_DISPUTE_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_GPKJ_SUBMISSION_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_KEY_SHARE_SUBMISSION_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_MPK_SUBMISSION_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_REGISTRATION_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_SHARE_DISTRIBUTION_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"commitments_1st_coefficient\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"completion_check\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gpkj_submissions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initial_message\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"initial_signatures\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"is_malicious\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"key_share_submission_check\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"key_shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"master_public_key\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mpk_submission_check\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"public_keys\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registration_check\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"share_distribution_check\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"share_distribution_hashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// ETHDKGStorageBin is the compiled bytecode used for deploying new contracts.
var ETHDKGStorageBin = "0x608060405260405160200180807f43727970746f67726170687920697320677265617400000000000000000000008152506015019050604051602081830303815290604052600d9080519060200190610059929190610071565b50602860175534801561006b57600080fd5b5061011c565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826100a757600085556100ee565b82601f106100c057805160ff19168380011785556100ee565b828001600101855582156100ee579182015b828111156100ed5782518255916020019190600101906100d2565b5b5090506100fb91906100ff565b5090565b5b80821115610118576000816000905550600101610100565b5090565b6109868061012b6000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c8063a88c9e1c116100c3578063dc614e281161007c578063dc614e2814610532578063e2291ec314610550578063e65113781461056e578063eadfcadc146105b0578063edf26d9b1461060a578063fef001a91461066257610158565b8063a88c9e1c14610399578063aa7bd338146103fb578063ab63c7221461047e578063b7b09ed61461049c578063c21bee83146104bc578063d3cf61861461051457610158565b80637543b80f116101155780637543b80f1461029d57806375f7ed6a146102bb57806377fbebd1146102db578063836889dc146102f957806392896b2d146103195780639c2aa8381461037b57610158565b8063050a54f01461015d57806307f02c541461017d5780630de1553f1461019b5780632cf4050b146101b95780632f11b9851461021b5780637328f8261461023b575b600080fd5b6101656106c4565b60405180821515815260200191505060405180910390f35b6101856106d7565b6040518082815260200191505060405180910390f35b6101a36106dd565b6040518082815260200191505060405180910390f35b610205600480360360408110156101cf57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506106e3565b6040518082815260200191505060405180910390f35b61022361070b565b60405180821515815260200191505060405180910390f35b6102876004803603604081101561025157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061071e565b6040518082815260200191505060405180910390f35b6102a5610746565b6040518082815260200191505060405180910390f35b6102c361074b565b60405180821515815260200191505060405180910390f35b6102e361075e565b6040518082815260200191505060405180910390f35b610301610764565b60405180821515815260200191505060405180910390f35b6103656004803603604081101561032f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610777565b6040518082815260200191505060405180910390f35b61038361079f565b6040518082815260200191505060405180910390f35b6103e5600480360360408110156103af57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506107a5565b6040518082815260200191505060405180910390f35b6104036107cd565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610443578082015181840152602081019050610428565b50505050905090810190601f1680156104705780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61048661086b565b6040518082815260200191505060405180910390f35b6104a4610871565b60405180821515815260200191505060405180910390f35b6104fe600480360360208110156104d257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610884565b6040518082815260200191505060405180910390f35b61051c61089c565b6040518082815260200191505060405180910390f35b61053a6108a2565b6040518082815260200191505060405180910390f35b6105586108a8565b6040518082815260200191505060405180910390f35b61059a6004803603602081101561058457600080fd5b81019080803590602001909291905050506108ae565b6040518082815260200191505060405180910390f35b6105f2600480360360208110156105c657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506108c9565b60405180821515815260200191505060405180910390f35b6106366004803603602081101561062057600080fd5b81019080803590602001909291905050506108e9565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6106ae6004803603604081101561067857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610928565b6040518082815260200191505060405180910390f35b600e60039054906101000a900460ff1681565b60135481565b600f5481565b600360205281600052604060002081600281106106ff57600080fd5b01600091509150505481565b600e60019054906101000a900460ff1681565b6006602052816000526040600020816002811061073a57600080fd5b01600091509150505481565b600681565b600e60049054906101000a900460ff1681565b60165481565b600e60029054906101000a900460ff1681565b6001602052816000526040600020816002811061079357600080fd5b01600091509150505481565b60145481565b600460205281600052604060002081600281106107c157600080fd5b01600091509150505481565b600d8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108635780601f1061083857610100808354040283529160200191610863565b820191906000526020600020905b81548152906001019060200180831161084657829003601f168201915b505050505081565b60155481565b600e60009054906101000a900460ff1681565b60026020528060005260406000206000915090505481565b60115481565b60105481565b60125481565b600981600481106108be57600080fd5b016000915090505481565b60086020528060005260406000206000915054906101000a900460ff1681565b600081815481106108f957600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6005602052816000526040600020816004811061094457600080fd5b0160009150915050548156fea26469706673582212202b9011aedbd68d16cde723489bfb4652b40653687b87d8e48395f1dfcfbe43a364736f6c63430007060033"

// DeployETHDKGStorage deploys a new Ethereum contract, binding an instance of ETHDKGStorage to it.
func DeployETHDKGStorage(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ETHDKGStorage, error) {
	parsed, err := abi.JSON(strings.NewReader(ETHDKGStorageABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ETHDKGStorageBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ETHDKGStorage{ETHDKGStorageCaller: ETHDKGStorageCaller{contract: contract}, ETHDKGStorageTransactor: ETHDKGStorageTransactor{contract: contract}, ETHDKGStorageFilterer: ETHDKGStorageFilterer{contract: contract}}, nil
}

// ETHDKGStorage is an auto generated Go binding around an Ethereum contract.
type ETHDKGStorage struct {
	ETHDKGStorageCaller     // Read-only binding to the contract
	ETHDKGStorageTransactor // Write-only binding to the contract
	ETHDKGStorageFilterer   // Log filterer for contract events
}

// ETHDKGStorageCaller is an auto generated read-only Go binding around an Ethereum contract.
type ETHDKGStorageCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGStorageTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ETHDKGStorageTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGStorageFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ETHDKGStorageFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGStorageSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ETHDKGStorageSession struct {
	Contract     *ETHDKGStorage    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ETHDKGStorageCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ETHDKGStorageCallerSession struct {
	Contract *ETHDKGStorageCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// ETHDKGStorageTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ETHDKGStorageTransactorSession struct {
	Contract     *ETHDKGStorageTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// ETHDKGStorageRaw is an auto generated low-level Go binding around an Ethereum contract.
type ETHDKGStorageRaw struct {
	Contract *ETHDKGStorage // Generic contract binding to access the raw methods on
}

// ETHDKGStorageCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ETHDKGStorageCallerRaw struct {
	Contract *ETHDKGStorageCaller // Generic read-only contract binding to access the raw methods on
}

// ETHDKGStorageTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ETHDKGStorageTransactorRaw struct {
	Contract *ETHDKGStorageTransactor // Generic write-only contract binding to access the raw methods on
}

// NewETHDKGStorage creates a new instance of ETHDKGStorage, bound to a specific deployed contract.
func NewETHDKGStorage(address common.Address, backend bind.ContractBackend) (*ETHDKGStorage, error) {
	contract, err := bindETHDKGStorage(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ETHDKGStorage{ETHDKGStorageCaller: ETHDKGStorageCaller{contract: contract}, ETHDKGStorageTransactor: ETHDKGStorageTransactor{contract: contract}, ETHDKGStorageFilterer: ETHDKGStorageFilterer{contract: contract}}, nil
}

// NewETHDKGStorageCaller creates a new read-only instance of ETHDKGStorage, bound to a specific deployed contract.
func NewETHDKGStorageCaller(address common.Address, caller bind.ContractCaller) (*ETHDKGStorageCaller, error) {
	contract, err := bindETHDKGStorage(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ETHDKGStorageCaller{contract: contract}, nil
}

// NewETHDKGStorageTransactor creates a new write-only instance of ETHDKGStorage, bound to a specific deployed contract.
func NewETHDKGStorageTransactor(address common.Address, transactor bind.ContractTransactor) (*ETHDKGStorageTransactor, error) {
	contract, err := bindETHDKGStorage(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ETHDKGStorageTransactor{contract: contract}, nil
}

// NewETHDKGStorageFilterer creates a new log filterer instance of ETHDKGStorage, bound to a specific deployed contract.
func NewETHDKGStorageFilterer(address common.Address, filterer bind.ContractFilterer) (*ETHDKGStorageFilterer, error) {
	contract, err := bindETHDKGStorage(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ETHDKGStorageFilterer{contract: contract}, nil
}

// bindETHDKGStorage binds a generic wrapper to an already deployed contract.
func bindETHDKGStorage(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ETHDKGStorageABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETHDKGStorage *ETHDKGStorageRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ETHDKGStorage.Contract.ETHDKGStorageCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETHDKGStorage *ETHDKGStorageRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKGStorage.Contract.ETHDKGStorageTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETHDKGStorage *ETHDKGStorageRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETHDKGStorage.Contract.ETHDKGStorageTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETHDKGStorage *ETHDKGStorageCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ETHDKGStorage.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETHDKGStorage *ETHDKGStorageTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKGStorage.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETHDKGStorage *ETHDKGStorageTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETHDKGStorage.Contract.contract.Transact(opts, method, params...)
}

// DELTACONFIRM is a free data retrieval call binding the contract method 0x7543b80f.
//
// Solidity: function DELTA_CONFIRM() view returns(uint256)
func (_ETHDKGStorage *ETHDKGStorageCaller) DELTACONFIRM(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGStorage.contract.Call(opts, out, "DELTA_CONFIRM")
	return *ret0, err
}

// DELTACONFIRM is a free data retrieval call binding the contract method 0x7543b80f.
//
// Solidity: function DELTA_CONFIRM() view returns(uint256)
func (_ETHDKGStorage *ETHDKGStorageSession) DELTACONFIRM() (*big.Int, error) {
	return _ETHDKGStorage.Contract.DELTACONFIRM(&_ETHDKGStorage.CallOpts)
}

// DELTACONFIRM is a free data retrieval call binding the contract method 0x7543b80f.
//
// Solidity: function DELTA_CONFIRM() view returns(uint256)
func (_ETHDKGStorage *ETHDKGStorageCallerSession) DELTACONFIRM() (*big.Int, error) {
	return _ETHDKGStorage.Contract.DELTACONFIRM(&_ETHDKGStorage.CallOpts)
}

// TDISPUTEEND is a free data retrieval call binding the contract method 0xd3cf6186.
//
// Solidity: function T_DISPUTE_END() view returns(uint256)
func (_ETHDKGStorage *ETHDKGStorageCaller) TDISPUTEEND(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGStorage.contract.Call(opts, out, "T_DISPUTE_END")
	return *ret0, err
}

// TDISPUTEEND is a free data retrieval call binding the contract method 0xd3cf6186.
//
// Solidity: function T_DISPUTE_END() view returns(uint256)
func (_ETHDKGStorage *ETHDKGStorageSession) TDISPUTEEND() (*big.Int, error) {
	return _ETHDKGStorage.Contract.TDISPUTEEND(&_ETHDKGStorage.CallOpts)
}

// TDISPUTEEND is a free data retrieval call binding the contract method 0xd3cf6186.
//
// Solidity: function T_DISPUTE_END() view returns(uint256)
func (_ETHDKGStorage *ETHDKGStorageCallerSession) TDISPUTEEND() (*big.Int, error) {
	return _ETHDKGStorage.Contract.TDISPUTEEND(&_ETHDKGStorage.CallOpts)
}

// TDKGCOMPLETE is a free data retrieval call binding the contract method 0x77fbebd1.
//
// Solidity: function T_DKG_COMPLETE() view returns(uint256)
func (_ETHDKGStorage *ETHDKGStorageCaller) TDKGCOMPLETE(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGStorage.contract.Call(opts, out, "T_DKG_COMPLETE")
	return *ret0, err
}

// TDKGCOMPLETE is a free data retrieval call binding the contract method 0x77fbebd1.
//
// Solidity: function T_DKG_COMPLETE() view returns(uint256)
func (_ETHDKGStorage *ETHDKGStorageSession) TDKGCOMPLETE() (*big.Int, error) {
	return _ETHDKGStorage.Contract.TDKGCOMPLETE(&_ETHDKGStorage.CallOpts)
}

// TDKGCOMPLETE is a free data retrieval call binding the contract method 0x77fbebd1.
//
// Solidity: function T_DKG_COMPLETE() view returns(uint256)
func (_ETHDKGStorage *ETHDKGStorageCallerSession) TDKGCOMPLETE() (*big.Int, error) {
	return _ETHDKGStorage.Contract.TDKGCOMPLETE(&_ETHDKGStorage.CallOpts)
}

// TGPKJDISPUTEEND is a free data retrieval call binding the contract method 0xab63c722.
//
// Solidity: function T_GPKJ_DISPUTE_END() view returns(uint256)
func (_ETHDKGStorage *ETHDKGStorageCaller) TGPKJDISPUTEEND(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGStorage.contract.Call(opts, out, "T_GPKJ_DISPUTE_END")
	return *ret0, err
}

// TGPKJDISPUTEEND is a free data retrieval call binding the contract method 0xab63c722.
//
// Solidity: function T_GPKJ_DISPUTE_END() view returns(uint256)
func (_ETHDKGStorage *ETHDKGStorageSession) TGPKJDISPUTEEND() (*big.Int, error) {
	return _ETHDKGStorage.Contract.TGPKJDISPUTEEND(&_ETHDKGStorage.CallOpts)
}

// TGPKJDISPUTEEND is a free data retrieval call binding the contract method 0xab63c722.
//
// Solidity: function T_GPKJ_DISPUTE_END() view returns(uint256)
func (_ETHDKGStorage *ETHDKGStorageCallerSession) TGPKJDISPUTEEND() (*big.Int, error) {
	return _ETHDKGStorage.Contract.TGPKJDISPUTEEND(&_ETHDKGStorage.CallOpts)
}

// TGPKJSUBMISSIONEND is a free data retrieval call binding the contract method 0x9c2aa838.
//
// Solidity: function T_GPKJ_SUBMISSION_END() view returns(uint256)
func (_ETHDKGStorage *ETHDKGStorageCaller) TGPKJSUBMISSIONEND(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGStorage.contract.Call(opts, out, "T_GPKJ_SUBMISSION_END")
	return *ret0, err
}

// TGPKJSUBMISSIONEND is a free data retrieval call binding the contract method 0x9c2aa838.
//
// Solidity: function T_GPKJ_SUBMISSION_END() view returns(uint256)
func (_ETHDKGStorage *ETHDKGStorageSession) TGPKJSUBMISSIONEND() (*big.Int, error) {
	return _ETHDKGStorage.Contract.TGPKJSUBMISSIONEND(&_ETHDKGStorage.CallOpts)
}

// TGPKJSUBMISSIONEND is a free data retrieval call binding the contract method 0x9c2aa838.
//
// Solidity: function T_GPKJ_SUBMISSION_END() view returns(uint256)
func (_ETHDKGStorage *ETHDKGStorageCallerSession) TGPKJSUBMISSIONEND() (*big.Int, error) {
	return _ETHDKGStorage.Contract.TGPKJSUBMISSIONEND(&_ETHDKGStorage.CallOpts)
}

// TKEYSHARESUBMISSIONEND is a free data retrieval call binding the contract method 0xe2291ec3.
//
// Solidity: function T_KEY_SHARE_SUBMISSION_END() view returns(uint256)
func (_ETHDKGStorage *ETHDKGStorageCaller) TKEYSHARESUBMISSIONEND(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGStorage.contract.Call(opts, out, "T_KEY_SHARE_SUBMISSION_END")
	return *ret0, err
}

// TKEYSHARESUBMISSIONEND is a free data retrieval call binding the contract method 0xe2291ec3.
//
// Solidity: function T_KEY_SHARE_SUBMISSION_END() view returns(uint256)
func (_ETHDKGStorage *ETHDKGStorageSession) TKEYSHARESUBMISSIONEND() (*big.Int, error) {
	return _ETHDKGStorage.Contract.TKEYSHARESUBMISSIONEND(&_ETHDKGStorage.CallOpts)
}

// TKEYSHARESUBMISSIONEND is a free data retrieval call binding the contract method 0xe2291ec3.
//
// Solidity: function T_KEY_SHARE_SUBMISSION_END() view returns(uint256)
func (_ETHDKGStorage *ETHDKGStorageCallerSession) TKEYSHARESUBMISSIONEND() (*big.Int, error) {
	return _ETHDKGStorage.Contract.TKEYSHARESUBMISSIONEND(&_ETHDKGStorage.CallOpts)
}

// TMPKSUBMISSIONEND is a free data retrieval call binding the contract method 0x07f02c54.
//
// Solidity: function T_MPK_SUBMISSION_END() view returns(uint256)
func (_ETHDKGStorage *ETHDKGStorageCaller) TMPKSUBMISSIONEND(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGStorage.contract.Call(opts, out, "T_MPK_SUBMISSION_END")
	return *ret0, err
}

// TMPKSUBMISSIONEND is a free data retrieval call binding the contract method 0x07f02c54.
//
// Solidity: function T_MPK_SUBMISSION_END() view returns(uint256)
func (_ETHDKGStorage *ETHDKGStorageSession) TMPKSUBMISSIONEND() (*big.Int, error) {
	return _ETHDKGStorage.Contract.TMPKSUBMISSIONEND(&_ETHDKGStorage.CallOpts)
}

// TMPKSUBMISSIONEND is a free data retrieval call binding the contract method 0x07f02c54.
//
// Solidity: function T_MPK_SUBMISSION_END() view returns(uint256)
func (_ETHDKGStorage *ETHDKGStorageCallerSession) TMPKSUBMISSIONEND() (*big.Int, error) {
	return _ETHDKGStorage.Contract.TMPKSUBMISSIONEND(&_ETHDKGStorage.CallOpts)
}

// TREGISTRATIONEND is a free data retrieval call binding the contract method 0x0de1553f.
//
// Solidity: function T_REGISTRATION_END() view returns(uint256)
func (_ETHDKGStorage *ETHDKGStorageCaller) TREGISTRATIONEND(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGStorage.contract.Call(opts, out, "T_REGISTRATION_END")
	return *ret0, err
}

// TREGISTRATIONEND is a free data retrieval call binding the contract method 0x0de1553f.
//
// Solidity: function T_REGISTRATION_END() view returns(uint256)
func (_ETHDKGStorage *ETHDKGStorageSession) TREGISTRATIONEND() (*big.Int, error) {
	return _ETHDKGStorage.Contract.TREGISTRATIONEND(&_ETHDKGStorage.CallOpts)
}

// TREGISTRATIONEND is a free data retrieval call binding the contract method 0x0de1553f.
//
// Solidity: function T_REGISTRATION_END() view returns(uint256)
func (_ETHDKGStorage *ETHDKGStorageCallerSession) TREGISTRATIONEND() (*big.Int, error) {
	return _ETHDKGStorage.Contract.TREGISTRATIONEND(&_ETHDKGStorage.CallOpts)
}

// TSHAREDISTRIBUTIONEND is a free data retrieval call binding the contract method 0xdc614e28.
//
// Solidity: function T_SHARE_DISTRIBUTION_END() view returns(uint256)
func (_ETHDKGStorage *ETHDKGStorageCaller) TSHAREDISTRIBUTIONEND(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGStorage.contract.Call(opts, out, "T_SHARE_DISTRIBUTION_END")
	return *ret0, err
}

// TSHAREDISTRIBUTIONEND is a free data retrieval call binding the contract method 0xdc614e28.
//
// Solidity: function T_SHARE_DISTRIBUTION_END() view returns(uint256)
func (_ETHDKGStorage *ETHDKGStorageSession) TSHAREDISTRIBUTIONEND() (*big.Int, error) {
	return _ETHDKGStorage.Contract.TSHAREDISTRIBUTIONEND(&_ETHDKGStorage.CallOpts)
}

// TSHAREDISTRIBUTIONEND is a free data retrieval call binding the contract method 0xdc614e28.
//
// Solidity: function T_SHARE_DISTRIBUTION_END() view returns(uint256)
func (_ETHDKGStorage *ETHDKGStorageCallerSession) TSHAREDISTRIBUTIONEND() (*big.Int, error) {
	return _ETHDKGStorage.Contract.TSHAREDISTRIBUTIONEND(&_ETHDKGStorage.CallOpts)
}

// Addresses is a free data retrieval call binding the contract method 0xedf26d9b.
//
// Solidity: function addresses(uint256 ) view returns(address)
func (_ETHDKGStorage *ETHDKGStorageCaller) Addresses(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ETHDKGStorage.contract.Call(opts, out, "addresses", arg0)
	return *ret0, err
}

// Addresses is a free data retrieval call binding the contract method 0xedf26d9b.
//
// Solidity: function addresses(uint256 ) view returns(address)
func (_ETHDKGStorage *ETHDKGStorageSession) Addresses(arg0 *big.Int) (common.Address, error) {
	return _ETHDKGStorage.Contract.Addresses(&_ETHDKGStorage.CallOpts, arg0)
}

// Addresses is a free data retrieval call binding the contract method 0xedf26d9b.
//
// Solidity: function addresses(uint256 ) view returns(address)
func (_ETHDKGStorage *ETHDKGStorageCallerSession) Addresses(arg0 *big.Int) (common.Address, error) {
	return _ETHDKGStorage.Contract.Addresses(&_ETHDKGStorage.CallOpts, arg0)
}

// Commitments1stCoefficient is a free data retrieval call binding the contract method 0x2cf4050b.
//
// Solidity: function commitments_1st_coefficient(address , uint256 ) view returns(uint256)
func (_ETHDKGStorage *ETHDKGStorageCaller) Commitments1stCoefficient(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGStorage.contract.Call(opts, out, "commitments_1st_coefficient", arg0, arg1)
	return *ret0, err
}

// Commitments1stCoefficient is a free data retrieval call binding the contract method 0x2cf4050b.
//
// Solidity: function commitments_1st_coefficient(address , uint256 ) view returns(uint256)
func (_ETHDKGStorage *ETHDKGStorageSession) Commitments1stCoefficient(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _ETHDKGStorage.Contract.Commitments1stCoefficient(&_ETHDKGStorage.CallOpts, arg0, arg1)
}

// Commitments1stCoefficient is a free data retrieval call binding the contract method 0x2cf4050b.
//
// Solidity: function commitments_1st_coefficient(address , uint256 ) view returns(uint256)
func (_ETHDKGStorage *ETHDKGStorageCallerSession) Commitments1stCoefficient(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _ETHDKGStorage.Contract.Commitments1stCoefficient(&_ETHDKGStorage.CallOpts, arg0, arg1)
}

// CompletionCheck is a free data retrieval call binding the contract method 0x75f7ed6a.
//
// Solidity: function completion_check() view returns(bool)
func (_ETHDKGStorage *ETHDKGStorageCaller) CompletionCheck(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ETHDKGStorage.contract.Call(opts, out, "completion_check")
	return *ret0, err
}

// CompletionCheck is a free data retrieval call binding the contract method 0x75f7ed6a.
//
// Solidity: function completion_check() view returns(bool)
func (_ETHDKGStorage *ETHDKGStorageSession) CompletionCheck() (bool, error) {
	return _ETHDKGStorage.Contract.CompletionCheck(&_ETHDKGStorage.CallOpts)
}

// CompletionCheck is a free data retrieval call binding the contract method 0x75f7ed6a.
//
// Solidity: function completion_check() view returns(bool)
func (_ETHDKGStorage *ETHDKGStorageCallerSession) CompletionCheck() (bool, error) {
	return _ETHDKGStorage.Contract.CompletionCheck(&_ETHDKGStorage.CallOpts)
}

// GpkjSubmissions is a free data retrieval call binding the contract method 0xfef001a9.
//
// Solidity: function gpkj_submissions(address , uint256 ) view returns(uint256)
func (_ETHDKGStorage *ETHDKGStorageCaller) GpkjSubmissions(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGStorage.contract.Call(opts, out, "gpkj_submissions", arg0, arg1)
	return *ret0, err
}

// GpkjSubmissions is a free data retrieval call binding the contract method 0xfef001a9.
//
// Solidity: function gpkj_submissions(address , uint256 ) view returns(uint256)
func (_ETHDKGStorage *ETHDKGStorageSession) GpkjSubmissions(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _ETHDKGStorage.Contract.GpkjSubmissions(&_ETHDKGStorage.CallOpts, arg0, arg1)
}

// GpkjSubmissions is a free data retrieval call binding the contract method 0xfef001a9.
//
// Solidity: function gpkj_submissions(address , uint256 ) view returns(uint256)
func (_ETHDKGStorage *ETHDKGStorageCallerSession) GpkjSubmissions(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _ETHDKGStorage.Contract.GpkjSubmissions(&_ETHDKGStorage.CallOpts, arg0, arg1)
}

// InitialMessage is a free data retrieval call binding the contract method 0xaa7bd338.
//
// Solidity: function initial_message() view returns(bytes)
func (_ETHDKGStorage *ETHDKGStorageCaller) InitialMessage(opts *bind.CallOpts) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _ETHDKGStorage.contract.Call(opts, out, "initial_message")
	return *ret0, err
}

// InitialMessage is a free data retrieval call binding the contract method 0xaa7bd338.
//
// Solidity: function initial_message() view returns(bytes)
func (_ETHDKGStorage *ETHDKGStorageSession) InitialMessage() ([]byte, error) {
	return _ETHDKGStorage.Contract.InitialMessage(&_ETHDKGStorage.CallOpts)
}

// InitialMessage is a free data retrieval call binding the contract method 0xaa7bd338.
//
// Solidity: function initial_message() view returns(bytes)
func (_ETHDKGStorage *ETHDKGStorageCallerSession) InitialMessage() ([]byte, error) {
	return _ETHDKGStorage.Contract.InitialMessage(&_ETHDKGStorage.CallOpts)
}

// InitialSignatures is a free data retrieval call binding the contract method 0x7328f826.
//
// Solidity: function initial_signatures(address , uint256 ) view returns(uint256)
func (_ETHDKGStorage *ETHDKGStorageCaller) InitialSignatures(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGStorage.contract.Call(opts, out, "initial_signatures", arg0, arg1)
	return *ret0, err
}

// InitialSignatures is a free data retrieval call binding the contract method 0x7328f826.
//
// Solidity: function initial_signatures(address , uint256 ) view returns(uint256)
func (_ETHDKGStorage *ETHDKGStorageSession) InitialSignatures(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _ETHDKGStorage.Contract.InitialSignatures(&_ETHDKGStorage.CallOpts, arg0, arg1)
}

// InitialSignatures is a free data retrieval call binding the contract method 0x7328f826.
//
// Solidity: function initial_signatures(address , uint256 ) view returns(uint256)
func (_ETHDKGStorage *ETHDKGStorageCallerSession) InitialSignatures(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _ETHDKGStorage.Contract.InitialSignatures(&_ETHDKGStorage.CallOpts, arg0, arg1)
}

// IsMalicious is a free data retrieval call binding the contract method 0xeadfcadc.
//
// Solidity: function is_malicious(address ) view returns(bool)
func (_ETHDKGStorage *ETHDKGStorageCaller) IsMalicious(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ETHDKGStorage.contract.Call(opts, out, "is_malicious", arg0)
	return *ret0, err
}

// IsMalicious is a free data retrieval call binding the contract method 0xeadfcadc.
//
// Solidity: function is_malicious(address ) view returns(bool)
func (_ETHDKGStorage *ETHDKGStorageSession) IsMalicious(arg0 common.Address) (bool, error) {
	return _ETHDKGStorage.Contract.IsMalicious(&_ETHDKGStorage.CallOpts, arg0)
}

// IsMalicious is a free data retrieval call binding the contract method 0xeadfcadc.
//
// Solidity: function is_malicious(address ) view returns(bool)
func (_ETHDKGStorage *ETHDKGStorageCallerSession) IsMalicious(arg0 common.Address) (bool, error) {
	return _ETHDKGStorage.Contract.IsMalicious(&_ETHDKGStorage.CallOpts, arg0)
}

// KeyShareSubmissionCheck is a free data retrieval call binding the contract method 0x836889dc.
//
// Solidity: function key_share_submission_check() view returns(bool)
func (_ETHDKGStorage *ETHDKGStorageCaller) KeyShareSubmissionCheck(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ETHDKGStorage.contract.Call(opts, out, "key_share_submission_check")
	return *ret0, err
}

// KeyShareSubmissionCheck is a free data retrieval call binding the contract method 0x836889dc.
//
// Solidity: function key_share_submission_check() view returns(bool)
func (_ETHDKGStorage *ETHDKGStorageSession) KeyShareSubmissionCheck() (bool, error) {
	return _ETHDKGStorage.Contract.KeyShareSubmissionCheck(&_ETHDKGStorage.CallOpts)
}

// KeyShareSubmissionCheck is a free data retrieval call binding the contract method 0x836889dc.
//
// Solidity: function key_share_submission_check() view returns(bool)
func (_ETHDKGStorage *ETHDKGStorageCallerSession) KeyShareSubmissionCheck() (bool, error) {
	return _ETHDKGStorage.Contract.KeyShareSubmissionCheck(&_ETHDKGStorage.CallOpts)
}

// KeyShares is a free data retrieval call binding the contract method 0xa88c9e1c.
//
// Solidity: function key_shares(address , uint256 ) view returns(uint256)
func (_ETHDKGStorage *ETHDKGStorageCaller) KeyShares(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGStorage.contract.Call(opts, out, "key_shares", arg0, arg1)
	return *ret0, err
}

// KeyShares is a free data retrieval call binding the contract method 0xa88c9e1c.
//
// Solidity: function key_shares(address , uint256 ) view returns(uint256)
func (_ETHDKGStorage *ETHDKGStorageSession) KeyShares(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _ETHDKGStorage.Contract.KeyShares(&_ETHDKGStorage.CallOpts, arg0, arg1)
}

// KeyShares is a free data retrieval call binding the contract method 0xa88c9e1c.
//
// Solidity: function key_shares(address , uint256 ) view returns(uint256)
func (_ETHDKGStorage *ETHDKGStorageCallerSession) KeyShares(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _ETHDKGStorage.Contract.KeyShares(&_ETHDKGStorage.CallOpts, arg0, arg1)
}

// MasterPublicKey is a free data retrieval call binding the contract method 0xe6511378.
//
// Solidity: function master_public_key(uint256 ) view returns(uint256)
func (_ETHDKGStorage *ETHDKGStorageCaller) MasterPublicKey(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGStorage.contract.Call(opts, out, "master_public_key", arg0)
	return *ret0, err
}

// MasterPublicKey is a free data retrieval call binding the contract method 0xe6511378.
//
// Solidity: function master_public_key(uint256 ) view returns(uint256)
func (_ETHDKGStorage *ETHDKGStorageSession) MasterPublicKey(arg0 *big.Int) (*big.Int, error) {
	return _ETHDKGStorage.Contract.MasterPublicKey(&_ETHDKGStorage.CallOpts, arg0)
}

// MasterPublicKey is a free data retrieval call binding the contract method 0xe6511378.
//
// Solidity: function master_public_key(uint256 ) view returns(uint256)
func (_ETHDKGStorage *ETHDKGStorageCallerSession) MasterPublicKey(arg0 *big.Int) (*big.Int, error) {
	return _ETHDKGStorage.Contract.MasterPublicKey(&_ETHDKGStorage.CallOpts, arg0)
}

// MpkSubmissionCheck is a free data retrieval call binding the contract method 0x050a54f0.
//
// Solidity: function mpk_submission_check() view returns(bool)
func (_ETHDKGStorage *ETHDKGStorageCaller) MpkSubmissionCheck(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ETHDKGStorage.contract.Call(opts, out, "mpk_submission_check")
	return *ret0, err
}

// MpkSubmissionCheck is a free data retrieval call binding the contract method 0x050a54f0.
//
// Solidity: function mpk_submission_check() view returns(bool)
func (_ETHDKGStorage *ETHDKGStorageSession) MpkSubmissionCheck() (bool, error) {
	return _ETHDKGStorage.Contract.MpkSubmissionCheck(&_ETHDKGStorage.CallOpts)
}

// MpkSubmissionCheck is a free data retrieval call binding the contract method 0x050a54f0.
//
// Solidity: function mpk_submission_check() view returns(bool)
func (_ETHDKGStorage *ETHDKGStorageCallerSession) MpkSubmissionCheck() (bool, error) {
	return _ETHDKGStorage.Contract.MpkSubmissionCheck(&_ETHDKGStorage.CallOpts)
}

// PublicKeys is a free data retrieval call binding the contract method 0x92896b2d.
//
// Solidity: function public_keys(address , uint256 ) view returns(uint256)
func (_ETHDKGStorage *ETHDKGStorageCaller) PublicKeys(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGStorage.contract.Call(opts, out, "public_keys", arg0, arg1)
	return *ret0, err
}

// PublicKeys is a free data retrieval call binding the contract method 0x92896b2d.
//
// Solidity: function public_keys(address , uint256 ) view returns(uint256)
func (_ETHDKGStorage *ETHDKGStorageSession) PublicKeys(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _ETHDKGStorage.Contract.PublicKeys(&_ETHDKGStorage.CallOpts, arg0, arg1)
}

// PublicKeys is a free data retrieval call binding the contract method 0x92896b2d.
//
// Solidity: function public_keys(address , uint256 ) view returns(uint256)
func (_ETHDKGStorage *ETHDKGStorageCallerSession) PublicKeys(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _ETHDKGStorage.Contract.PublicKeys(&_ETHDKGStorage.CallOpts, arg0, arg1)
}

// RegistrationCheck is a free data retrieval call binding the contract method 0xb7b09ed6.
//
// Solidity: function registration_check() view returns(bool)
func (_ETHDKGStorage *ETHDKGStorageCaller) RegistrationCheck(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ETHDKGStorage.contract.Call(opts, out, "registration_check")
	return *ret0, err
}

// RegistrationCheck is a free data retrieval call binding the contract method 0xb7b09ed6.
//
// Solidity: function registration_check() view returns(bool)
func (_ETHDKGStorage *ETHDKGStorageSession) RegistrationCheck() (bool, error) {
	return _ETHDKGStorage.Contract.RegistrationCheck(&_ETHDKGStorage.CallOpts)
}

// RegistrationCheck is a free data retrieval call binding the contract method 0xb7b09ed6.
//
// Solidity: function registration_check() view returns(bool)
func (_ETHDKGStorage *ETHDKGStorageCallerSession) RegistrationCheck() (bool, error) {
	return _ETHDKGStorage.Contract.RegistrationCheck(&_ETHDKGStorage.CallOpts)
}

// ShareDistributionCheck is a free data retrieval call binding the contract method 0x2f11b985.
//
// Solidity: function share_distribution_check() view returns(bool)
func (_ETHDKGStorage *ETHDKGStorageCaller) ShareDistributionCheck(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ETHDKGStorage.contract.Call(opts, out, "share_distribution_check")
	return *ret0, err
}

// ShareDistributionCheck is a free data retrieval call binding the contract method 0x2f11b985.
//
// Solidity: function share_distribution_check() view returns(bool)
func (_ETHDKGStorage *ETHDKGStorageSession) ShareDistributionCheck() (bool, error) {
	return _ETHDKGStorage.Contract.ShareDistributionCheck(&_ETHDKGStorage.CallOpts)
}

// ShareDistributionCheck is a free data retrieval call binding the contract method 0x2f11b985.
//
// Solidity: function share_distribution_check() view returns(bool)
func (_ETHDKGStorage *ETHDKGStorageCallerSession) ShareDistributionCheck() (bool, error) {
	return _ETHDKGStorage.Contract.ShareDistributionCheck(&_ETHDKGStorage.CallOpts)
}

// ShareDistributionHashes is a free data retrieval call binding the contract method 0xc21bee83.
//
// Solidity: function share_distribution_hashes(address ) view returns(bytes32)
func (_ETHDKGStorage *ETHDKGStorageCaller) ShareDistributionHashes(opts *bind.CallOpts, arg0 common.Address) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _ETHDKGStorage.contract.Call(opts, out, "share_distribution_hashes", arg0)
	return *ret0, err
}

// ShareDistributionHashes is a free data retrieval call binding the contract method 0xc21bee83.
//
// Solidity: function share_distribution_hashes(address ) view returns(bytes32)
func (_ETHDKGStorage *ETHDKGStorageSession) ShareDistributionHashes(arg0 common.Address) ([32]byte, error) {
	return _ETHDKGStorage.Contract.ShareDistributionHashes(&_ETHDKGStorage.CallOpts, arg0)
}

// ShareDistributionHashes is a free data retrieval call binding the contract method 0xc21bee83.
//
// Solidity: function share_distribution_hashes(address ) view returns(bytes32)
func (_ETHDKGStorage *ETHDKGStorageCallerSession) ShareDistributionHashes(arg0 common.Address) ([32]byte, error) {
	return _ETHDKGStorage.Contract.ShareDistributionHashes(&_ETHDKGStorage.CallOpts, arg0)
}

// ETHDKGStorageKeyShareSubmissionIterator is returned from FilterKeyShareSubmission and is used to iterate over the raw logs and unpacked data for KeyShareSubmission events raised by the ETHDKGStorage contract.
type ETHDKGStorageKeyShareSubmissionIterator struct {
	Event *ETHDKGStorageKeyShareSubmission // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGStorageKeyShareSubmissionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGStorageKeyShareSubmission)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGStorageKeyShareSubmission)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGStorageKeyShareSubmissionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGStorageKeyShareSubmissionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGStorageKeyShareSubmission represents a KeyShareSubmission event raised by the ETHDKGStorage contract.
type ETHDKGStorageKeyShareSubmission struct {
	Issuer                     common.Address
	KeyShareG1                 [2]*big.Int
	KeyShareG1CorrectnessProof [2]*big.Int
	KeyShareG2                 [4]*big.Int
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterKeyShareSubmission is a free log retrieval operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_ETHDKGStorage *ETHDKGStorageFilterer) FilterKeyShareSubmission(opts *bind.FilterOpts) (*ETHDKGStorageKeyShareSubmissionIterator, error) {

	logs, sub, err := _ETHDKGStorage.contract.FilterLogs(opts, "KeyShareSubmission")
	if err != nil {
		return nil, err
	}
	return &ETHDKGStorageKeyShareSubmissionIterator{contract: _ETHDKGStorage.contract, event: "KeyShareSubmission", logs: logs, sub: sub}, nil
}

// WatchKeyShareSubmission is a free log subscription operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_ETHDKGStorage *ETHDKGStorageFilterer) WatchKeyShareSubmission(opts *bind.WatchOpts, sink chan<- *ETHDKGStorageKeyShareSubmission) (event.Subscription, error) {

	logs, sub, err := _ETHDKGStorage.contract.WatchLogs(opts, "KeyShareSubmission")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGStorageKeyShareSubmission)
				if err := _ETHDKGStorage.contract.UnpackLog(event, "KeyShareSubmission", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyShareSubmission is a log parse operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_ETHDKGStorage *ETHDKGStorageFilterer) ParseKeyShareSubmission(log types.Log) (*ETHDKGStorageKeyShareSubmission, error) {
	event := new(ETHDKGStorageKeyShareSubmission)
	if err := _ETHDKGStorage.contract.UnpackLog(event, "KeyShareSubmission", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ETHDKGStorageRegistrationOpenIterator is returned from FilterRegistrationOpen and is used to iterate over the raw logs and unpacked data for RegistrationOpen events raised by the ETHDKGStorage contract.
type ETHDKGStorageRegistrationOpenIterator struct {
	Event *ETHDKGStorageRegistrationOpen // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGStorageRegistrationOpenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGStorageRegistrationOpen)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGStorageRegistrationOpen)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGStorageRegistrationOpenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGStorageRegistrationOpenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGStorageRegistrationOpen represents a RegistrationOpen event raised by the ETHDKGStorage contract.
type ETHDKGStorageRegistrationOpen struct {
	DkgStarts              *big.Int
	RegistrationEnds       *big.Int
	ShareDistributionEnds  *big.Int
	DisputeEnds            *big.Int
	KeyShareSubmissionEnds *big.Int
	MpkSubmissionEnds      *big.Int
	GpkjSubmissionEnds     *big.Int
	GpkjDisputeEnds        *big.Int
	DkgComplete            *big.Int
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterRegistrationOpen is a free log retrieval operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_ETHDKGStorage *ETHDKGStorageFilterer) FilterRegistrationOpen(opts *bind.FilterOpts) (*ETHDKGStorageRegistrationOpenIterator, error) {

	logs, sub, err := _ETHDKGStorage.contract.FilterLogs(opts, "RegistrationOpen")
	if err != nil {
		return nil, err
	}
	return &ETHDKGStorageRegistrationOpenIterator{contract: _ETHDKGStorage.contract, event: "RegistrationOpen", logs: logs, sub: sub}, nil
}

// WatchRegistrationOpen is a free log subscription operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_ETHDKGStorage *ETHDKGStorageFilterer) WatchRegistrationOpen(opts *bind.WatchOpts, sink chan<- *ETHDKGStorageRegistrationOpen) (event.Subscription, error) {

	logs, sub, err := _ETHDKGStorage.contract.WatchLogs(opts, "RegistrationOpen")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGStorageRegistrationOpen)
				if err := _ETHDKGStorage.contract.UnpackLog(event, "RegistrationOpen", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistrationOpen is a log parse operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_ETHDKGStorage *ETHDKGStorageFilterer) ParseRegistrationOpen(log types.Log) (*ETHDKGStorageRegistrationOpen, error) {
	event := new(ETHDKGStorageRegistrationOpen)
	if err := _ETHDKGStorage.contract.UnpackLog(event, "RegistrationOpen", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ETHDKGStorageShareDistributionIterator is returned from FilterShareDistribution and is used to iterate over the raw logs and unpacked data for ShareDistribution events raised by the ETHDKGStorage contract.
type ETHDKGStorageShareDistributionIterator struct {
	Event *ETHDKGStorageShareDistribution // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGStorageShareDistributionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGStorageShareDistribution)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGStorageShareDistribution)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGStorageShareDistributionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGStorageShareDistributionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGStorageShareDistribution represents a ShareDistribution event raised by the ETHDKGStorage contract.
type ETHDKGStorageShareDistribution struct {
	Issuer          common.Address
	Index           *big.Int
	EncryptedShares []*big.Int
	Commitments     [][2]*big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterShareDistribution is a free log retrieval operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_ETHDKGStorage *ETHDKGStorageFilterer) FilterShareDistribution(opts *bind.FilterOpts) (*ETHDKGStorageShareDistributionIterator, error) {

	logs, sub, err := _ETHDKGStorage.contract.FilterLogs(opts, "ShareDistribution")
	if err != nil {
		return nil, err
	}
	return &ETHDKGStorageShareDistributionIterator{contract: _ETHDKGStorage.contract, event: "ShareDistribution", logs: logs, sub: sub}, nil
}

// WatchShareDistribution is a free log subscription operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_ETHDKGStorage *ETHDKGStorageFilterer) WatchShareDistribution(opts *bind.WatchOpts, sink chan<- *ETHDKGStorageShareDistribution) (event.Subscription, error) {

	logs, sub, err := _ETHDKGStorage.contract.WatchLogs(opts, "ShareDistribution")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGStorageShareDistribution)
				if err := _ETHDKGStorage.contract.UnpackLog(event, "ShareDistribution", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseShareDistribution is a log parse operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_ETHDKGStorage *ETHDKGStorageFilterer) ParseShareDistribution(log types.Log) (*ETHDKGStorageShareDistribution, error) {
	event := new(ETHDKGStorageShareDistribution)
	if err := _ETHDKGStorage.contract.UnpackLog(event, "ShareDistribution", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ETHDKGStorageValidatorMemberIterator is returned from FilterValidatorMember and is used to iterate over the raw logs and unpacked data for ValidatorMember events raised by the ETHDKGStorage contract.
type ETHDKGStorageValidatorMemberIterator struct {
	Event *ETHDKGStorageValidatorMember // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGStorageValidatorMemberIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGStorageValidatorMember)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGStorageValidatorMember)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGStorageValidatorMemberIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGStorageValidatorMemberIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGStorageValidatorMember represents a ValidatorMember event raised by the ETHDKGStorage contract.
type ETHDKGStorageValidatorMember struct {
	Account common.Address
	Epoch   *big.Int
	Index   *big.Int
	Share0  *big.Int
	Share1  *big.Int
	Share2  *big.Int
	Share3  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterValidatorMember is a free log retrieval operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ETHDKGStorage *ETHDKGStorageFilterer) FilterValidatorMember(opts *bind.FilterOpts) (*ETHDKGStorageValidatorMemberIterator, error) {

	logs, sub, err := _ETHDKGStorage.contract.FilterLogs(opts, "ValidatorMember")
	if err != nil {
		return nil, err
	}
	return &ETHDKGStorageValidatorMemberIterator{contract: _ETHDKGStorage.contract, event: "ValidatorMember", logs: logs, sub: sub}, nil
}

// WatchValidatorMember is a free log subscription operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ETHDKGStorage *ETHDKGStorageFilterer) WatchValidatorMember(opts *bind.WatchOpts, sink chan<- *ETHDKGStorageValidatorMember) (event.Subscription, error) {

	logs, sub, err := _ETHDKGStorage.contract.WatchLogs(opts, "ValidatorMember")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGStorageValidatorMember)
				if err := _ETHDKGStorage.contract.UnpackLog(event, "ValidatorMember", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorMember is a log parse operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ETHDKGStorage *ETHDKGStorageFilterer) ParseValidatorMember(log types.Log) (*ETHDKGStorageValidatorMember, error) {
	event := new(ETHDKGStorageValidatorMember)
	if err := _ETHDKGStorage.contract.UnpackLog(event, "ValidatorMember", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ETHDKGStorageValidatorSetIterator is returned from FilterValidatorSet and is used to iterate over the raw logs and unpacked data for ValidatorSet events raised by the ETHDKGStorage contract.
type ETHDKGStorageValidatorSetIterator struct {
	Event *ETHDKGStorageValidatorSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGStorageValidatorSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGStorageValidatorSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGStorageValidatorSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGStorageValidatorSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGStorageValidatorSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGStorageValidatorSet represents a ValidatorSet event raised by the ETHDKGStorage contract.
type ETHDKGStorageValidatorSet struct {
	ValidatorCount uint8
	Epoch          *big.Int
	EthHeight      uint32
	MadHeight      uint32
	GroupKey0      *big.Int
	GroupKey1      *big.Int
	GroupKey2      *big.Int
	GroupKey3      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterValidatorSet is a free log retrieval operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ETHDKGStorage *ETHDKGStorageFilterer) FilterValidatorSet(opts *bind.FilterOpts) (*ETHDKGStorageValidatorSetIterator, error) {

	logs, sub, err := _ETHDKGStorage.contract.FilterLogs(opts, "ValidatorSet")
	if err != nil {
		return nil, err
	}
	return &ETHDKGStorageValidatorSetIterator{contract: _ETHDKGStorage.contract, event: "ValidatorSet", logs: logs, sub: sub}, nil
}

// WatchValidatorSet is a free log subscription operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ETHDKGStorage *ETHDKGStorageFilterer) WatchValidatorSet(opts *bind.WatchOpts, sink chan<- *ETHDKGStorageValidatorSet) (event.Subscription, error) {

	logs, sub, err := _ETHDKGStorage.contract.WatchLogs(opts, "ValidatorSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGStorageValidatorSet)
				if err := _ETHDKGStorage.contract.UnpackLog(event, "ValidatorSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorSet is a log parse operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ETHDKGStorage *ETHDKGStorageFilterer) ParseValidatorSet(log types.Log) (*ETHDKGStorageValidatorSet, error) {
	event := new(ETHDKGStorageValidatorSet)
	if err := _ETHDKGStorage.contract.UnpackLog(event, "ValidatorSet", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ETHDKGSubmitMPKABI is the input ABI used to generate the binding from.
const ETHDKGSubmitMPKABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"key_share_G1\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"key_share_G1_correctness_proof\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"key_share_G2\",\"type\":\"uint256[4]\"}],\"name\":\"KeyShareSubmission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dkgStarts\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"registrationEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shareDistributionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disputeEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"keyShareSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mpkSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gpkjSubmissionEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gpkjDisputeEnds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dkgComplete\",\"type\":\"uint256\"}],\"name\":\"RegistrationOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"encrypted_shares\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[2][]\",\"name\":\"commitments\",\"type\":\"uint256[2][]\"}],\"name\":\"ShareDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share3\",\"type\":\"uint256\"}],\"name\":\"ValidatorMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"validatorCount\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"ethHeight\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"madHeight\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupKey3\",\"type\":\"uint256\"}],\"name\":\"ValidatorSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELTA_CONFIRM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_DISPUTE_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_DKG_COMPLETE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_GPKJ_DISPUTE_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_GPKJ_SUBMISSION_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_KEY_SHARE_SUBMISSION_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_MPK_SUBMISSION_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_REGISTRATION_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_SHARE_DISTRIBUTION_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"commitments_1st_coefficient\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"completion_check\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gpkj_submissions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initial_message\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"initial_signatures\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"is_malicious\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"key_share_submission_check\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"key_shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"master_public_key\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mpk_submission_check\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"public_keys\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registration_check\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"share_distribution_check\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"share_distribution_hashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"_master_public_key\",\"type\":\"uint256[4]\"}],\"name\":\"submit_master_public_key\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// ETHDKGSubmitMPKBin is the compiled bytecode used for deploying new contracts.
var ETHDKGSubmitMPKBin = "0x608060405260405160200180807f43727970746f67726170687920697320677265617400000000000000000000008152506015019050604051602081830303815290604052600d90805190602001906200005b92919062000075565b5060286017553480156200006e57600080fd5b506200012b565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282620000ad5760008555620000f9565b82601f10620000c857805160ff1916838001178555620000f9565b82800160010185558215620000f9579182015b82811115620000f8578251825591602001919060010190620000db565b5b5090506200010891906200010c565b5090565b5b80821115620001275760008160009055506001016200010d565b5090565b611531806200013b6000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c8063a88c9e1c116100de578063dc614e2811610097578063eadfcadc11610071578063eadfcadc146105cb578063edf26d9b14610625578063f47ae6a91461067d578063fef001a9146106f857610173565b8063dc614e281461054d578063e2291ec31461056b578063e65113781461058957610173565b8063a88c9e1c146103b4578063aa7bd33814610416578063ab63c72214610499578063b7b09ed6146104b7578063c21bee83146104d7578063d3cf61861461052f57610173565b80637543b80f116101305780637543b80f146102b857806375f7ed6a146102d657806377fbebd1146102f6578063836889dc1461031457806392896b2d146103345780639c2aa8381461039657610173565b8063050a54f01461017857806307f02c54146101985780630de1553f146101b65780632cf4050b146101d45780632f11b985146102365780637328f82614610256575b600080fd5b61018061075a565b60405180821515815260200191505060405180910390f35b6101a061076d565b6040518082815260200191505060405180910390f35b6101be610773565b6040518082815260200191505060405180910390f35b610220600480360360408110156101ea57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610779565b6040518082815260200191505060405180910390f35b61023e6107a1565b60405180821515815260200191505060405180910390f35b6102a26004803603604081101561026c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506107b4565b6040518082815260200191505060405180910390f35b6102c06107dc565b6040518082815260200191505060405180910390f35b6102de6107e1565b60405180821515815260200191505060405180910390f35b6102fe6107f4565b6040518082815260200191505060405180910390f35b61031c6107fa565b60405180821515815260200191505060405180910390f35b6103806004803603604081101561034a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061080d565b6040518082815260200191505060405180910390f35b61039e610835565b6040518082815260200191505060405180910390f35b610400600480360360408110156103ca57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061083b565b6040518082815260200191505060405180910390f35b61041e610863565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561045e578082015181840152602081019050610443565b50505050905090810190601f16801561048b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6104a1610901565b6040518082815260200191505060405180910390f35b6104bf610907565b60405180821515815260200191505060405180910390f35b610519600480360360208110156104ed57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061091a565b6040518082815260200191505060405180910390f35b610537610932565b6040518082815260200191505060405180910390f35b610555610938565b6040518082815260200191505060405180910390f35b61057361093e565b6040518082815260200191505060405180910390f35b6105b56004803603602081101561059f57600080fd5b8101908080359060200190929190505050610944565b6040518082815260200191505060405180910390f35b61060d600480360360208110156105e157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061095f565b60405180821515815260200191505060405180910390f35b6106516004803603602081101561063b57600080fd5b810190808035906020019092919050505061097f565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6106e06004803603608081101561069357600080fd5b8101908080608001906004806020026040519081016040528092919082600460200280828437600081840152601f19601f82011690508083019250505050505091929192905050506109be565b60405180821515815260200191505060405180910390f35b6107446004803603604081101561070e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506112ff565b6040518082815260200191505060405180910390f35b600e60039054906101000a900460ff1681565b60135481565b600f5481565b6003602052816000526040600020816002811061079557600080fd5b01600091509150505481565b600e60019054906101000a900460ff1681565b600660205281600052604060002081600281106107d057600080fd5b01600091509150505481565b600681565b600e60049054906101000a900460ff1681565b60165481565b600e60029054906101000a900460ff1681565b6001602052816000526040600020816002811061082957600080fd5b01600091509150505481565b60145481565b6004602052816000526040600020816002811061085757600080fd5b01600091509150505481565b600d8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108f95780601f106108ce576101008083540402835291602001916108f9565b820191906000526020600020905b8154815290600101906020018083116108dc57829003601f168201915b505050505081565b60155481565b600e60009054906101000a900460ff1681565b60026020528060005260406000206000915090505481565b60115481565b60105481565b60125481565b6009816004811061095457600080fd5b016000915090505481565b60086020528060005260406000206000915054906101000a900460ff1681565b6000818154811061098f57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000436012541080156109d357506013544311155b610a28576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260468152602001806114536046913960600191505060405180910390fd5b600e60029054906101000a900460ff16610bc55760006001905060005b600080549050811015610b98576000808281548110610a6057fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060028110610ada57fe5b01541415610b8a5760009250601b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d2a2c55c826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015610b7157600080fd5b505af1158015610b85573d6000803e3d6000fd5b505050505b508080600101915050610a45565b5080610ba85760019150506112fa565b6001600e60026101000a81548160ff021916908315150217905550505b60006009600060048110610bd557fe5b0154141580610bf4575060006009600160048110610bef57fe5b015414155b80610c0f575060006009600260048110610c0a57fe5b015414155b80610c2a575060006009600360048110610c2557fe5b015414155b15610c3857600090506112fa565b6000808054905090506000805b60008281548110610c5257fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506001820191508282108015610cd557506000801b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b610c45576000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600280602002604051908101604052809291908260028015610d51576020028201915b815481526020019060010190808311610d3d575b50505050509050600081600060028110610d6757fe5b60200201511415610dc3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001806114cc6030913960400191505060405180910390fd5b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600280602002604051908101604052809291908260028015610e3b576020028201915b815481526020019060010190808311610e27575b505050505090505b848410156111095760008481548110610e5857fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1692506000801b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415610ed4576110fe565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600280602002604051908101604052809291908260028015610f4a576020028201915b815481526020019060010190808311610f36575b50505050509150600082600060028110610f6057fe5b60200201511415610fbc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001806114cc6030913960400191505060405180910390fd5b601960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e664725b60405180608001604052808460006002811061101257fe5b602002015181526020018460016002811061102957fe5b602002015181526020018560006002811061104057fe5b602002015181526020018560016002811061105757fe5b60200201518152506040518263ffffffff1660e01b81526004018082600460200280838360005b8381101561109957808201518184015260208101905061107e565b50505050905001915050604080518083038186803b1580156110ba57600080fd5b505afa1580156110ce573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525060408110156110f357600080fd5b810190809190505090505b600184019350610e43565b6112896040518061018001604052808360006002811061112557fe5b602002015181526020018360016002811061113c57fe5b602002015181526020017f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed81526020017f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec81526020017f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d81526020017f062a0ad5cf656709286b38ae4fb927fc901c5f9cf9623bfd0b6d22d30f95a1f381526020017f1b4af7018d896f006d7e5c23d05903b5d2698da94674e546e51f77b6df70ffac81526020018960006004811061123757fe5b602002015181526020018960016004811061124e57fe5b602002015181526020018960026004811061126557fe5b602002015181526020018960036004811061127c57fe5b6020020151815250611327565b6112de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260338152602001806114996033913960400191505060405180910390fd5b8660099060046112ef9291906113d3565b506000955050505050505b919050565b6005602052816000526040600020816004811061131b57600080fd5b01600091509150505481565b6000611331611413565b6000602082610180866008600019fa9050806113b5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f656c6c69707469632063757276652070616972696e67206661696c656400000081525060200191505060405180910390fd5b6001826000600181106113c457fe5b60200201511492505050919050565b8260048101928215611402579160200282015b828111156114015782518255916020019190600101906113e6565b5b50905061140f9190611435565b5090565b6040518060200160405280600190602082028036833780820191505090505090565b5b8082111561144e576000816000905550600101611436565b509056fe6d6173746572206b6579207375626d697373696f6e206661696c65642028636f6e7472616374206973206e6f7420696e206d706b2064657269766174696f6e207068617365296d6173746572206b6579207375626d697373696f6e206661696c6564202870616972696e6720636865636b206661696c6564296d6173746572206b6579207375626d697373696f6e206661696c656420286b6579207368617265206d697373696e6729a2646970667358221220d00457c7680cecf20e070f3317cd44853fdba11f59407a6609bf9a96977852ed64736f6c63430007060033"

// DeployETHDKGSubmitMPK deploys a new Ethereum contract, binding an instance of ETHDKGSubmitMPK to it.
func DeployETHDKGSubmitMPK(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ETHDKGSubmitMPK, error) {
	parsed, err := abi.JSON(strings.NewReader(ETHDKGSubmitMPKABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ETHDKGSubmitMPKBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ETHDKGSubmitMPK{ETHDKGSubmitMPKCaller: ETHDKGSubmitMPKCaller{contract: contract}, ETHDKGSubmitMPKTransactor: ETHDKGSubmitMPKTransactor{contract: contract}, ETHDKGSubmitMPKFilterer: ETHDKGSubmitMPKFilterer{contract: contract}}, nil
}

// ETHDKGSubmitMPK is an auto generated Go binding around an Ethereum contract.
type ETHDKGSubmitMPK struct {
	ETHDKGSubmitMPKCaller     // Read-only binding to the contract
	ETHDKGSubmitMPKTransactor // Write-only binding to the contract
	ETHDKGSubmitMPKFilterer   // Log filterer for contract events
}

// ETHDKGSubmitMPKCaller is an auto generated read-only Go binding around an Ethereum contract.
type ETHDKGSubmitMPKCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGSubmitMPKTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ETHDKGSubmitMPKTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGSubmitMPKFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ETHDKGSubmitMPKFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ETHDKGSubmitMPKSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ETHDKGSubmitMPKSession struct {
	Contract     *ETHDKGSubmitMPK  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ETHDKGSubmitMPKCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ETHDKGSubmitMPKCallerSession struct {
	Contract *ETHDKGSubmitMPKCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// ETHDKGSubmitMPKTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ETHDKGSubmitMPKTransactorSession struct {
	Contract     *ETHDKGSubmitMPKTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// ETHDKGSubmitMPKRaw is an auto generated low-level Go binding around an Ethereum contract.
type ETHDKGSubmitMPKRaw struct {
	Contract *ETHDKGSubmitMPK // Generic contract binding to access the raw methods on
}

// ETHDKGSubmitMPKCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ETHDKGSubmitMPKCallerRaw struct {
	Contract *ETHDKGSubmitMPKCaller // Generic read-only contract binding to access the raw methods on
}

// ETHDKGSubmitMPKTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ETHDKGSubmitMPKTransactorRaw struct {
	Contract *ETHDKGSubmitMPKTransactor // Generic write-only contract binding to access the raw methods on
}

// NewETHDKGSubmitMPK creates a new instance of ETHDKGSubmitMPK, bound to a specific deployed contract.
func NewETHDKGSubmitMPK(address common.Address, backend bind.ContractBackend) (*ETHDKGSubmitMPK, error) {
	contract, err := bindETHDKGSubmitMPK(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ETHDKGSubmitMPK{ETHDKGSubmitMPKCaller: ETHDKGSubmitMPKCaller{contract: contract}, ETHDKGSubmitMPKTransactor: ETHDKGSubmitMPKTransactor{contract: contract}, ETHDKGSubmitMPKFilterer: ETHDKGSubmitMPKFilterer{contract: contract}}, nil
}

// NewETHDKGSubmitMPKCaller creates a new read-only instance of ETHDKGSubmitMPK, bound to a specific deployed contract.
func NewETHDKGSubmitMPKCaller(address common.Address, caller bind.ContractCaller) (*ETHDKGSubmitMPKCaller, error) {
	contract, err := bindETHDKGSubmitMPK(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ETHDKGSubmitMPKCaller{contract: contract}, nil
}

// NewETHDKGSubmitMPKTransactor creates a new write-only instance of ETHDKGSubmitMPK, bound to a specific deployed contract.
func NewETHDKGSubmitMPKTransactor(address common.Address, transactor bind.ContractTransactor) (*ETHDKGSubmitMPKTransactor, error) {
	contract, err := bindETHDKGSubmitMPK(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ETHDKGSubmitMPKTransactor{contract: contract}, nil
}

// NewETHDKGSubmitMPKFilterer creates a new log filterer instance of ETHDKGSubmitMPK, bound to a specific deployed contract.
func NewETHDKGSubmitMPKFilterer(address common.Address, filterer bind.ContractFilterer) (*ETHDKGSubmitMPKFilterer, error) {
	contract, err := bindETHDKGSubmitMPK(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ETHDKGSubmitMPKFilterer{contract: contract}, nil
}

// bindETHDKGSubmitMPK binds a generic wrapper to an already deployed contract.
func bindETHDKGSubmitMPK(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ETHDKGSubmitMPKABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ETHDKGSubmitMPK.Contract.ETHDKGSubmitMPKCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKGSubmitMPK.Contract.ETHDKGSubmitMPKTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETHDKGSubmitMPK.Contract.ETHDKGSubmitMPKTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ETHDKGSubmitMPK.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ETHDKGSubmitMPK.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ETHDKGSubmitMPK.Contract.contract.Transact(opts, method, params...)
}

// DELTACONFIRM is a free data retrieval call binding the contract method 0x7543b80f.
//
// Solidity: function DELTA_CONFIRM() view returns(uint256)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKCaller) DELTACONFIRM(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGSubmitMPK.contract.Call(opts, out, "DELTA_CONFIRM")
	return *ret0, err
}

// DELTACONFIRM is a free data retrieval call binding the contract method 0x7543b80f.
//
// Solidity: function DELTA_CONFIRM() view returns(uint256)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKSession) DELTACONFIRM() (*big.Int, error) {
	return _ETHDKGSubmitMPK.Contract.DELTACONFIRM(&_ETHDKGSubmitMPK.CallOpts)
}

// DELTACONFIRM is a free data retrieval call binding the contract method 0x7543b80f.
//
// Solidity: function DELTA_CONFIRM() view returns(uint256)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKCallerSession) DELTACONFIRM() (*big.Int, error) {
	return _ETHDKGSubmitMPK.Contract.DELTACONFIRM(&_ETHDKGSubmitMPK.CallOpts)
}

// TDISPUTEEND is a free data retrieval call binding the contract method 0xd3cf6186.
//
// Solidity: function T_DISPUTE_END() view returns(uint256)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKCaller) TDISPUTEEND(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGSubmitMPK.contract.Call(opts, out, "T_DISPUTE_END")
	return *ret0, err
}

// TDISPUTEEND is a free data retrieval call binding the contract method 0xd3cf6186.
//
// Solidity: function T_DISPUTE_END() view returns(uint256)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKSession) TDISPUTEEND() (*big.Int, error) {
	return _ETHDKGSubmitMPK.Contract.TDISPUTEEND(&_ETHDKGSubmitMPK.CallOpts)
}

// TDISPUTEEND is a free data retrieval call binding the contract method 0xd3cf6186.
//
// Solidity: function T_DISPUTE_END() view returns(uint256)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKCallerSession) TDISPUTEEND() (*big.Int, error) {
	return _ETHDKGSubmitMPK.Contract.TDISPUTEEND(&_ETHDKGSubmitMPK.CallOpts)
}

// TDKGCOMPLETE is a free data retrieval call binding the contract method 0x77fbebd1.
//
// Solidity: function T_DKG_COMPLETE() view returns(uint256)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKCaller) TDKGCOMPLETE(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGSubmitMPK.contract.Call(opts, out, "T_DKG_COMPLETE")
	return *ret0, err
}

// TDKGCOMPLETE is a free data retrieval call binding the contract method 0x77fbebd1.
//
// Solidity: function T_DKG_COMPLETE() view returns(uint256)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKSession) TDKGCOMPLETE() (*big.Int, error) {
	return _ETHDKGSubmitMPK.Contract.TDKGCOMPLETE(&_ETHDKGSubmitMPK.CallOpts)
}

// TDKGCOMPLETE is a free data retrieval call binding the contract method 0x77fbebd1.
//
// Solidity: function T_DKG_COMPLETE() view returns(uint256)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKCallerSession) TDKGCOMPLETE() (*big.Int, error) {
	return _ETHDKGSubmitMPK.Contract.TDKGCOMPLETE(&_ETHDKGSubmitMPK.CallOpts)
}

// TGPKJDISPUTEEND is a free data retrieval call binding the contract method 0xab63c722.
//
// Solidity: function T_GPKJ_DISPUTE_END() view returns(uint256)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKCaller) TGPKJDISPUTEEND(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGSubmitMPK.contract.Call(opts, out, "T_GPKJ_DISPUTE_END")
	return *ret0, err
}

// TGPKJDISPUTEEND is a free data retrieval call binding the contract method 0xab63c722.
//
// Solidity: function T_GPKJ_DISPUTE_END() view returns(uint256)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKSession) TGPKJDISPUTEEND() (*big.Int, error) {
	return _ETHDKGSubmitMPK.Contract.TGPKJDISPUTEEND(&_ETHDKGSubmitMPK.CallOpts)
}

// TGPKJDISPUTEEND is a free data retrieval call binding the contract method 0xab63c722.
//
// Solidity: function T_GPKJ_DISPUTE_END() view returns(uint256)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKCallerSession) TGPKJDISPUTEEND() (*big.Int, error) {
	return _ETHDKGSubmitMPK.Contract.TGPKJDISPUTEEND(&_ETHDKGSubmitMPK.CallOpts)
}

// TGPKJSUBMISSIONEND is a free data retrieval call binding the contract method 0x9c2aa838.
//
// Solidity: function T_GPKJ_SUBMISSION_END() view returns(uint256)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKCaller) TGPKJSUBMISSIONEND(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGSubmitMPK.contract.Call(opts, out, "T_GPKJ_SUBMISSION_END")
	return *ret0, err
}

// TGPKJSUBMISSIONEND is a free data retrieval call binding the contract method 0x9c2aa838.
//
// Solidity: function T_GPKJ_SUBMISSION_END() view returns(uint256)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKSession) TGPKJSUBMISSIONEND() (*big.Int, error) {
	return _ETHDKGSubmitMPK.Contract.TGPKJSUBMISSIONEND(&_ETHDKGSubmitMPK.CallOpts)
}

// TGPKJSUBMISSIONEND is a free data retrieval call binding the contract method 0x9c2aa838.
//
// Solidity: function T_GPKJ_SUBMISSION_END() view returns(uint256)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKCallerSession) TGPKJSUBMISSIONEND() (*big.Int, error) {
	return _ETHDKGSubmitMPK.Contract.TGPKJSUBMISSIONEND(&_ETHDKGSubmitMPK.CallOpts)
}

// TKEYSHARESUBMISSIONEND is a free data retrieval call binding the contract method 0xe2291ec3.
//
// Solidity: function T_KEY_SHARE_SUBMISSION_END() view returns(uint256)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKCaller) TKEYSHARESUBMISSIONEND(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGSubmitMPK.contract.Call(opts, out, "T_KEY_SHARE_SUBMISSION_END")
	return *ret0, err
}

// TKEYSHARESUBMISSIONEND is a free data retrieval call binding the contract method 0xe2291ec3.
//
// Solidity: function T_KEY_SHARE_SUBMISSION_END() view returns(uint256)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKSession) TKEYSHARESUBMISSIONEND() (*big.Int, error) {
	return _ETHDKGSubmitMPK.Contract.TKEYSHARESUBMISSIONEND(&_ETHDKGSubmitMPK.CallOpts)
}

// TKEYSHARESUBMISSIONEND is a free data retrieval call binding the contract method 0xe2291ec3.
//
// Solidity: function T_KEY_SHARE_SUBMISSION_END() view returns(uint256)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKCallerSession) TKEYSHARESUBMISSIONEND() (*big.Int, error) {
	return _ETHDKGSubmitMPK.Contract.TKEYSHARESUBMISSIONEND(&_ETHDKGSubmitMPK.CallOpts)
}

// TMPKSUBMISSIONEND is a free data retrieval call binding the contract method 0x07f02c54.
//
// Solidity: function T_MPK_SUBMISSION_END() view returns(uint256)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKCaller) TMPKSUBMISSIONEND(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGSubmitMPK.contract.Call(opts, out, "T_MPK_SUBMISSION_END")
	return *ret0, err
}

// TMPKSUBMISSIONEND is a free data retrieval call binding the contract method 0x07f02c54.
//
// Solidity: function T_MPK_SUBMISSION_END() view returns(uint256)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKSession) TMPKSUBMISSIONEND() (*big.Int, error) {
	return _ETHDKGSubmitMPK.Contract.TMPKSUBMISSIONEND(&_ETHDKGSubmitMPK.CallOpts)
}

// TMPKSUBMISSIONEND is a free data retrieval call binding the contract method 0x07f02c54.
//
// Solidity: function T_MPK_SUBMISSION_END() view returns(uint256)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKCallerSession) TMPKSUBMISSIONEND() (*big.Int, error) {
	return _ETHDKGSubmitMPK.Contract.TMPKSUBMISSIONEND(&_ETHDKGSubmitMPK.CallOpts)
}

// TREGISTRATIONEND is a free data retrieval call binding the contract method 0x0de1553f.
//
// Solidity: function T_REGISTRATION_END() view returns(uint256)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKCaller) TREGISTRATIONEND(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGSubmitMPK.contract.Call(opts, out, "T_REGISTRATION_END")
	return *ret0, err
}

// TREGISTRATIONEND is a free data retrieval call binding the contract method 0x0de1553f.
//
// Solidity: function T_REGISTRATION_END() view returns(uint256)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKSession) TREGISTRATIONEND() (*big.Int, error) {
	return _ETHDKGSubmitMPK.Contract.TREGISTRATIONEND(&_ETHDKGSubmitMPK.CallOpts)
}

// TREGISTRATIONEND is a free data retrieval call binding the contract method 0x0de1553f.
//
// Solidity: function T_REGISTRATION_END() view returns(uint256)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKCallerSession) TREGISTRATIONEND() (*big.Int, error) {
	return _ETHDKGSubmitMPK.Contract.TREGISTRATIONEND(&_ETHDKGSubmitMPK.CallOpts)
}

// TSHAREDISTRIBUTIONEND is a free data retrieval call binding the contract method 0xdc614e28.
//
// Solidity: function T_SHARE_DISTRIBUTION_END() view returns(uint256)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKCaller) TSHAREDISTRIBUTIONEND(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGSubmitMPK.contract.Call(opts, out, "T_SHARE_DISTRIBUTION_END")
	return *ret0, err
}

// TSHAREDISTRIBUTIONEND is a free data retrieval call binding the contract method 0xdc614e28.
//
// Solidity: function T_SHARE_DISTRIBUTION_END() view returns(uint256)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKSession) TSHAREDISTRIBUTIONEND() (*big.Int, error) {
	return _ETHDKGSubmitMPK.Contract.TSHAREDISTRIBUTIONEND(&_ETHDKGSubmitMPK.CallOpts)
}

// TSHAREDISTRIBUTIONEND is a free data retrieval call binding the contract method 0xdc614e28.
//
// Solidity: function T_SHARE_DISTRIBUTION_END() view returns(uint256)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKCallerSession) TSHAREDISTRIBUTIONEND() (*big.Int, error) {
	return _ETHDKGSubmitMPK.Contract.TSHAREDISTRIBUTIONEND(&_ETHDKGSubmitMPK.CallOpts)
}

// Addresses is a free data retrieval call binding the contract method 0xedf26d9b.
//
// Solidity: function addresses(uint256 ) view returns(address)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKCaller) Addresses(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ETHDKGSubmitMPK.contract.Call(opts, out, "addresses", arg0)
	return *ret0, err
}

// Addresses is a free data retrieval call binding the contract method 0xedf26d9b.
//
// Solidity: function addresses(uint256 ) view returns(address)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKSession) Addresses(arg0 *big.Int) (common.Address, error) {
	return _ETHDKGSubmitMPK.Contract.Addresses(&_ETHDKGSubmitMPK.CallOpts, arg0)
}

// Addresses is a free data retrieval call binding the contract method 0xedf26d9b.
//
// Solidity: function addresses(uint256 ) view returns(address)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKCallerSession) Addresses(arg0 *big.Int) (common.Address, error) {
	return _ETHDKGSubmitMPK.Contract.Addresses(&_ETHDKGSubmitMPK.CallOpts, arg0)
}

// Commitments1stCoefficient is a free data retrieval call binding the contract method 0x2cf4050b.
//
// Solidity: function commitments_1st_coefficient(address , uint256 ) view returns(uint256)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKCaller) Commitments1stCoefficient(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGSubmitMPK.contract.Call(opts, out, "commitments_1st_coefficient", arg0, arg1)
	return *ret0, err
}

// Commitments1stCoefficient is a free data retrieval call binding the contract method 0x2cf4050b.
//
// Solidity: function commitments_1st_coefficient(address , uint256 ) view returns(uint256)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKSession) Commitments1stCoefficient(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _ETHDKGSubmitMPK.Contract.Commitments1stCoefficient(&_ETHDKGSubmitMPK.CallOpts, arg0, arg1)
}

// Commitments1stCoefficient is a free data retrieval call binding the contract method 0x2cf4050b.
//
// Solidity: function commitments_1st_coefficient(address , uint256 ) view returns(uint256)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKCallerSession) Commitments1stCoefficient(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _ETHDKGSubmitMPK.Contract.Commitments1stCoefficient(&_ETHDKGSubmitMPK.CallOpts, arg0, arg1)
}

// CompletionCheck is a free data retrieval call binding the contract method 0x75f7ed6a.
//
// Solidity: function completion_check() view returns(bool)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKCaller) CompletionCheck(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ETHDKGSubmitMPK.contract.Call(opts, out, "completion_check")
	return *ret0, err
}

// CompletionCheck is a free data retrieval call binding the contract method 0x75f7ed6a.
//
// Solidity: function completion_check() view returns(bool)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKSession) CompletionCheck() (bool, error) {
	return _ETHDKGSubmitMPK.Contract.CompletionCheck(&_ETHDKGSubmitMPK.CallOpts)
}

// CompletionCheck is a free data retrieval call binding the contract method 0x75f7ed6a.
//
// Solidity: function completion_check() view returns(bool)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKCallerSession) CompletionCheck() (bool, error) {
	return _ETHDKGSubmitMPK.Contract.CompletionCheck(&_ETHDKGSubmitMPK.CallOpts)
}

// GpkjSubmissions is a free data retrieval call binding the contract method 0xfef001a9.
//
// Solidity: function gpkj_submissions(address , uint256 ) view returns(uint256)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKCaller) GpkjSubmissions(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGSubmitMPK.contract.Call(opts, out, "gpkj_submissions", arg0, arg1)
	return *ret0, err
}

// GpkjSubmissions is a free data retrieval call binding the contract method 0xfef001a9.
//
// Solidity: function gpkj_submissions(address , uint256 ) view returns(uint256)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKSession) GpkjSubmissions(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _ETHDKGSubmitMPK.Contract.GpkjSubmissions(&_ETHDKGSubmitMPK.CallOpts, arg0, arg1)
}

// GpkjSubmissions is a free data retrieval call binding the contract method 0xfef001a9.
//
// Solidity: function gpkj_submissions(address , uint256 ) view returns(uint256)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKCallerSession) GpkjSubmissions(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _ETHDKGSubmitMPK.Contract.GpkjSubmissions(&_ETHDKGSubmitMPK.CallOpts, arg0, arg1)
}

// InitialMessage is a free data retrieval call binding the contract method 0xaa7bd338.
//
// Solidity: function initial_message() view returns(bytes)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKCaller) InitialMessage(opts *bind.CallOpts) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _ETHDKGSubmitMPK.contract.Call(opts, out, "initial_message")
	return *ret0, err
}

// InitialMessage is a free data retrieval call binding the contract method 0xaa7bd338.
//
// Solidity: function initial_message() view returns(bytes)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKSession) InitialMessage() ([]byte, error) {
	return _ETHDKGSubmitMPK.Contract.InitialMessage(&_ETHDKGSubmitMPK.CallOpts)
}

// InitialMessage is a free data retrieval call binding the contract method 0xaa7bd338.
//
// Solidity: function initial_message() view returns(bytes)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKCallerSession) InitialMessage() ([]byte, error) {
	return _ETHDKGSubmitMPK.Contract.InitialMessage(&_ETHDKGSubmitMPK.CallOpts)
}

// InitialSignatures is a free data retrieval call binding the contract method 0x7328f826.
//
// Solidity: function initial_signatures(address , uint256 ) view returns(uint256)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKCaller) InitialSignatures(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGSubmitMPK.contract.Call(opts, out, "initial_signatures", arg0, arg1)
	return *ret0, err
}

// InitialSignatures is a free data retrieval call binding the contract method 0x7328f826.
//
// Solidity: function initial_signatures(address , uint256 ) view returns(uint256)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKSession) InitialSignatures(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _ETHDKGSubmitMPK.Contract.InitialSignatures(&_ETHDKGSubmitMPK.CallOpts, arg0, arg1)
}

// InitialSignatures is a free data retrieval call binding the contract method 0x7328f826.
//
// Solidity: function initial_signatures(address , uint256 ) view returns(uint256)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKCallerSession) InitialSignatures(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _ETHDKGSubmitMPK.Contract.InitialSignatures(&_ETHDKGSubmitMPK.CallOpts, arg0, arg1)
}

// IsMalicious is a free data retrieval call binding the contract method 0xeadfcadc.
//
// Solidity: function is_malicious(address ) view returns(bool)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKCaller) IsMalicious(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ETHDKGSubmitMPK.contract.Call(opts, out, "is_malicious", arg0)
	return *ret0, err
}

// IsMalicious is a free data retrieval call binding the contract method 0xeadfcadc.
//
// Solidity: function is_malicious(address ) view returns(bool)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKSession) IsMalicious(arg0 common.Address) (bool, error) {
	return _ETHDKGSubmitMPK.Contract.IsMalicious(&_ETHDKGSubmitMPK.CallOpts, arg0)
}

// IsMalicious is a free data retrieval call binding the contract method 0xeadfcadc.
//
// Solidity: function is_malicious(address ) view returns(bool)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKCallerSession) IsMalicious(arg0 common.Address) (bool, error) {
	return _ETHDKGSubmitMPK.Contract.IsMalicious(&_ETHDKGSubmitMPK.CallOpts, arg0)
}

// KeyShareSubmissionCheck is a free data retrieval call binding the contract method 0x836889dc.
//
// Solidity: function key_share_submission_check() view returns(bool)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKCaller) KeyShareSubmissionCheck(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ETHDKGSubmitMPK.contract.Call(opts, out, "key_share_submission_check")
	return *ret0, err
}

// KeyShareSubmissionCheck is a free data retrieval call binding the contract method 0x836889dc.
//
// Solidity: function key_share_submission_check() view returns(bool)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKSession) KeyShareSubmissionCheck() (bool, error) {
	return _ETHDKGSubmitMPK.Contract.KeyShareSubmissionCheck(&_ETHDKGSubmitMPK.CallOpts)
}

// KeyShareSubmissionCheck is a free data retrieval call binding the contract method 0x836889dc.
//
// Solidity: function key_share_submission_check() view returns(bool)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKCallerSession) KeyShareSubmissionCheck() (bool, error) {
	return _ETHDKGSubmitMPK.Contract.KeyShareSubmissionCheck(&_ETHDKGSubmitMPK.CallOpts)
}

// KeyShares is a free data retrieval call binding the contract method 0xa88c9e1c.
//
// Solidity: function key_shares(address , uint256 ) view returns(uint256)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKCaller) KeyShares(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGSubmitMPK.contract.Call(opts, out, "key_shares", arg0, arg1)
	return *ret0, err
}

// KeyShares is a free data retrieval call binding the contract method 0xa88c9e1c.
//
// Solidity: function key_shares(address , uint256 ) view returns(uint256)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKSession) KeyShares(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _ETHDKGSubmitMPK.Contract.KeyShares(&_ETHDKGSubmitMPK.CallOpts, arg0, arg1)
}

// KeyShares is a free data retrieval call binding the contract method 0xa88c9e1c.
//
// Solidity: function key_shares(address , uint256 ) view returns(uint256)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKCallerSession) KeyShares(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _ETHDKGSubmitMPK.Contract.KeyShares(&_ETHDKGSubmitMPK.CallOpts, arg0, arg1)
}

// MasterPublicKey is a free data retrieval call binding the contract method 0xe6511378.
//
// Solidity: function master_public_key(uint256 ) view returns(uint256)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKCaller) MasterPublicKey(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGSubmitMPK.contract.Call(opts, out, "master_public_key", arg0)
	return *ret0, err
}

// MasterPublicKey is a free data retrieval call binding the contract method 0xe6511378.
//
// Solidity: function master_public_key(uint256 ) view returns(uint256)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKSession) MasterPublicKey(arg0 *big.Int) (*big.Int, error) {
	return _ETHDKGSubmitMPK.Contract.MasterPublicKey(&_ETHDKGSubmitMPK.CallOpts, arg0)
}

// MasterPublicKey is a free data retrieval call binding the contract method 0xe6511378.
//
// Solidity: function master_public_key(uint256 ) view returns(uint256)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKCallerSession) MasterPublicKey(arg0 *big.Int) (*big.Int, error) {
	return _ETHDKGSubmitMPK.Contract.MasterPublicKey(&_ETHDKGSubmitMPK.CallOpts, arg0)
}

// MpkSubmissionCheck is a free data retrieval call binding the contract method 0x050a54f0.
//
// Solidity: function mpk_submission_check() view returns(bool)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKCaller) MpkSubmissionCheck(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ETHDKGSubmitMPK.contract.Call(opts, out, "mpk_submission_check")
	return *ret0, err
}

// MpkSubmissionCheck is a free data retrieval call binding the contract method 0x050a54f0.
//
// Solidity: function mpk_submission_check() view returns(bool)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKSession) MpkSubmissionCheck() (bool, error) {
	return _ETHDKGSubmitMPK.Contract.MpkSubmissionCheck(&_ETHDKGSubmitMPK.CallOpts)
}

// MpkSubmissionCheck is a free data retrieval call binding the contract method 0x050a54f0.
//
// Solidity: function mpk_submission_check() view returns(bool)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKCallerSession) MpkSubmissionCheck() (bool, error) {
	return _ETHDKGSubmitMPK.Contract.MpkSubmissionCheck(&_ETHDKGSubmitMPK.CallOpts)
}

// PublicKeys is a free data retrieval call binding the contract method 0x92896b2d.
//
// Solidity: function public_keys(address , uint256 ) view returns(uint256)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKCaller) PublicKeys(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ETHDKGSubmitMPK.contract.Call(opts, out, "public_keys", arg0, arg1)
	return *ret0, err
}

// PublicKeys is a free data retrieval call binding the contract method 0x92896b2d.
//
// Solidity: function public_keys(address , uint256 ) view returns(uint256)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKSession) PublicKeys(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _ETHDKGSubmitMPK.Contract.PublicKeys(&_ETHDKGSubmitMPK.CallOpts, arg0, arg1)
}

// PublicKeys is a free data retrieval call binding the contract method 0x92896b2d.
//
// Solidity: function public_keys(address , uint256 ) view returns(uint256)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKCallerSession) PublicKeys(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _ETHDKGSubmitMPK.Contract.PublicKeys(&_ETHDKGSubmitMPK.CallOpts, arg0, arg1)
}

// RegistrationCheck is a free data retrieval call binding the contract method 0xb7b09ed6.
//
// Solidity: function registration_check() view returns(bool)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKCaller) RegistrationCheck(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ETHDKGSubmitMPK.contract.Call(opts, out, "registration_check")
	return *ret0, err
}

// RegistrationCheck is a free data retrieval call binding the contract method 0xb7b09ed6.
//
// Solidity: function registration_check() view returns(bool)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKSession) RegistrationCheck() (bool, error) {
	return _ETHDKGSubmitMPK.Contract.RegistrationCheck(&_ETHDKGSubmitMPK.CallOpts)
}

// RegistrationCheck is a free data retrieval call binding the contract method 0xb7b09ed6.
//
// Solidity: function registration_check() view returns(bool)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKCallerSession) RegistrationCheck() (bool, error) {
	return _ETHDKGSubmitMPK.Contract.RegistrationCheck(&_ETHDKGSubmitMPK.CallOpts)
}

// ShareDistributionCheck is a free data retrieval call binding the contract method 0x2f11b985.
//
// Solidity: function share_distribution_check() view returns(bool)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKCaller) ShareDistributionCheck(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ETHDKGSubmitMPK.contract.Call(opts, out, "share_distribution_check")
	return *ret0, err
}

// ShareDistributionCheck is a free data retrieval call binding the contract method 0x2f11b985.
//
// Solidity: function share_distribution_check() view returns(bool)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKSession) ShareDistributionCheck() (bool, error) {
	return _ETHDKGSubmitMPK.Contract.ShareDistributionCheck(&_ETHDKGSubmitMPK.CallOpts)
}

// ShareDistributionCheck is a free data retrieval call binding the contract method 0x2f11b985.
//
// Solidity: function share_distribution_check() view returns(bool)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKCallerSession) ShareDistributionCheck() (bool, error) {
	return _ETHDKGSubmitMPK.Contract.ShareDistributionCheck(&_ETHDKGSubmitMPK.CallOpts)
}

// ShareDistributionHashes is a free data retrieval call binding the contract method 0xc21bee83.
//
// Solidity: function share_distribution_hashes(address ) view returns(bytes32)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKCaller) ShareDistributionHashes(opts *bind.CallOpts, arg0 common.Address) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _ETHDKGSubmitMPK.contract.Call(opts, out, "share_distribution_hashes", arg0)
	return *ret0, err
}

// ShareDistributionHashes is a free data retrieval call binding the contract method 0xc21bee83.
//
// Solidity: function share_distribution_hashes(address ) view returns(bytes32)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKSession) ShareDistributionHashes(arg0 common.Address) ([32]byte, error) {
	return _ETHDKGSubmitMPK.Contract.ShareDistributionHashes(&_ETHDKGSubmitMPK.CallOpts, arg0)
}

// ShareDistributionHashes is a free data retrieval call binding the contract method 0xc21bee83.
//
// Solidity: function share_distribution_hashes(address ) view returns(bytes32)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKCallerSession) ShareDistributionHashes(arg0 common.Address) ([32]byte, error) {
	return _ETHDKGSubmitMPK.Contract.ShareDistributionHashes(&_ETHDKGSubmitMPK.CallOpts, arg0)
}

// SubmitMasterPublicKey is a paid mutator transaction binding the contract method 0xf47ae6a9.
//
// Solidity: function submit_master_public_key(uint256[4] _master_public_key) returns(bool)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKTransactor) SubmitMasterPublicKey(opts *bind.TransactOpts, _master_public_key [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKGSubmitMPK.contract.Transact(opts, "submit_master_public_key", _master_public_key)
}

// SubmitMasterPublicKey is a paid mutator transaction binding the contract method 0xf47ae6a9.
//
// Solidity: function submit_master_public_key(uint256[4] _master_public_key) returns(bool)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKSession) SubmitMasterPublicKey(_master_public_key [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKGSubmitMPK.Contract.SubmitMasterPublicKey(&_ETHDKGSubmitMPK.TransactOpts, _master_public_key)
}

// SubmitMasterPublicKey is a paid mutator transaction binding the contract method 0xf47ae6a9.
//
// Solidity: function submit_master_public_key(uint256[4] _master_public_key) returns(bool)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKTransactorSession) SubmitMasterPublicKey(_master_public_key [4]*big.Int) (*types.Transaction, error) {
	return _ETHDKGSubmitMPK.Contract.SubmitMasterPublicKey(&_ETHDKGSubmitMPK.TransactOpts, _master_public_key)
}

// ETHDKGSubmitMPKKeyShareSubmissionIterator is returned from FilterKeyShareSubmission and is used to iterate over the raw logs and unpacked data for KeyShareSubmission events raised by the ETHDKGSubmitMPK contract.
type ETHDKGSubmitMPKKeyShareSubmissionIterator struct {
	Event *ETHDKGSubmitMPKKeyShareSubmission // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGSubmitMPKKeyShareSubmissionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGSubmitMPKKeyShareSubmission)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGSubmitMPKKeyShareSubmission)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGSubmitMPKKeyShareSubmissionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGSubmitMPKKeyShareSubmissionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGSubmitMPKKeyShareSubmission represents a KeyShareSubmission event raised by the ETHDKGSubmitMPK contract.
type ETHDKGSubmitMPKKeyShareSubmission struct {
	Issuer                     common.Address
	KeyShareG1                 [2]*big.Int
	KeyShareG1CorrectnessProof [2]*big.Int
	KeyShareG2                 [4]*big.Int
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterKeyShareSubmission is a free log retrieval operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKFilterer) FilterKeyShareSubmission(opts *bind.FilterOpts) (*ETHDKGSubmitMPKKeyShareSubmissionIterator, error) {

	logs, sub, err := _ETHDKGSubmitMPK.contract.FilterLogs(opts, "KeyShareSubmission")
	if err != nil {
		return nil, err
	}
	return &ETHDKGSubmitMPKKeyShareSubmissionIterator{contract: _ETHDKGSubmitMPK.contract, event: "KeyShareSubmission", logs: logs, sub: sub}, nil
}

// WatchKeyShareSubmission is a free log subscription operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKFilterer) WatchKeyShareSubmission(opts *bind.WatchOpts, sink chan<- *ETHDKGSubmitMPKKeyShareSubmission) (event.Subscription, error) {

	logs, sub, err := _ETHDKGSubmitMPK.contract.WatchLogs(opts, "KeyShareSubmission")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGSubmitMPKKeyShareSubmission)
				if err := _ETHDKGSubmitMPK.contract.UnpackLog(event, "KeyShareSubmission", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKeyShareSubmission is a log parse operation binding the contract event 0xb0ee36c3780de716eb6c83687f433ae2558a6923e090fd238b657fb6c896badc.
//
// Solidity: event KeyShareSubmission(address issuer, uint256[2] key_share_G1, uint256[2] key_share_G1_correctness_proof, uint256[4] key_share_G2)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKFilterer) ParseKeyShareSubmission(log types.Log) (*ETHDKGSubmitMPKKeyShareSubmission, error) {
	event := new(ETHDKGSubmitMPKKeyShareSubmission)
	if err := _ETHDKGSubmitMPK.contract.UnpackLog(event, "KeyShareSubmission", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ETHDKGSubmitMPKRegistrationOpenIterator is returned from FilterRegistrationOpen and is used to iterate over the raw logs and unpacked data for RegistrationOpen events raised by the ETHDKGSubmitMPK contract.
type ETHDKGSubmitMPKRegistrationOpenIterator struct {
	Event *ETHDKGSubmitMPKRegistrationOpen // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGSubmitMPKRegistrationOpenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGSubmitMPKRegistrationOpen)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGSubmitMPKRegistrationOpen)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGSubmitMPKRegistrationOpenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGSubmitMPKRegistrationOpenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGSubmitMPKRegistrationOpen represents a RegistrationOpen event raised by the ETHDKGSubmitMPK contract.
type ETHDKGSubmitMPKRegistrationOpen struct {
	DkgStarts              *big.Int
	RegistrationEnds       *big.Int
	ShareDistributionEnds  *big.Int
	DisputeEnds            *big.Int
	KeyShareSubmissionEnds *big.Int
	MpkSubmissionEnds      *big.Int
	GpkjSubmissionEnds     *big.Int
	GpkjDisputeEnds        *big.Int
	DkgComplete            *big.Int
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterRegistrationOpen is a free log retrieval operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKFilterer) FilterRegistrationOpen(opts *bind.FilterOpts) (*ETHDKGSubmitMPKRegistrationOpenIterator, error) {

	logs, sub, err := _ETHDKGSubmitMPK.contract.FilterLogs(opts, "RegistrationOpen")
	if err != nil {
		return nil, err
	}
	return &ETHDKGSubmitMPKRegistrationOpenIterator{contract: _ETHDKGSubmitMPK.contract, event: "RegistrationOpen", logs: logs, sub: sub}, nil
}

// WatchRegistrationOpen is a free log subscription operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKFilterer) WatchRegistrationOpen(opts *bind.WatchOpts, sink chan<- *ETHDKGSubmitMPKRegistrationOpen) (event.Subscription, error) {

	logs, sub, err := _ETHDKGSubmitMPK.contract.WatchLogs(opts, "RegistrationOpen")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGSubmitMPKRegistrationOpen)
				if err := _ETHDKGSubmitMPK.contract.UnpackLog(event, "RegistrationOpen", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistrationOpen is a log parse operation binding the contract event 0x9c6f8368fe7e77e8cb9438744581403bcb3f53298e517f04c1b8475487402e97.
//
// Solidity: event RegistrationOpen(uint256 dkgStarts, uint256 registrationEnds, uint256 shareDistributionEnds, uint256 disputeEnds, uint256 keyShareSubmissionEnds, uint256 mpkSubmissionEnds, uint256 gpkjSubmissionEnds, uint256 gpkjDisputeEnds, uint256 dkgComplete)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKFilterer) ParseRegistrationOpen(log types.Log) (*ETHDKGSubmitMPKRegistrationOpen, error) {
	event := new(ETHDKGSubmitMPKRegistrationOpen)
	if err := _ETHDKGSubmitMPK.contract.UnpackLog(event, "RegistrationOpen", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ETHDKGSubmitMPKShareDistributionIterator is returned from FilterShareDistribution and is used to iterate over the raw logs and unpacked data for ShareDistribution events raised by the ETHDKGSubmitMPK contract.
type ETHDKGSubmitMPKShareDistributionIterator struct {
	Event *ETHDKGSubmitMPKShareDistribution // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGSubmitMPKShareDistributionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGSubmitMPKShareDistribution)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGSubmitMPKShareDistribution)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGSubmitMPKShareDistributionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGSubmitMPKShareDistributionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGSubmitMPKShareDistribution represents a ShareDistribution event raised by the ETHDKGSubmitMPK contract.
type ETHDKGSubmitMPKShareDistribution struct {
	Issuer          common.Address
	Index           *big.Int
	EncryptedShares []*big.Int
	Commitments     [][2]*big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterShareDistribution is a free log retrieval operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKFilterer) FilterShareDistribution(opts *bind.FilterOpts) (*ETHDKGSubmitMPKShareDistributionIterator, error) {

	logs, sub, err := _ETHDKGSubmitMPK.contract.FilterLogs(opts, "ShareDistribution")
	if err != nil {
		return nil, err
	}
	return &ETHDKGSubmitMPKShareDistributionIterator{contract: _ETHDKGSubmitMPK.contract, event: "ShareDistribution", logs: logs, sub: sub}, nil
}

// WatchShareDistribution is a free log subscription operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKFilterer) WatchShareDistribution(opts *bind.WatchOpts, sink chan<- *ETHDKGSubmitMPKShareDistribution) (event.Subscription, error) {

	logs, sub, err := _ETHDKGSubmitMPK.contract.WatchLogs(opts, "ShareDistribution")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGSubmitMPKShareDistribution)
				if err := _ETHDKGSubmitMPK.contract.UnpackLog(event, "ShareDistribution", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseShareDistribution is a log parse operation binding the contract event 0xa84d294194d6169652a99150fd2ef10e18b0d2caa10beeea237bbddcc6e22b10.
//
// Solidity: event ShareDistribution(address issuer, uint256 index, uint256[] encrypted_shares, uint256[2][] commitments)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKFilterer) ParseShareDistribution(log types.Log) (*ETHDKGSubmitMPKShareDistribution, error) {
	event := new(ETHDKGSubmitMPKShareDistribution)
	if err := _ETHDKGSubmitMPK.contract.UnpackLog(event, "ShareDistribution", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ETHDKGSubmitMPKValidatorMemberIterator is returned from FilterValidatorMember and is used to iterate over the raw logs and unpacked data for ValidatorMember events raised by the ETHDKGSubmitMPK contract.
type ETHDKGSubmitMPKValidatorMemberIterator struct {
	Event *ETHDKGSubmitMPKValidatorMember // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGSubmitMPKValidatorMemberIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGSubmitMPKValidatorMember)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGSubmitMPKValidatorMember)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGSubmitMPKValidatorMemberIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGSubmitMPKValidatorMemberIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGSubmitMPKValidatorMember represents a ValidatorMember event raised by the ETHDKGSubmitMPK contract.
type ETHDKGSubmitMPKValidatorMember struct {
	Account common.Address
	Epoch   *big.Int
	Index   *big.Int
	Share0  *big.Int
	Share1  *big.Int
	Share2  *big.Int
	Share3  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterValidatorMember is a free log retrieval operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKFilterer) FilterValidatorMember(opts *bind.FilterOpts) (*ETHDKGSubmitMPKValidatorMemberIterator, error) {

	logs, sub, err := _ETHDKGSubmitMPK.contract.FilterLogs(opts, "ValidatorMember")
	if err != nil {
		return nil, err
	}
	return &ETHDKGSubmitMPKValidatorMemberIterator{contract: _ETHDKGSubmitMPK.contract, event: "ValidatorMember", logs: logs, sub: sub}, nil
}

// WatchValidatorMember is a free log subscription operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKFilterer) WatchValidatorMember(opts *bind.WatchOpts, sink chan<- *ETHDKGSubmitMPKValidatorMember) (event.Subscription, error) {

	logs, sub, err := _ETHDKGSubmitMPK.contract.WatchLogs(opts, "ValidatorMember")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGSubmitMPKValidatorMember)
				if err := _ETHDKGSubmitMPK.contract.UnpackLog(event, "ValidatorMember", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorMember is a log parse operation binding the contract event 0x113b129fac2dde341b9fbbec2bb79a95b9945b0e80fda711fc8ae5c7b0ea83b0.
//
// Solidity: event ValidatorMember(address account, uint256 epoch, uint256 index, uint256 share0, uint256 share1, uint256 share2, uint256 share3)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKFilterer) ParseValidatorMember(log types.Log) (*ETHDKGSubmitMPKValidatorMember, error) {
	event := new(ETHDKGSubmitMPKValidatorMember)
	if err := _ETHDKGSubmitMPK.contract.UnpackLog(event, "ValidatorMember", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ETHDKGSubmitMPKValidatorSetIterator is returned from FilterValidatorSet and is used to iterate over the raw logs and unpacked data for ValidatorSet events raised by the ETHDKGSubmitMPK contract.
type ETHDKGSubmitMPKValidatorSetIterator struct {
	Event *ETHDKGSubmitMPKValidatorSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ETHDKGSubmitMPKValidatorSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ETHDKGSubmitMPKValidatorSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ETHDKGSubmitMPKValidatorSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ETHDKGSubmitMPKValidatorSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ETHDKGSubmitMPKValidatorSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ETHDKGSubmitMPKValidatorSet represents a ValidatorSet event raised by the ETHDKGSubmitMPK contract.
type ETHDKGSubmitMPKValidatorSet struct {
	ValidatorCount uint8
	Epoch          *big.Int
	EthHeight      uint32
	MadHeight      uint32
	GroupKey0      *big.Int
	GroupKey1      *big.Int
	GroupKey2      *big.Int
	GroupKey3      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterValidatorSet is a free log retrieval operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKFilterer) FilterValidatorSet(opts *bind.FilterOpts) (*ETHDKGSubmitMPKValidatorSetIterator, error) {

	logs, sub, err := _ETHDKGSubmitMPK.contract.FilterLogs(opts, "ValidatorSet")
	if err != nil {
		return nil, err
	}
	return &ETHDKGSubmitMPKValidatorSetIterator{contract: _ETHDKGSubmitMPK.contract, event: "ValidatorSet", logs: logs, sub: sub}, nil
}

// WatchValidatorSet is a free log subscription operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKFilterer) WatchValidatorSet(opts *bind.WatchOpts, sink chan<- *ETHDKGSubmitMPKValidatorSet) (event.Subscription, error) {

	logs, sub, err := _ETHDKGSubmitMPK.contract.WatchLogs(opts, "ValidatorSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ETHDKGSubmitMPKValidatorSet)
				if err := _ETHDKGSubmitMPK.contract.UnpackLog(event, "ValidatorSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorSet is a log parse operation binding the contract event 0x1c85ff1efe0a905f8feca811e617102cb7ec896aded693eb96366c8ef22bb09f.
//
// Solidity: event ValidatorSet(uint8 validatorCount, uint256 epoch, uint32 ethHeight, uint32 madHeight, uint256 groupKey0, uint256 groupKey1, uint256 groupKey2, uint256 groupKey3)
func (_ETHDKGSubmitMPK *ETHDKGSubmitMPKFilterer) ParseValidatorSet(log types.Log) (*ETHDKGSubmitMPKValidatorSet, error) {
	event := new(ETHDKGSubmitMPKValidatorSet)
	if err := _ETHDKGSubmitMPK.contract.UnpackLog(event, "ValidatorSet", log); err != nil {
		return nil, err
	}
	return event, nil
}

// MerkleProofABI is the input ABI used to generate the binding from.
const MerkleProofABI = "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"self\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"bitSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"}],\"name\":\"checkProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]"

// MerkleProofBin is the compiled bytecode used for deploying new contracts.
var MerkleProofBin = "0x608060405234801561001057600080fd5b50610286806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806360938ac81461003b578063e3f9c6c41461012a575b600080fd5b6101126004803603608081101561005157600080fd5b810190808035906020019064010000000081111561006e57600080fd5b82018360208201111561008057600080fd5b803590602001918460018302840111640100000000831117156100a257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190803590602001909291908035906020019092919050505061017b565b60405180821515815260200191505060405180910390f35b6101636004803603604081101561014057600080fd5b8101908080359060200190929190803560ff169060200190929190505050610237565b60405180821515815260200191505060405180910390f35b6000806000849050600080602090505b88518111610226578089015193506101a6868360ff03610237565b156101e15783836040516020018083815260200182815260200192505050604051602081830303815290604052805190602001209250610213565b828460405160200180838152602001828152602001925050506040516020818303038152906040528051906020012092505b818060010192505060208101905061018b565b508682149350505050949350505050565b60006001808360ff0360ff1685901c161490509291505056fea2646970667358221220c89032fb1058ec862f80a1e7d0d5dd507afc7a991e0ecb98207381625b755b1e64736f6c63430007060033"

// DeployMerkleProof deploys a new Ethereum contract, binding an instance of MerkleProof to it.
func DeployMerkleProof(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MerkleProof, error) {
	parsed, err := abi.JSON(strings.NewReader(MerkleProofABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(MerkleProofBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MerkleProof{MerkleProofCaller: MerkleProofCaller{contract: contract}, MerkleProofTransactor: MerkleProofTransactor{contract: contract}, MerkleProofFilterer: MerkleProofFilterer{contract: contract}}, nil
}

// MerkleProof is an auto generated Go binding around an Ethereum contract.
type MerkleProof struct {
	MerkleProofCaller     // Read-only binding to the contract
	MerkleProofTransactor // Write-only binding to the contract
	MerkleProofFilterer   // Log filterer for contract events
}

// MerkleProofCaller is an auto generated read-only Go binding around an Ethereum contract.
type MerkleProofCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MerkleProofTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MerkleProofTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MerkleProofFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MerkleProofFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MerkleProofSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MerkleProofSession struct {
	Contract     *MerkleProof      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MerkleProofCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MerkleProofCallerSession struct {
	Contract *MerkleProofCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// MerkleProofTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MerkleProofTransactorSession struct {
	Contract     *MerkleProofTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// MerkleProofRaw is an auto generated low-level Go binding around an Ethereum contract.
type MerkleProofRaw struct {
	Contract *MerkleProof // Generic contract binding to access the raw methods on
}

// MerkleProofCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MerkleProofCallerRaw struct {
	Contract *MerkleProofCaller // Generic read-only contract binding to access the raw methods on
}

// MerkleProofTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MerkleProofTransactorRaw struct {
	Contract *MerkleProofTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMerkleProof creates a new instance of MerkleProof, bound to a specific deployed contract.
func NewMerkleProof(address common.Address, backend bind.ContractBackend) (*MerkleProof, error) {
	contract, err := bindMerkleProof(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MerkleProof{MerkleProofCaller: MerkleProofCaller{contract: contract}, MerkleProofTransactor: MerkleProofTransactor{contract: contract}, MerkleProofFilterer: MerkleProofFilterer{contract: contract}}, nil
}

// NewMerkleProofCaller creates a new read-only instance of MerkleProof, bound to a specific deployed contract.
func NewMerkleProofCaller(address common.Address, caller bind.ContractCaller) (*MerkleProofCaller, error) {
	contract, err := bindMerkleProof(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MerkleProofCaller{contract: contract}, nil
}

// NewMerkleProofTransactor creates a new write-only instance of MerkleProof, bound to a specific deployed contract.
func NewMerkleProofTransactor(address common.Address, transactor bind.ContractTransactor) (*MerkleProofTransactor, error) {
	contract, err := bindMerkleProof(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MerkleProofTransactor{contract: contract}, nil
}

// NewMerkleProofFilterer creates a new log filterer instance of MerkleProof, bound to a specific deployed contract.
func NewMerkleProofFilterer(address common.Address, filterer bind.ContractFilterer) (*MerkleProofFilterer, error) {
	contract, err := bindMerkleProof(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MerkleProofFilterer{contract: contract}, nil
}

// bindMerkleProof binds a generic wrapper to an already deployed contract.
func bindMerkleProof(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MerkleProofABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MerkleProof *MerkleProofRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _MerkleProof.Contract.MerkleProofCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MerkleProof *MerkleProofRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MerkleProof.Contract.MerkleProofTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MerkleProof *MerkleProofRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MerkleProof.Contract.MerkleProofTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MerkleProof *MerkleProofCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _MerkleProof.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MerkleProof *MerkleProofTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MerkleProof.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MerkleProof *MerkleProofTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MerkleProof.Contract.contract.Transact(opts, method, params...)
}

// BitSet is a free data retrieval call binding the contract method 0xe3f9c6c4.
//
// Solidity: function bitSet(uint256 self, uint8 index) pure returns(bool)
func (_MerkleProof *MerkleProofCaller) BitSet(opts *bind.CallOpts, self *big.Int, index uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _MerkleProof.contract.Call(opts, out, "bitSet", self, index)
	return *ret0, err
}

// BitSet is a free data retrieval call binding the contract method 0xe3f9c6c4.
//
// Solidity: function bitSet(uint256 self, uint8 index) pure returns(bool)
func (_MerkleProof *MerkleProofSession) BitSet(self *big.Int, index uint8) (bool, error) {
	return _MerkleProof.Contract.BitSet(&_MerkleProof.CallOpts, self, index)
}

// BitSet is a free data retrieval call binding the contract method 0xe3f9c6c4.
//
// Solidity: function bitSet(uint256 self, uint8 index) pure returns(bool)
func (_MerkleProof *MerkleProofCallerSession) BitSet(self *big.Int, index uint8) (bool, error) {
	return _MerkleProof.Contract.BitSet(&_MerkleProof.CallOpts, self, index)
}

// CheckProof is a free data retrieval call binding the contract method 0x60938ac8.
//
// Solidity: function checkProof(bytes proof, bytes32 root, bytes32 hash, uint256 key) pure returns(bool)
func (_MerkleProof *MerkleProofCaller) CheckProof(opts *bind.CallOpts, proof []byte, root [32]byte, hash [32]byte, key *big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _MerkleProof.contract.Call(opts, out, "checkProof", proof, root, hash, key)
	return *ret0, err
}

// CheckProof is a free data retrieval call binding the contract method 0x60938ac8.
//
// Solidity: function checkProof(bytes proof, bytes32 root, bytes32 hash, uint256 key) pure returns(bool)
func (_MerkleProof *MerkleProofSession) CheckProof(proof []byte, root [32]byte, hash [32]byte, key *big.Int) (bool, error) {
	return _MerkleProof.Contract.CheckProof(&_MerkleProof.CallOpts, proof, root, hash, key)
}

// CheckProof is a free data retrieval call binding the contract method 0x60938ac8.
//
// Solidity: function checkProof(bytes proof, bytes32 root, bytes32 hash, uint256 key) pure returns(bool)
func (_MerkleProof *MerkleProofCallerSession) CheckProof(proof []byte, root [32]byte, hash [32]byte, key *big.Int) (bool, error) {
	return _MerkleProof.Contract.CheckProof(&_MerkleProof.CallOpts, proof, root, hash, key)
}

// MintableERC20ABI is the input ABI used to generate the binding from.
const MintableERC20ABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// MintableERC20 is an auto generated Go binding around an Ethereum contract.
type MintableERC20 struct {
	MintableERC20Caller     // Read-only binding to the contract
	MintableERC20Transactor // Write-only binding to the contract
	MintableERC20Filterer   // Log filterer for contract events
}

// MintableERC20Caller is an auto generated read-only Go binding around an Ethereum contract.
type MintableERC20Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MintableERC20Transactor is an auto generated write-only Go binding around an Ethereum contract.
type MintableERC20Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MintableERC20Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MintableERC20Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MintableERC20Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MintableERC20Session struct {
	Contract     *MintableERC20    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MintableERC20CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MintableERC20CallerSession struct {
	Contract *MintableERC20Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// MintableERC20TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MintableERC20TransactorSession struct {
	Contract     *MintableERC20Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// MintableERC20Raw is an auto generated low-level Go binding around an Ethereum contract.
type MintableERC20Raw struct {
	Contract *MintableERC20 // Generic contract binding to access the raw methods on
}

// MintableERC20CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MintableERC20CallerRaw struct {
	Contract *MintableERC20Caller // Generic read-only contract binding to access the raw methods on
}

// MintableERC20TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MintableERC20TransactorRaw struct {
	Contract *MintableERC20Transactor // Generic write-only contract binding to access the raw methods on
}

// NewMintableERC20 creates a new instance of MintableERC20, bound to a specific deployed contract.
func NewMintableERC20(address common.Address, backend bind.ContractBackend) (*MintableERC20, error) {
	contract, err := bindMintableERC20(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MintableERC20{MintableERC20Caller: MintableERC20Caller{contract: contract}, MintableERC20Transactor: MintableERC20Transactor{contract: contract}, MintableERC20Filterer: MintableERC20Filterer{contract: contract}}, nil
}

// NewMintableERC20Caller creates a new read-only instance of MintableERC20, bound to a specific deployed contract.
func NewMintableERC20Caller(address common.Address, caller bind.ContractCaller) (*MintableERC20Caller, error) {
	contract, err := bindMintableERC20(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MintableERC20Caller{contract: contract}, nil
}

// NewMintableERC20Transactor creates a new write-only instance of MintableERC20, bound to a specific deployed contract.
func NewMintableERC20Transactor(address common.Address, transactor bind.ContractTransactor) (*MintableERC20Transactor, error) {
	contract, err := bindMintableERC20(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MintableERC20Transactor{contract: contract}, nil
}

// NewMintableERC20Filterer creates a new log filterer instance of MintableERC20, bound to a specific deployed contract.
func NewMintableERC20Filterer(address common.Address, filterer bind.ContractFilterer) (*MintableERC20Filterer, error) {
	contract, err := bindMintableERC20(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MintableERC20Filterer{contract: contract}, nil
}

// bindMintableERC20 binds a generic wrapper to an already deployed contract.
func bindMintableERC20(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MintableERC20ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MintableERC20 *MintableERC20Raw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _MintableERC20.Contract.MintableERC20Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MintableERC20 *MintableERC20Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MintableERC20.Contract.MintableERC20Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MintableERC20 *MintableERC20Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MintableERC20.Contract.MintableERC20Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MintableERC20 *MintableERC20CallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _MintableERC20.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MintableERC20 *MintableERC20TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MintableERC20.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MintableERC20 *MintableERC20TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MintableERC20.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address src, address who) view returns(uint256)
func (_MintableERC20 *MintableERC20Caller) Allowance(opts *bind.CallOpts, src common.Address, who common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MintableERC20.contract.Call(opts, out, "allowance", src, who)
	return *ret0, err
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address src, address who) view returns(uint256)
func (_MintableERC20 *MintableERC20Session) Allowance(src common.Address, who common.Address) (*big.Int, error) {
	return _MintableERC20.Contract.Allowance(&_MintableERC20.CallOpts, src, who)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address src, address who) view returns(uint256)
func (_MintableERC20 *MintableERC20CallerSession) Allowance(src common.Address, who common.Address) (*big.Int, error) {
	return _MintableERC20.Contract.Allowance(&_MintableERC20.CallOpts, src, who)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address who) view returns(uint256)
func (_MintableERC20 *MintableERC20Caller) BalanceOf(opts *bind.CallOpts, who common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MintableERC20.contract.Call(opts, out, "balanceOf", who)
	return *ret0, err
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address who) view returns(uint256)
func (_MintableERC20 *MintableERC20Session) BalanceOf(who common.Address) (*big.Int, error) {
	return _MintableERC20.Contract.BalanceOf(&_MintableERC20.CallOpts, who)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address who) view returns(uint256)
func (_MintableERC20 *MintableERC20CallerSession) BalanceOf(who common.Address) (*big.Int, error) {
	return _MintableERC20.Contract.BalanceOf(&_MintableERC20.CallOpts, who)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MintableERC20 *MintableERC20Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MintableERC20.contract.Call(opts, out, "totalSupply")
	return *ret0, err
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MintableERC20 *MintableERC20Session) TotalSupply() (*big.Int, error) {
	return _MintableERC20.Contract.TotalSupply(&_MintableERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MintableERC20 *MintableERC20CallerSession) TotalSupply() (*big.Int, error) {
	return _MintableERC20.Contract.TotalSupply(&_MintableERC20.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address who, uint256 wad) returns(bool)
func (_MintableERC20 *MintableERC20Transactor) Approve(opts *bind.TransactOpts, who common.Address, wad *big.Int) (*types.Transaction, error) {
	return _MintableERC20.contract.Transact(opts, "approve", who, wad)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address who, uint256 wad) returns(bool)
func (_MintableERC20 *MintableERC20Session) Approve(who common.Address, wad *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.Approve(&_MintableERC20.TransactOpts, who, wad)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address who, uint256 wad) returns(bool)
func (_MintableERC20 *MintableERC20TransactorSession) Approve(who common.Address, wad *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.Approve(&_MintableERC20.TransactOpts, who, wad)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_MintableERC20 *MintableERC20Transactor) GrantOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _MintableERC20.contract.Transact(opts, "grantOperator", _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_MintableERC20 *MintableERC20Session) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _MintableERC20.Contract.GrantOperator(&_MintableERC20.TransactOpts, _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_MintableERC20 *MintableERC20TransactorSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _MintableERC20.Contract.GrantOperator(&_MintableERC20.TransactOpts, _operator)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address guy, uint256 wad) returns()
func (_MintableERC20 *MintableERC20Transactor) Mint(opts *bind.TransactOpts, guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _MintableERC20.contract.Transact(opts, "mint", guy, wad)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address guy, uint256 wad) returns()
func (_MintableERC20 *MintableERC20Session) Mint(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.Mint(&_MintableERC20.TransactOpts, guy, wad)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address guy, uint256 wad) returns()
func (_MintableERC20 *MintableERC20TransactorSession) Mint(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.Mint(&_MintableERC20.TransactOpts, guy, wad)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 wad) returns(bool)
func (_MintableERC20 *MintableERC20Transactor) Transfer(opts *bind.TransactOpts, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _MintableERC20.contract.Transact(opts, "transfer", dst, wad)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 wad) returns(bool)
func (_MintableERC20 *MintableERC20Session) Transfer(dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.Transfer(&_MintableERC20.TransactOpts, dst, wad)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 wad) returns(bool)
func (_MintableERC20 *MintableERC20TransactorSession) Transfer(dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.Transfer(&_MintableERC20.TransactOpts, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_MintableERC20 *MintableERC20Transactor) TransferFrom(opts *bind.TransactOpts, src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _MintableERC20.contract.Transact(opts, "transferFrom", src, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_MintableERC20 *MintableERC20Session) TransferFrom(src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.TransferFrom(&_MintableERC20.TransactOpts, src, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_MintableERC20 *MintableERC20TransactorSession) TransferFrom(src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.TransferFrom(&_MintableERC20.TransactOpts, src, dst, wad)
}

// ParticipantsFacetABI is the input ABI used to generate the binding from.
const ParticipantsFacetABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"madID\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"madID\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"pkHash\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorLeft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"pkHash\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorQueued\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"_madID\",\"type\":\"uint256[2]\"}],\"name\":\"addValidator\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmValidators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"getValidatorPublicKey\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractRegistry\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"initializeParticipants\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"_madID\",\"type\":\"uint256[2]\"}],\"name\":\"queueValidator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"_madID\",\"type\":\"uint256[2]\"}],\"name\":\"removeValidator\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ms\",\"type\":\"uint256\"}],\"name\":\"setMinimumStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"max\",\"type\":\"uint8\"}],\"name\":\"setValidatorMaxCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorMaxCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// ParticipantsFacetBin is the compiled bytecode used for deploying new contracts.
var ParticipantsFacetBin = "0x608060405234801561001057600080fd5b5060006100256100ca60201b6118271760201c565b9050338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018160000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550506100f7565b6000807f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90508091505090565b6129fe80620001076000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063844469b211610097578063ec5ffac211610066578063ec5ffac214610286578063ee8420dd146102a4578063facd743b146102c0578063fad8b32a146102f0576100f5565b8063844469b2146101ec578063b7ab4db51461021c578063e348da131461023a578063eb6320c714610256576100f5565b80632cab37f7116100d35780632cab37f71461015257806335c6a1631461016e5780634e6f4a221461018c57806381d3cb14146101bc576100f5565b806309f0d45d146100fa5780630f43a67714610118578063233e990314610136575b600080fd5b61010261030c565b60405161010f91906127fe565b60405180910390f35b610120610331565b60405161012d91906127fe565b60405180910390f35b610150600480360381019061014b9190612181565b610356565b005b61016c600480360381019061016791906121d3565b610441565b005b610176610540565b6040516101839190612686565b60405180910390f35b6101a660048036038101906101a191906120a1565b610640565b6040516101b3919061266b565b60405180910390f35b6101d660048036038101906101d191906120f3565b610767565b6040516101e391906127e3565b60405180910390f35b610206600480360381019061020191906120f3565b610864565b60405161021391906127fe565b60405180910390f35b610224610fd0565b604051610231919061262e565b60405180910390f35b610254600480360381019061024f91906120a1565b61106d565b005b610270600480360381019061026b91906120f3565b6111a5565b60405161027d91906127fe565b60405180910390f35b61028e61125e565b60405161029b91906127e3565b60405180910390f35b6102be60048036038101906102b99190612158565b611276565b005b6102da60048036038101906102d591906120a1565b61153e565b6040516102e79190612686565b60405180910390f35b61030a600480360381019061030591906120a1565b6116f8565b005b600080610317611854565b90508060040160019054906101000a900460ff1691505090565b60008061033c611854565b90508060040160009054906101000a900460ff1691505090565b6000610360611827565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610427576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f6f6e6c79206f776e657220697320616c6c6f776564000000000000000000000081525060200191505060405180910390fd5b6000610431611854565b9050828160090181905550505050565b600061044b611827565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610512576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f6f6e6c79206f776e657220697320616c6c6f776564000000000000000000000081525060200191505060405180910390fd5b600061051c611854565b9050828160040160016101000a81548160ff021916908360ff160217905550505050565b60008061054b611854565b90505b8060040160019054906101000a900460ff1660ff168160040160009054906101000a900460ff1660ff161080156105905750600061058e82600501611881565b115b156106385760006105a3826005016118bb565b905060008260030160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060028060200260405190810160405280929190826002801561061f576020028201915b81548152602001906001019080831161060b575b505050505090506106308282611aa9565b50505061054e565b600191505090565b610648611f63565b6000610652611854565b90508060020160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166106e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d990612743565b60405180910390fd5b8060030160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060028060200260405190810160405280929190826002801561075a576020028201915b815481526020019060010190808311610746575b5050505050915050919050565b600080610772611854565b90508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d9906126c3565b60405180910390fd5b6107f88482600501611d9290919063ffffffff16565b8373ffffffffffffffffffffffffffffffffffffffff167fb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d8460405161083e9190612650565b60405180910390a28060040160009054906101000a900460ff1660ff1691505092915050565b60008061086f611854565b90508060020160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166108ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f690612783565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461096d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096490612723565b60405180910390fd5b60008160010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008260030160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600280602002604051908101604052809291908260028015610a2d576020028201915b815481526020019060010190808311610a19575b5050505050905084600060028110610a4157fe5b602002013581600060028110610a5357fe5b602002015114610a98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8f90612763565b60405180910390fd5b84600160028110610aa557fe5b602002013581600160028110610ab757fe5b602002015114610afc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af390612763565b60405180910390fd5b8260010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600090558260020160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff02191690558260030160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610bdf9190611f85565b6000600184600001805490500390506000846000018281548110610bff57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050838560010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550846000018281548110610c8157fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856000018581548110610cbb57fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600001805480610d1057fe5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055600073ffffffffffffffffffffffffffffffffffffffff168560080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610dd9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd0906127a3565b60405180910390fd5b60008560080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166335ba4daf8b6040518263ffffffff1660e01b8152600401610e3d91906125ea565b60206040518083038186803b158015610e5557600080fd5b505afa158015610e69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8d91906121aa565b90506000811115610f44578173ffffffffffffffffffffffffffffffffffffffff1663e29dda928b836040518363ffffffff1660e01b8152600401610ed3929190612605565b602060405180830381600087803b158015610eed57600080fd5b505af1158015610f01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f25919061212f565b5060018760040160026101000a81548160ff0219169083151502179055505b8973ffffffffffffffffffffffffffffffffffffffff167f319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd948a604051610f8a9190612650565b60405180910390a286600401600081819054906101000a900460ff166001900391906101000a81548160ff021916908360ff160217905597505050505050505092915050565b60606000610fdc611854565b90508060000180548060200260200160405190810160405280929190818152602001828054801561106257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611018575b505050505091505090565b6000611077611827565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661113a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f6e6c79206f70657261746f727320616c6c6f7765640000000000000000000081525060200191505060405180910390fd5b6000611144611827565b905060018160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b60008273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611215576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120c906127c3565b60405180910390fd5b61125683836002806020026040519081016040528092919082600260200280828437600081840152601f19601f820116905080830192505050505050611aa9565b905092915050565b600080611269611854565b9050806009015491505090565b6000611280611827565b90503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611347576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f6f6e6c79206f776e657220697320616c6c6f776564000000000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156113b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ae90612703565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff1663f67187ac6040518060400160405280600a81526020017f7374616b696e672f7631000000000000000000000000000000000000000000008152506040518263ffffffff1660e01b815260040161142791906126a1565b60206040518083038186803b15801561143f57600080fd5b505afa158015611453573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147791906120ca565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156114e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114e0906127a3565b60405180910390fd5b60006114f3611854565b9050818160080160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b600080611549611854565b9050600073ffffffffffffffffffffffffffffffffffffffff168160080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156115df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115d6906127a3565b60405180910390fd5b60008160080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160020160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1680156116ef575081600901548173ffffffffffffffffffffffffffffffffffffffff166335ba4daf866040518263ffffffff1660e01b815260040161169c91906125ea565b60206040518083038186803b1580156116b457600080fd5b505afa1580156116c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ec91906121aa565b10155b92505050919050565b6000611702611827565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166117c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f6e6c79206f70657261746f727320616c6c6f7765640000000000000000000081525060200191505060405180910390fd5b60006117cf611827565b90508060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff0219169055505050565b6000807f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90508091505090565b6000807f310970b1d84cbb8af371a12019b396e9511a9b44411c1dabeec3e3d59d9a50f690508091505090565b60008160020160009054906101000a900463ffffffff168260020160049054906101000a900463ffffffff160363ffffffff169050919050565b60008160020160009054906101000a900463ffffffff1663ffffffff168260020160049054906101000a900463ffffffff1663ffffffff1611611966576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f717565756520697320656d70747900000000000000000000000000000000000081525060200191505060405180910390fd5b8160010160008360020160009054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160010160008360020160009054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690558160000160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff021916905581600201600081819054906101000a900463ffffffff168092919060010191906101000a81548163ffffffff021916908363ffffffff16021790555050919050565b600080611ab4611854565b90508060020160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16158015611b3957508060040160019054906101000a900460ff1660ff168160040160009054906101000a900460ff1660ff16105b611b78576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b6f906126e3565b60405180910390fd5b80600001849080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018160000180549050038160010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060018160020160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550828160030160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020906002611cd7929190611f93565b5060018160040160026101000a81548160ff02191690831515021790555080600401600081819054906101000a900460ff168092919060010191906101000a81548160ff021916908360ff160217905550508373ffffffffffffffffffffffffffffffffffffffff167f8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd984604051611d6f919061266b565b60405180910390a28060040160009054906101000a900460ff1691505092915050565b8160000160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611e54576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6475706c696361746573206e6f7420616c6c6f7765640000000000000000000081525060200191505060405180910390fd5b808260010160008460020160049054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555081600201600481819054906101000a900463ffffffff168092919060010191906101000a81548163ffffffff021916908363ffffffff160217905550505050565b6040518060400160405280600290602082028036833780820191505090505090565b506000815560010160009055565b8260028101928215611fc2579160200282015b82811115611fc1578251825591602001919060010190611fa6565b5b509050611fcf9190611fd3565b5090565b5b80821115611fec576000816000905550600101611fd4565b5090565b600081359050611fff81612955565b92915050565b60008151905061201481612955565b92915050565b60008190508260206002028201111561203257600080fd5b92915050565b6000815190506120478161296c565b92915050565b60008135905061205c81612983565b92915050565b6000813590506120718161299a565b92915050565b6000815190506120868161299a565b92915050565b60008135905061209b816129b1565b92915050565b6000602082840312156120b357600080fd5b60006120c184828501611ff0565b91505092915050565b6000602082840312156120dc57600080fd5b60006120ea84828501612005565b91505092915050565b6000806060838503121561210657600080fd5b600061211485828601611ff0565b92505060206121258582860161201a565b9150509250929050565b60006020828403121561214157600080fd5b600061214f84828501612038565b91505092915050565b60006020828403121561216a57600080fd5b60006121788482850161204d565b91505092915050565b60006020828403121561219357600080fd5b60006121a184828501612062565b91505092915050565b6000602082840312156121bc57600080fd5b60006121ca84828501612077565b91505092915050565b6000602082840312156121e557600080fd5b60006121f38482850161208c565b91505092915050565b6000612208838361222c565b60208301905092915050565b600061222083836125bd565b60208301905092915050565b6122358161289b565b82525050565b6122448161289b565b82525050565b600061225582612833565b61225f818561286e565b935061226a83612819565b8060005b8381101561229b57815161228288826121fc565b975061228d83612854565b92505060018101905061226e565b5085935050505092915050565b6122b460408383612902565b5050565b6122c18161283e565b6122cb818461287f565b92506122d682612829565b8060005b838110156123075781516122ee8782612214565b96506122f983612861565b9250506001810190506122da565b505050505050565b612318816128ad565b82525050565b600061232982612849565b612333818561288a565b9350612343818560208601612911565b61234c81612944565b840191505092915050565b600061236460198361288a565b91507f4f6e6c792073656c6620717565756520737570706f72746564000000000000006000830152602082019050919050565b60006123a4601a8361288a565b91507f43616e277420616464206d6f72652076616c696461746f72732e0000000000006000830152602082019050919050565b60006123e460148361288a565b91507f6e696c20726567697374727920616464726573730000000000000000000000006000830152602082019050919050565b6000612424601b8361288a565b91507f4f6e6c792073656c662072656d6f76616c20737570706f7274656400000000006000830152602082019050919050565b600061246460168361288a565b91507f56616c696461746f72206e6f742070726573656e742e000000000000000000006000830152602082019050919050565b60006124a460228361288a565b91507f56616c696461746f7220646f65736e2774206d61746368207075626c6963206b60008301527f65790000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061250a60158361288a565b91507f56616c696461746f72206e6f742070726573656e7400000000000000000000006000830152602082019050919050565b600061254a60138361288a565b91507f6e696c207374616b696e672061646472657373000000000000000000000000006000830152602082019050919050565b600061258a601a8361288a565b91507f4f6e6c792073656c6620616464696e6720737570706f727465640000000000006000830152602082019050919050565b6125c6816128eb565b82525050565b6125d5816128eb565b82525050565b6125e4816128f5565b82525050565b60006020820190506125ff600083018461223b565b92915050565b600060408201905061261a600083018561223b565b61262760208301846125cc565b9392505050565b60006020820190508181036000830152612648818461224a565b905092915050565b600060408201905061266560008301846122a8565b92915050565b600060408201905061268060008301846122b8565b92915050565b600060208201905061269b600083018461230f565b92915050565b600060208201905081810360008301526126bb818461231e565b905092915050565b600060208201905081810360008301526126dc81612357565b9050919050565b600060208201905081810360008301526126fc81612397565b9050919050565b6000602082019050818103600083015261271c816123d7565b9050919050565b6000602082019050818103600083015261273c81612417565b9050919050565b6000602082019050818103600083015261275c81612457565b9050919050565b6000602082019050818103600083015261277c81612497565b9050919050565b6000602082019050818103600083015261279c816124fd565b9050919050565b600060208201905081810360008301526127bc8161253d565b9050919050565b600060208201905081810360008301526127dc8161257d565b9050919050565b60006020820190506127f860008301846125cc565b92915050565b600060208201905061281360008301846125db565b92915050565b6000819050602082019050919050565b6000819050919050565b600081519050919050565b600060029050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006128a6826128cb565b9050919050565b60008115159050919050565b60006128c48261289b565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b8381101561292f578082015181840152602081019050612914565b8381111561293e576000848401525b50505050565b6000601f19601f8301169050919050565b61295e8161289b565b811461296957600080fd5b50565b612975816128ad565b811461298057600080fd5b50565b61298c816128b9565b811461299757600080fd5b50565b6129a3816128eb565b81146129ae57600080fd5b50565b6129ba816128f5565b81146129c557600080fd5b5056fea26469706673582212205f3319d00f64651a3789394850cd01a8b125086e0bc8f96288b94cbcf266a73c64736f6c63430007060033"

// DeployParticipantsFacet deploys a new Ethereum contract, binding an instance of ParticipantsFacet to it.
func DeployParticipantsFacet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ParticipantsFacet, error) {
	parsed, err := abi.JSON(strings.NewReader(ParticipantsFacetABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ParticipantsFacetBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ParticipantsFacet{ParticipantsFacetCaller: ParticipantsFacetCaller{contract: contract}, ParticipantsFacetTransactor: ParticipantsFacetTransactor{contract: contract}, ParticipantsFacetFilterer: ParticipantsFacetFilterer{contract: contract}}, nil
}

// ParticipantsFacet is an auto generated Go binding around an Ethereum contract.
type ParticipantsFacet struct {
	ParticipantsFacetCaller     // Read-only binding to the contract
	ParticipantsFacetTransactor // Write-only binding to the contract
	ParticipantsFacetFilterer   // Log filterer for contract events
}

// ParticipantsFacetCaller is an auto generated read-only Go binding around an Ethereum contract.
type ParticipantsFacetCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ParticipantsFacetTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ParticipantsFacetTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ParticipantsFacetFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ParticipantsFacetFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ParticipantsFacetSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ParticipantsFacetSession struct {
	Contract     *ParticipantsFacet // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// ParticipantsFacetCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ParticipantsFacetCallerSession struct {
	Contract *ParticipantsFacetCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// ParticipantsFacetTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ParticipantsFacetTransactorSession struct {
	Contract     *ParticipantsFacetTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// ParticipantsFacetRaw is an auto generated low-level Go binding around an Ethereum contract.
type ParticipantsFacetRaw struct {
	Contract *ParticipantsFacet // Generic contract binding to access the raw methods on
}

// ParticipantsFacetCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ParticipantsFacetCallerRaw struct {
	Contract *ParticipantsFacetCaller // Generic read-only contract binding to access the raw methods on
}

// ParticipantsFacetTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ParticipantsFacetTransactorRaw struct {
	Contract *ParticipantsFacetTransactor // Generic write-only contract binding to access the raw methods on
}

// NewParticipantsFacet creates a new instance of ParticipantsFacet, bound to a specific deployed contract.
func NewParticipantsFacet(address common.Address, backend bind.ContractBackend) (*ParticipantsFacet, error) {
	contract, err := bindParticipantsFacet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ParticipantsFacet{ParticipantsFacetCaller: ParticipantsFacetCaller{contract: contract}, ParticipantsFacetTransactor: ParticipantsFacetTransactor{contract: contract}, ParticipantsFacetFilterer: ParticipantsFacetFilterer{contract: contract}}, nil
}

// NewParticipantsFacetCaller creates a new read-only instance of ParticipantsFacet, bound to a specific deployed contract.
func NewParticipantsFacetCaller(address common.Address, caller bind.ContractCaller) (*ParticipantsFacetCaller, error) {
	contract, err := bindParticipantsFacet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ParticipantsFacetCaller{contract: contract}, nil
}

// NewParticipantsFacetTransactor creates a new write-only instance of ParticipantsFacet, bound to a specific deployed contract.
func NewParticipantsFacetTransactor(address common.Address, transactor bind.ContractTransactor) (*ParticipantsFacetTransactor, error) {
	contract, err := bindParticipantsFacet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ParticipantsFacetTransactor{contract: contract}, nil
}

// NewParticipantsFacetFilterer creates a new log filterer instance of ParticipantsFacet, bound to a specific deployed contract.
func NewParticipantsFacetFilterer(address common.Address, filterer bind.ContractFilterer) (*ParticipantsFacetFilterer, error) {
	contract, err := bindParticipantsFacet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ParticipantsFacetFilterer{contract: contract}, nil
}

// bindParticipantsFacet binds a generic wrapper to an already deployed contract.
func bindParticipantsFacet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ParticipantsFacetABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ParticipantsFacet *ParticipantsFacetRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ParticipantsFacet.Contract.ParticipantsFacetCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ParticipantsFacet *ParticipantsFacetRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.ParticipantsFacetTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ParticipantsFacet *ParticipantsFacetRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.ParticipantsFacetTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ParticipantsFacet *ParticipantsFacetCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ParticipantsFacet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ParticipantsFacet *ParticipantsFacetTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ParticipantsFacet *ParticipantsFacetTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.contract.Transact(opts, method, params...)
}

// GetValidatorPublicKey is a free data retrieval call binding the contract method 0x4e6f4a22.
//
// Solidity: function getValidatorPublicKey(address _validator) view returns(uint256[2])
func (_ParticipantsFacet *ParticipantsFacetCaller) GetValidatorPublicKey(opts *bind.CallOpts, _validator common.Address) ([2]*big.Int, error) {
	var (
		ret0 = new([2]*big.Int)
	)
	out := ret0
	err := _ParticipantsFacet.contract.Call(opts, out, "getValidatorPublicKey", _validator)
	return *ret0, err
}

// GetValidatorPublicKey is a free data retrieval call binding the contract method 0x4e6f4a22.
//
// Solidity: function getValidatorPublicKey(address _validator) view returns(uint256[2])
func (_ParticipantsFacet *ParticipantsFacetSession) GetValidatorPublicKey(_validator common.Address) ([2]*big.Int, error) {
	return _ParticipantsFacet.Contract.GetValidatorPublicKey(&_ParticipantsFacet.CallOpts, _validator)
}

// GetValidatorPublicKey is a free data retrieval call binding the contract method 0x4e6f4a22.
//
// Solidity: function getValidatorPublicKey(address _validator) view returns(uint256[2])
func (_ParticipantsFacet *ParticipantsFacetCallerSession) GetValidatorPublicKey(_validator common.Address) ([2]*big.Int, error) {
	return _ParticipantsFacet.Contract.GetValidatorPublicKey(&_ParticipantsFacet.CallOpts, _validator)
}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_ParticipantsFacet *ParticipantsFacetCaller) GetValidators(opts *bind.CallOpts) ([]common.Address, error) {
	var (
		ret0 = new([]common.Address)
	)
	out := ret0
	err := _ParticipantsFacet.contract.Call(opts, out, "getValidators")
	return *ret0, err
}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_ParticipantsFacet *ParticipantsFacetSession) GetValidators() ([]common.Address, error) {
	return _ParticipantsFacet.Contract.GetValidators(&_ParticipantsFacet.CallOpts)
}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_ParticipantsFacet *ParticipantsFacetCallerSession) GetValidators() ([]common.Address, error) {
	return _ParticipantsFacet.Contract.GetValidators(&_ParticipantsFacet.CallOpts)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_ParticipantsFacet *ParticipantsFacetCaller) IsValidator(opts *bind.CallOpts, validator common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ParticipantsFacet.contract.Call(opts, out, "isValidator", validator)
	return *ret0, err
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_ParticipantsFacet *ParticipantsFacetSession) IsValidator(validator common.Address) (bool, error) {
	return _ParticipantsFacet.Contract.IsValidator(&_ParticipantsFacet.CallOpts, validator)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_ParticipantsFacet *ParticipantsFacetCallerSession) IsValidator(validator common.Address) (bool, error) {
	return _ParticipantsFacet.Contract.IsValidator(&_ParticipantsFacet.CallOpts, validator)
}

// AddValidator is a paid mutator transaction binding the contract method 0xeb6320c7.
//
// Solidity: function addValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_ParticipantsFacet *ParticipantsFacetTransactor) AddValidator(opts *bind.TransactOpts, _validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _ParticipantsFacet.contract.Transact(opts, "addValidator", _validator, _madID)
}

// AddValidator is a paid mutator transaction binding the contract method 0xeb6320c7.
//
// Solidity: function addValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_ParticipantsFacet *ParticipantsFacetSession) AddValidator(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.AddValidator(&_ParticipantsFacet.TransactOpts, _validator, _madID)
}

// AddValidator is a paid mutator transaction binding the contract method 0xeb6320c7.
//
// Solidity: function addValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_ParticipantsFacet *ParticipantsFacetTransactorSession) AddValidator(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.AddValidator(&_ParticipantsFacet.TransactOpts, _validator, _madID)
}

// ConfirmValidators is a paid mutator transaction binding the contract method 0x35c6a163.
//
// Solidity: function confirmValidators() returns(bool)
func (_ParticipantsFacet *ParticipantsFacetTransactor) ConfirmValidators(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ParticipantsFacet.contract.Transact(opts, "confirmValidators")
}

// ConfirmValidators is a paid mutator transaction binding the contract method 0x35c6a163.
//
// Solidity: function confirmValidators() returns(bool)
func (_ParticipantsFacet *ParticipantsFacetSession) ConfirmValidators() (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.ConfirmValidators(&_ParticipantsFacet.TransactOpts)
}

// ConfirmValidators is a paid mutator transaction binding the contract method 0x35c6a163.
//
// Solidity: function confirmValidators() returns(bool)
func (_ParticipantsFacet *ParticipantsFacetTransactorSession) ConfirmValidators() (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.ConfirmValidators(&_ParticipantsFacet.TransactOpts)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_ParticipantsFacet *ParticipantsFacetTransactor) GrantOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.contract.Transact(opts, "grantOperator", who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_ParticipantsFacet *ParticipantsFacetSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.GrantOperator(&_ParticipantsFacet.TransactOpts, who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_ParticipantsFacet *ParticipantsFacetTransactorSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.GrantOperator(&_ParticipantsFacet.TransactOpts, who)
}

// InitializeParticipants is a paid mutator transaction binding the contract method 0xee8420dd.
//
// Solidity: function initializeParticipants(address registry) returns()
func (_ParticipantsFacet *ParticipantsFacetTransactor) InitializeParticipants(opts *bind.TransactOpts, registry common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.contract.Transact(opts, "initializeParticipants", registry)
}

// InitializeParticipants is a paid mutator transaction binding the contract method 0xee8420dd.
//
// Solidity: function initializeParticipants(address registry) returns()
func (_ParticipantsFacet *ParticipantsFacetSession) InitializeParticipants(registry common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.InitializeParticipants(&_ParticipantsFacet.TransactOpts, registry)
}

// InitializeParticipants is a paid mutator transaction binding the contract method 0xee8420dd.
//
// Solidity: function initializeParticipants(address registry) returns()
func (_ParticipantsFacet *ParticipantsFacetTransactorSession) InitializeParticipants(registry common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.InitializeParticipants(&_ParticipantsFacet.TransactOpts, registry)
}

// MinimumStake is a paid mutator transaction binding the contract method 0xec5ffac2.
//
// Solidity: function minimumStake() returns(uint256)
func (_ParticipantsFacet *ParticipantsFacetTransactor) MinimumStake(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ParticipantsFacet.contract.Transact(opts, "minimumStake")
}

// MinimumStake is a paid mutator transaction binding the contract method 0xec5ffac2.
//
// Solidity: function minimumStake() returns(uint256)
func (_ParticipantsFacet *ParticipantsFacetSession) MinimumStake() (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.MinimumStake(&_ParticipantsFacet.TransactOpts)
}

// MinimumStake is a paid mutator transaction binding the contract method 0xec5ffac2.
//
// Solidity: function minimumStake() returns(uint256)
func (_ParticipantsFacet *ParticipantsFacetTransactorSession) MinimumStake() (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.MinimumStake(&_ParticipantsFacet.TransactOpts)
}

// QueueValidator is a paid mutator transaction binding the contract method 0x81d3cb14.
//
// Solidity: function queueValidator(address _validator, uint256[2] _madID) returns(uint256)
func (_ParticipantsFacet *ParticipantsFacetTransactor) QueueValidator(opts *bind.TransactOpts, _validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _ParticipantsFacet.contract.Transact(opts, "queueValidator", _validator, _madID)
}

// QueueValidator is a paid mutator transaction binding the contract method 0x81d3cb14.
//
// Solidity: function queueValidator(address _validator, uint256[2] _madID) returns(uint256)
func (_ParticipantsFacet *ParticipantsFacetSession) QueueValidator(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.QueueValidator(&_ParticipantsFacet.TransactOpts, _validator, _madID)
}

// QueueValidator is a paid mutator transaction binding the contract method 0x81d3cb14.
//
// Solidity: function queueValidator(address _validator, uint256[2] _madID) returns(uint256)
func (_ParticipantsFacet *ParticipantsFacetTransactorSession) QueueValidator(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.QueueValidator(&_ParticipantsFacet.TransactOpts, _validator, _madID)
}

// RemoveValidator is a paid mutator transaction binding the contract method 0x844469b2.
//
// Solidity: function removeValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_ParticipantsFacet *ParticipantsFacetTransactor) RemoveValidator(opts *bind.TransactOpts, _validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _ParticipantsFacet.contract.Transact(opts, "removeValidator", _validator, _madID)
}

// RemoveValidator is a paid mutator transaction binding the contract method 0x844469b2.
//
// Solidity: function removeValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_ParticipantsFacet *ParticipantsFacetSession) RemoveValidator(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.RemoveValidator(&_ParticipantsFacet.TransactOpts, _validator, _madID)
}

// RemoveValidator is a paid mutator transaction binding the contract method 0x844469b2.
//
// Solidity: function removeValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_ParticipantsFacet *ParticipantsFacetTransactorSession) RemoveValidator(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.RemoveValidator(&_ParticipantsFacet.TransactOpts, _validator, _madID)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_ParticipantsFacet *ParticipantsFacetTransactor) RevokeOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.contract.Transact(opts, "revokeOperator", who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_ParticipantsFacet *ParticipantsFacetSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.RevokeOperator(&_ParticipantsFacet.TransactOpts, who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_ParticipantsFacet *ParticipantsFacetTransactorSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.RevokeOperator(&_ParticipantsFacet.TransactOpts, who)
}

// SetMinimumStake is a paid mutator transaction binding the contract method 0x233e9903.
//
// Solidity: function setMinimumStake(uint256 ms) returns()
func (_ParticipantsFacet *ParticipantsFacetTransactor) SetMinimumStake(opts *bind.TransactOpts, ms *big.Int) (*types.Transaction, error) {
	return _ParticipantsFacet.contract.Transact(opts, "setMinimumStake", ms)
}

// SetMinimumStake is a paid mutator transaction binding the contract method 0x233e9903.
//
// Solidity: function setMinimumStake(uint256 ms) returns()
func (_ParticipantsFacet *ParticipantsFacetSession) SetMinimumStake(ms *big.Int) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.SetMinimumStake(&_ParticipantsFacet.TransactOpts, ms)
}

// SetMinimumStake is a paid mutator transaction binding the contract method 0x233e9903.
//
// Solidity: function setMinimumStake(uint256 ms) returns()
func (_ParticipantsFacet *ParticipantsFacetTransactorSession) SetMinimumStake(ms *big.Int) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.SetMinimumStake(&_ParticipantsFacet.TransactOpts, ms)
}

// SetValidatorMaxCount is a paid mutator transaction binding the contract method 0x2cab37f7.
//
// Solidity: function setValidatorMaxCount(uint8 max) returns()
func (_ParticipantsFacet *ParticipantsFacetTransactor) SetValidatorMaxCount(opts *bind.TransactOpts, max uint8) (*types.Transaction, error) {
	return _ParticipantsFacet.contract.Transact(opts, "setValidatorMaxCount", max)
}

// SetValidatorMaxCount is a paid mutator transaction binding the contract method 0x2cab37f7.
//
// Solidity: function setValidatorMaxCount(uint8 max) returns()
func (_ParticipantsFacet *ParticipantsFacetSession) SetValidatorMaxCount(max uint8) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.SetValidatorMaxCount(&_ParticipantsFacet.TransactOpts, max)
}

// SetValidatorMaxCount is a paid mutator transaction binding the contract method 0x2cab37f7.
//
// Solidity: function setValidatorMaxCount(uint8 max) returns()
func (_ParticipantsFacet *ParticipantsFacetTransactorSession) SetValidatorMaxCount(max uint8) (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.SetValidatorMaxCount(&_ParticipantsFacet.TransactOpts, max)
}

// ValidatorCount is a paid mutator transaction binding the contract method 0x0f43a677.
//
// Solidity: function validatorCount() returns(uint8)
func (_ParticipantsFacet *ParticipantsFacetTransactor) ValidatorCount(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ParticipantsFacet.contract.Transact(opts, "validatorCount")
}

// ValidatorCount is a paid mutator transaction binding the contract method 0x0f43a677.
//
// Solidity: function validatorCount() returns(uint8)
func (_ParticipantsFacet *ParticipantsFacetSession) ValidatorCount() (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.ValidatorCount(&_ParticipantsFacet.TransactOpts)
}

// ValidatorCount is a paid mutator transaction binding the contract method 0x0f43a677.
//
// Solidity: function validatorCount() returns(uint8)
func (_ParticipantsFacet *ParticipantsFacetTransactorSession) ValidatorCount() (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.ValidatorCount(&_ParticipantsFacet.TransactOpts)
}

// ValidatorMaxCount is a paid mutator transaction binding the contract method 0x09f0d45d.
//
// Solidity: function validatorMaxCount() returns(uint8)
func (_ParticipantsFacet *ParticipantsFacetTransactor) ValidatorMaxCount(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ParticipantsFacet.contract.Transact(opts, "validatorMaxCount")
}

// ValidatorMaxCount is a paid mutator transaction binding the contract method 0x09f0d45d.
//
// Solidity: function validatorMaxCount() returns(uint8)
func (_ParticipantsFacet *ParticipantsFacetSession) ValidatorMaxCount() (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.ValidatorMaxCount(&_ParticipantsFacet.TransactOpts)
}

// ValidatorMaxCount is a paid mutator transaction binding the contract method 0x09f0d45d.
//
// Solidity: function validatorMaxCount() returns(uint8)
func (_ParticipantsFacet *ParticipantsFacetTransactorSession) ValidatorMaxCount() (*types.Transaction, error) {
	return _ParticipantsFacet.Contract.ValidatorMaxCount(&_ParticipantsFacet.TransactOpts)
}

// ParticipantsFacetValidatorCreatedIterator is returned from FilterValidatorCreated and is used to iterate over the raw logs and unpacked data for ValidatorCreated events raised by the ParticipantsFacet contract.
type ParticipantsFacetValidatorCreatedIterator struct {
	Event *ParticipantsFacetValidatorCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsFacetValidatorCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsFacetValidatorCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsFacetValidatorCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsFacetValidatorCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsFacetValidatorCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsFacetValidatorCreated represents a ValidatorCreated event raised by the ParticipantsFacet contract.
type ParticipantsFacetValidatorCreated struct {
	Validator common.Address
	Signer    common.Address
	MadID     [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorCreated is a free log retrieval operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_ParticipantsFacet *ParticipantsFacetFilterer) FilterValidatorCreated(opts *bind.FilterOpts, validator []common.Address, signer []common.Address) (*ParticipantsFacetValidatorCreatedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var signerRule []interface{}
	for _, signerItem := range signer {
		signerRule = append(signerRule, signerItem)
	}

	logs, sub, err := _ParticipantsFacet.contract.FilterLogs(opts, "ValidatorCreated", validatorRule, signerRule)
	if err != nil {
		return nil, err
	}
	return &ParticipantsFacetValidatorCreatedIterator{contract: _ParticipantsFacet.contract, event: "ValidatorCreated", logs: logs, sub: sub}, nil
}

// WatchValidatorCreated is a free log subscription operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_ParticipantsFacet *ParticipantsFacetFilterer) WatchValidatorCreated(opts *bind.WatchOpts, sink chan<- *ParticipantsFacetValidatorCreated, validator []common.Address, signer []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var signerRule []interface{}
	for _, signerItem := range signer {
		signerRule = append(signerRule, signerItem)
	}

	logs, sub, err := _ParticipantsFacet.contract.WatchLogs(opts, "ValidatorCreated", validatorRule, signerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsFacetValidatorCreated)
				if err := _ParticipantsFacet.contract.UnpackLog(event, "ValidatorCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorCreated is a log parse operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_ParticipantsFacet *ParticipantsFacetFilterer) ParseValidatorCreated(log types.Log) (*ParticipantsFacetValidatorCreated, error) {
	event := new(ParticipantsFacetValidatorCreated)
	if err := _ParticipantsFacet.contract.UnpackLog(event, "ValidatorCreated", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ParticipantsFacetValidatorJoinedIterator is returned from FilterValidatorJoined and is used to iterate over the raw logs and unpacked data for ValidatorJoined events raised by the ParticipantsFacet contract.
type ParticipantsFacetValidatorJoinedIterator struct {
	Event *ParticipantsFacetValidatorJoined // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsFacetValidatorJoinedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsFacetValidatorJoined)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsFacetValidatorJoined)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsFacetValidatorJoinedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsFacetValidatorJoinedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsFacetValidatorJoined represents a ValidatorJoined event raised by the ParticipantsFacet contract.
type ParticipantsFacetValidatorJoined struct {
	Validator common.Address
	MadID     [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorJoined is a free log retrieval operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_ParticipantsFacet *ParticipantsFacetFilterer) FilterValidatorJoined(opts *bind.FilterOpts, validator []common.Address) (*ParticipantsFacetValidatorJoinedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsFacet.contract.FilterLogs(opts, "ValidatorJoined", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ParticipantsFacetValidatorJoinedIterator{contract: _ParticipantsFacet.contract, event: "ValidatorJoined", logs: logs, sub: sub}, nil
}

// WatchValidatorJoined is a free log subscription operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_ParticipantsFacet *ParticipantsFacetFilterer) WatchValidatorJoined(opts *bind.WatchOpts, sink chan<- *ParticipantsFacetValidatorJoined, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsFacet.contract.WatchLogs(opts, "ValidatorJoined", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsFacetValidatorJoined)
				if err := _ParticipantsFacet.contract.UnpackLog(event, "ValidatorJoined", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorJoined is a log parse operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_ParticipantsFacet *ParticipantsFacetFilterer) ParseValidatorJoined(log types.Log) (*ParticipantsFacetValidatorJoined, error) {
	event := new(ParticipantsFacetValidatorJoined)
	if err := _ParticipantsFacet.contract.UnpackLog(event, "ValidatorJoined", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ParticipantsFacetValidatorLeftIterator is returned from FilterValidatorLeft and is used to iterate over the raw logs and unpacked data for ValidatorLeft events raised by the ParticipantsFacet contract.
type ParticipantsFacetValidatorLeftIterator struct {
	Event *ParticipantsFacetValidatorLeft // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsFacetValidatorLeftIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsFacetValidatorLeft)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsFacetValidatorLeft)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsFacetValidatorLeftIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsFacetValidatorLeftIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsFacetValidatorLeft represents a ValidatorLeft event raised by the ParticipantsFacet contract.
type ParticipantsFacetValidatorLeft struct {
	Validator common.Address
	PkHash    [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorLeft is a free log retrieval operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_ParticipantsFacet *ParticipantsFacetFilterer) FilterValidatorLeft(opts *bind.FilterOpts, validator []common.Address) (*ParticipantsFacetValidatorLeftIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsFacet.contract.FilterLogs(opts, "ValidatorLeft", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ParticipantsFacetValidatorLeftIterator{contract: _ParticipantsFacet.contract, event: "ValidatorLeft", logs: logs, sub: sub}, nil
}

// WatchValidatorLeft is a free log subscription operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_ParticipantsFacet *ParticipantsFacetFilterer) WatchValidatorLeft(opts *bind.WatchOpts, sink chan<- *ParticipantsFacetValidatorLeft, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsFacet.contract.WatchLogs(opts, "ValidatorLeft", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsFacetValidatorLeft)
				if err := _ParticipantsFacet.contract.UnpackLog(event, "ValidatorLeft", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorLeft is a log parse operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_ParticipantsFacet *ParticipantsFacetFilterer) ParseValidatorLeft(log types.Log) (*ParticipantsFacetValidatorLeft, error) {
	event := new(ParticipantsFacetValidatorLeft)
	if err := _ParticipantsFacet.contract.UnpackLog(event, "ValidatorLeft", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ParticipantsFacetValidatorQueuedIterator is returned from FilterValidatorQueued and is used to iterate over the raw logs and unpacked data for ValidatorQueued events raised by the ParticipantsFacet contract.
type ParticipantsFacetValidatorQueuedIterator struct {
	Event *ParticipantsFacetValidatorQueued // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsFacetValidatorQueuedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsFacetValidatorQueued)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsFacetValidatorQueued)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsFacetValidatorQueuedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsFacetValidatorQueuedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsFacetValidatorQueued represents a ValidatorQueued event raised by the ParticipantsFacet contract.
type ParticipantsFacetValidatorQueued struct {
	Validator common.Address
	PkHash    [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorQueued is a free log retrieval operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_ParticipantsFacet *ParticipantsFacetFilterer) FilterValidatorQueued(opts *bind.FilterOpts, validator []common.Address) (*ParticipantsFacetValidatorQueuedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsFacet.contract.FilterLogs(opts, "ValidatorQueued", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ParticipantsFacetValidatorQueuedIterator{contract: _ParticipantsFacet.contract, event: "ValidatorQueued", logs: logs, sub: sub}, nil
}

// WatchValidatorQueued is a free log subscription operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_ParticipantsFacet *ParticipantsFacetFilterer) WatchValidatorQueued(opts *bind.WatchOpts, sink chan<- *ParticipantsFacetValidatorQueued, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ParticipantsFacet.contract.WatchLogs(opts, "ValidatorQueued", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsFacetValidatorQueued)
				if err := _ParticipantsFacet.contract.UnpackLog(event, "ValidatorQueued", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorQueued is a log parse operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_ParticipantsFacet *ParticipantsFacetFilterer) ParseValidatorQueued(log types.Log) (*ParticipantsFacetValidatorQueued, error) {
	event := new(ParticipantsFacetValidatorQueued)
	if err := _ParticipantsFacet.contract.UnpackLog(event, "ValidatorQueued", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ParticipantsFacetTestABI is the input ABI used to generate the binding from.
const ParticipantsFacetTestABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"log_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"log_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"log_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"name\":\"log_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"log_named_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\"}],\"name\":\"log_named_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\"}],\"name\":\"log_named_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"}],\"name\":\"log_named_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"}],\"name\":\"log_named_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"log_named_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"log_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"logs\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testAddValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testGetValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testIsValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testRemoveValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// ParticipantsFacetTestBin is the compiled bytecode used for deploying new contracts.
var ParticipantsFacetTestBin = ""

// DeployParticipantsFacetTest deploys a new Ethereum contract, binding an instance of ParticipantsFacetTest to it.
func DeployParticipantsFacetTest(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ParticipantsFacetTest, error) {
	parsed, err := abi.JSON(strings.NewReader(ParticipantsFacetTestABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ParticipantsFacetTestBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ParticipantsFacetTest{ParticipantsFacetTestCaller: ParticipantsFacetTestCaller{contract: contract}, ParticipantsFacetTestTransactor: ParticipantsFacetTestTransactor{contract: contract}, ParticipantsFacetTestFilterer: ParticipantsFacetTestFilterer{contract: contract}}, nil
}

// ParticipantsFacetTest is an auto generated Go binding around an Ethereum contract.
type ParticipantsFacetTest struct {
	ParticipantsFacetTestCaller     // Read-only binding to the contract
	ParticipantsFacetTestTransactor // Write-only binding to the contract
	ParticipantsFacetTestFilterer   // Log filterer for contract events
}

// ParticipantsFacetTestCaller is an auto generated read-only Go binding around an Ethereum contract.
type ParticipantsFacetTestCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ParticipantsFacetTestTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ParticipantsFacetTestTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ParticipantsFacetTestFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ParticipantsFacetTestFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ParticipantsFacetTestSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ParticipantsFacetTestSession struct {
	Contract     *ParticipantsFacetTest // Generic contract binding to set the session for
	CallOpts     bind.CallOpts          // Call options to use throughout this session
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// ParticipantsFacetTestCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ParticipantsFacetTestCallerSession struct {
	Contract *ParticipantsFacetTestCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                // Call options to use throughout this session
}

// ParticipantsFacetTestTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ParticipantsFacetTestTransactorSession struct {
	Contract     *ParticipantsFacetTestTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                // Transaction auth options to use throughout this session
}

// ParticipantsFacetTestRaw is an auto generated low-level Go binding around an Ethereum contract.
type ParticipantsFacetTestRaw struct {
	Contract *ParticipantsFacetTest // Generic contract binding to access the raw methods on
}

// ParticipantsFacetTestCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ParticipantsFacetTestCallerRaw struct {
	Contract *ParticipantsFacetTestCaller // Generic read-only contract binding to access the raw methods on
}

// ParticipantsFacetTestTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ParticipantsFacetTestTransactorRaw struct {
	Contract *ParticipantsFacetTestTransactor // Generic write-only contract binding to access the raw methods on
}

// NewParticipantsFacetTest creates a new instance of ParticipantsFacetTest, bound to a specific deployed contract.
func NewParticipantsFacetTest(address common.Address, backend bind.ContractBackend) (*ParticipantsFacetTest, error) {
	contract, err := bindParticipantsFacetTest(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ParticipantsFacetTest{ParticipantsFacetTestCaller: ParticipantsFacetTestCaller{contract: contract}, ParticipantsFacetTestTransactor: ParticipantsFacetTestTransactor{contract: contract}, ParticipantsFacetTestFilterer: ParticipantsFacetTestFilterer{contract: contract}}, nil
}

// NewParticipantsFacetTestCaller creates a new read-only instance of ParticipantsFacetTest, bound to a specific deployed contract.
func NewParticipantsFacetTestCaller(address common.Address, caller bind.ContractCaller) (*ParticipantsFacetTestCaller, error) {
	contract, err := bindParticipantsFacetTest(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ParticipantsFacetTestCaller{contract: contract}, nil
}

// NewParticipantsFacetTestTransactor creates a new write-only instance of ParticipantsFacetTest, bound to a specific deployed contract.
func NewParticipantsFacetTestTransactor(address common.Address, transactor bind.ContractTransactor) (*ParticipantsFacetTestTransactor, error) {
	contract, err := bindParticipantsFacetTest(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ParticipantsFacetTestTransactor{contract: contract}, nil
}

// NewParticipantsFacetTestFilterer creates a new log filterer instance of ParticipantsFacetTest, bound to a specific deployed contract.
func NewParticipantsFacetTestFilterer(address common.Address, filterer bind.ContractFilterer) (*ParticipantsFacetTestFilterer, error) {
	contract, err := bindParticipantsFacetTest(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ParticipantsFacetTestFilterer{contract: contract}, nil
}

// bindParticipantsFacetTest binds a generic wrapper to an already deployed contract.
func bindParticipantsFacetTest(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ParticipantsFacetTestABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ParticipantsFacetTest *ParticipantsFacetTestRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ParticipantsFacetTest.Contract.ParticipantsFacetTestCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ParticipantsFacetTest *ParticipantsFacetTestRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ParticipantsFacetTest.Contract.ParticipantsFacetTestTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ParticipantsFacetTest *ParticipantsFacetTestRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ParticipantsFacetTest.Contract.ParticipantsFacetTestTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ParticipantsFacetTest *ParticipantsFacetTestCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ParticipantsFacetTest.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ParticipantsFacetTest *ParticipantsFacetTestTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ParticipantsFacetTest.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ParticipantsFacetTest *ParticipantsFacetTestTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ParticipantsFacetTest.Contract.contract.Transact(opts, method, params...)
}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_ParticipantsFacetTest *ParticipantsFacetTestCaller) ISTEST(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ParticipantsFacetTest.contract.Call(opts, out, "IS_TEST")
	return *ret0, err
}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_ParticipantsFacetTest *ParticipantsFacetTestSession) ISTEST() (bool, error) {
	return _ParticipantsFacetTest.Contract.ISTEST(&_ParticipantsFacetTest.CallOpts)
}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_ParticipantsFacetTest *ParticipantsFacetTestCallerSession) ISTEST() (bool, error) {
	return _ParticipantsFacetTest.Contract.ISTEST(&_ParticipantsFacetTest.CallOpts)
}

// Failed is a free data retrieval call binding the contract method 0xba414fa6.
//
// Solidity: function failed() view returns(bool)
func (_ParticipantsFacetTest *ParticipantsFacetTestCaller) Failed(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ParticipantsFacetTest.contract.Call(opts, out, "failed")
	return *ret0, err
}

// Failed is a free data retrieval call binding the contract method 0xba414fa6.
//
// Solidity: function failed() view returns(bool)
func (_ParticipantsFacetTest *ParticipantsFacetTestSession) Failed() (bool, error) {
	return _ParticipantsFacetTest.Contract.Failed(&_ParticipantsFacetTest.CallOpts)
}

// Failed is a free data retrieval call binding the contract method 0xba414fa6.
//
// Solidity: function failed() view returns(bool)
func (_ParticipantsFacetTest *ParticipantsFacetTestCallerSession) Failed() (bool, error) {
	return _ParticipantsFacetTest.Contract.Failed(&_ParticipantsFacetTest.CallOpts)
}

// SetUp is a paid mutator transaction binding the contract method 0x0a9254e4.
//
// Solidity: function setUp() returns()
func (_ParticipantsFacetTest *ParticipantsFacetTestTransactor) SetUp(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ParticipantsFacetTest.contract.Transact(opts, "setUp")
}

// SetUp is a paid mutator transaction binding the contract method 0x0a9254e4.
//
// Solidity: function setUp() returns()
func (_ParticipantsFacetTest *ParticipantsFacetTestSession) SetUp() (*types.Transaction, error) {
	return _ParticipantsFacetTest.Contract.SetUp(&_ParticipantsFacetTest.TransactOpts)
}

// SetUp is a paid mutator transaction binding the contract method 0x0a9254e4.
//
// Solidity: function setUp() returns()
func (_ParticipantsFacetTest *ParticipantsFacetTestTransactorSession) SetUp() (*types.Transaction, error) {
	return _ParticipantsFacetTest.Contract.SetUp(&_ParticipantsFacetTest.TransactOpts)
}

// TestAddValidator is a paid mutator transaction binding the contract method 0x7cefb410.
//
// Solidity: function testAddValidator() returns()
func (_ParticipantsFacetTest *ParticipantsFacetTestTransactor) TestAddValidator(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ParticipantsFacetTest.contract.Transact(opts, "testAddValidator")
}

// TestAddValidator is a paid mutator transaction binding the contract method 0x7cefb410.
//
// Solidity: function testAddValidator() returns()
func (_ParticipantsFacetTest *ParticipantsFacetTestSession) TestAddValidator() (*types.Transaction, error) {
	return _ParticipantsFacetTest.Contract.TestAddValidator(&_ParticipantsFacetTest.TransactOpts)
}

// TestAddValidator is a paid mutator transaction binding the contract method 0x7cefb410.
//
// Solidity: function testAddValidator() returns()
func (_ParticipantsFacetTest *ParticipantsFacetTestTransactorSession) TestAddValidator() (*types.Transaction, error) {
	return _ParticipantsFacetTest.Contract.TestAddValidator(&_ParticipantsFacetTest.TransactOpts)
}

// TestGetValidators is a paid mutator transaction binding the contract method 0xeffa4167.
//
// Solidity: function testGetValidators() returns()
func (_ParticipantsFacetTest *ParticipantsFacetTestTransactor) TestGetValidators(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ParticipantsFacetTest.contract.Transact(opts, "testGetValidators")
}

// TestGetValidators is a paid mutator transaction binding the contract method 0xeffa4167.
//
// Solidity: function testGetValidators() returns()
func (_ParticipantsFacetTest *ParticipantsFacetTestSession) TestGetValidators() (*types.Transaction, error) {
	return _ParticipantsFacetTest.Contract.TestGetValidators(&_ParticipantsFacetTest.TransactOpts)
}

// TestGetValidators is a paid mutator transaction binding the contract method 0xeffa4167.
//
// Solidity: function testGetValidators() returns()
func (_ParticipantsFacetTest *ParticipantsFacetTestTransactorSession) TestGetValidators() (*types.Transaction, error) {
	return _ParticipantsFacetTest.Contract.TestGetValidators(&_ParticipantsFacetTest.TransactOpts)
}

// TestIsValidator is a paid mutator transaction binding the contract method 0x5478c1ae.
//
// Solidity: function testIsValidator() returns()
func (_ParticipantsFacetTest *ParticipantsFacetTestTransactor) TestIsValidator(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ParticipantsFacetTest.contract.Transact(opts, "testIsValidator")
}

// TestIsValidator is a paid mutator transaction binding the contract method 0x5478c1ae.
//
// Solidity: function testIsValidator() returns()
func (_ParticipantsFacetTest *ParticipantsFacetTestSession) TestIsValidator() (*types.Transaction, error) {
	return _ParticipantsFacetTest.Contract.TestIsValidator(&_ParticipantsFacetTest.TransactOpts)
}

// TestIsValidator is a paid mutator transaction binding the contract method 0x5478c1ae.
//
// Solidity: function testIsValidator() returns()
func (_ParticipantsFacetTest *ParticipantsFacetTestTransactorSession) TestIsValidator() (*types.Transaction, error) {
	return _ParticipantsFacetTest.Contract.TestIsValidator(&_ParticipantsFacetTest.TransactOpts)
}

// TestRemoveValidator is a paid mutator transaction binding the contract method 0x8da5c893.
//
// Solidity: function testRemoveValidator() returns()
func (_ParticipantsFacetTest *ParticipantsFacetTestTransactor) TestRemoveValidator(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ParticipantsFacetTest.contract.Transact(opts, "testRemoveValidator")
}

// TestRemoveValidator is a paid mutator transaction binding the contract method 0x8da5c893.
//
// Solidity: function testRemoveValidator() returns()
func (_ParticipantsFacetTest *ParticipantsFacetTestSession) TestRemoveValidator() (*types.Transaction, error) {
	return _ParticipantsFacetTest.Contract.TestRemoveValidator(&_ParticipantsFacetTest.TransactOpts)
}

// TestRemoveValidator is a paid mutator transaction binding the contract method 0x8da5c893.
//
// Solidity: function testRemoveValidator() returns()
func (_ParticipantsFacetTest *ParticipantsFacetTestTransactorSession) TestRemoveValidator() (*types.Transaction, error) {
	return _ParticipantsFacetTest.Contract.TestRemoveValidator(&_ParticipantsFacetTest.TransactOpts)
}

// ParticipantsFacetTestLogIterator is returned from FilterLog and is used to iterate over the raw logs and unpacked data for Log events raised by the ParticipantsFacetTest contract.
type ParticipantsFacetTestLogIterator struct {
	Event *ParticipantsFacetTestLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsFacetTestLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsFacetTestLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsFacetTestLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsFacetTestLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsFacetTestLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsFacetTestLog represents a Log event raised by the ParticipantsFacetTest contract.
type ParticipantsFacetTestLog struct {
	Arg0 string
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLog is a free log retrieval operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_ParticipantsFacetTest *ParticipantsFacetTestFilterer) FilterLog(opts *bind.FilterOpts) (*ParticipantsFacetTestLogIterator, error) {

	logs, sub, err := _ParticipantsFacetTest.contract.FilterLogs(opts, "log")
	if err != nil {
		return nil, err
	}
	return &ParticipantsFacetTestLogIterator{contract: _ParticipantsFacetTest.contract, event: "log", logs: logs, sub: sub}, nil
}

// WatchLog is a free log subscription operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_ParticipantsFacetTest *ParticipantsFacetTestFilterer) WatchLog(opts *bind.WatchOpts, sink chan<- *ParticipantsFacetTestLog) (event.Subscription, error) {

	logs, sub, err := _ParticipantsFacetTest.contract.WatchLogs(opts, "log")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsFacetTestLog)
				if err := _ParticipantsFacetTest.contract.UnpackLog(event, "log", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLog is a log parse operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_ParticipantsFacetTest *ParticipantsFacetTestFilterer) ParseLog(log types.Log) (*ParticipantsFacetTestLog, error) {
	event := new(ParticipantsFacetTestLog)
	if err := _ParticipantsFacetTest.contract.UnpackLog(event, "log", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ParticipantsFacetTestLogAddressIterator is returned from FilterLogAddress and is used to iterate over the raw logs and unpacked data for LogAddress events raised by the ParticipantsFacetTest contract.
type ParticipantsFacetTestLogAddressIterator struct {
	Event *ParticipantsFacetTestLogAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsFacetTestLogAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsFacetTestLogAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsFacetTestLogAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsFacetTestLogAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsFacetTestLogAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsFacetTestLogAddress represents a LogAddress event raised by the ParticipantsFacetTest contract.
type ParticipantsFacetTestLogAddress struct {
	Arg0 common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogAddress is a free log retrieval operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_ParticipantsFacetTest *ParticipantsFacetTestFilterer) FilterLogAddress(opts *bind.FilterOpts) (*ParticipantsFacetTestLogAddressIterator, error) {

	logs, sub, err := _ParticipantsFacetTest.contract.FilterLogs(opts, "log_address")
	if err != nil {
		return nil, err
	}
	return &ParticipantsFacetTestLogAddressIterator{contract: _ParticipantsFacetTest.contract, event: "log_address", logs: logs, sub: sub}, nil
}

// WatchLogAddress is a free log subscription operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_ParticipantsFacetTest *ParticipantsFacetTestFilterer) WatchLogAddress(opts *bind.WatchOpts, sink chan<- *ParticipantsFacetTestLogAddress) (event.Subscription, error) {

	logs, sub, err := _ParticipantsFacetTest.contract.WatchLogs(opts, "log_address")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsFacetTestLogAddress)
				if err := _ParticipantsFacetTest.contract.UnpackLog(event, "log_address", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogAddress is a log parse operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_ParticipantsFacetTest *ParticipantsFacetTestFilterer) ParseLogAddress(log types.Log) (*ParticipantsFacetTestLogAddress, error) {
	event := new(ParticipantsFacetTestLogAddress)
	if err := _ParticipantsFacetTest.contract.UnpackLog(event, "log_address", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ParticipantsFacetTestLogBytesIterator is returned from FilterLogBytes and is used to iterate over the raw logs and unpacked data for LogBytes events raised by the ParticipantsFacetTest contract.
type ParticipantsFacetTestLogBytesIterator struct {
	Event *ParticipantsFacetTestLogBytes // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsFacetTestLogBytesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsFacetTestLogBytes)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsFacetTestLogBytes)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsFacetTestLogBytesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsFacetTestLogBytesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsFacetTestLogBytes represents a LogBytes event raised by the ParticipantsFacetTest contract.
type ParticipantsFacetTestLogBytes struct {
	Arg0 []byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogBytes is a free log retrieval operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_ParticipantsFacetTest *ParticipantsFacetTestFilterer) FilterLogBytes(opts *bind.FilterOpts) (*ParticipantsFacetTestLogBytesIterator, error) {

	logs, sub, err := _ParticipantsFacetTest.contract.FilterLogs(opts, "log_bytes")
	if err != nil {
		return nil, err
	}
	return &ParticipantsFacetTestLogBytesIterator{contract: _ParticipantsFacetTest.contract, event: "log_bytes", logs: logs, sub: sub}, nil
}

// WatchLogBytes is a free log subscription operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_ParticipantsFacetTest *ParticipantsFacetTestFilterer) WatchLogBytes(opts *bind.WatchOpts, sink chan<- *ParticipantsFacetTestLogBytes) (event.Subscription, error) {

	logs, sub, err := _ParticipantsFacetTest.contract.WatchLogs(opts, "log_bytes")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsFacetTestLogBytes)
				if err := _ParticipantsFacetTest.contract.UnpackLog(event, "log_bytes", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes is a log parse operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_ParticipantsFacetTest *ParticipantsFacetTestFilterer) ParseLogBytes(log types.Log) (*ParticipantsFacetTestLogBytes, error) {
	event := new(ParticipantsFacetTestLogBytes)
	if err := _ParticipantsFacetTest.contract.UnpackLog(event, "log_bytes", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ParticipantsFacetTestLogBytes32Iterator is returned from FilterLogBytes32 and is used to iterate over the raw logs and unpacked data for LogBytes32 events raised by the ParticipantsFacetTest contract.
type ParticipantsFacetTestLogBytes32Iterator struct {
	Event *ParticipantsFacetTestLogBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsFacetTestLogBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsFacetTestLogBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsFacetTestLogBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsFacetTestLogBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsFacetTestLogBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsFacetTestLogBytes32 represents a LogBytes32 event raised by the ParticipantsFacetTest contract.
type ParticipantsFacetTestLogBytes32 struct {
	Arg0 [32]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogBytes32 is a free log retrieval operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_ParticipantsFacetTest *ParticipantsFacetTestFilterer) FilterLogBytes32(opts *bind.FilterOpts) (*ParticipantsFacetTestLogBytes32Iterator, error) {

	logs, sub, err := _ParticipantsFacetTest.contract.FilterLogs(opts, "log_bytes32")
	if err != nil {
		return nil, err
	}
	return &ParticipantsFacetTestLogBytes32Iterator{contract: _ParticipantsFacetTest.contract, event: "log_bytes32", logs: logs, sub: sub}, nil
}

// WatchLogBytes32 is a free log subscription operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_ParticipantsFacetTest *ParticipantsFacetTestFilterer) WatchLogBytes32(opts *bind.WatchOpts, sink chan<- *ParticipantsFacetTestLogBytes32) (event.Subscription, error) {

	logs, sub, err := _ParticipantsFacetTest.contract.WatchLogs(opts, "log_bytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsFacetTestLogBytes32)
				if err := _ParticipantsFacetTest.contract.UnpackLog(event, "log_bytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes32 is a log parse operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_ParticipantsFacetTest *ParticipantsFacetTestFilterer) ParseLogBytes32(log types.Log) (*ParticipantsFacetTestLogBytes32, error) {
	event := new(ParticipantsFacetTestLogBytes32)
	if err := _ParticipantsFacetTest.contract.UnpackLog(event, "log_bytes32", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ParticipantsFacetTestLogIntIterator is returned from FilterLogInt and is used to iterate over the raw logs and unpacked data for LogInt events raised by the ParticipantsFacetTest contract.
type ParticipantsFacetTestLogIntIterator struct {
	Event *ParticipantsFacetTestLogInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsFacetTestLogIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsFacetTestLogInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsFacetTestLogInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsFacetTestLogIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsFacetTestLogIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsFacetTestLogInt represents a LogInt event raised by the ParticipantsFacetTest contract.
type ParticipantsFacetTestLogInt struct {
	Arg0 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogInt is a free log retrieval operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_ParticipantsFacetTest *ParticipantsFacetTestFilterer) FilterLogInt(opts *bind.FilterOpts) (*ParticipantsFacetTestLogIntIterator, error) {

	logs, sub, err := _ParticipantsFacetTest.contract.FilterLogs(opts, "log_int")
	if err != nil {
		return nil, err
	}
	return &ParticipantsFacetTestLogIntIterator{contract: _ParticipantsFacetTest.contract, event: "log_int", logs: logs, sub: sub}, nil
}

// WatchLogInt is a free log subscription operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_ParticipantsFacetTest *ParticipantsFacetTestFilterer) WatchLogInt(opts *bind.WatchOpts, sink chan<- *ParticipantsFacetTestLogInt) (event.Subscription, error) {

	logs, sub, err := _ParticipantsFacetTest.contract.WatchLogs(opts, "log_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsFacetTestLogInt)
				if err := _ParticipantsFacetTest.contract.UnpackLog(event, "log_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogInt is a log parse operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_ParticipantsFacetTest *ParticipantsFacetTestFilterer) ParseLogInt(log types.Log) (*ParticipantsFacetTestLogInt, error) {
	event := new(ParticipantsFacetTestLogInt)
	if err := _ParticipantsFacetTest.contract.UnpackLog(event, "log_int", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ParticipantsFacetTestLogNamedAddressIterator is returned from FilterLogNamedAddress and is used to iterate over the raw logs and unpacked data for LogNamedAddress events raised by the ParticipantsFacetTest contract.
type ParticipantsFacetTestLogNamedAddressIterator struct {
	Event *ParticipantsFacetTestLogNamedAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsFacetTestLogNamedAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsFacetTestLogNamedAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsFacetTestLogNamedAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsFacetTestLogNamedAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsFacetTestLogNamedAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsFacetTestLogNamedAddress represents a LogNamedAddress event raised by the ParticipantsFacetTest contract.
type ParticipantsFacetTestLogNamedAddress struct {
	Key string
	Val common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedAddress is a free log retrieval operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_ParticipantsFacetTest *ParticipantsFacetTestFilterer) FilterLogNamedAddress(opts *bind.FilterOpts) (*ParticipantsFacetTestLogNamedAddressIterator, error) {

	logs, sub, err := _ParticipantsFacetTest.contract.FilterLogs(opts, "log_named_address")
	if err != nil {
		return nil, err
	}
	return &ParticipantsFacetTestLogNamedAddressIterator{contract: _ParticipantsFacetTest.contract, event: "log_named_address", logs: logs, sub: sub}, nil
}

// WatchLogNamedAddress is a free log subscription operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_ParticipantsFacetTest *ParticipantsFacetTestFilterer) WatchLogNamedAddress(opts *bind.WatchOpts, sink chan<- *ParticipantsFacetTestLogNamedAddress) (event.Subscription, error) {

	logs, sub, err := _ParticipantsFacetTest.contract.WatchLogs(opts, "log_named_address")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsFacetTestLogNamedAddress)
				if err := _ParticipantsFacetTest.contract.UnpackLog(event, "log_named_address", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedAddress is a log parse operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_ParticipantsFacetTest *ParticipantsFacetTestFilterer) ParseLogNamedAddress(log types.Log) (*ParticipantsFacetTestLogNamedAddress, error) {
	event := new(ParticipantsFacetTestLogNamedAddress)
	if err := _ParticipantsFacetTest.contract.UnpackLog(event, "log_named_address", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ParticipantsFacetTestLogNamedBytesIterator is returned from FilterLogNamedBytes and is used to iterate over the raw logs and unpacked data for LogNamedBytes events raised by the ParticipantsFacetTest contract.
type ParticipantsFacetTestLogNamedBytesIterator struct {
	Event *ParticipantsFacetTestLogNamedBytes // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsFacetTestLogNamedBytesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsFacetTestLogNamedBytes)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsFacetTestLogNamedBytes)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsFacetTestLogNamedBytesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsFacetTestLogNamedBytesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsFacetTestLogNamedBytes represents a LogNamedBytes event raised by the ParticipantsFacetTest contract.
type ParticipantsFacetTestLogNamedBytes struct {
	Key string
	Val []byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedBytes is a free log retrieval operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_ParticipantsFacetTest *ParticipantsFacetTestFilterer) FilterLogNamedBytes(opts *bind.FilterOpts) (*ParticipantsFacetTestLogNamedBytesIterator, error) {

	logs, sub, err := _ParticipantsFacetTest.contract.FilterLogs(opts, "log_named_bytes")
	if err != nil {
		return nil, err
	}
	return &ParticipantsFacetTestLogNamedBytesIterator{contract: _ParticipantsFacetTest.contract, event: "log_named_bytes", logs: logs, sub: sub}, nil
}

// WatchLogNamedBytes is a free log subscription operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_ParticipantsFacetTest *ParticipantsFacetTestFilterer) WatchLogNamedBytes(opts *bind.WatchOpts, sink chan<- *ParticipantsFacetTestLogNamedBytes) (event.Subscription, error) {

	logs, sub, err := _ParticipantsFacetTest.contract.WatchLogs(opts, "log_named_bytes")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsFacetTestLogNamedBytes)
				if err := _ParticipantsFacetTest.contract.UnpackLog(event, "log_named_bytes", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedBytes is a log parse operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_ParticipantsFacetTest *ParticipantsFacetTestFilterer) ParseLogNamedBytes(log types.Log) (*ParticipantsFacetTestLogNamedBytes, error) {
	event := new(ParticipantsFacetTestLogNamedBytes)
	if err := _ParticipantsFacetTest.contract.UnpackLog(event, "log_named_bytes", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ParticipantsFacetTestLogNamedBytes32Iterator is returned from FilterLogNamedBytes32 and is used to iterate over the raw logs and unpacked data for LogNamedBytes32 events raised by the ParticipantsFacetTest contract.
type ParticipantsFacetTestLogNamedBytes32Iterator struct {
	Event *ParticipantsFacetTestLogNamedBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsFacetTestLogNamedBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsFacetTestLogNamedBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsFacetTestLogNamedBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsFacetTestLogNamedBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsFacetTestLogNamedBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsFacetTestLogNamedBytes32 represents a LogNamedBytes32 event raised by the ParticipantsFacetTest contract.
type ParticipantsFacetTestLogNamedBytes32 struct {
	Key string
	Val [32]byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedBytes32 is a free log retrieval operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_ParticipantsFacetTest *ParticipantsFacetTestFilterer) FilterLogNamedBytes32(opts *bind.FilterOpts) (*ParticipantsFacetTestLogNamedBytes32Iterator, error) {

	logs, sub, err := _ParticipantsFacetTest.contract.FilterLogs(opts, "log_named_bytes32")
	if err != nil {
		return nil, err
	}
	return &ParticipantsFacetTestLogNamedBytes32Iterator{contract: _ParticipantsFacetTest.contract, event: "log_named_bytes32", logs: logs, sub: sub}, nil
}

// WatchLogNamedBytes32 is a free log subscription operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_ParticipantsFacetTest *ParticipantsFacetTestFilterer) WatchLogNamedBytes32(opts *bind.WatchOpts, sink chan<- *ParticipantsFacetTestLogNamedBytes32) (event.Subscription, error) {

	logs, sub, err := _ParticipantsFacetTest.contract.WatchLogs(opts, "log_named_bytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsFacetTestLogNamedBytes32)
				if err := _ParticipantsFacetTest.contract.UnpackLog(event, "log_named_bytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedBytes32 is a log parse operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_ParticipantsFacetTest *ParticipantsFacetTestFilterer) ParseLogNamedBytes32(log types.Log) (*ParticipantsFacetTestLogNamedBytes32, error) {
	event := new(ParticipantsFacetTestLogNamedBytes32)
	if err := _ParticipantsFacetTest.contract.UnpackLog(event, "log_named_bytes32", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ParticipantsFacetTestLogNamedDecimalIntIterator is returned from FilterLogNamedDecimalInt and is used to iterate over the raw logs and unpacked data for LogNamedDecimalInt events raised by the ParticipantsFacetTest contract.
type ParticipantsFacetTestLogNamedDecimalIntIterator struct {
	Event *ParticipantsFacetTestLogNamedDecimalInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsFacetTestLogNamedDecimalIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsFacetTestLogNamedDecimalInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsFacetTestLogNamedDecimalInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsFacetTestLogNamedDecimalIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsFacetTestLogNamedDecimalIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsFacetTestLogNamedDecimalInt represents a LogNamedDecimalInt event raised by the ParticipantsFacetTest contract.
type ParticipantsFacetTestLogNamedDecimalInt struct {
	Key      string
	Val      *big.Int
	Decimals *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogNamedDecimalInt is a free log retrieval operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_ParticipantsFacetTest *ParticipantsFacetTestFilterer) FilterLogNamedDecimalInt(opts *bind.FilterOpts) (*ParticipantsFacetTestLogNamedDecimalIntIterator, error) {

	logs, sub, err := _ParticipantsFacetTest.contract.FilterLogs(opts, "log_named_decimal_int")
	if err != nil {
		return nil, err
	}
	return &ParticipantsFacetTestLogNamedDecimalIntIterator{contract: _ParticipantsFacetTest.contract, event: "log_named_decimal_int", logs: logs, sub: sub}, nil
}

// WatchLogNamedDecimalInt is a free log subscription operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_ParticipantsFacetTest *ParticipantsFacetTestFilterer) WatchLogNamedDecimalInt(opts *bind.WatchOpts, sink chan<- *ParticipantsFacetTestLogNamedDecimalInt) (event.Subscription, error) {

	logs, sub, err := _ParticipantsFacetTest.contract.WatchLogs(opts, "log_named_decimal_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsFacetTestLogNamedDecimalInt)
				if err := _ParticipantsFacetTest.contract.UnpackLog(event, "log_named_decimal_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedDecimalInt is a log parse operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_ParticipantsFacetTest *ParticipantsFacetTestFilterer) ParseLogNamedDecimalInt(log types.Log) (*ParticipantsFacetTestLogNamedDecimalInt, error) {
	event := new(ParticipantsFacetTestLogNamedDecimalInt)
	if err := _ParticipantsFacetTest.contract.UnpackLog(event, "log_named_decimal_int", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ParticipantsFacetTestLogNamedDecimalUintIterator is returned from FilterLogNamedDecimalUint and is used to iterate over the raw logs and unpacked data for LogNamedDecimalUint events raised by the ParticipantsFacetTest contract.
type ParticipantsFacetTestLogNamedDecimalUintIterator struct {
	Event *ParticipantsFacetTestLogNamedDecimalUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsFacetTestLogNamedDecimalUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsFacetTestLogNamedDecimalUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsFacetTestLogNamedDecimalUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsFacetTestLogNamedDecimalUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsFacetTestLogNamedDecimalUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsFacetTestLogNamedDecimalUint represents a LogNamedDecimalUint event raised by the ParticipantsFacetTest contract.
type ParticipantsFacetTestLogNamedDecimalUint struct {
	Key      string
	Val      *big.Int
	Decimals *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogNamedDecimalUint is a free log retrieval operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_ParticipantsFacetTest *ParticipantsFacetTestFilterer) FilterLogNamedDecimalUint(opts *bind.FilterOpts) (*ParticipantsFacetTestLogNamedDecimalUintIterator, error) {

	logs, sub, err := _ParticipantsFacetTest.contract.FilterLogs(opts, "log_named_decimal_uint")
	if err != nil {
		return nil, err
	}
	return &ParticipantsFacetTestLogNamedDecimalUintIterator{contract: _ParticipantsFacetTest.contract, event: "log_named_decimal_uint", logs: logs, sub: sub}, nil
}

// WatchLogNamedDecimalUint is a free log subscription operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_ParticipantsFacetTest *ParticipantsFacetTestFilterer) WatchLogNamedDecimalUint(opts *bind.WatchOpts, sink chan<- *ParticipantsFacetTestLogNamedDecimalUint) (event.Subscription, error) {

	logs, sub, err := _ParticipantsFacetTest.contract.WatchLogs(opts, "log_named_decimal_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsFacetTestLogNamedDecimalUint)
				if err := _ParticipantsFacetTest.contract.UnpackLog(event, "log_named_decimal_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedDecimalUint is a log parse operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_ParticipantsFacetTest *ParticipantsFacetTestFilterer) ParseLogNamedDecimalUint(log types.Log) (*ParticipantsFacetTestLogNamedDecimalUint, error) {
	event := new(ParticipantsFacetTestLogNamedDecimalUint)
	if err := _ParticipantsFacetTest.contract.UnpackLog(event, "log_named_decimal_uint", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ParticipantsFacetTestLogNamedIntIterator is returned from FilterLogNamedInt and is used to iterate over the raw logs and unpacked data for LogNamedInt events raised by the ParticipantsFacetTest contract.
type ParticipantsFacetTestLogNamedIntIterator struct {
	Event *ParticipantsFacetTestLogNamedInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsFacetTestLogNamedIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsFacetTestLogNamedInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsFacetTestLogNamedInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsFacetTestLogNamedIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsFacetTestLogNamedIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsFacetTestLogNamedInt represents a LogNamedInt event raised by the ParticipantsFacetTest contract.
type ParticipantsFacetTestLogNamedInt struct {
	Key string
	Val *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedInt is a free log retrieval operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_ParticipantsFacetTest *ParticipantsFacetTestFilterer) FilterLogNamedInt(opts *bind.FilterOpts) (*ParticipantsFacetTestLogNamedIntIterator, error) {

	logs, sub, err := _ParticipantsFacetTest.contract.FilterLogs(opts, "log_named_int")
	if err != nil {
		return nil, err
	}
	return &ParticipantsFacetTestLogNamedIntIterator{contract: _ParticipantsFacetTest.contract, event: "log_named_int", logs: logs, sub: sub}, nil
}

// WatchLogNamedInt is a free log subscription operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_ParticipantsFacetTest *ParticipantsFacetTestFilterer) WatchLogNamedInt(opts *bind.WatchOpts, sink chan<- *ParticipantsFacetTestLogNamedInt) (event.Subscription, error) {

	logs, sub, err := _ParticipantsFacetTest.contract.WatchLogs(opts, "log_named_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsFacetTestLogNamedInt)
				if err := _ParticipantsFacetTest.contract.UnpackLog(event, "log_named_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedInt is a log parse operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_ParticipantsFacetTest *ParticipantsFacetTestFilterer) ParseLogNamedInt(log types.Log) (*ParticipantsFacetTestLogNamedInt, error) {
	event := new(ParticipantsFacetTestLogNamedInt)
	if err := _ParticipantsFacetTest.contract.UnpackLog(event, "log_named_int", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ParticipantsFacetTestLogNamedStringIterator is returned from FilterLogNamedString and is used to iterate over the raw logs and unpacked data for LogNamedString events raised by the ParticipantsFacetTest contract.
type ParticipantsFacetTestLogNamedStringIterator struct {
	Event *ParticipantsFacetTestLogNamedString // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsFacetTestLogNamedStringIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsFacetTestLogNamedString)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsFacetTestLogNamedString)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsFacetTestLogNamedStringIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsFacetTestLogNamedStringIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsFacetTestLogNamedString represents a LogNamedString event raised by the ParticipantsFacetTest contract.
type ParticipantsFacetTestLogNamedString struct {
	Key string
	Val string
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedString is a free log retrieval operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_ParticipantsFacetTest *ParticipantsFacetTestFilterer) FilterLogNamedString(opts *bind.FilterOpts) (*ParticipantsFacetTestLogNamedStringIterator, error) {

	logs, sub, err := _ParticipantsFacetTest.contract.FilterLogs(opts, "log_named_string")
	if err != nil {
		return nil, err
	}
	return &ParticipantsFacetTestLogNamedStringIterator{contract: _ParticipantsFacetTest.contract, event: "log_named_string", logs: logs, sub: sub}, nil
}

// WatchLogNamedString is a free log subscription operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_ParticipantsFacetTest *ParticipantsFacetTestFilterer) WatchLogNamedString(opts *bind.WatchOpts, sink chan<- *ParticipantsFacetTestLogNamedString) (event.Subscription, error) {

	logs, sub, err := _ParticipantsFacetTest.contract.WatchLogs(opts, "log_named_string")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsFacetTestLogNamedString)
				if err := _ParticipantsFacetTest.contract.UnpackLog(event, "log_named_string", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedString is a log parse operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_ParticipantsFacetTest *ParticipantsFacetTestFilterer) ParseLogNamedString(log types.Log) (*ParticipantsFacetTestLogNamedString, error) {
	event := new(ParticipantsFacetTestLogNamedString)
	if err := _ParticipantsFacetTest.contract.UnpackLog(event, "log_named_string", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ParticipantsFacetTestLogNamedUintIterator is returned from FilterLogNamedUint and is used to iterate over the raw logs and unpacked data for LogNamedUint events raised by the ParticipantsFacetTest contract.
type ParticipantsFacetTestLogNamedUintIterator struct {
	Event *ParticipantsFacetTestLogNamedUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsFacetTestLogNamedUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsFacetTestLogNamedUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsFacetTestLogNamedUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsFacetTestLogNamedUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsFacetTestLogNamedUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsFacetTestLogNamedUint represents a LogNamedUint event raised by the ParticipantsFacetTest contract.
type ParticipantsFacetTestLogNamedUint struct {
	Key string
	Val *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedUint is a free log retrieval operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_ParticipantsFacetTest *ParticipantsFacetTestFilterer) FilterLogNamedUint(opts *bind.FilterOpts) (*ParticipantsFacetTestLogNamedUintIterator, error) {

	logs, sub, err := _ParticipantsFacetTest.contract.FilterLogs(opts, "log_named_uint")
	if err != nil {
		return nil, err
	}
	return &ParticipantsFacetTestLogNamedUintIterator{contract: _ParticipantsFacetTest.contract, event: "log_named_uint", logs: logs, sub: sub}, nil
}

// WatchLogNamedUint is a free log subscription operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_ParticipantsFacetTest *ParticipantsFacetTestFilterer) WatchLogNamedUint(opts *bind.WatchOpts, sink chan<- *ParticipantsFacetTestLogNamedUint) (event.Subscription, error) {

	logs, sub, err := _ParticipantsFacetTest.contract.WatchLogs(opts, "log_named_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsFacetTestLogNamedUint)
				if err := _ParticipantsFacetTest.contract.UnpackLog(event, "log_named_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedUint is a log parse operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_ParticipantsFacetTest *ParticipantsFacetTestFilterer) ParseLogNamedUint(log types.Log) (*ParticipantsFacetTestLogNamedUint, error) {
	event := new(ParticipantsFacetTestLogNamedUint)
	if err := _ParticipantsFacetTest.contract.UnpackLog(event, "log_named_uint", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ParticipantsFacetTestLogStringIterator is returned from FilterLogString and is used to iterate over the raw logs and unpacked data for LogString events raised by the ParticipantsFacetTest contract.
type ParticipantsFacetTestLogStringIterator struct {
	Event *ParticipantsFacetTestLogString // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsFacetTestLogStringIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsFacetTestLogString)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsFacetTestLogString)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsFacetTestLogStringIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsFacetTestLogStringIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsFacetTestLogString represents a LogString event raised by the ParticipantsFacetTest contract.
type ParticipantsFacetTestLogString struct {
	Arg0 string
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogString is a free log retrieval operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_ParticipantsFacetTest *ParticipantsFacetTestFilterer) FilterLogString(opts *bind.FilterOpts) (*ParticipantsFacetTestLogStringIterator, error) {

	logs, sub, err := _ParticipantsFacetTest.contract.FilterLogs(opts, "log_string")
	if err != nil {
		return nil, err
	}
	return &ParticipantsFacetTestLogStringIterator{contract: _ParticipantsFacetTest.contract, event: "log_string", logs: logs, sub: sub}, nil
}

// WatchLogString is a free log subscription operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_ParticipantsFacetTest *ParticipantsFacetTestFilterer) WatchLogString(opts *bind.WatchOpts, sink chan<- *ParticipantsFacetTestLogString) (event.Subscription, error) {

	logs, sub, err := _ParticipantsFacetTest.contract.WatchLogs(opts, "log_string")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsFacetTestLogString)
				if err := _ParticipantsFacetTest.contract.UnpackLog(event, "log_string", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogString is a log parse operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_ParticipantsFacetTest *ParticipantsFacetTestFilterer) ParseLogString(log types.Log) (*ParticipantsFacetTestLogString, error) {
	event := new(ParticipantsFacetTestLogString)
	if err := _ParticipantsFacetTest.contract.UnpackLog(event, "log_string", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ParticipantsFacetTestLogUintIterator is returned from FilterLogUint and is used to iterate over the raw logs and unpacked data for LogUint events raised by the ParticipantsFacetTest contract.
type ParticipantsFacetTestLogUintIterator struct {
	Event *ParticipantsFacetTestLogUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsFacetTestLogUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsFacetTestLogUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsFacetTestLogUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsFacetTestLogUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsFacetTestLogUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsFacetTestLogUint represents a LogUint event raised by the ParticipantsFacetTest contract.
type ParticipantsFacetTestLogUint struct {
	Arg0 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogUint is a free log retrieval operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_ParticipantsFacetTest *ParticipantsFacetTestFilterer) FilterLogUint(opts *bind.FilterOpts) (*ParticipantsFacetTestLogUintIterator, error) {

	logs, sub, err := _ParticipantsFacetTest.contract.FilterLogs(opts, "log_uint")
	if err != nil {
		return nil, err
	}
	return &ParticipantsFacetTestLogUintIterator{contract: _ParticipantsFacetTest.contract, event: "log_uint", logs: logs, sub: sub}, nil
}

// WatchLogUint is a free log subscription operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_ParticipantsFacetTest *ParticipantsFacetTestFilterer) WatchLogUint(opts *bind.WatchOpts, sink chan<- *ParticipantsFacetTestLogUint) (event.Subscription, error) {

	logs, sub, err := _ParticipantsFacetTest.contract.WatchLogs(opts, "log_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsFacetTestLogUint)
				if err := _ParticipantsFacetTest.contract.UnpackLog(event, "log_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogUint is a log parse operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_ParticipantsFacetTest *ParticipantsFacetTestFilterer) ParseLogUint(log types.Log) (*ParticipantsFacetTestLogUint, error) {
	event := new(ParticipantsFacetTestLogUint)
	if err := _ParticipantsFacetTest.contract.UnpackLog(event, "log_uint", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ParticipantsFacetTestLogsIterator is returned from FilterLogs and is used to iterate over the raw logs and unpacked data for Logs events raised by the ParticipantsFacetTest contract.
type ParticipantsFacetTestLogsIterator struct {
	Event *ParticipantsFacetTestLogs // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ParticipantsFacetTestLogsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ParticipantsFacetTestLogs)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ParticipantsFacetTestLogs)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ParticipantsFacetTestLogsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ParticipantsFacetTestLogsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ParticipantsFacetTestLogs represents a Logs event raised by the ParticipantsFacetTest contract.
type ParticipantsFacetTestLogs struct {
	Arg0 []byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogs is a free log retrieval operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_ParticipantsFacetTest *ParticipantsFacetTestFilterer) FilterLogs(opts *bind.FilterOpts) (*ParticipantsFacetTestLogsIterator, error) {

	logs, sub, err := _ParticipantsFacetTest.contract.FilterLogs(opts, "logs")
	if err != nil {
		return nil, err
	}
	return &ParticipantsFacetTestLogsIterator{contract: _ParticipantsFacetTest.contract, event: "logs", logs: logs, sub: sub}, nil
}

// WatchLogs is a free log subscription operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_ParticipantsFacetTest *ParticipantsFacetTestFilterer) WatchLogs(opts *bind.WatchOpts, sink chan<- *ParticipantsFacetTestLogs) (event.Subscription, error) {

	logs, sub, err := _ParticipantsFacetTest.contract.WatchLogs(opts, "logs")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ParticipantsFacetTestLogs)
				if err := _ParticipantsFacetTest.contract.UnpackLog(event, "logs", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogs is a log parse operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_ParticipantsFacetTest *ParticipantsFacetTestFilterer) ParseLogs(log types.Log) (*ParticipantsFacetTestLogs, error) {
	event := new(ParticipantsFacetTestLogs)
	if err := _ParticipantsFacetTest.contract.UnpackLog(event, "logs", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ParticipantsStorageLibraryABI is the input ABI used to generate the binding from.
const ParticipantsStorageLibraryABI = "[]"

// ParticipantsStorageLibraryBin is the compiled bytecode used for deploying new contracts.
var ParticipantsStorageLibraryBin = "0x60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208313d271486d599c10e17456c8fe7388d50d0fa7396f502fb570ff2bf29e718864736f6c63430007060033"

// DeployParticipantsStorageLibrary deploys a new Ethereum contract, binding an instance of ParticipantsStorageLibrary to it.
func DeployParticipantsStorageLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ParticipantsStorageLibrary, error) {
	parsed, err := abi.JSON(strings.NewReader(ParticipantsStorageLibraryABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ParticipantsStorageLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ParticipantsStorageLibrary{ParticipantsStorageLibraryCaller: ParticipantsStorageLibraryCaller{contract: contract}, ParticipantsStorageLibraryTransactor: ParticipantsStorageLibraryTransactor{contract: contract}, ParticipantsStorageLibraryFilterer: ParticipantsStorageLibraryFilterer{contract: contract}}, nil
}

// ParticipantsStorageLibrary is an auto generated Go binding around an Ethereum contract.
type ParticipantsStorageLibrary struct {
	ParticipantsStorageLibraryCaller     // Read-only binding to the contract
	ParticipantsStorageLibraryTransactor // Write-only binding to the contract
	ParticipantsStorageLibraryFilterer   // Log filterer for contract events
}

// ParticipantsStorageLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type ParticipantsStorageLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ParticipantsStorageLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ParticipantsStorageLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ParticipantsStorageLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ParticipantsStorageLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ParticipantsStorageLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ParticipantsStorageLibrarySession struct {
	Contract     *ParticipantsStorageLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts               // Call options to use throughout this session
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// ParticipantsStorageLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ParticipantsStorageLibraryCallerSession struct {
	Contract *ParticipantsStorageLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                     // Call options to use throughout this session
}

// ParticipantsStorageLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ParticipantsStorageLibraryTransactorSession struct {
	Contract     *ParticipantsStorageLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                     // Transaction auth options to use throughout this session
}

// ParticipantsStorageLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type ParticipantsStorageLibraryRaw struct {
	Contract *ParticipantsStorageLibrary // Generic contract binding to access the raw methods on
}

// ParticipantsStorageLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ParticipantsStorageLibraryCallerRaw struct {
	Contract *ParticipantsStorageLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// ParticipantsStorageLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ParticipantsStorageLibraryTransactorRaw struct {
	Contract *ParticipantsStorageLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewParticipantsStorageLibrary creates a new instance of ParticipantsStorageLibrary, bound to a specific deployed contract.
func NewParticipantsStorageLibrary(address common.Address, backend bind.ContractBackend) (*ParticipantsStorageLibrary, error) {
	contract, err := bindParticipantsStorageLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ParticipantsStorageLibrary{ParticipantsStorageLibraryCaller: ParticipantsStorageLibraryCaller{contract: contract}, ParticipantsStorageLibraryTransactor: ParticipantsStorageLibraryTransactor{contract: contract}, ParticipantsStorageLibraryFilterer: ParticipantsStorageLibraryFilterer{contract: contract}}, nil
}

// NewParticipantsStorageLibraryCaller creates a new read-only instance of ParticipantsStorageLibrary, bound to a specific deployed contract.
func NewParticipantsStorageLibraryCaller(address common.Address, caller bind.ContractCaller) (*ParticipantsStorageLibraryCaller, error) {
	contract, err := bindParticipantsStorageLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ParticipantsStorageLibraryCaller{contract: contract}, nil
}

// NewParticipantsStorageLibraryTransactor creates a new write-only instance of ParticipantsStorageLibrary, bound to a specific deployed contract.
func NewParticipantsStorageLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*ParticipantsStorageLibraryTransactor, error) {
	contract, err := bindParticipantsStorageLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ParticipantsStorageLibraryTransactor{contract: contract}, nil
}

// NewParticipantsStorageLibraryFilterer creates a new log filterer instance of ParticipantsStorageLibrary, bound to a specific deployed contract.
func NewParticipantsStorageLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*ParticipantsStorageLibraryFilterer, error) {
	contract, err := bindParticipantsStorageLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ParticipantsStorageLibraryFilterer{contract: contract}, nil
}

// bindParticipantsStorageLibrary binds a generic wrapper to an already deployed contract.
func bindParticipantsStorageLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ParticipantsStorageLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ParticipantsStorageLibrary *ParticipantsStorageLibraryRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ParticipantsStorageLibrary.Contract.ParticipantsStorageLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ParticipantsStorageLibrary *ParticipantsStorageLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ParticipantsStorageLibrary.Contract.ParticipantsStorageLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ParticipantsStorageLibrary *ParticipantsStorageLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ParticipantsStorageLibrary.Contract.ParticipantsStorageLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ParticipantsStorageLibrary *ParticipantsStorageLibraryCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ParticipantsStorageLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ParticipantsStorageLibrary *ParticipantsStorageLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ParticipantsStorageLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ParticipantsStorageLibrary *ParticipantsStorageLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ParticipantsStorageLibrary.Contract.contract.Transact(opts, method, params...)
}

// QueueLibraryABI is the input ABI used to generate the binding from.
const QueueLibraryABI = "[]"

// QueueLibraryBin is the compiled bytecode used for deploying new contracts.
var QueueLibraryBin = "0x60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220faa91f8556aea4cf452aa439ce74c7f86e9fa6e44357cfed287c6cd23451ca9b64736f6c63430007060033"

// DeployQueueLibrary deploys a new Ethereum contract, binding an instance of QueueLibrary to it.
func DeployQueueLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *QueueLibrary, error) {
	parsed, err := abi.JSON(strings.NewReader(QueueLibraryABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(QueueLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &QueueLibrary{QueueLibraryCaller: QueueLibraryCaller{contract: contract}, QueueLibraryTransactor: QueueLibraryTransactor{contract: contract}, QueueLibraryFilterer: QueueLibraryFilterer{contract: contract}}, nil
}

// QueueLibrary is an auto generated Go binding around an Ethereum contract.
type QueueLibrary struct {
	QueueLibraryCaller     // Read-only binding to the contract
	QueueLibraryTransactor // Write-only binding to the contract
	QueueLibraryFilterer   // Log filterer for contract events
}

// QueueLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type QueueLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// QueueLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type QueueLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// QueueLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type QueueLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// QueueLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type QueueLibrarySession struct {
	Contract     *QueueLibrary     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// QueueLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type QueueLibraryCallerSession struct {
	Contract *QueueLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// QueueLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type QueueLibraryTransactorSession struct {
	Contract     *QueueLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// QueueLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type QueueLibraryRaw struct {
	Contract *QueueLibrary // Generic contract binding to access the raw methods on
}

// QueueLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type QueueLibraryCallerRaw struct {
	Contract *QueueLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// QueueLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type QueueLibraryTransactorRaw struct {
	Contract *QueueLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewQueueLibrary creates a new instance of QueueLibrary, bound to a specific deployed contract.
func NewQueueLibrary(address common.Address, backend bind.ContractBackend) (*QueueLibrary, error) {
	contract, err := bindQueueLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &QueueLibrary{QueueLibraryCaller: QueueLibraryCaller{contract: contract}, QueueLibraryTransactor: QueueLibraryTransactor{contract: contract}, QueueLibraryFilterer: QueueLibraryFilterer{contract: contract}}, nil
}

// NewQueueLibraryCaller creates a new read-only instance of QueueLibrary, bound to a specific deployed contract.
func NewQueueLibraryCaller(address common.Address, caller bind.ContractCaller) (*QueueLibraryCaller, error) {
	contract, err := bindQueueLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &QueueLibraryCaller{contract: contract}, nil
}

// NewQueueLibraryTransactor creates a new write-only instance of QueueLibrary, bound to a specific deployed contract.
func NewQueueLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*QueueLibraryTransactor, error) {
	contract, err := bindQueueLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &QueueLibraryTransactor{contract: contract}, nil
}

// NewQueueLibraryFilterer creates a new log filterer instance of QueueLibrary, bound to a specific deployed contract.
func NewQueueLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*QueueLibraryFilterer, error) {
	contract, err := bindQueueLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &QueueLibraryFilterer{contract: contract}, nil
}

// bindQueueLibrary binds a generic wrapper to an already deployed contract.
func bindQueueLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(QueueLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_QueueLibrary *QueueLibraryRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _QueueLibrary.Contract.QueueLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_QueueLibrary *QueueLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _QueueLibrary.Contract.QueueLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_QueueLibrary *QueueLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _QueueLibrary.Contract.QueueLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_QueueLibrary *QueueLibraryCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _QueueLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_QueueLibrary *QueueLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _QueueLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_QueueLibrary *QueueLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _QueueLibrary.Contract.contract.Transact(opts, method, params...)
}

// RegistryABI is the input ABI used to generate the binding from.
const RegistryABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"lookup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// RegistryBin is the compiled bytecode used for deploying new contracts.
var RegistryBin = "0x608060405234801561001057600080fd5b5033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610083600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661008860201b60201c565b6101ed565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061012c57506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610181576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526031815260200180610cbb6031913960400191505060405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060016000815480929190600101919050555050565b610abf806101fc6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80631e59c5291461005c57806380599e4b14610137578063e348da13146101f2578063f67187ac14610236578063fad8b32a1461031b575b600080fd5b6101356004803603604081101561007257600080fd5b810190808035906020019064010000000081111561008f57600080fd5b8201836020820111156100a157600080fd5b803590602001918460018302840111640100000000831117156100c357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061035f565b005b6101f06004803603602081101561014d57600080fd5b810190808035906020019064010000000081111561016a57600080fd5b82018360208201111561017c57600080fd5b8035906020019184600183028401116401000000008311171561019e57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610504565b005b6102346004803603602081101561020857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061068c565b005b6102ef6004803603602081101561024c57600080fd5b810190808035906020019064010000000081111561026957600080fd5b82018360208201111561027b57600080fd5b8035906020019184600183028401116401000000008311171561029d57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506107f1565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61035d6004803603602081101561033157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610884565b005b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061040357506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610458576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526031815260200180610a596031913960400191505060405180910390fd5b806003836040518082805190602001908083835b6020831061048f578051825260208201915060208101905060208303925061046c565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806105a857506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6105fd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526031815260200180610a596031913960400191505060405180910390fd5b6003816040518082805190602001908083835b602083106106335780518252602082019150602081019050602083039250610610565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061073057506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610785576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526031815260200180610a596031913960400191505060405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060016000815480929190600101919050555050565b60006003826040518082805190602001908083835b602083106108295780518252602082019150602081019050602083039250610806565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061092857506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b61097d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526031815260200180610a596031913960400191505060405180910390fd5b60018054116109f4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f43616e27742072656d6f766520616c6c206f70657261746f727300000000000081525060200191505060405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff0219169055600160008154809291906001900391905055505056fe46756e6374696f6e616c697479207265737472696374656420746f20617574686f72697a6564206f70657261746f72732ea2646970667358221220b5cdbb7cdb81086da7dce0b42a6dfc52cae8bf3302be8ec6d14eb2dbde56cdec64736f6c6343000706003346756e6374696f6e616c697479207265737472696374656420746f20617574686f72697a6564206f70657261746f72732e"

// DeployRegistry deploys a new Ethereum contract, binding an instance of Registry to it.
func DeployRegistry(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Registry, error) {
	parsed, err := abi.JSON(strings.NewReader(RegistryABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(RegistryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Registry{RegistryCaller: RegistryCaller{contract: contract}, RegistryTransactor: RegistryTransactor{contract: contract}, RegistryFilterer: RegistryFilterer{contract: contract}}, nil
}

// Registry is an auto generated Go binding around an Ethereum contract.
type Registry struct {
	RegistryCaller     // Read-only binding to the contract
	RegistryTransactor // Write-only binding to the contract
	RegistryFilterer   // Log filterer for contract events
}

// RegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type RegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RegistrySession struct {
	Contract     *Registry         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RegistryCallerSession struct {
	Contract *RegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// RegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RegistryTransactorSession struct {
	Contract     *RegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// RegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type RegistryRaw struct {
	Contract *Registry // Generic contract binding to access the raw methods on
}

// RegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RegistryCallerRaw struct {
	Contract *RegistryCaller // Generic read-only contract binding to access the raw methods on
}

// RegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RegistryTransactorRaw struct {
	Contract *RegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRegistry creates a new instance of Registry, bound to a specific deployed contract.
func NewRegistry(address common.Address, backend bind.ContractBackend) (*Registry, error) {
	contract, err := bindRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Registry{RegistryCaller: RegistryCaller{contract: contract}, RegistryTransactor: RegistryTransactor{contract: contract}, RegistryFilterer: RegistryFilterer{contract: contract}}, nil
}

// NewRegistryCaller creates a new read-only instance of Registry, bound to a specific deployed contract.
func NewRegistryCaller(address common.Address, caller bind.ContractCaller) (*RegistryCaller, error) {
	contract, err := bindRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryCaller{contract: contract}, nil
}

// NewRegistryTransactor creates a new write-only instance of Registry, bound to a specific deployed contract.
func NewRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*RegistryTransactor, error) {
	contract, err := bindRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryTransactor{contract: contract}, nil
}

// NewRegistryFilterer creates a new log filterer instance of Registry, bound to a specific deployed contract.
func NewRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*RegistryFilterer, error) {
	contract, err := bindRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RegistryFilterer{contract: contract}, nil
}

// bindRegistry binds a generic wrapper to an already deployed contract.
func bindRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RegistryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Registry *RegistryRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Registry.Contract.RegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Registry *RegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.Contract.RegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Registry *RegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Registry.Contract.RegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Registry *RegistryCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Registry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Registry *RegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Registry *RegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Registry.Contract.contract.Transact(opts, method, params...)
}

// Lookup is a free data retrieval call binding the contract method 0xf67187ac.
//
// Solidity: function lookup(string name) view returns(address)
func (_Registry *RegistryCaller) Lookup(opts *bind.CallOpts, name string) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "lookup", name)
	return *ret0, err
}

// Lookup is a free data retrieval call binding the contract method 0xf67187ac.
//
// Solidity: function lookup(string name) view returns(address)
func (_Registry *RegistrySession) Lookup(name string) (common.Address, error) {
	return _Registry.Contract.Lookup(&_Registry.CallOpts, name)
}

// Lookup is a free data retrieval call binding the contract method 0xf67187ac.
//
// Solidity: function lookup(string name) view returns(address)
func (_Registry *RegistryCallerSession) Lookup(name string) (common.Address, error) {
	return _Registry.Contract.Lookup(&_Registry.CallOpts, name)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_Registry *RegistryTransactor) GrantOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "grantOperator", _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_Registry *RegistrySession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _Registry.Contract.GrantOperator(&_Registry.TransactOpts, _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_Registry *RegistryTransactorSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _Registry.Contract.GrantOperator(&_Registry.TransactOpts, _operator)
}

// Register is a paid mutator transaction binding the contract method 0x1e59c529.
//
// Solidity: function register(string name, address dst) returns()
func (_Registry *RegistryTransactor) Register(opts *bind.TransactOpts, name string, dst common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "register", name, dst)
}

// Register is a paid mutator transaction binding the contract method 0x1e59c529.
//
// Solidity: function register(string name, address dst) returns()
func (_Registry *RegistrySession) Register(name string, dst common.Address) (*types.Transaction, error) {
	return _Registry.Contract.Register(&_Registry.TransactOpts, name, dst)
}

// Register is a paid mutator transaction binding the contract method 0x1e59c529.
//
// Solidity: function register(string name, address dst) returns()
func (_Registry *RegistryTransactorSession) Register(name string, dst common.Address) (*types.Transaction, error) {
	return _Registry.Contract.Register(&_Registry.TransactOpts, name, dst)
}

// Remove is a paid mutator transaction binding the contract method 0x80599e4b.
//
// Solidity: function remove(string name) returns()
func (_Registry *RegistryTransactor) Remove(opts *bind.TransactOpts, name string) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "remove", name)
}

// Remove is a paid mutator transaction binding the contract method 0x80599e4b.
//
// Solidity: function remove(string name) returns()
func (_Registry *RegistrySession) Remove(name string) (*types.Transaction, error) {
	return _Registry.Contract.Remove(&_Registry.TransactOpts, name)
}

// Remove is a paid mutator transaction binding the contract method 0x80599e4b.
//
// Solidity: function remove(string name) returns()
func (_Registry *RegistryTransactorSession) Remove(name string) (*types.Transaction, error) {
	return _Registry.Contract.Remove(&_Registry.TransactOpts, name)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_Registry *RegistryTransactor) RevokeOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "revokeOperator", _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_Registry *RegistrySession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _Registry.Contract.RevokeOperator(&_Registry.TransactOpts, _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_Registry *RegistryTransactorSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _Registry.Contract.RevokeOperator(&_Registry.TransactOpts, _operator)
}

// RegistryClientABI is the input ABI used to generate the binding from.
const RegistryClientABI = "[{\"inputs\":[],\"name\":\"reloadRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// RegistryClient is an auto generated Go binding around an Ethereum contract.
type RegistryClient struct {
	RegistryClientCaller     // Read-only binding to the contract
	RegistryClientTransactor // Write-only binding to the contract
	RegistryClientFilterer   // Log filterer for contract events
}

// RegistryClientCaller is an auto generated read-only Go binding around an Ethereum contract.
type RegistryClientCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryClientTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RegistryClientTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryClientFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RegistryClientFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryClientSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RegistryClientSession struct {
	Contract     *RegistryClient   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RegistryClientCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RegistryClientCallerSession struct {
	Contract *RegistryClientCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// RegistryClientTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RegistryClientTransactorSession struct {
	Contract     *RegistryClientTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// RegistryClientRaw is an auto generated low-level Go binding around an Ethereum contract.
type RegistryClientRaw struct {
	Contract *RegistryClient // Generic contract binding to access the raw methods on
}

// RegistryClientCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RegistryClientCallerRaw struct {
	Contract *RegistryClientCaller // Generic read-only contract binding to access the raw methods on
}

// RegistryClientTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RegistryClientTransactorRaw struct {
	Contract *RegistryClientTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRegistryClient creates a new instance of RegistryClient, bound to a specific deployed contract.
func NewRegistryClient(address common.Address, backend bind.ContractBackend) (*RegistryClient, error) {
	contract, err := bindRegistryClient(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RegistryClient{RegistryClientCaller: RegistryClientCaller{contract: contract}, RegistryClientTransactor: RegistryClientTransactor{contract: contract}, RegistryClientFilterer: RegistryClientFilterer{contract: contract}}, nil
}

// NewRegistryClientCaller creates a new read-only instance of RegistryClient, bound to a specific deployed contract.
func NewRegistryClientCaller(address common.Address, caller bind.ContractCaller) (*RegistryClientCaller, error) {
	contract, err := bindRegistryClient(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryClientCaller{contract: contract}, nil
}

// NewRegistryClientTransactor creates a new write-only instance of RegistryClient, bound to a specific deployed contract.
func NewRegistryClientTransactor(address common.Address, transactor bind.ContractTransactor) (*RegistryClientTransactor, error) {
	contract, err := bindRegistryClient(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryClientTransactor{contract: contract}, nil
}

// NewRegistryClientFilterer creates a new log filterer instance of RegistryClient, bound to a specific deployed contract.
func NewRegistryClientFilterer(address common.Address, filterer bind.ContractFilterer) (*RegistryClientFilterer, error) {
	contract, err := bindRegistryClient(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RegistryClientFilterer{contract: contract}, nil
}

// bindRegistryClient binds a generic wrapper to an already deployed contract.
func bindRegistryClient(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RegistryClientABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RegistryClient *RegistryClientRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _RegistryClient.Contract.RegistryClientCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RegistryClient *RegistryClientRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryClient.Contract.RegistryClientTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RegistryClient *RegistryClientRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RegistryClient.Contract.RegistryClientTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RegistryClient *RegistryClientCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _RegistryClient.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RegistryClient *RegistryClientTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryClient.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RegistryClient *RegistryClientTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RegistryClient.Contract.contract.Transact(opts, method, params...)
}

// ReloadRegistry is a paid mutator transaction binding the contract method 0x1476601d.
//
// Solidity: function reloadRegistry() returns()
func (_RegistryClient *RegistryClientTransactor) ReloadRegistry(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryClient.contract.Transact(opts, "reloadRegistry")
}

// ReloadRegistry is a paid mutator transaction binding the contract method 0x1476601d.
//
// Solidity: function reloadRegistry() returns()
func (_RegistryClient *RegistryClientSession) ReloadRegistry() (*types.Transaction, error) {
	return _RegistryClient.Contract.ReloadRegistry(&_RegistryClient.TransactOpts)
}

// ReloadRegistry is a paid mutator transaction binding the contract method 0x1476601d.
//
// Solidity: function reloadRegistry() returns()
func (_RegistryClient *RegistryClientTransactorSession) ReloadRegistry() (*types.Transaction, error) {
	return _RegistryClient.Contract.ReloadRegistry(&_RegistryClient.TransactOpts)
}

// RegistryTestABI is the input ABI used to generate the binding from.
const RegistryTestABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"log_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"log_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"log_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"name\":\"log_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"log_named_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\"}],\"name\":\"log_named_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\"}],\"name\":\"log_named_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"}],\"name\":\"log_named_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"}],\"name\":\"log_named_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"log_named_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"log_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"logs\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testRegister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testRemove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// RegistryTestBin is the compiled bytecode used for deploying new contracts.
var RegistryTestBin = ""

// DeployRegistryTest deploys a new Ethereum contract, binding an instance of RegistryTest to it.
func DeployRegistryTest(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *RegistryTest, error) {
	parsed, err := abi.JSON(strings.NewReader(RegistryTestABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(RegistryTestBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RegistryTest{RegistryTestCaller: RegistryTestCaller{contract: contract}, RegistryTestTransactor: RegistryTestTransactor{contract: contract}, RegistryTestFilterer: RegistryTestFilterer{contract: contract}}, nil
}

// RegistryTest is an auto generated Go binding around an Ethereum contract.
type RegistryTest struct {
	RegistryTestCaller     // Read-only binding to the contract
	RegistryTestTransactor // Write-only binding to the contract
	RegistryTestFilterer   // Log filterer for contract events
}

// RegistryTestCaller is an auto generated read-only Go binding around an Ethereum contract.
type RegistryTestCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryTestTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RegistryTestTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryTestFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RegistryTestFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryTestSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RegistryTestSession struct {
	Contract     *RegistryTest     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RegistryTestCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RegistryTestCallerSession struct {
	Contract *RegistryTestCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// RegistryTestTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RegistryTestTransactorSession struct {
	Contract     *RegistryTestTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// RegistryTestRaw is an auto generated low-level Go binding around an Ethereum contract.
type RegistryTestRaw struct {
	Contract *RegistryTest // Generic contract binding to access the raw methods on
}

// RegistryTestCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RegistryTestCallerRaw struct {
	Contract *RegistryTestCaller // Generic read-only contract binding to access the raw methods on
}

// RegistryTestTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RegistryTestTransactorRaw struct {
	Contract *RegistryTestTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRegistryTest creates a new instance of RegistryTest, bound to a specific deployed contract.
func NewRegistryTest(address common.Address, backend bind.ContractBackend) (*RegistryTest, error) {
	contract, err := bindRegistryTest(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RegistryTest{RegistryTestCaller: RegistryTestCaller{contract: contract}, RegistryTestTransactor: RegistryTestTransactor{contract: contract}, RegistryTestFilterer: RegistryTestFilterer{contract: contract}}, nil
}

// NewRegistryTestCaller creates a new read-only instance of RegistryTest, bound to a specific deployed contract.
func NewRegistryTestCaller(address common.Address, caller bind.ContractCaller) (*RegistryTestCaller, error) {
	contract, err := bindRegistryTest(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryTestCaller{contract: contract}, nil
}

// NewRegistryTestTransactor creates a new write-only instance of RegistryTest, bound to a specific deployed contract.
func NewRegistryTestTransactor(address common.Address, transactor bind.ContractTransactor) (*RegistryTestTransactor, error) {
	contract, err := bindRegistryTest(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryTestTransactor{contract: contract}, nil
}

// NewRegistryTestFilterer creates a new log filterer instance of RegistryTest, bound to a specific deployed contract.
func NewRegistryTestFilterer(address common.Address, filterer bind.ContractFilterer) (*RegistryTestFilterer, error) {
	contract, err := bindRegistryTest(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RegistryTestFilterer{contract: contract}, nil
}

// bindRegistryTest binds a generic wrapper to an already deployed contract.
func bindRegistryTest(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RegistryTestABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RegistryTest *RegistryTestRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _RegistryTest.Contract.RegistryTestCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RegistryTest *RegistryTestRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.Contract.RegistryTestTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RegistryTest *RegistryTestRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RegistryTest.Contract.RegistryTestTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RegistryTest *RegistryTestCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _RegistryTest.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RegistryTest *RegistryTestTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RegistryTest *RegistryTestTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RegistryTest.Contract.contract.Transact(opts, method, params...)
}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_RegistryTest *RegistryTestCaller) ISTEST(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _RegistryTest.contract.Call(opts, out, "IS_TEST")
	return *ret0, err
}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_RegistryTest *RegistryTestSession) ISTEST() (bool, error) {
	return _RegistryTest.Contract.ISTEST(&_RegistryTest.CallOpts)
}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_RegistryTest *RegistryTestCallerSession) ISTEST() (bool, error) {
	return _RegistryTest.Contract.ISTEST(&_RegistryTest.CallOpts)
}

// Failed is a free data retrieval call binding the contract method 0xba414fa6.
//
// Solidity: function failed() view returns(bool)
func (_RegistryTest *RegistryTestCaller) Failed(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _RegistryTest.contract.Call(opts, out, "failed")
	return *ret0, err
}

// Failed is a free data retrieval call binding the contract method 0xba414fa6.
//
// Solidity: function failed() view returns(bool)
func (_RegistryTest *RegistryTestSession) Failed() (bool, error) {
	return _RegistryTest.Contract.Failed(&_RegistryTest.CallOpts)
}

// Failed is a free data retrieval call binding the contract method 0xba414fa6.
//
// Solidity: function failed() view returns(bool)
func (_RegistryTest *RegistryTestCallerSession) Failed() (bool, error) {
	return _RegistryTest.Contract.Failed(&_RegistryTest.CallOpts)
}

// SetUp is a paid mutator transaction binding the contract method 0x0a9254e4.
//
// Solidity: function setUp() returns()
func (_RegistryTest *RegistryTestTransactor) SetUp(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.contract.Transact(opts, "setUp")
}

// SetUp is a paid mutator transaction binding the contract method 0x0a9254e4.
//
// Solidity: function setUp() returns()
func (_RegistryTest *RegistryTestSession) SetUp() (*types.Transaction, error) {
	return _RegistryTest.Contract.SetUp(&_RegistryTest.TransactOpts)
}

// SetUp is a paid mutator transaction binding the contract method 0x0a9254e4.
//
// Solidity: function setUp() returns()
func (_RegistryTest *RegistryTestTransactorSession) SetUp() (*types.Transaction, error) {
	return _RegistryTest.Contract.SetUp(&_RegistryTest.TransactOpts)
}

// TestRegister is a paid mutator transaction binding the contract method 0x0a38e004.
//
// Solidity: function testRegister() returns()
func (_RegistryTest *RegistryTestTransactor) TestRegister(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.contract.Transact(opts, "testRegister")
}

// TestRegister is a paid mutator transaction binding the contract method 0x0a38e004.
//
// Solidity: function testRegister() returns()
func (_RegistryTest *RegistryTestSession) TestRegister() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestRegister(&_RegistryTest.TransactOpts)
}

// TestRegister is a paid mutator transaction binding the contract method 0x0a38e004.
//
// Solidity: function testRegister() returns()
func (_RegistryTest *RegistryTestTransactorSession) TestRegister() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestRegister(&_RegistryTest.TransactOpts)
}

// TestRemove is a paid mutator transaction binding the contract method 0x39cfea4a.
//
// Solidity: function testRemove() returns()
func (_RegistryTest *RegistryTestTransactor) TestRemove(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryTest.contract.Transact(opts, "testRemove")
}

// TestRemove is a paid mutator transaction binding the contract method 0x39cfea4a.
//
// Solidity: function testRemove() returns()
func (_RegistryTest *RegistryTestSession) TestRemove() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestRemove(&_RegistryTest.TransactOpts)
}

// TestRemove is a paid mutator transaction binding the contract method 0x39cfea4a.
//
// Solidity: function testRemove() returns()
func (_RegistryTest *RegistryTestTransactorSession) TestRemove() (*types.Transaction, error) {
	return _RegistryTest.Contract.TestRemove(&_RegistryTest.TransactOpts)
}

// RegistryTestLogIterator is returned from FilterLog and is used to iterate over the raw logs and unpacked data for Log events raised by the RegistryTest contract.
type RegistryTestLogIterator struct {
	Event *RegistryTestLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLog represents a Log event raised by the RegistryTest contract.
type RegistryTestLog struct {
	Arg0 string
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLog is a free log retrieval operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_RegistryTest *RegistryTestFilterer) FilterLog(opts *bind.FilterOpts) (*RegistryTestLogIterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogIterator{contract: _RegistryTest.contract, event: "log", logs: logs, sub: sub}, nil
}

// WatchLog is a free log subscription operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_RegistryTest *RegistryTestFilterer) WatchLog(opts *bind.WatchOpts, sink chan<- *RegistryTestLog) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLog)
				if err := _RegistryTest.contract.UnpackLog(event, "log", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLog is a log parse operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_RegistryTest *RegistryTestFilterer) ParseLog(log types.Log) (*RegistryTestLog, error) {
	event := new(RegistryTestLog)
	if err := _RegistryTest.contract.UnpackLog(event, "log", log); err != nil {
		return nil, err
	}
	return event, nil
}

// RegistryTestLogAddressIterator is returned from FilterLogAddress and is used to iterate over the raw logs and unpacked data for LogAddress events raised by the RegistryTest contract.
type RegistryTestLogAddressIterator struct {
	Event *RegistryTestLogAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogAddress represents a LogAddress event raised by the RegistryTest contract.
type RegistryTestLogAddress struct {
	Arg0 common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogAddress is a free log retrieval operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_RegistryTest *RegistryTestFilterer) FilterLogAddress(opts *bind.FilterOpts) (*RegistryTestLogAddressIterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_address")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogAddressIterator{contract: _RegistryTest.contract, event: "log_address", logs: logs, sub: sub}, nil
}

// WatchLogAddress is a free log subscription operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_RegistryTest *RegistryTestFilterer) WatchLogAddress(opts *bind.WatchOpts, sink chan<- *RegistryTestLogAddress) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_address")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogAddress)
				if err := _RegistryTest.contract.UnpackLog(event, "log_address", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogAddress is a log parse operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_RegistryTest *RegistryTestFilterer) ParseLogAddress(log types.Log) (*RegistryTestLogAddress, error) {
	event := new(RegistryTestLogAddress)
	if err := _RegistryTest.contract.UnpackLog(event, "log_address", log); err != nil {
		return nil, err
	}
	return event, nil
}

// RegistryTestLogBytesIterator is returned from FilterLogBytes and is used to iterate over the raw logs and unpacked data for LogBytes events raised by the RegistryTest contract.
type RegistryTestLogBytesIterator struct {
	Event *RegistryTestLogBytes // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogBytesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogBytes)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogBytes)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogBytesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogBytesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogBytes represents a LogBytes event raised by the RegistryTest contract.
type RegistryTestLogBytes struct {
	Arg0 []byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogBytes is a free log retrieval operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_RegistryTest *RegistryTestFilterer) FilterLogBytes(opts *bind.FilterOpts) (*RegistryTestLogBytesIterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_bytes")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogBytesIterator{contract: _RegistryTest.contract, event: "log_bytes", logs: logs, sub: sub}, nil
}

// WatchLogBytes is a free log subscription operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_RegistryTest *RegistryTestFilterer) WatchLogBytes(opts *bind.WatchOpts, sink chan<- *RegistryTestLogBytes) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_bytes")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogBytes)
				if err := _RegistryTest.contract.UnpackLog(event, "log_bytes", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes is a log parse operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_RegistryTest *RegistryTestFilterer) ParseLogBytes(log types.Log) (*RegistryTestLogBytes, error) {
	event := new(RegistryTestLogBytes)
	if err := _RegistryTest.contract.UnpackLog(event, "log_bytes", log); err != nil {
		return nil, err
	}
	return event, nil
}

// RegistryTestLogBytes32Iterator is returned from FilterLogBytes32 and is used to iterate over the raw logs and unpacked data for LogBytes32 events raised by the RegistryTest contract.
type RegistryTestLogBytes32Iterator struct {
	Event *RegistryTestLogBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogBytes32 represents a LogBytes32 event raised by the RegistryTest contract.
type RegistryTestLogBytes32 struct {
	Arg0 [32]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogBytes32 is a free log retrieval operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_RegistryTest *RegistryTestFilterer) FilterLogBytes32(opts *bind.FilterOpts) (*RegistryTestLogBytes32Iterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_bytes32")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogBytes32Iterator{contract: _RegistryTest.contract, event: "log_bytes32", logs: logs, sub: sub}, nil
}

// WatchLogBytes32 is a free log subscription operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_RegistryTest *RegistryTestFilterer) WatchLogBytes32(opts *bind.WatchOpts, sink chan<- *RegistryTestLogBytes32) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_bytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogBytes32)
				if err := _RegistryTest.contract.UnpackLog(event, "log_bytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes32 is a log parse operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_RegistryTest *RegistryTestFilterer) ParseLogBytes32(log types.Log) (*RegistryTestLogBytes32, error) {
	event := new(RegistryTestLogBytes32)
	if err := _RegistryTest.contract.UnpackLog(event, "log_bytes32", log); err != nil {
		return nil, err
	}
	return event, nil
}

// RegistryTestLogIntIterator is returned from FilterLogInt and is used to iterate over the raw logs and unpacked data for LogInt events raised by the RegistryTest contract.
type RegistryTestLogIntIterator struct {
	Event *RegistryTestLogInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogInt represents a LogInt event raised by the RegistryTest contract.
type RegistryTestLogInt struct {
	Arg0 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogInt is a free log retrieval operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_RegistryTest *RegistryTestFilterer) FilterLogInt(opts *bind.FilterOpts) (*RegistryTestLogIntIterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_int")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogIntIterator{contract: _RegistryTest.contract, event: "log_int", logs: logs, sub: sub}, nil
}

// WatchLogInt is a free log subscription operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_RegistryTest *RegistryTestFilterer) WatchLogInt(opts *bind.WatchOpts, sink chan<- *RegistryTestLogInt) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogInt)
				if err := _RegistryTest.contract.UnpackLog(event, "log_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogInt is a log parse operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_RegistryTest *RegistryTestFilterer) ParseLogInt(log types.Log) (*RegistryTestLogInt, error) {
	event := new(RegistryTestLogInt)
	if err := _RegistryTest.contract.UnpackLog(event, "log_int", log); err != nil {
		return nil, err
	}
	return event, nil
}

// RegistryTestLogNamedAddressIterator is returned from FilterLogNamedAddress and is used to iterate over the raw logs and unpacked data for LogNamedAddress events raised by the RegistryTest contract.
type RegistryTestLogNamedAddressIterator struct {
	Event *RegistryTestLogNamedAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogNamedAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogNamedAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogNamedAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogNamedAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogNamedAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogNamedAddress represents a LogNamedAddress event raised by the RegistryTest contract.
type RegistryTestLogNamedAddress struct {
	Key string
	Val common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedAddress is a free log retrieval operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_RegistryTest *RegistryTestFilterer) FilterLogNamedAddress(opts *bind.FilterOpts) (*RegistryTestLogNamedAddressIterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_named_address")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogNamedAddressIterator{contract: _RegistryTest.contract, event: "log_named_address", logs: logs, sub: sub}, nil
}

// WatchLogNamedAddress is a free log subscription operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_RegistryTest *RegistryTestFilterer) WatchLogNamedAddress(opts *bind.WatchOpts, sink chan<- *RegistryTestLogNamedAddress) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_named_address")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogNamedAddress)
				if err := _RegistryTest.contract.UnpackLog(event, "log_named_address", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedAddress is a log parse operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_RegistryTest *RegistryTestFilterer) ParseLogNamedAddress(log types.Log) (*RegistryTestLogNamedAddress, error) {
	event := new(RegistryTestLogNamedAddress)
	if err := _RegistryTest.contract.UnpackLog(event, "log_named_address", log); err != nil {
		return nil, err
	}
	return event, nil
}

// RegistryTestLogNamedBytesIterator is returned from FilterLogNamedBytes and is used to iterate over the raw logs and unpacked data for LogNamedBytes events raised by the RegistryTest contract.
type RegistryTestLogNamedBytesIterator struct {
	Event *RegistryTestLogNamedBytes // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogNamedBytesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogNamedBytes)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogNamedBytes)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogNamedBytesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogNamedBytesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogNamedBytes represents a LogNamedBytes event raised by the RegistryTest contract.
type RegistryTestLogNamedBytes struct {
	Key string
	Val []byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedBytes is a free log retrieval operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_RegistryTest *RegistryTestFilterer) FilterLogNamedBytes(opts *bind.FilterOpts) (*RegistryTestLogNamedBytesIterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_named_bytes")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogNamedBytesIterator{contract: _RegistryTest.contract, event: "log_named_bytes", logs: logs, sub: sub}, nil
}

// WatchLogNamedBytes is a free log subscription operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_RegistryTest *RegistryTestFilterer) WatchLogNamedBytes(opts *bind.WatchOpts, sink chan<- *RegistryTestLogNamedBytes) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_named_bytes")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogNamedBytes)
				if err := _RegistryTest.contract.UnpackLog(event, "log_named_bytes", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedBytes is a log parse operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_RegistryTest *RegistryTestFilterer) ParseLogNamedBytes(log types.Log) (*RegistryTestLogNamedBytes, error) {
	event := new(RegistryTestLogNamedBytes)
	if err := _RegistryTest.contract.UnpackLog(event, "log_named_bytes", log); err != nil {
		return nil, err
	}
	return event, nil
}

// RegistryTestLogNamedBytes32Iterator is returned from FilterLogNamedBytes32 and is used to iterate over the raw logs and unpacked data for LogNamedBytes32 events raised by the RegistryTest contract.
type RegistryTestLogNamedBytes32Iterator struct {
	Event *RegistryTestLogNamedBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogNamedBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogNamedBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogNamedBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogNamedBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogNamedBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogNamedBytes32 represents a LogNamedBytes32 event raised by the RegistryTest contract.
type RegistryTestLogNamedBytes32 struct {
	Key string
	Val [32]byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedBytes32 is a free log retrieval operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_RegistryTest *RegistryTestFilterer) FilterLogNamedBytes32(opts *bind.FilterOpts) (*RegistryTestLogNamedBytes32Iterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_named_bytes32")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogNamedBytes32Iterator{contract: _RegistryTest.contract, event: "log_named_bytes32", logs: logs, sub: sub}, nil
}

// WatchLogNamedBytes32 is a free log subscription operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_RegistryTest *RegistryTestFilterer) WatchLogNamedBytes32(opts *bind.WatchOpts, sink chan<- *RegistryTestLogNamedBytes32) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_named_bytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogNamedBytes32)
				if err := _RegistryTest.contract.UnpackLog(event, "log_named_bytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedBytes32 is a log parse operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_RegistryTest *RegistryTestFilterer) ParseLogNamedBytes32(log types.Log) (*RegistryTestLogNamedBytes32, error) {
	event := new(RegistryTestLogNamedBytes32)
	if err := _RegistryTest.contract.UnpackLog(event, "log_named_bytes32", log); err != nil {
		return nil, err
	}
	return event, nil
}

// RegistryTestLogNamedDecimalIntIterator is returned from FilterLogNamedDecimalInt and is used to iterate over the raw logs and unpacked data for LogNamedDecimalInt events raised by the RegistryTest contract.
type RegistryTestLogNamedDecimalIntIterator struct {
	Event *RegistryTestLogNamedDecimalInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogNamedDecimalIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogNamedDecimalInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogNamedDecimalInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogNamedDecimalIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogNamedDecimalIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogNamedDecimalInt represents a LogNamedDecimalInt event raised by the RegistryTest contract.
type RegistryTestLogNamedDecimalInt struct {
	Key      string
	Val      *big.Int
	Decimals *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogNamedDecimalInt is a free log retrieval operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_RegistryTest *RegistryTestFilterer) FilterLogNamedDecimalInt(opts *bind.FilterOpts) (*RegistryTestLogNamedDecimalIntIterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_named_decimal_int")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogNamedDecimalIntIterator{contract: _RegistryTest.contract, event: "log_named_decimal_int", logs: logs, sub: sub}, nil
}

// WatchLogNamedDecimalInt is a free log subscription operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_RegistryTest *RegistryTestFilterer) WatchLogNamedDecimalInt(opts *bind.WatchOpts, sink chan<- *RegistryTestLogNamedDecimalInt) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_named_decimal_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogNamedDecimalInt)
				if err := _RegistryTest.contract.UnpackLog(event, "log_named_decimal_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedDecimalInt is a log parse operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_RegistryTest *RegistryTestFilterer) ParseLogNamedDecimalInt(log types.Log) (*RegistryTestLogNamedDecimalInt, error) {
	event := new(RegistryTestLogNamedDecimalInt)
	if err := _RegistryTest.contract.UnpackLog(event, "log_named_decimal_int", log); err != nil {
		return nil, err
	}
	return event, nil
}

// RegistryTestLogNamedDecimalUintIterator is returned from FilterLogNamedDecimalUint and is used to iterate over the raw logs and unpacked data for LogNamedDecimalUint events raised by the RegistryTest contract.
type RegistryTestLogNamedDecimalUintIterator struct {
	Event *RegistryTestLogNamedDecimalUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogNamedDecimalUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogNamedDecimalUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogNamedDecimalUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogNamedDecimalUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogNamedDecimalUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogNamedDecimalUint represents a LogNamedDecimalUint event raised by the RegistryTest contract.
type RegistryTestLogNamedDecimalUint struct {
	Key      string
	Val      *big.Int
	Decimals *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogNamedDecimalUint is a free log retrieval operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_RegistryTest *RegistryTestFilterer) FilterLogNamedDecimalUint(opts *bind.FilterOpts) (*RegistryTestLogNamedDecimalUintIterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_named_decimal_uint")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogNamedDecimalUintIterator{contract: _RegistryTest.contract, event: "log_named_decimal_uint", logs: logs, sub: sub}, nil
}

// WatchLogNamedDecimalUint is a free log subscription operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_RegistryTest *RegistryTestFilterer) WatchLogNamedDecimalUint(opts *bind.WatchOpts, sink chan<- *RegistryTestLogNamedDecimalUint) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_named_decimal_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogNamedDecimalUint)
				if err := _RegistryTest.contract.UnpackLog(event, "log_named_decimal_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedDecimalUint is a log parse operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_RegistryTest *RegistryTestFilterer) ParseLogNamedDecimalUint(log types.Log) (*RegistryTestLogNamedDecimalUint, error) {
	event := new(RegistryTestLogNamedDecimalUint)
	if err := _RegistryTest.contract.UnpackLog(event, "log_named_decimal_uint", log); err != nil {
		return nil, err
	}
	return event, nil
}

// RegistryTestLogNamedIntIterator is returned from FilterLogNamedInt and is used to iterate over the raw logs and unpacked data for LogNamedInt events raised by the RegistryTest contract.
type RegistryTestLogNamedIntIterator struct {
	Event *RegistryTestLogNamedInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogNamedIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogNamedInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogNamedInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogNamedIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogNamedIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogNamedInt represents a LogNamedInt event raised by the RegistryTest contract.
type RegistryTestLogNamedInt struct {
	Key string
	Val *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedInt is a free log retrieval operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_RegistryTest *RegistryTestFilterer) FilterLogNamedInt(opts *bind.FilterOpts) (*RegistryTestLogNamedIntIterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_named_int")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogNamedIntIterator{contract: _RegistryTest.contract, event: "log_named_int", logs: logs, sub: sub}, nil
}

// WatchLogNamedInt is a free log subscription operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_RegistryTest *RegistryTestFilterer) WatchLogNamedInt(opts *bind.WatchOpts, sink chan<- *RegistryTestLogNamedInt) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_named_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogNamedInt)
				if err := _RegistryTest.contract.UnpackLog(event, "log_named_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedInt is a log parse operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_RegistryTest *RegistryTestFilterer) ParseLogNamedInt(log types.Log) (*RegistryTestLogNamedInt, error) {
	event := new(RegistryTestLogNamedInt)
	if err := _RegistryTest.contract.UnpackLog(event, "log_named_int", log); err != nil {
		return nil, err
	}
	return event, nil
}

// RegistryTestLogNamedStringIterator is returned from FilterLogNamedString and is used to iterate over the raw logs and unpacked data for LogNamedString events raised by the RegistryTest contract.
type RegistryTestLogNamedStringIterator struct {
	Event *RegistryTestLogNamedString // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogNamedStringIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogNamedString)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogNamedString)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogNamedStringIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogNamedStringIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogNamedString represents a LogNamedString event raised by the RegistryTest contract.
type RegistryTestLogNamedString struct {
	Key string
	Val string
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedString is a free log retrieval operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_RegistryTest *RegistryTestFilterer) FilterLogNamedString(opts *bind.FilterOpts) (*RegistryTestLogNamedStringIterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_named_string")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogNamedStringIterator{contract: _RegistryTest.contract, event: "log_named_string", logs: logs, sub: sub}, nil
}

// WatchLogNamedString is a free log subscription operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_RegistryTest *RegistryTestFilterer) WatchLogNamedString(opts *bind.WatchOpts, sink chan<- *RegistryTestLogNamedString) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_named_string")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogNamedString)
				if err := _RegistryTest.contract.UnpackLog(event, "log_named_string", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedString is a log parse operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_RegistryTest *RegistryTestFilterer) ParseLogNamedString(log types.Log) (*RegistryTestLogNamedString, error) {
	event := new(RegistryTestLogNamedString)
	if err := _RegistryTest.contract.UnpackLog(event, "log_named_string", log); err != nil {
		return nil, err
	}
	return event, nil
}

// RegistryTestLogNamedUintIterator is returned from FilterLogNamedUint and is used to iterate over the raw logs and unpacked data for LogNamedUint events raised by the RegistryTest contract.
type RegistryTestLogNamedUintIterator struct {
	Event *RegistryTestLogNamedUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogNamedUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogNamedUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogNamedUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogNamedUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogNamedUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogNamedUint represents a LogNamedUint event raised by the RegistryTest contract.
type RegistryTestLogNamedUint struct {
	Key string
	Val *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedUint is a free log retrieval operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_RegistryTest *RegistryTestFilterer) FilterLogNamedUint(opts *bind.FilterOpts) (*RegistryTestLogNamedUintIterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_named_uint")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogNamedUintIterator{contract: _RegistryTest.contract, event: "log_named_uint", logs: logs, sub: sub}, nil
}

// WatchLogNamedUint is a free log subscription operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_RegistryTest *RegistryTestFilterer) WatchLogNamedUint(opts *bind.WatchOpts, sink chan<- *RegistryTestLogNamedUint) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_named_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogNamedUint)
				if err := _RegistryTest.contract.UnpackLog(event, "log_named_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedUint is a log parse operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_RegistryTest *RegistryTestFilterer) ParseLogNamedUint(log types.Log) (*RegistryTestLogNamedUint, error) {
	event := new(RegistryTestLogNamedUint)
	if err := _RegistryTest.contract.UnpackLog(event, "log_named_uint", log); err != nil {
		return nil, err
	}
	return event, nil
}

// RegistryTestLogStringIterator is returned from FilterLogString and is used to iterate over the raw logs and unpacked data for LogString events raised by the RegistryTest contract.
type RegistryTestLogStringIterator struct {
	Event *RegistryTestLogString // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogStringIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogString)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogString)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogStringIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogStringIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogString represents a LogString event raised by the RegistryTest contract.
type RegistryTestLogString struct {
	Arg0 string
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogString is a free log retrieval operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_RegistryTest *RegistryTestFilterer) FilterLogString(opts *bind.FilterOpts) (*RegistryTestLogStringIterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_string")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogStringIterator{contract: _RegistryTest.contract, event: "log_string", logs: logs, sub: sub}, nil
}

// WatchLogString is a free log subscription operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_RegistryTest *RegistryTestFilterer) WatchLogString(opts *bind.WatchOpts, sink chan<- *RegistryTestLogString) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_string")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogString)
				if err := _RegistryTest.contract.UnpackLog(event, "log_string", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogString is a log parse operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_RegistryTest *RegistryTestFilterer) ParseLogString(log types.Log) (*RegistryTestLogString, error) {
	event := new(RegistryTestLogString)
	if err := _RegistryTest.contract.UnpackLog(event, "log_string", log); err != nil {
		return nil, err
	}
	return event, nil
}

// RegistryTestLogUintIterator is returned from FilterLogUint and is used to iterate over the raw logs and unpacked data for LogUint events raised by the RegistryTest contract.
type RegistryTestLogUintIterator struct {
	Event *RegistryTestLogUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogUint represents a LogUint event raised by the RegistryTest contract.
type RegistryTestLogUint struct {
	Arg0 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogUint is a free log retrieval operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_RegistryTest *RegistryTestFilterer) FilterLogUint(opts *bind.FilterOpts) (*RegistryTestLogUintIterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "log_uint")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogUintIterator{contract: _RegistryTest.contract, event: "log_uint", logs: logs, sub: sub}, nil
}

// WatchLogUint is a free log subscription operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_RegistryTest *RegistryTestFilterer) WatchLogUint(opts *bind.WatchOpts, sink chan<- *RegistryTestLogUint) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "log_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogUint)
				if err := _RegistryTest.contract.UnpackLog(event, "log_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogUint is a log parse operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_RegistryTest *RegistryTestFilterer) ParseLogUint(log types.Log) (*RegistryTestLogUint, error) {
	event := new(RegistryTestLogUint)
	if err := _RegistryTest.contract.UnpackLog(event, "log_uint", log); err != nil {
		return nil, err
	}
	return event, nil
}

// RegistryTestLogsIterator is returned from FilterLogs and is used to iterate over the raw logs and unpacked data for Logs events raised by the RegistryTest contract.
type RegistryTestLogsIterator struct {
	Event *RegistryTestLogs // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryTestLogsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryTestLogs)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryTestLogs)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryTestLogsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryTestLogsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryTestLogs represents a Logs event raised by the RegistryTest contract.
type RegistryTestLogs struct {
	Arg0 []byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogs is a free log retrieval operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_RegistryTest *RegistryTestFilterer) FilterLogs(opts *bind.FilterOpts) (*RegistryTestLogsIterator, error) {

	logs, sub, err := _RegistryTest.contract.FilterLogs(opts, "logs")
	if err != nil {
		return nil, err
	}
	return &RegistryTestLogsIterator{contract: _RegistryTest.contract, event: "logs", logs: logs, sub: sub}, nil
}

// WatchLogs is a free log subscription operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_RegistryTest *RegistryTestFilterer) WatchLogs(opts *bind.WatchOpts, sink chan<- *RegistryTestLogs) (event.Subscription, error) {

	logs, sub, err := _RegistryTest.contract.WatchLogs(opts, "logs")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryTestLogs)
				if err := _RegistryTest.contract.UnpackLog(event, "logs", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogs is a log parse operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_RegistryTest *RegistryTestFilterer) ParseLogs(log types.Log) (*RegistryTestLogs, error) {
	event := new(RegistryTestLogs)
	if err := _RegistryTest.contract.UnpackLog(event, "logs", log); err != nil {
		return nil, err
	}
	return event, nil
}

// RepresentativeABI is the input ABI used to generate the binding from.
const RepresentativeABI = "[{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_madID\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"contractParticipantsFacet\",\"name\":\"pf\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractParticipantsFacet\",\"name\":\"pf\",\"type\":\"address\"}],\"name\":\"remove\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// RepresentativeBin is the compiled bytecode used for deploying new contracts.
var RepresentativeBin = "0x608060405234801561001057600080fd5b5060405161062e38038061062e83398181016040528101906100329190610120565b8060006002811061003f57fe5b60200201516000806002811061005157fe5b01819055508060016002811061006357fe5b6020020151600060016002811061007657fe5b0181905550506101c3565b600061009461008f8461017a565b610149565b905080828560208602820111156100aa57600080fd5b60005b858110156100da57816100c0888261010b565b8452602084019350602083019250506001810190506100ad565b5050509392505050565b600082601f8301126100f557600080fd5b6002610102848285610081565b91505092915050565b60008151905061011a816101ac565b92915050565b60006040828403121561013257600080fd5b6000610140848285016100e4565b91505092915050565b6000604051905081810181811067ffffffffffffffff821117156101705761016f6101aa565b5b8060405250919050565b600067ffffffffffffffff821115610195576101946101aa565b5b602082029050919050565b6000819050919050565bfe5b6101b5816101a0565b81146101c057600080fd5b50565b61045c806101d26000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80630a3b0a4f1461003b57806329092d0e1461006b575b600080fd5b610055600480360381019061005091906101f3565b61009b565b6040516100629190610311565b60405180910390f35b610085600480360381019061008091906101f3565b610132565b6040516100929190610311565b60405180910390f35b60008173ffffffffffffffffffffffffffffffffffffffff1663eb6320c73060006040518363ffffffff1660e01b81526004016100d99291906102e8565b602060405180830381600087803b1580156100f357600080fd5b505af1158015610107573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061012b919061021c565b9050919050565b60008173ffffffffffffffffffffffffffffffffffffffff1663844469b23060006040518363ffffffff1660e01b81526004016101709291906102e8565b602060405180830381600087803b15801561018a57600080fd5b505af115801561019e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c2919061021c565b9050919050565b6000813590506101d8816103f8565b92915050565b6000815190506101ed8161040f565b92915050565b60006020828403121561020557600080fd5b6000610213848285016101c9565b91505092915050565b60006020828403121561022e57600080fd5b600061023c848285016101de565b91505092915050565b600061025183836102ca565b60208301905092915050565b61026681610363565b82525050565b61027581610336565b61027f818461034e565b925061028a8261032c565b8060005b838110156102c25761029f826103d8565b6102a98782610245565b96506102b483610341565b92505060018101905061028e565b505050505050565b6102d3816103a7565b82525050565b6102e2816103b1565b82525050565b60006060820190506102fd600083018561025d565b61030a602083018461026c565b9392505050565b600060208201905061032660008301846102d9565b92915050565b6000819050919050565b600060029050919050565b6000600182019050919050565b600081905092915050565b6000819050919050565b600061036e82610387565b9050919050565b600061038082610363565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006103d16103cc836103eb565b610359565b9050919050565b60006103e482546103be565b9050919050565b60008160001c9050919050565b61040181610375565b811461040c57600080fd5b50565b610418816103b1565b811461042357600080fd5b5056fea264697066735822122003222cc595f81046d10d2e27f2ea216040076b72c0d009fdc619171b7d7d81dd64736f6c63430007060033"

// DeployRepresentative deploys a new Ethereum contract, binding an instance of Representative to it.
func DeployRepresentative(auth *bind.TransactOpts, backend bind.ContractBackend, _madID [2]*big.Int) (common.Address, *types.Transaction, *Representative, error) {
	parsed, err := abi.JSON(strings.NewReader(RepresentativeABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(RepresentativeBin), backend, _madID)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Representative{RepresentativeCaller: RepresentativeCaller{contract: contract}, RepresentativeTransactor: RepresentativeTransactor{contract: contract}, RepresentativeFilterer: RepresentativeFilterer{contract: contract}}, nil
}

// Representative is an auto generated Go binding around an Ethereum contract.
type Representative struct {
	RepresentativeCaller     // Read-only binding to the contract
	RepresentativeTransactor // Write-only binding to the contract
	RepresentativeFilterer   // Log filterer for contract events
}

// RepresentativeCaller is an auto generated read-only Go binding around an Ethereum contract.
type RepresentativeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RepresentativeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RepresentativeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RepresentativeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RepresentativeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RepresentativeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RepresentativeSession struct {
	Contract     *Representative   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RepresentativeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RepresentativeCallerSession struct {
	Contract *RepresentativeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// RepresentativeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RepresentativeTransactorSession struct {
	Contract     *RepresentativeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// RepresentativeRaw is an auto generated low-level Go binding around an Ethereum contract.
type RepresentativeRaw struct {
	Contract *Representative // Generic contract binding to access the raw methods on
}

// RepresentativeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RepresentativeCallerRaw struct {
	Contract *RepresentativeCaller // Generic read-only contract binding to access the raw methods on
}

// RepresentativeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RepresentativeTransactorRaw struct {
	Contract *RepresentativeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRepresentative creates a new instance of Representative, bound to a specific deployed contract.
func NewRepresentative(address common.Address, backend bind.ContractBackend) (*Representative, error) {
	contract, err := bindRepresentative(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Representative{RepresentativeCaller: RepresentativeCaller{contract: contract}, RepresentativeTransactor: RepresentativeTransactor{contract: contract}, RepresentativeFilterer: RepresentativeFilterer{contract: contract}}, nil
}

// NewRepresentativeCaller creates a new read-only instance of Representative, bound to a specific deployed contract.
func NewRepresentativeCaller(address common.Address, caller bind.ContractCaller) (*RepresentativeCaller, error) {
	contract, err := bindRepresentative(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RepresentativeCaller{contract: contract}, nil
}

// NewRepresentativeTransactor creates a new write-only instance of Representative, bound to a specific deployed contract.
func NewRepresentativeTransactor(address common.Address, transactor bind.ContractTransactor) (*RepresentativeTransactor, error) {
	contract, err := bindRepresentative(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RepresentativeTransactor{contract: contract}, nil
}

// NewRepresentativeFilterer creates a new log filterer instance of Representative, bound to a specific deployed contract.
func NewRepresentativeFilterer(address common.Address, filterer bind.ContractFilterer) (*RepresentativeFilterer, error) {
	contract, err := bindRepresentative(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RepresentativeFilterer{contract: contract}, nil
}

// bindRepresentative binds a generic wrapper to an already deployed contract.
func bindRepresentative(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RepresentativeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Representative *RepresentativeRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Representative.Contract.RepresentativeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Representative *RepresentativeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Representative.Contract.RepresentativeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Representative *RepresentativeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Representative.Contract.RepresentativeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Representative *RepresentativeCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Representative.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Representative *RepresentativeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Representative.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Representative *RepresentativeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Representative.Contract.contract.Transact(opts, method, params...)
}

// Add is a paid mutator transaction binding the contract method 0x0a3b0a4f.
//
// Solidity: function add(address pf) returns(uint8)
func (_Representative *RepresentativeTransactor) Add(opts *bind.TransactOpts, pf common.Address) (*types.Transaction, error) {
	return _Representative.contract.Transact(opts, "add", pf)
}

// Add is a paid mutator transaction binding the contract method 0x0a3b0a4f.
//
// Solidity: function add(address pf) returns(uint8)
func (_Representative *RepresentativeSession) Add(pf common.Address) (*types.Transaction, error) {
	return _Representative.Contract.Add(&_Representative.TransactOpts, pf)
}

// Add is a paid mutator transaction binding the contract method 0x0a3b0a4f.
//
// Solidity: function add(address pf) returns(uint8)
func (_Representative *RepresentativeTransactorSession) Add(pf common.Address) (*types.Transaction, error) {
	return _Representative.Contract.Add(&_Representative.TransactOpts, pf)
}

// Remove is a paid mutator transaction binding the contract method 0x29092d0e.
//
// Solidity: function remove(address pf) returns(uint8)
func (_Representative *RepresentativeTransactor) Remove(opts *bind.TransactOpts, pf common.Address) (*types.Transaction, error) {
	return _Representative.contract.Transact(opts, "remove", pf)
}

// Remove is a paid mutator transaction binding the contract method 0x29092d0e.
//
// Solidity: function remove(address pf) returns(uint8)
func (_Representative *RepresentativeSession) Remove(pf common.Address) (*types.Transaction, error) {
	return _Representative.Contract.Remove(&_Representative.TransactOpts, pf)
}

// Remove is a paid mutator transaction binding the contract method 0x29092d0e.
//
// Solidity: function remove(address pf) returns(uint8)
func (_Representative *RepresentativeTransactorSession) Remove(pf common.Address) (*types.Transaction, error) {
	return _Representative.Contract.Remove(&_Representative.TransactOpts, pf)
}

// SafeMathABI is the input ABI used to generate the binding from.
const SafeMathABI = "[]"

// SafeMathBin is the compiled bytecode used for deploying new contracts.
var SafeMathBin = "0x60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122068efc409d1e2d5b48fde932411230342c5509faa209bfe2009026cb117df027a64736f6c63430007060033"

// DeploySafeMath deploys a new Ethereum contract, binding an instance of SafeMath to it.
func DeploySafeMath(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SafeMath, error) {
	parsed, err := abi.JSON(strings.NewReader(SafeMathABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(SafeMathBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SafeMath{SafeMathCaller: SafeMathCaller{contract: contract}, SafeMathTransactor: SafeMathTransactor{contract: contract}, SafeMathFilterer: SafeMathFilterer{contract: contract}}, nil
}

// SafeMath is an auto generated Go binding around an Ethereum contract.
type SafeMath struct {
	SafeMathCaller     // Read-only binding to the contract
	SafeMathTransactor // Write-only binding to the contract
	SafeMathFilterer   // Log filterer for contract events
}

// SafeMathCaller is an auto generated read-only Go binding around an Ethereum contract.
type SafeMathCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeMathTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SafeMathTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeMathFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SafeMathFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeMathSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SafeMathSession struct {
	Contract     *SafeMath         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SafeMathCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SafeMathCallerSession struct {
	Contract *SafeMathCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// SafeMathTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SafeMathTransactorSession struct {
	Contract     *SafeMathTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// SafeMathRaw is an auto generated low-level Go binding around an Ethereum contract.
type SafeMathRaw struct {
	Contract *SafeMath // Generic contract binding to access the raw methods on
}

// SafeMathCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SafeMathCallerRaw struct {
	Contract *SafeMathCaller // Generic read-only contract binding to access the raw methods on
}

// SafeMathTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SafeMathTransactorRaw struct {
	Contract *SafeMathTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSafeMath creates a new instance of SafeMath, bound to a specific deployed contract.
func NewSafeMath(address common.Address, backend bind.ContractBackend) (*SafeMath, error) {
	contract, err := bindSafeMath(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SafeMath{SafeMathCaller: SafeMathCaller{contract: contract}, SafeMathTransactor: SafeMathTransactor{contract: contract}, SafeMathFilterer: SafeMathFilterer{contract: contract}}, nil
}

// NewSafeMathCaller creates a new read-only instance of SafeMath, bound to a specific deployed contract.
func NewSafeMathCaller(address common.Address, caller bind.ContractCaller) (*SafeMathCaller, error) {
	contract, err := bindSafeMath(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SafeMathCaller{contract: contract}, nil
}

// NewSafeMathTransactor creates a new write-only instance of SafeMath, bound to a specific deployed contract.
func NewSafeMathTransactor(address common.Address, transactor bind.ContractTransactor) (*SafeMathTransactor, error) {
	contract, err := bindSafeMath(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SafeMathTransactor{contract: contract}, nil
}

// NewSafeMathFilterer creates a new log filterer instance of SafeMath, bound to a specific deployed contract.
func NewSafeMathFilterer(address common.Address, filterer bind.ContractFilterer) (*SafeMathFilterer, error) {
	contract, err := bindSafeMath(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SafeMathFilterer{contract: contract}, nil
}

// bindSafeMath binds a generic wrapper to an already deployed contract.
func bindSafeMath(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SafeMathABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SafeMath *SafeMathRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _SafeMath.Contract.SafeMathCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SafeMath *SafeMathRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SafeMath.Contract.SafeMathTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SafeMath *SafeMathRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SafeMath.Contract.SafeMathTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SafeMath *SafeMathCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _SafeMath.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SafeMath *SafeMathTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SafeMath.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SafeMath *SafeMathTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SafeMath.Contract.contract.Transact(opts, method, params...)
}

// SignatureLibraryABI is the input ABI used to generate the binding from.
const SignatureLibraryABI = "[]"

// SignatureLibraryBin is the compiled bytecode used for deploying new contracts.
var SignatureLibraryBin = "0x60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207f336115592cde6dbc5c9be2145f45aa5e23fa8a4eda67dfb95145a6a330bd8a64736f6c63430007060033"

// DeploySignatureLibrary deploys a new Ethereum contract, binding an instance of SignatureLibrary to it.
func DeploySignatureLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SignatureLibrary, error) {
	parsed, err := abi.JSON(strings.NewReader(SignatureLibraryABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(SignatureLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SignatureLibrary{SignatureLibraryCaller: SignatureLibraryCaller{contract: contract}, SignatureLibraryTransactor: SignatureLibraryTransactor{contract: contract}, SignatureLibraryFilterer: SignatureLibraryFilterer{contract: contract}}, nil
}

// SignatureLibrary is an auto generated Go binding around an Ethereum contract.
type SignatureLibrary struct {
	SignatureLibraryCaller     // Read-only binding to the contract
	SignatureLibraryTransactor // Write-only binding to the contract
	SignatureLibraryFilterer   // Log filterer for contract events
}

// SignatureLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type SignatureLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SignatureLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SignatureLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SignatureLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SignatureLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SignatureLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SignatureLibrarySession struct {
	Contract     *SignatureLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SignatureLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SignatureLibraryCallerSession struct {
	Contract *SignatureLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// SignatureLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SignatureLibraryTransactorSession struct {
	Contract     *SignatureLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// SignatureLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type SignatureLibraryRaw struct {
	Contract *SignatureLibrary // Generic contract binding to access the raw methods on
}

// SignatureLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SignatureLibraryCallerRaw struct {
	Contract *SignatureLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// SignatureLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SignatureLibraryTransactorRaw struct {
	Contract *SignatureLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSignatureLibrary creates a new instance of SignatureLibrary, bound to a specific deployed contract.
func NewSignatureLibrary(address common.Address, backend bind.ContractBackend) (*SignatureLibrary, error) {
	contract, err := bindSignatureLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SignatureLibrary{SignatureLibraryCaller: SignatureLibraryCaller{contract: contract}, SignatureLibraryTransactor: SignatureLibraryTransactor{contract: contract}, SignatureLibraryFilterer: SignatureLibraryFilterer{contract: contract}}, nil
}

// NewSignatureLibraryCaller creates a new read-only instance of SignatureLibrary, bound to a specific deployed contract.
func NewSignatureLibraryCaller(address common.Address, caller bind.ContractCaller) (*SignatureLibraryCaller, error) {
	contract, err := bindSignatureLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SignatureLibraryCaller{contract: contract}, nil
}

// NewSignatureLibraryTransactor creates a new write-only instance of SignatureLibrary, bound to a specific deployed contract.
func NewSignatureLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*SignatureLibraryTransactor, error) {
	contract, err := bindSignatureLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SignatureLibraryTransactor{contract: contract}, nil
}

// NewSignatureLibraryFilterer creates a new log filterer instance of SignatureLibrary, bound to a specific deployed contract.
func NewSignatureLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*SignatureLibraryFilterer, error) {
	contract, err := bindSignatureLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SignatureLibraryFilterer{contract: contract}, nil
}

// bindSignatureLibrary binds a generic wrapper to an already deployed contract.
func bindSignatureLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SignatureLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SignatureLibrary *SignatureLibraryRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _SignatureLibrary.Contract.SignatureLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SignatureLibrary *SignatureLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SignatureLibrary.Contract.SignatureLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SignatureLibrary *SignatureLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SignatureLibrary.Contract.SignatureLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SignatureLibrary *SignatureLibraryCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _SignatureLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SignatureLibrary *SignatureLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SignatureLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SignatureLibrary *SignatureLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SignatureLibrary.Contract.contract.Transact(opts, method, params...)
}

// SimpleAuthABI is the input ABI used to generate the binding from.
const SimpleAuthABI = "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// SimpleAuthBin is the compiled bytecode used for deploying new contracts.
var SimpleAuthBin = "0x608060405234801561001057600080fd5b5033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610083600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661008860201b60201c565b6101ed565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061012c57506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610181576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603181526020018061065f6031913960400191505060405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060016000815480929190600101919050555050565b610463806101fc6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063e348da131461003b578063fad8b32a1461007f575b600080fd5b61007d6004803603602081101561005157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506100c3565b005b6100c16004803603602081101561009557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610228565b005b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061016757506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6101bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806103fd6031913960400191505060405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060016000815480929190600101919050555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806102cc57506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610321576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806103fd6031913960400191505060405180910390fd5b6001805411610398576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f43616e27742072656d6f766520616c6c206f70657261746f727300000000000081525060200191505060405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff0219169055600160008154809291906001900391905055505056fe46756e6374696f6e616c697479207265737472696374656420746f20617574686f72697a6564206f70657261746f72732ea2646970667358221220f921c6d55f15f9771f3d724c25980cc4815a8edd1314bdd6c6a6539a45d9486f64736f6c6343000706003346756e6374696f6e616c697479207265737472696374656420746f20617574686f72697a6564206f70657261746f72732e"

// DeploySimpleAuth deploys a new Ethereum contract, binding an instance of SimpleAuth to it.
func DeploySimpleAuth(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SimpleAuth, error) {
	parsed, err := abi.JSON(strings.NewReader(SimpleAuthABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(SimpleAuthBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SimpleAuth{SimpleAuthCaller: SimpleAuthCaller{contract: contract}, SimpleAuthTransactor: SimpleAuthTransactor{contract: contract}, SimpleAuthFilterer: SimpleAuthFilterer{contract: contract}}, nil
}

// SimpleAuth is an auto generated Go binding around an Ethereum contract.
type SimpleAuth struct {
	SimpleAuthCaller     // Read-only binding to the contract
	SimpleAuthTransactor // Write-only binding to the contract
	SimpleAuthFilterer   // Log filterer for contract events
}

// SimpleAuthCaller is an auto generated read-only Go binding around an Ethereum contract.
type SimpleAuthCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleAuthTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SimpleAuthTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleAuthFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SimpleAuthFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleAuthSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SimpleAuthSession struct {
	Contract     *SimpleAuth       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SimpleAuthCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SimpleAuthCallerSession struct {
	Contract *SimpleAuthCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// SimpleAuthTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SimpleAuthTransactorSession struct {
	Contract     *SimpleAuthTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// SimpleAuthRaw is an auto generated low-level Go binding around an Ethereum contract.
type SimpleAuthRaw struct {
	Contract *SimpleAuth // Generic contract binding to access the raw methods on
}

// SimpleAuthCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SimpleAuthCallerRaw struct {
	Contract *SimpleAuthCaller // Generic read-only contract binding to access the raw methods on
}

// SimpleAuthTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SimpleAuthTransactorRaw struct {
	Contract *SimpleAuthTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSimpleAuth creates a new instance of SimpleAuth, bound to a specific deployed contract.
func NewSimpleAuth(address common.Address, backend bind.ContractBackend) (*SimpleAuth, error) {
	contract, err := bindSimpleAuth(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SimpleAuth{SimpleAuthCaller: SimpleAuthCaller{contract: contract}, SimpleAuthTransactor: SimpleAuthTransactor{contract: contract}, SimpleAuthFilterer: SimpleAuthFilterer{contract: contract}}, nil
}

// NewSimpleAuthCaller creates a new read-only instance of SimpleAuth, bound to a specific deployed contract.
func NewSimpleAuthCaller(address common.Address, caller bind.ContractCaller) (*SimpleAuthCaller, error) {
	contract, err := bindSimpleAuth(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SimpleAuthCaller{contract: contract}, nil
}

// NewSimpleAuthTransactor creates a new write-only instance of SimpleAuth, bound to a specific deployed contract.
func NewSimpleAuthTransactor(address common.Address, transactor bind.ContractTransactor) (*SimpleAuthTransactor, error) {
	contract, err := bindSimpleAuth(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SimpleAuthTransactor{contract: contract}, nil
}

// NewSimpleAuthFilterer creates a new log filterer instance of SimpleAuth, bound to a specific deployed contract.
func NewSimpleAuthFilterer(address common.Address, filterer bind.ContractFilterer) (*SimpleAuthFilterer, error) {
	contract, err := bindSimpleAuth(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SimpleAuthFilterer{contract: contract}, nil
}

// bindSimpleAuth binds a generic wrapper to an already deployed contract.
func bindSimpleAuth(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SimpleAuthABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SimpleAuth *SimpleAuthRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _SimpleAuth.Contract.SimpleAuthCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SimpleAuth *SimpleAuthRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SimpleAuth.Contract.SimpleAuthTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SimpleAuth *SimpleAuthRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SimpleAuth.Contract.SimpleAuthTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SimpleAuth *SimpleAuthCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _SimpleAuth.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SimpleAuth *SimpleAuthTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SimpleAuth.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SimpleAuth *SimpleAuthTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SimpleAuth.Contract.contract.Transact(opts, method, params...)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_SimpleAuth *SimpleAuthTransactor) GrantOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _SimpleAuth.contract.Transact(opts, "grantOperator", _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_SimpleAuth *SimpleAuthSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _SimpleAuth.Contract.GrantOperator(&_SimpleAuth.TransactOpts, _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_SimpleAuth *SimpleAuthTransactorSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _SimpleAuth.Contract.GrantOperator(&_SimpleAuth.TransactOpts, _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_SimpleAuth *SimpleAuthTransactor) RevokeOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _SimpleAuth.contract.Transact(opts, "revokeOperator", _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_SimpleAuth *SimpleAuthSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _SimpleAuth.Contract.RevokeOperator(&_SimpleAuth.TransactOpts, _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_SimpleAuth *SimpleAuthTransactorSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _SimpleAuth.Contract.RevokeOperator(&_SimpleAuth.TransactOpts, _operator)
}

// SnapshotsFacetABI is the input ABI used to generate the binding from.
const SnapshotsFacetABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"startingETHDKG\",\"type\":\"bool\"}],\"name\":\"SnapshotTaken\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"src\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"extractUint256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"src\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"extractUint32\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"val\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getChainIdFromSnapshot\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getHeightFromSnapshot\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getMadHeightFromSnapshot\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getRawBlockClaimsSnapshot\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotNumber\",\"type\":\"uint256\"}],\"name\":\"getRawSignatureSnapshot\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractRegistry\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"initializeSnapshots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_signatureGroup\",\"type\":\"bytes\"}],\"name\":\"parseSignatureGroup\",\"outputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"publicKey\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[2]\",\"name\":\"signature\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"orig\",\"type\":\"bytes\"}],\"name\":\"reverse\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"reversed\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ns\",\"type\":\"uint256\"}],\"name\":\"setNextSnapshot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_signatureGroup\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_bclaims\",\"type\":\"bytes\"}],\"name\":\"snapshot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// SnapshotsFacetBin is the compiled bytecode used for deploying new contracts.
var SnapshotsFacetBin = "0x608060405234801561001057600080fd5b5060006100256100ca60201b6116151760201c565b9050338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018160000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550506100f7565b6000807f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90508091505090565b6121f6806101066000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80636372fe5111610097578063e348da1311610066578063e348da13146102d1578063e380b228146102ed578063ec11c8231461031d578063fad8b32a1461034d576100f5565b80636372fe51146102225780639be2f2df14610252578063c1312f4d14610283578063e0cf48f9146102b3576100f5565b806320d9a246116100d357806320d9a2461461018a57806335b6c632146101a65780633df8c1dc146101d65780634f4ea614146101f2576100f5565b806308ca1f25146100fa57806319f746691461012a5780631c8c8ba41461015a575b600080fd5b610114600480360381019061010f91906118f4565b610369565b6040516101219190611de9565b60405180910390f35b610144600480360381019061013f9190611a27565b610b81565b6040516101519190611f41565b60405180910390f35b610174600480360381019061016f91906119aa565b610bc5565b6040516101819190611f26565b60405180910390f35b6101a4600480360381019061019f91906119fe565b610c36565b005b6101c060048036038101906101bb9190611a27565b610e2c565b6040516101cd9190611e04565b60405180910390f35b6101f060048036038101906101eb9190611a27565b610ef9565b005b61020c60048036038101906102079190611a27565b610fe0565b6040516102199190611f41565b60405180910390f35b61023c60048036038101906102379190611a27565b611024565b6040516102499190611e04565b60405180910390f35b61026c60048036038101906102679190611969565b6110f1565b60405161027a929190611dc0565b60405180910390f35b61029d600480360381019061029891906119aa565b6111da565b6040516102aa9190611f41565b60405180910390f35b6102bb61128b565b6040516102c89190611f26565b60405180910390f35b6102eb60048036038101906102e69190611879565b6112a3565b005b61030760048036038101906103029190611a27565b6113db565b6040516103149190611f41565b60405180910390f35b61033760048036038101906103329190611969565b61141f565b6040516103449190611e04565b60405180910390f35b61036760048036038101906103629190611879565b6114e6565b005b600080610374611615565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610437576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f6e6c79206f70657261746f727320616c6c6f7765640000000000000000000081525060200191505060405180910390fd5b6000610441611642565b9050600073ffffffffffffffffffffffffffffffffffffffff168160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156104d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ce90611f06565b60405180910390fd5b6104df61166f565b6104e7611691565b61053489898080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506110f1565b80925081935050506000878760405161054e929190611da7565b60405180910390206040516020016105669190611d8c565b604051602081830303815290604052905060008460050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663063675878486886040518463ffffffff1660e01b81526004016105df93929190611e26565b60206040518083038186803b1580156105f757600080fd5b505afa15801561060b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062f91906118cb565b905080610671576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066890611ee6565b60405180910390fd5b60006106c28b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505060086111da565b905060006107158c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050600c6111da565b905060008860000160008a600101548152602001908152602001600020905060018160000160006101000a81548160ff0219169083151502179055508c8c8260010191906107649291906116b3565b508e8e8260020191906107789291906116b3565b50438160030160006101000a81548163ffffffff021916908363ffffffff160217905550818160030160046101000a81548163ffffffff021916908363ffffffff160217905550828160000160016101000a81548163ffffffff021916908363ffffffff160217905550600189600101541115610ab357600089600001600060018c600101540381526020019081526020016000206040518060c00160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108f25780601f106108c7576101008083540402835291602001916108f2565b820191906000526020600020905b8154815290600101906020018083116108d557829003601f168201915b50505050508152602001600282018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109945780601f1061096957610100808354040283529160200191610994565b820191906000526020600020905b81548152906001019060200180831161097757829003601f168201915b505050505081526020016003820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016003820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681525050905080600001511580610a0c57508960030154816080015163ffffffff16014310155b610a4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4290611e86565b60405180910390fd5b80600001511580610a72575089600401548160a0015163ffffffff16018363ffffffff1610155b610ab1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa890611ec6565b60405180910390fd5b505b60008960020160009054906101000a900460ff1615610ad157600190505b60008a60020160006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff168a600101547f6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a86868e60020160009054906101000a900460ff16604051610b4e93929190611f5c565b60405180910390a3896001016000815480929190600101919050555060009b505050505050505050505050949350505050565b600080610b8c611642565b9050600081600001600085815260200190815260200160002090508060000160019054906101000a900463ffffffff1692505050919050565b600080601f830190505b82811115610c0a57600882901b848281518110610be857fe5b602001015160f81c60f81b60f81c60ff16179150808060019003915050610bcf565b50600881901b838381518110610c1c57fe5b602001015160f81c60f81b60f81c60ff1617905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610ca6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9d90611ea6565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff1663f67187ac6040518060400160405280600981526020017f63727970746f2f763100000000000000000000000000000000000000000000008152506040518263ffffffff1660e01b8152600401610d169190611e64565b60206040518083038186803b158015610d2e57600080fd5b505afa158015610d42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6691906118a2565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610dd8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dcf90611f06565b60405180910390fd5b6000610de2611642565b9050818160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b60606000610e38611642565b905060008160000160008581526020019081526020016000209050806002018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610eeb5780601f10610ec057610100808354040283529160200191610eeb565b820191906000526020600020905b815481529060010190602001808311610ece57829003601f168201915b505050505092505050919050565b6000610f03611615565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610fc6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f6e6c79206f70657261746f727320616c6c6f7765640000000000000000000081525060200191505060405180910390fd5b6000610fd0611642565b9050828160010181905550505050565b600080610feb611642565b9050600081600001600085815260200190815260200160002090508060030160049054906101000a900463ffffffff1692505050919050565b60606000611030611642565b905060008160000160008581526020019081526020016000209050806001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110e35780601f106110b8576101008083540402835291602001916110e3565b820191906000526020600020905b8154815290600101906020018083116110c657829003601f168201915b505050505092505050919050565b6110f961166f565b611101611691565b600061110c8461141f565b9050611119816000610bc5565b8260016002811061112657fe5b60200201818152505061113a816020610bc5565b8260006002811061114757fe5b60200201818152505061115b816040610bc5565b8360036004811061116857fe5b60200201818152505061117c816060610bc5565b8360026004811061118957fe5b60200201818152505061119d816080610bc5565b836001600481106111aa57fe5b6020020181815250506111be8160a0610bc5565b836000600481106111cb57fe5b60200201818152505050915091565b60008260038301815181106111eb57fe5b602001015160f81c60f81b60f81c60ff16905082600283018151811061120d57fe5b602001015160f81c60f81b60f81c60ff1660088263ffffffff16901b17905082600183018151811061123b57fe5b602001015160f81c60f81b60f81c60ff1660088263ffffffff16901b17905082828151811061126657fe5b602001015160f81c60f81b60f81c60ff1660088263ffffffff16901b17905092915050565b600080611296611642565b9050806001015491505090565b60006112ad611615565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611370576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f6e6c79206f70657261746f727320616c6c6f7765640000000000000000000081525060200191505060405180910390fd5b600061137a611615565b905060018160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b6000806113e6611642565b9050600081600001600085815260200190815260200160002090508060030160009054906101000a900463ffffffff1692505050919050565b6060815167ffffffffffffffff8111801561143957600080fd5b506040519080825280601f01601f19166020018201604052801561146c5781602001600182028036833780820191505090505b50905060005b82518110156114e05782818151811061148757fe5b602001015160f81c60f81b8260018386510303815181106114a457fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050611472565b50919050565b60006114f0611615565b90508060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166115b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f6e6c79206f70657261746f727320616c6c6f7765640000000000000000000081525060200191505060405180910390fd5b60006115bd611615565b90508060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff0219169055505050565b6000807f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90508091505090565b6000807fd02b08f6836233a79224d6de3c3df078574b0f84d75d2a48f85a5a3cacc7291590508091505090565b6040518060800160405280600490602082028036833780820191505090505090565b6040518060400160405280600290602082028036833780820191505090505090565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826116e95760008555611730565b82601f1061170257803560ff1916838001178555611730565b82800160010185558215611730579182015b8281111561172f578235825591602001919060010190611714565b5b50905061173d9190611741565b5090565b5b8082111561175a576000816000905550600101611742565b5090565b600061177161176c84611fc4565b611f93565b90508281526020810184848401111561178957600080fd5b611794848285612105565b509392505050565b6000813590506117ab81612164565b92915050565b6000815190506117c081612164565b92915050565b6000815190506117d58161217b565b92915050565b60008083601f8401126117ed57600080fd5b8235905067ffffffffffffffff81111561180657600080fd5b60208301915083600182028301111561181e57600080fd5b9250929050565b600082601f83011261183657600080fd5b813561184684826020860161175e565b91505092915050565b60008135905061185e81612192565b92915050565b600081359050611873816121a9565b92915050565b60006020828403121561188b57600080fd5b60006118998482850161179c565b91505092915050565b6000602082840312156118b457600080fd5b60006118c2848285016117b1565b91505092915050565b6000602082840312156118dd57600080fd5b60006118eb848285016117c6565b91505092915050565b6000806000806040858703121561190a57600080fd5b600085013567ffffffffffffffff81111561192457600080fd5b611930878288016117db565b9450945050602085013567ffffffffffffffff81111561194f57600080fd5b61195b878288016117db565b925092505092959194509250565b60006020828403121561197b57600080fd5b600082013567ffffffffffffffff81111561199557600080fd5b6119a184828501611825565b91505092915050565b600080604083850312156119bd57600080fd5b600083013567ffffffffffffffff8111156119d757600080fd5b6119e385828601611825565b92505060206119f485828601611864565b9150509250929050565b600060208284031215611a1057600080fd5b6000611a1e8482850161184f565b91505092915050565b600060208284031215611a3957600080fd5b6000611a4784828501611864565b91505092915050565b6000611a5c8383611d5f565b60208301905092915050565b611a7181612008565b611a7b818461204e565b9250611a8682611ff4565b8060005b83811015611ab7578151611a9e8782611a50565b9650611aa983612034565b925050600181019050611a8a565b505050505050565b611ac881612013565b611ad28184612059565b9250611add82611ffe565b8060005b83811015611b0e578151611af58782611a50565b9650611b0083612041565b925050600181019050611ae1565b505050505050565b611b1f816120a3565b82525050565b611b36611b31826120af565b612147565b82525050565b6000611b488385612075565b9350611b55838584612105565b82840190509392505050565b6000611b6c8261201e565b611b768185612064565b9350611b86818560208601612114565b611b8f81612153565b840191505092915050565b6000611ba582612029565b611baf8185612080565b9350611bbf818560208601612114565b611bc881612153565b840191505092915050565b6000611be0602683612080565b91507f736e617073686f74206865696768747320746f6f20636c6f736520696e20457460008301527f68657265756d00000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611c46601483612080565b91507f6e696c20726567697374727920616464726573730000000000000000000000006000830152602082019050919050565b6000611c86602483612080565b91507f736e617073686f74206865696768747320746f6f20636c6f736520696e204d6160008301527f644e6574000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611cec601d83612080565b91507f5369676e617475726520766572696669636174696f6e206661696c65640000006000830152602082019050919050565b6000611d2c601283612080565b91507f6e696c2063727970746f206164647265737300000000000000000000000000006000830152602082019050919050565b611d68816120eb565b82525050565b611d77816120eb565b82525050565b611d86816120f5565b82525050565b6000611d988284611b25565b60208201915081905092915050565b6000611db4828486611b3c565b91508190509392505050565b600060c082019050611dd56000830185611abf565b611de26080830184611a68565b9392505050565b6000602082019050611dfe6000830184611b16565b92915050565b60006020820190508181036000830152611e1e8184611b61565b905092915050565b600060e0820190508181036000830152611e408186611b61565b9050611e4f6020830185611a68565b611e5c6060830184611abf565b949350505050565b60006020820190508181036000830152611e7e8184611b9a565b905092915050565b60006020820190508181036000830152611e9f81611bd3565b9050919050565b60006020820190508181036000830152611ebf81611c39565b9050919050565b60006020820190508181036000830152611edf81611c79565b9050919050565b60006020820190508181036000830152611eff81611cdf565b9050919050565b60006020820190508181036000830152611f1f81611d1f565b9050919050565b6000602082019050611f3b6000830184611d6e565b92915050565b6000602082019050611f566000830184611d7d565b92915050565b6000606082019050611f716000830186611d7d565b611f7e6020830185611d7d565b611f8b6040830184611b16565b949350505050565b6000604051905081810181811067ffffffffffffffff82111715611fba57611fb9612151565b5b8060405250919050565b600067ffffffffffffffff821115611fdf57611fde612151565b5b601f19601f8301169050602081019050919050565b6000819050919050565b6000819050919050565b600060029050919050565b600060049050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600081905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600061209c826120cb565b9050919050565b60008115159050919050565b6000819050919050565b60006120c482612091565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b82818337600083830152505050565b60005b83811015612132578082015181840152602081019050612117565b83811115612141576000848401525b50505050565b6000819050919050565bfe5b6000601f19601f8301169050919050565b61216d81612091565b811461217857600080fd5b50565b612184816120a3565b811461218f57600080fd5b50565b61219b816120b9565b81146121a657600080fd5b50565b6121b2816120eb565b81146121bd57600080fd5b5056fea26469706673582212201e02a4a0fe3ab6ededed5f695814877866522b337741ccc87cc297dc2018743964736f6c63430007060033"

// DeploySnapshotsFacet deploys a new Ethereum contract, binding an instance of SnapshotsFacet to it.
func DeploySnapshotsFacet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SnapshotsFacet, error) {
	parsed, err := abi.JSON(strings.NewReader(SnapshotsFacetABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(SnapshotsFacetBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SnapshotsFacet{SnapshotsFacetCaller: SnapshotsFacetCaller{contract: contract}, SnapshotsFacetTransactor: SnapshotsFacetTransactor{contract: contract}, SnapshotsFacetFilterer: SnapshotsFacetFilterer{contract: contract}}, nil
}

// SnapshotsFacet is an auto generated Go binding around an Ethereum contract.
type SnapshotsFacet struct {
	SnapshotsFacetCaller     // Read-only binding to the contract
	SnapshotsFacetTransactor // Write-only binding to the contract
	SnapshotsFacetFilterer   // Log filterer for contract events
}

// SnapshotsFacetCaller is an auto generated read-only Go binding around an Ethereum contract.
type SnapshotsFacetCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SnapshotsFacetTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SnapshotsFacetTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SnapshotsFacetFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SnapshotsFacetFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SnapshotsFacetSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SnapshotsFacetSession struct {
	Contract     *SnapshotsFacet   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SnapshotsFacetCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SnapshotsFacetCallerSession struct {
	Contract *SnapshotsFacetCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// SnapshotsFacetTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SnapshotsFacetTransactorSession struct {
	Contract     *SnapshotsFacetTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// SnapshotsFacetRaw is an auto generated low-level Go binding around an Ethereum contract.
type SnapshotsFacetRaw struct {
	Contract *SnapshotsFacet // Generic contract binding to access the raw methods on
}

// SnapshotsFacetCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SnapshotsFacetCallerRaw struct {
	Contract *SnapshotsFacetCaller // Generic read-only contract binding to access the raw methods on
}

// SnapshotsFacetTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SnapshotsFacetTransactorRaw struct {
	Contract *SnapshotsFacetTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSnapshotsFacet creates a new instance of SnapshotsFacet, bound to a specific deployed contract.
func NewSnapshotsFacet(address common.Address, backend bind.ContractBackend) (*SnapshotsFacet, error) {
	contract, err := bindSnapshotsFacet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SnapshotsFacet{SnapshotsFacetCaller: SnapshotsFacetCaller{contract: contract}, SnapshotsFacetTransactor: SnapshotsFacetTransactor{contract: contract}, SnapshotsFacetFilterer: SnapshotsFacetFilterer{contract: contract}}, nil
}

// NewSnapshotsFacetCaller creates a new read-only instance of SnapshotsFacet, bound to a specific deployed contract.
func NewSnapshotsFacetCaller(address common.Address, caller bind.ContractCaller) (*SnapshotsFacetCaller, error) {
	contract, err := bindSnapshotsFacet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SnapshotsFacetCaller{contract: contract}, nil
}

// NewSnapshotsFacetTransactor creates a new write-only instance of SnapshotsFacet, bound to a specific deployed contract.
func NewSnapshotsFacetTransactor(address common.Address, transactor bind.ContractTransactor) (*SnapshotsFacetTransactor, error) {
	contract, err := bindSnapshotsFacet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SnapshotsFacetTransactor{contract: contract}, nil
}

// NewSnapshotsFacetFilterer creates a new log filterer instance of SnapshotsFacet, bound to a specific deployed contract.
func NewSnapshotsFacetFilterer(address common.Address, filterer bind.ContractFilterer) (*SnapshotsFacetFilterer, error) {
	contract, err := bindSnapshotsFacet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SnapshotsFacetFilterer{contract: contract}, nil
}

// bindSnapshotsFacet binds a generic wrapper to an already deployed contract.
func bindSnapshotsFacet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SnapshotsFacetABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SnapshotsFacet *SnapshotsFacetRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _SnapshotsFacet.Contract.SnapshotsFacetCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SnapshotsFacet *SnapshotsFacetRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.SnapshotsFacetTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SnapshotsFacet *SnapshotsFacetRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.SnapshotsFacetTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SnapshotsFacet *SnapshotsFacetCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _SnapshotsFacet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SnapshotsFacet *SnapshotsFacetTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SnapshotsFacet *SnapshotsFacetTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.contract.Transact(opts, method, params...)
}

// ExtractUint256 is a free data retrieval call binding the contract method 0x1c8c8ba4.
//
// Solidity: function extractUint256(bytes src, uint256 offset) pure returns(uint256 val)
func (_SnapshotsFacet *SnapshotsFacetCaller) ExtractUint256(opts *bind.CallOpts, src []byte, offset *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _SnapshotsFacet.contract.Call(opts, out, "extractUint256", src, offset)
	return *ret0, err
}

// ExtractUint256 is a free data retrieval call binding the contract method 0x1c8c8ba4.
//
// Solidity: function extractUint256(bytes src, uint256 offset) pure returns(uint256 val)
func (_SnapshotsFacet *SnapshotsFacetSession) ExtractUint256(src []byte, offset *big.Int) (*big.Int, error) {
	return _SnapshotsFacet.Contract.ExtractUint256(&_SnapshotsFacet.CallOpts, src, offset)
}

// ExtractUint256 is a free data retrieval call binding the contract method 0x1c8c8ba4.
//
// Solidity: function extractUint256(bytes src, uint256 offset) pure returns(uint256 val)
func (_SnapshotsFacet *SnapshotsFacetCallerSession) ExtractUint256(src []byte, offset *big.Int) (*big.Int, error) {
	return _SnapshotsFacet.Contract.ExtractUint256(&_SnapshotsFacet.CallOpts, src, offset)
}

// ExtractUint32 is a free data retrieval call binding the contract method 0xc1312f4d.
//
// Solidity: function extractUint32(bytes src, uint256 idx) pure returns(uint32 val)
func (_SnapshotsFacet *SnapshotsFacetCaller) ExtractUint32(opts *bind.CallOpts, src []byte, idx *big.Int) (uint32, error) {
	var (
		ret0 = new(uint32)
	)
	out := ret0
	err := _SnapshotsFacet.contract.Call(opts, out, "extractUint32", src, idx)
	return *ret0, err
}

// ExtractUint32 is a free data retrieval call binding the contract method 0xc1312f4d.
//
// Solidity: function extractUint32(bytes src, uint256 idx) pure returns(uint32 val)
func (_SnapshotsFacet *SnapshotsFacetSession) ExtractUint32(src []byte, idx *big.Int) (uint32, error) {
	return _SnapshotsFacet.Contract.ExtractUint32(&_SnapshotsFacet.CallOpts, src, idx)
}

// ExtractUint32 is a free data retrieval call binding the contract method 0xc1312f4d.
//
// Solidity: function extractUint32(bytes src, uint256 idx) pure returns(uint32 val)
func (_SnapshotsFacet *SnapshotsFacetCallerSession) ExtractUint32(src []byte, idx *big.Int) (uint32, error) {
	return _SnapshotsFacet.Contract.ExtractUint32(&_SnapshotsFacet.CallOpts, src, idx)
}

// GetChainIdFromSnapshot is a free data retrieval call binding the contract method 0x19f74669.
//
// Solidity: function getChainIdFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_SnapshotsFacet *SnapshotsFacetCaller) GetChainIdFromSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) (uint32, error) {
	var (
		ret0 = new(uint32)
	)
	out := ret0
	err := _SnapshotsFacet.contract.Call(opts, out, "getChainIdFromSnapshot", snapshotNumber)
	return *ret0, err
}

// GetChainIdFromSnapshot is a free data retrieval call binding the contract method 0x19f74669.
//
// Solidity: function getChainIdFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_SnapshotsFacet *SnapshotsFacetSession) GetChainIdFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _SnapshotsFacet.Contract.GetChainIdFromSnapshot(&_SnapshotsFacet.CallOpts, snapshotNumber)
}

// GetChainIdFromSnapshot is a free data retrieval call binding the contract method 0x19f74669.
//
// Solidity: function getChainIdFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_SnapshotsFacet *SnapshotsFacetCallerSession) GetChainIdFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _SnapshotsFacet.Contract.GetChainIdFromSnapshot(&_SnapshotsFacet.CallOpts, snapshotNumber)
}

// GetHeightFromSnapshot is a free data retrieval call binding the contract method 0xe380b228.
//
// Solidity: function getHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_SnapshotsFacet *SnapshotsFacetCaller) GetHeightFromSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) (uint32, error) {
	var (
		ret0 = new(uint32)
	)
	out := ret0
	err := _SnapshotsFacet.contract.Call(opts, out, "getHeightFromSnapshot", snapshotNumber)
	return *ret0, err
}

// GetHeightFromSnapshot is a free data retrieval call binding the contract method 0xe380b228.
//
// Solidity: function getHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_SnapshotsFacet *SnapshotsFacetSession) GetHeightFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _SnapshotsFacet.Contract.GetHeightFromSnapshot(&_SnapshotsFacet.CallOpts, snapshotNumber)
}

// GetHeightFromSnapshot is a free data retrieval call binding the contract method 0xe380b228.
//
// Solidity: function getHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_SnapshotsFacet *SnapshotsFacetCallerSession) GetHeightFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _SnapshotsFacet.Contract.GetHeightFromSnapshot(&_SnapshotsFacet.CallOpts, snapshotNumber)
}

// GetMadHeightFromSnapshot is a free data retrieval call binding the contract method 0x4f4ea614.
//
// Solidity: function getMadHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_SnapshotsFacet *SnapshotsFacetCaller) GetMadHeightFromSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) (uint32, error) {
	var (
		ret0 = new(uint32)
	)
	out := ret0
	err := _SnapshotsFacet.contract.Call(opts, out, "getMadHeightFromSnapshot", snapshotNumber)
	return *ret0, err
}

// GetMadHeightFromSnapshot is a free data retrieval call binding the contract method 0x4f4ea614.
//
// Solidity: function getMadHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_SnapshotsFacet *SnapshotsFacetSession) GetMadHeightFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _SnapshotsFacet.Contract.GetMadHeightFromSnapshot(&_SnapshotsFacet.CallOpts, snapshotNumber)
}

// GetMadHeightFromSnapshot is a free data retrieval call binding the contract method 0x4f4ea614.
//
// Solidity: function getMadHeightFromSnapshot(uint256 snapshotNumber) view returns(uint32)
func (_SnapshotsFacet *SnapshotsFacetCallerSession) GetMadHeightFromSnapshot(snapshotNumber *big.Int) (uint32, error) {
	return _SnapshotsFacet.Contract.GetMadHeightFromSnapshot(&_SnapshotsFacet.CallOpts, snapshotNumber)
}

// GetRawBlockClaimsSnapshot is a free data retrieval call binding the contract method 0x6372fe51.
//
// Solidity: function getRawBlockClaimsSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_SnapshotsFacet *SnapshotsFacetCaller) GetRawBlockClaimsSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _SnapshotsFacet.contract.Call(opts, out, "getRawBlockClaimsSnapshot", snapshotNumber)
	return *ret0, err
}

// GetRawBlockClaimsSnapshot is a free data retrieval call binding the contract method 0x6372fe51.
//
// Solidity: function getRawBlockClaimsSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_SnapshotsFacet *SnapshotsFacetSession) GetRawBlockClaimsSnapshot(snapshotNumber *big.Int) ([]byte, error) {
	return _SnapshotsFacet.Contract.GetRawBlockClaimsSnapshot(&_SnapshotsFacet.CallOpts, snapshotNumber)
}

// GetRawBlockClaimsSnapshot is a free data retrieval call binding the contract method 0x6372fe51.
//
// Solidity: function getRawBlockClaimsSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_SnapshotsFacet *SnapshotsFacetCallerSession) GetRawBlockClaimsSnapshot(snapshotNumber *big.Int) ([]byte, error) {
	return _SnapshotsFacet.Contract.GetRawBlockClaimsSnapshot(&_SnapshotsFacet.CallOpts, snapshotNumber)
}

// GetRawSignatureSnapshot is a free data retrieval call binding the contract method 0x35b6c632.
//
// Solidity: function getRawSignatureSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_SnapshotsFacet *SnapshotsFacetCaller) GetRawSignatureSnapshot(opts *bind.CallOpts, snapshotNumber *big.Int) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _SnapshotsFacet.contract.Call(opts, out, "getRawSignatureSnapshot", snapshotNumber)
	return *ret0, err
}

// GetRawSignatureSnapshot is a free data retrieval call binding the contract method 0x35b6c632.
//
// Solidity: function getRawSignatureSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_SnapshotsFacet *SnapshotsFacetSession) GetRawSignatureSnapshot(snapshotNumber *big.Int) ([]byte, error) {
	return _SnapshotsFacet.Contract.GetRawSignatureSnapshot(&_SnapshotsFacet.CallOpts, snapshotNumber)
}

// GetRawSignatureSnapshot is a free data retrieval call binding the contract method 0x35b6c632.
//
// Solidity: function getRawSignatureSnapshot(uint256 snapshotNumber) view returns(bytes)
func (_SnapshotsFacet *SnapshotsFacetCallerSession) GetRawSignatureSnapshot(snapshotNumber *big.Int) ([]byte, error) {
	return _SnapshotsFacet.Contract.GetRawSignatureSnapshot(&_SnapshotsFacet.CallOpts, snapshotNumber)
}

// NextSnapshot is a free data retrieval call binding the contract method 0xe0cf48f9.
//
// Solidity: function nextSnapshot() view returns(uint256)
func (_SnapshotsFacet *SnapshotsFacetCaller) NextSnapshot(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _SnapshotsFacet.contract.Call(opts, out, "nextSnapshot")
	return *ret0, err
}

// NextSnapshot is a free data retrieval call binding the contract method 0xe0cf48f9.
//
// Solidity: function nextSnapshot() view returns(uint256)
func (_SnapshotsFacet *SnapshotsFacetSession) NextSnapshot() (*big.Int, error) {
	return _SnapshotsFacet.Contract.NextSnapshot(&_SnapshotsFacet.CallOpts)
}

// NextSnapshot is a free data retrieval call binding the contract method 0xe0cf48f9.
//
// Solidity: function nextSnapshot() view returns(uint256)
func (_SnapshotsFacet *SnapshotsFacetCallerSession) NextSnapshot() (*big.Int, error) {
	return _SnapshotsFacet.Contract.NextSnapshot(&_SnapshotsFacet.CallOpts)
}

// ParseSignatureGroup is a free data retrieval call binding the contract method 0x9be2f2df.
//
// Solidity: function parseSignatureGroup(bytes _signatureGroup) pure returns(uint256[4] publicKey, uint256[2] signature)
func (_SnapshotsFacet *SnapshotsFacetCaller) ParseSignatureGroup(opts *bind.CallOpts, _signatureGroup []byte) (struct {
	PublicKey [4]*big.Int
	Signature [2]*big.Int
}, error) {
	ret := new(struct {
		PublicKey [4]*big.Int
		Signature [2]*big.Int
	})
	out := ret
	err := _SnapshotsFacet.contract.Call(opts, out, "parseSignatureGroup", _signatureGroup)
	return *ret, err
}

// ParseSignatureGroup is a free data retrieval call binding the contract method 0x9be2f2df.
//
// Solidity: function parseSignatureGroup(bytes _signatureGroup) pure returns(uint256[4] publicKey, uint256[2] signature)
func (_SnapshotsFacet *SnapshotsFacetSession) ParseSignatureGroup(_signatureGroup []byte) (struct {
	PublicKey [4]*big.Int
	Signature [2]*big.Int
}, error) {
	return _SnapshotsFacet.Contract.ParseSignatureGroup(&_SnapshotsFacet.CallOpts, _signatureGroup)
}

// ParseSignatureGroup is a free data retrieval call binding the contract method 0x9be2f2df.
//
// Solidity: function parseSignatureGroup(bytes _signatureGroup) pure returns(uint256[4] publicKey, uint256[2] signature)
func (_SnapshotsFacet *SnapshotsFacetCallerSession) ParseSignatureGroup(_signatureGroup []byte) (struct {
	PublicKey [4]*big.Int
	Signature [2]*big.Int
}, error) {
	return _SnapshotsFacet.Contract.ParseSignatureGroup(&_SnapshotsFacet.CallOpts, _signatureGroup)
}

// Reverse is a free data retrieval call binding the contract method 0xec11c823.
//
// Solidity: function reverse(bytes orig) pure returns(bytes reversed)
func (_SnapshotsFacet *SnapshotsFacetCaller) Reverse(opts *bind.CallOpts, orig []byte) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _SnapshotsFacet.contract.Call(opts, out, "reverse", orig)
	return *ret0, err
}

// Reverse is a free data retrieval call binding the contract method 0xec11c823.
//
// Solidity: function reverse(bytes orig) pure returns(bytes reversed)
func (_SnapshotsFacet *SnapshotsFacetSession) Reverse(orig []byte) ([]byte, error) {
	return _SnapshotsFacet.Contract.Reverse(&_SnapshotsFacet.CallOpts, orig)
}

// Reverse is a free data retrieval call binding the contract method 0xec11c823.
//
// Solidity: function reverse(bytes orig) pure returns(bytes reversed)
func (_SnapshotsFacet *SnapshotsFacetCallerSession) Reverse(orig []byte) ([]byte, error) {
	return _SnapshotsFacet.Contract.Reverse(&_SnapshotsFacet.CallOpts, orig)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactor) GrantOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.contract.Transact(opts, "grantOperator", who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_SnapshotsFacet *SnapshotsFacetSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.GrantOperator(&_SnapshotsFacet.TransactOpts, who)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address who) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactorSession) GrantOperator(who common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.GrantOperator(&_SnapshotsFacet.TransactOpts, who)
}

// InitializeSnapshots is a paid mutator transaction binding the contract method 0x20d9a246.
//
// Solidity: function initializeSnapshots(address registry) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactor) InitializeSnapshots(opts *bind.TransactOpts, registry common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.contract.Transact(opts, "initializeSnapshots", registry)
}

// InitializeSnapshots is a paid mutator transaction binding the contract method 0x20d9a246.
//
// Solidity: function initializeSnapshots(address registry) returns()
func (_SnapshotsFacet *SnapshotsFacetSession) InitializeSnapshots(registry common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.InitializeSnapshots(&_SnapshotsFacet.TransactOpts, registry)
}

// InitializeSnapshots is a paid mutator transaction binding the contract method 0x20d9a246.
//
// Solidity: function initializeSnapshots(address registry) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactorSession) InitializeSnapshots(registry common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.InitializeSnapshots(&_SnapshotsFacet.TransactOpts, registry)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactor) RevokeOperator(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.contract.Transact(opts, "revokeOperator", who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_SnapshotsFacet *SnapshotsFacetSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.RevokeOperator(&_SnapshotsFacet.TransactOpts, who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address who) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactorSession) RevokeOperator(who common.Address) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.RevokeOperator(&_SnapshotsFacet.TransactOpts, who)
}

// SetNextSnapshot is a paid mutator transaction binding the contract method 0x3df8c1dc.
//
// Solidity: function setNextSnapshot(uint256 ns) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactor) SetNextSnapshot(opts *bind.TransactOpts, ns *big.Int) (*types.Transaction, error) {
	return _SnapshotsFacet.contract.Transact(opts, "setNextSnapshot", ns)
}

// SetNextSnapshot is a paid mutator transaction binding the contract method 0x3df8c1dc.
//
// Solidity: function setNextSnapshot(uint256 ns) returns()
func (_SnapshotsFacet *SnapshotsFacetSession) SetNextSnapshot(ns *big.Int) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.SetNextSnapshot(&_SnapshotsFacet.TransactOpts, ns)
}

// SetNextSnapshot is a paid mutator transaction binding the contract method 0x3df8c1dc.
//
// Solidity: function setNextSnapshot(uint256 ns) returns()
func (_SnapshotsFacet *SnapshotsFacetTransactorSession) SetNextSnapshot(ns *big.Int) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.SetNextSnapshot(&_SnapshotsFacet.TransactOpts, ns)
}

// Snapshot is a paid mutator transaction binding the contract method 0x08ca1f25.
//
// Solidity: function snapshot(bytes _signatureGroup, bytes _bclaims) returns(bool)
func (_SnapshotsFacet *SnapshotsFacetTransactor) Snapshot(opts *bind.TransactOpts, _signatureGroup []byte, _bclaims []byte) (*types.Transaction, error) {
	return _SnapshotsFacet.contract.Transact(opts, "snapshot", _signatureGroup, _bclaims)
}

// Snapshot is a paid mutator transaction binding the contract method 0x08ca1f25.
//
// Solidity: function snapshot(bytes _signatureGroup, bytes _bclaims) returns(bool)
func (_SnapshotsFacet *SnapshotsFacetSession) Snapshot(_signatureGroup []byte, _bclaims []byte) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.Snapshot(&_SnapshotsFacet.TransactOpts, _signatureGroup, _bclaims)
}

// Snapshot is a paid mutator transaction binding the contract method 0x08ca1f25.
//
// Solidity: function snapshot(bytes _signatureGroup, bytes _bclaims) returns(bool)
func (_SnapshotsFacet *SnapshotsFacetTransactorSession) Snapshot(_signatureGroup []byte, _bclaims []byte) (*types.Transaction, error) {
	return _SnapshotsFacet.Contract.Snapshot(&_SnapshotsFacet.TransactOpts, _signatureGroup, _bclaims)
}

// SnapshotsFacetSnapshotTakenIterator is returned from FilterSnapshotTaken and is used to iterate over the raw logs and unpacked data for SnapshotTaken events raised by the SnapshotsFacet contract.
type SnapshotsFacetSnapshotTakenIterator struct {
	Event *SnapshotsFacetSnapshotTaken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SnapshotsFacetSnapshotTakenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SnapshotsFacetSnapshotTaken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SnapshotsFacetSnapshotTaken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SnapshotsFacetSnapshotTakenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SnapshotsFacetSnapshotTakenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SnapshotsFacetSnapshotTaken represents a SnapshotTaken event raised by the SnapshotsFacet contract.
type SnapshotsFacetSnapshotTaken struct {
	ChainId        uint32
	Epoch          *big.Int
	Height         uint32
	Validator      common.Address
	StartingETHDKG bool
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterSnapshotTaken is a free log retrieval operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_SnapshotsFacet *SnapshotsFacetFilterer) FilterSnapshotTaken(opts *bind.FilterOpts, epoch []*big.Int, validator []common.Address) (*SnapshotsFacetSnapshotTakenIterator, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _SnapshotsFacet.contract.FilterLogs(opts, "SnapshotTaken", epochRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return &SnapshotsFacetSnapshotTakenIterator{contract: _SnapshotsFacet.contract, event: "SnapshotTaken", logs: logs, sub: sub}, nil
}

// WatchSnapshotTaken is a free log subscription operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_SnapshotsFacet *SnapshotsFacetFilterer) WatchSnapshotTaken(opts *bind.WatchOpts, sink chan<- *SnapshotsFacetSnapshotTaken, epoch []*big.Int, validator []common.Address) (event.Subscription, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _SnapshotsFacet.contract.WatchLogs(opts, "SnapshotTaken", epochRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SnapshotsFacetSnapshotTaken)
				if err := _SnapshotsFacet.contract.UnpackLog(event, "SnapshotTaken", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSnapshotTaken is a log parse operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_SnapshotsFacet *SnapshotsFacetFilterer) ParseSnapshotTaken(log types.Log) (*SnapshotsFacetSnapshotTaken, error) {
	event := new(SnapshotsFacetSnapshotTaken)
	if err := _SnapshotsFacet.contract.UnpackLog(event, "SnapshotTaken", log); err != nil {
		return nil, err
	}
	return event, nil
}

// SnapshotsFacetTestABI is the input ABI used to generate the binding from.
const SnapshotsFacetTestABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"log_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"log_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"log_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"name\":\"log_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"log_named_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\"}],\"name\":\"log_named_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\"}],\"name\":\"log_named_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"}],\"name\":\"log_named_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"}],\"name\":\"log_named_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"log_named_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"log_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"logs\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testExtractUint256\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testExtractUint32\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testNextSnapshot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testSnapshot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testSnapshot2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// SnapshotsFacetTestBin is the compiled bytecode used for deploying new contracts.
var SnapshotsFacetTestBin = ""

// DeploySnapshotsFacetTest deploys a new Ethereum contract, binding an instance of SnapshotsFacetTest to it.
func DeploySnapshotsFacetTest(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SnapshotsFacetTest, error) {
	parsed, err := abi.JSON(strings.NewReader(SnapshotsFacetTestABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(SnapshotsFacetTestBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SnapshotsFacetTest{SnapshotsFacetTestCaller: SnapshotsFacetTestCaller{contract: contract}, SnapshotsFacetTestTransactor: SnapshotsFacetTestTransactor{contract: contract}, SnapshotsFacetTestFilterer: SnapshotsFacetTestFilterer{contract: contract}}, nil
}

// SnapshotsFacetTest is an auto generated Go binding around an Ethereum contract.
type SnapshotsFacetTest struct {
	SnapshotsFacetTestCaller     // Read-only binding to the contract
	SnapshotsFacetTestTransactor // Write-only binding to the contract
	SnapshotsFacetTestFilterer   // Log filterer for contract events
}

// SnapshotsFacetTestCaller is an auto generated read-only Go binding around an Ethereum contract.
type SnapshotsFacetTestCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SnapshotsFacetTestTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SnapshotsFacetTestTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SnapshotsFacetTestFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SnapshotsFacetTestFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SnapshotsFacetTestSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SnapshotsFacetTestSession struct {
	Contract     *SnapshotsFacetTest // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// SnapshotsFacetTestCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SnapshotsFacetTestCallerSession struct {
	Contract *SnapshotsFacetTestCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// SnapshotsFacetTestTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SnapshotsFacetTestTransactorSession struct {
	Contract     *SnapshotsFacetTestTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// SnapshotsFacetTestRaw is an auto generated low-level Go binding around an Ethereum contract.
type SnapshotsFacetTestRaw struct {
	Contract *SnapshotsFacetTest // Generic contract binding to access the raw methods on
}

// SnapshotsFacetTestCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SnapshotsFacetTestCallerRaw struct {
	Contract *SnapshotsFacetTestCaller // Generic read-only contract binding to access the raw methods on
}

// SnapshotsFacetTestTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SnapshotsFacetTestTransactorRaw struct {
	Contract *SnapshotsFacetTestTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSnapshotsFacetTest creates a new instance of SnapshotsFacetTest, bound to a specific deployed contract.
func NewSnapshotsFacetTest(address common.Address, backend bind.ContractBackend) (*SnapshotsFacetTest, error) {
	contract, err := bindSnapshotsFacetTest(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SnapshotsFacetTest{SnapshotsFacetTestCaller: SnapshotsFacetTestCaller{contract: contract}, SnapshotsFacetTestTransactor: SnapshotsFacetTestTransactor{contract: contract}, SnapshotsFacetTestFilterer: SnapshotsFacetTestFilterer{contract: contract}}, nil
}

// NewSnapshotsFacetTestCaller creates a new read-only instance of SnapshotsFacetTest, bound to a specific deployed contract.
func NewSnapshotsFacetTestCaller(address common.Address, caller bind.ContractCaller) (*SnapshotsFacetTestCaller, error) {
	contract, err := bindSnapshotsFacetTest(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SnapshotsFacetTestCaller{contract: contract}, nil
}

// NewSnapshotsFacetTestTransactor creates a new write-only instance of SnapshotsFacetTest, bound to a specific deployed contract.
func NewSnapshotsFacetTestTransactor(address common.Address, transactor bind.ContractTransactor) (*SnapshotsFacetTestTransactor, error) {
	contract, err := bindSnapshotsFacetTest(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SnapshotsFacetTestTransactor{contract: contract}, nil
}

// NewSnapshotsFacetTestFilterer creates a new log filterer instance of SnapshotsFacetTest, bound to a specific deployed contract.
func NewSnapshotsFacetTestFilterer(address common.Address, filterer bind.ContractFilterer) (*SnapshotsFacetTestFilterer, error) {
	contract, err := bindSnapshotsFacetTest(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SnapshotsFacetTestFilterer{contract: contract}, nil
}

// bindSnapshotsFacetTest binds a generic wrapper to an already deployed contract.
func bindSnapshotsFacetTest(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SnapshotsFacetTestABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SnapshotsFacetTest *SnapshotsFacetTestRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _SnapshotsFacetTest.Contract.SnapshotsFacetTestCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SnapshotsFacetTest *SnapshotsFacetTestRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SnapshotsFacetTest.Contract.SnapshotsFacetTestTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SnapshotsFacetTest *SnapshotsFacetTestRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SnapshotsFacetTest.Contract.SnapshotsFacetTestTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SnapshotsFacetTest *SnapshotsFacetTestCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _SnapshotsFacetTest.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SnapshotsFacetTest *SnapshotsFacetTestTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SnapshotsFacetTest.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SnapshotsFacetTest *SnapshotsFacetTestTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SnapshotsFacetTest.Contract.contract.Transact(opts, method, params...)
}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_SnapshotsFacetTest *SnapshotsFacetTestCaller) ISTEST(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _SnapshotsFacetTest.contract.Call(opts, out, "IS_TEST")
	return *ret0, err
}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_SnapshotsFacetTest *SnapshotsFacetTestSession) ISTEST() (bool, error) {
	return _SnapshotsFacetTest.Contract.ISTEST(&_SnapshotsFacetTest.CallOpts)
}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_SnapshotsFacetTest *SnapshotsFacetTestCallerSession) ISTEST() (bool, error) {
	return _SnapshotsFacetTest.Contract.ISTEST(&_SnapshotsFacetTest.CallOpts)
}

// Failed is a free data retrieval call binding the contract method 0xba414fa6.
//
// Solidity: function failed() view returns(bool)
func (_SnapshotsFacetTest *SnapshotsFacetTestCaller) Failed(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _SnapshotsFacetTest.contract.Call(opts, out, "failed")
	return *ret0, err
}

// Failed is a free data retrieval call binding the contract method 0xba414fa6.
//
// Solidity: function failed() view returns(bool)
func (_SnapshotsFacetTest *SnapshotsFacetTestSession) Failed() (bool, error) {
	return _SnapshotsFacetTest.Contract.Failed(&_SnapshotsFacetTest.CallOpts)
}

// Failed is a free data retrieval call binding the contract method 0xba414fa6.
//
// Solidity: function failed() view returns(bool)
func (_SnapshotsFacetTest *SnapshotsFacetTestCallerSession) Failed() (bool, error) {
	return _SnapshotsFacetTest.Contract.Failed(&_SnapshotsFacetTest.CallOpts)
}

// SetUp is a paid mutator transaction binding the contract method 0x0a9254e4.
//
// Solidity: function setUp() returns()
func (_SnapshotsFacetTest *SnapshotsFacetTestTransactor) SetUp(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SnapshotsFacetTest.contract.Transact(opts, "setUp")
}

// SetUp is a paid mutator transaction binding the contract method 0x0a9254e4.
//
// Solidity: function setUp() returns()
func (_SnapshotsFacetTest *SnapshotsFacetTestSession) SetUp() (*types.Transaction, error) {
	return _SnapshotsFacetTest.Contract.SetUp(&_SnapshotsFacetTest.TransactOpts)
}

// SetUp is a paid mutator transaction binding the contract method 0x0a9254e4.
//
// Solidity: function setUp() returns()
func (_SnapshotsFacetTest *SnapshotsFacetTestTransactorSession) SetUp() (*types.Transaction, error) {
	return _SnapshotsFacetTest.Contract.SetUp(&_SnapshotsFacetTest.TransactOpts)
}

// TestExtractUint256 is a paid mutator transaction binding the contract method 0x3e6fe276.
//
// Solidity: function testExtractUint256() returns()
func (_SnapshotsFacetTest *SnapshotsFacetTestTransactor) TestExtractUint256(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SnapshotsFacetTest.contract.Transact(opts, "testExtractUint256")
}

// TestExtractUint256 is a paid mutator transaction binding the contract method 0x3e6fe276.
//
// Solidity: function testExtractUint256() returns()
func (_SnapshotsFacetTest *SnapshotsFacetTestSession) TestExtractUint256() (*types.Transaction, error) {
	return _SnapshotsFacetTest.Contract.TestExtractUint256(&_SnapshotsFacetTest.TransactOpts)
}

// TestExtractUint256 is a paid mutator transaction binding the contract method 0x3e6fe276.
//
// Solidity: function testExtractUint256() returns()
func (_SnapshotsFacetTest *SnapshotsFacetTestTransactorSession) TestExtractUint256() (*types.Transaction, error) {
	return _SnapshotsFacetTest.Contract.TestExtractUint256(&_SnapshotsFacetTest.TransactOpts)
}

// TestExtractUint32 is a paid mutator transaction binding the contract method 0x83505969.
//
// Solidity: function testExtractUint32() returns()
func (_SnapshotsFacetTest *SnapshotsFacetTestTransactor) TestExtractUint32(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SnapshotsFacetTest.contract.Transact(opts, "testExtractUint32")
}

// TestExtractUint32 is a paid mutator transaction binding the contract method 0x83505969.
//
// Solidity: function testExtractUint32() returns()
func (_SnapshotsFacetTest *SnapshotsFacetTestSession) TestExtractUint32() (*types.Transaction, error) {
	return _SnapshotsFacetTest.Contract.TestExtractUint32(&_SnapshotsFacetTest.TransactOpts)
}

// TestExtractUint32 is a paid mutator transaction binding the contract method 0x83505969.
//
// Solidity: function testExtractUint32() returns()
func (_SnapshotsFacetTest *SnapshotsFacetTestTransactorSession) TestExtractUint32() (*types.Transaction, error) {
	return _SnapshotsFacetTest.Contract.TestExtractUint32(&_SnapshotsFacetTest.TransactOpts)
}

// TestNextSnapshot is a paid mutator transaction binding the contract method 0x1e3e3deb.
//
// Solidity: function testNextSnapshot() returns()
func (_SnapshotsFacetTest *SnapshotsFacetTestTransactor) TestNextSnapshot(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SnapshotsFacetTest.contract.Transact(opts, "testNextSnapshot")
}

// TestNextSnapshot is a paid mutator transaction binding the contract method 0x1e3e3deb.
//
// Solidity: function testNextSnapshot() returns()
func (_SnapshotsFacetTest *SnapshotsFacetTestSession) TestNextSnapshot() (*types.Transaction, error) {
	return _SnapshotsFacetTest.Contract.TestNextSnapshot(&_SnapshotsFacetTest.TransactOpts)
}

// TestNextSnapshot is a paid mutator transaction binding the contract method 0x1e3e3deb.
//
// Solidity: function testNextSnapshot() returns()
func (_SnapshotsFacetTest *SnapshotsFacetTestTransactorSession) TestNextSnapshot() (*types.Transaction, error) {
	return _SnapshotsFacetTest.Contract.TestNextSnapshot(&_SnapshotsFacetTest.TransactOpts)
}

// TestSnapshot is a paid mutator transaction binding the contract method 0xbefb3b8a.
//
// Solidity: function testSnapshot() returns()
func (_SnapshotsFacetTest *SnapshotsFacetTestTransactor) TestSnapshot(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SnapshotsFacetTest.contract.Transact(opts, "testSnapshot")
}

// TestSnapshot is a paid mutator transaction binding the contract method 0xbefb3b8a.
//
// Solidity: function testSnapshot() returns()
func (_SnapshotsFacetTest *SnapshotsFacetTestSession) TestSnapshot() (*types.Transaction, error) {
	return _SnapshotsFacetTest.Contract.TestSnapshot(&_SnapshotsFacetTest.TransactOpts)
}

// TestSnapshot is a paid mutator transaction binding the contract method 0xbefb3b8a.
//
// Solidity: function testSnapshot() returns()
func (_SnapshotsFacetTest *SnapshotsFacetTestTransactorSession) TestSnapshot() (*types.Transaction, error) {
	return _SnapshotsFacetTest.Contract.TestSnapshot(&_SnapshotsFacetTest.TransactOpts)
}

// TestSnapshot2 is a paid mutator transaction binding the contract method 0x4bbcf858.
//
// Solidity: function testSnapshot2() returns()
func (_SnapshotsFacetTest *SnapshotsFacetTestTransactor) TestSnapshot2(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SnapshotsFacetTest.contract.Transact(opts, "testSnapshot2")
}

// TestSnapshot2 is a paid mutator transaction binding the contract method 0x4bbcf858.
//
// Solidity: function testSnapshot2() returns()
func (_SnapshotsFacetTest *SnapshotsFacetTestSession) TestSnapshot2() (*types.Transaction, error) {
	return _SnapshotsFacetTest.Contract.TestSnapshot2(&_SnapshotsFacetTest.TransactOpts)
}

// TestSnapshot2 is a paid mutator transaction binding the contract method 0x4bbcf858.
//
// Solidity: function testSnapshot2() returns()
func (_SnapshotsFacetTest *SnapshotsFacetTestTransactorSession) TestSnapshot2() (*types.Transaction, error) {
	return _SnapshotsFacetTest.Contract.TestSnapshot2(&_SnapshotsFacetTest.TransactOpts)
}

// SnapshotsFacetTestLogIterator is returned from FilterLog and is used to iterate over the raw logs and unpacked data for Log events raised by the SnapshotsFacetTest contract.
type SnapshotsFacetTestLogIterator struct {
	Event *SnapshotsFacetTestLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SnapshotsFacetTestLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SnapshotsFacetTestLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SnapshotsFacetTestLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SnapshotsFacetTestLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SnapshotsFacetTestLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SnapshotsFacetTestLog represents a Log event raised by the SnapshotsFacetTest contract.
type SnapshotsFacetTestLog struct {
	Arg0 string
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLog is a free log retrieval operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_SnapshotsFacetTest *SnapshotsFacetTestFilterer) FilterLog(opts *bind.FilterOpts) (*SnapshotsFacetTestLogIterator, error) {

	logs, sub, err := _SnapshotsFacetTest.contract.FilterLogs(opts, "log")
	if err != nil {
		return nil, err
	}
	return &SnapshotsFacetTestLogIterator{contract: _SnapshotsFacetTest.contract, event: "log", logs: logs, sub: sub}, nil
}

// WatchLog is a free log subscription operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_SnapshotsFacetTest *SnapshotsFacetTestFilterer) WatchLog(opts *bind.WatchOpts, sink chan<- *SnapshotsFacetTestLog) (event.Subscription, error) {

	logs, sub, err := _SnapshotsFacetTest.contract.WatchLogs(opts, "log")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SnapshotsFacetTestLog)
				if err := _SnapshotsFacetTest.contract.UnpackLog(event, "log", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLog is a log parse operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_SnapshotsFacetTest *SnapshotsFacetTestFilterer) ParseLog(log types.Log) (*SnapshotsFacetTestLog, error) {
	event := new(SnapshotsFacetTestLog)
	if err := _SnapshotsFacetTest.contract.UnpackLog(event, "log", log); err != nil {
		return nil, err
	}
	return event, nil
}

// SnapshotsFacetTestLogAddressIterator is returned from FilterLogAddress and is used to iterate over the raw logs and unpacked data for LogAddress events raised by the SnapshotsFacetTest contract.
type SnapshotsFacetTestLogAddressIterator struct {
	Event *SnapshotsFacetTestLogAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SnapshotsFacetTestLogAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SnapshotsFacetTestLogAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SnapshotsFacetTestLogAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SnapshotsFacetTestLogAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SnapshotsFacetTestLogAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SnapshotsFacetTestLogAddress represents a LogAddress event raised by the SnapshotsFacetTest contract.
type SnapshotsFacetTestLogAddress struct {
	Arg0 common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogAddress is a free log retrieval operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_SnapshotsFacetTest *SnapshotsFacetTestFilterer) FilterLogAddress(opts *bind.FilterOpts) (*SnapshotsFacetTestLogAddressIterator, error) {

	logs, sub, err := _SnapshotsFacetTest.contract.FilterLogs(opts, "log_address")
	if err != nil {
		return nil, err
	}
	return &SnapshotsFacetTestLogAddressIterator{contract: _SnapshotsFacetTest.contract, event: "log_address", logs: logs, sub: sub}, nil
}

// WatchLogAddress is a free log subscription operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_SnapshotsFacetTest *SnapshotsFacetTestFilterer) WatchLogAddress(opts *bind.WatchOpts, sink chan<- *SnapshotsFacetTestLogAddress) (event.Subscription, error) {

	logs, sub, err := _SnapshotsFacetTest.contract.WatchLogs(opts, "log_address")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SnapshotsFacetTestLogAddress)
				if err := _SnapshotsFacetTest.contract.UnpackLog(event, "log_address", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogAddress is a log parse operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_SnapshotsFacetTest *SnapshotsFacetTestFilterer) ParseLogAddress(log types.Log) (*SnapshotsFacetTestLogAddress, error) {
	event := new(SnapshotsFacetTestLogAddress)
	if err := _SnapshotsFacetTest.contract.UnpackLog(event, "log_address", log); err != nil {
		return nil, err
	}
	return event, nil
}

// SnapshotsFacetTestLogBytesIterator is returned from FilterLogBytes and is used to iterate over the raw logs and unpacked data for LogBytes events raised by the SnapshotsFacetTest contract.
type SnapshotsFacetTestLogBytesIterator struct {
	Event *SnapshotsFacetTestLogBytes // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SnapshotsFacetTestLogBytesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SnapshotsFacetTestLogBytes)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SnapshotsFacetTestLogBytes)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SnapshotsFacetTestLogBytesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SnapshotsFacetTestLogBytesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SnapshotsFacetTestLogBytes represents a LogBytes event raised by the SnapshotsFacetTest contract.
type SnapshotsFacetTestLogBytes struct {
	Arg0 []byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogBytes is a free log retrieval operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_SnapshotsFacetTest *SnapshotsFacetTestFilterer) FilterLogBytes(opts *bind.FilterOpts) (*SnapshotsFacetTestLogBytesIterator, error) {

	logs, sub, err := _SnapshotsFacetTest.contract.FilterLogs(opts, "log_bytes")
	if err != nil {
		return nil, err
	}
	return &SnapshotsFacetTestLogBytesIterator{contract: _SnapshotsFacetTest.contract, event: "log_bytes", logs: logs, sub: sub}, nil
}

// WatchLogBytes is a free log subscription operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_SnapshotsFacetTest *SnapshotsFacetTestFilterer) WatchLogBytes(opts *bind.WatchOpts, sink chan<- *SnapshotsFacetTestLogBytes) (event.Subscription, error) {

	logs, sub, err := _SnapshotsFacetTest.contract.WatchLogs(opts, "log_bytes")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SnapshotsFacetTestLogBytes)
				if err := _SnapshotsFacetTest.contract.UnpackLog(event, "log_bytes", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes is a log parse operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_SnapshotsFacetTest *SnapshotsFacetTestFilterer) ParseLogBytes(log types.Log) (*SnapshotsFacetTestLogBytes, error) {
	event := new(SnapshotsFacetTestLogBytes)
	if err := _SnapshotsFacetTest.contract.UnpackLog(event, "log_bytes", log); err != nil {
		return nil, err
	}
	return event, nil
}

// SnapshotsFacetTestLogBytes32Iterator is returned from FilterLogBytes32 and is used to iterate over the raw logs and unpacked data for LogBytes32 events raised by the SnapshotsFacetTest contract.
type SnapshotsFacetTestLogBytes32Iterator struct {
	Event *SnapshotsFacetTestLogBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SnapshotsFacetTestLogBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SnapshotsFacetTestLogBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SnapshotsFacetTestLogBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SnapshotsFacetTestLogBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SnapshotsFacetTestLogBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SnapshotsFacetTestLogBytes32 represents a LogBytes32 event raised by the SnapshotsFacetTest contract.
type SnapshotsFacetTestLogBytes32 struct {
	Arg0 [32]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogBytes32 is a free log retrieval operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_SnapshotsFacetTest *SnapshotsFacetTestFilterer) FilterLogBytes32(opts *bind.FilterOpts) (*SnapshotsFacetTestLogBytes32Iterator, error) {

	logs, sub, err := _SnapshotsFacetTest.contract.FilterLogs(opts, "log_bytes32")
	if err != nil {
		return nil, err
	}
	return &SnapshotsFacetTestLogBytes32Iterator{contract: _SnapshotsFacetTest.contract, event: "log_bytes32", logs: logs, sub: sub}, nil
}

// WatchLogBytes32 is a free log subscription operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_SnapshotsFacetTest *SnapshotsFacetTestFilterer) WatchLogBytes32(opts *bind.WatchOpts, sink chan<- *SnapshotsFacetTestLogBytes32) (event.Subscription, error) {

	logs, sub, err := _SnapshotsFacetTest.contract.WatchLogs(opts, "log_bytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SnapshotsFacetTestLogBytes32)
				if err := _SnapshotsFacetTest.contract.UnpackLog(event, "log_bytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes32 is a log parse operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_SnapshotsFacetTest *SnapshotsFacetTestFilterer) ParseLogBytes32(log types.Log) (*SnapshotsFacetTestLogBytes32, error) {
	event := new(SnapshotsFacetTestLogBytes32)
	if err := _SnapshotsFacetTest.contract.UnpackLog(event, "log_bytes32", log); err != nil {
		return nil, err
	}
	return event, nil
}

// SnapshotsFacetTestLogIntIterator is returned from FilterLogInt and is used to iterate over the raw logs and unpacked data for LogInt events raised by the SnapshotsFacetTest contract.
type SnapshotsFacetTestLogIntIterator struct {
	Event *SnapshotsFacetTestLogInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SnapshotsFacetTestLogIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SnapshotsFacetTestLogInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SnapshotsFacetTestLogInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SnapshotsFacetTestLogIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SnapshotsFacetTestLogIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SnapshotsFacetTestLogInt represents a LogInt event raised by the SnapshotsFacetTest contract.
type SnapshotsFacetTestLogInt struct {
	Arg0 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogInt is a free log retrieval operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_SnapshotsFacetTest *SnapshotsFacetTestFilterer) FilterLogInt(opts *bind.FilterOpts) (*SnapshotsFacetTestLogIntIterator, error) {

	logs, sub, err := _SnapshotsFacetTest.contract.FilterLogs(opts, "log_int")
	if err != nil {
		return nil, err
	}
	return &SnapshotsFacetTestLogIntIterator{contract: _SnapshotsFacetTest.contract, event: "log_int", logs: logs, sub: sub}, nil
}

// WatchLogInt is a free log subscription operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_SnapshotsFacetTest *SnapshotsFacetTestFilterer) WatchLogInt(opts *bind.WatchOpts, sink chan<- *SnapshotsFacetTestLogInt) (event.Subscription, error) {

	logs, sub, err := _SnapshotsFacetTest.contract.WatchLogs(opts, "log_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SnapshotsFacetTestLogInt)
				if err := _SnapshotsFacetTest.contract.UnpackLog(event, "log_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogInt is a log parse operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_SnapshotsFacetTest *SnapshotsFacetTestFilterer) ParseLogInt(log types.Log) (*SnapshotsFacetTestLogInt, error) {
	event := new(SnapshotsFacetTestLogInt)
	if err := _SnapshotsFacetTest.contract.UnpackLog(event, "log_int", log); err != nil {
		return nil, err
	}
	return event, nil
}

// SnapshotsFacetTestLogNamedAddressIterator is returned from FilterLogNamedAddress and is used to iterate over the raw logs and unpacked data for LogNamedAddress events raised by the SnapshotsFacetTest contract.
type SnapshotsFacetTestLogNamedAddressIterator struct {
	Event *SnapshotsFacetTestLogNamedAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SnapshotsFacetTestLogNamedAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SnapshotsFacetTestLogNamedAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SnapshotsFacetTestLogNamedAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SnapshotsFacetTestLogNamedAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SnapshotsFacetTestLogNamedAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SnapshotsFacetTestLogNamedAddress represents a LogNamedAddress event raised by the SnapshotsFacetTest contract.
type SnapshotsFacetTestLogNamedAddress struct {
	Key string
	Val common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedAddress is a free log retrieval operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_SnapshotsFacetTest *SnapshotsFacetTestFilterer) FilterLogNamedAddress(opts *bind.FilterOpts) (*SnapshotsFacetTestLogNamedAddressIterator, error) {

	logs, sub, err := _SnapshotsFacetTest.contract.FilterLogs(opts, "log_named_address")
	if err != nil {
		return nil, err
	}
	return &SnapshotsFacetTestLogNamedAddressIterator{contract: _SnapshotsFacetTest.contract, event: "log_named_address", logs: logs, sub: sub}, nil
}

// WatchLogNamedAddress is a free log subscription operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_SnapshotsFacetTest *SnapshotsFacetTestFilterer) WatchLogNamedAddress(opts *bind.WatchOpts, sink chan<- *SnapshotsFacetTestLogNamedAddress) (event.Subscription, error) {

	logs, sub, err := _SnapshotsFacetTest.contract.WatchLogs(opts, "log_named_address")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SnapshotsFacetTestLogNamedAddress)
				if err := _SnapshotsFacetTest.contract.UnpackLog(event, "log_named_address", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedAddress is a log parse operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_SnapshotsFacetTest *SnapshotsFacetTestFilterer) ParseLogNamedAddress(log types.Log) (*SnapshotsFacetTestLogNamedAddress, error) {
	event := new(SnapshotsFacetTestLogNamedAddress)
	if err := _SnapshotsFacetTest.contract.UnpackLog(event, "log_named_address", log); err != nil {
		return nil, err
	}
	return event, nil
}

// SnapshotsFacetTestLogNamedBytesIterator is returned from FilterLogNamedBytes and is used to iterate over the raw logs and unpacked data for LogNamedBytes events raised by the SnapshotsFacetTest contract.
type SnapshotsFacetTestLogNamedBytesIterator struct {
	Event *SnapshotsFacetTestLogNamedBytes // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SnapshotsFacetTestLogNamedBytesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SnapshotsFacetTestLogNamedBytes)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SnapshotsFacetTestLogNamedBytes)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SnapshotsFacetTestLogNamedBytesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SnapshotsFacetTestLogNamedBytesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SnapshotsFacetTestLogNamedBytes represents a LogNamedBytes event raised by the SnapshotsFacetTest contract.
type SnapshotsFacetTestLogNamedBytes struct {
	Key string
	Val []byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedBytes is a free log retrieval operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_SnapshotsFacetTest *SnapshotsFacetTestFilterer) FilterLogNamedBytes(opts *bind.FilterOpts) (*SnapshotsFacetTestLogNamedBytesIterator, error) {

	logs, sub, err := _SnapshotsFacetTest.contract.FilterLogs(opts, "log_named_bytes")
	if err != nil {
		return nil, err
	}
	return &SnapshotsFacetTestLogNamedBytesIterator{contract: _SnapshotsFacetTest.contract, event: "log_named_bytes", logs: logs, sub: sub}, nil
}

// WatchLogNamedBytes is a free log subscription operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_SnapshotsFacetTest *SnapshotsFacetTestFilterer) WatchLogNamedBytes(opts *bind.WatchOpts, sink chan<- *SnapshotsFacetTestLogNamedBytes) (event.Subscription, error) {

	logs, sub, err := _SnapshotsFacetTest.contract.WatchLogs(opts, "log_named_bytes")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SnapshotsFacetTestLogNamedBytes)
				if err := _SnapshotsFacetTest.contract.UnpackLog(event, "log_named_bytes", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedBytes is a log parse operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_SnapshotsFacetTest *SnapshotsFacetTestFilterer) ParseLogNamedBytes(log types.Log) (*SnapshotsFacetTestLogNamedBytes, error) {
	event := new(SnapshotsFacetTestLogNamedBytes)
	if err := _SnapshotsFacetTest.contract.UnpackLog(event, "log_named_bytes", log); err != nil {
		return nil, err
	}
	return event, nil
}

// SnapshotsFacetTestLogNamedBytes32Iterator is returned from FilterLogNamedBytes32 and is used to iterate over the raw logs and unpacked data for LogNamedBytes32 events raised by the SnapshotsFacetTest contract.
type SnapshotsFacetTestLogNamedBytes32Iterator struct {
	Event *SnapshotsFacetTestLogNamedBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SnapshotsFacetTestLogNamedBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SnapshotsFacetTestLogNamedBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SnapshotsFacetTestLogNamedBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SnapshotsFacetTestLogNamedBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SnapshotsFacetTestLogNamedBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SnapshotsFacetTestLogNamedBytes32 represents a LogNamedBytes32 event raised by the SnapshotsFacetTest contract.
type SnapshotsFacetTestLogNamedBytes32 struct {
	Key string
	Val [32]byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedBytes32 is a free log retrieval operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_SnapshotsFacetTest *SnapshotsFacetTestFilterer) FilterLogNamedBytes32(opts *bind.FilterOpts) (*SnapshotsFacetTestLogNamedBytes32Iterator, error) {

	logs, sub, err := _SnapshotsFacetTest.contract.FilterLogs(opts, "log_named_bytes32")
	if err != nil {
		return nil, err
	}
	return &SnapshotsFacetTestLogNamedBytes32Iterator{contract: _SnapshotsFacetTest.contract, event: "log_named_bytes32", logs: logs, sub: sub}, nil
}

// WatchLogNamedBytes32 is a free log subscription operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_SnapshotsFacetTest *SnapshotsFacetTestFilterer) WatchLogNamedBytes32(opts *bind.WatchOpts, sink chan<- *SnapshotsFacetTestLogNamedBytes32) (event.Subscription, error) {

	logs, sub, err := _SnapshotsFacetTest.contract.WatchLogs(opts, "log_named_bytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SnapshotsFacetTestLogNamedBytes32)
				if err := _SnapshotsFacetTest.contract.UnpackLog(event, "log_named_bytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedBytes32 is a log parse operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_SnapshotsFacetTest *SnapshotsFacetTestFilterer) ParseLogNamedBytes32(log types.Log) (*SnapshotsFacetTestLogNamedBytes32, error) {
	event := new(SnapshotsFacetTestLogNamedBytes32)
	if err := _SnapshotsFacetTest.contract.UnpackLog(event, "log_named_bytes32", log); err != nil {
		return nil, err
	}
	return event, nil
}

// SnapshotsFacetTestLogNamedDecimalIntIterator is returned from FilterLogNamedDecimalInt and is used to iterate over the raw logs and unpacked data for LogNamedDecimalInt events raised by the SnapshotsFacetTest contract.
type SnapshotsFacetTestLogNamedDecimalIntIterator struct {
	Event *SnapshotsFacetTestLogNamedDecimalInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SnapshotsFacetTestLogNamedDecimalIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SnapshotsFacetTestLogNamedDecimalInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SnapshotsFacetTestLogNamedDecimalInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SnapshotsFacetTestLogNamedDecimalIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SnapshotsFacetTestLogNamedDecimalIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SnapshotsFacetTestLogNamedDecimalInt represents a LogNamedDecimalInt event raised by the SnapshotsFacetTest contract.
type SnapshotsFacetTestLogNamedDecimalInt struct {
	Key      string
	Val      *big.Int
	Decimals *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogNamedDecimalInt is a free log retrieval operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_SnapshotsFacetTest *SnapshotsFacetTestFilterer) FilterLogNamedDecimalInt(opts *bind.FilterOpts) (*SnapshotsFacetTestLogNamedDecimalIntIterator, error) {

	logs, sub, err := _SnapshotsFacetTest.contract.FilterLogs(opts, "log_named_decimal_int")
	if err != nil {
		return nil, err
	}
	return &SnapshotsFacetTestLogNamedDecimalIntIterator{contract: _SnapshotsFacetTest.contract, event: "log_named_decimal_int", logs: logs, sub: sub}, nil
}

// WatchLogNamedDecimalInt is a free log subscription operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_SnapshotsFacetTest *SnapshotsFacetTestFilterer) WatchLogNamedDecimalInt(opts *bind.WatchOpts, sink chan<- *SnapshotsFacetTestLogNamedDecimalInt) (event.Subscription, error) {

	logs, sub, err := _SnapshotsFacetTest.contract.WatchLogs(opts, "log_named_decimal_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SnapshotsFacetTestLogNamedDecimalInt)
				if err := _SnapshotsFacetTest.contract.UnpackLog(event, "log_named_decimal_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedDecimalInt is a log parse operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_SnapshotsFacetTest *SnapshotsFacetTestFilterer) ParseLogNamedDecimalInt(log types.Log) (*SnapshotsFacetTestLogNamedDecimalInt, error) {
	event := new(SnapshotsFacetTestLogNamedDecimalInt)
	if err := _SnapshotsFacetTest.contract.UnpackLog(event, "log_named_decimal_int", log); err != nil {
		return nil, err
	}
	return event, nil
}

// SnapshotsFacetTestLogNamedDecimalUintIterator is returned from FilterLogNamedDecimalUint and is used to iterate over the raw logs and unpacked data for LogNamedDecimalUint events raised by the SnapshotsFacetTest contract.
type SnapshotsFacetTestLogNamedDecimalUintIterator struct {
	Event *SnapshotsFacetTestLogNamedDecimalUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SnapshotsFacetTestLogNamedDecimalUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SnapshotsFacetTestLogNamedDecimalUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SnapshotsFacetTestLogNamedDecimalUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SnapshotsFacetTestLogNamedDecimalUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SnapshotsFacetTestLogNamedDecimalUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SnapshotsFacetTestLogNamedDecimalUint represents a LogNamedDecimalUint event raised by the SnapshotsFacetTest contract.
type SnapshotsFacetTestLogNamedDecimalUint struct {
	Key      string
	Val      *big.Int
	Decimals *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogNamedDecimalUint is a free log retrieval operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_SnapshotsFacetTest *SnapshotsFacetTestFilterer) FilterLogNamedDecimalUint(opts *bind.FilterOpts) (*SnapshotsFacetTestLogNamedDecimalUintIterator, error) {

	logs, sub, err := _SnapshotsFacetTest.contract.FilterLogs(opts, "log_named_decimal_uint")
	if err != nil {
		return nil, err
	}
	return &SnapshotsFacetTestLogNamedDecimalUintIterator{contract: _SnapshotsFacetTest.contract, event: "log_named_decimal_uint", logs: logs, sub: sub}, nil
}

// WatchLogNamedDecimalUint is a free log subscription operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_SnapshotsFacetTest *SnapshotsFacetTestFilterer) WatchLogNamedDecimalUint(opts *bind.WatchOpts, sink chan<- *SnapshotsFacetTestLogNamedDecimalUint) (event.Subscription, error) {

	logs, sub, err := _SnapshotsFacetTest.contract.WatchLogs(opts, "log_named_decimal_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SnapshotsFacetTestLogNamedDecimalUint)
				if err := _SnapshotsFacetTest.contract.UnpackLog(event, "log_named_decimal_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedDecimalUint is a log parse operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_SnapshotsFacetTest *SnapshotsFacetTestFilterer) ParseLogNamedDecimalUint(log types.Log) (*SnapshotsFacetTestLogNamedDecimalUint, error) {
	event := new(SnapshotsFacetTestLogNamedDecimalUint)
	if err := _SnapshotsFacetTest.contract.UnpackLog(event, "log_named_decimal_uint", log); err != nil {
		return nil, err
	}
	return event, nil
}

// SnapshotsFacetTestLogNamedIntIterator is returned from FilterLogNamedInt and is used to iterate over the raw logs and unpacked data for LogNamedInt events raised by the SnapshotsFacetTest contract.
type SnapshotsFacetTestLogNamedIntIterator struct {
	Event *SnapshotsFacetTestLogNamedInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SnapshotsFacetTestLogNamedIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SnapshotsFacetTestLogNamedInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SnapshotsFacetTestLogNamedInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SnapshotsFacetTestLogNamedIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SnapshotsFacetTestLogNamedIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SnapshotsFacetTestLogNamedInt represents a LogNamedInt event raised by the SnapshotsFacetTest contract.
type SnapshotsFacetTestLogNamedInt struct {
	Key string
	Val *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedInt is a free log retrieval operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_SnapshotsFacetTest *SnapshotsFacetTestFilterer) FilterLogNamedInt(opts *bind.FilterOpts) (*SnapshotsFacetTestLogNamedIntIterator, error) {

	logs, sub, err := _SnapshotsFacetTest.contract.FilterLogs(opts, "log_named_int")
	if err != nil {
		return nil, err
	}
	return &SnapshotsFacetTestLogNamedIntIterator{contract: _SnapshotsFacetTest.contract, event: "log_named_int", logs: logs, sub: sub}, nil
}

// WatchLogNamedInt is a free log subscription operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_SnapshotsFacetTest *SnapshotsFacetTestFilterer) WatchLogNamedInt(opts *bind.WatchOpts, sink chan<- *SnapshotsFacetTestLogNamedInt) (event.Subscription, error) {

	logs, sub, err := _SnapshotsFacetTest.contract.WatchLogs(opts, "log_named_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SnapshotsFacetTestLogNamedInt)
				if err := _SnapshotsFacetTest.contract.UnpackLog(event, "log_named_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedInt is a log parse operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_SnapshotsFacetTest *SnapshotsFacetTestFilterer) ParseLogNamedInt(log types.Log) (*SnapshotsFacetTestLogNamedInt, error) {
	event := new(SnapshotsFacetTestLogNamedInt)
	if err := _SnapshotsFacetTest.contract.UnpackLog(event, "log_named_int", log); err != nil {
		return nil, err
	}
	return event, nil
}

// SnapshotsFacetTestLogNamedStringIterator is returned from FilterLogNamedString and is used to iterate over the raw logs and unpacked data for LogNamedString events raised by the SnapshotsFacetTest contract.
type SnapshotsFacetTestLogNamedStringIterator struct {
	Event *SnapshotsFacetTestLogNamedString // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SnapshotsFacetTestLogNamedStringIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SnapshotsFacetTestLogNamedString)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SnapshotsFacetTestLogNamedString)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SnapshotsFacetTestLogNamedStringIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SnapshotsFacetTestLogNamedStringIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SnapshotsFacetTestLogNamedString represents a LogNamedString event raised by the SnapshotsFacetTest contract.
type SnapshotsFacetTestLogNamedString struct {
	Key string
	Val string
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedString is a free log retrieval operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_SnapshotsFacetTest *SnapshotsFacetTestFilterer) FilterLogNamedString(opts *bind.FilterOpts) (*SnapshotsFacetTestLogNamedStringIterator, error) {

	logs, sub, err := _SnapshotsFacetTest.contract.FilterLogs(opts, "log_named_string")
	if err != nil {
		return nil, err
	}
	return &SnapshotsFacetTestLogNamedStringIterator{contract: _SnapshotsFacetTest.contract, event: "log_named_string", logs: logs, sub: sub}, nil
}

// WatchLogNamedString is a free log subscription operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_SnapshotsFacetTest *SnapshotsFacetTestFilterer) WatchLogNamedString(opts *bind.WatchOpts, sink chan<- *SnapshotsFacetTestLogNamedString) (event.Subscription, error) {

	logs, sub, err := _SnapshotsFacetTest.contract.WatchLogs(opts, "log_named_string")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SnapshotsFacetTestLogNamedString)
				if err := _SnapshotsFacetTest.contract.UnpackLog(event, "log_named_string", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedString is a log parse operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_SnapshotsFacetTest *SnapshotsFacetTestFilterer) ParseLogNamedString(log types.Log) (*SnapshotsFacetTestLogNamedString, error) {
	event := new(SnapshotsFacetTestLogNamedString)
	if err := _SnapshotsFacetTest.contract.UnpackLog(event, "log_named_string", log); err != nil {
		return nil, err
	}
	return event, nil
}

// SnapshotsFacetTestLogNamedUintIterator is returned from FilterLogNamedUint and is used to iterate over the raw logs and unpacked data for LogNamedUint events raised by the SnapshotsFacetTest contract.
type SnapshotsFacetTestLogNamedUintIterator struct {
	Event *SnapshotsFacetTestLogNamedUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SnapshotsFacetTestLogNamedUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SnapshotsFacetTestLogNamedUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SnapshotsFacetTestLogNamedUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SnapshotsFacetTestLogNamedUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SnapshotsFacetTestLogNamedUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SnapshotsFacetTestLogNamedUint represents a LogNamedUint event raised by the SnapshotsFacetTest contract.
type SnapshotsFacetTestLogNamedUint struct {
	Key string
	Val *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedUint is a free log retrieval operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_SnapshotsFacetTest *SnapshotsFacetTestFilterer) FilterLogNamedUint(opts *bind.FilterOpts) (*SnapshotsFacetTestLogNamedUintIterator, error) {

	logs, sub, err := _SnapshotsFacetTest.contract.FilterLogs(opts, "log_named_uint")
	if err != nil {
		return nil, err
	}
	return &SnapshotsFacetTestLogNamedUintIterator{contract: _SnapshotsFacetTest.contract, event: "log_named_uint", logs: logs, sub: sub}, nil
}

// WatchLogNamedUint is a free log subscription operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_SnapshotsFacetTest *SnapshotsFacetTestFilterer) WatchLogNamedUint(opts *bind.WatchOpts, sink chan<- *SnapshotsFacetTestLogNamedUint) (event.Subscription, error) {

	logs, sub, err := _SnapshotsFacetTest.contract.WatchLogs(opts, "log_named_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SnapshotsFacetTestLogNamedUint)
				if err := _SnapshotsFacetTest.contract.UnpackLog(event, "log_named_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedUint is a log parse operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_SnapshotsFacetTest *SnapshotsFacetTestFilterer) ParseLogNamedUint(log types.Log) (*SnapshotsFacetTestLogNamedUint, error) {
	event := new(SnapshotsFacetTestLogNamedUint)
	if err := _SnapshotsFacetTest.contract.UnpackLog(event, "log_named_uint", log); err != nil {
		return nil, err
	}
	return event, nil
}

// SnapshotsFacetTestLogStringIterator is returned from FilterLogString and is used to iterate over the raw logs and unpacked data for LogString events raised by the SnapshotsFacetTest contract.
type SnapshotsFacetTestLogStringIterator struct {
	Event *SnapshotsFacetTestLogString // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SnapshotsFacetTestLogStringIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SnapshotsFacetTestLogString)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SnapshotsFacetTestLogString)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SnapshotsFacetTestLogStringIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SnapshotsFacetTestLogStringIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SnapshotsFacetTestLogString represents a LogString event raised by the SnapshotsFacetTest contract.
type SnapshotsFacetTestLogString struct {
	Arg0 string
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogString is a free log retrieval operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_SnapshotsFacetTest *SnapshotsFacetTestFilterer) FilterLogString(opts *bind.FilterOpts) (*SnapshotsFacetTestLogStringIterator, error) {

	logs, sub, err := _SnapshotsFacetTest.contract.FilterLogs(opts, "log_string")
	if err != nil {
		return nil, err
	}
	return &SnapshotsFacetTestLogStringIterator{contract: _SnapshotsFacetTest.contract, event: "log_string", logs: logs, sub: sub}, nil
}

// WatchLogString is a free log subscription operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_SnapshotsFacetTest *SnapshotsFacetTestFilterer) WatchLogString(opts *bind.WatchOpts, sink chan<- *SnapshotsFacetTestLogString) (event.Subscription, error) {

	logs, sub, err := _SnapshotsFacetTest.contract.WatchLogs(opts, "log_string")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SnapshotsFacetTestLogString)
				if err := _SnapshotsFacetTest.contract.UnpackLog(event, "log_string", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogString is a log parse operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_SnapshotsFacetTest *SnapshotsFacetTestFilterer) ParseLogString(log types.Log) (*SnapshotsFacetTestLogString, error) {
	event := new(SnapshotsFacetTestLogString)
	if err := _SnapshotsFacetTest.contract.UnpackLog(event, "log_string", log); err != nil {
		return nil, err
	}
	return event, nil
}

// SnapshotsFacetTestLogUintIterator is returned from FilterLogUint and is used to iterate over the raw logs and unpacked data for LogUint events raised by the SnapshotsFacetTest contract.
type SnapshotsFacetTestLogUintIterator struct {
	Event *SnapshotsFacetTestLogUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SnapshotsFacetTestLogUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SnapshotsFacetTestLogUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SnapshotsFacetTestLogUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SnapshotsFacetTestLogUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SnapshotsFacetTestLogUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SnapshotsFacetTestLogUint represents a LogUint event raised by the SnapshotsFacetTest contract.
type SnapshotsFacetTestLogUint struct {
	Arg0 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogUint is a free log retrieval operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_SnapshotsFacetTest *SnapshotsFacetTestFilterer) FilterLogUint(opts *bind.FilterOpts) (*SnapshotsFacetTestLogUintIterator, error) {

	logs, sub, err := _SnapshotsFacetTest.contract.FilterLogs(opts, "log_uint")
	if err != nil {
		return nil, err
	}
	return &SnapshotsFacetTestLogUintIterator{contract: _SnapshotsFacetTest.contract, event: "log_uint", logs: logs, sub: sub}, nil
}

// WatchLogUint is a free log subscription operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_SnapshotsFacetTest *SnapshotsFacetTestFilterer) WatchLogUint(opts *bind.WatchOpts, sink chan<- *SnapshotsFacetTestLogUint) (event.Subscription, error) {

	logs, sub, err := _SnapshotsFacetTest.contract.WatchLogs(opts, "log_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SnapshotsFacetTestLogUint)
				if err := _SnapshotsFacetTest.contract.UnpackLog(event, "log_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogUint is a log parse operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_SnapshotsFacetTest *SnapshotsFacetTestFilterer) ParseLogUint(log types.Log) (*SnapshotsFacetTestLogUint, error) {
	event := new(SnapshotsFacetTestLogUint)
	if err := _SnapshotsFacetTest.contract.UnpackLog(event, "log_uint", log); err != nil {
		return nil, err
	}
	return event, nil
}

// SnapshotsFacetTestLogsIterator is returned from FilterLogs and is used to iterate over the raw logs and unpacked data for Logs events raised by the SnapshotsFacetTest contract.
type SnapshotsFacetTestLogsIterator struct {
	Event *SnapshotsFacetTestLogs // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SnapshotsFacetTestLogsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SnapshotsFacetTestLogs)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SnapshotsFacetTestLogs)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SnapshotsFacetTestLogsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SnapshotsFacetTestLogsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SnapshotsFacetTestLogs represents a Logs event raised by the SnapshotsFacetTest contract.
type SnapshotsFacetTestLogs struct {
	Arg0 []byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogs is a free log retrieval operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_SnapshotsFacetTest *SnapshotsFacetTestFilterer) FilterLogs(opts *bind.FilterOpts) (*SnapshotsFacetTestLogsIterator, error) {

	logs, sub, err := _SnapshotsFacetTest.contract.FilterLogs(opts, "logs")
	if err != nil {
		return nil, err
	}
	return &SnapshotsFacetTestLogsIterator{contract: _SnapshotsFacetTest.contract, event: "logs", logs: logs, sub: sub}, nil
}

// WatchLogs is a free log subscription operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_SnapshotsFacetTest *SnapshotsFacetTestFilterer) WatchLogs(opts *bind.WatchOpts, sink chan<- *SnapshotsFacetTestLogs) (event.Subscription, error) {

	logs, sub, err := _SnapshotsFacetTest.contract.WatchLogs(opts, "logs")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SnapshotsFacetTestLogs)
				if err := _SnapshotsFacetTest.contract.UnpackLog(event, "logs", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogs is a log parse operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_SnapshotsFacetTest *SnapshotsFacetTestFilterer) ParseLogs(log types.Log) (*SnapshotsFacetTestLogs, error) {
	event := new(SnapshotsFacetTestLogs)
	if err := _SnapshotsFacetTest.contract.UnpackLog(event, "logs", log); err != nil {
		return nil, err
	}
	return event, nil
}

// SnapshotsStorageLibraryABI is the input ABI used to generate the binding from.
const SnapshotsStorageLibraryABI = "[]"

// SnapshotsStorageLibraryBin is the compiled bytecode used for deploying new contracts.
var SnapshotsStorageLibraryBin = "0x60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208d29db914d4a7954ea083ae2adfe39d38e1c9fe4d30fc4af3e6ba96c12945dc664736f6c63430007060033"

// DeploySnapshotsStorageLibrary deploys a new Ethereum contract, binding an instance of SnapshotsStorageLibrary to it.
func DeploySnapshotsStorageLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SnapshotsStorageLibrary, error) {
	parsed, err := abi.JSON(strings.NewReader(SnapshotsStorageLibraryABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(SnapshotsStorageLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SnapshotsStorageLibrary{SnapshotsStorageLibraryCaller: SnapshotsStorageLibraryCaller{contract: contract}, SnapshotsStorageLibraryTransactor: SnapshotsStorageLibraryTransactor{contract: contract}, SnapshotsStorageLibraryFilterer: SnapshotsStorageLibraryFilterer{contract: contract}}, nil
}

// SnapshotsStorageLibrary is an auto generated Go binding around an Ethereum contract.
type SnapshotsStorageLibrary struct {
	SnapshotsStorageLibraryCaller     // Read-only binding to the contract
	SnapshotsStorageLibraryTransactor // Write-only binding to the contract
	SnapshotsStorageLibraryFilterer   // Log filterer for contract events
}

// SnapshotsStorageLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type SnapshotsStorageLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SnapshotsStorageLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SnapshotsStorageLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SnapshotsStorageLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SnapshotsStorageLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SnapshotsStorageLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SnapshotsStorageLibrarySession struct {
	Contract     *SnapshotsStorageLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts            // Call options to use throughout this session
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// SnapshotsStorageLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SnapshotsStorageLibraryCallerSession struct {
	Contract *SnapshotsStorageLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                  // Call options to use throughout this session
}

// SnapshotsStorageLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SnapshotsStorageLibraryTransactorSession struct {
	Contract     *SnapshotsStorageLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                  // Transaction auth options to use throughout this session
}

// SnapshotsStorageLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type SnapshotsStorageLibraryRaw struct {
	Contract *SnapshotsStorageLibrary // Generic contract binding to access the raw methods on
}

// SnapshotsStorageLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SnapshotsStorageLibraryCallerRaw struct {
	Contract *SnapshotsStorageLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// SnapshotsStorageLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SnapshotsStorageLibraryTransactorRaw struct {
	Contract *SnapshotsStorageLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSnapshotsStorageLibrary creates a new instance of SnapshotsStorageLibrary, bound to a specific deployed contract.
func NewSnapshotsStorageLibrary(address common.Address, backend bind.ContractBackend) (*SnapshotsStorageLibrary, error) {
	contract, err := bindSnapshotsStorageLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SnapshotsStorageLibrary{SnapshotsStorageLibraryCaller: SnapshotsStorageLibraryCaller{contract: contract}, SnapshotsStorageLibraryTransactor: SnapshotsStorageLibraryTransactor{contract: contract}, SnapshotsStorageLibraryFilterer: SnapshotsStorageLibraryFilterer{contract: contract}}, nil
}

// NewSnapshotsStorageLibraryCaller creates a new read-only instance of SnapshotsStorageLibrary, bound to a specific deployed contract.
func NewSnapshotsStorageLibraryCaller(address common.Address, caller bind.ContractCaller) (*SnapshotsStorageLibraryCaller, error) {
	contract, err := bindSnapshotsStorageLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SnapshotsStorageLibraryCaller{contract: contract}, nil
}

// NewSnapshotsStorageLibraryTransactor creates a new write-only instance of SnapshotsStorageLibrary, bound to a specific deployed contract.
func NewSnapshotsStorageLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*SnapshotsStorageLibraryTransactor, error) {
	contract, err := bindSnapshotsStorageLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SnapshotsStorageLibraryTransactor{contract: contract}, nil
}

// NewSnapshotsStorageLibraryFilterer creates a new log filterer instance of SnapshotsStorageLibrary, bound to a specific deployed contract.
func NewSnapshotsStorageLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*SnapshotsStorageLibraryFilterer, error) {
	contract, err := bindSnapshotsStorageLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SnapshotsStorageLibraryFilterer{contract: contract}, nil
}

// bindSnapshotsStorageLibrary binds a generic wrapper to an already deployed contract.
func bindSnapshotsStorageLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SnapshotsStorageLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SnapshotsStorageLibrary *SnapshotsStorageLibraryRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _SnapshotsStorageLibrary.Contract.SnapshotsStorageLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SnapshotsStorageLibrary *SnapshotsStorageLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SnapshotsStorageLibrary.Contract.SnapshotsStorageLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SnapshotsStorageLibrary *SnapshotsStorageLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SnapshotsStorageLibrary.Contract.SnapshotsStorageLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SnapshotsStorageLibrary *SnapshotsStorageLibraryCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _SnapshotsStorageLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SnapshotsStorageLibrary *SnapshotsStorageLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SnapshotsStorageLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SnapshotsStorageLibrary *SnapshotsStorageLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SnapshotsStorageLibrary.Contract.contract.Transact(opts, method, params...)
}

// StakingABI is the input ABI used to generate the binding from.
const StakingABI = "[{\"inputs\":[{\"internalType\":\"contractRegistry\",\"name\":\"registry_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BurntStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Fined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockedReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockedStake\",\"type\":\"event\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"foo\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"bar\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"fax\",\"type\":\"bytes\"}],\"name\":\"LogNote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"RequestedUnlockStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnlockedReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnlockedStake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contractDSAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceRewardFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceStakeFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceUnlocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceUnlockedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceUnlockedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceUnlockedRewardFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fine\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockEpoch\",\"type\":\"uint256\"}],\"name\":\"lockRewardFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lockStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lockStakeFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reloadRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestUnlockStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"requestUnlockStakeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractDSAuthority\",\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"setCurrentEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochDelay\",\"type\":\"uint256\"}],\"name\":\"setEpochDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"unlockRewardFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlockStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlockStakeFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// StakingBin is the compiled bytecode used for deploying new contracts.
var StakingBin = "0x60806040526002600a553480156200001657600080fd5b50604051620042d3380380620042d3833981810160405260208110156200003c57600080fd5b810190808051906020019092919050505033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620000c1600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166200018d60201b60201c565b33600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9460405160405180910390a280600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620002f5565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806200023257506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b62000289576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526031815260200180620042a26031913960400191505060405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060016000815480929190600101919050555050565b613f9d80620003056000396000f3fe608060405234801561001057600080fd5b506004361061021c5760003560e01c80638da5cb5b11610125578063c328b464116100ad578063e348da131161007c578063e348da1314610951578063ecd8c06a14610995578063f1b7f4bf146109d9578063f50ddb67146109f9578063fad8b32a14610a3d5761021c565b8063c328b46414610807578063db1e466214610825578063db518db214610889578063e29dda92146108ed5761021c565b8063aeaf8812116100f4578063aeaf881214610773578063bd695a431461077d578063bd8da917146107ab578063be9a6555146107c9578063bf7e214f146107d35761021c565b80638da5cb5b146106655780639be5d83e146106995780639c70287c146106f15780639fb69b43146107555761021c565b80634fcf2b72116101a857806375f12b211161017757806375f12b211461056b578063766718081461058b5780637a9e5e4b146105a95780637f91bd69146105ed5780638aa2799c146106475761021c565b80634fcf2b721461046d578063515c31a1146104b1578063523a3f08146105095780635b6a0d1e1461054d5761021c565b80631dd6b9b1116101ef5780631dd6b9b1146102e75780632e1a7d4d146103155780632e7133061461035957806335ba4daf146103b1578063461cbdcf146104095761021c565b806307da68f5146102215780630ddb07ad1461022b57806313af4035146102995780631476601d146102dd575b600080fd5b610229610a81565b005b6102816004803603606081101561024157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050610bfb565b60405180821515815260200191505060405180910390f35b6102db600480360360208110156102af57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f32565b005b6102e561107b565b005b610313600480360360208110156102fd57600080fd5b81019080803590602001909291905050506117d1565b005b6103416004803603602081101561032b57600080fd5b8101908080359060200190929190505050611957565b60405180821515815260200191505060405180910390f35b61039b6004803603602081101561036f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506119ed565b6040518082815260200191505060405180910390f35b6103f3600480360360208110156103c757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506119ff565b6040518082815260200191505060405180910390f35b6104556004803603604081101561041f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611a11565b60405180821515815260200191505060405180910390f35b6104af6004803603602081101561048357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611ba1565b005b6104f3600480360360208110156104c757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d29565b6040518082815260200191505060405180910390f35b6105356004803603602081101561051f57600080fd5b8101908080359060200190929190505050611d3b565b60405180821515815260200191505060405180910390f35b610555611f75565b6040518082815260200191505060405180910390f35b610573611f85565b60405180821515815260200191505060405180910390f35b610593611f98565b6040518082815260200191505060405180910390f35b6105eb600480360360208110156105bf57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611f9e565b005b61062f6004803603602081101561060357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506120e7565b60405180821515815260200191505060405180910390f35b61064f612275565b6040518082815260200191505060405180910390f35b61066d612285565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6106db600480360360208110156106af57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506122ab565b6040518082815260200191505060405180910390f35b61073d6004803603604081101561070757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506122bd565b60405180821515815260200191505060405180910390f35b61075d6124f6565b6040518082815260200191505060405180910390f35b61077b612506565b005b6107a96004803603602081101561079357600080fd5b8101908080359060200190929190505050612594565b005b6107b3612697565b6040518082815260200191505060405180910390f35b6107d161269d565b005b6107db612817565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61080f61283d565b6040518082815260200191505060405180910390f35b6108716004803603604081101561083b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061284d565b60405180821515815260200191505060405180910390f35b6108d56004803603604081101561089f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612a85565b60405180821515815260200191505060405180910390f35b6109396004803603604081101561090357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612b1c565b60405180821515815260200191505060405180910390f35b6109936004803603602081101561096757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612bb3565b005b6109c1600480360360208110156109ab57600080fd5b8101908080359060200190929190505050612d18565b60405180821515815260200191505060405180910390f35b6109e1612dae565b60405180821515815260200191505060405180910390f35b610a2560048036036020811015610a0f57600080fd5b8101908080359060200190929190505050612e41565b60405180821515815260200191505060405180910390f35b610a7f60048036036020811015610a5357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612ed7565b005b610aaf336000357fffffffff00000000000000000000000000000000000000000000000000000000166130ab565b610b21576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f64732d617574682d756e617574686f72697a656400000000000000000000000081525060200191505060405180910390fd5b6000806000600435925060243591503490506001600460146101000a81548160ff02191690831515021790555081833373ffffffffffffffffffffffffffffffffffffffff166000357fffffffff00000000000000000000000000000000000000000000000000000000167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168460003660405180848152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505094505050505060405180910390a4505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610ca157506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610cf6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526031815260200180613f376031913960400191505060405180910390fd5b600460149054906101000a900460ff1615610d79576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f64732d73746f702d69732d73746f70706564000000000000000000000000000081525060200191505060405180910390fd5b6000600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050610dc4613ef3565b84816000018181525050838160200181815250508160050181908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000155602082015181600101555050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1930876040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015610eaf57600080fd5b505af1158015610ec3573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff167f28dc9c0ffa672df041cad84edbee41508284600c9394bda0f8586d012c5e0915866040518082815260200191505060405180910390a28160010160009054906101000a900460ff16925050509392505050565b610f60336000357fffffffff00000000000000000000000000000000000000000000000000000000166130ab565b610fd2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f64732d617574682d756e617574686f72697a656400000000000000000000000081525060200191505060405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9460405160405180910390a250565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061111f57506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b611174576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526031815260200180613f376031913960400191505060405180910390fd5b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f67187ac6040518060400160405280600f81526020017f7374616b696e67546f6b656e2f763100000000000000000000000000000000008152506040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561123957808201518184015260208101905061121e565b50505050905090810190601f1680156112665780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b15801561128357600080fd5b505afa158015611297573d6000803e3d6000fd5b505050506040513d60208110156112ad57600080fd5b8101908080519060200190929190505050905080600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156113a4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f696e76616c6964206164647265737320666f72207374616b696e67546f6b656e81525060200191505060405180910390fd5b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f67187ac6040518060400160405280600f81526020017f7574696c697479546f6b656e2f763100000000000000000000000000000000008152506040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561146957808201518184015260208101905061144e565b50505050905090810190601f1680156114965780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b1580156114b357600080fd5b505afa1580156114c7573d6000803e3d6000fd5b505050506040513d60208110156114dd57600080fd5b8101908080519060200190929190505050905080600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156115d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f696e76616c6964206164647265737320666f72207574696c697479546f6b656e81525060200191505060405180910390fd5b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f67187ac6040518060400160405280600d81526020017f76616c696461746f72732f7631000000000000000000000000000000000000008152506040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561169957808201518184015260208101905061167e565b50505050905090810190601f1680156116c65780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b1580156116e357600080fd5b505afa1580156116f7573d6000803e3d6000fd5b505050506040513d602081101561170d57600080fd5b81019080805190602001909291905050509050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156117c3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f696e76616c6964206164647265737320666f722076616c696461746f7273000081525060200191505060405180910390fd5b6117cc81612bb3565b505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061187557506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6118ca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526031815260200180613f376031913960400191505060405180910390fd5b600460149054906101000a900460ff161561194d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f64732d73746f702d69732d73746f70706564000000000000000000000000000081525060200191505060405180910390fd5b8060098190555050565b6000600460149054906101000a900460ff16156119dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f64732d73746f702d69732d73746f70706564000000000000000000000000000081525060200191505060405180910390fd5b6119e633836132bb565b9050919050565b60006119f882613472565b9050919050565b6000611a0a826134be565b9050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611ab757506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b611b0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526031815260200180613f376031913960400191505060405180910390fd5b600460149054906101000a900460ff1615611b8f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f64732d73746f702d69732d73746f70706564000000000000000000000000000081525060200191505060405180910390fd5b611b99838361350a565b905092915050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611c4557506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b611c9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526031815260200180613f376031913960400191505060405180910390fd5b600460149054906101000a900460ff1615611d1d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f64732d73746f702d69732d73746f70706564000000000000000000000000000081525060200191505060405180910390fd5b611d2681613724565b50565b6000611d34826138da565b9050919050565b6000600460149054906101000a900460ff1615611dc0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f64732d73746f702d69732d73746f70706564000000000000000000000000000081525060200191505060405180910390fd5b6000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508281600301541015611e7d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f496e73756666696369656e7420756e6c6f636b65642062616c616e63652e000081525060200191505060405180910390fd5b611e9483826003015461392690919063ffffffff16565b8160030181905550600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611f2f57600080fd5b505af1158015611f43573d6000803e3d6000fd5b505050506040513d6020811015611f5957600080fd5b8101908080519060200190929190505050506001915050919050565b6000611f8033613472565b905090565b600460149054906101000a900460ff1681565b60095481565b611fcc336000357fffffffff00000000000000000000000000000000000000000000000000000000166130ab565b61203e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f64732d617574682d756e617574686f72697a656400000000000000000000000081525060200191505060405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada460405160405180910390a250565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061218d57506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6121e2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526031815260200180613f376031913960400191505060405180910390fd5b600460149054906101000a900460ff1615612265576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f64732d73746f702d69732d73746f70706564000000000000000000000000000081525060200191505060405180910390fd5b61226e826139a9565b9050919050565b6000612280336134be565b905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006122b682613b12565b9050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061236357506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6123b8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526031815260200180613f376031913960400191505060405180910390fd5b600460149054906101000a900460ff161561243b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f64732d73746f702d69732d73746f70706564000000000000000000000000000081525060200191505060405180910390fd5b6000600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061249583826000015461392690919063ffffffff16565b81600001819055508373ffffffffffffffffffffffffffffffffffffffff167f54420ac6a7570cfba30d2f88982f0749811f67103de3a63ad8b82cb754e8680e846040518082815260200191505060405180910390a2600191505092915050565b600061250133613b12565b905090565b600460149054906101000a900460ff1615612589576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f64732d73746f702d69732d73746f70706564000000000000000000000000000081525060200191505060405180910390fd5b61259233613724565b565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061263857506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b61268d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526031815260200180613f376031913960400191505060405180910390fd5b80600a8190555050565b600a5481565b6126cb336000357fffffffff00000000000000000000000000000000000000000000000000000000166130ab565b61273d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f64732d617574682d756e617574686f72697a656400000000000000000000000081525060200191505060405180910390fd5b6000806000600435925060243591503490506000600460146101000a81548160ff02191690831515021790555081833373ffffffffffffffffffffffffffffffffffffffff166000357fffffffff00000000000000000000000000000000000000000000000000000000167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168460003660405180848152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505094505050505060405180910390a4505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000612848336138da565b905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806128f357506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b612948576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526031815260200180613f376031913960400191505060405180910390fd5b600460149054906101000a900460ff16156129cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f64732d73746f702d69732d73746f70706564000000000000000000000000000081525060200191505060405180910390fd5b6000600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050612a2583826000015461392690919063ffffffff16565b81600001819055508373ffffffffffffffffffffffffffffffffffffffff167e913d46aef0f0d115d70ea1c7c23198505f577d1d1916cc60710ca2204ae6ae846040518082815260200191505060405180910390a2600191505092915050565b6000600460149054906101000a900460ff1615612b0a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f64732d73746f702d69732d73746f70706564000000000000000000000000000081525060200191505060405180910390fd5b612b1483836132bb565b905092915050565b6000600460149054906101000a900460ff1615612ba1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f64732d73746f702d69732d73746f70706564000000000000000000000000000081525060200191505060405180910390fd5b612bab8383613bb4565b905092915050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480612c5757506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b612cac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526031815260200180613f376031913960400191505060405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060016000815480929190600101919050555050565b6000600460149054906101000a900460ff1615612d9d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f64732d73746f702d69732d73746f70706564000000000000000000000000000081525060200191505060405180910390fd5b612da73383613bb4565b9050919050565b6000600460149054906101000a900460ff1615612e33576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f64732d73746f702d69732d73746f70706564000000000000000000000000000081525060200191505060405180910390fd5b612e3c336139a9565b905090565b6000600460149054906101000a900460ff1615612ec6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f64732d73746f702d69732d73746f70706564000000000000000000000000000081525060200191505060405180910390fd5b612ed0338361350a565b9050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480612f7b57506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b612fd0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526031815260200180613f376031913960400191505060405180910390fd5b6001805411613047576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f43616e27742072656d6f766520616c6c206f70657261746f727300000000000081525060200191505060405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff02191690556001600081548092919060019003919050555050565b60003073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156130ea57600190506132b5565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561314957600190506132b5565b600073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156131a957600090506132b5565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b70096138430856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff168152602001827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001935050505060206040518083038186803b15801561327757600080fd5b505afa15801561328b573d6000803e3d6000fd5b505050506040513d60208110156132a157600080fd5b810190808051906020019092919050505090505b92915050565b600080600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508281600401541015613379576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f496e73756666696369656e7420756e6c6f636b65642062616c616e63652e000081525060200191505060405180910390fd5b61339083826004015461392690919063ffffffff16565b8160040181905550600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561342b57600080fd5b505af115801561343f573d6000803e3d6000fd5b505050506040513d602081101561345557600080fd5b810190808051906020019092919050505050600191505092915050565b6000600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401549050919050565b6000600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050919050565b600080600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050613565838260000154613e7090919063ffffffff16565b81600001819055508373ffffffffffffffffffffffffffffffffffffffff167f1de2f07b0a1c69916a8b25b889051644192307ea08444a2e11f8654d1db3ab0c846040518082815260200191505060405180910390a2600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8530866040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561366c57600080fd5b505af1158015613680573d6000803e3d6000fd5b505050506040513d602081101561369657600080fd5b8101908080519060200190929190505050613719576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f5472616e73666572206661696c6564000000000000000000000000000000000081525060200191505060405180910390fd5b600191505092915050565b6000600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154116137dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260088152602001807f4e6f207374616b6500000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b6001600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160006101000a81548160ff02191690831515021790555061384e600a54600954613e7090919063ffffffff16565b600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055508073ffffffffffffffffffffffffffffffffffffffff167f1fde0d8a6620647f5c7b5632a87b23101ba553c9b474caf1134fb24d92bf6ddc60405160405180910390a250565b6000600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301549050919050565b60008282840391508111156139a3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f64732d6d6174682d7375622d756e646572666c6f77000000000000000000000081525060200191505060405180910390fd5b92915050565b600080600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160050190506000805b8280549050811015613ae6576000838281548110613a1357fe5b90600052602060002090600202019050600954816001015411613ad857613a47816000015484613e7090919063ffffffff16565b925083600185805490500381548110613a5c57fe5b9060005260206000209060020201848381548110613a7657fe5b9060005260206000209060020201600082015481600001556001820154816001015590505083805480613aa557fe5b60019003818190600052602060002090600202016000808201600090556001820160009055505090558180600190039250505b5080806001019150506139f9565b50613afe818460030154613e7090919063ffffffff16565b836003018190555060019350505050919050565b6000806000600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600501905060005b8180549050811015613ba957613b9a828281548110613b7957fe5b90600052602060002090600202016000015484613e7090919063ffffffff16565b92508080600101915050613b5e565b508192505050919050565b6000600460149054906101000a900460ff1615613c39576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f64732d73746f702d69732d73746f70706564000000000000000000000000000081525060200191505060405180910390fd5b6000600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060010160009054906101000a900460ff16613d00576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f5374616b6520756e6c6f636b206e6f742072657175657374656400000000000081525060200191505060405180910390fd5b8281600001541015613d5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526029815260200180613f0e6029913960400191505060405180910390fd5b60095481600201541115613dd9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f4e6f74207265616479000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b613df0838260040154613e7090919063ffffffff16565b8160040181905550613e0f83826000015461392690919063ffffffff16565b81600001819055508373ffffffffffffffffffffffffffffffffffffffff167f252a696583e35c4d61332829d3bb2a8236f2500140258f089951799c9b999a9c846040518082815260200191505060405180910390a2600191505092915050565b6000828284019150811015613eed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f64732d6d6174682d6164642d6f766572666c6f7700000000000000000000000081525060200191505060405180910390fd5b92915050565b60405180604001604052806000815260200160008152509056fe5374616b6520756e6c6f636b207265717565737465642067726561746572207468616e207374616b6546756e6374696f6e616c697479207265737472696374656420746f20617574686f72697a6564206f70657261746f72732ea2646970667358221220deb3feec8dff737345bd8dda73676030d5df5c00bc97b821229136d5234880be64736f6c6343000706003346756e6374696f6e616c697479207265737472696374656420746f20617574686f72697a6564206f70657261746f72732e"

// DeployStaking deploys a new Ethereum contract, binding an instance of Staking to it.
func DeployStaking(auth *bind.TransactOpts, backend bind.ContractBackend, registry_ common.Address) (common.Address, *types.Transaction, *Staking, error) {
	parsed, err := abi.JSON(strings.NewReader(StakingABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(StakingBin), backend, registry_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Staking{StakingCaller: StakingCaller{contract: contract}, StakingTransactor: StakingTransactor{contract: contract}, StakingFilterer: StakingFilterer{contract: contract}}, nil
}

// Staking is an auto generated Go binding around an Ethereum contract.
type Staking struct {
	StakingCaller     // Read-only binding to the contract
	StakingTransactor // Write-only binding to the contract
	StakingFilterer   // Log filterer for contract events
}

// StakingCaller is an auto generated read-only Go binding around an Ethereum contract.
type StakingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StakingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StakingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StakingSession struct {
	Contract     *Staking          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StakingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StakingCallerSession struct {
	Contract *StakingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// StakingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StakingTransactorSession struct {
	Contract     *StakingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// StakingRaw is an auto generated low-level Go binding around an Ethereum contract.
type StakingRaw struct {
	Contract *Staking // Generic contract binding to access the raw methods on
}

// StakingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StakingCallerRaw struct {
	Contract *StakingCaller // Generic read-only contract binding to access the raw methods on
}

// StakingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StakingTransactorRaw struct {
	Contract *StakingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStaking creates a new instance of Staking, bound to a specific deployed contract.
func NewStaking(address common.Address, backend bind.ContractBackend) (*Staking, error) {
	contract, err := bindStaking(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Staking{StakingCaller: StakingCaller{contract: contract}, StakingTransactor: StakingTransactor{contract: contract}, StakingFilterer: StakingFilterer{contract: contract}}, nil
}

// NewStakingCaller creates a new read-only instance of Staking, bound to a specific deployed contract.
func NewStakingCaller(address common.Address, caller bind.ContractCaller) (*StakingCaller, error) {
	contract, err := bindStaking(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StakingCaller{contract: contract}, nil
}

// NewStakingTransactor creates a new write-only instance of Staking, bound to a specific deployed contract.
func NewStakingTransactor(address common.Address, transactor bind.ContractTransactor) (*StakingTransactor, error) {
	contract, err := bindStaking(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StakingTransactor{contract: contract}, nil
}

// NewStakingFilterer creates a new log filterer instance of Staking, bound to a specific deployed contract.
func NewStakingFilterer(address common.Address, filterer bind.ContractFilterer) (*StakingFilterer, error) {
	contract, err := bindStaking(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StakingFilterer{contract: contract}, nil
}

// bindStaking binds a generic wrapper to an already deployed contract.
func bindStaking(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StakingABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Staking *StakingRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Staking.Contract.StakingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Staking *StakingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.Contract.StakingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Staking *StakingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Staking.Contract.StakingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Staking *StakingCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Staking.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Staking *StakingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Staking *StakingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Staking.Contract.contract.Transact(opts, method, params...)
}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_Staking *StakingCaller) Authority(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Staking.contract.Call(opts, out, "authority")
	return *ret0, err
}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_Staking *StakingSession) Authority() (common.Address, error) {
	return _Staking.Contract.Authority(&_Staking.CallOpts)
}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_Staking *StakingCallerSession) Authority() (common.Address, error) {
	return _Staking.Contract.Authority(&_Staking.CallOpts)
}

// BalanceReward is a free data retrieval call binding the contract method 0x9fb69b43.
//
// Solidity: function balanceReward() view returns(uint256)
func (_Staking *StakingCaller) BalanceReward(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Staking.contract.Call(opts, out, "balanceReward")
	return *ret0, err
}

// BalanceReward is a free data retrieval call binding the contract method 0x9fb69b43.
//
// Solidity: function balanceReward() view returns(uint256)
func (_Staking *StakingSession) BalanceReward() (*big.Int, error) {
	return _Staking.Contract.BalanceReward(&_Staking.CallOpts)
}

// BalanceReward is a free data retrieval call binding the contract method 0x9fb69b43.
//
// Solidity: function balanceReward() view returns(uint256)
func (_Staking *StakingCallerSession) BalanceReward() (*big.Int, error) {
	return _Staking.Contract.BalanceReward(&_Staking.CallOpts)
}

// BalanceRewardFor is a free data retrieval call binding the contract method 0x9be5d83e.
//
// Solidity: function balanceRewardFor(address who) view returns(uint256)
func (_Staking *StakingCaller) BalanceRewardFor(opts *bind.CallOpts, who common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Staking.contract.Call(opts, out, "balanceRewardFor", who)
	return *ret0, err
}

// BalanceRewardFor is a free data retrieval call binding the contract method 0x9be5d83e.
//
// Solidity: function balanceRewardFor(address who) view returns(uint256)
func (_Staking *StakingSession) BalanceRewardFor(who common.Address) (*big.Int, error) {
	return _Staking.Contract.BalanceRewardFor(&_Staking.CallOpts, who)
}

// BalanceRewardFor is a free data retrieval call binding the contract method 0x9be5d83e.
//
// Solidity: function balanceRewardFor(address who) view returns(uint256)
func (_Staking *StakingCallerSession) BalanceRewardFor(who common.Address) (*big.Int, error) {
	return _Staking.Contract.BalanceRewardFor(&_Staking.CallOpts, who)
}

// BalanceStake is a free data retrieval call binding the contract method 0x8aa2799c.
//
// Solidity: function balanceStake() view returns(uint256)
func (_Staking *StakingCaller) BalanceStake(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Staking.contract.Call(opts, out, "balanceStake")
	return *ret0, err
}

// BalanceStake is a free data retrieval call binding the contract method 0x8aa2799c.
//
// Solidity: function balanceStake() view returns(uint256)
func (_Staking *StakingSession) BalanceStake() (*big.Int, error) {
	return _Staking.Contract.BalanceStake(&_Staking.CallOpts)
}

// BalanceStake is a free data retrieval call binding the contract method 0x8aa2799c.
//
// Solidity: function balanceStake() view returns(uint256)
func (_Staking *StakingCallerSession) BalanceStake() (*big.Int, error) {
	return _Staking.Contract.BalanceStake(&_Staking.CallOpts)
}

// BalanceStakeFor is a free data retrieval call binding the contract method 0x35ba4daf.
//
// Solidity: function balanceStakeFor(address who) view returns(uint256)
func (_Staking *StakingCaller) BalanceStakeFor(opts *bind.CallOpts, who common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Staking.contract.Call(opts, out, "balanceStakeFor", who)
	return *ret0, err
}

// BalanceStakeFor is a free data retrieval call binding the contract method 0x35ba4daf.
//
// Solidity: function balanceStakeFor(address who) view returns(uint256)
func (_Staking *StakingSession) BalanceStakeFor(who common.Address) (*big.Int, error) {
	return _Staking.Contract.BalanceStakeFor(&_Staking.CallOpts, who)
}

// BalanceStakeFor is a free data retrieval call binding the contract method 0x35ba4daf.
//
// Solidity: function balanceStakeFor(address who) view returns(uint256)
func (_Staking *StakingCallerSession) BalanceStakeFor(who common.Address) (*big.Int, error) {
	return _Staking.Contract.BalanceStakeFor(&_Staking.CallOpts, who)
}

// BalanceUnlocked is a free data retrieval call binding the contract method 0x5b6a0d1e.
//
// Solidity: function balanceUnlocked() view returns(uint256)
func (_Staking *StakingCaller) BalanceUnlocked(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Staking.contract.Call(opts, out, "balanceUnlocked")
	return *ret0, err
}

// BalanceUnlocked is a free data retrieval call binding the contract method 0x5b6a0d1e.
//
// Solidity: function balanceUnlocked() view returns(uint256)
func (_Staking *StakingSession) BalanceUnlocked() (*big.Int, error) {
	return _Staking.Contract.BalanceUnlocked(&_Staking.CallOpts)
}

// BalanceUnlocked is a free data retrieval call binding the contract method 0x5b6a0d1e.
//
// Solidity: function balanceUnlocked() view returns(uint256)
func (_Staking *StakingCallerSession) BalanceUnlocked() (*big.Int, error) {
	return _Staking.Contract.BalanceUnlocked(&_Staking.CallOpts)
}

// BalanceUnlockedFor is a free data retrieval call binding the contract method 0x2e713306.
//
// Solidity: function balanceUnlockedFor(address who) view returns(uint256)
func (_Staking *StakingCaller) BalanceUnlockedFor(opts *bind.CallOpts, who common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Staking.contract.Call(opts, out, "balanceUnlockedFor", who)
	return *ret0, err
}

// BalanceUnlockedFor is a free data retrieval call binding the contract method 0x2e713306.
//
// Solidity: function balanceUnlockedFor(address who) view returns(uint256)
func (_Staking *StakingSession) BalanceUnlockedFor(who common.Address) (*big.Int, error) {
	return _Staking.Contract.BalanceUnlockedFor(&_Staking.CallOpts, who)
}

// BalanceUnlockedFor is a free data retrieval call binding the contract method 0x2e713306.
//
// Solidity: function balanceUnlockedFor(address who) view returns(uint256)
func (_Staking *StakingCallerSession) BalanceUnlockedFor(who common.Address) (*big.Int, error) {
	return _Staking.Contract.BalanceUnlockedFor(&_Staking.CallOpts, who)
}

// BalanceUnlockedReward is a free data retrieval call binding the contract method 0xc328b464.
//
// Solidity: function balanceUnlockedReward() view returns(uint256)
func (_Staking *StakingCaller) BalanceUnlockedReward(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Staking.contract.Call(opts, out, "balanceUnlockedReward")
	return *ret0, err
}

// BalanceUnlockedReward is a free data retrieval call binding the contract method 0xc328b464.
//
// Solidity: function balanceUnlockedReward() view returns(uint256)
func (_Staking *StakingSession) BalanceUnlockedReward() (*big.Int, error) {
	return _Staking.Contract.BalanceUnlockedReward(&_Staking.CallOpts)
}

// BalanceUnlockedReward is a free data retrieval call binding the contract method 0xc328b464.
//
// Solidity: function balanceUnlockedReward() view returns(uint256)
func (_Staking *StakingCallerSession) BalanceUnlockedReward() (*big.Int, error) {
	return _Staking.Contract.BalanceUnlockedReward(&_Staking.CallOpts)
}

// BalanceUnlockedRewardFor is a free data retrieval call binding the contract method 0x515c31a1.
//
// Solidity: function balanceUnlockedRewardFor(address who) view returns(uint256)
func (_Staking *StakingCaller) BalanceUnlockedRewardFor(opts *bind.CallOpts, who common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Staking.contract.Call(opts, out, "balanceUnlockedRewardFor", who)
	return *ret0, err
}

// BalanceUnlockedRewardFor is a free data retrieval call binding the contract method 0x515c31a1.
//
// Solidity: function balanceUnlockedRewardFor(address who) view returns(uint256)
func (_Staking *StakingSession) BalanceUnlockedRewardFor(who common.Address) (*big.Int, error) {
	return _Staking.Contract.BalanceUnlockedRewardFor(&_Staking.CallOpts, who)
}

// BalanceUnlockedRewardFor is a free data retrieval call binding the contract method 0x515c31a1.
//
// Solidity: function balanceUnlockedRewardFor(address who) view returns(uint256)
func (_Staking *StakingCallerSession) BalanceUnlockedRewardFor(who common.Address) (*big.Int, error) {
	return _Staking.Contract.BalanceUnlockedRewardFor(&_Staking.CallOpts, who)
}

// CurrentEpoch is a free data retrieval call binding the contract method 0x76671808.
//
// Solidity: function currentEpoch() view returns(uint256)
func (_Staking *StakingCaller) CurrentEpoch(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Staking.contract.Call(opts, out, "currentEpoch")
	return *ret0, err
}

// CurrentEpoch is a free data retrieval call binding the contract method 0x76671808.
//
// Solidity: function currentEpoch() view returns(uint256)
func (_Staking *StakingSession) CurrentEpoch() (*big.Int, error) {
	return _Staking.Contract.CurrentEpoch(&_Staking.CallOpts)
}

// CurrentEpoch is a free data retrieval call binding the contract method 0x76671808.
//
// Solidity: function currentEpoch() view returns(uint256)
func (_Staking *StakingCallerSession) CurrentEpoch() (*big.Int, error) {
	return _Staking.Contract.CurrentEpoch(&_Staking.CallOpts)
}

// EpochDelay is a free data retrieval call binding the contract method 0xbd8da917.
//
// Solidity: function epochDelay() view returns(uint256)
func (_Staking *StakingCaller) EpochDelay(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Staking.contract.Call(opts, out, "epochDelay")
	return *ret0, err
}

// EpochDelay is a free data retrieval call binding the contract method 0xbd8da917.
//
// Solidity: function epochDelay() view returns(uint256)
func (_Staking *StakingSession) EpochDelay() (*big.Int, error) {
	return _Staking.Contract.EpochDelay(&_Staking.CallOpts)
}

// EpochDelay is a free data retrieval call binding the contract method 0xbd8da917.
//
// Solidity: function epochDelay() view returns(uint256)
func (_Staking *StakingCallerSession) EpochDelay() (*big.Int, error) {
	return _Staking.Contract.EpochDelay(&_Staking.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Staking *StakingCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Staking.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Staking *StakingSession) Owner() (common.Address, error) {
	return _Staking.Contract.Owner(&_Staking.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Staking *StakingCallerSession) Owner() (common.Address, error) {
	return _Staking.Contract.Owner(&_Staking.CallOpts)
}

// Stopped is a free data retrieval call binding the contract method 0x75f12b21.
//
// Solidity: function stopped() view returns(bool)
func (_Staking *StakingCaller) Stopped(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Staking.contract.Call(opts, out, "stopped")
	return *ret0, err
}

// Stopped is a free data retrieval call binding the contract method 0x75f12b21.
//
// Solidity: function stopped() view returns(bool)
func (_Staking *StakingSession) Stopped() (bool, error) {
	return _Staking.Contract.Stopped(&_Staking.CallOpts)
}

// Stopped is a free data retrieval call binding the contract method 0x75f12b21.
//
// Solidity: function stopped() view returns(bool)
func (_Staking *StakingCallerSession) Stopped() (bool, error) {
	return _Staking.Contract.Stopped(&_Staking.CallOpts)
}

// BurnStake is a paid mutator transaction binding the contract method 0x9c70287c.
//
// Solidity: function burnStake(address who, uint256 amount) returns(bool)
func (_Staking *StakingTransactor) BurnStake(opts *bind.TransactOpts, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "burnStake", who, amount)
}

// BurnStake is a paid mutator transaction binding the contract method 0x9c70287c.
//
// Solidity: function burnStake(address who, uint256 amount) returns(bool)
func (_Staking *StakingSession) BurnStake(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.BurnStake(&_Staking.TransactOpts, who, amount)
}

// BurnStake is a paid mutator transaction binding the contract method 0x9c70287c.
//
// Solidity: function burnStake(address who, uint256 amount) returns(bool)
func (_Staking *StakingTransactorSession) BurnStake(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.BurnStake(&_Staking.TransactOpts, who, amount)
}

// Fine is a paid mutator transaction binding the contract method 0xdb1e4662.
//
// Solidity: function fine(address who, uint256 amount) returns(bool)
func (_Staking *StakingTransactor) Fine(opts *bind.TransactOpts, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "fine", who, amount)
}

// Fine is a paid mutator transaction binding the contract method 0xdb1e4662.
//
// Solidity: function fine(address who, uint256 amount) returns(bool)
func (_Staking *StakingSession) Fine(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.Fine(&_Staking.TransactOpts, who, amount)
}

// Fine is a paid mutator transaction binding the contract method 0xdb1e4662.
//
// Solidity: function fine(address who, uint256 amount) returns(bool)
func (_Staking *StakingTransactorSession) Fine(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.Fine(&_Staking.TransactOpts, who, amount)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_Staking *StakingTransactor) GrantOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "grantOperator", _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_Staking *StakingSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _Staking.Contract.GrantOperator(&_Staking.TransactOpts, _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_Staking *StakingTransactorSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _Staking.Contract.GrantOperator(&_Staking.TransactOpts, _operator)
}

// LockRewardFor is a paid mutator transaction binding the contract method 0x0ddb07ad.
//
// Solidity: function lockRewardFor(address who, uint256 amountReward, uint256 unlockEpoch) returns(bool)
func (_Staking *StakingTransactor) LockRewardFor(opts *bind.TransactOpts, who common.Address, amountReward *big.Int, unlockEpoch *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "lockRewardFor", who, amountReward, unlockEpoch)
}

// LockRewardFor is a paid mutator transaction binding the contract method 0x0ddb07ad.
//
// Solidity: function lockRewardFor(address who, uint256 amountReward, uint256 unlockEpoch) returns(bool)
func (_Staking *StakingSession) LockRewardFor(who common.Address, amountReward *big.Int, unlockEpoch *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.LockRewardFor(&_Staking.TransactOpts, who, amountReward, unlockEpoch)
}

// LockRewardFor is a paid mutator transaction binding the contract method 0x0ddb07ad.
//
// Solidity: function lockRewardFor(address who, uint256 amountReward, uint256 unlockEpoch) returns(bool)
func (_Staking *StakingTransactorSession) LockRewardFor(who common.Address, amountReward *big.Int, unlockEpoch *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.LockRewardFor(&_Staking.TransactOpts, who, amountReward, unlockEpoch)
}

// LockStake is a paid mutator transaction binding the contract method 0xf50ddb67.
//
// Solidity: function lockStake(uint256 amount) returns(bool)
func (_Staking *StakingTransactor) LockStake(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "lockStake", amount)
}

// LockStake is a paid mutator transaction binding the contract method 0xf50ddb67.
//
// Solidity: function lockStake(uint256 amount) returns(bool)
func (_Staking *StakingSession) LockStake(amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.LockStake(&_Staking.TransactOpts, amount)
}

// LockStake is a paid mutator transaction binding the contract method 0xf50ddb67.
//
// Solidity: function lockStake(uint256 amount) returns(bool)
func (_Staking *StakingTransactorSession) LockStake(amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.LockStake(&_Staking.TransactOpts, amount)
}

// LockStakeFor is a paid mutator transaction binding the contract method 0x461cbdcf.
//
// Solidity: function lockStakeFor(address who, uint256 amount) returns(bool)
func (_Staking *StakingTransactor) LockStakeFor(opts *bind.TransactOpts, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "lockStakeFor", who, amount)
}

// LockStakeFor is a paid mutator transaction binding the contract method 0x461cbdcf.
//
// Solidity: function lockStakeFor(address who, uint256 amount) returns(bool)
func (_Staking *StakingSession) LockStakeFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.LockStakeFor(&_Staking.TransactOpts, who, amount)
}

// LockStakeFor is a paid mutator transaction binding the contract method 0x461cbdcf.
//
// Solidity: function lockStakeFor(address who, uint256 amount) returns(bool)
func (_Staking *StakingTransactorSession) LockStakeFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.LockStakeFor(&_Staking.TransactOpts, who, amount)
}

// ReloadRegistry is a paid mutator transaction binding the contract method 0x1476601d.
//
// Solidity: function reloadRegistry() returns()
func (_Staking *StakingTransactor) ReloadRegistry(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "reloadRegistry")
}

// ReloadRegistry is a paid mutator transaction binding the contract method 0x1476601d.
//
// Solidity: function reloadRegistry() returns()
func (_Staking *StakingSession) ReloadRegistry() (*types.Transaction, error) {
	return _Staking.Contract.ReloadRegistry(&_Staking.TransactOpts)
}

// ReloadRegistry is a paid mutator transaction binding the contract method 0x1476601d.
//
// Solidity: function reloadRegistry() returns()
func (_Staking *StakingTransactorSession) ReloadRegistry() (*types.Transaction, error) {
	return _Staking.Contract.ReloadRegistry(&_Staking.TransactOpts)
}

// RequestUnlockStake is a paid mutator transaction binding the contract method 0xaeaf8812.
//
// Solidity: function requestUnlockStake() returns()
func (_Staking *StakingTransactor) RequestUnlockStake(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "requestUnlockStake")
}

// RequestUnlockStake is a paid mutator transaction binding the contract method 0xaeaf8812.
//
// Solidity: function requestUnlockStake() returns()
func (_Staking *StakingSession) RequestUnlockStake() (*types.Transaction, error) {
	return _Staking.Contract.RequestUnlockStake(&_Staking.TransactOpts)
}

// RequestUnlockStake is a paid mutator transaction binding the contract method 0xaeaf8812.
//
// Solidity: function requestUnlockStake() returns()
func (_Staking *StakingTransactorSession) RequestUnlockStake() (*types.Transaction, error) {
	return _Staking.Contract.RequestUnlockStake(&_Staking.TransactOpts)
}

// RequestUnlockStakeFor is a paid mutator transaction binding the contract method 0x4fcf2b72.
//
// Solidity: function requestUnlockStakeFor(address who) returns()
func (_Staking *StakingTransactor) RequestUnlockStakeFor(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "requestUnlockStakeFor", who)
}

// RequestUnlockStakeFor is a paid mutator transaction binding the contract method 0x4fcf2b72.
//
// Solidity: function requestUnlockStakeFor(address who) returns()
func (_Staking *StakingSession) RequestUnlockStakeFor(who common.Address) (*types.Transaction, error) {
	return _Staking.Contract.RequestUnlockStakeFor(&_Staking.TransactOpts, who)
}

// RequestUnlockStakeFor is a paid mutator transaction binding the contract method 0x4fcf2b72.
//
// Solidity: function requestUnlockStakeFor(address who) returns()
func (_Staking *StakingTransactorSession) RequestUnlockStakeFor(who common.Address) (*types.Transaction, error) {
	return _Staking.Contract.RequestUnlockStakeFor(&_Staking.TransactOpts, who)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_Staking *StakingTransactor) RevokeOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "revokeOperator", _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_Staking *StakingSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _Staking.Contract.RevokeOperator(&_Staking.TransactOpts, _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_Staking *StakingTransactorSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _Staking.Contract.RevokeOperator(&_Staking.TransactOpts, _operator)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_Staking *StakingTransactor) SetAuthority(opts *bind.TransactOpts, authority_ common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "setAuthority", authority_)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_Staking *StakingSession) SetAuthority(authority_ common.Address) (*types.Transaction, error) {
	return _Staking.Contract.SetAuthority(&_Staking.TransactOpts, authority_)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_Staking *StakingTransactorSession) SetAuthority(authority_ common.Address) (*types.Transaction, error) {
	return _Staking.Contract.SetAuthority(&_Staking.TransactOpts, authority_)
}

// SetCurrentEpoch is a paid mutator transaction binding the contract method 0x1dd6b9b1.
//
// Solidity: function setCurrentEpoch(uint256 epoch) returns()
func (_Staking *StakingTransactor) SetCurrentEpoch(opts *bind.TransactOpts, epoch *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "setCurrentEpoch", epoch)
}

// SetCurrentEpoch is a paid mutator transaction binding the contract method 0x1dd6b9b1.
//
// Solidity: function setCurrentEpoch(uint256 epoch) returns()
func (_Staking *StakingSession) SetCurrentEpoch(epoch *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetCurrentEpoch(&_Staking.TransactOpts, epoch)
}

// SetCurrentEpoch is a paid mutator transaction binding the contract method 0x1dd6b9b1.
//
// Solidity: function setCurrentEpoch(uint256 epoch) returns()
func (_Staking *StakingTransactorSession) SetCurrentEpoch(epoch *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetCurrentEpoch(&_Staking.TransactOpts, epoch)
}

// SetEpochDelay is a paid mutator transaction binding the contract method 0xbd695a43.
//
// Solidity: function setEpochDelay(uint256 _epochDelay) returns()
func (_Staking *StakingTransactor) SetEpochDelay(opts *bind.TransactOpts, _epochDelay *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "setEpochDelay", _epochDelay)
}

// SetEpochDelay is a paid mutator transaction binding the contract method 0xbd695a43.
//
// Solidity: function setEpochDelay(uint256 _epochDelay) returns()
func (_Staking *StakingSession) SetEpochDelay(_epochDelay *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetEpochDelay(&_Staking.TransactOpts, _epochDelay)
}

// SetEpochDelay is a paid mutator transaction binding the contract method 0xbd695a43.
//
// Solidity: function setEpochDelay(uint256 _epochDelay) returns()
func (_Staking *StakingTransactorSession) SetEpochDelay(_epochDelay *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetEpochDelay(&_Staking.TransactOpts, _epochDelay)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_Staking *StakingTransactor) SetOwner(opts *bind.TransactOpts, owner_ common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "setOwner", owner_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_Staking *StakingSession) SetOwner(owner_ common.Address) (*types.Transaction, error) {
	return _Staking.Contract.SetOwner(&_Staking.TransactOpts, owner_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_Staking *StakingTransactorSession) SetOwner(owner_ common.Address) (*types.Transaction, error) {
	return _Staking.Contract.SetOwner(&_Staking.TransactOpts, owner_)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_Staking *StakingTransactor) Start(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "start")
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_Staking *StakingSession) Start() (*types.Transaction, error) {
	return _Staking.Contract.Start(&_Staking.TransactOpts)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_Staking *StakingTransactorSession) Start() (*types.Transaction, error) {
	return _Staking.Contract.Start(&_Staking.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_Staking *StakingTransactor) Stop(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "stop")
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_Staking *StakingSession) Stop() (*types.Transaction, error) {
	return _Staking.Contract.Stop(&_Staking.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_Staking *StakingTransactorSession) Stop() (*types.Transaction, error) {
	return _Staking.Contract.Stop(&_Staking.TransactOpts)
}

// UnlockReward is a paid mutator transaction binding the contract method 0xf1b7f4bf.
//
// Solidity: function unlockReward() returns(bool)
func (_Staking *StakingTransactor) UnlockReward(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "unlockReward")
}

// UnlockReward is a paid mutator transaction binding the contract method 0xf1b7f4bf.
//
// Solidity: function unlockReward() returns(bool)
func (_Staking *StakingSession) UnlockReward() (*types.Transaction, error) {
	return _Staking.Contract.UnlockReward(&_Staking.TransactOpts)
}

// UnlockReward is a paid mutator transaction binding the contract method 0xf1b7f4bf.
//
// Solidity: function unlockReward() returns(bool)
func (_Staking *StakingTransactorSession) UnlockReward() (*types.Transaction, error) {
	return _Staking.Contract.UnlockReward(&_Staking.TransactOpts)
}

// UnlockRewardFor is a paid mutator transaction binding the contract method 0x7f91bd69.
//
// Solidity: function unlockRewardFor(address who) returns(bool)
func (_Staking *StakingTransactor) UnlockRewardFor(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "unlockRewardFor", who)
}

// UnlockRewardFor is a paid mutator transaction binding the contract method 0x7f91bd69.
//
// Solidity: function unlockRewardFor(address who) returns(bool)
func (_Staking *StakingSession) UnlockRewardFor(who common.Address) (*types.Transaction, error) {
	return _Staking.Contract.UnlockRewardFor(&_Staking.TransactOpts, who)
}

// UnlockRewardFor is a paid mutator transaction binding the contract method 0x7f91bd69.
//
// Solidity: function unlockRewardFor(address who) returns(bool)
func (_Staking *StakingTransactorSession) UnlockRewardFor(who common.Address) (*types.Transaction, error) {
	return _Staking.Contract.UnlockRewardFor(&_Staking.TransactOpts, who)
}

// UnlockStake is a paid mutator transaction binding the contract method 0xecd8c06a.
//
// Solidity: function unlockStake(uint256 amount) returns(bool)
func (_Staking *StakingTransactor) UnlockStake(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "unlockStake", amount)
}

// UnlockStake is a paid mutator transaction binding the contract method 0xecd8c06a.
//
// Solidity: function unlockStake(uint256 amount) returns(bool)
func (_Staking *StakingSession) UnlockStake(amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.UnlockStake(&_Staking.TransactOpts, amount)
}

// UnlockStake is a paid mutator transaction binding the contract method 0xecd8c06a.
//
// Solidity: function unlockStake(uint256 amount) returns(bool)
func (_Staking *StakingTransactorSession) UnlockStake(amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.UnlockStake(&_Staking.TransactOpts, amount)
}

// UnlockStakeFor is a paid mutator transaction binding the contract method 0xe29dda92.
//
// Solidity: function unlockStakeFor(address who, uint256 amount) returns(bool)
func (_Staking *StakingTransactor) UnlockStakeFor(opts *bind.TransactOpts, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "unlockStakeFor", who, amount)
}

// UnlockStakeFor is a paid mutator transaction binding the contract method 0xe29dda92.
//
// Solidity: function unlockStakeFor(address who, uint256 amount) returns(bool)
func (_Staking *StakingSession) UnlockStakeFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.UnlockStakeFor(&_Staking.TransactOpts, who, amount)
}

// UnlockStakeFor is a paid mutator transaction binding the contract method 0xe29dda92.
//
// Solidity: function unlockStakeFor(address who, uint256 amount) returns(bool)
func (_Staking *StakingTransactorSession) UnlockStakeFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.UnlockStakeFor(&_Staking.TransactOpts, who, amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns(bool)
func (_Staking *StakingTransactor) Withdraw(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "withdraw", amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns(bool)
func (_Staking *StakingSession) Withdraw(amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.Withdraw(&_Staking.TransactOpts, amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 amount) returns(bool)
func (_Staking *StakingTransactorSession) Withdraw(amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.Withdraw(&_Staking.TransactOpts, amount)
}

// WithdrawFor is a paid mutator transaction binding the contract method 0xdb518db2.
//
// Solidity: function withdrawFor(address who, uint256 amount) returns(bool)
func (_Staking *StakingTransactor) WithdrawFor(opts *bind.TransactOpts, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "withdrawFor", who, amount)
}

// WithdrawFor is a paid mutator transaction binding the contract method 0xdb518db2.
//
// Solidity: function withdrawFor(address who, uint256 amount) returns(bool)
func (_Staking *StakingSession) WithdrawFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.WithdrawFor(&_Staking.TransactOpts, who, amount)
}

// WithdrawFor is a paid mutator transaction binding the contract method 0xdb518db2.
//
// Solidity: function withdrawFor(address who, uint256 amount) returns(bool)
func (_Staking *StakingTransactorSession) WithdrawFor(who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.WithdrawFor(&_Staking.TransactOpts, who, amount)
}

// WithdrawReward is a paid mutator transaction binding the contract method 0x523a3f08.
//
// Solidity: function withdrawReward(uint256 amount) returns(bool)
func (_Staking *StakingTransactor) WithdrawReward(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "withdrawReward", amount)
}

// WithdrawReward is a paid mutator transaction binding the contract method 0x523a3f08.
//
// Solidity: function withdrawReward(uint256 amount) returns(bool)
func (_Staking *StakingSession) WithdrawReward(amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.WithdrawReward(&_Staking.TransactOpts, amount)
}

// WithdrawReward is a paid mutator transaction binding the contract method 0x523a3f08.
//
// Solidity: function withdrawReward(uint256 amount) returns(bool)
func (_Staking *StakingTransactorSession) WithdrawReward(amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.WithdrawReward(&_Staking.TransactOpts, amount)
}

// StakingBurntStakeIterator is returned from FilterBurntStake and is used to iterate over the raw logs and unpacked data for BurntStake events raised by the Staking contract.
type StakingBurntStakeIterator struct {
	Event *StakingBurntStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingBurntStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingBurntStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingBurntStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingBurntStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingBurntStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingBurntStake represents a BurntStake event raised by the Staking contract.
type StakingBurntStake struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBurntStake is a free log retrieval operation binding the contract event 0x54420ac6a7570cfba30d2f88982f0749811f67103de3a63ad8b82cb754e8680e.
//
// Solidity: event BurntStake(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) FilterBurntStake(opts *bind.FilterOpts, who []common.Address) (*StakingBurntStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "BurntStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingBurntStakeIterator{contract: _Staking.contract, event: "BurntStake", logs: logs, sub: sub}, nil
}

// WatchBurntStake is a free log subscription operation binding the contract event 0x54420ac6a7570cfba30d2f88982f0749811f67103de3a63ad8b82cb754e8680e.
//
// Solidity: event BurntStake(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) WatchBurntStake(opts *bind.WatchOpts, sink chan<- *StakingBurntStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "BurntStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingBurntStake)
				if err := _Staking.contract.UnpackLog(event, "BurntStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurntStake is a log parse operation binding the contract event 0x54420ac6a7570cfba30d2f88982f0749811f67103de3a63ad8b82cb754e8680e.
//
// Solidity: event BurntStake(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) ParseBurntStake(log types.Log) (*StakingBurntStake, error) {
	event := new(StakingBurntStake)
	if err := _Staking.contract.UnpackLog(event, "BurntStake", log); err != nil {
		return nil, err
	}
	return event, nil
}

// StakingFinedIterator is returned from FilterFined and is used to iterate over the raw logs and unpacked data for Fined events raised by the Staking contract.
type StakingFinedIterator struct {
	Event *StakingFined // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingFinedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingFined)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingFined)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingFinedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingFinedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingFined represents a Fined event raised by the Staking contract.
type StakingFined struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterFined is a free log retrieval operation binding the contract event 0x00913d46aef0f0d115d70ea1c7c23198505f577d1d1916cc60710ca2204ae6ae.
//
// Solidity: event Fined(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) FilterFined(opts *bind.FilterOpts, who []common.Address) (*StakingFinedIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "Fined", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingFinedIterator{contract: _Staking.contract, event: "Fined", logs: logs, sub: sub}, nil
}

// WatchFined is a free log subscription operation binding the contract event 0x00913d46aef0f0d115d70ea1c7c23198505f577d1d1916cc60710ca2204ae6ae.
//
// Solidity: event Fined(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) WatchFined(opts *bind.WatchOpts, sink chan<- *StakingFined, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "Fined", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingFined)
				if err := _Staking.contract.UnpackLog(event, "Fined", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFined is a log parse operation binding the contract event 0x00913d46aef0f0d115d70ea1c7c23198505f577d1d1916cc60710ca2204ae6ae.
//
// Solidity: event Fined(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) ParseFined(log types.Log) (*StakingFined, error) {
	event := new(StakingFined)
	if err := _Staking.contract.UnpackLog(event, "Fined", log); err != nil {
		return nil, err
	}
	return event, nil
}

// StakingLockedRewardIterator is returned from FilterLockedReward and is used to iterate over the raw logs and unpacked data for LockedReward events raised by the Staking contract.
type StakingLockedRewardIterator struct {
	Event *StakingLockedReward // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingLockedRewardIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingLockedReward)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingLockedReward)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingLockedRewardIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingLockedRewardIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingLockedReward represents a LockedReward event raised by the Staking contract.
type StakingLockedReward struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLockedReward is a free log retrieval operation binding the contract event 0x28dc9c0ffa672df041cad84edbee41508284600c9394bda0f8586d012c5e0915.
//
// Solidity: event LockedReward(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) FilterLockedReward(opts *bind.FilterOpts, who []common.Address) (*StakingLockedRewardIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "LockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingLockedRewardIterator{contract: _Staking.contract, event: "LockedReward", logs: logs, sub: sub}, nil
}

// WatchLockedReward is a free log subscription operation binding the contract event 0x28dc9c0ffa672df041cad84edbee41508284600c9394bda0f8586d012c5e0915.
//
// Solidity: event LockedReward(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) WatchLockedReward(opts *bind.WatchOpts, sink chan<- *StakingLockedReward, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "LockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingLockedReward)
				if err := _Staking.contract.UnpackLog(event, "LockedReward", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLockedReward is a log parse operation binding the contract event 0x28dc9c0ffa672df041cad84edbee41508284600c9394bda0f8586d012c5e0915.
//
// Solidity: event LockedReward(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) ParseLockedReward(log types.Log) (*StakingLockedReward, error) {
	event := new(StakingLockedReward)
	if err := _Staking.contract.UnpackLog(event, "LockedReward", log); err != nil {
		return nil, err
	}
	return event, nil
}

// StakingLockedStakeIterator is returned from FilterLockedStake and is used to iterate over the raw logs and unpacked data for LockedStake events raised by the Staking contract.
type StakingLockedStakeIterator struct {
	Event *StakingLockedStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingLockedStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingLockedStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingLockedStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingLockedStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingLockedStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingLockedStake represents a LockedStake event raised by the Staking contract.
type StakingLockedStake struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLockedStake is a free log retrieval operation binding the contract event 0x1de2f07b0a1c69916a8b25b889051644192307ea08444a2e11f8654d1db3ab0c.
//
// Solidity: event LockedStake(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) FilterLockedStake(opts *bind.FilterOpts, who []common.Address) (*StakingLockedStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "LockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingLockedStakeIterator{contract: _Staking.contract, event: "LockedStake", logs: logs, sub: sub}, nil
}

// WatchLockedStake is a free log subscription operation binding the contract event 0x1de2f07b0a1c69916a8b25b889051644192307ea08444a2e11f8654d1db3ab0c.
//
// Solidity: event LockedStake(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) WatchLockedStake(opts *bind.WatchOpts, sink chan<- *StakingLockedStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "LockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingLockedStake)
				if err := _Staking.contract.UnpackLog(event, "LockedStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLockedStake is a log parse operation binding the contract event 0x1de2f07b0a1c69916a8b25b889051644192307ea08444a2e11f8654d1db3ab0c.
//
// Solidity: event LockedStake(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) ParseLockedStake(log types.Log) (*StakingLockedStake, error) {
	event := new(StakingLockedStake)
	if err := _Staking.contract.UnpackLog(event, "LockedStake", log); err != nil {
		return nil, err
	}
	return event, nil
}

// StakingLogSetAuthorityIterator is returned from FilterLogSetAuthority and is used to iterate over the raw logs and unpacked data for LogSetAuthority events raised by the Staking contract.
type StakingLogSetAuthorityIterator struct {
	Event *StakingLogSetAuthority // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingLogSetAuthorityIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingLogSetAuthority)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingLogSetAuthority)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingLogSetAuthorityIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingLogSetAuthorityIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingLogSetAuthority represents a LogSetAuthority event raised by the Staking contract.
type StakingLogSetAuthority struct {
	Authority common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterLogSetAuthority is a free log retrieval operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_Staking *StakingFilterer) FilterLogSetAuthority(opts *bind.FilterOpts, authority []common.Address) (*StakingLogSetAuthorityIterator, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "LogSetAuthority", authorityRule)
	if err != nil {
		return nil, err
	}
	return &StakingLogSetAuthorityIterator{contract: _Staking.contract, event: "LogSetAuthority", logs: logs, sub: sub}, nil
}

// WatchLogSetAuthority is a free log subscription operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_Staking *StakingFilterer) WatchLogSetAuthority(opts *bind.WatchOpts, sink chan<- *StakingLogSetAuthority, authority []common.Address) (event.Subscription, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "LogSetAuthority", authorityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingLogSetAuthority)
				if err := _Staking.contract.UnpackLog(event, "LogSetAuthority", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogSetAuthority is a log parse operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_Staking *StakingFilterer) ParseLogSetAuthority(log types.Log) (*StakingLogSetAuthority, error) {
	event := new(StakingLogSetAuthority)
	if err := _Staking.contract.UnpackLog(event, "LogSetAuthority", log); err != nil {
		return nil, err
	}
	return event, nil
}

// StakingLogSetOwnerIterator is returned from FilterLogSetOwner and is used to iterate over the raw logs and unpacked data for LogSetOwner events raised by the Staking contract.
type StakingLogSetOwnerIterator struct {
	Event *StakingLogSetOwner // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingLogSetOwnerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingLogSetOwner)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingLogSetOwner)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingLogSetOwnerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingLogSetOwnerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingLogSetOwner represents a LogSetOwner event raised by the Staking contract.
type StakingLogSetOwner struct {
	Owner common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogSetOwner is a free log retrieval operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_Staking *StakingFilterer) FilterLogSetOwner(opts *bind.FilterOpts, owner []common.Address) (*StakingLogSetOwnerIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "LogSetOwner", ownerRule)
	if err != nil {
		return nil, err
	}
	return &StakingLogSetOwnerIterator{contract: _Staking.contract, event: "LogSetOwner", logs: logs, sub: sub}, nil
}

// WatchLogSetOwner is a free log subscription operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_Staking *StakingFilterer) WatchLogSetOwner(opts *bind.WatchOpts, sink chan<- *StakingLogSetOwner, owner []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "LogSetOwner", ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingLogSetOwner)
				if err := _Staking.contract.UnpackLog(event, "LogSetOwner", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogSetOwner is a log parse operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_Staking *StakingFilterer) ParseLogSetOwner(log types.Log) (*StakingLogSetOwner, error) {
	event := new(StakingLogSetOwner)
	if err := _Staking.contract.UnpackLog(event, "LogSetOwner", log); err != nil {
		return nil, err
	}
	return event, nil
}

// StakingRequestedUnlockStakeIterator is returned from FilterRequestedUnlockStake and is used to iterate over the raw logs and unpacked data for RequestedUnlockStake events raised by the Staking contract.
type StakingRequestedUnlockStakeIterator struct {
	Event *StakingRequestedUnlockStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingRequestedUnlockStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingRequestedUnlockStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingRequestedUnlockStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingRequestedUnlockStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingRequestedUnlockStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingRequestedUnlockStake represents a RequestedUnlockStake event raised by the Staking contract.
type StakingRequestedUnlockStake struct {
	Who common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterRequestedUnlockStake is a free log retrieval operation binding the contract event 0x1fde0d8a6620647f5c7b5632a87b23101ba553c9b474caf1134fb24d92bf6ddc.
//
// Solidity: event RequestedUnlockStake(address indexed who)
func (_Staking *StakingFilterer) FilterRequestedUnlockStake(opts *bind.FilterOpts, who []common.Address) (*StakingRequestedUnlockStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "RequestedUnlockStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingRequestedUnlockStakeIterator{contract: _Staking.contract, event: "RequestedUnlockStake", logs: logs, sub: sub}, nil
}

// WatchRequestedUnlockStake is a free log subscription operation binding the contract event 0x1fde0d8a6620647f5c7b5632a87b23101ba553c9b474caf1134fb24d92bf6ddc.
//
// Solidity: event RequestedUnlockStake(address indexed who)
func (_Staking *StakingFilterer) WatchRequestedUnlockStake(opts *bind.WatchOpts, sink chan<- *StakingRequestedUnlockStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "RequestedUnlockStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingRequestedUnlockStake)
				if err := _Staking.contract.UnpackLog(event, "RequestedUnlockStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRequestedUnlockStake is a log parse operation binding the contract event 0x1fde0d8a6620647f5c7b5632a87b23101ba553c9b474caf1134fb24d92bf6ddc.
//
// Solidity: event RequestedUnlockStake(address indexed who)
func (_Staking *StakingFilterer) ParseRequestedUnlockStake(log types.Log) (*StakingRequestedUnlockStake, error) {
	event := new(StakingRequestedUnlockStake)
	if err := _Staking.contract.UnpackLog(event, "RequestedUnlockStake", log); err != nil {
		return nil, err
	}
	return event, nil
}

// StakingUnlockedRewardIterator is returned from FilterUnlockedReward and is used to iterate over the raw logs and unpacked data for UnlockedReward events raised by the Staking contract.
type StakingUnlockedRewardIterator struct {
	Event *StakingUnlockedReward // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingUnlockedRewardIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingUnlockedReward)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingUnlockedReward)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingUnlockedRewardIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingUnlockedRewardIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingUnlockedReward represents a UnlockedReward event raised by the Staking contract.
type StakingUnlockedReward struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterUnlockedReward is a free log retrieval operation binding the contract event 0x496a1c9a1a9ac29d87ecb4e563683ebd0ee80798869f36c86175059eb5dc7304.
//
// Solidity: event UnlockedReward(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) FilterUnlockedReward(opts *bind.FilterOpts, who []common.Address) (*StakingUnlockedRewardIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "UnlockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingUnlockedRewardIterator{contract: _Staking.contract, event: "UnlockedReward", logs: logs, sub: sub}, nil
}

// WatchUnlockedReward is a free log subscription operation binding the contract event 0x496a1c9a1a9ac29d87ecb4e563683ebd0ee80798869f36c86175059eb5dc7304.
//
// Solidity: event UnlockedReward(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) WatchUnlockedReward(opts *bind.WatchOpts, sink chan<- *StakingUnlockedReward, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "UnlockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingUnlockedReward)
				if err := _Staking.contract.UnpackLog(event, "UnlockedReward", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnlockedReward is a log parse operation binding the contract event 0x496a1c9a1a9ac29d87ecb4e563683ebd0ee80798869f36c86175059eb5dc7304.
//
// Solidity: event UnlockedReward(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) ParseUnlockedReward(log types.Log) (*StakingUnlockedReward, error) {
	event := new(StakingUnlockedReward)
	if err := _Staking.contract.UnpackLog(event, "UnlockedReward", log); err != nil {
		return nil, err
	}
	return event, nil
}

// StakingUnlockedStakeIterator is returned from FilterUnlockedStake and is used to iterate over the raw logs and unpacked data for UnlockedStake events raised by the Staking contract.
type StakingUnlockedStakeIterator struct {
	Event *StakingUnlockedStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingUnlockedStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingUnlockedStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingUnlockedStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingUnlockedStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingUnlockedStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingUnlockedStake represents a UnlockedStake event raised by the Staking contract.
type StakingUnlockedStake struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterUnlockedStake is a free log retrieval operation binding the contract event 0x252a696583e35c4d61332829d3bb2a8236f2500140258f089951799c9b999a9c.
//
// Solidity: event UnlockedStake(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) FilterUnlockedStake(opts *bind.FilterOpts, who []common.Address) (*StakingUnlockedStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "UnlockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingUnlockedStakeIterator{contract: _Staking.contract, event: "UnlockedStake", logs: logs, sub: sub}, nil
}

// WatchUnlockedStake is a free log subscription operation binding the contract event 0x252a696583e35c4d61332829d3bb2a8236f2500140258f089951799c9b999a9c.
//
// Solidity: event UnlockedStake(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) WatchUnlockedStake(opts *bind.WatchOpts, sink chan<- *StakingUnlockedStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "UnlockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingUnlockedStake)
				if err := _Staking.contract.UnpackLog(event, "UnlockedStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnlockedStake is a log parse operation binding the contract event 0x252a696583e35c4d61332829d3bb2a8236f2500140258f089951799c9b999a9c.
//
// Solidity: event UnlockedStake(address indexed who, uint256 amount)
func (_Staking *StakingFilterer) ParseUnlockedStake(log types.Log) (*StakingUnlockedStake, error) {
	event := new(StakingUnlockedStake)
	if err := _Staking.contract.UnpackLog(event, "UnlockedStake", log); err != nil {
		return nil, err
	}
	return event, nil
}

// StakingEventsABI is the input ABI used to generate the binding from.
const StakingEventsABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BurntStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Fined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockedReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockedStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"RequestedUnlockStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnlockedReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnlockedStake\",\"type\":\"event\"}]"

// StakingEventsBin is the compiled bytecode used for deploying new contracts.
var StakingEventsBin = "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212204ad4e275b8fef437d1145feeae9619d73199a99c71cc9a58c6f65f93a80bdb8864736f6c63430007060033"

// DeployStakingEvents deploys a new Ethereum contract, binding an instance of StakingEvents to it.
func DeployStakingEvents(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *StakingEvents, error) {
	parsed, err := abi.JSON(strings.NewReader(StakingEventsABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(StakingEventsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StakingEvents{StakingEventsCaller: StakingEventsCaller{contract: contract}, StakingEventsTransactor: StakingEventsTransactor{contract: contract}, StakingEventsFilterer: StakingEventsFilterer{contract: contract}}, nil
}

// StakingEvents is an auto generated Go binding around an Ethereum contract.
type StakingEvents struct {
	StakingEventsCaller     // Read-only binding to the contract
	StakingEventsTransactor // Write-only binding to the contract
	StakingEventsFilterer   // Log filterer for contract events
}

// StakingEventsCaller is an auto generated read-only Go binding around an Ethereum contract.
type StakingEventsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingEventsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StakingEventsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingEventsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StakingEventsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingEventsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StakingEventsSession struct {
	Contract     *StakingEvents    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StakingEventsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StakingEventsCallerSession struct {
	Contract *StakingEventsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// StakingEventsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StakingEventsTransactorSession struct {
	Contract     *StakingEventsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// StakingEventsRaw is an auto generated low-level Go binding around an Ethereum contract.
type StakingEventsRaw struct {
	Contract *StakingEvents // Generic contract binding to access the raw methods on
}

// StakingEventsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StakingEventsCallerRaw struct {
	Contract *StakingEventsCaller // Generic read-only contract binding to access the raw methods on
}

// StakingEventsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StakingEventsTransactorRaw struct {
	Contract *StakingEventsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStakingEvents creates a new instance of StakingEvents, bound to a specific deployed contract.
func NewStakingEvents(address common.Address, backend bind.ContractBackend) (*StakingEvents, error) {
	contract, err := bindStakingEvents(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StakingEvents{StakingEventsCaller: StakingEventsCaller{contract: contract}, StakingEventsTransactor: StakingEventsTransactor{contract: contract}, StakingEventsFilterer: StakingEventsFilterer{contract: contract}}, nil
}

// NewStakingEventsCaller creates a new read-only instance of StakingEvents, bound to a specific deployed contract.
func NewStakingEventsCaller(address common.Address, caller bind.ContractCaller) (*StakingEventsCaller, error) {
	contract, err := bindStakingEvents(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StakingEventsCaller{contract: contract}, nil
}

// NewStakingEventsTransactor creates a new write-only instance of StakingEvents, bound to a specific deployed contract.
func NewStakingEventsTransactor(address common.Address, transactor bind.ContractTransactor) (*StakingEventsTransactor, error) {
	contract, err := bindStakingEvents(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StakingEventsTransactor{contract: contract}, nil
}

// NewStakingEventsFilterer creates a new log filterer instance of StakingEvents, bound to a specific deployed contract.
func NewStakingEventsFilterer(address common.Address, filterer bind.ContractFilterer) (*StakingEventsFilterer, error) {
	contract, err := bindStakingEvents(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StakingEventsFilterer{contract: contract}, nil
}

// bindStakingEvents binds a generic wrapper to an already deployed contract.
func bindStakingEvents(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StakingEventsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakingEvents *StakingEventsRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _StakingEvents.Contract.StakingEventsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakingEvents *StakingEventsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingEvents.Contract.StakingEventsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakingEvents *StakingEventsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakingEvents.Contract.StakingEventsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakingEvents *StakingEventsCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _StakingEvents.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakingEvents *StakingEventsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingEvents.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakingEvents *StakingEventsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakingEvents.Contract.contract.Transact(opts, method, params...)
}

// StakingEventsBurntStakeIterator is returned from FilterBurntStake and is used to iterate over the raw logs and unpacked data for BurntStake events raised by the StakingEvents contract.
type StakingEventsBurntStakeIterator struct {
	Event *StakingEventsBurntStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingEventsBurntStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingEventsBurntStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingEventsBurntStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingEventsBurntStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingEventsBurntStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingEventsBurntStake represents a BurntStake event raised by the StakingEvents contract.
type StakingEventsBurntStake struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBurntStake is a free log retrieval operation binding the contract event 0x54420ac6a7570cfba30d2f88982f0749811f67103de3a63ad8b82cb754e8680e.
//
// Solidity: event BurntStake(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) FilterBurntStake(opts *bind.FilterOpts, who []common.Address) (*StakingEventsBurntStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.FilterLogs(opts, "BurntStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingEventsBurntStakeIterator{contract: _StakingEvents.contract, event: "BurntStake", logs: logs, sub: sub}, nil
}

// WatchBurntStake is a free log subscription operation binding the contract event 0x54420ac6a7570cfba30d2f88982f0749811f67103de3a63ad8b82cb754e8680e.
//
// Solidity: event BurntStake(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) WatchBurntStake(opts *bind.WatchOpts, sink chan<- *StakingEventsBurntStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.WatchLogs(opts, "BurntStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingEventsBurntStake)
				if err := _StakingEvents.contract.UnpackLog(event, "BurntStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurntStake is a log parse operation binding the contract event 0x54420ac6a7570cfba30d2f88982f0749811f67103de3a63ad8b82cb754e8680e.
//
// Solidity: event BurntStake(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) ParseBurntStake(log types.Log) (*StakingEventsBurntStake, error) {
	event := new(StakingEventsBurntStake)
	if err := _StakingEvents.contract.UnpackLog(event, "BurntStake", log); err != nil {
		return nil, err
	}
	return event, nil
}

// StakingEventsFinedIterator is returned from FilterFined and is used to iterate over the raw logs and unpacked data for Fined events raised by the StakingEvents contract.
type StakingEventsFinedIterator struct {
	Event *StakingEventsFined // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingEventsFinedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingEventsFined)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingEventsFined)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingEventsFinedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingEventsFinedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingEventsFined represents a Fined event raised by the StakingEvents contract.
type StakingEventsFined struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterFined is a free log retrieval operation binding the contract event 0x00913d46aef0f0d115d70ea1c7c23198505f577d1d1916cc60710ca2204ae6ae.
//
// Solidity: event Fined(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) FilterFined(opts *bind.FilterOpts, who []common.Address) (*StakingEventsFinedIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.FilterLogs(opts, "Fined", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingEventsFinedIterator{contract: _StakingEvents.contract, event: "Fined", logs: logs, sub: sub}, nil
}

// WatchFined is a free log subscription operation binding the contract event 0x00913d46aef0f0d115d70ea1c7c23198505f577d1d1916cc60710ca2204ae6ae.
//
// Solidity: event Fined(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) WatchFined(opts *bind.WatchOpts, sink chan<- *StakingEventsFined, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.WatchLogs(opts, "Fined", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingEventsFined)
				if err := _StakingEvents.contract.UnpackLog(event, "Fined", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFined is a log parse operation binding the contract event 0x00913d46aef0f0d115d70ea1c7c23198505f577d1d1916cc60710ca2204ae6ae.
//
// Solidity: event Fined(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) ParseFined(log types.Log) (*StakingEventsFined, error) {
	event := new(StakingEventsFined)
	if err := _StakingEvents.contract.UnpackLog(event, "Fined", log); err != nil {
		return nil, err
	}
	return event, nil
}

// StakingEventsLockedRewardIterator is returned from FilterLockedReward and is used to iterate over the raw logs and unpacked data for LockedReward events raised by the StakingEvents contract.
type StakingEventsLockedRewardIterator struct {
	Event *StakingEventsLockedReward // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingEventsLockedRewardIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingEventsLockedReward)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingEventsLockedReward)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingEventsLockedRewardIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingEventsLockedRewardIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingEventsLockedReward represents a LockedReward event raised by the StakingEvents contract.
type StakingEventsLockedReward struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLockedReward is a free log retrieval operation binding the contract event 0x28dc9c0ffa672df041cad84edbee41508284600c9394bda0f8586d012c5e0915.
//
// Solidity: event LockedReward(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) FilterLockedReward(opts *bind.FilterOpts, who []common.Address) (*StakingEventsLockedRewardIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.FilterLogs(opts, "LockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingEventsLockedRewardIterator{contract: _StakingEvents.contract, event: "LockedReward", logs: logs, sub: sub}, nil
}

// WatchLockedReward is a free log subscription operation binding the contract event 0x28dc9c0ffa672df041cad84edbee41508284600c9394bda0f8586d012c5e0915.
//
// Solidity: event LockedReward(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) WatchLockedReward(opts *bind.WatchOpts, sink chan<- *StakingEventsLockedReward, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.WatchLogs(opts, "LockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingEventsLockedReward)
				if err := _StakingEvents.contract.UnpackLog(event, "LockedReward", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLockedReward is a log parse operation binding the contract event 0x28dc9c0ffa672df041cad84edbee41508284600c9394bda0f8586d012c5e0915.
//
// Solidity: event LockedReward(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) ParseLockedReward(log types.Log) (*StakingEventsLockedReward, error) {
	event := new(StakingEventsLockedReward)
	if err := _StakingEvents.contract.UnpackLog(event, "LockedReward", log); err != nil {
		return nil, err
	}
	return event, nil
}

// StakingEventsLockedStakeIterator is returned from FilterLockedStake and is used to iterate over the raw logs and unpacked data for LockedStake events raised by the StakingEvents contract.
type StakingEventsLockedStakeIterator struct {
	Event *StakingEventsLockedStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingEventsLockedStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingEventsLockedStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingEventsLockedStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingEventsLockedStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingEventsLockedStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingEventsLockedStake represents a LockedStake event raised by the StakingEvents contract.
type StakingEventsLockedStake struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLockedStake is a free log retrieval operation binding the contract event 0x1de2f07b0a1c69916a8b25b889051644192307ea08444a2e11f8654d1db3ab0c.
//
// Solidity: event LockedStake(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) FilterLockedStake(opts *bind.FilterOpts, who []common.Address) (*StakingEventsLockedStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.FilterLogs(opts, "LockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingEventsLockedStakeIterator{contract: _StakingEvents.contract, event: "LockedStake", logs: logs, sub: sub}, nil
}

// WatchLockedStake is a free log subscription operation binding the contract event 0x1de2f07b0a1c69916a8b25b889051644192307ea08444a2e11f8654d1db3ab0c.
//
// Solidity: event LockedStake(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) WatchLockedStake(opts *bind.WatchOpts, sink chan<- *StakingEventsLockedStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.WatchLogs(opts, "LockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingEventsLockedStake)
				if err := _StakingEvents.contract.UnpackLog(event, "LockedStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLockedStake is a log parse operation binding the contract event 0x1de2f07b0a1c69916a8b25b889051644192307ea08444a2e11f8654d1db3ab0c.
//
// Solidity: event LockedStake(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) ParseLockedStake(log types.Log) (*StakingEventsLockedStake, error) {
	event := new(StakingEventsLockedStake)
	if err := _StakingEvents.contract.UnpackLog(event, "LockedStake", log); err != nil {
		return nil, err
	}
	return event, nil
}

// StakingEventsRequestedUnlockStakeIterator is returned from FilterRequestedUnlockStake and is used to iterate over the raw logs and unpacked data for RequestedUnlockStake events raised by the StakingEvents contract.
type StakingEventsRequestedUnlockStakeIterator struct {
	Event *StakingEventsRequestedUnlockStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingEventsRequestedUnlockStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingEventsRequestedUnlockStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingEventsRequestedUnlockStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingEventsRequestedUnlockStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingEventsRequestedUnlockStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingEventsRequestedUnlockStake represents a RequestedUnlockStake event raised by the StakingEvents contract.
type StakingEventsRequestedUnlockStake struct {
	Who common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterRequestedUnlockStake is a free log retrieval operation binding the contract event 0x1fde0d8a6620647f5c7b5632a87b23101ba553c9b474caf1134fb24d92bf6ddc.
//
// Solidity: event RequestedUnlockStake(address indexed who)
func (_StakingEvents *StakingEventsFilterer) FilterRequestedUnlockStake(opts *bind.FilterOpts, who []common.Address) (*StakingEventsRequestedUnlockStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.FilterLogs(opts, "RequestedUnlockStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingEventsRequestedUnlockStakeIterator{contract: _StakingEvents.contract, event: "RequestedUnlockStake", logs: logs, sub: sub}, nil
}

// WatchRequestedUnlockStake is a free log subscription operation binding the contract event 0x1fde0d8a6620647f5c7b5632a87b23101ba553c9b474caf1134fb24d92bf6ddc.
//
// Solidity: event RequestedUnlockStake(address indexed who)
func (_StakingEvents *StakingEventsFilterer) WatchRequestedUnlockStake(opts *bind.WatchOpts, sink chan<- *StakingEventsRequestedUnlockStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.WatchLogs(opts, "RequestedUnlockStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingEventsRequestedUnlockStake)
				if err := _StakingEvents.contract.UnpackLog(event, "RequestedUnlockStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRequestedUnlockStake is a log parse operation binding the contract event 0x1fde0d8a6620647f5c7b5632a87b23101ba553c9b474caf1134fb24d92bf6ddc.
//
// Solidity: event RequestedUnlockStake(address indexed who)
func (_StakingEvents *StakingEventsFilterer) ParseRequestedUnlockStake(log types.Log) (*StakingEventsRequestedUnlockStake, error) {
	event := new(StakingEventsRequestedUnlockStake)
	if err := _StakingEvents.contract.UnpackLog(event, "RequestedUnlockStake", log); err != nil {
		return nil, err
	}
	return event, nil
}

// StakingEventsUnlockedRewardIterator is returned from FilterUnlockedReward and is used to iterate over the raw logs and unpacked data for UnlockedReward events raised by the StakingEvents contract.
type StakingEventsUnlockedRewardIterator struct {
	Event *StakingEventsUnlockedReward // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingEventsUnlockedRewardIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingEventsUnlockedReward)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingEventsUnlockedReward)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingEventsUnlockedRewardIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingEventsUnlockedRewardIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingEventsUnlockedReward represents a UnlockedReward event raised by the StakingEvents contract.
type StakingEventsUnlockedReward struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterUnlockedReward is a free log retrieval operation binding the contract event 0x496a1c9a1a9ac29d87ecb4e563683ebd0ee80798869f36c86175059eb5dc7304.
//
// Solidity: event UnlockedReward(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) FilterUnlockedReward(opts *bind.FilterOpts, who []common.Address) (*StakingEventsUnlockedRewardIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.FilterLogs(opts, "UnlockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingEventsUnlockedRewardIterator{contract: _StakingEvents.contract, event: "UnlockedReward", logs: logs, sub: sub}, nil
}

// WatchUnlockedReward is a free log subscription operation binding the contract event 0x496a1c9a1a9ac29d87ecb4e563683ebd0ee80798869f36c86175059eb5dc7304.
//
// Solidity: event UnlockedReward(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) WatchUnlockedReward(opts *bind.WatchOpts, sink chan<- *StakingEventsUnlockedReward, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.WatchLogs(opts, "UnlockedReward", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingEventsUnlockedReward)
				if err := _StakingEvents.contract.UnpackLog(event, "UnlockedReward", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnlockedReward is a log parse operation binding the contract event 0x496a1c9a1a9ac29d87ecb4e563683ebd0ee80798869f36c86175059eb5dc7304.
//
// Solidity: event UnlockedReward(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) ParseUnlockedReward(log types.Log) (*StakingEventsUnlockedReward, error) {
	event := new(StakingEventsUnlockedReward)
	if err := _StakingEvents.contract.UnpackLog(event, "UnlockedReward", log); err != nil {
		return nil, err
	}
	return event, nil
}

// StakingEventsUnlockedStakeIterator is returned from FilterUnlockedStake and is used to iterate over the raw logs and unpacked data for UnlockedStake events raised by the StakingEvents contract.
type StakingEventsUnlockedStakeIterator struct {
	Event *StakingEventsUnlockedStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingEventsUnlockedStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingEventsUnlockedStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingEventsUnlockedStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingEventsUnlockedStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingEventsUnlockedStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingEventsUnlockedStake represents a UnlockedStake event raised by the StakingEvents contract.
type StakingEventsUnlockedStake struct {
	Who    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterUnlockedStake is a free log retrieval operation binding the contract event 0x252a696583e35c4d61332829d3bb2a8236f2500140258f089951799c9b999a9c.
//
// Solidity: event UnlockedStake(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) FilterUnlockedStake(opts *bind.FilterOpts, who []common.Address) (*StakingEventsUnlockedStakeIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.FilterLogs(opts, "UnlockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return &StakingEventsUnlockedStakeIterator{contract: _StakingEvents.contract, event: "UnlockedStake", logs: logs, sub: sub}, nil
}

// WatchUnlockedStake is a free log subscription operation binding the contract event 0x252a696583e35c4d61332829d3bb2a8236f2500140258f089951799c9b999a9c.
//
// Solidity: event UnlockedStake(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) WatchUnlockedStake(opts *bind.WatchOpts, sink chan<- *StakingEventsUnlockedStake, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _StakingEvents.contract.WatchLogs(opts, "UnlockedStake", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingEventsUnlockedStake)
				if err := _StakingEvents.contract.UnpackLog(event, "UnlockedStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnlockedStake is a log parse operation binding the contract event 0x252a696583e35c4d61332829d3bb2a8236f2500140258f089951799c9b999a9c.
//
// Solidity: event UnlockedStake(address indexed who, uint256 amount)
func (_StakingEvents *StakingEventsFilterer) ParseUnlockedStake(log types.Log) (*StakingEventsUnlockedStake, error) {
	event := new(StakingEventsUnlockedStake)
	if err := _StakingEvents.contract.UnpackLog(event, "UnlockedStake", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TokenABI is the input ABI used to generate the binding from.
const TokenABI = "[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbol_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name_\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Start\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Stop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contractDSAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"move\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"pull\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"push\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractDSAuthority\",\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"name_\",\"type\":\"bytes32\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// TokenBin is the compiled bytecode used for deploying new contracts.
var TokenBin = "0x6080604052601260065560006007556040516200001c9062000c11565b604051809103906000f08015801562000039573d6000803e3d6000fd5b50600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503480156200008757600080fd5b5060405162003c3238038062003c3283398181016040526040811015620000ad57600080fd5b8101908080519060200190929190805190602001909291905050508133600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9460405160405180910390a2806005819055505033600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620001c9600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16620002d760201b60201c565b620001fc600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166200049260201b60201c565b80600781905550600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e348da13336040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156200028f57600080fd5b505af1158015620002a4573d6000803e3d6000fd5b505050506012600681905550620002cf336c0c9f2c9cd04674edea40000000620005e160201b60201c565b505062000c1f565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806200037d5750600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b620003d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603181526020018062003c016031913960400191505060405180910390fd5b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e348da13826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156200046057600080fd5b505af115801562000475573d6000803e3d6000fd5b505050506200048f816200080e60201b620020d71760201c565b50565b620004c8336000357fffffffff00000000000000000000000000000000000000000000000000000000166200097860201b60201c565b6200053b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f64732d617574682d756e617574686f72697a656400000000000000000000000081525060200191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada460405160405180910390a250565b62000617336000357fffffffff00000000000000000000000000000000000000000000000000000000166200097860201b60201c565b6200068a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f64732d617574682d756e617574686f72697a656400000000000000000000000081525060200191505060405180910390fd5b600160149054906101000a900460ff16156200070e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f64732d73746f702d69732d73746f70706564000000000000000000000000000081525060200191505060405180910390fd5b6200075f600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548262000b8d60201b60201c565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550620007b66002548262000b8d60201b60201c565b6002819055508173ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885826040518082815260200191505060405180910390a25050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480620008b45750600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6200090b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603181526020018062003c016031913960400191505060405180910390fd5b6001600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060096000815480929190600101919050555050565b60003073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415620009b9576001905062000b87565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141562000a1a576001905062000b87565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141562000a7a576000905062000b87565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b70096138430856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff168152602001827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001935050505060206040518083038186803b15801562000b4757600080fd5b505afa15801562000b5c573d6000803e3d6000fd5b505050506040513d602081101562000b7357600080fd5b810190808051906020019092919050505090505b92915050565b600082828401915081101562000c0b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f64732d6d6174682d6164642d6f766572666c6f7700000000000000000000000081525060200191505060405180910390fd5b92915050565b61084480620033bd83390190565b61278e8062000c2f6000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c80638da5cb5b116100f9578063be9a655511610097578063dd62ed3e11610071578063dd62ed3e1461072a578063e348da13146107a2578063f2d5d56b146107e6578063fad8b32a14610834576101a9565b8063be9a655514610692578063bf7e214f1461069c578063daea85c5146106d0576101a9565b8063a0712d68116100d3578063a0712d6814610544578063a9059cbb14610572578063b753a98c146105d6578063bb35783b14610624576101a9565b80638da5cb5b146104a457806395d89b41146104d85780639dc29fac146104f6576101a9565b8063313ce567116101665780635ac801fe116101405780635ac801fe146103ba57806370a08231146103e857806375f12b21146104405780637a9e5e4b14610460576101a9565b8063313ce5671461032057806340c10f191461033e57806342966c681461038c576101a9565b806306fdde03146101ae57806307da68f5146101cc578063095ea7b3146101d657806313af40351461023a57806318160ddd1461027e57806323b872dd1461029c575b600080fd5b6101b6610878565b6040518082815260200191505060405180910390f35b6101d461087e565b005b610222600480360360408110156101ec57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610966565b60405180821515815260200191505060405180910390f35b61027c6004803603602081101561025057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610adb565b005b610286610c24565b6040518082815260200191505060405180910390f35b610308600480360360608110156102b257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c2a565b60405180821515815260200191505060405180910390f35b6103286111c2565b6040518082815260200191505060405180910390f35b61038a6004803603604081101561035457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506111c8565b005b6103b8600480360360208110156103a257600080fd5b81019080803590602001909291905050506113db565b005b6103e6600480360360208110156103d057600080fd5b81019080803590602001909291905050506113e8565b005b61042a600480360360208110156103fe57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611492565b6040518082815260200191505060405180910390f35b6104486114aa565b60405180821515815260200191505060405180910390f35b6104a26004803603602081101561047657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114bd565b005b6104ac611603565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6104e0611629565b6040518082815260200191505060405180910390f35b6105426004803603604081101561050c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061162f565b005b6105706004803603602081101561055a57600080fd5b8101908080359060200190929190505050611bcd565b005b6105be6004803603604081101561058857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611bda565b60405180821515815260200191505060405180910390f35b610622600480360360408110156105ec57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611bef565b005b6106906004803603606081101561063a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611bff565b005b61069a611c10565b005b6106a4611cf9565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610712600480360360208110156106e657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d1d565b60405180821515815260200191505060405180910390f35b61078c6004803603604081101561074057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d50565b6040518082815260200191505060405180910390f35b6107e4600480360360208110156107b857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d75565b005b610832600480360360408110156107fc57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611f1e565b005b6108766004803603602081101561084a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611f2e565b005b60075481565b6108ac336000357fffffffff000000000000000000000000000000000000000000000000000000001661223e565b61091e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f64732d617574682d756e617574686f72697a656400000000000000000000000081525060200191505060405180910390fd5b60018060146101000a81548160ff0219169083151502179055507fbedf0f4abfe86d4ffad593d9607fe70e83ea706033d44d24b3b6283cf3fc4f6b60405160405180910390a1565b6000600160149054906101000a900460ff16156109eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f64732d73746f702d69732d73746f70706564000000000000000000000000000081525060200191505060405180910390fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b610b09336000357fffffffff000000000000000000000000000000000000000000000000000000001661223e565b610b7b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f64732d617574682d756e617574686f72697a656400000000000000000000000081525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9460405160405180910390a250565b60025481565b6000600160149054906101000a900460ff1615610caf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f64732d73746f702d69732d73746f70706564000000000000000000000000000081525060200191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614158015610d8757507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b15610f855781600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610e7e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f64732d746f6b656e2d696e73756666696369656e742d617070726f76616c000081525060200191505060405180910390fd5b610f04600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548361244a565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b81600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561103a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f64732d746f6b656e2d696e73756666696369656e742d62616c616e636500000081525060200191505060405180910390fd5b611083600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548361244a565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061110f600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836124cd565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60065481565b6111f6336000357fffffffff000000000000000000000000000000000000000000000000000000001661223e565b611268576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f64732d617574682d756e617574686f72697a656400000000000000000000000081525060200191505060405180910390fd5b600160149054906101000a900460ff16156112eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f64732d73746f702d69732d73746f70706564000000000000000000000000000081525060200191505060405180910390fd5b611334600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054826124cd565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611383600254826124cd565b6002819055508173ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885826040518082815260200191505060405180910390a25050565b6113e5338261162f565b50565b611416336000357fffffffff000000000000000000000000000000000000000000000000000000001661223e565b611488576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f64732d617574682d756e617574686f72697a656400000000000000000000000081525060200191505060405180910390fd5b8060078190555050565b60036020528060005260406000206000915090505481565b600160149054906101000a900460ff1681565b6114eb336000357fffffffff000000000000000000000000000000000000000000000000000000001661223e565b61155d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f64732d617574682d756e617574686f72697a656400000000000000000000000081525060200191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada460405160405180910390a250565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b61165d336000357fffffffff000000000000000000000000000000000000000000000000000000001661223e565b6116cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f64732d617574682d756e617574686f72697a656400000000000000000000000081525060200191505060405180910390fd5b600160149054906101000a900460ff1615611752576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f64732d73746f702d69732d73746f70706564000000000000000000000000000081525060200191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415801561182a57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b15611a285780600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611921576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f64732d746f6b656e2d696e73756666696369656e742d617070726f76616c000081525060200191505060405180910390fd5b6119a7600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548261244a565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611add576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f64732d746f6b656e2d696e73756666696369656e742d62616c616e636500000081525060200191505060405180910390fd5b611b26600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548261244a565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611b756002548261244a565b6002819055508173ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5826040518082815260200191505060405180910390a25050565b611bd733826111c8565b50565b6000611be7338484610c2a565b905092915050565b611bfa338383610c2a565b505050565b611c0a838383610c2a565b50505050565b611c3e336000357fffffffff000000000000000000000000000000000000000000000000000000001661223e565b611cb0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f64732d617574682d756e617574686f72697a656400000000000000000000000081525060200191505060405180910390fd5b6000600160146101000a81548160ff0219169083151502179055507f1b55ba3aa851a46be3b365aee5b5c140edd620d578922f3e8466d2cbd96f954b60405160405180910390a1565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000611d49827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610966565b9050919050565b6004602052816000526040600020602052806000526040600020600091509150505481565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611e1a5750600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b611e6f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806127286031913960400191505060405180910390fd5b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e348da13826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015611efa57600080fd5b505af1158015611f0e573d6000803e3d6000fd5b50505050611f1b816120d7565b50565b611f29823383610c2a565b505050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611fd35750600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b612028576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806127286031913960400191505060405180910390fd5b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fad8b32a826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156120b357600080fd5b505af11580156120c7573d6000803e3d6000fd5b505050506120d481612550565b50565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061217c5750600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6121d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806127286031913960400191505060405180910390fd5b6001600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060096000815480929190600101919050555050565b60003073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561227d5760019050612444565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156122dc5760019050612444565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561233a5760009050612444565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b70096138430856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff168152602001827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001935050505060206040518083038186803b15801561240657600080fd5b505afa15801561241a573d6000803e3d6000fd5b505050506040513d602081101561243057600080fd5b810190808051906020019092919050505090505b92915050565b60008282840391508111156124c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f64732d6d6174682d7375622d756e646572666c6f77000000000000000000000081525060200191505060405180910390fd5b92915050565b600082828401915081101561254a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f64732d6d6174682d6164642d6f766572666c6f7700000000000000000000000081525060200191505060405180910390fd5b92915050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806125f55750600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b61264a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806127286031913960400191505060405180910390fd5b6001600954116126c2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f43616e27742072656d6f766520616c6c206f70657261746f727300000000000081525060200191505060405180910390fd5b600860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff0219169055600960008154809291906001900391905055505056fe46756e6374696f6e616c697479207265737472696374656420746f20617574686f72697a6564206f70657261746f72732ea26469706673582212204d6bd2b8e5ae0d9da7f17a68e345fdff82d3fde0f999a43b0baae6c8c4b3f05b64736f6c63430007060033608060405234801561001057600080fd5b5033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610083600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661008860201b60201c565b6101ed565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061012c57506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610181576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806108136031913960400191505060405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060016000815480929190600101919050555050565b610617806101fc6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063b700961314610046578063e348da13146100e9578063fad8b32a1461012d575b600080fd5b6100d16004803603606081101561005c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610171565b60405180821515815260200191505060405180910390f35b61012b600480360360208110156100ff57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610277565b005b61016f6004803603602081101561014357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506103dc565b005b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061021757506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b61026c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806105b16031913960400191505060405180910390fd5b600190509392505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061031b57506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610370576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806105b16031913960400191505060405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060016000815480929190600101919050555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061048057506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6104d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806105b16031913960400191505060405180910390fd5b600180541161054c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f43616e27742072656d6f766520616c6c206f70657261746f727300000000000081525060200191505060405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff0219169055600160008154809291906001900391905055505056fe46756e6374696f6e616c697479207265737472696374656420746f20617574686f72697a6564206f70657261746f72732ea26469706673582212205a02f02855af5fe5abc7a36966a40113393b2b5e98542418a5a8e3f004b0021464736f6c6343000706003346756e6374696f6e616c697479207265737472696374656420746f20617574686f72697a6564206f70657261746f72732e46756e6374696f6e616c697479207265737472696374656420746f20617574686f72697a6564206f70657261746f72732e"

// DeployToken deploys a new Ethereum contract, binding an instance of Token to it.
func DeployToken(auth *bind.TransactOpts, backend bind.ContractBackend, symbol_ [32]byte, name_ [32]byte) (common.Address, *types.Transaction, *Token, error) {
	parsed, err := abi.JSON(strings.NewReader(TokenABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(TokenBin), backend, symbol_, name_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Token{TokenCaller: TokenCaller{contract: contract}, TokenTransactor: TokenTransactor{contract: contract}, TokenFilterer: TokenFilterer{contract: contract}}, nil
}

// Token is an auto generated Go binding around an Ethereum contract.
type Token struct {
	TokenCaller     // Read-only binding to the contract
	TokenTransactor // Write-only binding to the contract
	TokenFilterer   // Log filterer for contract events
}

// TokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type TokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TokenSession struct {
	Contract     *Token            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TokenCallerSession struct {
	Contract *TokenCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// TokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TokenTransactorSession struct {
	Contract     *TokenTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type TokenRaw struct {
	Contract *Token // Generic contract binding to access the raw methods on
}

// TokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TokenCallerRaw struct {
	Contract *TokenCaller // Generic read-only contract binding to access the raw methods on
}

// TokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TokenTransactorRaw struct {
	Contract *TokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewToken creates a new instance of Token, bound to a specific deployed contract.
func NewToken(address common.Address, backend bind.ContractBackend) (*Token, error) {
	contract, err := bindToken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Token{TokenCaller: TokenCaller{contract: contract}, TokenTransactor: TokenTransactor{contract: contract}, TokenFilterer: TokenFilterer{contract: contract}}, nil
}

// NewTokenCaller creates a new read-only instance of Token, bound to a specific deployed contract.
func NewTokenCaller(address common.Address, caller bind.ContractCaller) (*TokenCaller, error) {
	contract, err := bindToken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TokenCaller{contract: contract}, nil
}

// NewTokenTransactor creates a new write-only instance of Token, bound to a specific deployed contract.
func NewTokenTransactor(address common.Address, transactor bind.ContractTransactor) (*TokenTransactor, error) {
	contract, err := bindToken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TokenTransactor{contract: contract}, nil
}

// NewTokenFilterer creates a new log filterer instance of Token, bound to a specific deployed contract.
func NewTokenFilterer(address common.Address, filterer bind.ContractFilterer) (*TokenFilterer, error) {
	contract, err := bindToken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TokenFilterer{contract: contract}, nil
}

// bindToken binds a generic wrapper to an already deployed contract.
func bindToken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TokenABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Token *TokenRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Token.Contract.TokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Token *TokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Token.Contract.TokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Token *TokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Token.Contract.TokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Token *TokenCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Token.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Token *TokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Token.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Token *TokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Token.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address , address ) view returns(uint256)
func (_Token *TokenCaller) Allowance(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Token.contract.Call(opts, out, "allowance", arg0, arg1)
	return *ret0, err
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address , address ) view returns(uint256)
func (_Token *TokenSession) Allowance(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Token.Contract.Allowance(&_Token.CallOpts, arg0, arg1)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address , address ) view returns(uint256)
func (_Token *TokenCallerSession) Allowance(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Token.Contract.Allowance(&_Token.CallOpts, arg0, arg1)
}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_Token *TokenCaller) Authority(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Token.contract.Call(opts, out, "authority")
	return *ret0, err
}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_Token *TokenSession) Authority() (common.Address, error) {
	return _Token.Contract.Authority(&_Token.CallOpts)
}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_Token *TokenCallerSession) Authority() (common.Address, error) {
	return _Token.Contract.Authority(&_Token.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address ) view returns(uint256)
func (_Token *TokenCaller) BalanceOf(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Token.contract.Call(opts, out, "balanceOf", arg0)
	return *ret0, err
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address ) view returns(uint256)
func (_Token *TokenSession) BalanceOf(arg0 common.Address) (*big.Int, error) {
	return _Token.Contract.BalanceOf(&_Token.CallOpts, arg0)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address ) view returns(uint256)
func (_Token *TokenCallerSession) BalanceOf(arg0 common.Address) (*big.Int, error) {
	return _Token.Contract.BalanceOf(&_Token.CallOpts, arg0)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint256)
func (_Token *TokenCaller) Decimals(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Token.contract.Call(opts, out, "decimals")
	return *ret0, err
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint256)
func (_Token *TokenSession) Decimals() (*big.Int, error) {
	return _Token.Contract.Decimals(&_Token.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint256)
func (_Token *TokenCallerSession) Decimals() (*big.Int, error) {
	return _Token.Contract.Decimals(&_Token.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(bytes32)
func (_Token *TokenCaller) Name(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Token.contract.Call(opts, out, "name")
	return *ret0, err
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(bytes32)
func (_Token *TokenSession) Name() ([32]byte, error) {
	return _Token.Contract.Name(&_Token.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(bytes32)
func (_Token *TokenCallerSession) Name() ([32]byte, error) {
	return _Token.Contract.Name(&_Token.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Token *TokenCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Token.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Token *TokenSession) Owner() (common.Address, error) {
	return _Token.Contract.Owner(&_Token.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Token *TokenCallerSession) Owner() (common.Address, error) {
	return _Token.Contract.Owner(&_Token.CallOpts)
}

// Stopped is a free data retrieval call binding the contract method 0x75f12b21.
//
// Solidity: function stopped() view returns(bool)
func (_Token *TokenCaller) Stopped(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Token.contract.Call(opts, out, "stopped")
	return *ret0, err
}

// Stopped is a free data retrieval call binding the contract method 0x75f12b21.
//
// Solidity: function stopped() view returns(bool)
func (_Token *TokenSession) Stopped() (bool, error) {
	return _Token.Contract.Stopped(&_Token.CallOpts)
}

// Stopped is a free data retrieval call binding the contract method 0x75f12b21.
//
// Solidity: function stopped() view returns(bool)
func (_Token *TokenCallerSession) Stopped() (bool, error) {
	return _Token.Contract.Stopped(&_Token.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(bytes32)
func (_Token *TokenCaller) Symbol(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Token.contract.Call(opts, out, "symbol")
	return *ret0, err
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(bytes32)
func (_Token *TokenSession) Symbol() ([32]byte, error) {
	return _Token.Contract.Symbol(&_Token.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(bytes32)
func (_Token *TokenCallerSession) Symbol() ([32]byte, error) {
	return _Token.Contract.Symbol(&_Token.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Token *TokenCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Token.contract.Call(opts, out, "totalSupply")
	return *ret0, err
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Token *TokenSession) TotalSupply() (*big.Int, error) {
	return _Token.Contract.TotalSupply(&_Token.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Token *TokenCallerSession) TotalSupply() (*big.Int, error) {
	return _Token.Contract.TotalSupply(&_Token.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address guy, uint256 wad) returns(bool)
func (_Token *TokenTransactor) Approve(opts *bind.TransactOpts, guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "approve", guy, wad)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address guy, uint256 wad) returns(bool)
func (_Token *TokenSession) Approve(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Approve(&_Token.TransactOpts, guy, wad)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address guy, uint256 wad) returns(bool)
func (_Token *TokenTransactorSession) Approve(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Approve(&_Token.TransactOpts, guy, wad)
}

// Approve0 is a paid mutator transaction binding the contract method 0xdaea85c5.
//
// Solidity: function approve(address guy) returns(bool)
func (_Token *TokenTransactor) Approve0(opts *bind.TransactOpts, guy common.Address) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "approve0", guy)
}

// Approve0 is a paid mutator transaction binding the contract method 0xdaea85c5.
//
// Solidity: function approve(address guy) returns(bool)
func (_Token *TokenSession) Approve0(guy common.Address) (*types.Transaction, error) {
	return _Token.Contract.Approve0(&_Token.TransactOpts, guy)
}

// Approve0 is a paid mutator transaction binding the contract method 0xdaea85c5.
//
// Solidity: function approve(address guy) returns(bool)
func (_Token *TokenTransactorSession) Approve0(guy common.Address) (*types.Transaction, error) {
	return _Token.Contract.Approve0(&_Token.TransactOpts, guy)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 wad) returns()
func (_Token *TokenTransactor) Burn(opts *bind.TransactOpts, wad *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "burn", wad)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 wad) returns()
func (_Token *TokenSession) Burn(wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Burn(&_Token.TransactOpts, wad)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 wad) returns()
func (_Token *TokenTransactorSession) Burn(wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Burn(&_Token.TransactOpts, wad)
}

// Burn0 is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address guy, uint256 wad) returns()
func (_Token *TokenTransactor) Burn0(opts *bind.TransactOpts, guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "burn0", guy, wad)
}

// Burn0 is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address guy, uint256 wad) returns()
func (_Token *TokenSession) Burn0(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Burn0(&_Token.TransactOpts, guy, wad)
}

// Burn0 is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address guy, uint256 wad) returns()
func (_Token *TokenTransactorSession) Burn0(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Burn0(&_Token.TransactOpts, guy, wad)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_Token *TokenTransactor) GrantOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "grantOperator", _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_Token *TokenSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _Token.Contract.GrantOperator(&_Token.TransactOpts, _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_Token *TokenTransactorSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _Token.Contract.GrantOperator(&_Token.TransactOpts, _operator)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address guy, uint256 wad) returns()
func (_Token *TokenTransactor) Mint(opts *bind.TransactOpts, guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "mint", guy, wad)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address guy, uint256 wad) returns()
func (_Token *TokenSession) Mint(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Mint(&_Token.TransactOpts, guy, wad)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address guy, uint256 wad) returns()
func (_Token *TokenTransactorSession) Mint(guy common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Mint(&_Token.TransactOpts, guy, wad)
}

// Mint0 is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 wad) returns()
func (_Token *TokenTransactor) Mint0(opts *bind.TransactOpts, wad *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "mint0", wad)
}

// Mint0 is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 wad) returns()
func (_Token *TokenSession) Mint0(wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Mint0(&_Token.TransactOpts, wad)
}

// Mint0 is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 wad) returns()
func (_Token *TokenTransactorSession) Mint0(wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Mint0(&_Token.TransactOpts, wad)
}

// Move is a paid mutator transaction binding the contract method 0xbb35783b.
//
// Solidity: function move(address src, address dst, uint256 wad) returns()
func (_Token *TokenTransactor) Move(opts *bind.TransactOpts, src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "move", src, dst, wad)
}

// Move is a paid mutator transaction binding the contract method 0xbb35783b.
//
// Solidity: function move(address src, address dst, uint256 wad) returns()
func (_Token *TokenSession) Move(src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Move(&_Token.TransactOpts, src, dst, wad)
}

// Move is a paid mutator transaction binding the contract method 0xbb35783b.
//
// Solidity: function move(address src, address dst, uint256 wad) returns()
func (_Token *TokenTransactorSession) Move(src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Move(&_Token.TransactOpts, src, dst, wad)
}

// Pull is a paid mutator transaction binding the contract method 0xf2d5d56b.
//
// Solidity: function pull(address src, uint256 wad) returns()
func (_Token *TokenTransactor) Pull(opts *bind.TransactOpts, src common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "pull", src, wad)
}

// Pull is a paid mutator transaction binding the contract method 0xf2d5d56b.
//
// Solidity: function pull(address src, uint256 wad) returns()
func (_Token *TokenSession) Pull(src common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Pull(&_Token.TransactOpts, src, wad)
}

// Pull is a paid mutator transaction binding the contract method 0xf2d5d56b.
//
// Solidity: function pull(address src, uint256 wad) returns()
func (_Token *TokenTransactorSession) Pull(src common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Pull(&_Token.TransactOpts, src, wad)
}

// Push is a paid mutator transaction binding the contract method 0xb753a98c.
//
// Solidity: function push(address dst, uint256 wad) returns()
func (_Token *TokenTransactor) Push(opts *bind.TransactOpts, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "push", dst, wad)
}

// Push is a paid mutator transaction binding the contract method 0xb753a98c.
//
// Solidity: function push(address dst, uint256 wad) returns()
func (_Token *TokenSession) Push(dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Push(&_Token.TransactOpts, dst, wad)
}

// Push is a paid mutator transaction binding the contract method 0xb753a98c.
//
// Solidity: function push(address dst, uint256 wad) returns()
func (_Token *TokenTransactorSession) Push(dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Push(&_Token.TransactOpts, dst, wad)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_Token *TokenTransactor) RevokeOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "revokeOperator", _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_Token *TokenSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _Token.Contract.RevokeOperator(&_Token.TransactOpts, _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_Token *TokenTransactorSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _Token.Contract.RevokeOperator(&_Token.TransactOpts, _operator)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_Token *TokenTransactor) SetAuthority(opts *bind.TransactOpts, authority_ common.Address) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "setAuthority", authority_)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_Token *TokenSession) SetAuthority(authority_ common.Address) (*types.Transaction, error) {
	return _Token.Contract.SetAuthority(&_Token.TransactOpts, authority_)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_Token *TokenTransactorSession) SetAuthority(authority_ common.Address) (*types.Transaction, error) {
	return _Token.Contract.SetAuthority(&_Token.TransactOpts, authority_)
}

// SetName is a paid mutator transaction binding the contract method 0x5ac801fe.
//
// Solidity: function setName(bytes32 name_) returns()
func (_Token *TokenTransactor) SetName(opts *bind.TransactOpts, name_ [32]byte) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "setName", name_)
}

// SetName is a paid mutator transaction binding the contract method 0x5ac801fe.
//
// Solidity: function setName(bytes32 name_) returns()
func (_Token *TokenSession) SetName(name_ [32]byte) (*types.Transaction, error) {
	return _Token.Contract.SetName(&_Token.TransactOpts, name_)
}

// SetName is a paid mutator transaction binding the contract method 0x5ac801fe.
//
// Solidity: function setName(bytes32 name_) returns()
func (_Token *TokenTransactorSession) SetName(name_ [32]byte) (*types.Transaction, error) {
	return _Token.Contract.SetName(&_Token.TransactOpts, name_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_Token *TokenTransactor) SetOwner(opts *bind.TransactOpts, owner_ common.Address) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "setOwner", owner_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_Token *TokenSession) SetOwner(owner_ common.Address) (*types.Transaction, error) {
	return _Token.Contract.SetOwner(&_Token.TransactOpts, owner_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_Token *TokenTransactorSession) SetOwner(owner_ common.Address) (*types.Transaction, error) {
	return _Token.Contract.SetOwner(&_Token.TransactOpts, owner_)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_Token *TokenTransactor) Start(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "start")
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_Token *TokenSession) Start() (*types.Transaction, error) {
	return _Token.Contract.Start(&_Token.TransactOpts)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_Token *TokenTransactorSession) Start() (*types.Transaction, error) {
	return _Token.Contract.Start(&_Token.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_Token *TokenTransactor) Stop(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "stop")
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_Token *TokenSession) Stop() (*types.Transaction, error) {
	return _Token.Contract.Stop(&_Token.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_Token *TokenTransactorSession) Stop() (*types.Transaction, error) {
	return _Token.Contract.Stop(&_Token.TransactOpts)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 wad) returns(bool)
func (_Token *TokenTransactor) Transfer(opts *bind.TransactOpts, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "transfer", dst, wad)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 wad) returns(bool)
func (_Token *TokenSession) Transfer(dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Transfer(&_Token.TransactOpts, dst, wad)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 wad) returns(bool)
func (_Token *TokenTransactorSession) Transfer(dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Transfer(&_Token.TransactOpts, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_Token *TokenTransactor) TransferFrom(opts *bind.TransactOpts, src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "transferFrom", src, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_Token *TokenSession) TransferFrom(src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.TransferFrom(&_Token.TransactOpts, src, dst, wad)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 wad) returns(bool)
func (_Token *TokenTransactorSession) TransferFrom(src common.Address, dst common.Address, wad *big.Int) (*types.Transaction, error) {
	return _Token.Contract.TransferFrom(&_Token.TransactOpts, src, dst, wad)
}

// TokenApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Token contract.
type TokenApprovalIterator struct {
	Event *TokenApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenApproval represents a Approval event raised by the Token contract.
type TokenApproval struct {
	Src common.Address
	Guy common.Address
	Wad *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed src, address indexed guy, uint256 wad)
func (_Token *TokenFilterer) FilterApproval(opts *bind.FilterOpts, src []common.Address, guy []common.Address) (*TokenApprovalIterator, error) {

	var srcRule []interface{}
	for _, srcItem := range src {
		srcRule = append(srcRule, srcItem)
	}
	var guyRule []interface{}
	for _, guyItem := range guy {
		guyRule = append(guyRule, guyItem)
	}

	logs, sub, err := _Token.contract.FilterLogs(opts, "Approval", srcRule, guyRule)
	if err != nil {
		return nil, err
	}
	return &TokenApprovalIterator{contract: _Token.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed src, address indexed guy, uint256 wad)
func (_Token *TokenFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *TokenApproval, src []common.Address, guy []common.Address) (event.Subscription, error) {

	var srcRule []interface{}
	for _, srcItem := range src {
		srcRule = append(srcRule, srcItem)
	}
	var guyRule []interface{}
	for _, guyItem := range guy {
		guyRule = append(guyRule, guyItem)
	}

	logs, sub, err := _Token.contract.WatchLogs(opts, "Approval", srcRule, guyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenApproval)
				if err := _Token.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed src, address indexed guy, uint256 wad)
func (_Token *TokenFilterer) ParseApproval(log types.Log) (*TokenApproval, error) {
	event := new(TokenApproval)
	if err := _Token.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TokenBurnIterator is returned from FilterBurn and is used to iterate over the raw logs and unpacked data for Burn events raised by the Token contract.
type TokenBurnIterator struct {
	Event *TokenBurn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenBurnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenBurn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenBurn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenBurnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenBurnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenBurn represents a Burn event raised by the Token contract.
type TokenBurn struct {
	Guy common.Address
	Wad *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterBurn is a free log retrieval operation binding the contract event 0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5.
//
// Solidity: event Burn(address indexed guy, uint256 wad)
func (_Token *TokenFilterer) FilterBurn(opts *bind.FilterOpts, guy []common.Address) (*TokenBurnIterator, error) {

	var guyRule []interface{}
	for _, guyItem := range guy {
		guyRule = append(guyRule, guyItem)
	}

	logs, sub, err := _Token.contract.FilterLogs(opts, "Burn", guyRule)
	if err != nil {
		return nil, err
	}
	return &TokenBurnIterator{contract: _Token.contract, event: "Burn", logs: logs, sub: sub}, nil
}

// WatchBurn is a free log subscription operation binding the contract event 0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5.
//
// Solidity: event Burn(address indexed guy, uint256 wad)
func (_Token *TokenFilterer) WatchBurn(opts *bind.WatchOpts, sink chan<- *TokenBurn, guy []common.Address) (event.Subscription, error) {

	var guyRule []interface{}
	for _, guyItem := range guy {
		guyRule = append(guyRule, guyItem)
	}

	logs, sub, err := _Token.contract.WatchLogs(opts, "Burn", guyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenBurn)
				if err := _Token.contract.UnpackLog(event, "Burn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurn is a log parse operation binding the contract event 0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5.
//
// Solidity: event Burn(address indexed guy, uint256 wad)
func (_Token *TokenFilterer) ParseBurn(log types.Log) (*TokenBurn, error) {
	event := new(TokenBurn)
	if err := _Token.contract.UnpackLog(event, "Burn", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TokenLogSetAuthorityIterator is returned from FilterLogSetAuthority and is used to iterate over the raw logs and unpacked data for LogSetAuthority events raised by the Token contract.
type TokenLogSetAuthorityIterator struct {
	Event *TokenLogSetAuthority // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenLogSetAuthorityIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenLogSetAuthority)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenLogSetAuthority)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenLogSetAuthorityIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenLogSetAuthorityIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenLogSetAuthority represents a LogSetAuthority event raised by the Token contract.
type TokenLogSetAuthority struct {
	Authority common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterLogSetAuthority is a free log retrieval operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_Token *TokenFilterer) FilterLogSetAuthority(opts *bind.FilterOpts, authority []common.Address) (*TokenLogSetAuthorityIterator, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}

	logs, sub, err := _Token.contract.FilterLogs(opts, "LogSetAuthority", authorityRule)
	if err != nil {
		return nil, err
	}
	return &TokenLogSetAuthorityIterator{contract: _Token.contract, event: "LogSetAuthority", logs: logs, sub: sub}, nil
}

// WatchLogSetAuthority is a free log subscription operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_Token *TokenFilterer) WatchLogSetAuthority(opts *bind.WatchOpts, sink chan<- *TokenLogSetAuthority, authority []common.Address) (event.Subscription, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}

	logs, sub, err := _Token.contract.WatchLogs(opts, "LogSetAuthority", authorityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenLogSetAuthority)
				if err := _Token.contract.UnpackLog(event, "LogSetAuthority", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogSetAuthority is a log parse operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_Token *TokenFilterer) ParseLogSetAuthority(log types.Log) (*TokenLogSetAuthority, error) {
	event := new(TokenLogSetAuthority)
	if err := _Token.contract.UnpackLog(event, "LogSetAuthority", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TokenLogSetOwnerIterator is returned from FilterLogSetOwner and is used to iterate over the raw logs and unpacked data for LogSetOwner events raised by the Token contract.
type TokenLogSetOwnerIterator struct {
	Event *TokenLogSetOwner // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenLogSetOwnerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenLogSetOwner)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenLogSetOwner)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenLogSetOwnerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenLogSetOwnerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenLogSetOwner represents a LogSetOwner event raised by the Token contract.
type TokenLogSetOwner struct {
	Owner common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogSetOwner is a free log retrieval operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_Token *TokenFilterer) FilterLogSetOwner(opts *bind.FilterOpts, owner []common.Address) (*TokenLogSetOwnerIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Token.contract.FilterLogs(opts, "LogSetOwner", ownerRule)
	if err != nil {
		return nil, err
	}
	return &TokenLogSetOwnerIterator{contract: _Token.contract, event: "LogSetOwner", logs: logs, sub: sub}, nil
}

// WatchLogSetOwner is a free log subscription operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_Token *TokenFilterer) WatchLogSetOwner(opts *bind.WatchOpts, sink chan<- *TokenLogSetOwner, owner []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Token.contract.WatchLogs(opts, "LogSetOwner", ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenLogSetOwner)
				if err := _Token.contract.UnpackLog(event, "LogSetOwner", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogSetOwner is a log parse operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_Token *TokenFilterer) ParseLogSetOwner(log types.Log) (*TokenLogSetOwner, error) {
	event := new(TokenLogSetOwner)
	if err := _Token.contract.UnpackLog(event, "LogSetOwner", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TokenMintIterator is returned from FilterMint and is used to iterate over the raw logs and unpacked data for Mint events raised by the Token contract.
type TokenMintIterator struct {
	Event *TokenMint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenMintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenMint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenMint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenMintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenMintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenMint represents a Mint event raised by the Token contract.
type TokenMint struct {
	Guy common.Address
	Wad *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterMint is a free log retrieval operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: event Mint(address indexed guy, uint256 wad)
func (_Token *TokenFilterer) FilterMint(opts *bind.FilterOpts, guy []common.Address) (*TokenMintIterator, error) {

	var guyRule []interface{}
	for _, guyItem := range guy {
		guyRule = append(guyRule, guyItem)
	}

	logs, sub, err := _Token.contract.FilterLogs(opts, "Mint", guyRule)
	if err != nil {
		return nil, err
	}
	return &TokenMintIterator{contract: _Token.contract, event: "Mint", logs: logs, sub: sub}, nil
}

// WatchMint is a free log subscription operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: event Mint(address indexed guy, uint256 wad)
func (_Token *TokenFilterer) WatchMint(opts *bind.WatchOpts, sink chan<- *TokenMint, guy []common.Address) (event.Subscription, error) {

	var guyRule []interface{}
	for _, guyItem := range guy {
		guyRule = append(guyRule, guyItem)
	}

	logs, sub, err := _Token.contract.WatchLogs(opts, "Mint", guyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenMint)
				if err := _Token.contract.UnpackLog(event, "Mint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMint is a log parse operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: event Mint(address indexed guy, uint256 wad)
func (_Token *TokenFilterer) ParseMint(log types.Log) (*TokenMint, error) {
	event := new(TokenMint)
	if err := _Token.contract.UnpackLog(event, "Mint", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TokenStartIterator is returned from FilterStart and is used to iterate over the raw logs and unpacked data for Start events raised by the Token contract.
type TokenStartIterator struct {
	Event *TokenStart // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenStartIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenStart)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenStart)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenStartIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenStartIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenStart represents a Start event raised by the Token contract.
type TokenStart struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterStart is a free log retrieval operation binding the contract event 0x1b55ba3aa851a46be3b365aee5b5c140edd620d578922f3e8466d2cbd96f954b.
//
// Solidity: event Start()
func (_Token *TokenFilterer) FilterStart(opts *bind.FilterOpts) (*TokenStartIterator, error) {

	logs, sub, err := _Token.contract.FilterLogs(opts, "Start")
	if err != nil {
		return nil, err
	}
	return &TokenStartIterator{contract: _Token.contract, event: "Start", logs: logs, sub: sub}, nil
}

// WatchStart is a free log subscription operation binding the contract event 0x1b55ba3aa851a46be3b365aee5b5c140edd620d578922f3e8466d2cbd96f954b.
//
// Solidity: event Start()
func (_Token *TokenFilterer) WatchStart(opts *bind.WatchOpts, sink chan<- *TokenStart) (event.Subscription, error) {

	logs, sub, err := _Token.contract.WatchLogs(opts, "Start")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenStart)
				if err := _Token.contract.UnpackLog(event, "Start", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStart is a log parse operation binding the contract event 0x1b55ba3aa851a46be3b365aee5b5c140edd620d578922f3e8466d2cbd96f954b.
//
// Solidity: event Start()
func (_Token *TokenFilterer) ParseStart(log types.Log) (*TokenStart, error) {
	event := new(TokenStart)
	if err := _Token.contract.UnpackLog(event, "Start", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TokenStopIterator is returned from FilterStop and is used to iterate over the raw logs and unpacked data for Stop events raised by the Token contract.
type TokenStopIterator struct {
	Event *TokenStop // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenStopIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenStop)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenStop)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenStopIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenStopIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenStop represents a Stop event raised by the Token contract.
type TokenStop struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterStop is a free log retrieval operation binding the contract event 0xbedf0f4abfe86d4ffad593d9607fe70e83ea706033d44d24b3b6283cf3fc4f6b.
//
// Solidity: event Stop()
func (_Token *TokenFilterer) FilterStop(opts *bind.FilterOpts) (*TokenStopIterator, error) {

	logs, sub, err := _Token.contract.FilterLogs(opts, "Stop")
	if err != nil {
		return nil, err
	}
	return &TokenStopIterator{contract: _Token.contract, event: "Stop", logs: logs, sub: sub}, nil
}

// WatchStop is a free log subscription operation binding the contract event 0xbedf0f4abfe86d4ffad593d9607fe70e83ea706033d44d24b3b6283cf3fc4f6b.
//
// Solidity: event Stop()
func (_Token *TokenFilterer) WatchStop(opts *bind.WatchOpts, sink chan<- *TokenStop) (event.Subscription, error) {

	logs, sub, err := _Token.contract.WatchLogs(opts, "Stop")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenStop)
				if err := _Token.contract.UnpackLog(event, "Stop", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStop is a log parse operation binding the contract event 0xbedf0f4abfe86d4ffad593d9607fe70e83ea706033d44d24b3b6283cf3fc4f6b.
//
// Solidity: event Stop()
func (_Token *TokenFilterer) ParseStop(log types.Log) (*TokenStop, error) {
	event := new(TokenStop)
	if err := _Token.contract.UnpackLog(event, "Stop", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TokenTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Token contract.
type TokenTransferIterator struct {
	Event *TokenTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenTransfer represents a Transfer event raised by the Token contract.
type TokenTransfer struct {
	Src common.Address
	Dst common.Address
	Wad *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed src, address indexed dst, uint256 wad)
func (_Token *TokenFilterer) FilterTransfer(opts *bind.FilterOpts, src []common.Address, dst []common.Address) (*TokenTransferIterator, error) {

	var srcRule []interface{}
	for _, srcItem := range src {
		srcRule = append(srcRule, srcItem)
	}
	var dstRule []interface{}
	for _, dstItem := range dst {
		dstRule = append(dstRule, dstItem)
	}

	logs, sub, err := _Token.contract.FilterLogs(opts, "Transfer", srcRule, dstRule)
	if err != nil {
		return nil, err
	}
	return &TokenTransferIterator{contract: _Token.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed src, address indexed dst, uint256 wad)
func (_Token *TokenFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *TokenTransfer, src []common.Address, dst []common.Address) (event.Subscription, error) {

	var srcRule []interface{}
	for _, srcItem := range src {
		srcRule = append(srcRule, srcItem)
	}
	var dstRule []interface{}
	for _, dstItem := range dst {
		dstRule = append(dstRule, dstItem)
	}

	logs, sub, err := _Token.contract.WatchLogs(opts, "Transfer", srcRule, dstRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenTransfer)
				if err := _Token.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed src, address indexed dst, uint256 wad)
func (_Token *TokenFilterer) ParseTransfer(log types.Log) (*TokenTransfer, error) {
	event := new(TokenTransfer)
	if err := _Token.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TokenAuthorityABI is the input ABI used to generate the binding from.
const TokenAuthorityABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"canCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// TokenAuthorityBin is the compiled bytecode used for deploying new contracts.
var TokenAuthorityBin = "0x608060405234801561001057600080fd5b5033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610083600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661008860201b60201c565b6101ed565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061012c57506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610181576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806108136031913960400191505060405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060016000815480929190600101919050555050565b610617806101fc6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063b700961314610046578063e348da13146100e9578063fad8b32a1461012d575b600080fd5b6100d16004803603606081101561005c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610171565b60405180821515815260200191505060405180910390f35b61012b600480360360208110156100ff57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610277565b005b61016f6004803603602081101561014357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506103dc565b005b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061021757506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b61026c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806105b16031913960400191505060405180910390fd5b600190509392505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061031b57506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610370576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806105b16031913960400191505060405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060016000815480929190600101919050555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061048057506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6104d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806105b16031913960400191505060405180910390fd5b600180541161054c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f43616e27742072656d6f766520616c6c206f70657261746f727300000000000081525060200191505060405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff0219169055600160008154809291906001900391905055505056fe46756e6374696f6e616c697479207265737472696374656420746f20617574686f72697a6564206f70657261746f72732ea26469706673582212205a02f02855af5fe5abc7a36966a40113393b2b5e98542418a5a8e3f004b0021464736f6c6343000706003346756e6374696f6e616c697479207265737472696374656420746f20617574686f72697a6564206f70657261746f72732e"

// DeployTokenAuthority deploys a new Ethereum contract, binding an instance of TokenAuthority to it.
func DeployTokenAuthority(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TokenAuthority, error) {
	parsed, err := abi.JSON(strings.NewReader(TokenAuthorityABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(TokenAuthorityBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TokenAuthority{TokenAuthorityCaller: TokenAuthorityCaller{contract: contract}, TokenAuthorityTransactor: TokenAuthorityTransactor{contract: contract}, TokenAuthorityFilterer: TokenAuthorityFilterer{contract: contract}}, nil
}

// TokenAuthority is an auto generated Go binding around an Ethereum contract.
type TokenAuthority struct {
	TokenAuthorityCaller     // Read-only binding to the contract
	TokenAuthorityTransactor // Write-only binding to the contract
	TokenAuthorityFilterer   // Log filterer for contract events
}

// TokenAuthorityCaller is an auto generated read-only Go binding around an Ethereum contract.
type TokenAuthorityCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenAuthorityTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TokenAuthorityTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenAuthorityFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TokenAuthorityFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenAuthoritySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TokenAuthoritySession struct {
	Contract     *TokenAuthority   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TokenAuthorityCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TokenAuthorityCallerSession struct {
	Contract *TokenAuthorityCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// TokenAuthorityTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TokenAuthorityTransactorSession struct {
	Contract     *TokenAuthorityTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// TokenAuthorityRaw is an auto generated low-level Go binding around an Ethereum contract.
type TokenAuthorityRaw struct {
	Contract *TokenAuthority // Generic contract binding to access the raw methods on
}

// TokenAuthorityCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TokenAuthorityCallerRaw struct {
	Contract *TokenAuthorityCaller // Generic read-only contract binding to access the raw methods on
}

// TokenAuthorityTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TokenAuthorityTransactorRaw struct {
	Contract *TokenAuthorityTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTokenAuthority creates a new instance of TokenAuthority, bound to a specific deployed contract.
func NewTokenAuthority(address common.Address, backend bind.ContractBackend) (*TokenAuthority, error) {
	contract, err := bindTokenAuthority(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TokenAuthority{TokenAuthorityCaller: TokenAuthorityCaller{contract: contract}, TokenAuthorityTransactor: TokenAuthorityTransactor{contract: contract}, TokenAuthorityFilterer: TokenAuthorityFilterer{contract: contract}}, nil
}

// NewTokenAuthorityCaller creates a new read-only instance of TokenAuthority, bound to a specific deployed contract.
func NewTokenAuthorityCaller(address common.Address, caller bind.ContractCaller) (*TokenAuthorityCaller, error) {
	contract, err := bindTokenAuthority(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TokenAuthorityCaller{contract: contract}, nil
}

// NewTokenAuthorityTransactor creates a new write-only instance of TokenAuthority, bound to a specific deployed contract.
func NewTokenAuthorityTransactor(address common.Address, transactor bind.ContractTransactor) (*TokenAuthorityTransactor, error) {
	contract, err := bindTokenAuthority(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TokenAuthorityTransactor{contract: contract}, nil
}

// NewTokenAuthorityFilterer creates a new log filterer instance of TokenAuthority, bound to a specific deployed contract.
func NewTokenAuthorityFilterer(address common.Address, filterer bind.ContractFilterer) (*TokenAuthorityFilterer, error) {
	contract, err := bindTokenAuthority(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TokenAuthorityFilterer{contract: contract}, nil
}

// bindTokenAuthority binds a generic wrapper to an already deployed contract.
func bindTokenAuthority(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TokenAuthorityABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TokenAuthority *TokenAuthorityRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _TokenAuthority.Contract.TokenAuthorityCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TokenAuthority *TokenAuthorityRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenAuthority.Contract.TokenAuthorityTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TokenAuthority *TokenAuthorityRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TokenAuthority.Contract.TokenAuthorityTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TokenAuthority *TokenAuthorityCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _TokenAuthority.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TokenAuthority *TokenAuthorityTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenAuthority.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TokenAuthority *TokenAuthorityTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TokenAuthority.Contract.contract.Transact(opts, method, params...)
}

// CanCall is a free data retrieval call binding the contract method 0xb7009613.
//
// Solidity: function canCall(address , address , bytes4 ) view returns(bool)
func (_TokenAuthority *TokenAuthorityCaller) CanCall(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address, arg2 [4]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _TokenAuthority.contract.Call(opts, out, "canCall", arg0, arg1, arg2)
	return *ret0, err
}

// CanCall is a free data retrieval call binding the contract method 0xb7009613.
//
// Solidity: function canCall(address , address , bytes4 ) view returns(bool)
func (_TokenAuthority *TokenAuthoritySession) CanCall(arg0 common.Address, arg1 common.Address, arg2 [4]byte) (bool, error) {
	return _TokenAuthority.Contract.CanCall(&_TokenAuthority.CallOpts, arg0, arg1, arg2)
}

// CanCall is a free data retrieval call binding the contract method 0xb7009613.
//
// Solidity: function canCall(address , address , bytes4 ) view returns(bool)
func (_TokenAuthority *TokenAuthorityCallerSession) CanCall(arg0 common.Address, arg1 common.Address, arg2 [4]byte) (bool, error) {
	return _TokenAuthority.Contract.CanCall(&_TokenAuthority.CallOpts, arg0, arg1, arg2)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_TokenAuthority *TokenAuthorityTransactor) GrantOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _TokenAuthority.contract.Transact(opts, "grantOperator", _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_TokenAuthority *TokenAuthoritySession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _TokenAuthority.Contract.GrantOperator(&_TokenAuthority.TransactOpts, _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_TokenAuthority *TokenAuthorityTransactorSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _TokenAuthority.Contract.GrantOperator(&_TokenAuthority.TransactOpts, _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_TokenAuthority *TokenAuthorityTransactor) RevokeOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _TokenAuthority.contract.Transact(opts, "revokeOperator", _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_TokenAuthority *TokenAuthoritySession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _TokenAuthority.Contract.RevokeOperator(&_TokenAuthority.TransactOpts, _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_TokenAuthority *TokenAuthorityTransactorSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _TokenAuthority.Contract.RevokeOperator(&_TokenAuthority.TransactOpts, _operator)
}

// TokenMigratorABI is the input ABI used to generate the binding from.
const TokenMigratorABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"Started\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"Stopped\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSource\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrateAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"}],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// TokenMigratorBin is the compiled bytecode used for deploying new contracts.
var TokenMigratorBin = "0x608060405234801561001057600080fd5b5033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610083600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661008860201b60201c565b6101ed565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061012c57506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610181576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603181526020018061155b6031913960400191505060405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060016000815480929190600101919050555050565b61135f806101fc6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80634a77f8701161005b5780634a77f8701461015d578063afa293d414610167578063e348da131461019b578063fad8b32a146101df57610088565b806307da68f51461008d57806316ad9542146100975780633ccfe887146100cb578063454b06081461012f575b600080fd5b610095610223565b005b61009f61048c565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61012d600480360360408110156100e157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506104b6565b005b61015b6004803603602081101561014557600080fd5b8101908080359060200190929190505050610818565b005b610165610825565b005b61016f610a75565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101dd600480360360208110156101b157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a9f565b005b610221600480360360208110156101f557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c04565b005b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806102c757506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b61031c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806112f96031913960400191505060405180910390fd5b600260149054906101000a900460ff1661039e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f6d6967726174696f6e206e6f742073746172746564000000000000000000000081525060200191505060405180910390fd5b6000600260146101000a81548160ff0219169083151502179055506000600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f55c4adf1f68f084b809304657594a92ba835ada8d3b5340955bf05746723c05b33604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061055a57506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6105af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806112f96031913960400191505060405180910390fd5b6105b882610dd8565b61060d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252604481526020018061126c6044913960600191505060405180910390fd5b61061681610dd8565b61066b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260498152602001806112b06049913960600191505060405180910390fd5b600260149054906101000a900460ff16156106ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f6d6967726174696f6e2068617320616c7265616479207374617274656400000081525060200191505060405180910390fd5b6001600260146101000a81548160ff02191690831515021790555081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fe7ccbdddf2d84fab545fb1aad35fd684ef7cce1df6df25facfb32fe3de037f1d828233604051808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a15050565b6108223382610f5b565b50565b60003390506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156108b557600080fd5b505afa1580156108c9573d6000803e3d6000fd5b505050506040513d60208110156108df57600080fd5b810190808051906020019092919050505090506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e84306040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561099b57600080fd5b505afa1580156109af573d6000803e3d6000fd5b505050506040513d60208110156109c557600080fd5b8101908080519060200190929190505050905060006109ed838361125190919063ffffffff16565b905060008111610a65576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f6e6f20746f6b656e7320617661696c61626c6520746f206d696772617465000081525060200191505060405180910390fd5b610a6f8482610f5b565b50505050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610b4357506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610b98576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806112f96031913960400191505060405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060016000815480929190600101919050555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610ca857506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610cfd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806112f96031913960400191505060405180910390fd5b6001805411610d74576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f43616e27742072656d6f766520616c6c206f70657261746f727300000000000081525060200191505060405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff02191690556001600081548092919060019003919050555050565b60008060608373ffffffffffffffffffffffffffffffffffffffff166040516024016040516020818303038152906040527f18160ddd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b60208310610eaa5780518252602082019150602081019050602083039250610e87565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610f0c576040519150601f19603f3d011682016040523d82523d6000602084013e610f11565b606091505b5080925081935050506000818060200190516020811015610f3157600080fd5b81019080805190602001909291905050509050828015610f515750600081115b9350505050919050565b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611068576003339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b80600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8330846040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561116657600080fd5b505af115801561117a573d6000803e3d6000fd5b505050506040513d602081101561119057600080fd5b810190808051906020019092919050505050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1983836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561123557600080fd5b505af1158015611249573d6000803e3d6000fd5b505050505050565b6000818311156112615781611263565b825b90509291505056fe736f7572636520646f6573206e6f742061707065617220746f20626520616e20455243323020286661696c65642063616c6c20746f20746f74616c537570706c7928292964657374696e6174696f6e20646f6573206e6f742061707065617220746f20626520616e20455243323020286661696c65642063616c6c20746f20746f74616c537570706c7928292946756e6374696f6e616c697479207265737472696374656420746f20617574686f72697a6564206f70657261746f72732ea26469706673582212202149157beeb484458596dd68b570425674e96ffb4826cde13cb99265e0e5898064736f6c6343000706003346756e6374696f6e616c697479207265737472696374656420746f20617574686f72697a6564206f70657261746f72732e"

// DeployTokenMigrator deploys a new Ethereum contract, binding an instance of TokenMigrator to it.
func DeployTokenMigrator(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TokenMigrator, error) {
	parsed, err := abi.JSON(strings.NewReader(TokenMigratorABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(TokenMigratorBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TokenMigrator{TokenMigratorCaller: TokenMigratorCaller{contract: contract}, TokenMigratorTransactor: TokenMigratorTransactor{contract: contract}, TokenMigratorFilterer: TokenMigratorFilterer{contract: contract}}, nil
}

// TokenMigrator is an auto generated Go binding around an Ethereum contract.
type TokenMigrator struct {
	TokenMigratorCaller     // Read-only binding to the contract
	TokenMigratorTransactor // Write-only binding to the contract
	TokenMigratorFilterer   // Log filterer for contract events
}

// TokenMigratorCaller is an auto generated read-only Go binding around an Ethereum contract.
type TokenMigratorCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenMigratorTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TokenMigratorTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenMigratorFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TokenMigratorFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenMigratorSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TokenMigratorSession struct {
	Contract     *TokenMigrator    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TokenMigratorCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TokenMigratorCallerSession struct {
	Contract *TokenMigratorCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// TokenMigratorTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TokenMigratorTransactorSession struct {
	Contract     *TokenMigratorTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// TokenMigratorRaw is an auto generated low-level Go binding around an Ethereum contract.
type TokenMigratorRaw struct {
	Contract *TokenMigrator // Generic contract binding to access the raw methods on
}

// TokenMigratorCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TokenMigratorCallerRaw struct {
	Contract *TokenMigratorCaller // Generic read-only contract binding to access the raw methods on
}

// TokenMigratorTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TokenMigratorTransactorRaw struct {
	Contract *TokenMigratorTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTokenMigrator creates a new instance of TokenMigrator, bound to a specific deployed contract.
func NewTokenMigrator(address common.Address, backend bind.ContractBackend) (*TokenMigrator, error) {
	contract, err := bindTokenMigrator(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TokenMigrator{TokenMigratorCaller: TokenMigratorCaller{contract: contract}, TokenMigratorTransactor: TokenMigratorTransactor{contract: contract}, TokenMigratorFilterer: TokenMigratorFilterer{contract: contract}}, nil
}

// NewTokenMigratorCaller creates a new read-only instance of TokenMigrator, bound to a specific deployed contract.
func NewTokenMigratorCaller(address common.Address, caller bind.ContractCaller) (*TokenMigratorCaller, error) {
	contract, err := bindTokenMigrator(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TokenMigratorCaller{contract: contract}, nil
}

// NewTokenMigratorTransactor creates a new write-only instance of TokenMigrator, bound to a specific deployed contract.
func NewTokenMigratorTransactor(address common.Address, transactor bind.ContractTransactor) (*TokenMigratorTransactor, error) {
	contract, err := bindTokenMigrator(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TokenMigratorTransactor{contract: contract}, nil
}

// NewTokenMigratorFilterer creates a new log filterer instance of TokenMigrator, bound to a specific deployed contract.
func NewTokenMigratorFilterer(address common.Address, filterer bind.ContractFilterer) (*TokenMigratorFilterer, error) {
	contract, err := bindTokenMigrator(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TokenMigratorFilterer{contract: contract}, nil
}

// bindTokenMigrator binds a generic wrapper to an already deployed contract.
func bindTokenMigrator(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TokenMigratorABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TokenMigrator *TokenMigratorRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _TokenMigrator.Contract.TokenMigratorCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TokenMigrator *TokenMigratorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenMigrator.Contract.TokenMigratorTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TokenMigrator *TokenMigratorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TokenMigrator.Contract.TokenMigratorTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TokenMigrator *TokenMigratorCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _TokenMigrator.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TokenMigrator *TokenMigratorTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenMigrator.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TokenMigrator *TokenMigratorTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TokenMigrator.Contract.contract.Transact(opts, method, params...)
}

// GetDestination is a free data retrieval call binding the contract method 0x16ad9542.
//
// Solidity: function getDestination() view returns(address)
func (_TokenMigrator *TokenMigratorCaller) GetDestination(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _TokenMigrator.contract.Call(opts, out, "getDestination")
	return *ret0, err
}

// GetDestination is a free data retrieval call binding the contract method 0x16ad9542.
//
// Solidity: function getDestination() view returns(address)
func (_TokenMigrator *TokenMigratorSession) GetDestination() (common.Address, error) {
	return _TokenMigrator.Contract.GetDestination(&_TokenMigrator.CallOpts)
}

// GetDestination is a free data retrieval call binding the contract method 0x16ad9542.
//
// Solidity: function getDestination() view returns(address)
func (_TokenMigrator *TokenMigratorCallerSession) GetDestination() (common.Address, error) {
	return _TokenMigrator.Contract.GetDestination(&_TokenMigrator.CallOpts)
}

// GetSource is a free data retrieval call binding the contract method 0xafa293d4.
//
// Solidity: function getSource() view returns(address)
func (_TokenMigrator *TokenMigratorCaller) GetSource(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _TokenMigrator.contract.Call(opts, out, "getSource")
	return *ret0, err
}

// GetSource is a free data retrieval call binding the contract method 0xafa293d4.
//
// Solidity: function getSource() view returns(address)
func (_TokenMigrator *TokenMigratorSession) GetSource() (common.Address, error) {
	return _TokenMigrator.Contract.GetSource(&_TokenMigrator.CallOpts)
}

// GetSource is a free data retrieval call binding the contract method 0xafa293d4.
//
// Solidity: function getSource() view returns(address)
func (_TokenMigrator *TokenMigratorCallerSession) GetSource() (common.Address, error) {
	return _TokenMigrator.Contract.GetSource(&_TokenMigrator.CallOpts)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_TokenMigrator *TokenMigratorTransactor) GrantOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _TokenMigrator.contract.Transact(opts, "grantOperator", _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_TokenMigrator *TokenMigratorSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _TokenMigrator.Contract.GrantOperator(&_TokenMigrator.TransactOpts, _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_TokenMigrator *TokenMigratorTransactorSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _TokenMigrator.Contract.GrantOperator(&_TokenMigrator.TransactOpts, _operator)
}

// Migrate is a paid mutator transaction binding the contract method 0x454b0608.
//
// Solidity: function migrate(uint256 amount) returns()
func (_TokenMigrator *TokenMigratorTransactor) Migrate(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _TokenMigrator.contract.Transact(opts, "migrate", amount)
}

// Migrate is a paid mutator transaction binding the contract method 0x454b0608.
//
// Solidity: function migrate(uint256 amount) returns()
func (_TokenMigrator *TokenMigratorSession) Migrate(amount *big.Int) (*types.Transaction, error) {
	return _TokenMigrator.Contract.Migrate(&_TokenMigrator.TransactOpts, amount)
}

// Migrate is a paid mutator transaction binding the contract method 0x454b0608.
//
// Solidity: function migrate(uint256 amount) returns()
func (_TokenMigrator *TokenMigratorTransactorSession) Migrate(amount *big.Int) (*types.Transaction, error) {
	return _TokenMigrator.Contract.Migrate(&_TokenMigrator.TransactOpts, amount)
}

// MigrateAll is a paid mutator transaction binding the contract method 0x4a77f870.
//
// Solidity: function migrateAll() returns()
func (_TokenMigrator *TokenMigratorTransactor) MigrateAll(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenMigrator.contract.Transact(opts, "migrateAll")
}

// MigrateAll is a paid mutator transaction binding the contract method 0x4a77f870.
//
// Solidity: function migrateAll() returns()
func (_TokenMigrator *TokenMigratorSession) MigrateAll() (*types.Transaction, error) {
	return _TokenMigrator.Contract.MigrateAll(&_TokenMigrator.TransactOpts)
}

// MigrateAll is a paid mutator transaction binding the contract method 0x4a77f870.
//
// Solidity: function migrateAll() returns()
func (_TokenMigrator *TokenMigratorTransactorSession) MigrateAll() (*types.Transaction, error) {
	return _TokenMigrator.Contract.MigrateAll(&_TokenMigrator.TransactOpts)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_TokenMigrator *TokenMigratorTransactor) RevokeOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _TokenMigrator.contract.Transact(opts, "revokeOperator", _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_TokenMigrator *TokenMigratorSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _TokenMigrator.Contract.RevokeOperator(&_TokenMigrator.TransactOpts, _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_TokenMigrator *TokenMigratorTransactorSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _TokenMigrator.Contract.RevokeOperator(&_TokenMigrator.TransactOpts, _operator)
}

// Start is a paid mutator transaction binding the contract method 0x3ccfe887.
//
// Solidity: function start(address src, address dst) returns()
func (_TokenMigrator *TokenMigratorTransactor) Start(opts *bind.TransactOpts, src common.Address, dst common.Address) (*types.Transaction, error) {
	return _TokenMigrator.contract.Transact(opts, "start", src, dst)
}

// Start is a paid mutator transaction binding the contract method 0x3ccfe887.
//
// Solidity: function start(address src, address dst) returns()
func (_TokenMigrator *TokenMigratorSession) Start(src common.Address, dst common.Address) (*types.Transaction, error) {
	return _TokenMigrator.Contract.Start(&_TokenMigrator.TransactOpts, src, dst)
}

// Start is a paid mutator transaction binding the contract method 0x3ccfe887.
//
// Solidity: function start(address src, address dst) returns()
func (_TokenMigrator *TokenMigratorTransactorSession) Start(src common.Address, dst common.Address) (*types.Transaction, error) {
	return _TokenMigrator.Contract.Start(&_TokenMigrator.TransactOpts, src, dst)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_TokenMigrator *TokenMigratorTransactor) Stop(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenMigrator.contract.Transact(opts, "stop")
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_TokenMigrator *TokenMigratorSession) Stop() (*types.Transaction, error) {
	return _TokenMigrator.Contract.Stop(&_TokenMigrator.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_TokenMigrator *TokenMigratorTransactorSession) Stop() (*types.Transaction, error) {
	return _TokenMigrator.Contract.Stop(&_TokenMigrator.TransactOpts)
}

// TokenMigratorStartedIterator is returned from FilterStarted and is used to iterate over the raw logs and unpacked data for Started events raised by the TokenMigrator contract.
type TokenMigratorStartedIterator struct {
	Event *TokenMigratorStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenMigratorStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenMigratorStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenMigratorStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenMigratorStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenMigratorStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenMigratorStarted represents a Started event raised by the TokenMigrator contract.
type TokenMigratorStarted struct {
	Source      common.Address
	Destination common.Address
	Who         common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterStarted is a free log retrieval operation binding the contract event 0xe7ccbdddf2d84fab545fb1aad35fd684ef7cce1df6df25facfb32fe3de037f1d.
//
// Solidity: event Started(address source, address destination, address who)
func (_TokenMigrator *TokenMigratorFilterer) FilterStarted(opts *bind.FilterOpts) (*TokenMigratorStartedIterator, error) {

	logs, sub, err := _TokenMigrator.contract.FilterLogs(opts, "Started")
	if err != nil {
		return nil, err
	}
	return &TokenMigratorStartedIterator{contract: _TokenMigrator.contract, event: "Started", logs: logs, sub: sub}, nil
}

// WatchStarted is a free log subscription operation binding the contract event 0xe7ccbdddf2d84fab545fb1aad35fd684ef7cce1df6df25facfb32fe3de037f1d.
//
// Solidity: event Started(address source, address destination, address who)
func (_TokenMigrator *TokenMigratorFilterer) WatchStarted(opts *bind.WatchOpts, sink chan<- *TokenMigratorStarted) (event.Subscription, error) {

	logs, sub, err := _TokenMigrator.contract.WatchLogs(opts, "Started")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenMigratorStarted)
				if err := _TokenMigrator.contract.UnpackLog(event, "Started", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStarted is a log parse operation binding the contract event 0xe7ccbdddf2d84fab545fb1aad35fd684ef7cce1df6df25facfb32fe3de037f1d.
//
// Solidity: event Started(address source, address destination, address who)
func (_TokenMigrator *TokenMigratorFilterer) ParseStarted(log types.Log) (*TokenMigratorStarted, error) {
	event := new(TokenMigratorStarted)
	if err := _TokenMigrator.contract.UnpackLog(event, "Started", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TokenMigratorStoppedIterator is returned from FilterStopped and is used to iterate over the raw logs and unpacked data for Stopped events raised by the TokenMigrator contract.
type TokenMigratorStoppedIterator struct {
	Event *TokenMigratorStopped // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenMigratorStoppedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenMigratorStopped)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenMigratorStopped)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenMigratorStoppedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenMigratorStoppedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenMigratorStopped represents a Stopped event raised by the TokenMigrator contract.
type TokenMigratorStopped struct {
	Who common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterStopped is a free log retrieval operation binding the contract event 0x55c4adf1f68f084b809304657594a92ba835ada8d3b5340955bf05746723c05b.
//
// Solidity: event Stopped(address who)
func (_TokenMigrator *TokenMigratorFilterer) FilterStopped(opts *bind.FilterOpts) (*TokenMigratorStoppedIterator, error) {

	logs, sub, err := _TokenMigrator.contract.FilterLogs(opts, "Stopped")
	if err != nil {
		return nil, err
	}
	return &TokenMigratorStoppedIterator{contract: _TokenMigrator.contract, event: "Stopped", logs: logs, sub: sub}, nil
}

// WatchStopped is a free log subscription operation binding the contract event 0x55c4adf1f68f084b809304657594a92ba835ada8d3b5340955bf05746723c05b.
//
// Solidity: event Stopped(address who)
func (_TokenMigrator *TokenMigratorFilterer) WatchStopped(opts *bind.WatchOpts, sink chan<- *TokenMigratorStopped) (event.Subscription, error) {

	logs, sub, err := _TokenMigrator.contract.WatchLogs(opts, "Stopped")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenMigratorStopped)
				if err := _TokenMigrator.contract.UnpackLog(event, "Stopped", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStopped is a log parse operation binding the contract event 0x55c4adf1f68f084b809304657594a92ba835ada8d3b5340955bf05746723c05b.
//
// Solidity: event Stopped(address who)
func (_TokenMigrator *TokenMigratorFilterer) ParseStopped(log types.Log) (*TokenMigratorStopped, error) {
	event := new(TokenMigratorStopped)
	if err := _TokenMigrator.contract.UnpackLog(event, "Stopped", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TokenMigratorEventsABI is the input ABI used to generate the binding from.
const TokenMigratorEventsABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"Started\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"Stopped\",\"type\":\"event\"}]"

// TokenMigratorEventsBin is the compiled bytecode used for deploying new contracts.
var TokenMigratorEventsBin = "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220b83ed430c4c7c02adb16375cab3dbd80c8f4594af2e608d60f9e3f855f3ed74c64736f6c63430007060033"

// DeployTokenMigratorEvents deploys a new Ethereum contract, binding an instance of TokenMigratorEvents to it.
func DeployTokenMigratorEvents(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TokenMigratorEvents, error) {
	parsed, err := abi.JSON(strings.NewReader(TokenMigratorEventsABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(TokenMigratorEventsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TokenMigratorEvents{TokenMigratorEventsCaller: TokenMigratorEventsCaller{contract: contract}, TokenMigratorEventsTransactor: TokenMigratorEventsTransactor{contract: contract}, TokenMigratorEventsFilterer: TokenMigratorEventsFilterer{contract: contract}}, nil
}

// TokenMigratorEvents is an auto generated Go binding around an Ethereum contract.
type TokenMigratorEvents struct {
	TokenMigratorEventsCaller     // Read-only binding to the contract
	TokenMigratorEventsTransactor // Write-only binding to the contract
	TokenMigratorEventsFilterer   // Log filterer for contract events
}

// TokenMigratorEventsCaller is an auto generated read-only Go binding around an Ethereum contract.
type TokenMigratorEventsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenMigratorEventsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TokenMigratorEventsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenMigratorEventsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TokenMigratorEventsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenMigratorEventsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TokenMigratorEventsSession struct {
	Contract     *TokenMigratorEvents // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// TokenMigratorEventsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TokenMigratorEventsCallerSession struct {
	Contract *TokenMigratorEventsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// TokenMigratorEventsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TokenMigratorEventsTransactorSession struct {
	Contract     *TokenMigratorEventsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// TokenMigratorEventsRaw is an auto generated low-level Go binding around an Ethereum contract.
type TokenMigratorEventsRaw struct {
	Contract *TokenMigratorEvents // Generic contract binding to access the raw methods on
}

// TokenMigratorEventsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TokenMigratorEventsCallerRaw struct {
	Contract *TokenMigratorEventsCaller // Generic read-only contract binding to access the raw methods on
}

// TokenMigratorEventsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TokenMigratorEventsTransactorRaw struct {
	Contract *TokenMigratorEventsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTokenMigratorEvents creates a new instance of TokenMigratorEvents, bound to a specific deployed contract.
func NewTokenMigratorEvents(address common.Address, backend bind.ContractBackend) (*TokenMigratorEvents, error) {
	contract, err := bindTokenMigratorEvents(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TokenMigratorEvents{TokenMigratorEventsCaller: TokenMigratorEventsCaller{contract: contract}, TokenMigratorEventsTransactor: TokenMigratorEventsTransactor{contract: contract}, TokenMigratorEventsFilterer: TokenMigratorEventsFilterer{contract: contract}}, nil
}

// NewTokenMigratorEventsCaller creates a new read-only instance of TokenMigratorEvents, bound to a specific deployed contract.
func NewTokenMigratorEventsCaller(address common.Address, caller bind.ContractCaller) (*TokenMigratorEventsCaller, error) {
	contract, err := bindTokenMigratorEvents(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TokenMigratorEventsCaller{contract: contract}, nil
}

// NewTokenMigratorEventsTransactor creates a new write-only instance of TokenMigratorEvents, bound to a specific deployed contract.
func NewTokenMigratorEventsTransactor(address common.Address, transactor bind.ContractTransactor) (*TokenMigratorEventsTransactor, error) {
	contract, err := bindTokenMigratorEvents(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TokenMigratorEventsTransactor{contract: contract}, nil
}

// NewTokenMigratorEventsFilterer creates a new log filterer instance of TokenMigratorEvents, bound to a specific deployed contract.
func NewTokenMigratorEventsFilterer(address common.Address, filterer bind.ContractFilterer) (*TokenMigratorEventsFilterer, error) {
	contract, err := bindTokenMigratorEvents(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TokenMigratorEventsFilterer{contract: contract}, nil
}

// bindTokenMigratorEvents binds a generic wrapper to an already deployed contract.
func bindTokenMigratorEvents(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TokenMigratorEventsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TokenMigratorEvents *TokenMigratorEventsRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _TokenMigratorEvents.Contract.TokenMigratorEventsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TokenMigratorEvents *TokenMigratorEventsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenMigratorEvents.Contract.TokenMigratorEventsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TokenMigratorEvents *TokenMigratorEventsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TokenMigratorEvents.Contract.TokenMigratorEventsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TokenMigratorEvents *TokenMigratorEventsCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _TokenMigratorEvents.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TokenMigratorEvents *TokenMigratorEventsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenMigratorEvents.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TokenMigratorEvents *TokenMigratorEventsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TokenMigratorEvents.Contract.contract.Transact(opts, method, params...)
}

// TokenMigratorEventsStartedIterator is returned from FilterStarted and is used to iterate over the raw logs and unpacked data for Started events raised by the TokenMigratorEvents contract.
type TokenMigratorEventsStartedIterator struct {
	Event *TokenMigratorEventsStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenMigratorEventsStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenMigratorEventsStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenMigratorEventsStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenMigratorEventsStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenMigratorEventsStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenMigratorEventsStarted represents a Started event raised by the TokenMigratorEvents contract.
type TokenMigratorEventsStarted struct {
	Source      common.Address
	Destination common.Address
	Who         common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterStarted is a free log retrieval operation binding the contract event 0xe7ccbdddf2d84fab545fb1aad35fd684ef7cce1df6df25facfb32fe3de037f1d.
//
// Solidity: event Started(address source, address destination, address who)
func (_TokenMigratorEvents *TokenMigratorEventsFilterer) FilterStarted(opts *bind.FilterOpts) (*TokenMigratorEventsStartedIterator, error) {

	logs, sub, err := _TokenMigratorEvents.contract.FilterLogs(opts, "Started")
	if err != nil {
		return nil, err
	}
	return &TokenMigratorEventsStartedIterator{contract: _TokenMigratorEvents.contract, event: "Started", logs: logs, sub: sub}, nil
}

// WatchStarted is a free log subscription operation binding the contract event 0xe7ccbdddf2d84fab545fb1aad35fd684ef7cce1df6df25facfb32fe3de037f1d.
//
// Solidity: event Started(address source, address destination, address who)
func (_TokenMigratorEvents *TokenMigratorEventsFilterer) WatchStarted(opts *bind.WatchOpts, sink chan<- *TokenMigratorEventsStarted) (event.Subscription, error) {

	logs, sub, err := _TokenMigratorEvents.contract.WatchLogs(opts, "Started")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenMigratorEventsStarted)
				if err := _TokenMigratorEvents.contract.UnpackLog(event, "Started", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStarted is a log parse operation binding the contract event 0xe7ccbdddf2d84fab545fb1aad35fd684ef7cce1df6df25facfb32fe3de037f1d.
//
// Solidity: event Started(address source, address destination, address who)
func (_TokenMigratorEvents *TokenMigratorEventsFilterer) ParseStarted(log types.Log) (*TokenMigratorEventsStarted, error) {
	event := new(TokenMigratorEventsStarted)
	if err := _TokenMigratorEvents.contract.UnpackLog(event, "Started", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TokenMigratorEventsStoppedIterator is returned from FilterStopped and is used to iterate over the raw logs and unpacked data for Stopped events raised by the TokenMigratorEvents contract.
type TokenMigratorEventsStoppedIterator struct {
	Event *TokenMigratorEventsStopped // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenMigratorEventsStoppedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenMigratorEventsStopped)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenMigratorEventsStopped)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenMigratorEventsStoppedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenMigratorEventsStoppedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenMigratorEventsStopped represents a Stopped event raised by the TokenMigratorEvents contract.
type TokenMigratorEventsStopped struct {
	Who common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterStopped is a free log retrieval operation binding the contract event 0x55c4adf1f68f084b809304657594a92ba835ada8d3b5340955bf05746723c05b.
//
// Solidity: event Stopped(address who)
func (_TokenMigratorEvents *TokenMigratorEventsFilterer) FilterStopped(opts *bind.FilterOpts) (*TokenMigratorEventsStoppedIterator, error) {

	logs, sub, err := _TokenMigratorEvents.contract.FilterLogs(opts, "Stopped")
	if err != nil {
		return nil, err
	}
	return &TokenMigratorEventsStoppedIterator{contract: _TokenMigratorEvents.contract, event: "Stopped", logs: logs, sub: sub}, nil
}

// WatchStopped is a free log subscription operation binding the contract event 0x55c4adf1f68f084b809304657594a92ba835ada8d3b5340955bf05746723c05b.
//
// Solidity: event Stopped(address who)
func (_TokenMigratorEvents *TokenMigratorEventsFilterer) WatchStopped(opts *bind.WatchOpts, sink chan<- *TokenMigratorEventsStopped) (event.Subscription, error) {

	logs, sub, err := _TokenMigratorEvents.contract.WatchLogs(opts, "Stopped")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenMigratorEventsStopped)
				if err := _TokenMigratorEvents.contract.UnpackLog(event, "Stopped", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStopped is a log parse operation binding the contract event 0x55c4adf1f68f084b809304657594a92ba835ada8d3b5340955bf05746723c05b.
//
// Solidity: event Stopped(address who)
func (_TokenMigratorEvents *TokenMigratorEventsFilterer) ParseStopped(log types.Log) (*TokenMigratorEventsStopped, error) {
	event := new(TokenMigratorEventsStopped)
	if err := _TokenMigratorEvents.contract.UnpackLog(event, "Stopped", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TokenMigratorTestABI is the input ABI used to generate the binding from.
const TokenMigratorTestABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"log_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"log_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"log_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"name\":\"log_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"log_named_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\"}],\"name\":\"log_named_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\"}],\"name\":\"log_named_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"}],\"name\":\"log_named_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"}],\"name\":\"log_named_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"log_named_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"log_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"logs\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testFailMigrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testFailMigrateAllUnapproved\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testFailStartDouble\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testFailStartInvalidToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testFailStop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testMigrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testMigrateAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testMigrateAllSupplyIncrease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testStop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// TokenMigratorTestBin is the compiled bytecode used for deploying new contracts.
var TokenMigratorTestBin = "0x608060405260016000806101000a81548160ff02191690831515021790555034801561002a57600080fd5b506179a98061003a6000396000f3fe60806040523480156200001157600080fd5b5060043610620000e25760003560e01c806396b2833e1162000099578063da34e901116200006f578063da34e9011462000169578063e34323b81462000175578063f89eae171462000181578063fa7626d4146200018d57620000e2565b806396b2833e146200012f578063ba414fa6146200013b578063c84c2c14146200015d57620000e2565b80630a9254e414620000e75780631a83894c14620000f357806331e876f114620000ff57806343ab1a34146200010b578063538bec1614620001175780637a3867d31462000123575b600080fd5b620000f1620001af565b005b620000fd620005c4565b005b6200010962000a11565b005b6200011562000ada565b005b6200012162000bc1565b005b6200012d62001278565b005b620001396200193b565b005b6200014562001b4c565b60405180821515815260200191505060405180910390f35b6200016762001b5f565b005b6200017362001e32565b005b6200017f62002042565b005b6200018b6200214b565b005b62000197620022d8565b60405180821515815260200191505060405180910390f35b604051620001bd9062002449565b604051809103906000f080158015620001da573d6000803e3d6000fd5b50600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604051620002299062002457565b80807f5352430000000000000000000000000000000000000000000000000000000000815250602001807f536f7572636500000000000000000000000000000000000000000000000000008152506020019050604051809103906000f08015801562000299573d6000803e3d6000fd5b50600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604051620002e89062002457565b80807f4453540000000000000000000000000000000000000000000000000000000000815250602001807f44657374696e6174696f6e0000000000000000000000000000000000000000008152506020019050604051809103906000f08015801562000358573d6000803e3d6000fd5b50600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e348da13600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156200044757600080fd5b505af11580156200045c573d6000803e3d6000fd5b505050506040516200046e9062002465565b604051809103906000f0801580156200048b573d6000803e3d6000fd5b50600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166104d26040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156200058457600080fd5b505af115801562000599573d6000803e3d6000fd5b505050506040513d6020811015620005b057600080fd5b810190808051906020019092919050505050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633ccfe887600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b158015620006b257600080fd5b505af1158015620006c7573d6000803e3d6000fd5b505050506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200073657600080fd5b505afa1580156200074b573d6000803e3d6000fd5b505050506040513d60208110156200076257600080fd5b81019080805190602001909291905050509050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e1f21c67600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff166104d26040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b1580156200086d57600080fd5b505af115801562000882573d6000803e3d6000fd5b50505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635a8cadb1600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156200093457600080fd5b505af115801562000949573d6000803e3d6000fd5b505050506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015620009b857600080fd5b505afa158015620009cd573d6000803e3d6000fd5b505050506040513d6020811015620009e457600080fd5b8101908080519060200190929190505050905060006104d28301905062000a0c8282620022e9565b505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635a8cadb1600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801562000abf57600080fd5b505af115801562000ad4573d6000803e3d6000fd5b50505050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633ccfe887600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16306040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b15801562000ba657600080fd5b505af115801562000bbb573d6000803e3d6000fd5b50505050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633ccfe887600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b15801562000caf57600080fd5b505af115801562000cc4573d6000803e3d6000fd5b5050505062000dbe600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801562000d7857600080fd5b505afa15801562000d8d573d6000803e3d6000fd5b505050506040513d602081101562000da457600080fd5b81019080805190602001909291905050506104d2620022e9565b62000eb3600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801562000e6e57600080fd5b505afa15801562000e83573d6000803e3d6000fd5b505050506040513d602081101562000e9a57600080fd5b81019080805190602001909291905050506000620022e9565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e1f21c67600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff166104d26040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b15801562000fab57600080fd5b505af115801562000fc0573d6000803e3d6000fd5b50505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635a8cadb1600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156200107257600080fd5b505af115801562001087573d6000803e3d6000fd5b5050505062001180600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156200113b57600080fd5b505afa15801562001150573d6000803e3d6000fd5b505050506040513d60208110156200116757600080fd5b81019080805190602001909291905050506000620022e9565b62001276600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156200123057600080fd5b505afa15801562001245573d6000803e3d6000fd5b505050506040513d60208110156200125c57600080fd5b81019080805190602001909291905050506104d2620022e9565b565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633ccfe887600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b1580156200136657600080fd5b505af11580156200137b573d6000803e3d6000fd5b5050505062001475600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156200142f57600080fd5b505afa15801562001444573d6000803e3d6000fd5b505050506040513d60208110156200145b57600080fd5b81019080805190602001909291905050506104d2620022e9565b6200156a600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156200152557600080fd5b505afa1580156200153a573d6000803e3d6000fd5b505050506040513d60208110156200155157600080fd5b81019080805190602001909291905050506000620022e9565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e1f21c67600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff166104d26040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b1580156200166257600080fd5b505af115801562001677573d6000803e3d6000fd5b50505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad68ebf7600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660056040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156200173257600080fd5b505af115801562001747573d6000803e3d6000fd5b5050505062001844600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015620017fb57600080fd5b505afa15801562001810573d6000803e3d6000fd5b505050506040513d60208110156200182757600080fd5b810190808051906020019092919050505060056104d203620022e9565b62001939600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015620018f457600080fd5b505afa15801562001909573d6000803e3d6000fd5b505050506040513d60208110156200192057600080fd5b81019080805190602001909291905050506005620022e9565b565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633ccfe887600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b15801562001a2957600080fd5b505af115801562001a3e573d6000803e3d6000fd5b50505050600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166307da68f56040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562001aad57600080fd5b505af115801562001ac2573d6000803e3d6000fd5b50505050600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166307da68f56040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562001b3157600080fd5b505af115801562001b46573d6000803e3d6000fd5b50505050565b600060019054906101000a900460ff1681565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633ccfe887600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b15801562001c4d57600080fd5b505af115801562001c62573d6000803e3d6000fd5b5050505062001d5c600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801562001d1657600080fd5b505afa15801562001d2b573d6000803e3d6000fd5b505050506040513d602081101562001d4257600080fd5b81019080805190602001909291905050506104d2620022e9565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad68ebf7600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660026104d2026040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801562001e1757600080fd5b505af115801562001e2c573d6000803e3d6000fd5b50505050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633ccfe887600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b15801562001f2057600080fd5b505af115801562001f35573d6000803e3d6000fd5b50505050600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633ccfe887600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b1580156200202757600080fd5b505af11580156200203c573d6000803e3d6000fd5b50505050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633ccfe887600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b1580156200213057600080fd5b505af115801562002145573d6000803e3d6000fd5b50505050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633ccfe887600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b1580156200223957600080fd5b505af11580156200224e573d6000803e3d6000fd5b50505050600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166307da68f56040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620022bd57600080fd5b505af1158015620022d2573d6000803e3d6000fd5b50505050565b60008054906101000a900460ff1681565b80821462002428577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051808060200182810382526022815260200180620079526022913960400191505060405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a88160405180806020018381526020018281038252600a8152602001807f20204578706563746564000000000000000000000000000000000000000000008152506020019250505060405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a88260405180806020018381526020018281038252600a8152602001807f2020202041637475616c000000000000000000000000000000000000000000008152506020019250505060405180910390a1620024276200242c565b5b5050565b6001600060016101000a81548160ff021916908315150217905550565b61158c806200247483390190565b613c328062003a0083390190565b61032080620076328339019056fe608060405234801561001057600080fd5b5033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610083600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661008860201b60201c565b6101ed565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061012c57506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610181576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603181526020018061155b6031913960400191505060405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060016000815480929190600101919050555050565b61135f806101fc6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80634a77f8701161005b5780634a77f8701461015d578063afa293d414610167578063e348da131461019b578063fad8b32a146101df57610088565b806307da68f51461008d57806316ad9542146100975780633ccfe887146100cb578063454b06081461012f575b600080fd5b610095610223565b005b61009f61048c565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61012d600480360360408110156100e157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506104b6565b005b61015b6004803603602081101561014557600080fd5b8101908080359060200190929190505050610818565b005b610165610825565b005b61016f610a75565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101dd600480360360208110156101b157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a9f565b005b610221600480360360208110156101f557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c04565b005b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806102c757506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b61031c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806112f96031913960400191505060405180910390fd5b600260149054906101000a900460ff1661039e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f6d6967726174696f6e206e6f742073746172746564000000000000000000000081525060200191505060405180910390fd5b6000600260146101000a81548160ff0219169083151502179055506000600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f55c4adf1f68f084b809304657594a92ba835ada8d3b5340955bf05746723c05b33604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061055a57506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6105af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806112f96031913960400191505060405180910390fd5b6105b882610dd8565b61060d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252604481526020018061126c6044913960600191505060405180910390fd5b61061681610dd8565b61066b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260498152602001806112b06049913960600191505060405180910390fd5b600260149054906101000a900460ff16156106ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f6d6967726174696f6e2068617320616c7265616479207374617274656400000081525060200191505060405180910390fd5b6001600260146101000a81548160ff02191690831515021790555081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fe7ccbdddf2d84fab545fb1aad35fd684ef7cce1df6df25facfb32fe3de037f1d828233604051808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a15050565b6108223382610f5b565b50565b60003390506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156108b557600080fd5b505afa1580156108c9573d6000803e3d6000fd5b505050506040513d60208110156108df57600080fd5b810190808051906020019092919050505090506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e84306040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561099b57600080fd5b505afa1580156109af573d6000803e3d6000fd5b505050506040513d60208110156109c557600080fd5b8101908080519060200190929190505050905060006109ed838361125190919063ffffffff16565b905060008111610a65576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f6e6f20746f6b656e7320617661696c61626c6520746f206d696772617465000081525060200191505060405180910390fd5b610a6f8482610f5b565b50505050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610b4357506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610b98576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806112f96031913960400191505060405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060016000815480929190600101919050555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610ca857506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610cfd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806112f96031913960400191505060405180910390fd5b6001805411610d74576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f43616e27742072656d6f766520616c6c206f70657261746f727300000000000081525060200191505060405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff02191690556001600081548092919060019003919050555050565b60008060608373ffffffffffffffffffffffffffffffffffffffff166040516024016040516020818303038152906040527f18160ddd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b60208310610eaa5780518252602082019150602081019050602083039250610e87565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610f0c576040519150601f19603f3d011682016040523d82523d6000602084013e610f11565b606091505b5080925081935050506000818060200190516020811015610f3157600080fd5b81019080805190602001909291905050509050828015610f515750600081115b9350505050919050565b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611068576003339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b80600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8330846040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561116657600080fd5b505af115801561117a573d6000803e3d6000fd5b505050506040513d602081101561119057600080fd5b810190808051906020019092919050505050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1983836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561123557600080fd5b505af1158015611249573d6000803e3d6000fd5b505050505050565b6000818311156112615781611263565b825b90509291505056fe736f7572636520646f6573206e6f742061707065617220746f20626520616e20455243323020286661696c65642063616c6c20746f20746f74616c537570706c7928292964657374696e6174696f6e20646f6573206e6f742061707065617220746f20626520616e20455243323020286661696c65642063616c6c20746f20746f74616c537570706c7928292946756e6374696f6e616c697479207265737472696374656420746f20617574686f72697a6564206f70657261746f72732ea26469706673582212202149157beeb484458596dd68b570425674e96ffb4826cde13cb99265e0e5898064736f6c6343000706003346756e6374696f6e616c697479207265737472696374656420746f20617574686f72697a6564206f70657261746f72732e6080604052601260065560006007556040516200001c9062000c11565b604051809103906000f08015801562000039573d6000803e3d6000fd5b50600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503480156200008757600080fd5b5060405162003c3238038062003c3283398181016040526040811015620000ad57600080fd5b8101908080519060200190929190805190602001909291905050508133600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9460405160405180910390a2806005819055505033600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620001c9600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16620002d760201b60201c565b620001fc600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166200049260201b60201c565b80600781905550600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e348da13336040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156200028f57600080fd5b505af1158015620002a4573d6000803e3d6000fd5b505050506012600681905550620002cf336c0c9f2c9cd04674edea40000000620005e160201b60201c565b505062000c1f565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806200037d5750600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b620003d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603181526020018062003c016031913960400191505060405180910390fd5b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e348da13826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156200046057600080fd5b505af115801562000475573d6000803e3d6000fd5b505050506200048f816200080e60201b620020d71760201c565b50565b620004c8336000357fffffffff00000000000000000000000000000000000000000000000000000000166200097860201b60201c565b6200053b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f64732d617574682d756e617574686f72697a656400000000000000000000000081525060200191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada460405160405180910390a250565b62000617336000357fffffffff00000000000000000000000000000000000000000000000000000000166200097860201b60201c565b6200068a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f64732d617574682d756e617574686f72697a656400000000000000000000000081525060200191505060405180910390fd5b600160149054906101000a900460ff16156200070e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f64732d73746f702d69732d73746f70706564000000000000000000000000000081525060200191505060405180910390fd5b6200075f600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548262000b8d60201b60201c565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550620007b66002548262000b8d60201b60201c565b6002819055508173ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885826040518082815260200191505060405180910390a25050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480620008b45750600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6200090b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603181526020018062003c016031913960400191505060405180910390fd5b6001600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060096000815480929190600101919050555050565b60003073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415620009b9576001905062000b87565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141562000a1a576001905062000b87565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141562000a7a576000905062000b87565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b70096138430856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff168152602001827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001935050505060206040518083038186803b15801562000b4757600080fd5b505afa15801562000b5c573d6000803e3d6000fd5b505050506040513d602081101562000b7357600080fd5b810190808051906020019092919050505090505b92915050565b600082828401915081101562000c0b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f64732d6d6174682d6164642d6f766572666c6f7700000000000000000000000081525060200191505060405180910390fd5b92915050565b61084480620033bd83390190565b61278e8062000c2f6000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c80638da5cb5b116100f9578063be9a655511610097578063dd62ed3e11610071578063dd62ed3e1461072a578063e348da13146107a2578063f2d5d56b146107e6578063fad8b32a14610834576101a9565b8063be9a655514610692578063bf7e214f1461069c578063daea85c5146106d0576101a9565b8063a0712d68116100d3578063a0712d6814610544578063a9059cbb14610572578063b753a98c146105d6578063bb35783b14610624576101a9565b80638da5cb5b146104a457806395d89b41146104d85780639dc29fac146104f6576101a9565b8063313ce567116101665780635ac801fe116101405780635ac801fe146103ba57806370a08231146103e857806375f12b21146104405780637a9e5e4b14610460576101a9565b8063313ce5671461032057806340c10f191461033e57806342966c681461038c576101a9565b806306fdde03146101ae57806307da68f5146101cc578063095ea7b3146101d657806313af40351461023a57806318160ddd1461027e57806323b872dd1461029c575b600080fd5b6101b6610878565b6040518082815260200191505060405180910390f35b6101d461087e565b005b610222600480360360408110156101ec57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610966565b60405180821515815260200191505060405180910390f35b61027c6004803603602081101561025057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610adb565b005b610286610c24565b6040518082815260200191505060405180910390f35b610308600480360360608110156102b257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c2a565b60405180821515815260200191505060405180910390f35b6103286111c2565b6040518082815260200191505060405180910390f35b61038a6004803603604081101561035457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506111c8565b005b6103b8600480360360208110156103a257600080fd5b81019080803590602001909291905050506113db565b005b6103e6600480360360208110156103d057600080fd5b81019080803590602001909291905050506113e8565b005b61042a600480360360208110156103fe57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611492565b6040518082815260200191505060405180910390f35b6104486114aa565b60405180821515815260200191505060405180910390f35b6104a26004803603602081101561047657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114bd565b005b6104ac611603565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6104e0611629565b6040518082815260200191505060405180910390f35b6105426004803603604081101561050c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061162f565b005b6105706004803603602081101561055a57600080fd5b8101908080359060200190929190505050611bcd565b005b6105be6004803603604081101561058857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611bda565b60405180821515815260200191505060405180910390f35b610622600480360360408110156105ec57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611bef565b005b6106906004803603606081101561063a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611bff565b005b61069a611c10565b005b6106a4611cf9565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610712600480360360208110156106e657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d1d565b60405180821515815260200191505060405180910390f35b61078c6004803603604081101561074057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d50565b6040518082815260200191505060405180910390f35b6107e4600480360360208110156107b857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d75565b005b610832600480360360408110156107fc57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611f1e565b005b6108766004803603602081101561084a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611f2e565b005b60075481565b6108ac336000357fffffffff000000000000000000000000000000000000000000000000000000001661223e565b61091e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f64732d617574682d756e617574686f72697a656400000000000000000000000081525060200191505060405180910390fd5b60018060146101000a81548160ff0219169083151502179055507fbedf0f4abfe86d4ffad593d9607fe70e83ea706033d44d24b3b6283cf3fc4f6b60405160405180910390a1565b6000600160149054906101000a900460ff16156109eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f64732d73746f702d69732d73746f70706564000000000000000000000000000081525060200191505060405180910390fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b610b09336000357fffffffff000000000000000000000000000000000000000000000000000000001661223e565b610b7b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f64732d617574682d756e617574686f72697a656400000000000000000000000081525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9460405160405180910390a250565b60025481565b6000600160149054906101000a900460ff1615610caf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f64732d73746f702d69732d73746f70706564000000000000000000000000000081525060200191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614158015610d8757507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b15610f855781600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610e7e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f64732d746f6b656e2d696e73756666696369656e742d617070726f76616c000081525060200191505060405180910390fd5b610f04600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548361244a565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b81600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561103a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f64732d746f6b656e2d696e73756666696369656e742d62616c616e636500000081525060200191505060405180910390fd5b611083600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548361244a565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061110f600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836124cd565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60065481565b6111f6336000357fffffffff000000000000000000000000000000000000000000000000000000001661223e565b611268576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f64732d617574682d756e617574686f72697a656400000000000000000000000081525060200191505060405180910390fd5b600160149054906101000a900460ff16156112eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f64732d73746f702d69732d73746f70706564000000000000000000000000000081525060200191505060405180910390fd5b611334600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054826124cd565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611383600254826124cd565b6002819055508173ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885826040518082815260200191505060405180910390a25050565b6113e5338261162f565b50565b611416336000357fffffffff000000000000000000000000000000000000000000000000000000001661223e565b611488576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f64732d617574682d756e617574686f72697a656400000000000000000000000081525060200191505060405180910390fd5b8060078190555050565b60036020528060005260406000206000915090505481565b600160149054906101000a900460ff1681565b6114eb336000357fffffffff000000000000000000000000000000000000000000000000000000001661223e565b61155d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f64732d617574682d756e617574686f72697a656400000000000000000000000081525060200191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada460405160405180910390a250565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b61165d336000357fffffffff000000000000000000000000000000000000000000000000000000001661223e565b6116cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f64732d617574682d756e617574686f72697a656400000000000000000000000081525060200191505060405180910390fd5b600160149054906101000a900460ff1615611752576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f64732d73746f702d69732d73746f70706564000000000000000000000000000081525060200191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415801561182a57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b15611a285780600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611921576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f64732d746f6b656e2d696e73756666696369656e742d617070726f76616c000081525060200191505060405180910390fd5b6119a7600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548261244a565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611add576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f64732d746f6b656e2d696e73756666696369656e742d62616c616e636500000081525060200191505060405180910390fd5b611b26600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548261244a565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611b756002548261244a565b6002819055508173ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5826040518082815260200191505060405180910390a25050565b611bd733826111c8565b50565b6000611be7338484610c2a565b905092915050565b611bfa338383610c2a565b505050565b611c0a838383610c2a565b50505050565b611c3e336000357fffffffff000000000000000000000000000000000000000000000000000000001661223e565b611cb0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f64732d617574682d756e617574686f72697a656400000000000000000000000081525060200191505060405180910390fd5b6000600160146101000a81548160ff0219169083151502179055507f1b55ba3aa851a46be3b365aee5b5c140edd620d578922f3e8466d2cbd96f954b60405160405180910390a1565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000611d49827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610966565b9050919050565b6004602052816000526040600020602052806000526040600020600091509150505481565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611e1a5750600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b611e6f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806127286031913960400191505060405180910390fd5b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e348da13826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015611efa57600080fd5b505af1158015611f0e573d6000803e3d6000fd5b50505050611f1b816120d7565b50565b611f29823383610c2a565b505050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611fd35750600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b612028576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806127286031913960400191505060405180910390fd5b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fad8b32a826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156120b357600080fd5b505af11580156120c7573d6000803e3d6000fd5b505050506120d481612550565b50565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061217c5750600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6121d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806127286031913960400191505060405180910390fd5b6001600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060096000815480929190600101919050555050565b60003073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561227d5760019050612444565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156122dc5760019050612444565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561233a5760009050612444565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b70096138430856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff168152602001827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001935050505060206040518083038186803b15801561240657600080fd5b505afa15801561241a573d6000803e3d6000fd5b505050506040513d602081101561243057600080fd5b810190808051906020019092919050505090505b92915050565b60008282840391508111156124c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f64732d6d6174682d7375622d756e646572666c6f77000000000000000000000081525060200191505060405180910390fd5b92915050565b600082828401915081101561254a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f64732d6d6174682d6164642d6f766572666c6f7700000000000000000000000081525060200191505060405180910390fd5b92915050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806125f55750600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b61264a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806127286031913960400191505060405180910390fd5b6001600954116126c2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f43616e27742072656d6f766520616c6c206f70657261746f727300000000000081525060200191505060405180910390fd5b600860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff0219169055600960008154809291906001900391905055505056fe46756e6374696f6e616c697479207265737472696374656420746f20617574686f72697a6564206f70657261746f72732ea26469706673582212204d6bd2b8e5ae0d9da7f17a68e345fdff82d3fde0f999a43b0baae6c8c4b3f05b64736f6c63430007060033608060405234801561001057600080fd5b5033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610083600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661008860201b60201c565b6101ed565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061012c57506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610181576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806108136031913960400191505060405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060016000815480929190600101919050555050565b610617806101fc6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063b700961314610046578063e348da13146100e9578063fad8b32a1461012d575b600080fd5b6100d16004803603606081101561005c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610171565b60405180821515815260200191505060405180910390f35b61012b600480360360208110156100ff57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610277565b005b61016f6004803603602081101561014357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506103dc565b005b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061021757506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b61026c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806105b16031913960400191505060405180910390fd5b600190509392505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061031b57506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610370576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806105b16031913960400191505060405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060016000815480929190600101919050555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061048057506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6104d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806105b16031913960400191505060405180910390fd5b600180541161054c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f43616e27742072656d6f766520616c6c206f70657261746f727300000000000081525060200191505060405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff0219169055600160008154809291906001900391905055505056fe46756e6374696f6e616c697479207265737472696374656420746f20617574686f72697a6564206f70657261746f72732ea26469706673582212205a02f02855af5fe5abc7a36966a40113393b2b5e98542418a5a8e3f004b0021464736f6c6343000706003346756e6374696f6e616c697479207265737472696374656420746f20617574686f72697a6564206f70657261746f72732e46756e6374696f6e616c697479207265737472696374656420746f20617574686f72697a6564206f70657261746f72732e608060405234801561001057600080fd5b50610300806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80635a8cadb114610046578063ad68ebf71461008a578063e1f21c67146100d8575b600080fd5b6100886004803603602081101561005c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610146565b005b6100d6600480360360408110156100a057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506101a9565b005b610144600480360360608110156100ee57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610218565b005b8073ffffffffffffffffffffffffffffffffffffffff16634a77f8706040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561018e57600080fd5b505af11580156101a2573d6000803e3d6000fd5b5050505050565b8173ffffffffffffffffffffffffffffffffffffffff1663454b0608826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156101fc57600080fd5b505af1158015610210573d6000803e3d6000fd5b505050505050565b8273ffffffffffffffffffffffffffffffffffffffff1663095ea7b383836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561028957600080fd5b505af115801561029d573d6000803e3d6000fd5b505050506040513d60208110156102b357600080fd5b81019080805190602001909291905050505050505056fea2646970667358221220a3746995c913f1dbb5a83d072f0fe07cb3484f282c03109c3328af2953bb01d764736f6c634300070600334572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e745da26469706673582212208b96198a9cdcfddf317d3201b09a02b4a02add71d132558cd384dfa2680af9c164736f6c63430007060033"

// DeployTokenMigratorTest deploys a new Ethereum contract, binding an instance of TokenMigratorTest to it.
func DeployTokenMigratorTest(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TokenMigratorTest, error) {
	parsed, err := abi.JSON(strings.NewReader(TokenMigratorTestABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(TokenMigratorTestBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TokenMigratorTest{TokenMigratorTestCaller: TokenMigratorTestCaller{contract: contract}, TokenMigratorTestTransactor: TokenMigratorTestTransactor{contract: contract}, TokenMigratorTestFilterer: TokenMigratorTestFilterer{contract: contract}}, nil
}

// TokenMigratorTest is an auto generated Go binding around an Ethereum contract.
type TokenMigratorTest struct {
	TokenMigratorTestCaller     // Read-only binding to the contract
	TokenMigratorTestTransactor // Write-only binding to the contract
	TokenMigratorTestFilterer   // Log filterer for contract events
}

// TokenMigratorTestCaller is an auto generated read-only Go binding around an Ethereum contract.
type TokenMigratorTestCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenMigratorTestTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TokenMigratorTestTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenMigratorTestFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TokenMigratorTestFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenMigratorTestSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TokenMigratorTestSession struct {
	Contract     *TokenMigratorTest // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// TokenMigratorTestCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TokenMigratorTestCallerSession struct {
	Contract *TokenMigratorTestCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// TokenMigratorTestTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TokenMigratorTestTransactorSession struct {
	Contract     *TokenMigratorTestTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// TokenMigratorTestRaw is an auto generated low-level Go binding around an Ethereum contract.
type TokenMigratorTestRaw struct {
	Contract *TokenMigratorTest // Generic contract binding to access the raw methods on
}

// TokenMigratorTestCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TokenMigratorTestCallerRaw struct {
	Contract *TokenMigratorTestCaller // Generic read-only contract binding to access the raw methods on
}

// TokenMigratorTestTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TokenMigratorTestTransactorRaw struct {
	Contract *TokenMigratorTestTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTokenMigratorTest creates a new instance of TokenMigratorTest, bound to a specific deployed contract.
func NewTokenMigratorTest(address common.Address, backend bind.ContractBackend) (*TokenMigratorTest, error) {
	contract, err := bindTokenMigratorTest(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TokenMigratorTest{TokenMigratorTestCaller: TokenMigratorTestCaller{contract: contract}, TokenMigratorTestTransactor: TokenMigratorTestTransactor{contract: contract}, TokenMigratorTestFilterer: TokenMigratorTestFilterer{contract: contract}}, nil
}

// NewTokenMigratorTestCaller creates a new read-only instance of TokenMigratorTest, bound to a specific deployed contract.
func NewTokenMigratorTestCaller(address common.Address, caller bind.ContractCaller) (*TokenMigratorTestCaller, error) {
	contract, err := bindTokenMigratorTest(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TokenMigratorTestCaller{contract: contract}, nil
}

// NewTokenMigratorTestTransactor creates a new write-only instance of TokenMigratorTest, bound to a specific deployed contract.
func NewTokenMigratorTestTransactor(address common.Address, transactor bind.ContractTransactor) (*TokenMigratorTestTransactor, error) {
	contract, err := bindTokenMigratorTest(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TokenMigratorTestTransactor{contract: contract}, nil
}

// NewTokenMigratorTestFilterer creates a new log filterer instance of TokenMigratorTest, bound to a specific deployed contract.
func NewTokenMigratorTestFilterer(address common.Address, filterer bind.ContractFilterer) (*TokenMigratorTestFilterer, error) {
	contract, err := bindTokenMigratorTest(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TokenMigratorTestFilterer{contract: contract}, nil
}

// bindTokenMigratorTest binds a generic wrapper to an already deployed contract.
func bindTokenMigratorTest(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TokenMigratorTestABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TokenMigratorTest *TokenMigratorTestRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _TokenMigratorTest.Contract.TokenMigratorTestCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TokenMigratorTest *TokenMigratorTestRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenMigratorTest.Contract.TokenMigratorTestTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TokenMigratorTest *TokenMigratorTestRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TokenMigratorTest.Contract.TokenMigratorTestTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TokenMigratorTest *TokenMigratorTestCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _TokenMigratorTest.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TokenMigratorTest *TokenMigratorTestTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenMigratorTest.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TokenMigratorTest *TokenMigratorTestTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TokenMigratorTest.Contract.contract.Transact(opts, method, params...)
}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_TokenMigratorTest *TokenMigratorTestCaller) ISTEST(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _TokenMigratorTest.contract.Call(opts, out, "IS_TEST")
	return *ret0, err
}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_TokenMigratorTest *TokenMigratorTestSession) ISTEST() (bool, error) {
	return _TokenMigratorTest.Contract.ISTEST(&_TokenMigratorTest.CallOpts)
}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_TokenMigratorTest *TokenMigratorTestCallerSession) ISTEST() (bool, error) {
	return _TokenMigratorTest.Contract.ISTEST(&_TokenMigratorTest.CallOpts)
}

// Failed is a free data retrieval call binding the contract method 0xba414fa6.
//
// Solidity: function failed() view returns(bool)
func (_TokenMigratorTest *TokenMigratorTestCaller) Failed(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _TokenMigratorTest.contract.Call(opts, out, "failed")
	return *ret0, err
}

// Failed is a free data retrieval call binding the contract method 0xba414fa6.
//
// Solidity: function failed() view returns(bool)
func (_TokenMigratorTest *TokenMigratorTestSession) Failed() (bool, error) {
	return _TokenMigratorTest.Contract.Failed(&_TokenMigratorTest.CallOpts)
}

// Failed is a free data retrieval call binding the contract method 0xba414fa6.
//
// Solidity: function failed() view returns(bool)
func (_TokenMigratorTest *TokenMigratorTestCallerSession) Failed() (bool, error) {
	return _TokenMigratorTest.Contract.Failed(&_TokenMigratorTest.CallOpts)
}

// SetUp is a paid mutator transaction binding the contract method 0x0a9254e4.
//
// Solidity: function setUp() returns()
func (_TokenMigratorTest *TokenMigratorTestTransactor) SetUp(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenMigratorTest.contract.Transact(opts, "setUp")
}

// SetUp is a paid mutator transaction binding the contract method 0x0a9254e4.
//
// Solidity: function setUp() returns()
func (_TokenMigratorTest *TokenMigratorTestSession) SetUp() (*types.Transaction, error) {
	return _TokenMigratorTest.Contract.SetUp(&_TokenMigratorTest.TransactOpts)
}

// SetUp is a paid mutator transaction binding the contract method 0x0a9254e4.
//
// Solidity: function setUp() returns()
func (_TokenMigratorTest *TokenMigratorTestTransactorSession) SetUp() (*types.Transaction, error) {
	return _TokenMigratorTest.Contract.SetUp(&_TokenMigratorTest.TransactOpts)
}

// TestFailMigrate is a paid mutator transaction binding the contract method 0xc84c2c14.
//
// Solidity: function testFailMigrate() returns()
func (_TokenMigratorTest *TokenMigratorTestTransactor) TestFailMigrate(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenMigratorTest.contract.Transact(opts, "testFailMigrate")
}

// TestFailMigrate is a paid mutator transaction binding the contract method 0xc84c2c14.
//
// Solidity: function testFailMigrate() returns()
func (_TokenMigratorTest *TokenMigratorTestSession) TestFailMigrate() (*types.Transaction, error) {
	return _TokenMigratorTest.Contract.TestFailMigrate(&_TokenMigratorTest.TransactOpts)
}

// TestFailMigrate is a paid mutator transaction binding the contract method 0xc84c2c14.
//
// Solidity: function testFailMigrate() returns()
func (_TokenMigratorTest *TokenMigratorTestTransactorSession) TestFailMigrate() (*types.Transaction, error) {
	return _TokenMigratorTest.Contract.TestFailMigrate(&_TokenMigratorTest.TransactOpts)
}

// TestFailMigrateAllUnapproved is a paid mutator transaction binding the contract method 0x31e876f1.
//
// Solidity: function testFailMigrateAllUnapproved() returns()
func (_TokenMigratorTest *TokenMigratorTestTransactor) TestFailMigrateAllUnapproved(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenMigratorTest.contract.Transact(opts, "testFailMigrateAllUnapproved")
}

// TestFailMigrateAllUnapproved is a paid mutator transaction binding the contract method 0x31e876f1.
//
// Solidity: function testFailMigrateAllUnapproved() returns()
func (_TokenMigratorTest *TokenMigratorTestSession) TestFailMigrateAllUnapproved() (*types.Transaction, error) {
	return _TokenMigratorTest.Contract.TestFailMigrateAllUnapproved(&_TokenMigratorTest.TransactOpts)
}

// TestFailMigrateAllUnapproved is a paid mutator transaction binding the contract method 0x31e876f1.
//
// Solidity: function testFailMigrateAllUnapproved() returns()
func (_TokenMigratorTest *TokenMigratorTestTransactorSession) TestFailMigrateAllUnapproved() (*types.Transaction, error) {
	return _TokenMigratorTest.Contract.TestFailMigrateAllUnapproved(&_TokenMigratorTest.TransactOpts)
}

// TestFailStartDouble is a paid mutator transaction binding the contract method 0xda34e901.
//
// Solidity: function testFailStartDouble() returns()
func (_TokenMigratorTest *TokenMigratorTestTransactor) TestFailStartDouble(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenMigratorTest.contract.Transact(opts, "testFailStartDouble")
}

// TestFailStartDouble is a paid mutator transaction binding the contract method 0xda34e901.
//
// Solidity: function testFailStartDouble() returns()
func (_TokenMigratorTest *TokenMigratorTestSession) TestFailStartDouble() (*types.Transaction, error) {
	return _TokenMigratorTest.Contract.TestFailStartDouble(&_TokenMigratorTest.TransactOpts)
}

// TestFailStartDouble is a paid mutator transaction binding the contract method 0xda34e901.
//
// Solidity: function testFailStartDouble() returns()
func (_TokenMigratorTest *TokenMigratorTestTransactorSession) TestFailStartDouble() (*types.Transaction, error) {
	return _TokenMigratorTest.Contract.TestFailStartDouble(&_TokenMigratorTest.TransactOpts)
}

// TestFailStartInvalidToken is a paid mutator transaction binding the contract method 0x43ab1a34.
//
// Solidity: function testFailStartInvalidToken() returns()
func (_TokenMigratorTest *TokenMigratorTestTransactor) TestFailStartInvalidToken(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenMigratorTest.contract.Transact(opts, "testFailStartInvalidToken")
}

// TestFailStartInvalidToken is a paid mutator transaction binding the contract method 0x43ab1a34.
//
// Solidity: function testFailStartInvalidToken() returns()
func (_TokenMigratorTest *TokenMigratorTestSession) TestFailStartInvalidToken() (*types.Transaction, error) {
	return _TokenMigratorTest.Contract.TestFailStartInvalidToken(&_TokenMigratorTest.TransactOpts)
}

// TestFailStartInvalidToken is a paid mutator transaction binding the contract method 0x43ab1a34.
//
// Solidity: function testFailStartInvalidToken() returns()
func (_TokenMigratorTest *TokenMigratorTestTransactorSession) TestFailStartInvalidToken() (*types.Transaction, error) {
	return _TokenMigratorTest.Contract.TestFailStartInvalidToken(&_TokenMigratorTest.TransactOpts)
}

// TestFailStop is a paid mutator transaction binding the contract method 0x96b2833e.
//
// Solidity: function testFailStop() returns()
func (_TokenMigratorTest *TokenMigratorTestTransactor) TestFailStop(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenMigratorTest.contract.Transact(opts, "testFailStop")
}

// TestFailStop is a paid mutator transaction binding the contract method 0x96b2833e.
//
// Solidity: function testFailStop() returns()
func (_TokenMigratorTest *TokenMigratorTestSession) TestFailStop() (*types.Transaction, error) {
	return _TokenMigratorTest.Contract.TestFailStop(&_TokenMigratorTest.TransactOpts)
}

// TestFailStop is a paid mutator transaction binding the contract method 0x96b2833e.
//
// Solidity: function testFailStop() returns()
func (_TokenMigratorTest *TokenMigratorTestTransactorSession) TestFailStop() (*types.Transaction, error) {
	return _TokenMigratorTest.Contract.TestFailStop(&_TokenMigratorTest.TransactOpts)
}

// TestMigrate is a paid mutator transaction binding the contract method 0x7a3867d3.
//
// Solidity: function testMigrate() returns()
func (_TokenMigratorTest *TokenMigratorTestTransactor) TestMigrate(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenMigratorTest.contract.Transact(opts, "testMigrate")
}

// TestMigrate is a paid mutator transaction binding the contract method 0x7a3867d3.
//
// Solidity: function testMigrate() returns()
func (_TokenMigratorTest *TokenMigratorTestSession) TestMigrate() (*types.Transaction, error) {
	return _TokenMigratorTest.Contract.TestMigrate(&_TokenMigratorTest.TransactOpts)
}

// TestMigrate is a paid mutator transaction binding the contract method 0x7a3867d3.
//
// Solidity: function testMigrate() returns()
func (_TokenMigratorTest *TokenMigratorTestTransactorSession) TestMigrate() (*types.Transaction, error) {
	return _TokenMigratorTest.Contract.TestMigrate(&_TokenMigratorTest.TransactOpts)
}

// TestMigrateAll is a paid mutator transaction binding the contract method 0x538bec16.
//
// Solidity: function testMigrateAll() returns()
func (_TokenMigratorTest *TokenMigratorTestTransactor) TestMigrateAll(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenMigratorTest.contract.Transact(opts, "testMigrateAll")
}

// TestMigrateAll is a paid mutator transaction binding the contract method 0x538bec16.
//
// Solidity: function testMigrateAll() returns()
func (_TokenMigratorTest *TokenMigratorTestSession) TestMigrateAll() (*types.Transaction, error) {
	return _TokenMigratorTest.Contract.TestMigrateAll(&_TokenMigratorTest.TransactOpts)
}

// TestMigrateAll is a paid mutator transaction binding the contract method 0x538bec16.
//
// Solidity: function testMigrateAll() returns()
func (_TokenMigratorTest *TokenMigratorTestTransactorSession) TestMigrateAll() (*types.Transaction, error) {
	return _TokenMigratorTest.Contract.TestMigrateAll(&_TokenMigratorTest.TransactOpts)
}

// TestMigrateAllSupplyIncrease is a paid mutator transaction binding the contract method 0x1a83894c.
//
// Solidity: function testMigrateAllSupplyIncrease() returns()
func (_TokenMigratorTest *TokenMigratorTestTransactor) TestMigrateAllSupplyIncrease(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenMigratorTest.contract.Transact(opts, "testMigrateAllSupplyIncrease")
}

// TestMigrateAllSupplyIncrease is a paid mutator transaction binding the contract method 0x1a83894c.
//
// Solidity: function testMigrateAllSupplyIncrease() returns()
func (_TokenMigratorTest *TokenMigratorTestSession) TestMigrateAllSupplyIncrease() (*types.Transaction, error) {
	return _TokenMigratorTest.Contract.TestMigrateAllSupplyIncrease(&_TokenMigratorTest.TransactOpts)
}

// TestMigrateAllSupplyIncrease is a paid mutator transaction binding the contract method 0x1a83894c.
//
// Solidity: function testMigrateAllSupplyIncrease() returns()
func (_TokenMigratorTest *TokenMigratorTestTransactorSession) TestMigrateAllSupplyIncrease() (*types.Transaction, error) {
	return _TokenMigratorTest.Contract.TestMigrateAllSupplyIncrease(&_TokenMigratorTest.TransactOpts)
}

// TestStart is a paid mutator transaction binding the contract method 0xe34323b8.
//
// Solidity: function testStart() returns()
func (_TokenMigratorTest *TokenMigratorTestTransactor) TestStart(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenMigratorTest.contract.Transact(opts, "testStart")
}

// TestStart is a paid mutator transaction binding the contract method 0xe34323b8.
//
// Solidity: function testStart() returns()
func (_TokenMigratorTest *TokenMigratorTestSession) TestStart() (*types.Transaction, error) {
	return _TokenMigratorTest.Contract.TestStart(&_TokenMigratorTest.TransactOpts)
}

// TestStart is a paid mutator transaction binding the contract method 0xe34323b8.
//
// Solidity: function testStart() returns()
func (_TokenMigratorTest *TokenMigratorTestTransactorSession) TestStart() (*types.Transaction, error) {
	return _TokenMigratorTest.Contract.TestStart(&_TokenMigratorTest.TransactOpts)
}

// TestStop is a paid mutator transaction binding the contract method 0xf89eae17.
//
// Solidity: function testStop() returns()
func (_TokenMigratorTest *TokenMigratorTestTransactor) TestStop(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenMigratorTest.contract.Transact(opts, "testStop")
}

// TestStop is a paid mutator transaction binding the contract method 0xf89eae17.
//
// Solidity: function testStop() returns()
func (_TokenMigratorTest *TokenMigratorTestSession) TestStop() (*types.Transaction, error) {
	return _TokenMigratorTest.Contract.TestStop(&_TokenMigratorTest.TransactOpts)
}

// TestStop is a paid mutator transaction binding the contract method 0xf89eae17.
//
// Solidity: function testStop() returns()
func (_TokenMigratorTest *TokenMigratorTestTransactorSession) TestStop() (*types.Transaction, error) {
	return _TokenMigratorTest.Contract.TestStop(&_TokenMigratorTest.TransactOpts)
}

// TokenMigratorTestLogIterator is returned from FilterLog and is used to iterate over the raw logs and unpacked data for Log events raised by the TokenMigratorTest contract.
type TokenMigratorTestLogIterator struct {
	Event *TokenMigratorTestLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenMigratorTestLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenMigratorTestLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenMigratorTestLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenMigratorTestLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenMigratorTestLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenMigratorTestLog represents a Log event raised by the TokenMigratorTest contract.
type TokenMigratorTestLog struct {
	Arg0 string
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLog is a free log retrieval operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_TokenMigratorTest *TokenMigratorTestFilterer) FilterLog(opts *bind.FilterOpts) (*TokenMigratorTestLogIterator, error) {

	logs, sub, err := _TokenMigratorTest.contract.FilterLogs(opts, "log")
	if err != nil {
		return nil, err
	}
	return &TokenMigratorTestLogIterator{contract: _TokenMigratorTest.contract, event: "log", logs: logs, sub: sub}, nil
}

// WatchLog is a free log subscription operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_TokenMigratorTest *TokenMigratorTestFilterer) WatchLog(opts *bind.WatchOpts, sink chan<- *TokenMigratorTestLog) (event.Subscription, error) {

	logs, sub, err := _TokenMigratorTest.contract.WatchLogs(opts, "log")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenMigratorTestLog)
				if err := _TokenMigratorTest.contract.UnpackLog(event, "log", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLog is a log parse operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_TokenMigratorTest *TokenMigratorTestFilterer) ParseLog(log types.Log) (*TokenMigratorTestLog, error) {
	event := new(TokenMigratorTestLog)
	if err := _TokenMigratorTest.contract.UnpackLog(event, "log", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TokenMigratorTestLogAddressIterator is returned from FilterLogAddress and is used to iterate over the raw logs and unpacked data for LogAddress events raised by the TokenMigratorTest contract.
type TokenMigratorTestLogAddressIterator struct {
	Event *TokenMigratorTestLogAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenMigratorTestLogAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenMigratorTestLogAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenMigratorTestLogAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenMigratorTestLogAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenMigratorTestLogAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenMigratorTestLogAddress represents a LogAddress event raised by the TokenMigratorTest contract.
type TokenMigratorTestLogAddress struct {
	Arg0 common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogAddress is a free log retrieval operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_TokenMigratorTest *TokenMigratorTestFilterer) FilterLogAddress(opts *bind.FilterOpts) (*TokenMigratorTestLogAddressIterator, error) {

	logs, sub, err := _TokenMigratorTest.contract.FilterLogs(opts, "log_address")
	if err != nil {
		return nil, err
	}
	return &TokenMigratorTestLogAddressIterator{contract: _TokenMigratorTest.contract, event: "log_address", logs: logs, sub: sub}, nil
}

// WatchLogAddress is a free log subscription operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_TokenMigratorTest *TokenMigratorTestFilterer) WatchLogAddress(opts *bind.WatchOpts, sink chan<- *TokenMigratorTestLogAddress) (event.Subscription, error) {

	logs, sub, err := _TokenMigratorTest.contract.WatchLogs(opts, "log_address")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenMigratorTestLogAddress)
				if err := _TokenMigratorTest.contract.UnpackLog(event, "log_address", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogAddress is a log parse operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_TokenMigratorTest *TokenMigratorTestFilterer) ParseLogAddress(log types.Log) (*TokenMigratorTestLogAddress, error) {
	event := new(TokenMigratorTestLogAddress)
	if err := _TokenMigratorTest.contract.UnpackLog(event, "log_address", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TokenMigratorTestLogBytesIterator is returned from FilterLogBytes and is used to iterate over the raw logs and unpacked data for LogBytes events raised by the TokenMigratorTest contract.
type TokenMigratorTestLogBytesIterator struct {
	Event *TokenMigratorTestLogBytes // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenMigratorTestLogBytesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenMigratorTestLogBytes)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenMigratorTestLogBytes)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenMigratorTestLogBytesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenMigratorTestLogBytesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenMigratorTestLogBytes represents a LogBytes event raised by the TokenMigratorTest contract.
type TokenMigratorTestLogBytes struct {
	Arg0 []byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogBytes is a free log retrieval operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_TokenMigratorTest *TokenMigratorTestFilterer) FilterLogBytes(opts *bind.FilterOpts) (*TokenMigratorTestLogBytesIterator, error) {

	logs, sub, err := _TokenMigratorTest.contract.FilterLogs(opts, "log_bytes")
	if err != nil {
		return nil, err
	}
	return &TokenMigratorTestLogBytesIterator{contract: _TokenMigratorTest.contract, event: "log_bytes", logs: logs, sub: sub}, nil
}

// WatchLogBytes is a free log subscription operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_TokenMigratorTest *TokenMigratorTestFilterer) WatchLogBytes(opts *bind.WatchOpts, sink chan<- *TokenMigratorTestLogBytes) (event.Subscription, error) {

	logs, sub, err := _TokenMigratorTest.contract.WatchLogs(opts, "log_bytes")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenMigratorTestLogBytes)
				if err := _TokenMigratorTest.contract.UnpackLog(event, "log_bytes", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes is a log parse operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_TokenMigratorTest *TokenMigratorTestFilterer) ParseLogBytes(log types.Log) (*TokenMigratorTestLogBytes, error) {
	event := new(TokenMigratorTestLogBytes)
	if err := _TokenMigratorTest.contract.UnpackLog(event, "log_bytes", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TokenMigratorTestLogBytes32Iterator is returned from FilterLogBytes32 and is used to iterate over the raw logs and unpacked data for LogBytes32 events raised by the TokenMigratorTest contract.
type TokenMigratorTestLogBytes32Iterator struct {
	Event *TokenMigratorTestLogBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenMigratorTestLogBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenMigratorTestLogBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenMigratorTestLogBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenMigratorTestLogBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenMigratorTestLogBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenMigratorTestLogBytes32 represents a LogBytes32 event raised by the TokenMigratorTest contract.
type TokenMigratorTestLogBytes32 struct {
	Arg0 [32]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogBytes32 is a free log retrieval operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_TokenMigratorTest *TokenMigratorTestFilterer) FilterLogBytes32(opts *bind.FilterOpts) (*TokenMigratorTestLogBytes32Iterator, error) {

	logs, sub, err := _TokenMigratorTest.contract.FilterLogs(opts, "log_bytes32")
	if err != nil {
		return nil, err
	}
	return &TokenMigratorTestLogBytes32Iterator{contract: _TokenMigratorTest.contract, event: "log_bytes32", logs: logs, sub: sub}, nil
}

// WatchLogBytes32 is a free log subscription operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_TokenMigratorTest *TokenMigratorTestFilterer) WatchLogBytes32(opts *bind.WatchOpts, sink chan<- *TokenMigratorTestLogBytes32) (event.Subscription, error) {

	logs, sub, err := _TokenMigratorTest.contract.WatchLogs(opts, "log_bytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenMigratorTestLogBytes32)
				if err := _TokenMigratorTest.contract.UnpackLog(event, "log_bytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes32 is a log parse operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_TokenMigratorTest *TokenMigratorTestFilterer) ParseLogBytes32(log types.Log) (*TokenMigratorTestLogBytes32, error) {
	event := new(TokenMigratorTestLogBytes32)
	if err := _TokenMigratorTest.contract.UnpackLog(event, "log_bytes32", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TokenMigratorTestLogIntIterator is returned from FilterLogInt and is used to iterate over the raw logs and unpacked data for LogInt events raised by the TokenMigratorTest contract.
type TokenMigratorTestLogIntIterator struct {
	Event *TokenMigratorTestLogInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenMigratorTestLogIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenMigratorTestLogInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenMigratorTestLogInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenMigratorTestLogIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenMigratorTestLogIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenMigratorTestLogInt represents a LogInt event raised by the TokenMigratorTest contract.
type TokenMigratorTestLogInt struct {
	Arg0 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogInt is a free log retrieval operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_TokenMigratorTest *TokenMigratorTestFilterer) FilterLogInt(opts *bind.FilterOpts) (*TokenMigratorTestLogIntIterator, error) {

	logs, sub, err := _TokenMigratorTest.contract.FilterLogs(opts, "log_int")
	if err != nil {
		return nil, err
	}
	return &TokenMigratorTestLogIntIterator{contract: _TokenMigratorTest.contract, event: "log_int", logs: logs, sub: sub}, nil
}

// WatchLogInt is a free log subscription operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_TokenMigratorTest *TokenMigratorTestFilterer) WatchLogInt(opts *bind.WatchOpts, sink chan<- *TokenMigratorTestLogInt) (event.Subscription, error) {

	logs, sub, err := _TokenMigratorTest.contract.WatchLogs(opts, "log_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenMigratorTestLogInt)
				if err := _TokenMigratorTest.contract.UnpackLog(event, "log_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogInt is a log parse operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_TokenMigratorTest *TokenMigratorTestFilterer) ParseLogInt(log types.Log) (*TokenMigratorTestLogInt, error) {
	event := new(TokenMigratorTestLogInt)
	if err := _TokenMigratorTest.contract.UnpackLog(event, "log_int", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TokenMigratorTestLogNamedAddressIterator is returned from FilterLogNamedAddress and is used to iterate over the raw logs and unpacked data for LogNamedAddress events raised by the TokenMigratorTest contract.
type TokenMigratorTestLogNamedAddressIterator struct {
	Event *TokenMigratorTestLogNamedAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenMigratorTestLogNamedAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenMigratorTestLogNamedAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenMigratorTestLogNamedAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenMigratorTestLogNamedAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenMigratorTestLogNamedAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenMigratorTestLogNamedAddress represents a LogNamedAddress event raised by the TokenMigratorTest contract.
type TokenMigratorTestLogNamedAddress struct {
	Key string
	Val common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedAddress is a free log retrieval operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_TokenMigratorTest *TokenMigratorTestFilterer) FilterLogNamedAddress(opts *bind.FilterOpts) (*TokenMigratorTestLogNamedAddressIterator, error) {

	logs, sub, err := _TokenMigratorTest.contract.FilterLogs(opts, "log_named_address")
	if err != nil {
		return nil, err
	}
	return &TokenMigratorTestLogNamedAddressIterator{contract: _TokenMigratorTest.contract, event: "log_named_address", logs: logs, sub: sub}, nil
}

// WatchLogNamedAddress is a free log subscription operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_TokenMigratorTest *TokenMigratorTestFilterer) WatchLogNamedAddress(opts *bind.WatchOpts, sink chan<- *TokenMigratorTestLogNamedAddress) (event.Subscription, error) {

	logs, sub, err := _TokenMigratorTest.contract.WatchLogs(opts, "log_named_address")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenMigratorTestLogNamedAddress)
				if err := _TokenMigratorTest.contract.UnpackLog(event, "log_named_address", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedAddress is a log parse operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_TokenMigratorTest *TokenMigratorTestFilterer) ParseLogNamedAddress(log types.Log) (*TokenMigratorTestLogNamedAddress, error) {
	event := new(TokenMigratorTestLogNamedAddress)
	if err := _TokenMigratorTest.contract.UnpackLog(event, "log_named_address", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TokenMigratorTestLogNamedBytesIterator is returned from FilterLogNamedBytes and is used to iterate over the raw logs and unpacked data for LogNamedBytes events raised by the TokenMigratorTest contract.
type TokenMigratorTestLogNamedBytesIterator struct {
	Event *TokenMigratorTestLogNamedBytes // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenMigratorTestLogNamedBytesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenMigratorTestLogNamedBytes)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenMigratorTestLogNamedBytes)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenMigratorTestLogNamedBytesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenMigratorTestLogNamedBytesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenMigratorTestLogNamedBytes represents a LogNamedBytes event raised by the TokenMigratorTest contract.
type TokenMigratorTestLogNamedBytes struct {
	Key string
	Val []byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedBytes is a free log retrieval operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_TokenMigratorTest *TokenMigratorTestFilterer) FilterLogNamedBytes(opts *bind.FilterOpts) (*TokenMigratorTestLogNamedBytesIterator, error) {

	logs, sub, err := _TokenMigratorTest.contract.FilterLogs(opts, "log_named_bytes")
	if err != nil {
		return nil, err
	}
	return &TokenMigratorTestLogNamedBytesIterator{contract: _TokenMigratorTest.contract, event: "log_named_bytes", logs: logs, sub: sub}, nil
}

// WatchLogNamedBytes is a free log subscription operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_TokenMigratorTest *TokenMigratorTestFilterer) WatchLogNamedBytes(opts *bind.WatchOpts, sink chan<- *TokenMigratorTestLogNamedBytes) (event.Subscription, error) {

	logs, sub, err := _TokenMigratorTest.contract.WatchLogs(opts, "log_named_bytes")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenMigratorTestLogNamedBytes)
				if err := _TokenMigratorTest.contract.UnpackLog(event, "log_named_bytes", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedBytes is a log parse operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_TokenMigratorTest *TokenMigratorTestFilterer) ParseLogNamedBytes(log types.Log) (*TokenMigratorTestLogNamedBytes, error) {
	event := new(TokenMigratorTestLogNamedBytes)
	if err := _TokenMigratorTest.contract.UnpackLog(event, "log_named_bytes", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TokenMigratorTestLogNamedBytes32Iterator is returned from FilterLogNamedBytes32 and is used to iterate over the raw logs and unpacked data for LogNamedBytes32 events raised by the TokenMigratorTest contract.
type TokenMigratorTestLogNamedBytes32Iterator struct {
	Event *TokenMigratorTestLogNamedBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenMigratorTestLogNamedBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenMigratorTestLogNamedBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenMigratorTestLogNamedBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenMigratorTestLogNamedBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenMigratorTestLogNamedBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenMigratorTestLogNamedBytes32 represents a LogNamedBytes32 event raised by the TokenMigratorTest contract.
type TokenMigratorTestLogNamedBytes32 struct {
	Key string
	Val [32]byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedBytes32 is a free log retrieval operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_TokenMigratorTest *TokenMigratorTestFilterer) FilterLogNamedBytes32(opts *bind.FilterOpts) (*TokenMigratorTestLogNamedBytes32Iterator, error) {

	logs, sub, err := _TokenMigratorTest.contract.FilterLogs(opts, "log_named_bytes32")
	if err != nil {
		return nil, err
	}
	return &TokenMigratorTestLogNamedBytes32Iterator{contract: _TokenMigratorTest.contract, event: "log_named_bytes32", logs: logs, sub: sub}, nil
}

// WatchLogNamedBytes32 is a free log subscription operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_TokenMigratorTest *TokenMigratorTestFilterer) WatchLogNamedBytes32(opts *bind.WatchOpts, sink chan<- *TokenMigratorTestLogNamedBytes32) (event.Subscription, error) {

	logs, sub, err := _TokenMigratorTest.contract.WatchLogs(opts, "log_named_bytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenMigratorTestLogNamedBytes32)
				if err := _TokenMigratorTest.contract.UnpackLog(event, "log_named_bytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedBytes32 is a log parse operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_TokenMigratorTest *TokenMigratorTestFilterer) ParseLogNamedBytes32(log types.Log) (*TokenMigratorTestLogNamedBytes32, error) {
	event := new(TokenMigratorTestLogNamedBytes32)
	if err := _TokenMigratorTest.contract.UnpackLog(event, "log_named_bytes32", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TokenMigratorTestLogNamedDecimalIntIterator is returned from FilterLogNamedDecimalInt and is used to iterate over the raw logs and unpacked data for LogNamedDecimalInt events raised by the TokenMigratorTest contract.
type TokenMigratorTestLogNamedDecimalIntIterator struct {
	Event *TokenMigratorTestLogNamedDecimalInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenMigratorTestLogNamedDecimalIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenMigratorTestLogNamedDecimalInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenMigratorTestLogNamedDecimalInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenMigratorTestLogNamedDecimalIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenMigratorTestLogNamedDecimalIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenMigratorTestLogNamedDecimalInt represents a LogNamedDecimalInt event raised by the TokenMigratorTest contract.
type TokenMigratorTestLogNamedDecimalInt struct {
	Key      string
	Val      *big.Int
	Decimals *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogNamedDecimalInt is a free log retrieval operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_TokenMigratorTest *TokenMigratorTestFilterer) FilterLogNamedDecimalInt(opts *bind.FilterOpts) (*TokenMigratorTestLogNamedDecimalIntIterator, error) {

	logs, sub, err := _TokenMigratorTest.contract.FilterLogs(opts, "log_named_decimal_int")
	if err != nil {
		return nil, err
	}
	return &TokenMigratorTestLogNamedDecimalIntIterator{contract: _TokenMigratorTest.contract, event: "log_named_decimal_int", logs: logs, sub: sub}, nil
}

// WatchLogNamedDecimalInt is a free log subscription operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_TokenMigratorTest *TokenMigratorTestFilterer) WatchLogNamedDecimalInt(opts *bind.WatchOpts, sink chan<- *TokenMigratorTestLogNamedDecimalInt) (event.Subscription, error) {

	logs, sub, err := _TokenMigratorTest.contract.WatchLogs(opts, "log_named_decimal_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenMigratorTestLogNamedDecimalInt)
				if err := _TokenMigratorTest.contract.UnpackLog(event, "log_named_decimal_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedDecimalInt is a log parse operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_TokenMigratorTest *TokenMigratorTestFilterer) ParseLogNamedDecimalInt(log types.Log) (*TokenMigratorTestLogNamedDecimalInt, error) {
	event := new(TokenMigratorTestLogNamedDecimalInt)
	if err := _TokenMigratorTest.contract.UnpackLog(event, "log_named_decimal_int", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TokenMigratorTestLogNamedDecimalUintIterator is returned from FilterLogNamedDecimalUint and is used to iterate over the raw logs and unpacked data for LogNamedDecimalUint events raised by the TokenMigratorTest contract.
type TokenMigratorTestLogNamedDecimalUintIterator struct {
	Event *TokenMigratorTestLogNamedDecimalUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenMigratorTestLogNamedDecimalUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenMigratorTestLogNamedDecimalUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenMigratorTestLogNamedDecimalUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenMigratorTestLogNamedDecimalUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenMigratorTestLogNamedDecimalUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenMigratorTestLogNamedDecimalUint represents a LogNamedDecimalUint event raised by the TokenMigratorTest contract.
type TokenMigratorTestLogNamedDecimalUint struct {
	Key      string
	Val      *big.Int
	Decimals *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogNamedDecimalUint is a free log retrieval operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_TokenMigratorTest *TokenMigratorTestFilterer) FilterLogNamedDecimalUint(opts *bind.FilterOpts) (*TokenMigratorTestLogNamedDecimalUintIterator, error) {

	logs, sub, err := _TokenMigratorTest.contract.FilterLogs(opts, "log_named_decimal_uint")
	if err != nil {
		return nil, err
	}
	return &TokenMigratorTestLogNamedDecimalUintIterator{contract: _TokenMigratorTest.contract, event: "log_named_decimal_uint", logs: logs, sub: sub}, nil
}

// WatchLogNamedDecimalUint is a free log subscription operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_TokenMigratorTest *TokenMigratorTestFilterer) WatchLogNamedDecimalUint(opts *bind.WatchOpts, sink chan<- *TokenMigratorTestLogNamedDecimalUint) (event.Subscription, error) {

	logs, sub, err := _TokenMigratorTest.contract.WatchLogs(opts, "log_named_decimal_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenMigratorTestLogNamedDecimalUint)
				if err := _TokenMigratorTest.contract.UnpackLog(event, "log_named_decimal_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedDecimalUint is a log parse operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_TokenMigratorTest *TokenMigratorTestFilterer) ParseLogNamedDecimalUint(log types.Log) (*TokenMigratorTestLogNamedDecimalUint, error) {
	event := new(TokenMigratorTestLogNamedDecimalUint)
	if err := _TokenMigratorTest.contract.UnpackLog(event, "log_named_decimal_uint", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TokenMigratorTestLogNamedIntIterator is returned from FilterLogNamedInt and is used to iterate over the raw logs and unpacked data for LogNamedInt events raised by the TokenMigratorTest contract.
type TokenMigratorTestLogNamedIntIterator struct {
	Event *TokenMigratorTestLogNamedInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenMigratorTestLogNamedIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenMigratorTestLogNamedInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenMigratorTestLogNamedInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenMigratorTestLogNamedIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenMigratorTestLogNamedIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenMigratorTestLogNamedInt represents a LogNamedInt event raised by the TokenMigratorTest contract.
type TokenMigratorTestLogNamedInt struct {
	Key string
	Val *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedInt is a free log retrieval operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_TokenMigratorTest *TokenMigratorTestFilterer) FilterLogNamedInt(opts *bind.FilterOpts) (*TokenMigratorTestLogNamedIntIterator, error) {

	logs, sub, err := _TokenMigratorTest.contract.FilterLogs(opts, "log_named_int")
	if err != nil {
		return nil, err
	}
	return &TokenMigratorTestLogNamedIntIterator{contract: _TokenMigratorTest.contract, event: "log_named_int", logs: logs, sub: sub}, nil
}

// WatchLogNamedInt is a free log subscription operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_TokenMigratorTest *TokenMigratorTestFilterer) WatchLogNamedInt(opts *bind.WatchOpts, sink chan<- *TokenMigratorTestLogNamedInt) (event.Subscription, error) {

	logs, sub, err := _TokenMigratorTest.contract.WatchLogs(opts, "log_named_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenMigratorTestLogNamedInt)
				if err := _TokenMigratorTest.contract.UnpackLog(event, "log_named_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedInt is a log parse operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_TokenMigratorTest *TokenMigratorTestFilterer) ParseLogNamedInt(log types.Log) (*TokenMigratorTestLogNamedInt, error) {
	event := new(TokenMigratorTestLogNamedInt)
	if err := _TokenMigratorTest.contract.UnpackLog(event, "log_named_int", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TokenMigratorTestLogNamedStringIterator is returned from FilterLogNamedString and is used to iterate over the raw logs and unpacked data for LogNamedString events raised by the TokenMigratorTest contract.
type TokenMigratorTestLogNamedStringIterator struct {
	Event *TokenMigratorTestLogNamedString // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenMigratorTestLogNamedStringIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenMigratorTestLogNamedString)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenMigratorTestLogNamedString)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenMigratorTestLogNamedStringIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenMigratorTestLogNamedStringIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenMigratorTestLogNamedString represents a LogNamedString event raised by the TokenMigratorTest contract.
type TokenMigratorTestLogNamedString struct {
	Key string
	Val string
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedString is a free log retrieval operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_TokenMigratorTest *TokenMigratorTestFilterer) FilterLogNamedString(opts *bind.FilterOpts) (*TokenMigratorTestLogNamedStringIterator, error) {

	logs, sub, err := _TokenMigratorTest.contract.FilterLogs(opts, "log_named_string")
	if err != nil {
		return nil, err
	}
	return &TokenMigratorTestLogNamedStringIterator{contract: _TokenMigratorTest.contract, event: "log_named_string", logs: logs, sub: sub}, nil
}

// WatchLogNamedString is a free log subscription operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_TokenMigratorTest *TokenMigratorTestFilterer) WatchLogNamedString(opts *bind.WatchOpts, sink chan<- *TokenMigratorTestLogNamedString) (event.Subscription, error) {

	logs, sub, err := _TokenMigratorTest.contract.WatchLogs(opts, "log_named_string")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenMigratorTestLogNamedString)
				if err := _TokenMigratorTest.contract.UnpackLog(event, "log_named_string", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedString is a log parse operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_TokenMigratorTest *TokenMigratorTestFilterer) ParseLogNamedString(log types.Log) (*TokenMigratorTestLogNamedString, error) {
	event := new(TokenMigratorTestLogNamedString)
	if err := _TokenMigratorTest.contract.UnpackLog(event, "log_named_string", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TokenMigratorTestLogNamedUintIterator is returned from FilterLogNamedUint and is used to iterate over the raw logs and unpacked data for LogNamedUint events raised by the TokenMigratorTest contract.
type TokenMigratorTestLogNamedUintIterator struct {
	Event *TokenMigratorTestLogNamedUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenMigratorTestLogNamedUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenMigratorTestLogNamedUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenMigratorTestLogNamedUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenMigratorTestLogNamedUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenMigratorTestLogNamedUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenMigratorTestLogNamedUint represents a LogNamedUint event raised by the TokenMigratorTest contract.
type TokenMigratorTestLogNamedUint struct {
	Key string
	Val *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedUint is a free log retrieval operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_TokenMigratorTest *TokenMigratorTestFilterer) FilterLogNamedUint(opts *bind.FilterOpts) (*TokenMigratorTestLogNamedUintIterator, error) {

	logs, sub, err := _TokenMigratorTest.contract.FilterLogs(opts, "log_named_uint")
	if err != nil {
		return nil, err
	}
	return &TokenMigratorTestLogNamedUintIterator{contract: _TokenMigratorTest.contract, event: "log_named_uint", logs: logs, sub: sub}, nil
}

// WatchLogNamedUint is a free log subscription operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_TokenMigratorTest *TokenMigratorTestFilterer) WatchLogNamedUint(opts *bind.WatchOpts, sink chan<- *TokenMigratorTestLogNamedUint) (event.Subscription, error) {

	logs, sub, err := _TokenMigratorTest.contract.WatchLogs(opts, "log_named_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenMigratorTestLogNamedUint)
				if err := _TokenMigratorTest.contract.UnpackLog(event, "log_named_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedUint is a log parse operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_TokenMigratorTest *TokenMigratorTestFilterer) ParseLogNamedUint(log types.Log) (*TokenMigratorTestLogNamedUint, error) {
	event := new(TokenMigratorTestLogNamedUint)
	if err := _TokenMigratorTest.contract.UnpackLog(event, "log_named_uint", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TokenMigratorTestLogStringIterator is returned from FilterLogString and is used to iterate over the raw logs and unpacked data for LogString events raised by the TokenMigratorTest contract.
type TokenMigratorTestLogStringIterator struct {
	Event *TokenMigratorTestLogString // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenMigratorTestLogStringIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenMigratorTestLogString)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenMigratorTestLogString)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenMigratorTestLogStringIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenMigratorTestLogStringIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenMigratorTestLogString represents a LogString event raised by the TokenMigratorTest contract.
type TokenMigratorTestLogString struct {
	Arg0 string
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogString is a free log retrieval operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_TokenMigratorTest *TokenMigratorTestFilterer) FilterLogString(opts *bind.FilterOpts) (*TokenMigratorTestLogStringIterator, error) {

	logs, sub, err := _TokenMigratorTest.contract.FilterLogs(opts, "log_string")
	if err != nil {
		return nil, err
	}
	return &TokenMigratorTestLogStringIterator{contract: _TokenMigratorTest.contract, event: "log_string", logs: logs, sub: sub}, nil
}

// WatchLogString is a free log subscription operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_TokenMigratorTest *TokenMigratorTestFilterer) WatchLogString(opts *bind.WatchOpts, sink chan<- *TokenMigratorTestLogString) (event.Subscription, error) {

	logs, sub, err := _TokenMigratorTest.contract.WatchLogs(opts, "log_string")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenMigratorTestLogString)
				if err := _TokenMigratorTest.contract.UnpackLog(event, "log_string", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogString is a log parse operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_TokenMigratorTest *TokenMigratorTestFilterer) ParseLogString(log types.Log) (*TokenMigratorTestLogString, error) {
	event := new(TokenMigratorTestLogString)
	if err := _TokenMigratorTest.contract.UnpackLog(event, "log_string", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TokenMigratorTestLogUintIterator is returned from FilterLogUint and is used to iterate over the raw logs and unpacked data for LogUint events raised by the TokenMigratorTest contract.
type TokenMigratorTestLogUintIterator struct {
	Event *TokenMigratorTestLogUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenMigratorTestLogUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenMigratorTestLogUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenMigratorTestLogUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenMigratorTestLogUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenMigratorTestLogUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenMigratorTestLogUint represents a LogUint event raised by the TokenMigratorTest contract.
type TokenMigratorTestLogUint struct {
	Arg0 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogUint is a free log retrieval operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_TokenMigratorTest *TokenMigratorTestFilterer) FilterLogUint(opts *bind.FilterOpts) (*TokenMigratorTestLogUintIterator, error) {

	logs, sub, err := _TokenMigratorTest.contract.FilterLogs(opts, "log_uint")
	if err != nil {
		return nil, err
	}
	return &TokenMigratorTestLogUintIterator{contract: _TokenMigratorTest.contract, event: "log_uint", logs: logs, sub: sub}, nil
}

// WatchLogUint is a free log subscription operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_TokenMigratorTest *TokenMigratorTestFilterer) WatchLogUint(opts *bind.WatchOpts, sink chan<- *TokenMigratorTestLogUint) (event.Subscription, error) {

	logs, sub, err := _TokenMigratorTest.contract.WatchLogs(opts, "log_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenMigratorTestLogUint)
				if err := _TokenMigratorTest.contract.UnpackLog(event, "log_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogUint is a log parse operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_TokenMigratorTest *TokenMigratorTestFilterer) ParseLogUint(log types.Log) (*TokenMigratorTestLogUint, error) {
	event := new(TokenMigratorTestLogUint)
	if err := _TokenMigratorTest.contract.UnpackLog(event, "log_uint", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TokenMigratorTestLogsIterator is returned from FilterLogs and is used to iterate over the raw logs and unpacked data for Logs events raised by the TokenMigratorTest contract.
type TokenMigratorTestLogsIterator struct {
	Event *TokenMigratorTestLogs // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenMigratorTestLogsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenMigratorTestLogs)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenMigratorTestLogs)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenMigratorTestLogsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenMigratorTestLogsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenMigratorTestLogs represents a Logs event raised by the TokenMigratorTest contract.
type TokenMigratorTestLogs struct {
	Arg0 []byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogs is a free log retrieval operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_TokenMigratorTest *TokenMigratorTestFilterer) FilterLogs(opts *bind.FilterOpts) (*TokenMigratorTestLogsIterator, error) {

	logs, sub, err := _TokenMigratorTest.contract.FilterLogs(opts, "logs")
	if err != nil {
		return nil, err
	}
	return &TokenMigratorTestLogsIterator{contract: _TokenMigratorTest.contract, event: "logs", logs: logs, sub: sub}, nil
}

// WatchLogs is a free log subscription operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_TokenMigratorTest *TokenMigratorTestFilterer) WatchLogs(opts *bind.WatchOpts, sink chan<- *TokenMigratorTestLogs) (event.Subscription, error) {

	logs, sub, err := _TokenMigratorTest.contract.WatchLogs(opts, "logs")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenMigratorTestLogs)
				if err := _TokenMigratorTest.contract.UnpackLog(event, "logs", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogs is a log parse operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_TokenMigratorTest *TokenMigratorTestFilterer) ParseLogs(log types.Log) (*TokenMigratorTestLogs, error) {
	event := new(TokenMigratorTestLogs)
	if err := _TokenMigratorTest.contract.UnpackLog(event, "logs", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TokenTestABI is the input ABI used to generate the binding from.
const TokenTestABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"log_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"log_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"log_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"name\":\"log_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"log_named_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\"}],\"name\":\"log_named_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\"}],\"name\":\"log_named_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"}],\"name\":\"log_named_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"}],\"name\":\"log_named_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"log_named_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"log_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"logs\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testInitialization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// TokenTestBin is the compiled bytecode used for deploying new contracts.
var TokenTestBin = "0x608060405260016000806101000a81548160ff02191690831515021790555034801561002a57600080fd5b506144168061003a6000396000f3fe60806040523480156200001157600080fd5b5060043610620000525760003560e01c80630a9254e41462000057578063a109f39a1462000063578063ba414fa6146200006f578063fa7626d41462000091575b600080fd5b62000061620000b3565b005b6200006d62000233565b005b62000079620006e3565b60405180821515815260200191505060405180910390f35b6200009b620006f6565b60405180821515815260200191505060405180910390f35b604051620000c190620007a0565b80807f55544c0000000000000000000000000000000000000000000000000000000000815250602001807f4d61644e6574205574696c6974790000000000000000000000000000000000008152506020019050604051809103906000f08015801562000131573d6000803e3d6000fd5b50600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040516200018090620007a0565b80807f53544b0000000000000000000000000000000000000000000000000000000000815250602001807f4d61644e6574205374616b696e670000000000000000000000000000000000008152506020019050604051809103906000f080158015620001f0573d6000803e3d6000fd5b50600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b620003057f55544c0000000000000000000000000000000000000000000000000000000000600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b815260040160206040518083038186803b158015620002c157600080fd5b505afa158015620002d6573d6000803e3d6000fd5b505050506040513d6020811015620002ed57600080fd5b81019080805190602001909291905050501462000707565b620003d77f4d61644e6574205574696c697479000000000000000000000000000000000000600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b815260040160206040518083038186803b1580156200039357600080fd5b505afa158015620003a8573d6000803e3d6000fd5b505050506040513d6020811015620003bf57600080fd5b81019080805190602001909291905050501462000707565b6200048a6012600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156200044657600080fd5b505afa1580156200045b573d6000803e3d6000fd5b505050506040513d60208110156200047257600080fd5b81019080805190602001909291905050501462000707565b6200055c7f53544b0000000000000000000000000000000000000000000000000000000000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b815260040160206040518083038186803b1580156200051857600080fd5b505afa1580156200052d573d6000803e3d6000fd5b505050506040513d60208110156200054457600080fd5b81019080805190602001909291905050501462000707565b6200062e7f4d61644e6574205374616b696e67000000000000000000000000000000000000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b815260040160206040518083038186803b158015620005ea57600080fd5b505afa158015620005ff573d6000803e3d6000fd5b505050506040513d60208110156200061657600080fd5b81019080805190602001909291905050501462000707565b620006e16012600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156200069d57600080fd5b505afa158015620006b2573d6000803e3d6000fd5b505050506040513d6020811015620006c957600080fd5b81019080805190602001909291905050501462000707565b565b600060019054906101000a900460ff1681565b60008054906101000a900460ff1681565b8062000780577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040518080602001828103825260178152602001807f4572726f723a20417373657274696f6e204661696c656400000000000000000081525060200191505060405180910390a16200077f62000783565b5b50565b6001600060016101000a81548160ff021916908315150217905550565b613c3280620007af8339019056fe6080604052601260065560006007556040516200001c9062000c11565b604051809103906000f08015801562000039573d6000803e3d6000fd5b50600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503480156200008757600080fd5b5060405162003c3238038062003c3283398181016040526040811015620000ad57600080fd5b8101908080519060200190929190805190602001909291905050508133600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9460405160405180910390a2806005819055505033600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620001c9600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16620002d760201b60201c565b620001fc600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166200049260201b60201c565b80600781905550600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e348da13336040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156200028f57600080fd5b505af1158015620002a4573d6000803e3d6000fd5b505050506012600681905550620002cf336c0c9f2c9cd04674edea40000000620005e160201b60201c565b505062000c1f565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806200037d5750600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b620003d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603181526020018062003c016031913960400191505060405180910390fd5b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e348da13826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156200046057600080fd5b505af115801562000475573d6000803e3d6000fd5b505050506200048f816200080e60201b620020d71760201c565b50565b620004c8336000357fffffffff00000000000000000000000000000000000000000000000000000000166200097860201b60201c565b6200053b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f64732d617574682d756e617574686f72697a656400000000000000000000000081525060200191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada460405160405180910390a250565b62000617336000357fffffffff00000000000000000000000000000000000000000000000000000000166200097860201b60201c565b6200068a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f64732d617574682d756e617574686f72697a656400000000000000000000000081525060200191505060405180910390fd5b600160149054906101000a900460ff16156200070e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f64732d73746f702d69732d73746f70706564000000000000000000000000000081525060200191505060405180910390fd5b6200075f600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548262000b8d60201b60201c565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550620007b66002548262000b8d60201b60201c565b6002819055508173ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885826040518082815260200191505060405180910390a25050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480620008b45750600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6200090b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603181526020018062003c016031913960400191505060405180910390fd5b6001600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060096000815480929190600101919050555050565b60003073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415620009b9576001905062000b87565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141562000a1a576001905062000b87565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141562000a7a576000905062000b87565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b70096138430856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff168152602001827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001935050505060206040518083038186803b15801562000b4757600080fd5b505afa15801562000b5c573d6000803e3d6000fd5b505050506040513d602081101562000b7357600080fd5b810190808051906020019092919050505090505b92915050565b600082828401915081101562000c0b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f64732d6d6174682d6164642d6f766572666c6f7700000000000000000000000081525060200191505060405180910390fd5b92915050565b61084480620033bd83390190565b61278e8062000c2f6000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c80638da5cb5b116100f9578063be9a655511610097578063dd62ed3e11610071578063dd62ed3e1461072a578063e348da13146107a2578063f2d5d56b146107e6578063fad8b32a14610834576101a9565b8063be9a655514610692578063bf7e214f1461069c578063daea85c5146106d0576101a9565b8063a0712d68116100d3578063a0712d6814610544578063a9059cbb14610572578063b753a98c146105d6578063bb35783b14610624576101a9565b80638da5cb5b146104a457806395d89b41146104d85780639dc29fac146104f6576101a9565b8063313ce567116101665780635ac801fe116101405780635ac801fe146103ba57806370a08231146103e857806375f12b21146104405780637a9e5e4b14610460576101a9565b8063313ce5671461032057806340c10f191461033e57806342966c681461038c576101a9565b806306fdde03146101ae57806307da68f5146101cc578063095ea7b3146101d657806313af40351461023a57806318160ddd1461027e57806323b872dd1461029c575b600080fd5b6101b6610878565b6040518082815260200191505060405180910390f35b6101d461087e565b005b610222600480360360408110156101ec57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610966565b60405180821515815260200191505060405180910390f35b61027c6004803603602081101561025057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610adb565b005b610286610c24565b6040518082815260200191505060405180910390f35b610308600480360360608110156102b257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c2a565b60405180821515815260200191505060405180910390f35b6103286111c2565b6040518082815260200191505060405180910390f35b61038a6004803603604081101561035457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506111c8565b005b6103b8600480360360208110156103a257600080fd5b81019080803590602001909291905050506113db565b005b6103e6600480360360208110156103d057600080fd5b81019080803590602001909291905050506113e8565b005b61042a600480360360208110156103fe57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611492565b6040518082815260200191505060405180910390f35b6104486114aa565b60405180821515815260200191505060405180910390f35b6104a26004803603602081101561047657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114bd565b005b6104ac611603565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6104e0611629565b6040518082815260200191505060405180910390f35b6105426004803603604081101561050c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061162f565b005b6105706004803603602081101561055a57600080fd5b8101908080359060200190929190505050611bcd565b005b6105be6004803603604081101561058857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611bda565b60405180821515815260200191505060405180910390f35b610622600480360360408110156105ec57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611bef565b005b6106906004803603606081101561063a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611bff565b005b61069a611c10565b005b6106a4611cf9565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610712600480360360208110156106e657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d1d565b60405180821515815260200191505060405180910390f35b61078c6004803603604081101561074057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d50565b6040518082815260200191505060405180910390f35b6107e4600480360360208110156107b857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d75565b005b610832600480360360408110156107fc57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611f1e565b005b6108766004803603602081101561084a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611f2e565b005b60075481565b6108ac336000357fffffffff000000000000000000000000000000000000000000000000000000001661223e565b61091e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f64732d617574682d756e617574686f72697a656400000000000000000000000081525060200191505060405180910390fd5b60018060146101000a81548160ff0219169083151502179055507fbedf0f4abfe86d4ffad593d9607fe70e83ea706033d44d24b3b6283cf3fc4f6b60405160405180910390a1565b6000600160149054906101000a900460ff16156109eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f64732d73746f702d69732d73746f70706564000000000000000000000000000081525060200191505060405180910390fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b610b09336000357fffffffff000000000000000000000000000000000000000000000000000000001661223e565b610b7b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f64732d617574682d756e617574686f72697a656400000000000000000000000081525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9460405160405180910390a250565b60025481565b6000600160149054906101000a900460ff1615610caf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f64732d73746f702d69732d73746f70706564000000000000000000000000000081525060200191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614158015610d8757507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b15610f855781600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610e7e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f64732d746f6b656e2d696e73756666696369656e742d617070726f76616c000081525060200191505060405180910390fd5b610f04600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548361244a565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b81600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561103a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f64732d746f6b656e2d696e73756666696369656e742d62616c616e636500000081525060200191505060405180910390fd5b611083600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548361244a565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061110f600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836124cd565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60065481565b6111f6336000357fffffffff000000000000000000000000000000000000000000000000000000001661223e565b611268576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f64732d617574682d756e617574686f72697a656400000000000000000000000081525060200191505060405180910390fd5b600160149054906101000a900460ff16156112eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f64732d73746f702d69732d73746f70706564000000000000000000000000000081525060200191505060405180910390fd5b611334600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054826124cd565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611383600254826124cd565b6002819055508173ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885826040518082815260200191505060405180910390a25050565b6113e5338261162f565b50565b611416336000357fffffffff000000000000000000000000000000000000000000000000000000001661223e565b611488576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f64732d617574682d756e617574686f72697a656400000000000000000000000081525060200191505060405180910390fd5b8060078190555050565b60036020528060005260406000206000915090505481565b600160149054906101000a900460ff1681565b6114eb336000357fffffffff000000000000000000000000000000000000000000000000000000001661223e565b61155d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f64732d617574682d756e617574686f72697a656400000000000000000000000081525060200191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada460405160405180910390a250565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b61165d336000357fffffffff000000000000000000000000000000000000000000000000000000001661223e565b6116cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f64732d617574682d756e617574686f72697a656400000000000000000000000081525060200191505060405180910390fd5b600160149054906101000a900460ff1615611752576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f64732d73746f702d69732d73746f70706564000000000000000000000000000081525060200191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415801561182a57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b15611a285780600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611921576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f64732d746f6b656e2d696e73756666696369656e742d617070726f76616c000081525060200191505060405180910390fd5b6119a7600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548261244a565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611add576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f64732d746f6b656e2d696e73756666696369656e742d62616c616e636500000081525060200191505060405180910390fd5b611b26600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548261244a565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611b756002548261244a565b6002819055508173ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5826040518082815260200191505060405180910390a25050565b611bd733826111c8565b50565b6000611be7338484610c2a565b905092915050565b611bfa338383610c2a565b505050565b611c0a838383610c2a565b50505050565b611c3e336000357fffffffff000000000000000000000000000000000000000000000000000000001661223e565b611cb0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f64732d617574682d756e617574686f72697a656400000000000000000000000081525060200191505060405180910390fd5b6000600160146101000a81548160ff0219169083151502179055507f1b55ba3aa851a46be3b365aee5b5c140edd620d578922f3e8466d2cbd96f954b60405160405180910390a1565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000611d49827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610966565b9050919050565b6004602052816000526040600020602052806000526040600020600091509150505481565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611e1a5750600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b611e6f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806127286031913960400191505060405180910390fd5b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e348da13826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015611efa57600080fd5b505af1158015611f0e573d6000803e3d6000fd5b50505050611f1b816120d7565b50565b611f29823383610c2a565b505050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611fd35750600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b612028576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806127286031913960400191505060405180910390fd5b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fad8b32a826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156120b357600080fd5b505af11580156120c7573d6000803e3d6000fd5b505050506120d481612550565b50565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061217c5750600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6121d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806127286031913960400191505060405180910390fd5b6001600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060096000815480929190600101919050555050565b60003073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561227d5760019050612444565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156122dc5760019050612444565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561233a5760009050612444565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b70096138430856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff168152602001827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001935050505060206040518083038186803b15801561240657600080fd5b505afa15801561241a573d6000803e3d6000fd5b505050506040513d602081101561243057600080fd5b810190808051906020019092919050505090505b92915050565b60008282840391508111156124c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f64732d6d6174682d7375622d756e646572666c6f77000000000000000000000081525060200191505060405180910390fd5b92915050565b600082828401915081101561254a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f64732d6d6174682d6164642d6f766572666c6f7700000000000000000000000081525060200191505060405180910390fd5b92915050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806125f55750600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b61264a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806127286031913960400191505060405180910390fd5b6001600954116126c2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f43616e27742072656d6f766520616c6c206f70657261746f727300000000000081525060200191505060405180910390fd5b600860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff0219169055600960008154809291906001900391905055505056fe46756e6374696f6e616c697479207265737472696374656420746f20617574686f72697a6564206f70657261746f72732ea26469706673582212204d6bd2b8e5ae0d9da7f17a68e345fdff82d3fde0f999a43b0baae6c8c4b3f05b64736f6c63430007060033608060405234801561001057600080fd5b5033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610083600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661008860201b60201c565b6101ed565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061012c57506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610181576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806108136031913960400191505060405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060016000815480929190600101919050555050565b610617806101fc6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063b700961314610046578063e348da13146100e9578063fad8b32a1461012d575b600080fd5b6100d16004803603606081101561005c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610171565b60405180821515815260200191505060405180910390f35b61012b600480360360208110156100ff57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610277565b005b61016f6004803603602081101561014357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506103dc565b005b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061021757506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b61026c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806105b16031913960400191505060405180910390fd5b600190509392505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061031b57506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610370576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806105b16031913960400191505060405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060016000815480929190600101919050555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061048057506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6104d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806105b16031913960400191505060405180910390fd5b600180541161054c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f43616e27742072656d6f766520616c6c206f70657261746f727300000000000081525060200191505060405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff0219169055600160008154809291906001900391905055505056fe46756e6374696f6e616c697479207265737472696374656420746f20617574686f72697a6564206f70657261746f72732ea26469706673582212205a02f02855af5fe5abc7a36966a40113393b2b5e98542418a5a8e3f004b0021464736f6c6343000706003346756e6374696f6e616c697479207265737472696374656420746f20617574686f72697a6564206f70657261746f72732e46756e6374696f6e616c697479207265737472696374656420746f20617574686f72697a6564206f70657261746f72732ea26469706673582212202d5168753dc940aaadba4d1660451991f4ac25b6c226dfdaa5ad03437f7d19e264736f6c63430007060033"

// DeployTokenTest deploys a new Ethereum contract, binding an instance of TokenTest to it.
func DeployTokenTest(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TokenTest, error) {
	parsed, err := abi.JSON(strings.NewReader(TokenTestABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(TokenTestBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TokenTest{TokenTestCaller: TokenTestCaller{contract: contract}, TokenTestTransactor: TokenTestTransactor{contract: contract}, TokenTestFilterer: TokenTestFilterer{contract: contract}}, nil
}

// TokenTest is an auto generated Go binding around an Ethereum contract.
type TokenTest struct {
	TokenTestCaller     // Read-only binding to the contract
	TokenTestTransactor // Write-only binding to the contract
	TokenTestFilterer   // Log filterer for contract events
}

// TokenTestCaller is an auto generated read-only Go binding around an Ethereum contract.
type TokenTestCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenTestTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TokenTestTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenTestFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TokenTestFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenTestSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TokenTestSession struct {
	Contract     *TokenTest        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TokenTestCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TokenTestCallerSession struct {
	Contract *TokenTestCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// TokenTestTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TokenTestTransactorSession struct {
	Contract     *TokenTestTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// TokenTestRaw is an auto generated low-level Go binding around an Ethereum contract.
type TokenTestRaw struct {
	Contract *TokenTest // Generic contract binding to access the raw methods on
}

// TokenTestCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TokenTestCallerRaw struct {
	Contract *TokenTestCaller // Generic read-only contract binding to access the raw methods on
}

// TokenTestTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TokenTestTransactorRaw struct {
	Contract *TokenTestTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTokenTest creates a new instance of TokenTest, bound to a specific deployed contract.
func NewTokenTest(address common.Address, backend bind.ContractBackend) (*TokenTest, error) {
	contract, err := bindTokenTest(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TokenTest{TokenTestCaller: TokenTestCaller{contract: contract}, TokenTestTransactor: TokenTestTransactor{contract: contract}, TokenTestFilterer: TokenTestFilterer{contract: contract}}, nil
}

// NewTokenTestCaller creates a new read-only instance of TokenTest, bound to a specific deployed contract.
func NewTokenTestCaller(address common.Address, caller bind.ContractCaller) (*TokenTestCaller, error) {
	contract, err := bindTokenTest(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TokenTestCaller{contract: contract}, nil
}

// NewTokenTestTransactor creates a new write-only instance of TokenTest, bound to a specific deployed contract.
func NewTokenTestTransactor(address common.Address, transactor bind.ContractTransactor) (*TokenTestTransactor, error) {
	contract, err := bindTokenTest(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TokenTestTransactor{contract: contract}, nil
}

// NewTokenTestFilterer creates a new log filterer instance of TokenTest, bound to a specific deployed contract.
func NewTokenTestFilterer(address common.Address, filterer bind.ContractFilterer) (*TokenTestFilterer, error) {
	contract, err := bindTokenTest(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TokenTestFilterer{contract: contract}, nil
}

// bindTokenTest binds a generic wrapper to an already deployed contract.
func bindTokenTest(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TokenTestABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TokenTest *TokenTestRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _TokenTest.Contract.TokenTestCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TokenTest *TokenTestRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenTest.Contract.TokenTestTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TokenTest *TokenTestRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TokenTest.Contract.TokenTestTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TokenTest *TokenTestCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _TokenTest.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TokenTest *TokenTestTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenTest.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TokenTest *TokenTestTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TokenTest.Contract.contract.Transact(opts, method, params...)
}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_TokenTest *TokenTestCaller) ISTEST(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _TokenTest.contract.Call(opts, out, "IS_TEST")
	return *ret0, err
}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_TokenTest *TokenTestSession) ISTEST() (bool, error) {
	return _TokenTest.Contract.ISTEST(&_TokenTest.CallOpts)
}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_TokenTest *TokenTestCallerSession) ISTEST() (bool, error) {
	return _TokenTest.Contract.ISTEST(&_TokenTest.CallOpts)
}

// Failed is a free data retrieval call binding the contract method 0xba414fa6.
//
// Solidity: function failed() view returns(bool)
func (_TokenTest *TokenTestCaller) Failed(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _TokenTest.contract.Call(opts, out, "failed")
	return *ret0, err
}

// Failed is a free data retrieval call binding the contract method 0xba414fa6.
//
// Solidity: function failed() view returns(bool)
func (_TokenTest *TokenTestSession) Failed() (bool, error) {
	return _TokenTest.Contract.Failed(&_TokenTest.CallOpts)
}

// Failed is a free data retrieval call binding the contract method 0xba414fa6.
//
// Solidity: function failed() view returns(bool)
func (_TokenTest *TokenTestCallerSession) Failed() (bool, error) {
	return _TokenTest.Contract.Failed(&_TokenTest.CallOpts)
}

// SetUp is a paid mutator transaction binding the contract method 0x0a9254e4.
//
// Solidity: function setUp() returns()
func (_TokenTest *TokenTestTransactor) SetUp(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenTest.contract.Transact(opts, "setUp")
}

// SetUp is a paid mutator transaction binding the contract method 0x0a9254e4.
//
// Solidity: function setUp() returns()
func (_TokenTest *TokenTestSession) SetUp() (*types.Transaction, error) {
	return _TokenTest.Contract.SetUp(&_TokenTest.TransactOpts)
}

// SetUp is a paid mutator transaction binding the contract method 0x0a9254e4.
//
// Solidity: function setUp() returns()
func (_TokenTest *TokenTestTransactorSession) SetUp() (*types.Transaction, error) {
	return _TokenTest.Contract.SetUp(&_TokenTest.TransactOpts)
}

// TestInitialization is a paid mutator transaction binding the contract method 0xa109f39a.
//
// Solidity: function testInitialization() returns()
func (_TokenTest *TokenTestTransactor) TestInitialization(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenTest.contract.Transact(opts, "testInitialization")
}

// TestInitialization is a paid mutator transaction binding the contract method 0xa109f39a.
//
// Solidity: function testInitialization() returns()
func (_TokenTest *TokenTestSession) TestInitialization() (*types.Transaction, error) {
	return _TokenTest.Contract.TestInitialization(&_TokenTest.TransactOpts)
}

// TestInitialization is a paid mutator transaction binding the contract method 0xa109f39a.
//
// Solidity: function testInitialization() returns()
func (_TokenTest *TokenTestTransactorSession) TestInitialization() (*types.Transaction, error) {
	return _TokenTest.Contract.TestInitialization(&_TokenTest.TransactOpts)
}

// TokenTestLogIterator is returned from FilterLog and is used to iterate over the raw logs and unpacked data for Log events raised by the TokenTest contract.
type TokenTestLogIterator struct {
	Event *TokenTestLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenTestLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenTestLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenTestLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenTestLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenTestLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenTestLog represents a Log event raised by the TokenTest contract.
type TokenTestLog struct {
	Arg0 string
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLog is a free log retrieval operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_TokenTest *TokenTestFilterer) FilterLog(opts *bind.FilterOpts) (*TokenTestLogIterator, error) {

	logs, sub, err := _TokenTest.contract.FilterLogs(opts, "log")
	if err != nil {
		return nil, err
	}
	return &TokenTestLogIterator{contract: _TokenTest.contract, event: "log", logs: logs, sub: sub}, nil
}

// WatchLog is a free log subscription operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_TokenTest *TokenTestFilterer) WatchLog(opts *bind.WatchOpts, sink chan<- *TokenTestLog) (event.Subscription, error) {

	logs, sub, err := _TokenTest.contract.WatchLogs(opts, "log")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenTestLog)
				if err := _TokenTest.contract.UnpackLog(event, "log", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLog is a log parse operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_TokenTest *TokenTestFilterer) ParseLog(log types.Log) (*TokenTestLog, error) {
	event := new(TokenTestLog)
	if err := _TokenTest.contract.UnpackLog(event, "log", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TokenTestLogAddressIterator is returned from FilterLogAddress and is used to iterate over the raw logs and unpacked data for LogAddress events raised by the TokenTest contract.
type TokenTestLogAddressIterator struct {
	Event *TokenTestLogAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenTestLogAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenTestLogAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenTestLogAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenTestLogAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenTestLogAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenTestLogAddress represents a LogAddress event raised by the TokenTest contract.
type TokenTestLogAddress struct {
	Arg0 common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogAddress is a free log retrieval operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_TokenTest *TokenTestFilterer) FilterLogAddress(opts *bind.FilterOpts) (*TokenTestLogAddressIterator, error) {

	logs, sub, err := _TokenTest.contract.FilterLogs(opts, "log_address")
	if err != nil {
		return nil, err
	}
	return &TokenTestLogAddressIterator{contract: _TokenTest.contract, event: "log_address", logs: logs, sub: sub}, nil
}

// WatchLogAddress is a free log subscription operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_TokenTest *TokenTestFilterer) WatchLogAddress(opts *bind.WatchOpts, sink chan<- *TokenTestLogAddress) (event.Subscription, error) {

	logs, sub, err := _TokenTest.contract.WatchLogs(opts, "log_address")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenTestLogAddress)
				if err := _TokenTest.contract.UnpackLog(event, "log_address", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogAddress is a log parse operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_TokenTest *TokenTestFilterer) ParseLogAddress(log types.Log) (*TokenTestLogAddress, error) {
	event := new(TokenTestLogAddress)
	if err := _TokenTest.contract.UnpackLog(event, "log_address", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TokenTestLogBytesIterator is returned from FilterLogBytes and is used to iterate over the raw logs and unpacked data for LogBytes events raised by the TokenTest contract.
type TokenTestLogBytesIterator struct {
	Event *TokenTestLogBytes // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenTestLogBytesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenTestLogBytes)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenTestLogBytes)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenTestLogBytesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenTestLogBytesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenTestLogBytes represents a LogBytes event raised by the TokenTest contract.
type TokenTestLogBytes struct {
	Arg0 []byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogBytes is a free log retrieval operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_TokenTest *TokenTestFilterer) FilterLogBytes(opts *bind.FilterOpts) (*TokenTestLogBytesIterator, error) {

	logs, sub, err := _TokenTest.contract.FilterLogs(opts, "log_bytes")
	if err != nil {
		return nil, err
	}
	return &TokenTestLogBytesIterator{contract: _TokenTest.contract, event: "log_bytes", logs: logs, sub: sub}, nil
}

// WatchLogBytes is a free log subscription operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_TokenTest *TokenTestFilterer) WatchLogBytes(opts *bind.WatchOpts, sink chan<- *TokenTestLogBytes) (event.Subscription, error) {

	logs, sub, err := _TokenTest.contract.WatchLogs(opts, "log_bytes")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenTestLogBytes)
				if err := _TokenTest.contract.UnpackLog(event, "log_bytes", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes is a log parse operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_TokenTest *TokenTestFilterer) ParseLogBytes(log types.Log) (*TokenTestLogBytes, error) {
	event := new(TokenTestLogBytes)
	if err := _TokenTest.contract.UnpackLog(event, "log_bytes", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TokenTestLogBytes32Iterator is returned from FilterLogBytes32 and is used to iterate over the raw logs and unpacked data for LogBytes32 events raised by the TokenTest contract.
type TokenTestLogBytes32Iterator struct {
	Event *TokenTestLogBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenTestLogBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenTestLogBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenTestLogBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenTestLogBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenTestLogBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenTestLogBytes32 represents a LogBytes32 event raised by the TokenTest contract.
type TokenTestLogBytes32 struct {
	Arg0 [32]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogBytes32 is a free log retrieval operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_TokenTest *TokenTestFilterer) FilterLogBytes32(opts *bind.FilterOpts) (*TokenTestLogBytes32Iterator, error) {

	logs, sub, err := _TokenTest.contract.FilterLogs(opts, "log_bytes32")
	if err != nil {
		return nil, err
	}
	return &TokenTestLogBytes32Iterator{contract: _TokenTest.contract, event: "log_bytes32", logs: logs, sub: sub}, nil
}

// WatchLogBytes32 is a free log subscription operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_TokenTest *TokenTestFilterer) WatchLogBytes32(opts *bind.WatchOpts, sink chan<- *TokenTestLogBytes32) (event.Subscription, error) {

	logs, sub, err := _TokenTest.contract.WatchLogs(opts, "log_bytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenTestLogBytes32)
				if err := _TokenTest.contract.UnpackLog(event, "log_bytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes32 is a log parse operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_TokenTest *TokenTestFilterer) ParseLogBytes32(log types.Log) (*TokenTestLogBytes32, error) {
	event := new(TokenTestLogBytes32)
	if err := _TokenTest.contract.UnpackLog(event, "log_bytes32", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TokenTestLogIntIterator is returned from FilterLogInt and is used to iterate over the raw logs and unpacked data for LogInt events raised by the TokenTest contract.
type TokenTestLogIntIterator struct {
	Event *TokenTestLogInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenTestLogIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenTestLogInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenTestLogInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenTestLogIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenTestLogIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenTestLogInt represents a LogInt event raised by the TokenTest contract.
type TokenTestLogInt struct {
	Arg0 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogInt is a free log retrieval operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_TokenTest *TokenTestFilterer) FilterLogInt(opts *bind.FilterOpts) (*TokenTestLogIntIterator, error) {

	logs, sub, err := _TokenTest.contract.FilterLogs(opts, "log_int")
	if err != nil {
		return nil, err
	}
	return &TokenTestLogIntIterator{contract: _TokenTest.contract, event: "log_int", logs: logs, sub: sub}, nil
}

// WatchLogInt is a free log subscription operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_TokenTest *TokenTestFilterer) WatchLogInt(opts *bind.WatchOpts, sink chan<- *TokenTestLogInt) (event.Subscription, error) {

	logs, sub, err := _TokenTest.contract.WatchLogs(opts, "log_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenTestLogInt)
				if err := _TokenTest.contract.UnpackLog(event, "log_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogInt is a log parse operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_TokenTest *TokenTestFilterer) ParseLogInt(log types.Log) (*TokenTestLogInt, error) {
	event := new(TokenTestLogInt)
	if err := _TokenTest.contract.UnpackLog(event, "log_int", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TokenTestLogNamedAddressIterator is returned from FilterLogNamedAddress and is used to iterate over the raw logs and unpacked data for LogNamedAddress events raised by the TokenTest contract.
type TokenTestLogNamedAddressIterator struct {
	Event *TokenTestLogNamedAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenTestLogNamedAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenTestLogNamedAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenTestLogNamedAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenTestLogNamedAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenTestLogNamedAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenTestLogNamedAddress represents a LogNamedAddress event raised by the TokenTest contract.
type TokenTestLogNamedAddress struct {
	Key string
	Val common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedAddress is a free log retrieval operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_TokenTest *TokenTestFilterer) FilterLogNamedAddress(opts *bind.FilterOpts) (*TokenTestLogNamedAddressIterator, error) {

	logs, sub, err := _TokenTest.contract.FilterLogs(opts, "log_named_address")
	if err != nil {
		return nil, err
	}
	return &TokenTestLogNamedAddressIterator{contract: _TokenTest.contract, event: "log_named_address", logs: logs, sub: sub}, nil
}

// WatchLogNamedAddress is a free log subscription operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_TokenTest *TokenTestFilterer) WatchLogNamedAddress(opts *bind.WatchOpts, sink chan<- *TokenTestLogNamedAddress) (event.Subscription, error) {

	logs, sub, err := _TokenTest.contract.WatchLogs(opts, "log_named_address")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenTestLogNamedAddress)
				if err := _TokenTest.contract.UnpackLog(event, "log_named_address", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedAddress is a log parse operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_TokenTest *TokenTestFilterer) ParseLogNamedAddress(log types.Log) (*TokenTestLogNamedAddress, error) {
	event := new(TokenTestLogNamedAddress)
	if err := _TokenTest.contract.UnpackLog(event, "log_named_address", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TokenTestLogNamedBytesIterator is returned from FilterLogNamedBytes and is used to iterate over the raw logs and unpacked data for LogNamedBytes events raised by the TokenTest contract.
type TokenTestLogNamedBytesIterator struct {
	Event *TokenTestLogNamedBytes // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenTestLogNamedBytesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenTestLogNamedBytes)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenTestLogNamedBytes)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenTestLogNamedBytesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenTestLogNamedBytesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenTestLogNamedBytes represents a LogNamedBytes event raised by the TokenTest contract.
type TokenTestLogNamedBytes struct {
	Key string
	Val []byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedBytes is a free log retrieval operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_TokenTest *TokenTestFilterer) FilterLogNamedBytes(opts *bind.FilterOpts) (*TokenTestLogNamedBytesIterator, error) {

	logs, sub, err := _TokenTest.contract.FilterLogs(opts, "log_named_bytes")
	if err != nil {
		return nil, err
	}
	return &TokenTestLogNamedBytesIterator{contract: _TokenTest.contract, event: "log_named_bytes", logs: logs, sub: sub}, nil
}

// WatchLogNamedBytes is a free log subscription operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_TokenTest *TokenTestFilterer) WatchLogNamedBytes(opts *bind.WatchOpts, sink chan<- *TokenTestLogNamedBytes) (event.Subscription, error) {

	logs, sub, err := _TokenTest.contract.WatchLogs(opts, "log_named_bytes")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenTestLogNamedBytes)
				if err := _TokenTest.contract.UnpackLog(event, "log_named_bytes", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedBytes is a log parse operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_TokenTest *TokenTestFilterer) ParseLogNamedBytes(log types.Log) (*TokenTestLogNamedBytes, error) {
	event := new(TokenTestLogNamedBytes)
	if err := _TokenTest.contract.UnpackLog(event, "log_named_bytes", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TokenTestLogNamedBytes32Iterator is returned from FilterLogNamedBytes32 and is used to iterate over the raw logs and unpacked data for LogNamedBytes32 events raised by the TokenTest contract.
type TokenTestLogNamedBytes32Iterator struct {
	Event *TokenTestLogNamedBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenTestLogNamedBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenTestLogNamedBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenTestLogNamedBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenTestLogNamedBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenTestLogNamedBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenTestLogNamedBytes32 represents a LogNamedBytes32 event raised by the TokenTest contract.
type TokenTestLogNamedBytes32 struct {
	Key string
	Val [32]byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedBytes32 is a free log retrieval operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_TokenTest *TokenTestFilterer) FilterLogNamedBytes32(opts *bind.FilterOpts) (*TokenTestLogNamedBytes32Iterator, error) {

	logs, sub, err := _TokenTest.contract.FilterLogs(opts, "log_named_bytes32")
	if err != nil {
		return nil, err
	}
	return &TokenTestLogNamedBytes32Iterator{contract: _TokenTest.contract, event: "log_named_bytes32", logs: logs, sub: sub}, nil
}

// WatchLogNamedBytes32 is a free log subscription operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_TokenTest *TokenTestFilterer) WatchLogNamedBytes32(opts *bind.WatchOpts, sink chan<- *TokenTestLogNamedBytes32) (event.Subscription, error) {

	logs, sub, err := _TokenTest.contract.WatchLogs(opts, "log_named_bytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenTestLogNamedBytes32)
				if err := _TokenTest.contract.UnpackLog(event, "log_named_bytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedBytes32 is a log parse operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_TokenTest *TokenTestFilterer) ParseLogNamedBytes32(log types.Log) (*TokenTestLogNamedBytes32, error) {
	event := new(TokenTestLogNamedBytes32)
	if err := _TokenTest.contract.UnpackLog(event, "log_named_bytes32", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TokenTestLogNamedDecimalIntIterator is returned from FilterLogNamedDecimalInt and is used to iterate over the raw logs and unpacked data for LogNamedDecimalInt events raised by the TokenTest contract.
type TokenTestLogNamedDecimalIntIterator struct {
	Event *TokenTestLogNamedDecimalInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenTestLogNamedDecimalIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenTestLogNamedDecimalInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenTestLogNamedDecimalInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenTestLogNamedDecimalIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenTestLogNamedDecimalIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenTestLogNamedDecimalInt represents a LogNamedDecimalInt event raised by the TokenTest contract.
type TokenTestLogNamedDecimalInt struct {
	Key      string
	Val      *big.Int
	Decimals *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogNamedDecimalInt is a free log retrieval operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_TokenTest *TokenTestFilterer) FilterLogNamedDecimalInt(opts *bind.FilterOpts) (*TokenTestLogNamedDecimalIntIterator, error) {

	logs, sub, err := _TokenTest.contract.FilterLogs(opts, "log_named_decimal_int")
	if err != nil {
		return nil, err
	}
	return &TokenTestLogNamedDecimalIntIterator{contract: _TokenTest.contract, event: "log_named_decimal_int", logs: logs, sub: sub}, nil
}

// WatchLogNamedDecimalInt is a free log subscription operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_TokenTest *TokenTestFilterer) WatchLogNamedDecimalInt(opts *bind.WatchOpts, sink chan<- *TokenTestLogNamedDecimalInt) (event.Subscription, error) {

	logs, sub, err := _TokenTest.contract.WatchLogs(opts, "log_named_decimal_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenTestLogNamedDecimalInt)
				if err := _TokenTest.contract.UnpackLog(event, "log_named_decimal_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedDecimalInt is a log parse operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_TokenTest *TokenTestFilterer) ParseLogNamedDecimalInt(log types.Log) (*TokenTestLogNamedDecimalInt, error) {
	event := new(TokenTestLogNamedDecimalInt)
	if err := _TokenTest.contract.UnpackLog(event, "log_named_decimal_int", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TokenTestLogNamedDecimalUintIterator is returned from FilterLogNamedDecimalUint and is used to iterate over the raw logs and unpacked data for LogNamedDecimalUint events raised by the TokenTest contract.
type TokenTestLogNamedDecimalUintIterator struct {
	Event *TokenTestLogNamedDecimalUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenTestLogNamedDecimalUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenTestLogNamedDecimalUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenTestLogNamedDecimalUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenTestLogNamedDecimalUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenTestLogNamedDecimalUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenTestLogNamedDecimalUint represents a LogNamedDecimalUint event raised by the TokenTest contract.
type TokenTestLogNamedDecimalUint struct {
	Key      string
	Val      *big.Int
	Decimals *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogNamedDecimalUint is a free log retrieval operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_TokenTest *TokenTestFilterer) FilterLogNamedDecimalUint(opts *bind.FilterOpts) (*TokenTestLogNamedDecimalUintIterator, error) {

	logs, sub, err := _TokenTest.contract.FilterLogs(opts, "log_named_decimal_uint")
	if err != nil {
		return nil, err
	}
	return &TokenTestLogNamedDecimalUintIterator{contract: _TokenTest.contract, event: "log_named_decimal_uint", logs: logs, sub: sub}, nil
}

// WatchLogNamedDecimalUint is a free log subscription operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_TokenTest *TokenTestFilterer) WatchLogNamedDecimalUint(opts *bind.WatchOpts, sink chan<- *TokenTestLogNamedDecimalUint) (event.Subscription, error) {

	logs, sub, err := _TokenTest.contract.WatchLogs(opts, "log_named_decimal_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenTestLogNamedDecimalUint)
				if err := _TokenTest.contract.UnpackLog(event, "log_named_decimal_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedDecimalUint is a log parse operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_TokenTest *TokenTestFilterer) ParseLogNamedDecimalUint(log types.Log) (*TokenTestLogNamedDecimalUint, error) {
	event := new(TokenTestLogNamedDecimalUint)
	if err := _TokenTest.contract.UnpackLog(event, "log_named_decimal_uint", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TokenTestLogNamedIntIterator is returned from FilterLogNamedInt and is used to iterate over the raw logs and unpacked data for LogNamedInt events raised by the TokenTest contract.
type TokenTestLogNamedIntIterator struct {
	Event *TokenTestLogNamedInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenTestLogNamedIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenTestLogNamedInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenTestLogNamedInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenTestLogNamedIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenTestLogNamedIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenTestLogNamedInt represents a LogNamedInt event raised by the TokenTest contract.
type TokenTestLogNamedInt struct {
	Key string
	Val *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedInt is a free log retrieval operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_TokenTest *TokenTestFilterer) FilterLogNamedInt(opts *bind.FilterOpts) (*TokenTestLogNamedIntIterator, error) {

	logs, sub, err := _TokenTest.contract.FilterLogs(opts, "log_named_int")
	if err != nil {
		return nil, err
	}
	return &TokenTestLogNamedIntIterator{contract: _TokenTest.contract, event: "log_named_int", logs: logs, sub: sub}, nil
}

// WatchLogNamedInt is a free log subscription operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_TokenTest *TokenTestFilterer) WatchLogNamedInt(opts *bind.WatchOpts, sink chan<- *TokenTestLogNamedInt) (event.Subscription, error) {

	logs, sub, err := _TokenTest.contract.WatchLogs(opts, "log_named_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenTestLogNamedInt)
				if err := _TokenTest.contract.UnpackLog(event, "log_named_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedInt is a log parse operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_TokenTest *TokenTestFilterer) ParseLogNamedInt(log types.Log) (*TokenTestLogNamedInt, error) {
	event := new(TokenTestLogNamedInt)
	if err := _TokenTest.contract.UnpackLog(event, "log_named_int", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TokenTestLogNamedStringIterator is returned from FilterLogNamedString and is used to iterate over the raw logs and unpacked data for LogNamedString events raised by the TokenTest contract.
type TokenTestLogNamedStringIterator struct {
	Event *TokenTestLogNamedString // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenTestLogNamedStringIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenTestLogNamedString)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenTestLogNamedString)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenTestLogNamedStringIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenTestLogNamedStringIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenTestLogNamedString represents a LogNamedString event raised by the TokenTest contract.
type TokenTestLogNamedString struct {
	Key string
	Val string
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedString is a free log retrieval operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_TokenTest *TokenTestFilterer) FilterLogNamedString(opts *bind.FilterOpts) (*TokenTestLogNamedStringIterator, error) {

	logs, sub, err := _TokenTest.contract.FilterLogs(opts, "log_named_string")
	if err != nil {
		return nil, err
	}
	return &TokenTestLogNamedStringIterator{contract: _TokenTest.contract, event: "log_named_string", logs: logs, sub: sub}, nil
}

// WatchLogNamedString is a free log subscription operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_TokenTest *TokenTestFilterer) WatchLogNamedString(opts *bind.WatchOpts, sink chan<- *TokenTestLogNamedString) (event.Subscription, error) {

	logs, sub, err := _TokenTest.contract.WatchLogs(opts, "log_named_string")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenTestLogNamedString)
				if err := _TokenTest.contract.UnpackLog(event, "log_named_string", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedString is a log parse operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_TokenTest *TokenTestFilterer) ParseLogNamedString(log types.Log) (*TokenTestLogNamedString, error) {
	event := new(TokenTestLogNamedString)
	if err := _TokenTest.contract.UnpackLog(event, "log_named_string", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TokenTestLogNamedUintIterator is returned from FilterLogNamedUint and is used to iterate over the raw logs and unpacked data for LogNamedUint events raised by the TokenTest contract.
type TokenTestLogNamedUintIterator struct {
	Event *TokenTestLogNamedUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenTestLogNamedUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenTestLogNamedUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenTestLogNamedUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenTestLogNamedUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenTestLogNamedUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenTestLogNamedUint represents a LogNamedUint event raised by the TokenTest contract.
type TokenTestLogNamedUint struct {
	Key string
	Val *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedUint is a free log retrieval operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_TokenTest *TokenTestFilterer) FilterLogNamedUint(opts *bind.FilterOpts) (*TokenTestLogNamedUintIterator, error) {

	logs, sub, err := _TokenTest.contract.FilterLogs(opts, "log_named_uint")
	if err != nil {
		return nil, err
	}
	return &TokenTestLogNamedUintIterator{contract: _TokenTest.contract, event: "log_named_uint", logs: logs, sub: sub}, nil
}

// WatchLogNamedUint is a free log subscription operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_TokenTest *TokenTestFilterer) WatchLogNamedUint(opts *bind.WatchOpts, sink chan<- *TokenTestLogNamedUint) (event.Subscription, error) {

	logs, sub, err := _TokenTest.contract.WatchLogs(opts, "log_named_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenTestLogNamedUint)
				if err := _TokenTest.contract.UnpackLog(event, "log_named_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedUint is a log parse operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_TokenTest *TokenTestFilterer) ParseLogNamedUint(log types.Log) (*TokenTestLogNamedUint, error) {
	event := new(TokenTestLogNamedUint)
	if err := _TokenTest.contract.UnpackLog(event, "log_named_uint", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TokenTestLogStringIterator is returned from FilterLogString and is used to iterate over the raw logs and unpacked data for LogString events raised by the TokenTest contract.
type TokenTestLogStringIterator struct {
	Event *TokenTestLogString // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenTestLogStringIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenTestLogString)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenTestLogString)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenTestLogStringIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenTestLogStringIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenTestLogString represents a LogString event raised by the TokenTest contract.
type TokenTestLogString struct {
	Arg0 string
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogString is a free log retrieval operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_TokenTest *TokenTestFilterer) FilterLogString(opts *bind.FilterOpts) (*TokenTestLogStringIterator, error) {

	logs, sub, err := _TokenTest.contract.FilterLogs(opts, "log_string")
	if err != nil {
		return nil, err
	}
	return &TokenTestLogStringIterator{contract: _TokenTest.contract, event: "log_string", logs: logs, sub: sub}, nil
}

// WatchLogString is a free log subscription operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_TokenTest *TokenTestFilterer) WatchLogString(opts *bind.WatchOpts, sink chan<- *TokenTestLogString) (event.Subscription, error) {

	logs, sub, err := _TokenTest.contract.WatchLogs(opts, "log_string")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenTestLogString)
				if err := _TokenTest.contract.UnpackLog(event, "log_string", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogString is a log parse operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_TokenTest *TokenTestFilterer) ParseLogString(log types.Log) (*TokenTestLogString, error) {
	event := new(TokenTestLogString)
	if err := _TokenTest.contract.UnpackLog(event, "log_string", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TokenTestLogUintIterator is returned from FilterLogUint and is used to iterate over the raw logs and unpacked data for LogUint events raised by the TokenTest contract.
type TokenTestLogUintIterator struct {
	Event *TokenTestLogUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenTestLogUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenTestLogUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenTestLogUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenTestLogUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenTestLogUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenTestLogUint represents a LogUint event raised by the TokenTest contract.
type TokenTestLogUint struct {
	Arg0 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogUint is a free log retrieval operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_TokenTest *TokenTestFilterer) FilterLogUint(opts *bind.FilterOpts) (*TokenTestLogUintIterator, error) {

	logs, sub, err := _TokenTest.contract.FilterLogs(opts, "log_uint")
	if err != nil {
		return nil, err
	}
	return &TokenTestLogUintIterator{contract: _TokenTest.contract, event: "log_uint", logs: logs, sub: sub}, nil
}

// WatchLogUint is a free log subscription operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_TokenTest *TokenTestFilterer) WatchLogUint(opts *bind.WatchOpts, sink chan<- *TokenTestLogUint) (event.Subscription, error) {

	logs, sub, err := _TokenTest.contract.WatchLogs(opts, "log_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenTestLogUint)
				if err := _TokenTest.contract.UnpackLog(event, "log_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogUint is a log parse operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_TokenTest *TokenTestFilterer) ParseLogUint(log types.Log) (*TokenTestLogUint, error) {
	event := new(TokenTestLogUint)
	if err := _TokenTest.contract.UnpackLog(event, "log_uint", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TokenTestLogsIterator is returned from FilterLogs and is used to iterate over the raw logs and unpacked data for Logs events raised by the TokenTest contract.
type TokenTestLogsIterator struct {
	Event *TokenTestLogs // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenTestLogsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenTestLogs)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenTestLogs)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenTestLogsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenTestLogsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenTestLogs represents a Logs event raised by the TokenTest contract.
type TokenTestLogs struct {
	Arg0 []byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogs is a free log retrieval operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_TokenTest *TokenTestFilterer) FilterLogs(opts *bind.FilterOpts) (*TokenTestLogsIterator, error) {

	logs, sub, err := _TokenTest.contract.FilterLogs(opts, "logs")
	if err != nil {
		return nil, err
	}
	return &TokenTestLogsIterator{contract: _TokenTest.contract, event: "logs", logs: logs, sub: sub}, nil
}

// WatchLogs is a free log subscription operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_TokenTest *TokenTestFilterer) WatchLogs(opts *bind.WatchOpts, sink chan<- *TokenTestLogs) (event.Subscription, error) {

	logs, sub, err := _TokenTest.contract.WatchLogs(opts, "logs")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenTestLogs)
				if err := _TokenTest.contract.UnpackLog(event, "logs", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogs is a log parse operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_TokenTest *TokenTestFilterer) ParseLogs(log types.Log) (*TokenTestLogs, error) {
	event := new(TokenTestLogs)
	if err := _TokenTest.contract.UnpackLog(event, "logs", log); err != nil {
		return nil, err
	}
	return event, nil
}

// UserRepresentativeABI is the input ABI used to generate the binding from.
const UserRepresentativeABI = "[{\"inputs\":[{\"internalType\":\"contractBasicERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractTokenMigrator\",\"name\":\"migrator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractTokenMigrator\",\"name\":\"migrator\",\"type\":\"address\"}],\"name\":\"migrateAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// UserRepresentativeBin is the compiled bytecode used for deploying new contracts.
var UserRepresentativeBin = "0x608060405234801561001057600080fd5b50610300806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80635a8cadb114610046578063ad68ebf71461008a578063e1f21c67146100d8575b600080fd5b6100886004803603602081101561005c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610146565b005b6100d6600480360360408110156100a057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506101a9565b005b610144600480360360608110156100ee57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610218565b005b8073ffffffffffffffffffffffffffffffffffffffff16634a77f8706040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561018e57600080fd5b505af11580156101a2573d6000803e3d6000fd5b5050505050565b8173ffffffffffffffffffffffffffffffffffffffff1663454b0608826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156101fc57600080fd5b505af1158015610210573d6000803e3d6000fd5b505050505050565b8273ffffffffffffffffffffffffffffffffffffffff1663095ea7b383836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561028957600080fd5b505af115801561029d573d6000803e3d6000fd5b505050506040513d60208110156102b357600080fd5b81019080805190602001909291905050505050505056fea2646970667358221220a3746995c913f1dbb5a83d072f0fe07cb3484f282c03109c3328af2953bb01d764736f6c63430007060033"

// DeployUserRepresentative deploys a new Ethereum contract, binding an instance of UserRepresentative to it.
func DeployUserRepresentative(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *UserRepresentative, error) {
	parsed, err := abi.JSON(strings.NewReader(UserRepresentativeABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(UserRepresentativeBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &UserRepresentative{UserRepresentativeCaller: UserRepresentativeCaller{contract: contract}, UserRepresentativeTransactor: UserRepresentativeTransactor{contract: contract}, UserRepresentativeFilterer: UserRepresentativeFilterer{contract: contract}}, nil
}

// UserRepresentative is an auto generated Go binding around an Ethereum contract.
type UserRepresentative struct {
	UserRepresentativeCaller     // Read-only binding to the contract
	UserRepresentativeTransactor // Write-only binding to the contract
	UserRepresentativeFilterer   // Log filterer for contract events
}

// UserRepresentativeCaller is an auto generated read-only Go binding around an Ethereum contract.
type UserRepresentativeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UserRepresentativeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type UserRepresentativeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UserRepresentativeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type UserRepresentativeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UserRepresentativeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type UserRepresentativeSession struct {
	Contract     *UserRepresentative // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// UserRepresentativeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type UserRepresentativeCallerSession struct {
	Contract *UserRepresentativeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// UserRepresentativeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type UserRepresentativeTransactorSession struct {
	Contract     *UserRepresentativeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// UserRepresentativeRaw is an auto generated low-level Go binding around an Ethereum contract.
type UserRepresentativeRaw struct {
	Contract *UserRepresentative // Generic contract binding to access the raw methods on
}

// UserRepresentativeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type UserRepresentativeCallerRaw struct {
	Contract *UserRepresentativeCaller // Generic read-only contract binding to access the raw methods on
}

// UserRepresentativeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type UserRepresentativeTransactorRaw struct {
	Contract *UserRepresentativeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewUserRepresentative creates a new instance of UserRepresentative, bound to a specific deployed contract.
func NewUserRepresentative(address common.Address, backend bind.ContractBackend) (*UserRepresentative, error) {
	contract, err := bindUserRepresentative(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &UserRepresentative{UserRepresentativeCaller: UserRepresentativeCaller{contract: contract}, UserRepresentativeTransactor: UserRepresentativeTransactor{contract: contract}, UserRepresentativeFilterer: UserRepresentativeFilterer{contract: contract}}, nil
}

// NewUserRepresentativeCaller creates a new read-only instance of UserRepresentative, bound to a specific deployed contract.
func NewUserRepresentativeCaller(address common.Address, caller bind.ContractCaller) (*UserRepresentativeCaller, error) {
	contract, err := bindUserRepresentative(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &UserRepresentativeCaller{contract: contract}, nil
}

// NewUserRepresentativeTransactor creates a new write-only instance of UserRepresentative, bound to a specific deployed contract.
func NewUserRepresentativeTransactor(address common.Address, transactor bind.ContractTransactor) (*UserRepresentativeTransactor, error) {
	contract, err := bindUserRepresentative(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &UserRepresentativeTransactor{contract: contract}, nil
}

// NewUserRepresentativeFilterer creates a new log filterer instance of UserRepresentative, bound to a specific deployed contract.
func NewUserRepresentativeFilterer(address common.Address, filterer bind.ContractFilterer) (*UserRepresentativeFilterer, error) {
	contract, err := bindUserRepresentative(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &UserRepresentativeFilterer{contract: contract}, nil
}

// bindUserRepresentative binds a generic wrapper to an already deployed contract.
func bindUserRepresentative(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(UserRepresentativeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_UserRepresentative *UserRepresentativeRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _UserRepresentative.Contract.UserRepresentativeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_UserRepresentative *UserRepresentativeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UserRepresentative.Contract.UserRepresentativeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_UserRepresentative *UserRepresentativeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _UserRepresentative.Contract.UserRepresentativeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_UserRepresentative *UserRepresentativeCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _UserRepresentative.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_UserRepresentative *UserRepresentativeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UserRepresentative.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_UserRepresentative *UserRepresentativeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _UserRepresentative.Contract.contract.Transact(opts, method, params...)
}

// Approve is a paid mutator transaction binding the contract method 0xe1f21c67.
//
// Solidity: function approve(address token, address who, uint256 amount) returns()
func (_UserRepresentative *UserRepresentativeTransactor) Approve(opts *bind.TransactOpts, token common.Address, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _UserRepresentative.contract.Transact(opts, "approve", token, who, amount)
}

// Approve is a paid mutator transaction binding the contract method 0xe1f21c67.
//
// Solidity: function approve(address token, address who, uint256 amount) returns()
func (_UserRepresentative *UserRepresentativeSession) Approve(token common.Address, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _UserRepresentative.Contract.Approve(&_UserRepresentative.TransactOpts, token, who, amount)
}

// Approve is a paid mutator transaction binding the contract method 0xe1f21c67.
//
// Solidity: function approve(address token, address who, uint256 amount) returns()
func (_UserRepresentative *UserRepresentativeTransactorSession) Approve(token common.Address, who common.Address, amount *big.Int) (*types.Transaction, error) {
	return _UserRepresentative.Contract.Approve(&_UserRepresentative.TransactOpts, token, who, amount)
}

// Migrate is a paid mutator transaction binding the contract method 0xad68ebf7.
//
// Solidity: function migrate(address migrator, uint256 amount) returns()
func (_UserRepresentative *UserRepresentativeTransactor) Migrate(opts *bind.TransactOpts, migrator common.Address, amount *big.Int) (*types.Transaction, error) {
	return _UserRepresentative.contract.Transact(opts, "migrate", migrator, amount)
}

// Migrate is a paid mutator transaction binding the contract method 0xad68ebf7.
//
// Solidity: function migrate(address migrator, uint256 amount) returns()
func (_UserRepresentative *UserRepresentativeSession) Migrate(migrator common.Address, amount *big.Int) (*types.Transaction, error) {
	return _UserRepresentative.Contract.Migrate(&_UserRepresentative.TransactOpts, migrator, amount)
}

// Migrate is a paid mutator transaction binding the contract method 0xad68ebf7.
//
// Solidity: function migrate(address migrator, uint256 amount) returns()
func (_UserRepresentative *UserRepresentativeTransactorSession) Migrate(migrator common.Address, amount *big.Int) (*types.Transaction, error) {
	return _UserRepresentative.Contract.Migrate(&_UserRepresentative.TransactOpts, migrator, amount)
}

// MigrateAll is a paid mutator transaction binding the contract method 0x5a8cadb1.
//
// Solidity: function migrateAll(address migrator) returns()
func (_UserRepresentative *UserRepresentativeTransactor) MigrateAll(opts *bind.TransactOpts, migrator common.Address) (*types.Transaction, error) {
	return _UserRepresentative.contract.Transact(opts, "migrateAll", migrator)
}

// MigrateAll is a paid mutator transaction binding the contract method 0x5a8cadb1.
//
// Solidity: function migrateAll(address migrator) returns()
func (_UserRepresentative *UserRepresentativeSession) MigrateAll(migrator common.Address) (*types.Transaction, error) {
	return _UserRepresentative.Contract.MigrateAll(&_UserRepresentative.TransactOpts, migrator)
}

// MigrateAll is a paid mutator transaction binding the contract method 0x5a8cadb1.
//
// Solidity: function migrateAll(address migrator) returns()
func (_UserRepresentative *UserRepresentativeTransactorSession) MigrateAll(migrator common.Address) (*types.Transaction, error) {
	return _UserRepresentative.Contract.MigrateAll(&_UserRepresentative.TransactOpts, migrator)
}

// ValidatorEventsABI is the input ABI used to generate the binding from.
const ValidatorEventsABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"startingETHDKG\",\"type\":\"bool\"}],\"name\":\"SnapshotTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"madID\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"madID\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"pkHash\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorLeft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"pkHash\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorQueued\",\"type\":\"event\"}]"

// ValidatorEvents is an auto generated Go binding around an Ethereum contract.
type ValidatorEvents struct {
	ValidatorEventsCaller     // Read-only binding to the contract
	ValidatorEventsTransactor // Write-only binding to the contract
	ValidatorEventsFilterer   // Log filterer for contract events
}

// ValidatorEventsCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorEventsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorEventsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorEventsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorEventsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorEventsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorEventsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorEventsSession struct {
	Contract     *ValidatorEvents  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ValidatorEventsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorEventsCallerSession struct {
	Contract *ValidatorEventsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// ValidatorEventsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorEventsTransactorSession struct {
	Contract     *ValidatorEventsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// ValidatorEventsRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorEventsRaw struct {
	Contract *ValidatorEvents // Generic contract binding to access the raw methods on
}

// ValidatorEventsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorEventsCallerRaw struct {
	Contract *ValidatorEventsCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorEventsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorEventsTransactorRaw struct {
	Contract *ValidatorEventsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorEvents creates a new instance of ValidatorEvents, bound to a specific deployed contract.
func NewValidatorEvents(address common.Address, backend bind.ContractBackend) (*ValidatorEvents, error) {
	contract, err := bindValidatorEvents(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorEvents{ValidatorEventsCaller: ValidatorEventsCaller{contract: contract}, ValidatorEventsTransactor: ValidatorEventsTransactor{contract: contract}, ValidatorEventsFilterer: ValidatorEventsFilterer{contract: contract}}, nil
}

// NewValidatorEventsCaller creates a new read-only instance of ValidatorEvents, bound to a specific deployed contract.
func NewValidatorEventsCaller(address common.Address, caller bind.ContractCaller) (*ValidatorEventsCaller, error) {
	contract, err := bindValidatorEvents(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorEventsCaller{contract: contract}, nil
}

// NewValidatorEventsTransactor creates a new write-only instance of ValidatorEvents, bound to a specific deployed contract.
func NewValidatorEventsTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorEventsTransactor, error) {
	contract, err := bindValidatorEvents(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorEventsTransactor{contract: contract}, nil
}

// NewValidatorEventsFilterer creates a new log filterer instance of ValidatorEvents, bound to a specific deployed contract.
func NewValidatorEventsFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorEventsFilterer, error) {
	contract, err := bindValidatorEvents(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorEventsFilterer{contract: contract}, nil
}

// bindValidatorEvents binds a generic wrapper to an already deployed contract.
func bindValidatorEvents(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorEventsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorEvents *ValidatorEventsRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ValidatorEvents.Contract.ValidatorEventsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorEvents *ValidatorEventsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorEvents.Contract.ValidatorEventsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorEvents *ValidatorEventsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorEvents.Contract.ValidatorEventsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorEvents *ValidatorEventsCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ValidatorEvents.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorEvents *ValidatorEventsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorEvents.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorEvents *ValidatorEventsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorEvents.Contract.contract.Transact(opts, method, params...)
}

// ValidatorEventsSnapshotTakenIterator is returned from FilterSnapshotTaken and is used to iterate over the raw logs and unpacked data for SnapshotTaken events raised by the ValidatorEvents contract.
type ValidatorEventsSnapshotTakenIterator struct {
	Event *ValidatorEventsSnapshotTaken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorEventsSnapshotTakenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorEventsSnapshotTaken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorEventsSnapshotTaken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorEventsSnapshotTakenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorEventsSnapshotTakenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorEventsSnapshotTaken represents a SnapshotTaken event raised by the ValidatorEvents contract.
type ValidatorEventsSnapshotTaken struct {
	ChainId        uint32
	Epoch          *big.Int
	Height         uint32
	Validator      common.Address
	StartingETHDKG bool
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterSnapshotTaken is a free log retrieval operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_ValidatorEvents *ValidatorEventsFilterer) FilterSnapshotTaken(opts *bind.FilterOpts, epoch []*big.Int, validator []common.Address) (*ValidatorEventsSnapshotTakenIterator, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorEvents.contract.FilterLogs(opts, "SnapshotTaken", epochRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorEventsSnapshotTakenIterator{contract: _ValidatorEvents.contract, event: "SnapshotTaken", logs: logs, sub: sub}, nil
}

// WatchSnapshotTaken is a free log subscription operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_ValidatorEvents *ValidatorEventsFilterer) WatchSnapshotTaken(opts *bind.WatchOpts, sink chan<- *ValidatorEventsSnapshotTaken, epoch []*big.Int, validator []common.Address) (event.Subscription, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorEvents.contract.WatchLogs(opts, "SnapshotTaken", epochRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorEventsSnapshotTaken)
				if err := _ValidatorEvents.contract.UnpackLog(event, "SnapshotTaken", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSnapshotTaken is a log parse operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_ValidatorEvents *ValidatorEventsFilterer) ParseSnapshotTaken(log types.Log) (*ValidatorEventsSnapshotTaken, error) {
	event := new(ValidatorEventsSnapshotTaken)
	if err := _ValidatorEvents.contract.UnpackLog(event, "SnapshotTaken", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorEventsValidatorCreatedIterator is returned from FilterValidatorCreated and is used to iterate over the raw logs and unpacked data for ValidatorCreated events raised by the ValidatorEvents contract.
type ValidatorEventsValidatorCreatedIterator struct {
	Event *ValidatorEventsValidatorCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorEventsValidatorCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorEventsValidatorCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorEventsValidatorCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorEventsValidatorCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorEventsValidatorCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorEventsValidatorCreated represents a ValidatorCreated event raised by the ValidatorEvents contract.
type ValidatorEventsValidatorCreated struct {
	Validator common.Address
	Signer    common.Address
	MadID     [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorCreated is a free log retrieval operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_ValidatorEvents *ValidatorEventsFilterer) FilterValidatorCreated(opts *bind.FilterOpts, validator []common.Address, signer []common.Address) (*ValidatorEventsValidatorCreatedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var signerRule []interface{}
	for _, signerItem := range signer {
		signerRule = append(signerRule, signerItem)
	}

	logs, sub, err := _ValidatorEvents.contract.FilterLogs(opts, "ValidatorCreated", validatorRule, signerRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorEventsValidatorCreatedIterator{contract: _ValidatorEvents.contract, event: "ValidatorCreated", logs: logs, sub: sub}, nil
}

// WatchValidatorCreated is a free log subscription operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_ValidatorEvents *ValidatorEventsFilterer) WatchValidatorCreated(opts *bind.WatchOpts, sink chan<- *ValidatorEventsValidatorCreated, validator []common.Address, signer []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var signerRule []interface{}
	for _, signerItem := range signer {
		signerRule = append(signerRule, signerItem)
	}

	logs, sub, err := _ValidatorEvents.contract.WatchLogs(opts, "ValidatorCreated", validatorRule, signerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorEventsValidatorCreated)
				if err := _ValidatorEvents.contract.UnpackLog(event, "ValidatorCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorCreated is a log parse operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_ValidatorEvents *ValidatorEventsFilterer) ParseValidatorCreated(log types.Log) (*ValidatorEventsValidatorCreated, error) {
	event := new(ValidatorEventsValidatorCreated)
	if err := _ValidatorEvents.contract.UnpackLog(event, "ValidatorCreated", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorEventsValidatorJoinedIterator is returned from FilterValidatorJoined and is used to iterate over the raw logs and unpacked data for ValidatorJoined events raised by the ValidatorEvents contract.
type ValidatorEventsValidatorJoinedIterator struct {
	Event *ValidatorEventsValidatorJoined // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorEventsValidatorJoinedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorEventsValidatorJoined)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorEventsValidatorJoined)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorEventsValidatorJoinedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorEventsValidatorJoinedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorEventsValidatorJoined represents a ValidatorJoined event raised by the ValidatorEvents contract.
type ValidatorEventsValidatorJoined struct {
	Validator common.Address
	MadID     [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorJoined is a free log retrieval operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_ValidatorEvents *ValidatorEventsFilterer) FilterValidatorJoined(opts *bind.FilterOpts, validator []common.Address) (*ValidatorEventsValidatorJoinedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorEvents.contract.FilterLogs(opts, "ValidatorJoined", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorEventsValidatorJoinedIterator{contract: _ValidatorEvents.contract, event: "ValidatorJoined", logs: logs, sub: sub}, nil
}

// WatchValidatorJoined is a free log subscription operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_ValidatorEvents *ValidatorEventsFilterer) WatchValidatorJoined(opts *bind.WatchOpts, sink chan<- *ValidatorEventsValidatorJoined, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorEvents.contract.WatchLogs(opts, "ValidatorJoined", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorEventsValidatorJoined)
				if err := _ValidatorEvents.contract.UnpackLog(event, "ValidatorJoined", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorJoined is a log parse operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_ValidatorEvents *ValidatorEventsFilterer) ParseValidatorJoined(log types.Log) (*ValidatorEventsValidatorJoined, error) {
	event := new(ValidatorEventsValidatorJoined)
	if err := _ValidatorEvents.contract.UnpackLog(event, "ValidatorJoined", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorEventsValidatorLeftIterator is returned from FilterValidatorLeft and is used to iterate over the raw logs and unpacked data for ValidatorLeft events raised by the ValidatorEvents contract.
type ValidatorEventsValidatorLeftIterator struct {
	Event *ValidatorEventsValidatorLeft // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorEventsValidatorLeftIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorEventsValidatorLeft)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorEventsValidatorLeft)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorEventsValidatorLeftIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorEventsValidatorLeftIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorEventsValidatorLeft represents a ValidatorLeft event raised by the ValidatorEvents contract.
type ValidatorEventsValidatorLeft struct {
	Validator common.Address
	PkHash    [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorLeft is a free log retrieval operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_ValidatorEvents *ValidatorEventsFilterer) FilterValidatorLeft(opts *bind.FilterOpts, validator []common.Address) (*ValidatorEventsValidatorLeftIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorEvents.contract.FilterLogs(opts, "ValidatorLeft", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorEventsValidatorLeftIterator{contract: _ValidatorEvents.contract, event: "ValidatorLeft", logs: logs, sub: sub}, nil
}

// WatchValidatorLeft is a free log subscription operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_ValidatorEvents *ValidatorEventsFilterer) WatchValidatorLeft(opts *bind.WatchOpts, sink chan<- *ValidatorEventsValidatorLeft, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorEvents.contract.WatchLogs(opts, "ValidatorLeft", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorEventsValidatorLeft)
				if err := _ValidatorEvents.contract.UnpackLog(event, "ValidatorLeft", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorLeft is a log parse operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_ValidatorEvents *ValidatorEventsFilterer) ParseValidatorLeft(log types.Log) (*ValidatorEventsValidatorLeft, error) {
	event := new(ValidatorEventsValidatorLeft)
	if err := _ValidatorEvents.contract.UnpackLog(event, "ValidatorLeft", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorEventsValidatorQueuedIterator is returned from FilterValidatorQueued and is used to iterate over the raw logs and unpacked data for ValidatorQueued events raised by the ValidatorEvents contract.
type ValidatorEventsValidatorQueuedIterator struct {
	Event *ValidatorEventsValidatorQueued // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorEventsValidatorQueuedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorEventsValidatorQueued)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorEventsValidatorQueued)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorEventsValidatorQueuedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorEventsValidatorQueuedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorEventsValidatorQueued represents a ValidatorQueued event raised by the ValidatorEvents contract.
type ValidatorEventsValidatorQueued struct {
	Validator common.Address
	PkHash    [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorQueued is a free log retrieval operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_ValidatorEvents *ValidatorEventsFilterer) FilterValidatorQueued(opts *bind.FilterOpts, validator []common.Address) (*ValidatorEventsValidatorQueuedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorEvents.contract.FilterLogs(opts, "ValidatorQueued", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorEventsValidatorQueuedIterator{contract: _ValidatorEvents.contract, event: "ValidatorQueued", logs: logs, sub: sub}, nil
}

// WatchValidatorQueued is a free log subscription operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_ValidatorEvents *ValidatorEventsFilterer) WatchValidatorQueued(opts *bind.WatchOpts, sink chan<- *ValidatorEventsValidatorQueued, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorEvents.contract.WatchLogs(opts, "ValidatorQueued", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorEventsValidatorQueued)
				if err := _ValidatorEvents.contract.UnpackLog(event, "ValidatorQueued", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorQueued is a log parse operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_ValidatorEvents *ValidatorEventsFilterer) ParseValidatorQueued(log types.Log) (*ValidatorEventsValidatorQueued, error) {
	event := new(ValidatorEventsValidatorQueued)
	if err := _ValidatorEvents.contract.UnpackLog(event, "ValidatorQueued", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorsABI is the input ABI used to generate the binding from.
const ValidatorsABI = "[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"maxValidators\",\"type\":\"uint8\"},{\"internalType\":\"contractRegistry\",\"name\":\"registry_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"foo\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"bar\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"fax\",\"type\":\"bytes\"}],\"name\":\"LogNote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"startingETHDKG\",\"type\":\"bool\"}],\"name\":\"SnapshotTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"madID\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"madID\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"pkHash\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorLeft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"pkHash\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorQueued\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"_madID\",\"type\":\"uint256[2]\"}],\"name\":\"addValidator\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contractDSAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmValidators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"getChainIdFromSnapshot\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"getHeightFromSnapshot\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"getMadHeightFromSnapshot\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"getRawBlockClaimsSnapshot\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"getRawSignatureSnapshot\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"getValidatorPublicKey\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"majorFine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"majorStakeFine\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"minorFine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minorStakeFine\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"_madID\",\"type\":\"uint256[2]\"}],\"name\":\"queueValidator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reloadRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"_madID\",\"type\":\"uint256[2]\"}],\"name\":\"removeValidator\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractDSAuthority\",\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_majorStakeFine\",\"type\":\"uint256\"}],\"name\":\"setMajorStakeFine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumStake\",\"type\":\"uint256\"}],\"name\":\"setMinimumStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minorStakeFine\",\"type\":\"uint256\"}],\"name\":\"setMinorStakeFine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"}],\"name\":\"setRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardBonus\",\"type\":\"uint256\"}],\"name\":\"setRewardBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_validatorMaxCount\",\"type\":\"uint8\"}],\"name\":\"setValidatorMaxCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_signatureGroup\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_bclaims\",\"type\":\"bytes\"}],\"name\":\"snapshot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorMaxCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// ValidatorsBin is the compiled bytecode used for deploying new contracts.
var ValidatorsBin = ""

// DeployValidators deploys a new Ethereum contract, binding an instance of Validators to it.
func DeployValidators(auth *bind.TransactOpts, backend bind.ContractBackend, maxValidators uint8, registry_ common.Address) (common.Address, *types.Transaction, *Validators, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorsABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ValidatorsBin), backend, maxValidators, registry_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Validators{ValidatorsCaller: ValidatorsCaller{contract: contract}, ValidatorsTransactor: ValidatorsTransactor{contract: contract}, ValidatorsFilterer: ValidatorsFilterer{contract: contract}}, nil
}

// Validators is an auto generated Go binding around an Ethereum contract.
type Validators struct {
	ValidatorsCaller     // Read-only binding to the contract
	ValidatorsTransactor // Write-only binding to the contract
	ValidatorsFilterer   // Log filterer for contract events
}

// ValidatorsCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorsSession struct {
	Contract     *Validators       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ValidatorsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorsCallerSession struct {
	Contract *ValidatorsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// ValidatorsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorsTransactorSession struct {
	Contract     *ValidatorsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// ValidatorsRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorsRaw struct {
	Contract *Validators // Generic contract binding to access the raw methods on
}

// ValidatorsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorsCallerRaw struct {
	Contract *ValidatorsCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorsTransactorRaw struct {
	Contract *ValidatorsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidators creates a new instance of Validators, bound to a specific deployed contract.
func NewValidators(address common.Address, backend bind.ContractBackend) (*Validators, error) {
	contract, err := bindValidators(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Validators{ValidatorsCaller: ValidatorsCaller{contract: contract}, ValidatorsTransactor: ValidatorsTransactor{contract: contract}, ValidatorsFilterer: ValidatorsFilterer{contract: contract}}, nil
}

// NewValidatorsCaller creates a new read-only instance of Validators, bound to a specific deployed contract.
func NewValidatorsCaller(address common.Address, caller bind.ContractCaller) (*ValidatorsCaller, error) {
	contract, err := bindValidators(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorsCaller{contract: contract}, nil
}

// NewValidatorsTransactor creates a new write-only instance of Validators, bound to a specific deployed contract.
func NewValidatorsTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorsTransactor, error) {
	contract, err := bindValidators(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorsTransactor{contract: contract}, nil
}

// NewValidatorsFilterer creates a new log filterer instance of Validators, bound to a specific deployed contract.
func NewValidatorsFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorsFilterer, error) {
	contract, err := bindValidators(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorsFilterer{contract: contract}, nil
}

// bindValidators binds a generic wrapper to an already deployed contract.
func bindValidators(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Validators *ValidatorsRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Validators.Contract.ValidatorsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Validators *ValidatorsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Validators.Contract.ValidatorsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Validators *ValidatorsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Validators.Contract.ValidatorsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Validators *ValidatorsCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Validators.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Validators *ValidatorsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Validators.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Validators *ValidatorsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Validators.Contract.contract.Transact(opts, method, params...)
}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_Validators *ValidatorsCaller) Authority(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Validators.contract.Call(opts, out, "authority")
	return *ret0, err
}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_Validators *ValidatorsSession) Authority() (common.Address, error) {
	return _Validators.Contract.Authority(&_Validators.CallOpts)
}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_Validators *ValidatorsCallerSession) Authority() (common.Address, error) {
	return _Validators.Contract.Authority(&_Validators.CallOpts)
}

// Epoch is a free data retrieval call binding the contract method 0x900cf0cf.
//
// Solidity: function epoch() view returns(uint256)
func (_Validators *ValidatorsCaller) Epoch(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Validators.contract.Call(opts, out, "epoch")
	return *ret0, err
}

// Epoch is a free data retrieval call binding the contract method 0x900cf0cf.
//
// Solidity: function epoch() view returns(uint256)
func (_Validators *ValidatorsSession) Epoch() (*big.Int, error) {
	return _Validators.Contract.Epoch(&_Validators.CallOpts)
}

// Epoch is a free data retrieval call binding the contract method 0x900cf0cf.
//
// Solidity: function epoch() view returns(uint256)
func (_Validators *ValidatorsCallerSession) Epoch() (*big.Int, error) {
	return _Validators.Contract.Epoch(&_Validators.CallOpts)
}

// GetChainIdFromSnapshot is a free data retrieval call binding the contract method 0x19f74669.
//
// Solidity: function getChainIdFromSnapshot(uint256 _epoch) view returns(uint32)
func (_Validators *ValidatorsCaller) GetChainIdFromSnapshot(opts *bind.CallOpts, _epoch *big.Int) (uint32, error) {
	var (
		ret0 = new(uint32)
	)
	out := ret0
	err := _Validators.contract.Call(opts, out, "getChainIdFromSnapshot", _epoch)
	return *ret0, err
}

// GetChainIdFromSnapshot is a free data retrieval call binding the contract method 0x19f74669.
//
// Solidity: function getChainIdFromSnapshot(uint256 _epoch) view returns(uint32)
func (_Validators *ValidatorsSession) GetChainIdFromSnapshot(_epoch *big.Int) (uint32, error) {
	return _Validators.Contract.GetChainIdFromSnapshot(&_Validators.CallOpts, _epoch)
}

// GetChainIdFromSnapshot is a free data retrieval call binding the contract method 0x19f74669.
//
// Solidity: function getChainIdFromSnapshot(uint256 _epoch) view returns(uint32)
func (_Validators *ValidatorsCallerSession) GetChainIdFromSnapshot(_epoch *big.Int) (uint32, error) {
	return _Validators.Contract.GetChainIdFromSnapshot(&_Validators.CallOpts, _epoch)
}

// GetHeightFromSnapshot is a free data retrieval call binding the contract method 0xe380b228.
//
// Solidity: function getHeightFromSnapshot(uint256 _epoch) view returns(uint32)
func (_Validators *ValidatorsCaller) GetHeightFromSnapshot(opts *bind.CallOpts, _epoch *big.Int) (uint32, error) {
	var (
		ret0 = new(uint32)
	)
	out := ret0
	err := _Validators.contract.Call(opts, out, "getHeightFromSnapshot", _epoch)
	return *ret0, err
}

// GetHeightFromSnapshot is a free data retrieval call binding the contract method 0xe380b228.
//
// Solidity: function getHeightFromSnapshot(uint256 _epoch) view returns(uint32)
func (_Validators *ValidatorsSession) GetHeightFromSnapshot(_epoch *big.Int) (uint32, error) {
	return _Validators.Contract.GetHeightFromSnapshot(&_Validators.CallOpts, _epoch)
}

// GetHeightFromSnapshot is a free data retrieval call binding the contract method 0xe380b228.
//
// Solidity: function getHeightFromSnapshot(uint256 _epoch) view returns(uint32)
func (_Validators *ValidatorsCallerSession) GetHeightFromSnapshot(_epoch *big.Int) (uint32, error) {
	return _Validators.Contract.GetHeightFromSnapshot(&_Validators.CallOpts, _epoch)
}

// GetMadHeightFromSnapshot is a free data retrieval call binding the contract method 0x4f4ea614.
//
// Solidity: function getMadHeightFromSnapshot(uint256 _epoch) view returns(uint32)
func (_Validators *ValidatorsCaller) GetMadHeightFromSnapshot(opts *bind.CallOpts, _epoch *big.Int) (uint32, error) {
	var (
		ret0 = new(uint32)
	)
	out := ret0
	err := _Validators.contract.Call(opts, out, "getMadHeightFromSnapshot", _epoch)
	return *ret0, err
}

// GetMadHeightFromSnapshot is a free data retrieval call binding the contract method 0x4f4ea614.
//
// Solidity: function getMadHeightFromSnapshot(uint256 _epoch) view returns(uint32)
func (_Validators *ValidatorsSession) GetMadHeightFromSnapshot(_epoch *big.Int) (uint32, error) {
	return _Validators.Contract.GetMadHeightFromSnapshot(&_Validators.CallOpts, _epoch)
}

// GetMadHeightFromSnapshot is a free data retrieval call binding the contract method 0x4f4ea614.
//
// Solidity: function getMadHeightFromSnapshot(uint256 _epoch) view returns(uint32)
func (_Validators *ValidatorsCallerSession) GetMadHeightFromSnapshot(_epoch *big.Int) (uint32, error) {
	return _Validators.Contract.GetMadHeightFromSnapshot(&_Validators.CallOpts, _epoch)
}

// GetRawBlockClaimsSnapshot is a free data retrieval call binding the contract method 0x6372fe51.
//
// Solidity: function getRawBlockClaimsSnapshot(uint256 _epoch) view returns(bytes)
func (_Validators *ValidatorsCaller) GetRawBlockClaimsSnapshot(opts *bind.CallOpts, _epoch *big.Int) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _Validators.contract.Call(opts, out, "getRawBlockClaimsSnapshot", _epoch)
	return *ret0, err
}

// GetRawBlockClaimsSnapshot is a free data retrieval call binding the contract method 0x6372fe51.
//
// Solidity: function getRawBlockClaimsSnapshot(uint256 _epoch) view returns(bytes)
func (_Validators *ValidatorsSession) GetRawBlockClaimsSnapshot(_epoch *big.Int) ([]byte, error) {
	return _Validators.Contract.GetRawBlockClaimsSnapshot(&_Validators.CallOpts, _epoch)
}

// GetRawBlockClaimsSnapshot is a free data retrieval call binding the contract method 0x6372fe51.
//
// Solidity: function getRawBlockClaimsSnapshot(uint256 _epoch) view returns(bytes)
func (_Validators *ValidatorsCallerSession) GetRawBlockClaimsSnapshot(_epoch *big.Int) ([]byte, error) {
	return _Validators.Contract.GetRawBlockClaimsSnapshot(&_Validators.CallOpts, _epoch)
}

// GetRawSignatureSnapshot is a free data retrieval call binding the contract method 0x35b6c632.
//
// Solidity: function getRawSignatureSnapshot(uint256 _epoch) view returns(bytes)
func (_Validators *ValidatorsCaller) GetRawSignatureSnapshot(opts *bind.CallOpts, _epoch *big.Int) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _Validators.contract.Call(opts, out, "getRawSignatureSnapshot", _epoch)
	return *ret0, err
}

// GetRawSignatureSnapshot is a free data retrieval call binding the contract method 0x35b6c632.
//
// Solidity: function getRawSignatureSnapshot(uint256 _epoch) view returns(bytes)
func (_Validators *ValidatorsSession) GetRawSignatureSnapshot(_epoch *big.Int) ([]byte, error) {
	return _Validators.Contract.GetRawSignatureSnapshot(&_Validators.CallOpts, _epoch)
}

// GetRawSignatureSnapshot is a free data retrieval call binding the contract method 0x35b6c632.
//
// Solidity: function getRawSignatureSnapshot(uint256 _epoch) view returns(bytes)
func (_Validators *ValidatorsCallerSession) GetRawSignatureSnapshot(_epoch *big.Int) ([]byte, error) {
	return _Validators.Contract.GetRawSignatureSnapshot(&_Validators.CallOpts, _epoch)
}

// GetValidatorPublicKey is a free data retrieval call binding the contract method 0x4e6f4a22.
//
// Solidity: function getValidatorPublicKey(address _validator) view returns(uint256[2])
func (_Validators *ValidatorsCaller) GetValidatorPublicKey(opts *bind.CallOpts, _validator common.Address) ([2]*big.Int, error) {
	var (
		ret0 = new([2]*big.Int)
	)
	out := ret0
	err := _Validators.contract.Call(opts, out, "getValidatorPublicKey", _validator)
	return *ret0, err
}

// GetValidatorPublicKey is a free data retrieval call binding the contract method 0x4e6f4a22.
//
// Solidity: function getValidatorPublicKey(address _validator) view returns(uint256[2])
func (_Validators *ValidatorsSession) GetValidatorPublicKey(_validator common.Address) ([2]*big.Int, error) {
	return _Validators.Contract.GetValidatorPublicKey(&_Validators.CallOpts, _validator)
}

// GetValidatorPublicKey is a free data retrieval call binding the contract method 0x4e6f4a22.
//
// Solidity: function getValidatorPublicKey(address _validator) view returns(uint256[2])
func (_Validators *ValidatorsCallerSession) GetValidatorPublicKey(_validator common.Address) ([2]*big.Int, error) {
	return _Validators.Contract.GetValidatorPublicKey(&_Validators.CallOpts, _validator)
}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_Validators *ValidatorsCaller) GetValidators(opts *bind.CallOpts) ([]common.Address, error) {
	var (
		ret0 = new([]common.Address)
	)
	out := ret0
	err := _Validators.contract.Call(opts, out, "getValidators")
	return *ret0, err
}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_Validators *ValidatorsSession) GetValidators() ([]common.Address, error) {
	return _Validators.Contract.GetValidators(&_Validators.CallOpts)
}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() view returns(address[])
func (_Validators *ValidatorsCallerSession) GetValidators() ([]common.Address, error) {
	return _Validators.Contract.GetValidators(&_Validators.CallOpts)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_Validators *ValidatorsCaller) IsValidator(opts *bind.CallOpts, validator common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Validators.contract.Call(opts, out, "isValidator", validator)
	return *ret0, err
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_Validators *ValidatorsSession) IsValidator(validator common.Address) (bool, error) {
	return _Validators.Contract.IsValidator(&_Validators.CallOpts, validator)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address validator) view returns(bool)
func (_Validators *ValidatorsCallerSession) IsValidator(validator common.Address) (bool, error) {
	return _Validators.Contract.IsValidator(&_Validators.CallOpts, validator)
}

// MajorStakeFine is a free data retrieval call binding the contract method 0xad43d845.
//
// Solidity: function majorStakeFine() view returns(uint256)
func (_Validators *ValidatorsCaller) MajorStakeFine(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Validators.contract.Call(opts, out, "majorStakeFine")
	return *ret0, err
}

// MajorStakeFine is a free data retrieval call binding the contract method 0xad43d845.
//
// Solidity: function majorStakeFine() view returns(uint256)
func (_Validators *ValidatorsSession) MajorStakeFine() (*big.Int, error) {
	return _Validators.Contract.MajorStakeFine(&_Validators.CallOpts)
}

// MajorStakeFine is a free data retrieval call binding the contract method 0xad43d845.
//
// Solidity: function majorStakeFine() view returns(uint256)
func (_Validators *ValidatorsCallerSession) MajorStakeFine() (*big.Int, error) {
	return _Validators.Contract.MajorStakeFine(&_Validators.CallOpts)
}

// MinimumStake is a free data retrieval call binding the contract method 0xec5ffac2.
//
// Solidity: function minimumStake() view returns(uint256)
func (_Validators *ValidatorsCaller) MinimumStake(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Validators.contract.Call(opts, out, "minimumStake")
	return *ret0, err
}

// MinimumStake is a free data retrieval call binding the contract method 0xec5ffac2.
//
// Solidity: function minimumStake() view returns(uint256)
func (_Validators *ValidatorsSession) MinimumStake() (*big.Int, error) {
	return _Validators.Contract.MinimumStake(&_Validators.CallOpts)
}

// MinimumStake is a free data retrieval call binding the contract method 0xec5ffac2.
//
// Solidity: function minimumStake() view returns(uint256)
func (_Validators *ValidatorsCallerSession) MinimumStake() (*big.Int, error) {
	return _Validators.Contract.MinimumStake(&_Validators.CallOpts)
}

// MinorStakeFine is a free data retrieval call binding the contract method 0x6d059126.
//
// Solidity: function minorStakeFine() view returns(uint256)
func (_Validators *ValidatorsCaller) MinorStakeFine(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Validators.contract.Call(opts, out, "minorStakeFine")
	return *ret0, err
}

// MinorStakeFine is a free data retrieval call binding the contract method 0x6d059126.
//
// Solidity: function minorStakeFine() view returns(uint256)
func (_Validators *ValidatorsSession) MinorStakeFine() (*big.Int, error) {
	return _Validators.Contract.MinorStakeFine(&_Validators.CallOpts)
}

// MinorStakeFine is a free data retrieval call binding the contract method 0x6d059126.
//
// Solidity: function minorStakeFine() view returns(uint256)
func (_Validators *ValidatorsCallerSession) MinorStakeFine() (*big.Int, error) {
	return _Validators.Contract.MinorStakeFine(&_Validators.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Validators *ValidatorsCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Validators.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Validators *ValidatorsSession) Owner() (common.Address, error) {
	return _Validators.Contract.Owner(&_Validators.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Validators *ValidatorsCallerSession) Owner() (common.Address, error) {
	return _Validators.Contract.Owner(&_Validators.CallOpts)
}

// RewardAmount is a free data retrieval call binding the contract method 0xf7b2a7be.
//
// Solidity: function rewardAmount() view returns(uint256)
func (_Validators *ValidatorsCaller) RewardAmount(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Validators.contract.Call(opts, out, "rewardAmount")
	return *ret0, err
}

// RewardAmount is a free data retrieval call binding the contract method 0xf7b2a7be.
//
// Solidity: function rewardAmount() view returns(uint256)
func (_Validators *ValidatorsSession) RewardAmount() (*big.Int, error) {
	return _Validators.Contract.RewardAmount(&_Validators.CallOpts)
}

// RewardAmount is a free data retrieval call binding the contract method 0xf7b2a7be.
//
// Solidity: function rewardAmount() view returns(uint256)
func (_Validators *ValidatorsCallerSession) RewardAmount() (*big.Int, error) {
	return _Validators.Contract.RewardAmount(&_Validators.CallOpts)
}

// RewardBonus is a free data retrieval call binding the contract method 0xfdf553cf.
//
// Solidity: function rewardBonus() view returns(uint256)
func (_Validators *ValidatorsCaller) RewardBonus(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Validators.contract.Call(opts, out, "rewardBonus")
	return *ret0, err
}

// RewardBonus is a free data retrieval call binding the contract method 0xfdf553cf.
//
// Solidity: function rewardBonus() view returns(uint256)
func (_Validators *ValidatorsSession) RewardBonus() (*big.Int, error) {
	return _Validators.Contract.RewardBonus(&_Validators.CallOpts)
}

// RewardBonus is a free data retrieval call binding the contract method 0xfdf553cf.
//
// Solidity: function rewardBonus() view returns(uint256)
func (_Validators *ValidatorsCallerSession) RewardBonus() (*big.Int, error) {
	return _Validators.Contract.RewardBonus(&_Validators.CallOpts)
}

// Stopped is a free data retrieval call binding the contract method 0x75f12b21.
//
// Solidity: function stopped() view returns(bool)
func (_Validators *ValidatorsCaller) Stopped(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Validators.contract.Call(opts, out, "stopped")
	return *ret0, err
}

// Stopped is a free data retrieval call binding the contract method 0x75f12b21.
//
// Solidity: function stopped() view returns(bool)
func (_Validators *ValidatorsSession) Stopped() (bool, error) {
	return _Validators.Contract.Stopped(&_Validators.CallOpts)
}

// Stopped is a free data retrieval call binding the contract method 0x75f12b21.
//
// Solidity: function stopped() view returns(bool)
func (_Validators *ValidatorsCallerSession) Stopped() (bool, error) {
	return _Validators.Contract.Stopped(&_Validators.CallOpts)
}

// ValidatorCount is a free data retrieval call binding the contract method 0x0f43a677.
//
// Solidity: function validatorCount() view returns(uint8)
func (_Validators *ValidatorsCaller) ValidatorCount(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Validators.contract.Call(opts, out, "validatorCount")
	return *ret0, err
}

// ValidatorCount is a free data retrieval call binding the contract method 0x0f43a677.
//
// Solidity: function validatorCount() view returns(uint8)
func (_Validators *ValidatorsSession) ValidatorCount() (uint8, error) {
	return _Validators.Contract.ValidatorCount(&_Validators.CallOpts)
}

// ValidatorCount is a free data retrieval call binding the contract method 0x0f43a677.
//
// Solidity: function validatorCount() view returns(uint8)
func (_Validators *ValidatorsCallerSession) ValidatorCount() (uint8, error) {
	return _Validators.Contract.ValidatorCount(&_Validators.CallOpts)
}

// ValidatorMaxCount is a free data retrieval call binding the contract method 0x09f0d45d.
//
// Solidity: function validatorMaxCount() view returns(uint8)
func (_Validators *ValidatorsCaller) ValidatorMaxCount(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Validators.contract.Call(opts, out, "validatorMaxCount")
	return *ret0, err
}

// ValidatorMaxCount is a free data retrieval call binding the contract method 0x09f0d45d.
//
// Solidity: function validatorMaxCount() view returns(uint8)
func (_Validators *ValidatorsSession) ValidatorMaxCount() (uint8, error) {
	return _Validators.Contract.ValidatorMaxCount(&_Validators.CallOpts)
}

// ValidatorMaxCount is a free data retrieval call binding the contract method 0x09f0d45d.
//
// Solidity: function validatorMaxCount() view returns(uint8)
func (_Validators *ValidatorsCallerSession) ValidatorMaxCount() (uint8, error) {
	return _Validators.Contract.ValidatorMaxCount(&_Validators.CallOpts)
}

// AddValidator is a paid mutator transaction binding the contract method 0xeb6320c7.
//
// Solidity: function addValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_Validators *ValidatorsTransactor) AddValidator(opts *bind.TransactOpts, _validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "addValidator", _validator, _madID)
}

// AddValidator is a paid mutator transaction binding the contract method 0xeb6320c7.
//
// Solidity: function addValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_Validators *ValidatorsSession) AddValidator(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _Validators.Contract.AddValidator(&_Validators.TransactOpts, _validator, _madID)
}

// AddValidator is a paid mutator transaction binding the contract method 0xeb6320c7.
//
// Solidity: function addValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_Validators *ValidatorsTransactorSession) AddValidator(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _Validators.Contract.AddValidator(&_Validators.TransactOpts, _validator, _madID)
}

// Burn is a paid mutator transaction binding the contract method 0x89afcb44.
//
// Solidity: function burn(address who) returns()
func (_Validators *ValidatorsTransactor) Burn(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "burn", who)
}

// Burn is a paid mutator transaction binding the contract method 0x89afcb44.
//
// Solidity: function burn(address who) returns()
func (_Validators *ValidatorsSession) Burn(who common.Address) (*types.Transaction, error) {
	return _Validators.Contract.Burn(&_Validators.TransactOpts, who)
}

// Burn is a paid mutator transaction binding the contract method 0x89afcb44.
//
// Solidity: function burn(address who) returns()
func (_Validators *ValidatorsTransactorSession) Burn(who common.Address) (*types.Transaction, error) {
	return _Validators.Contract.Burn(&_Validators.TransactOpts, who)
}

// ConfirmValidators is a paid mutator transaction binding the contract method 0x35c6a163.
//
// Solidity: function confirmValidators() returns(bool)
func (_Validators *ValidatorsTransactor) ConfirmValidators(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "confirmValidators")
}

// ConfirmValidators is a paid mutator transaction binding the contract method 0x35c6a163.
//
// Solidity: function confirmValidators() returns(bool)
func (_Validators *ValidatorsSession) ConfirmValidators() (*types.Transaction, error) {
	return _Validators.Contract.ConfirmValidators(&_Validators.TransactOpts)
}

// ConfirmValidators is a paid mutator transaction binding the contract method 0x35c6a163.
//
// Solidity: function confirmValidators() returns(bool)
func (_Validators *ValidatorsTransactorSession) ConfirmValidators() (*types.Transaction, error) {
	return _Validators.Contract.ConfirmValidators(&_Validators.TransactOpts)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_Validators *ValidatorsTransactor) GrantOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "grantOperator", _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_Validators *ValidatorsSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _Validators.Contract.GrantOperator(&_Validators.TransactOpts, _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_Validators *ValidatorsTransactorSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _Validators.Contract.GrantOperator(&_Validators.TransactOpts, _operator)
}

// MajorFine is a paid mutator transaction binding the contract method 0x57b4f82a.
//
// Solidity: function majorFine(address who) returns()
func (_Validators *ValidatorsTransactor) MajorFine(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "majorFine", who)
}

// MajorFine is a paid mutator transaction binding the contract method 0x57b4f82a.
//
// Solidity: function majorFine(address who) returns()
func (_Validators *ValidatorsSession) MajorFine(who common.Address) (*types.Transaction, error) {
	return _Validators.Contract.MajorFine(&_Validators.TransactOpts, who)
}

// MajorFine is a paid mutator transaction binding the contract method 0x57b4f82a.
//
// Solidity: function majorFine(address who) returns()
func (_Validators *ValidatorsTransactorSession) MajorFine(who common.Address) (*types.Transaction, error) {
	return _Validators.Contract.MajorFine(&_Validators.TransactOpts, who)
}

// MinorFine is a paid mutator transaction binding the contract method 0xd2a2c55c.
//
// Solidity: function minorFine(address who) returns()
func (_Validators *ValidatorsTransactor) MinorFine(opts *bind.TransactOpts, who common.Address) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "minorFine", who)
}

// MinorFine is a paid mutator transaction binding the contract method 0xd2a2c55c.
//
// Solidity: function minorFine(address who) returns()
func (_Validators *ValidatorsSession) MinorFine(who common.Address) (*types.Transaction, error) {
	return _Validators.Contract.MinorFine(&_Validators.TransactOpts, who)
}

// MinorFine is a paid mutator transaction binding the contract method 0xd2a2c55c.
//
// Solidity: function minorFine(address who) returns()
func (_Validators *ValidatorsTransactorSession) MinorFine(who common.Address) (*types.Transaction, error) {
	return _Validators.Contract.MinorFine(&_Validators.TransactOpts, who)
}

// QueueValidator is a paid mutator transaction binding the contract method 0x81d3cb14.
//
// Solidity: function queueValidator(address _validator, uint256[2] _madID) returns(uint256)
func (_Validators *ValidatorsTransactor) QueueValidator(opts *bind.TransactOpts, _validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "queueValidator", _validator, _madID)
}

// QueueValidator is a paid mutator transaction binding the contract method 0x81d3cb14.
//
// Solidity: function queueValidator(address _validator, uint256[2] _madID) returns(uint256)
func (_Validators *ValidatorsSession) QueueValidator(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _Validators.Contract.QueueValidator(&_Validators.TransactOpts, _validator, _madID)
}

// QueueValidator is a paid mutator transaction binding the contract method 0x81d3cb14.
//
// Solidity: function queueValidator(address _validator, uint256[2] _madID) returns(uint256)
func (_Validators *ValidatorsTransactorSession) QueueValidator(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _Validators.Contract.QueueValidator(&_Validators.TransactOpts, _validator, _madID)
}

// ReloadRegistry is a paid mutator transaction binding the contract method 0x1476601d.
//
// Solidity: function reloadRegistry() returns()
func (_Validators *ValidatorsTransactor) ReloadRegistry(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "reloadRegistry")
}

// ReloadRegistry is a paid mutator transaction binding the contract method 0x1476601d.
//
// Solidity: function reloadRegistry() returns()
func (_Validators *ValidatorsSession) ReloadRegistry() (*types.Transaction, error) {
	return _Validators.Contract.ReloadRegistry(&_Validators.TransactOpts)
}

// ReloadRegistry is a paid mutator transaction binding the contract method 0x1476601d.
//
// Solidity: function reloadRegistry() returns()
func (_Validators *ValidatorsTransactorSession) ReloadRegistry() (*types.Transaction, error) {
	return _Validators.Contract.ReloadRegistry(&_Validators.TransactOpts)
}

// RemoveValidator is a paid mutator transaction binding the contract method 0x844469b2.
//
// Solidity: function removeValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_Validators *ValidatorsTransactor) RemoveValidator(opts *bind.TransactOpts, _validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "removeValidator", _validator, _madID)
}

// RemoveValidator is a paid mutator transaction binding the contract method 0x844469b2.
//
// Solidity: function removeValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_Validators *ValidatorsSession) RemoveValidator(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _Validators.Contract.RemoveValidator(&_Validators.TransactOpts, _validator, _madID)
}

// RemoveValidator is a paid mutator transaction binding the contract method 0x844469b2.
//
// Solidity: function removeValidator(address _validator, uint256[2] _madID) returns(uint8)
func (_Validators *ValidatorsTransactorSession) RemoveValidator(_validator common.Address, _madID [2]*big.Int) (*types.Transaction, error) {
	return _Validators.Contract.RemoveValidator(&_Validators.TransactOpts, _validator, _madID)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_Validators *ValidatorsTransactor) RevokeOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "revokeOperator", _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_Validators *ValidatorsSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _Validators.Contract.RevokeOperator(&_Validators.TransactOpts, _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_Validators *ValidatorsTransactorSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _Validators.Contract.RevokeOperator(&_Validators.TransactOpts, _operator)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_Validators *ValidatorsTransactor) SetAuthority(opts *bind.TransactOpts, authority_ common.Address) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "setAuthority", authority_)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_Validators *ValidatorsSession) SetAuthority(authority_ common.Address) (*types.Transaction, error) {
	return _Validators.Contract.SetAuthority(&_Validators.TransactOpts, authority_)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_Validators *ValidatorsTransactorSession) SetAuthority(authority_ common.Address) (*types.Transaction, error) {
	return _Validators.Contract.SetAuthority(&_Validators.TransactOpts, authority_)
}

// SetMajorStakeFine is a paid mutator transaction binding the contract method 0x78146c2f.
//
// Solidity: function setMajorStakeFine(uint256 _majorStakeFine) returns()
func (_Validators *ValidatorsTransactor) SetMajorStakeFine(opts *bind.TransactOpts, _majorStakeFine *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "setMajorStakeFine", _majorStakeFine)
}

// SetMajorStakeFine is a paid mutator transaction binding the contract method 0x78146c2f.
//
// Solidity: function setMajorStakeFine(uint256 _majorStakeFine) returns()
func (_Validators *ValidatorsSession) SetMajorStakeFine(_majorStakeFine *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetMajorStakeFine(&_Validators.TransactOpts, _majorStakeFine)
}

// SetMajorStakeFine is a paid mutator transaction binding the contract method 0x78146c2f.
//
// Solidity: function setMajorStakeFine(uint256 _majorStakeFine) returns()
func (_Validators *ValidatorsTransactorSession) SetMajorStakeFine(_majorStakeFine *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetMajorStakeFine(&_Validators.TransactOpts, _majorStakeFine)
}

// SetMinimumStake is a paid mutator transaction binding the contract method 0x233e9903.
//
// Solidity: function setMinimumStake(uint256 _minimumStake) returns()
func (_Validators *ValidatorsTransactor) SetMinimumStake(opts *bind.TransactOpts, _minimumStake *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "setMinimumStake", _minimumStake)
}

// SetMinimumStake is a paid mutator transaction binding the contract method 0x233e9903.
//
// Solidity: function setMinimumStake(uint256 _minimumStake) returns()
func (_Validators *ValidatorsSession) SetMinimumStake(_minimumStake *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetMinimumStake(&_Validators.TransactOpts, _minimumStake)
}

// SetMinimumStake is a paid mutator transaction binding the contract method 0x233e9903.
//
// Solidity: function setMinimumStake(uint256 _minimumStake) returns()
func (_Validators *ValidatorsTransactorSession) SetMinimumStake(_minimumStake *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetMinimumStake(&_Validators.TransactOpts, _minimumStake)
}

// SetMinorStakeFine is a paid mutator transaction binding the contract method 0x29693c5c.
//
// Solidity: function setMinorStakeFine(uint256 _minorStakeFine) returns()
func (_Validators *ValidatorsTransactor) SetMinorStakeFine(opts *bind.TransactOpts, _minorStakeFine *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "setMinorStakeFine", _minorStakeFine)
}

// SetMinorStakeFine is a paid mutator transaction binding the contract method 0x29693c5c.
//
// Solidity: function setMinorStakeFine(uint256 _minorStakeFine) returns()
func (_Validators *ValidatorsSession) SetMinorStakeFine(_minorStakeFine *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetMinorStakeFine(&_Validators.TransactOpts, _minorStakeFine)
}

// SetMinorStakeFine is a paid mutator transaction binding the contract method 0x29693c5c.
//
// Solidity: function setMinorStakeFine(uint256 _minorStakeFine) returns()
func (_Validators *ValidatorsTransactorSession) SetMinorStakeFine(_minorStakeFine *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetMinorStakeFine(&_Validators.TransactOpts, _minorStakeFine)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_Validators *ValidatorsTransactor) SetOwner(opts *bind.TransactOpts, owner_ common.Address) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "setOwner", owner_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_Validators *ValidatorsSession) SetOwner(owner_ common.Address) (*types.Transaction, error) {
	return _Validators.Contract.SetOwner(&_Validators.TransactOpts, owner_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_Validators *ValidatorsTransactorSession) SetOwner(owner_ common.Address) (*types.Transaction, error) {
	return _Validators.Contract.SetOwner(&_Validators.TransactOpts, owner_)
}

// SetRewardAmount is a paid mutator transaction binding the contract method 0xa8a65a78.
//
// Solidity: function setRewardAmount(uint256 _rewardAmount) returns()
func (_Validators *ValidatorsTransactor) SetRewardAmount(opts *bind.TransactOpts, _rewardAmount *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "setRewardAmount", _rewardAmount)
}

// SetRewardAmount is a paid mutator transaction binding the contract method 0xa8a65a78.
//
// Solidity: function setRewardAmount(uint256 _rewardAmount) returns()
func (_Validators *ValidatorsSession) SetRewardAmount(_rewardAmount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetRewardAmount(&_Validators.TransactOpts, _rewardAmount)
}

// SetRewardAmount is a paid mutator transaction binding the contract method 0xa8a65a78.
//
// Solidity: function setRewardAmount(uint256 _rewardAmount) returns()
func (_Validators *ValidatorsTransactorSession) SetRewardAmount(_rewardAmount *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetRewardAmount(&_Validators.TransactOpts, _rewardAmount)
}

// SetRewardBonus is a paid mutator transaction binding the contract method 0xf95d80fa.
//
// Solidity: function setRewardBonus(uint256 _rewardBonus) returns()
func (_Validators *ValidatorsTransactor) SetRewardBonus(opts *bind.TransactOpts, _rewardBonus *big.Int) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "setRewardBonus", _rewardBonus)
}

// SetRewardBonus is a paid mutator transaction binding the contract method 0xf95d80fa.
//
// Solidity: function setRewardBonus(uint256 _rewardBonus) returns()
func (_Validators *ValidatorsSession) SetRewardBonus(_rewardBonus *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetRewardBonus(&_Validators.TransactOpts, _rewardBonus)
}

// SetRewardBonus is a paid mutator transaction binding the contract method 0xf95d80fa.
//
// Solidity: function setRewardBonus(uint256 _rewardBonus) returns()
func (_Validators *ValidatorsTransactorSession) SetRewardBonus(_rewardBonus *big.Int) (*types.Transaction, error) {
	return _Validators.Contract.SetRewardBonus(&_Validators.TransactOpts, _rewardBonus)
}

// SetValidatorMaxCount is a paid mutator transaction binding the contract method 0x2cab37f7.
//
// Solidity: function setValidatorMaxCount(uint8 _validatorMaxCount) returns()
func (_Validators *ValidatorsTransactor) SetValidatorMaxCount(opts *bind.TransactOpts, _validatorMaxCount uint8) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "setValidatorMaxCount", _validatorMaxCount)
}

// SetValidatorMaxCount is a paid mutator transaction binding the contract method 0x2cab37f7.
//
// Solidity: function setValidatorMaxCount(uint8 _validatorMaxCount) returns()
func (_Validators *ValidatorsSession) SetValidatorMaxCount(_validatorMaxCount uint8) (*types.Transaction, error) {
	return _Validators.Contract.SetValidatorMaxCount(&_Validators.TransactOpts, _validatorMaxCount)
}

// SetValidatorMaxCount is a paid mutator transaction binding the contract method 0x2cab37f7.
//
// Solidity: function setValidatorMaxCount(uint8 _validatorMaxCount) returns()
func (_Validators *ValidatorsTransactorSession) SetValidatorMaxCount(_validatorMaxCount uint8) (*types.Transaction, error) {
	return _Validators.Contract.SetValidatorMaxCount(&_Validators.TransactOpts, _validatorMaxCount)
}

// Snapshot is a paid mutator transaction binding the contract method 0x08ca1f25.
//
// Solidity: function snapshot(bytes _signatureGroup, bytes _bclaims) returns()
func (_Validators *ValidatorsTransactor) Snapshot(opts *bind.TransactOpts, _signatureGroup []byte, _bclaims []byte) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "snapshot", _signatureGroup, _bclaims)
}

// Snapshot is a paid mutator transaction binding the contract method 0x08ca1f25.
//
// Solidity: function snapshot(bytes _signatureGroup, bytes _bclaims) returns()
func (_Validators *ValidatorsSession) Snapshot(_signatureGroup []byte, _bclaims []byte) (*types.Transaction, error) {
	return _Validators.Contract.Snapshot(&_Validators.TransactOpts, _signatureGroup, _bclaims)
}

// Snapshot is a paid mutator transaction binding the contract method 0x08ca1f25.
//
// Solidity: function snapshot(bytes _signatureGroup, bytes _bclaims) returns()
func (_Validators *ValidatorsTransactorSession) Snapshot(_signatureGroup []byte, _bclaims []byte) (*types.Transaction, error) {
	return _Validators.Contract.Snapshot(&_Validators.TransactOpts, _signatureGroup, _bclaims)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_Validators *ValidatorsTransactor) Start(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "start")
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_Validators *ValidatorsSession) Start() (*types.Transaction, error) {
	return _Validators.Contract.Start(&_Validators.TransactOpts)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_Validators *ValidatorsTransactorSession) Start() (*types.Transaction, error) {
	return _Validators.Contract.Start(&_Validators.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_Validators *ValidatorsTransactor) Stop(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Validators.contract.Transact(opts, "stop")
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_Validators *ValidatorsSession) Stop() (*types.Transaction, error) {
	return _Validators.Contract.Stop(&_Validators.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_Validators *ValidatorsTransactorSession) Stop() (*types.Transaction, error) {
	return _Validators.Contract.Stop(&_Validators.TransactOpts)
}

// ValidatorsLogSetAuthorityIterator is returned from FilterLogSetAuthority and is used to iterate over the raw logs and unpacked data for LogSetAuthority events raised by the Validators contract.
type ValidatorsLogSetAuthorityIterator struct {
	Event *ValidatorsLogSetAuthority // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsLogSetAuthorityIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsLogSetAuthority)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsLogSetAuthority)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsLogSetAuthorityIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsLogSetAuthorityIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsLogSetAuthority represents a LogSetAuthority event raised by the Validators contract.
type ValidatorsLogSetAuthority struct {
	Authority common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterLogSetAuthority is a free log retrieval operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_Validators *ValidatorsFilterer) FilterLogSetAuthority(opts *bind.FilterOpts, authority []common.Address) (*ValidatorsLogSetAuthorityIterator, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}

	logs, sub, err := _Validators.contract.FilterLogs(opts, "LogSetAuthority", authorityRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsLogSetAuthorityIterator{contract: _Validators.contract, event: "LogSetAuthority", logs: logs, sub: sub}, nil
}

// WatchLogSetAuthority is a free log subscription operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_Validators *ValidatorsFilterer) WatchLogSetAuthority(opts *bind.WatchOpts, sink chan<- *ValidatorsLogSetAuthority, authority []common.Address) (event.Subscription, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}

	logs, sub, err := _Validators.contract.WatchLogs(opts, "LogSetAuthority", authorityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsLogSetAuthority)
				if err := _Validators.contract.UnpackLog(event, "LogSetAuthority", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogSetAuthority is a log parse operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_Validators *ValidatorsFilterer) ParseLogSetAuthority(log types.Log) (*ValidatorsLogSetAuthority, error) {
	event := new(ValidatorsLogSetAuthority)
	if err := _Validators.contract.UnpackLog(event, "LogSetAuthority", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorsLogSetOwnerIterator is returned from FilterLogSetOwner and is used to iterate over the raw logs and unpacked data for LogSetOwner events raised by the Validators contract.
type ValidatorsLogSetOwnerIterator struct {
	Event *ValidatorsLogSetOwner // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsLogSetOwnerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsLogSetOwner)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsLogSetOwner)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsLogSetOwnerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsLogSetOwnerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsLogSetOwner represents a LogSetOwner event raised by the Validators contract.
type ValidatorsLogSetOwner struct {
	Owner common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogSetOwner is a free log retrieval operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_Validators *ValidatorsFilterer) FilterLogSetOwner(opts *bind.FilterOpts, owner []common.Address) (*ValidatorsLogSetOwnerIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Validators.contract.FilterLogs(opts, "LogSetOwner", ownerRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsLogSetOwnerIterator{contract: _Validators.contract, event: "LogSetOwner", logs: logs, sub: sub}, nil
}

// WatchLogSetOwner is a free log subscription operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_Validators *ValidatorsFilterer) WatchLogSetOwner(opts *bind.WatchOpts, sink chan<- *ValidatorsLogSetOwner, owner []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Validators.contract.WatchLogs(opts, "LogSetOwner", ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsLogSetOwner)
				if err := _Validators.contract.UnpackLog(event, "LogSetOwner", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogSetOwner is a log parse operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_Validators *ValidatorsFilterer) ParseLogSetOwner(log types.Log) (*ValidatorsLogSetOwner, error) {
	event := new(ValidatorsLogSetOwner)
	if err := _Validators.contract.UnpackLog(event, "LogSetOwner", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorsSnapshotTakenIterator is returned from FilterSnapshotTaken and is used to iterate over the raw logs and unpacked data for SnapshotTaken events raised by the Validators contract.
type ValidatorsSnapshotTakenIterator struct {
	Event *ValidatorsSnapshotTaken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsSnapshotTakenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsSnapshotTaken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsSnapshotTaken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsSnapshotTakenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsSnapshotTakenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsSnapshotTaken represents a SnapshotTaken event raised by the Validators contract.
type ValidatorsSnapshotTaken struct {
	ChainId        uint32
	Epoch          *big.Int
	Height         uint32
	Validator      common.Address
	StartingETHDKG bool
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterSnapshotTaken is a free log retrieval operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_Validators *ValidatorsFilterer) FilterSnapshotTaken(opts *bind.FilterOpts, epoch []*big.Int, validator []common.Address) (*ValidatorsSnapshotTakenIterator, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Validators.contract.FilterLogs(opts, "SnapshotTaken", epochRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsSnapshotTakenIterator{contract: _Validators.contract, event: "SnapshotTaken", logs: logs, sub: sub}, nil
}

// WatchSnapshotTaken is a free log subscription operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_Validators *ValidatorsFilterer) WatchSnapshotTaken(opts *bind.WatchOpts, sink chan<- *ValidatorsSnapshotTaken, epoch []*big.Int, validator []common.Address) (event.Subscription, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Validators.contract.WatchLogs(opts, "SnapshotTaken", epochRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsSnapshotTaken)
				if err := _Validators.contract.UnpackLog(event, "SnapshotTaken", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSnapshotTaken is a log parse operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_Validators *ValidatorsFilterer) ParseSnapshotTaken(log types.Log) (*ValidatorsSnapshotTaken, error) {
	event := new(ValidatorsSnapshotTaken)
	if err := _Validators.contract.UnpackLog(event, "SnapshotTaken", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorsValidatorCreatedIterator is returned from FilterValidatorCreated and is used to iterate over the raw logs and unpacked data for ValidatorCreated events raised by the Validators contract.
type ValidatorsValidatorCreatedIterator struct {
	Event *ValidatorsValidatorCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsValidatorCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsValidatorCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsValidatorCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsValidatorCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsValidatorCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsValidatorCreated represents a ValidatorCreated event raised by the Validators contract.
type ValidatorsValidatorCreated struct {
	Validator common.Address
	Signer    common.Address
	MadID     [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorCreated is a free log retrieval operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_Validators *ValidatorsFilterer) FilterValidatorCreated(opts *bind.FilterOpts, validator []common.Address, signer []common.Address) (*ValidatorsValidatorCreatedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var signerRule []interface{}
	for _, signerItem := range signer {
		signerRule = append(signerRule, signerItem)
	}

	logs, sub, err := _Validators.contract.FilterLogs(opts, "ValidatorCreated", validatorRule, signerRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsValidatorCreatedIterator{contract: _Validators.contract, event: "ValidatorCreated", logs: logs, sub: sub}, nil
}

// WatchValidatorCreated is a free log subscription operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_Validators *ValidatorsFilterer) WatchValidatorCreated(opts *bind.WatchOpts, sink chan<- *ValidatorsValidatorCreated, validator []common.Address, signer []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var signerRule []interface{}
	for _, signerItem := range signer {
		signerRule = append(signerRule, signerItem)
	}

	logs, sub, err := _Validators.contract.WatchLogs(opts, "ValidatorCreated", validatorRule, signerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsValidatorCreated)
				if err := _Validators.contract.UnpackLog(event, "ValidatorCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorCreated is a log parse operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_Validators *ValidatorsFilterer) ParseValidatorCreated(log types.Log) (*ValidatorsValidatorCreated, error) {
	event := new(ValidatorsValidatorCreated)
	if err := _Validators.contract.UnpackLog(event, "ValidatorCreated", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorsValidatorJoinedIterator is returned from FilterValidatorJoined and is used to iterate over the raw logs and unpacked data for ValidatorJoined events raised by the Validators contract.
type ValidatorsValidatorJoinedIterator struct {
	Event *ValidatorsValidatorJoined // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsValidatorJoinedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsValidatorJoined)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsValidatorJoined)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsValidatorJoinedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsValidatorJoinedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsValidatorJoined represents a ValidatorJoined event raised by the Validators contract.
type ValidatorsValidatorJoined struct {
	Validator common.Address
	MadID     [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorJoined is a free log retrieval operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_Validators *ValidatorsFilterer) FilterValidatorJoined(opts *bind.FilterOpts, validator []common.Address) (*ValidatorsValidatorJoinedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Validators.contract.FilterLogs(opts, "ValidatorJoined", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsValidatorJoinedIterator{contract: _Validators.contract, event: "ValidatorJoined", logs: logs, sub: sub}, nil
}

// WatchValidatorJoined is a free log subscription operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_Validators *ValidatorsFilterer) WatchValidatorJoined(opts *bind.WatchOpts, sink chan<- *ValidatorsValidatorJoined, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Validators.contract.WatchLogs(opts, "ValidatorJoined", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsValidatorJoined)
				if err := _Validators.contract.UnpackLog(event, "ValidatorJoined", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorJoined is a log parse operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_Validators *ValidatorsFilterer) ParseValidatorJoined(log types.Log) (*ValidatorsValidatorJoined, error) {
	event := new(ValidatorsValidatorJoined)
	if err := _Validators.contract.UnpackLog(event, "ValidatorJoined", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorsValidatorLeftIterator is returned from FilterValidatorLeft and is used to iterate over the raw logs and unpacked data for ValidatorLeft events raised by the Validators contract.
type ValidatorsValidatorLeftIterator struct {
	Event *ValidatorsValidatorLeft // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsValidatorLeftIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsValidatorLeft)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsValidatorLeft)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsValidatorLeftIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsValidatorLeftIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsValidatorLeft represents a ValidatorLeft event raised by the Validators contract.
type ValidatorsValidatorLeft struct {
	Validator common.Address
	PkHash    [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorLeft is a free log retrieval operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_Validators *ValidatorsFilterer) FilterValidatorLeft(opts *bind.FilterOpts, validator []common.Address) (*ValidatorsValidatorLeftIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Validators.contract.FilterLogs(opts, "ValidatorLeft", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsValidatorLeftIterator{contract: _Validators.contract, event: "ValidatorLeft", logs: logs, sub: sub}, nil
}

// WatchValidatorLeft is a free log subscription operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_Validators *ValidatorsFilterer) WatchValidatorLeft(opts *bind.WatchOpts, sink chan<- *ValidatorsValidatorLeft, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Validators.contract.WatchLogs(opts, "ValidatorLeft", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsValidatorLeft)
				if err := _Validators.contract.UnpackLog(event, "ValidatorLeft", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorLeft is a log parse operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_Validators *ValidatorsFilterer) ParseValidatorLeft(log types.Log) (*ValidatorsValidatorLeft, error) {
	event := new(ValidatorsValidatorLeft)
	if err := _Validators.contract.UnpackLog(event, "ValidatorLeft", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorsValidatorQueuedIterator is returned from FilterValidatorQueued and is used to iterate over the raw logs and unpacked data for ValidatorQueued events raised by the Validators contract.
type ValidatorsValidatorQueuedIterator struct {
	Event *ValidatorsValidatorQueued // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsValidatorQueuedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsValidatorQueued)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsValidatorQueued)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsValidatorQueuedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsValidatorQueuedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsValidatorQueued represents a ValidatorQueued event raised by the Validators contract.
type ValidatorsValidatorQueued struct {
	Validator common.Address
	PkHash    [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorQueued is a free log retrieval operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_Validators *ValidatorsFilterer) FilterValidatorQueued(opts *bind.FilterOpts, validator []common.Address) (*ValidatorsValidatorQueuedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Validators.contract.FilterLogs(opts, "ValidatorQueued", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsValidatorQueuedIterator{contract: _Validators.contract, event: "ValidatorQueued", logs: logs, sub: sub}, nil
}

// WatchValidatorQueued is a free log subscription operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_Validators *ValidatorsFilterer) WatchValidatorQueued(opts *bind.WatchOpts, sink chan<- *ValidatorsValidatorQueued, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _Validators.contract.WatchLogs(opts, "ValidatorQueued", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsValidatorQueued)
				if err := _Validators.contract.UnpackLog(event, "ValidatorQueued", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorQueued is a log parse operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_Validators *ValidatorsFilterer) ParseValidatorQueued(log types.Log) (*ValidatorsValidatorQueued, error) {
	event := new(ValidatorsValidatorQueued)
	if err := _Validators.contract.UnpackLog(event, "ValidatorQueued", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorsDiamondABI is the input ABI used to generate the binding from.
const ValidatorsDiamondABI = "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]"

// ValidatorsDiamondBin is the compiled bytecode used for deploying new contracts.
var ValidatorsDiamondBin = "0x608060405260006100186102cd60201b6101a81760201c565b9050338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018160000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060006100cb6102fa60201b61017b1760201c565b905060006040516100db90610327565b604051809103906000f0801580156100f7573d6000803e3d6000fd5b5090508082600001600063208865cc60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508082600001600063ca5a0fae60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508082600001600063de380fbf60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050610334565b6000807f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a90508091505090565b6000807fac6aff0df35b6b6d45d1a9336e974b1bccef775f3de2917da887734bb298b7a990508091505090565b61077d8061054e83390190565b61020b806103436000396000f3fe60806040523661000b57005b600061001561017b565b9050600081600001600080357fffffffff00000000000000000000000000000000000000000000000000000000167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610155576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f6e6f20666163657420666f722073656c6563746f72000000000000000000000081525060200191505060405180910390fd5b3660008037600080366000845af43d6000803e8060008114610176573d6000f35b3d6000fd5b6000807fac6aff0df35b6b6d45d1a9336e974b1bccef775f3de2917da887734bb298b7a990508091505090565b6000807f31434318735a8e6385da596be365952169e52986860b974818986b522d23520a9050809150509056fea2646970667358221220ade0d9008836381083b3bfaee00bf4ef6ebabd73c1019fe014947d74bd37c30e64736f6c63430007060033608060405234801561001057600080fd5b5061075d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063208865cc14610046578063ca5a0fae14610062578063de380fbf1461007e575b600080fd5b610060600480360381019061005b919061058e565b61009a565b005b61007c60048036038101906100779190610565565b61021f565b005b6100986004803603810190610093919061058e565b610388565b005b60006100a461050e565b9050600073ffffffffffffffffffffffffffffffffffffffff16816000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610188576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017f9061064a565b60405180910390fd5b81816000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b600061022961050e565b9050600073ffffffffffffffffffffffffffffffffffffffff16816000016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561030e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103059061066a565b60405180910390fd5b806000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555050565b600061039261050e565b9050600073ffffffffffffffffffffffffffffffffffffffff16816000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610477576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046e9061066a565b60405180910390fd5b81816000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6000807fac6aff0df35b6b6d45d1a9336e974b1bccef775f3de2917da887734bb298b7a990508091505090565b60008135905061054a816106f9565b92915050565b60008135905061055f81610710565b92915050565b60006020828403121561057757600080fd5b600061058584828501610550565b91505092915050565b600080604083850312156105a157600080fd5b60006105af85828601610550565b92505060206105c08582860161053b565b9150509250929050565b60006105d760178361068a565b91507f73656c6563746f7220616c7265616479206578697374730000000000000000006000830152602082019050919050565b600061061760178361068a565b91507f73656c6563746f7220646f6573206e6f742065786973740000000000000000006000830152602082019050919050565b60006020820190508181036000830152610663816105ca565b9050919050565b600060208201905081810360008301526106838161060a565b9050919050565b600082825260208201905092915050565b60006106a6826106d9565b9050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6107028161069b565b811461070d57600080fd5b50565b610719816106ad565b811461072457600080fd5b5056fea264697066735822122069d60cc97ceeb51430eec9b2c60e0f74b88b6a4b60a7c2748c0be23edc1e83a464736f6c63430007060033"

// DeployValidatorsDiamond deploys a new Ethereum contract, binding an instance of ValidatorsDiamond to it.
func DeployValidatorsDiamond(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ValidatorsDiamond, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorsDiamondABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ValidatorsDiamondBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ValidatorsDiamond{ValidatorsDiamondCaller: ValidatorsDiamondCaller{contract: contract}, ValidatorsDiamondTransactor: ValidatorsDiamondTransactor{contract: contract}, ValidatorsDiamondFilterer: ValidatorsDiamondFilterer{contract: contract}}, nil
}

// ValidatorsDiamond is an auto generated Go binding around an Ethereum contract.
type ValidatorsDiamond struct {
	ValidatorsDiamondCaller     // Read-only binding to the contract
	ValidatorsDiamondTransactor // Write-only binding to the contract
	ValidatorsDiamondFilterer   // Log filterer for contract events
}

// ValidatorsDiamondCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorsDiamondCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorsDiamondTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorsDiamondTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorsDiamondFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorsDiamondFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorsDiamondSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorsDiamondSession struct {
	Contract     *ValidatorsDiamond // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// ValidatorsDiamondCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorsDiamondCallerSession struct {
	Contract *ValidatorsDiamondCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// ValidatorsDiamondTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorsDiamondTransactorSession struct {
	Contract     *ValidatorsDiamondTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// ValidatorsDiamondRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorsDiamondRaw struct {
	Contract *ValidatorsDiamond // Generic contract binding to access the raw methods on
}

// ValidatorsDiamondCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorsDiamondCallerRaw struct {
	Contract *ValidatorsDiamondCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorsDiamondTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorsDiamondTransactorRaw struct {
	Contract *ValidatorsDiamondTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorsDiamond creates a new instance of ValidatorsDiamond, bound to a specific deployed contract.
func NewValidatorsDiamond(address common.Address, backend bind.ContractBackend) (*ValidatorsDiamond, error) {
	contract, err := bindValidatorsDiamond(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorsDiamond{ValidatorsDiamondCaller: ValidatorsDiamondCaller{contract: contract}, ValidatorsDiamondTransactor: ValidatorsDiamondTransactor{contract: contract}, ValidatorsDiamondFilterer: ValidatorsDiamondFilterer{contract: contract}}, nil
}

// NewValidatorsDiamondCaller creates a new read-only instance of ValidatorsDiamond, bound to a specific deployed contract.
func NewValidatorsDiamondCaller(address common.Address, caller bind.ContractCaller) (*ValidatorsDiamondCaller, error) {
	contract, err := bindValidatorsDiamond(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorsDiamondCaller{contract: contract}, nil
}

// NewValidatorsDiamondTransactor creates a new write-only instance of ValidatorsDiamond, bound to a specific deployed contract.
func NewValidatorsDiamondTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorsDiamondTransactor, error) {
	contract, err := bindValidatorsDiamond(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorsDiamondTransactor{contract: contract}, nil
}

// NewValidatorsDiamondFilterer creates a new log filterer instance of ValidatorsDiamond, bound to a specific deployed contract.
func NewValidatorsDiamondFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorsDiamondFilterer, error) {
	contract, err := bindValidatorsDiamond(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorsDiamondFilterer{contract: contract}, nil
}

// bindValidatorsDiamond binds a generic wrapper to an already deployed contract.
func bindValidatorsDiamond(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorsDiamondABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorsDiamond *ValidatorsDiamondRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ValidatorsDiamond.Contract.ValidatorsDiamondCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorsDiamond *ValidatorsDiamondRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorsDiamond.Contract.ValidatorsDiamondTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorsDiamond *ValidatorsDiamondRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorsDiamond.Contract.ValidatorsDiamondTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorsDiamond *ValidatorsDiamondCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ValidatorsDiamond.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorsDiamond *ValidatorsDiamondTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorsDiamond.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorsDiamond *ValidatorsDiamondTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorsDiamond.Contract.contract.Transact(opts, method, params...)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_ValidatorsDiamond *ValidatorsDiamondTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _ValidatorsDiamond.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_ValidatorsDiamond *ValidatorsDiamondSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _ValidatorsDiamond.Contract.Fallback(&_ValidatorsDiamond.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_ValidatorsDiamond *ValidatorsDiamondTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _ValidatorsDiamond.Contract.Fallback(&_ValidatorsDiamond.TransactOpts, calldata)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ValidatorsDiamond *ValidatorsDiamondTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorsDiamond.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ValidatorsDiamond *ValidatorsDiamondSession) Receive() (*types.Transaction, error) {
	return _ValidatorsDiamond.Contract.Receive(&_ValidatorsDiamond.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ValidatorsDiamond *ValidatorsDiamondTransactorSession) Receive() (*types.Transaction, error) {
	return _ValidatorsDiamond.Contract.Receive(&_ValidatorsDiamond.TransactOpts)
}

// ValidatorsDiamondTestABI is the input ABI used to generate the binding from.
const ValidatorsDiamondTestABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"log_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"log_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"log_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"name\":\"log_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"log_named_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\"}],\"name\":\"log_named_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\"}],\"name\":\"log_named_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"}],\"name\":\"log_named_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"}],\"name\":\"log_named_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"log_named_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"log_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"logs\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testBuildCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testExtractUint256\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testExtractUint32\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testFailNotFacet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testSetSnapshot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testSnapshot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// ValidatorsDiamondTestBin is the compiled bytecode used for deploying new contracts.
var ValidatorsDiamondTestBin = ""

// DeployValidatorsDiamondTest deploys a new Ethereum contract, binding an instance of ValidatorsDiamondTest to it.
func DeployValidatorsDiamondTest(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ValidatorsDiamondTest, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorsDiamondTestABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ValidatorsDiamondTestBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ValidatorsDiamondTest{ValidatorsDiamondTestCaller: ValidatorsDiamondTestCaller{contract: contract}, ValidatorsDiamondTestTransactor: ValidatorsDiamondTestTransactor{contract: contract}, ValidatorsDiamondTestFilterer: ValidatorsDiamondTestFilterer{contract: contract}}, nil
}

// ValidatorsDiamondTest is an auto generated Go binding around an Ethereum contract.
type ValidatorsDiamondTest struct {
	ValidatorsDiamondTestCaller     // Read-only binding to the contract
	ValidatorsDiamondTestTransactor // Write-only binding to the contract
	ValidatorsDiamondTestFilterer   // Log filterer for contract events
}

// ValidatorsDiamondTestCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorsDiamondTestCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorsDiamondTestTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorsDiamondTestTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorsDiamondTestFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorsDiamondTestFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorsDiamondTestSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorsDiamondTestSession struct {
	Contract     *ValidatorsDiamondTest // Generic contract binding to set the session for
	CallOpts     bind.CallOpts          // Call options to use throughout this session
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// ValidatorsDiamondTestCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorsDiamondTestCallerSession struct {
	Contract *ValidatorsDiamondTestCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                // Call options to use throughout this session
}

// ValidatorsDiamondTestTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorsDiamondTestTransactorSession struct {
	Contract     *ValidatorsDiamondTestTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                // Transaction auth options to use throughout this session
}

// ValidatorsDiamondTestRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorsDiamondTestRaw struct {
	Contract *ValidatorsDiamondTest // Generic contract binding to access the raw methods on
}

// ValidatorsDiamondTestCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorsDiamondTestCallerRaw struct {
	Contract *ValidatorsDiamondTestCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorsDiamondTestTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorsDiamondTestTransactorRaw struct {
	Contract *ValidatorsDiamondTestTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorsDiamondTest creates a new instance of ValidatorsDiamondTest, bound to a specific deployed contract.
func NewValidatorsDiamondTest(address common.Address, backend bind.ContractBackend) (*ValidatorsDiamondTest, error) {
	contract, err := bindValidatorsDiamondTest(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorsDiamondTest{ValidatorsDiamondTestCaller: ValidatorsDiamondTestCaller{contract: contract}, ValidatorsDiamondTestTransactor: ValidatorsDiamondTestTransactor{contract: contract}, ValidatorsDiamondTestFilterer: ValidatorsDiamondTestFilterer{contract: contract}}, nil
}

// NewValidatorsDiamondTestCaller creates a new read-only instance of ValidatorsDiamondTest, bound to a specific deployed contract.
func NewValidatorsDiamondTestCaller(address common.Address, caller bind.ContractCaller) (*ValidatorsDiamondTestCaller, error) {
	contract, err := bindValidatorsDiamondTest(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorsDiamondTestCaller{contract: contract}, nil
}

// NewValidatorsDiamondTestTransactor creates a new write-only instance of ValidatorsDiamondTest, bound to a specific deployed contract.
func NewValidatorsDiamondTestTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorsDiamondTestTransactor, error) {
	contract, err := bindValidatorsDiamondTest(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorsDiamondTestTransactor{contract: contract}, nil
}

// NewValidatorsDiamondTestFilterer creates a new log filterer instance of ValidatorsDiamondTest, bound to a specific deployed contract.
func NewValidatorsDiamondTestFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorsDiamondTestFilterer, error) {
	contract, err := bindValidatorsDiamondTest(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorsDiamondTestFilterer{contract: contract}, nil
}

// bindValidatorsDiamondTest binds a generic wrapper to an already deployed contract.
func bindValidatorsDiamondTest(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorsDiamondTestABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorsDiamondTest *ValidatorsDiamondTestRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ValidatorsDiamondTest.Contract.ValidatorsDiamondTestCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorsDiamondTest *ValidatorsDiamondTestRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorsDiamondTest.Contract.ValidatorsDiamondTestTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorsDiamondTest *ValidatorsDiamondTestRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorsDiamondTest.Contract.ValidatorsDiamondTestTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorsDiamondTest *ValidatorsDiamondTestCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ValidatorsDiamondTest.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorsDiamondTest *ValidatorsDiamondTestTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorsDiamondTest.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorsDiamondTest *ValidatorsDiamondTestTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorsDiamondTest.Contract.contract.Transact(opts, method, params...)
}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestCaller) ISTEST(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ValidatorsDiamondTest.contract.Call(opts, out, "IS_TEST")
	return *ret0, err
}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestSession) ISTEST() (bool, error) {
	return _ValidatorsDiamondTest.Contract.ISTEST(&_ValidatorsDiamondTest.CallOpts)
}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestCallerSession) ISTEST() (bool, error) {
	return _ValidatorsDiamondTest.Contract.ISTEST(&_ValidatorsDiamondTest.CallOpts)
}

// Failed is a free data retrieval call binding the contract method 0xba414fa6.
//
// Solidity: function failed() view returns(bool)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestCaller) Failed(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ValidatorsDiamondTest.contract.Call(opts, out, "failed")
	return *ret0, err
}

// Failed is a free data retrieval call binding the contract method 0xba414fa6.
//
// Solidity: function failed() view returns(bool)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestSession) Failed() (bool, error) {
	return _ValidatorsDiamondTest.Contract.Failed(&_ValidatorsDiamondTest.CallOpts)
}

// Failed is a free data retrieval call binding the contract method 0xba414fa6.
//
// Solidity: function failed() view returns(bool)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestCallerSession) Failed() (bool, error) {
	return _ValidatorsDiamondTest.Contract.Failed(&_ValidatorsDiamondTest.CallOpts)
}

// SetUp is a paid mutator transaction binding the contract method 0x0a9254e4.
//
// Solidity: function setUp() returns()
func (_ValidatorsDiamondTest *ValidatorsDiamondTestTransactor) SetUp(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorsDiamondTest.contract.Transact(opts, "setUp")
}

// SetUp is a paid mutator transaction binding the contract method 0x0a9254e4.
//
// Solidity: function setUp() returns()
func (_ValidatorsDiamondTest *ValidatorsDiamondTestSession) SetUp() (*types.Transaction, error) {
	return _ValidatorsDiamondTest.Contract.SetUp(&_ValidatorsDiamondTest.TransactOpts)
}

// SetUp is a paid mutator transaction binding the contract method 0x0a9254e4.
//
// Solidity: function setUp() returns()
func (_ValidatorsDiamondTest *ValidatorsDiamondTestTransactorSession) SetUp() (*types.Transaction, error) {
	return _ValidatorsDiamondTest.Contract.SetUp(&_ValidatorsDiamondTest.TransactOpts)
}

// TestBuildCost is a paid mutator transaction binding the contract method 0x25138736.
//
// Solidity: function testBuildCost() returns()
func (_ValidatorsDiamondTest *ValidatorsDiamondTestTransactor) TestBuildCost(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorsDiamondTest.contract.Transact(opts, "testBuildCost")
}

// TestBuildCost is a paid mutator transaction binding the contract method 0x25138736.
//
// Solidity: function testBuildCost() returns()
func (_ValidatorsDiamondTest *ValidatorsDiamondTestSession) TestBuildCost() (*types.Transaction, error) {
	return _ValidatorsDiamondTest.Contract.TestBuildCost(&_ValidatorsDiamondTest.TransactOpts)
}

// TestBuildCost is a paid mutator transaction binding the contract method 0x25138736.
//
// Solidity: function testBuildCost() returns()
func (_ValidatorsDiamondTest *ValidatorsDiamondTestTransactorSession) TestBuildCost() (*types.Transaction, error) {
	return _ValidatorsDiamondTest.Contract.TestBuildCost(&_ValidatorsDiamondTest.TransactOpts)
}

// TestExtractUint256 is a paid mutator transaction binding the contract method 0x3e6fe276.
//
// Solidity: function testExtractUint256() returns()
func (_ValidatorsDiamondTest *ValidatorsDiamondTestTransactor) TestExtractUint256(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorsDiamondTest.contract.Transact(opts, "testExtractUint256")
}

// TestExtractUint256 is a paid mutator transaction binding the contract method 0x3e6fe276.
//
// Solidity: function testExtractUint256() returns()
func (_ValidatorsDiamondTest *ValidatorsDiamondTestSession) TestExtractUint256() (*types.Transaction, error) {
	return _ValidatorsDiamondTest.Contract.TestExtractUint256(&_ValidatorsDiamondTest.TransactOpts)
}

// TestExtractUint256 is a paid mutator transaction binding the contract method 0x3e6fe276.
//
// Solidity: function testExtractUint256() returns()
func (_ValidatorsDiamondTest *ValidatorsDiamondTestTransactorSession) TestExtractUint256() (*types.Transaction, error) {
	return _ValidatorsDiamondTest.Contract.TestExtractUint256(&_ValidatorsDiamondTest.TransactOpts)
}

// TestExtractUint32 is a paid mutator transaction binding the contract method 0x83505969.
//
// Solidity: function testExtractUint32() returns()
func (_ValidatorsDiamondTest *ValidatorsDiamondTestTransactor) TestExtractUint32(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorsDiamondTest.contract.Transact(opts, "testExtractUint32")
}

// TestExtractUint32 is a paid mutator transaction binding the contract method 0x83505969.
//
// Solidity: function testExtractUint32() returns()
func (_ValidatorsDiamondTest *ValidatorsDiamondTestSession) TestExtractUint32() (*types.Transaction, error) {
	return _ValidatorsDiamondTest.Contract.TestExtractUint32(&_ValidatorsDiamondTest.TransactOpts)
}

// TestExtractUint32 is a paid mutator transaction binding the contract method 0x83505969.
//
// Solidity: function testExtractUint32() returns()
func (_ValidatorsDiamondTest *ValidatorsDiamondTestTransactorSession) TestExtractUint32() (*types.Transaction, error) {
	return _ValidatorsDiamondTest.Contract.TestExtractUint32(&_ValidatorsDiamondTest.TransactOpts)
}

// TestFailNotFacet is a paid mutator transaction binding the contract method 0x6edcfb9d.
//
// Solidity: function testFailNotFacet() returns()
func (_ValidatorsDiamondTest *ValidatorsDiamondTestTransactor) TestFailNotFacet(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorsDiamondTest.contract.Transact(opts, "testFailNotFacet")
}

// TestFailNotFacet is a paid mutator transaction binding the contract method 0x6edcfb9d.
//
// Solidity: function testFailNotFacet() returns()
func (_ValidatorsDiamondTest *ValidatorsDiamondTestSession) TestFailNotFacet() (*types.Transaction, error) {
	return _ValidatorsDiamondTest.Contract.TestFailNotFacet(&_ValidatorsDiamondTest.TransactOpts)
}

// TestFailNotFacet is a paid mutator transaction binding the contract method 0x6edcfb9d.
//
// Solidity: function testFailNotFacet() returns()
func (_ValidatorsDiamondTest *ValidatorsDiamondTestTransactorSession) TestFailNotFacet() (*types.Transaction, error) {
	return _ValidatorsDiamondTest.Contract.TestFailNotFacet(&_ValidatorsDiamondTest.TransactOpts)
}

// TestSetSnapshot is a paid mutator transaction binding the contract method 0xb78b20fe.
//
// Solidity: function testSetSnapshot() returns()
func (_ValidatorsDiamondTest *ValidatorsDiamondTestTransactor) TestSetSnapshot(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorsDiamondTest.contract.Transact(opts, "testSetSnapshot")
}

// TestSetSnapshot is a paid mutator transaction binding the contract method 0xb78b20fe.
//
// Solidity: function testSetSnapshot() returns()
func (_ValidatorsDiamondTest *ValidatorsDiamondTestSession) TestSetSnapshot() (*types.Transaction, error) {
	return _ValidatorsDiamondTest.Contract.TestSetSnapshot(&_ValidatorsDiamondTest.TransactOpts)
}

// TestSetSnapshot is a paid mutator transaction binding the contract method 0xb78b20fe.
//
// Solidity: function testSetSnapshot() returns()
func (_ValidatorsDiamondTest *ValidatorsDiamondTestTransactorSession) TestSetSnapshot() (*types.Transaction, error) {
	return _ValidatorsDiamondTest.Contract.TestSetSnapshot(&_ValidatorsDiamondTest.TransactOpts)
}

// TestSnapshot is a paid mutator transaction binding the contract method 0xbefb3b8a.
//
// Solidity: function testSnapshot() returns()
func (_ValidatorsDiamondTest *ValidatorsDiamondTestTransactor) TestSnapshot(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorsDiamondTest.contract.Transact(opts, "testSnapshot")
}

// TestSnapshot is a paid mutator transaction binding the contract method 0xbefb3b8a.
//
// Solidity: function testSnapshot() returns()
func (_ValidatorsDiamondTest *ValidatorsDiamondTestSession) TestSnapshot() (*types.Transaction, error) {
	return _ValidatorsDiamondTest.Contract.TestSnapshot(&_ValidatorsDiamondTest.TransactOpts)
}

// TestSnapshot is a paid mutator transaction binding the contract method 0xbefb3b8a.
//
// Solidity: function testSnapshot() returns()
func (_ValidatorsDiamondTest *ValidatorsDiamondTestTransactorSession) TestSnapshot() (*types.Transaction, error) {
	return _ValidatorsDiamondTest.Contract.TestSnapshot(&_ValidatorsDiamondTest.TransactOpts)
}

// ValidatorsDiamondTestLogIterator is returned from FilterLog and is used to iterate over the raw logs and unpacked data for Log events raised by the ValidatorsDiamondTest contract.
type ValidatorsDiamondTestLogIterator struct {
	Event *ValidatorsDiamondTestLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsDiamondTestLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsDiamondTestLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsDiamondTestLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsDiamondTestLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsDiamondTestLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsDiamondTestLog represents a Log event raised by the ValidatorsDiamondTest contract.
type ValidatorsDiamondTestLog struct {
	Arg0 string
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLog is a free log retrieval operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestFilterer) FilterLog(opts *bind.FilterOpts) (*ValidatorsDiamondTestLogIterator, error) {

	logs, sub, err := _ValidatorsDiamondTest.contract.FilterLogs(opts, "log")
	if err != nil {
		return nil, err
	}
	return &ValidatorsDiamondTestLogIterator{contract: _ValidatorsDiamondTest.contract, event: "log", logs: logs, sub: sub}, nil
}

// WatchLog is a free log subscription operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestFilterer) WatchLog(opts *bind.WatchOpts, sink chan<- *ValidatorsDiamondTestLog) (event.Subscription, error) {

	logs, sub, err := _ValidatorsDiamondTest.contract.WatchLogs(opts, "log")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsDiamondTestLog)
				if err := _ValidatorsDiamondTest.contract.UnpackLog(event, "log", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLog is a log parse operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestFilterer) ParseLog(log types.Log) (*ValidatorsDiamondTestLog, error) {
	event := new(ValidatorsDiamondTestLog)
	if err := _ValidatorsDiamondTest.contract.UnpackLog(event, "log", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorsDiamondTestLogAddressIterator is returned from FilterLogAddress and is used to iterate over the raw logs and unpacked data for LogAddress events raised by the ValidatorsDiamondTest contract.
type ValidatorsDiamondTestLogAddressIterator struct {
	Event *ValidatorsDiamondTestLogAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsDiamondTestLogAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsDiamondTestLogAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsDiamondTestLogAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsDiamondTestLogAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsDiamondTestLogAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsDiamondTestLogAddress represents a LogAddress event raised by the ValidatorsDiamondTest contract.
type ValidatorsDiamondTestLogAddress struct {
	Arg0 common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogAddress is a free log retrieval operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestFilterer) FilterLogAddress(opts *bind.FilterOpts) (*ValidatorsDiamondTestLogAddressIterator, error) {

	logs, sub, err := _ValidatorsDiamondTest.contract.FilterLogs(opts, "log_address")
	if err != nil {
		return nil, err
	}
	return &ValidatorsDiamondTestLogAddressIterator{contract: _ValidatorsDiamondTest.contract, event: "log_address", logs: logs, sub: sub}, nil
}

// WatchLogAddress is a free log subscription operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestFilterer) WatchLogAddress(opts *bind.WatchOpts, sink chan<- *ValidatorsDiamondTestLogAddress) (event.Subscription, error) {

	logs, sub, err := _ValidatorsDiamondTest.contract.WatchLogs(opts, "log_address")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsDiamondTestLogAddress)
				if err := _ValidatorsDiamondTest.contract.UnpackLog(event, "log_address", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogAddress is a log parse operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestFilterer) ParseLogAddress(log types.Log) (*ValidatorsDiamondTestLogAddress, error) {
	event := new(ValidatorsDiamondTestLogAddress)
	if err := _ValidatorsDiamondTest.contract.UnpackLog(event, "log_address", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorsDiamondTestLogBytesIterator is returned from FilterLogBytes and is used to iterate over the raw logs and unpacked data for LogBytes events raised by the ValidatorsDiamondTest contract.
type ValidatorsDiamondTestLogBytesIterator struct {
	Event *ValidatorsDiamondTestLogBytes // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsDiamondTestLogBytesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsDiamondTestLogBytes)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsDiamondTestLogBytes)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsDiamondTestLogBytesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsDiamondTestLogBytesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsDiamondTestLogBytes represents a LogBytes event raised by the ValidatorsDiamondTest contract.
type ValidatorsDiamondTestLogBytes struct {
	Arg0 []byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogBytes is a free log retrieval operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestFilterer) FilterLogBytes(opts *bind.FilterOpts) (*ValidatorsDiamondTestLogBytesIterator, error) {

	logs, sub, err := _ValidatorsDiamondTest.contract.FilterLogs(opts, "log_bytes")
	if err != nil {
		return nil, err
	}
	return &ValidatorsDiamondTestLogBytesIterator{contract: _ValidatorsDiamondTest.contract, event: "log_bytes", logs: logs, sub: sub}, nil
}

// WatchLogBytes is a free log subscription operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestFilterer) WatchLogBytes(opts *bind.WatchOpts, sink chan<- *ValidatorsDiamondTestLogBytes) (event.Subscription, error) {

	logs, sub, err := _ValidatorsDiamondTest.contract.WatchLogs(opts, "log_bytes")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsDiamondTestLogBytes)
				if err := _ValidatorsDiamondTest.contract.UnpackLog(event, "log_bytes", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes is a log parse operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestFilterer) ParseLogBytes(log types.Log) (*ValidatorsDiamondTestLogBytes, error) {
	event := new(ValidatorsDiamondTestLogBytes)
	if err := _ValidatorsDiamondTest.contract.UnpackLog(event, "log_bytes", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorsDiamondTestLogBytes32Iterator is returned from FilterLogBytes32 and is used to iterate over the raw logs and unpacked data for LogBytes32 events raised by the ValidatorsDiamondTest contract.
type ValidatorsDiamondTestLogBytes32Iterator struct {
	Event *ValidatorsDiamondTestLogBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsDiamondTestLogBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsDiamondTestLogBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsDiamondTestLogBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsDiamondTestLogBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsDiamondTestLogBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsDiamondTestLogBytes32 represents a LogBytes32 event raised by the ValidatorsDiamondTest contract.
type ValidatorsDiamondTestLogBytes32 struct {
	Arg0 [32]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogBytes32 is a free log retrieval operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestFilterer) FilterLogBytes32(opts *bind.FilterOpts) (*ValidatorsDiamondTestLogBytes32Iterator, error) {

	logs, sub, err := _ValidatorsDiamondTest.contract.FilterLogs(opts, "log_bytes32")
	if err != nil {
		return nil, err
	}
	return &ValidatorsDiamondTestLogBytes32Iterator{contract: _ValidatorsDiamondTest.contract, event: "log_bytes32", logs: logs, sub: sub}, nil
}

// WatchLogBytes32 is a free log subscription operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestFilterer) WatchLogBytes32(opts *bind.WatchOpts, sink chan<- *ValidatorsDiamondTestLogBytes32) (event.Subscription, error) {

	logs, sub, err := _ValidatorsDiamondTest.contract.WatchLogs(opts, "log_bytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsDiamondTestLogBytes32)
				if err := _ValidatorsDiamondTest.contract.UnpackLog(event, "log_bytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes32 is a log parse operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestFilterer) ParseLogBytes32(log types.Log) (*ValidatorsDiamondTestLogBytes32, error) {
	event := new(ValidatorsDiamondTestLogBytes32)
	if err := _ValidatorsDiamondTest.contract.UnpackLog(event, "log_bytes32", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorsDiamondTestLogIntIterator is returned from FilterLogInt and is used to iterate over the raw logs and unpacked data for LogInt events raised by the ValidatorsDiamondTest contract.
type ValidatorsDiamondTestLogIntIterator struct {
	Event *ValidatorsDiamondTestLogInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsDiamondTestLogIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsDiamondTestLogInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsDiamondTestLogInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsDiamondTestLogIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsDiamondTestLogIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsDiamondTestLogInt represents a LogInt event raised by the ValidatorsDiamondTest contract.
type ValidatorsDiamondTestLogInt struct {
	Arg0 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogInt is a free log retrieval operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestFilterer) FilterLogInt(opts *bind.FilterOpts) (*ValidatorsDiamondTestLogIntIterator, error) {

	logs, sub, err := _ValidatorsDiamondTest.contract.FilterLogs(opts, "log_int")
	if err != nil {
		return nil, err
	}
	return &ValidatorsDiamondTestLogIntIterator{contract: _ValidatorsDiamondTest.contract, event: "log_int", logs: logs, sub: sub}, nil
}

// WatchLogInt is a free log subscription operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestFilterer) WatchLogInt(opts *bind.WatchOpts, sink chan<- *ValidatorsDiamondTestLogInt) (event.Subscription, error) {

	logs, sub, err := _ValidatorsDiamondTest.contract.WatchLogs(opts, "log_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsDiamondTestLogInt)
				if err := _ValidatorsDiamondTest.contract.UnpackLog(event, "log_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogInt is a log parse operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestFilterer) ParseLogInt(log types.Log) (*ValidatorsDiamondTestLogInt, error) {
	event := new(ValidatorsDiamondTestLogInt)
	if err := _ValidatorsDiamondTest.contract.UnpackLog(event, "log_int", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorsDiamondTestLogNamedAddressIterator is returned from FilterLogNamedAddress and is used to iterate over the raw logs and unpacked data for LogNamedAddress events raised by the ValidatorsDiamondTest contract.
type ValidatorsDiamondTestLogNamedAddressIterator struct {
	Event *ValidatorsDiamondTestLogNamedAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsDiamondTestLogNamedAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsDiamondTestLogNamedAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsDiamondTestLogNamedAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsDiamondTestLogNamedAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsDiamondTestLogNamedAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsDiamondTestLogNamedAddress represents a LogNamedAddress event raised by the ValidatorsDiamondTest contract.
type ValidatorsDiamondTestLogNamedAddress struct {
	Key string
	Val common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedAddress is a free log retrieval operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestFilterer) FilterLogNamedAddress(opts *bind.FilterOpts) (*ValidatorsDiamondTestLogNamedAddressIterator, error) {

	logs, sub, err := _ValidatorsDiamondTest.contract.FilterLogs(opts, "log_named_address")
	if err != nil {
		return nil, err
	}
	return &ValidatorsDiamondTestLogNamedAddressIterator{contract: _ValidatorsDiamondTest.contract, event: "log_named_address", logs: logs, sub: sub}, nil
}

// WatchLogNamedAddress is a free log subscription operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestFilterer) WatchLogNamedAddress(opts *bind.WatchOpts, sink chan<- *ValidatorsDiamondTestLogNamedAddress) (event.Subscription, error) {

	logs, sub, err := _ValidatorsDiamondTest.contract.WatchLogs(opts, "log_named_address")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsDiamondTestLogNamedAddress)
				if err := _ValidatorsDiamondTest.contract.UnpackLog(event, "log_named_address", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedAddress is a log parse operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestFilterer) ParseLogNamedAddress(log types.Log) (*ValidatorsDiamondTestLogNamedAddress, error) {
	event := new(ValidatorsDiamondTestLogNamedAddress)
	if err := _ValidatorsDiamondTest.contract.UnpackLog(event, "log_named_address", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorsDiamondTestLogNamedBytesIterator is returned from FilterLogNamedBytes and is used to iterate over the raw logs and unpacked data for LogNamedBytes events raised by the ValidatorsDiamondTest contract.
type ValidatorsDiamondTestLogNamedBytesIterator struct {
	Event *ValidatorsDiamondTestLogNamedBytes // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsDiamondTestLogNamedBytesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsDiamondTestLogNamedBytes)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsDiamondTestLogNamedBytes)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsDiamondTestLogNamedBytesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsDiamondTestLogNamedBytesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsDiamondTestLogNamedBytes represents a LogNamedBytes event raised by the ValidatorsDiamondTest contract.
type ValidatorsDiamondTestLogNamedBytes struct {
	Key string
	Val []byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedBytes is a free log retrieval operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestFilterer) FilterLogNamedBytes(opts *bind.FilterOpts) (*ValidatorsDiamondTestLogNamedBytesIterator, error) {

	logs, sub, err := _ValidatorsDiamondTest.contract.FilterLogs(opts, "log_named_bytes")
	if err != nil {
		return nil, err
	}
	return &ValidatorsDiamondTestLogNamedBytesIterator{contract: _ValidatorsDiamondTest.contract, event: "log_named_bytes", logs: logs, sub: sub}, nil
}

// WatchLogNamedBytes is a free log subscription operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestFilterer) WatchLogNamedBytes(opts *bind.WatchOpts, sink chan<- *ValidatorsDiamondTestLogNamedBytes) (event.Subscription, error) {

	logs, sub, err := _ValidatorsDiamondTest.contract.WatchLogs(opts, "log_named_bytes")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsDiamondTestLogNamedBytes)
				if err := _ValidatorsDiamondTest.contract.UnpackLog(event, "log_named_bytes", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedBytes is a log parse operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestFilterer) ParseLogNamedBytes(log types.Log) (*ValidatorsDiamondTestLogNamedBytes, error) {
	event := new(ValidatorsDiamondTestLogNamedBytes)
	if err := _ValidatorsDiamondTest.contract.UnpackLog(event, "log_named_bytes", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorsDiamondTestLogNamedBytes32Iterator is returned from FilterLogNamedBytes32 and is used to iterate over the raw logs and unpacked data for LogNamedBytes32 events raised by the ValidatorsDiamondTest contract.
type ValidatorsDiamondTestLogNamedBytes32Iterator struct {
	Event *ValidatorsDiamondTestLogNamedBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsDiamondTestLogNamedBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsDiamondTestLogNamedBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsDiamondTestLogNamedBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsDiamondTestLogNamedBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsDiamondTestLogNamedBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsDiamondTestLogNamedBytes32 represents a LogNamedBytes32 event raised by the ValidatorsDiamondTest contract.
type ValidatorsDiamondTestLogNamedBytes32 struct {
	Key string
	Val [32]byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedBytes32 is a free log retrieval operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestFilterer) FilterLogNamedBytes32(opts *bind.FilterOpts) (*ValidatorsDiamondTestLogNamedBytes32Iterator, error) {

	logs, sub, err := _ValidatorsDiamondTest.contract.FilterLogs(opts, "log_named_bytes32")
	if err != nil {
		return nil, err
	}
	return &ValidatorsDiamondTestLogNamedBytes32Iterator{contract: _ValidatorsDiamondTest.contract, event: "log_named_bytes32", logs: logs, sub: sub}, nil
}

// WatchLogNamedBytes32 is a free log subscription operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestFilterer) WatchLogNamedBytes32(opts *bind.WatchOpts, sink chan<- *ValidatorsDiamondTestLogNamedBytes32) (event.Subscription, error) {

	logs, sub, err := _ValidatorsDiamondTest.contract.WatchLogs(opts, "log_named_bytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsDiamondTestLogNamedBytes32)
				if err := _ValidatorsDiamondTest.contract.UnpackLog(event, "log_named_bytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedBytes32 is a log parse operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestFilterer) ParseLogNamedBytes32(log types.Log) (*ValidatorsDiamondTestLogNamedBytes32, error) {
	event := new(ValidatorsDiamondTestLogNamedBytes32)
	if err := _ValidatorsDiamondTest.contract.UnpackLog(event, "log_named_bytes32", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorsDiamondTestLogNamedDecimalIntIterator is returned from FilterLogNamedDecimalInt and is used to iterate over the raw logs and unpacked data for LogNamedDecimalInt events raised by the ValidatorsDiamondTest contract.
type ValidatorsDiamondTestLogNamedDecimalIntIterator struct {
	Event *ValidatorsDiamondTestLogNamedDecimalInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsDiamondTestLogNamedDecimalIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsDiamondTestLogNamedDecimalInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsDiamondTestLogNamedDecimalInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsDiamondTestLogNamedDecimalIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsDiamondTestLogNamedDecimalIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsDiamondTestLogNamedDecimalInt represents a LogNamedDecimalInt event raised by the ValidatorsDiamondTest contract.
type ValidatorsDiamondTestLogNamedDecimalInt struct {
	Key      string
	Val      *big.Int
	Decimals *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogNamedDecimalInt is a free log retrieval operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestFilterer) FilterLogNamedDecimalInt(opts *bind.FilterOpts) (*ValidatorsDiamondTestLogNamedDecimalIntIterator, error) {

	logs, sub, err := _ValidatorsDiamondTest.contract.FilterLogs(opts, "log_named_decimal_int")
	if err != nil {
		return nil, err
	}
	return &ValidatorsDiamondTestLogNamedDecimalIntIterator{contract: _ValidatorsDiamondTest.contract, event: "log_named_decimal_int", logs: logs, sub: sub}, nil
}

// WatchLogNamedDecimalInt is a free log subscription operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestFilterer) WatchLogNamedDecimalInt(opts *bind.WatchOpts, sink chan<- *ValidatorsDiamondTestLogNamedDecimalInt) (event.Subscription, error) {

	logs, sub, err := _ValidatorsDiamondTest.contract.WatchLogs(opts, "log_named_decimal_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsDiamondTestLogNamedDecimalInt)
				if err := _ValidatorsDiamondTest.contract.UnpackLog(event, "log_named_decimal_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedDecimalInt is a log parse operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestFilterer) ParseLogNamedDecimalInt(log types.Log) (*ValidatorsDiamondTestLogNamedDecimalInt, error) {
	event := new(ValidatorsDiamondTestLogNamedDecimalInt)
	if err := _ValidatorsDiamondTest.contract.UnpackLog(event, "log_named_decimal_int", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorsDiamondTestLogNamedDecimalUintIterator is returned from FilterLogNamedDecimalUint and is used to iterate over the raw logs and unpacked data for LogNamedDecimalUint events raised by the ValidatorsDiamondTest contract.
type ValidatorsDiamondTestLogNamedDecimalUintIterator struct {
	Event *ValidatorsDiamondTestLogNamedDecimalUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsDiamondTestLogNamedDecimalUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsDiamondTestLogNamedDecimalUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsDiamondTestLogNamedDecimalUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsDiamondTestLogNamedDecimalUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsDiamondTestLogNamedDecimalUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsDiamondTestLogNamedDecimalUint represents a LogNamedDecimalUint event raised by the ValidatorsDiamondTest contract.
type ValidatorsDiamondTestLogNamedDecimalUint struct {
	Key      string
	Val      *big.Int
	Decimals *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogNamedDecimalUint is a free log retrieval operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestFilterer) FilterLogNamedDecimalUint(opts *bind.FilterOpts) (*ValidatorsDiamondTestLogNamedDecimalUintIterator, error) {

	logs, sub, err := _ValidatorsDiamondTest.contract.FilterLogs(opts, "log_named_decimal_uint")
	if err != nil {
		return nil, err
	}
	return &ValidatorsDiamondTestLogNamedDecimalUintIterator{contract: _ValidatorsDiamondTest.contract, event: "log_named_decimal_uint", logs: logs, sub: sub}, nil
}

// WatchLogNamedDecimalUint is a free log subscription operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestFilterer) WatchLogNamedDecimalUint(opts *bind.WatchOpts, sink chan<- *ValidatorsDiamondTestLogNamedDecimalUint) (event.Subscription, error) {

	logs, sub, err := _ValidatorsDiamondTest.contract.WatchLogs(opts, "log_named_decimal_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsDiamondTestLogNamedDecimalUint)
				if err := _ValidatorsDiamondTest.contract.UnpackLog(event, "log_named_decimal_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedDecimalUint is a log parse operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestFilterer) ParseLogNamedDecimalUint(log types.Log) (*ValidatorsDiamondTestLogNamedDecimalUint, error) {
	event := new(ValidatorsDiamondTestLogNamedDecimalUint)
	if err := _ValidatorsDiamondTest.contract.UnpackLog(event, "log_named_decimal_uint", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorsDiamondTestLogNamedIntIterator is returned from FilterLogNamedInt and is used to iterate over the raw logs and unpacked data for LogNamedInt events raised by the ValidatorsDiamondTest contract.
type ValidatorsDiamondTestLogNamedIntIterator struct {
	Event *ValidatorsDiamondTestLogNamedInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsDiamondTestLogNamedIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsDiamondTestLogNamedInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsDiamondTestLogNamedInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsDiamondTestLogNamedIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsDiamondTestLogNamedIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsDiamondTestLogNamedInt represents a LogNamedInt event raised by the ValidatorsDiamondTest contract.
type ValidatorsDiamondTestLogNamedInt struct {
	Key string
	Val *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedInt is a free log retrieval operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestFilterer) FilterLogNamedInt(opts *bind.FilterOpts) (*ValidatorsDiamondTestLogNamedIntIterator, error) {

	logs, sub, err := _ValidatorsDiamondTest.contract.FilterLogs(opts, "log_named_int")
	if err != nil {
		return nil, err
	}
	return &ValidatorsDiamondTestLogNamedIntIterator{contract: _ValidatorsDiamondTest.contract, event: "log_named_int", logs: logs, sub: sub}, nil
}

// WatchLogNamedInt is a free log subscription operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestFilterer) WatchLogNamedInt(opts *bind.WatchOpts, sink chan<- *ValidatorsDiamondTestLogNamedInt) (event.Subscription, error) {

	logs, sub, err := _ValidatorsDiamondTest.contract.WatchLogs(opts, "log_named_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsDiamondTestLogNamedInt)
				if err := _ValidatorsDiamondTest.contract.UnpackLog(event, "log_named_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedInt is a log parse operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestFilterer) ParseLogNamedInt(log types.Log) (*ValidatorsDiamondTestLogNamedInt, error) {
	event := new(ValidatorsDiamondTestLogNamedInt)
	if err := _ValidatorsDiamondTest.contract.UnpackLog(event, "log_named_int", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorsDiamondTestLogNamedStringIterator is returned from FilterLogNamedString and is used to iterate over the raw logs and unpacked data for LogNamedString events raised by the ValidatorsDiamondTest contract.
type ValidatorsDiamondTestLogNamedStringIterator struct {
	Event *ValidatorsDiamondTestLogNamedString // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsDiamondTestLogNamedStringIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsDiamondTestLogNamedString)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsDiamondTestLogNamedString)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsDiamondTestLogNamedStringIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsDiamondTestLogNamedStringIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsDiamondTestLogNamedString represents a LogNamedString event raised by the ValidatorsDiamondTest contract.
type ValidatorsDiamondTestLogNamedString struct {
	Key string
	Val string
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedString is a free log retrieval operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestFilterer) FilterLogNamedString(opts *bind.FilterOpts) (*ValidatorsDiamondTestLogNamedStringIterator, error) {

	logs, sub, err := _ValidatorsDiamondTest.contract.FilterLogs(opts, "log_named_string")
	if err != nil {
		return nil, err
	}
	return &ValidatorsDiamondTestLogNamedStringIterator{contract: _ValidatorsDiamondTest.contract, event: "log_named_string", logs: logs, sub: sub}, nil
}

// WatchLogNamedString is a free log subscription operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestFilterer) WatchLogNamedString(opts *bind.WatchOpts, sink chan<- *ValidatorsDiamondTestLogNamedString) (event.Subscription, error) {

	logs, sub, err := _ValidatorsDiamondTest.contract.WatchLogs(opts, "log_named_string")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsDiamondTestLogNamedString)
				if err := _ValidatorsDiamondTest.contract.UnpackLog(event, "log_named_string", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedString is a log parse operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestFilterer) ParseLogNamedString(log types.Log) (*ValidatorsDiamondTestLogNamedString, error) {
	event := new(ValidatorsDiamondTestLogNamedString)
	if err := _ValidatorsDiamondTest.contract.UnpackLog(event, "log_named_string", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorsDiamondTestLogNamedUintIterator is returned from FilterLogNamedUint and is used to iterate over the raw logs and unpacked data for LogNamedUint events raised by the ValidatorsDiamondTest contract.
type ValidatorsDiamondTestLogNamedUintIterator struct {
	Event *ValidatorsDiamondTestLogNamedUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsDiamondTestLogNamedUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsDiamondTestLogNamedUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsDiamondTestLogNamedUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsDiamondTestLogNamedUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsDiamondTestLogNamedUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsDiamondTestLogNamedUint represents a LogNamedUint event raised by the ValidatorsDiamondTest contract.
type ValidatorsDiamondTestLogNamedUint struct {
	Key string
	Val *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedUint is a free log retrieval operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestFilterer) FilterLogNamedUint(opts *bind.FilterOpts) (*ValidatorsDiamondTestLogNamedUintIterator, error) {

	logs, sub, err := _ValidatorsDiamondTest.contract.FilterLogs(opts, "log_named_uint")
	if err != nil {
		return nil, err
	}
	return &ValidatorsDiamondTestLogNamedUintIterator{contract: _ValidatorsDiamondTest.contract, event: "log_named_uint", logs: logs, sub: sub}, nil
}

// WatchLogNamedUint is a free log subscription operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestFilterer) WatchLogNamedUint(opts *bind.WatchOpts, sink chan<- *ValidatorsDiamondTestLogNamedUint) (event.Subscription, error) {

	logs, sub, err := _ValidatorsDiamondTest.contract.WatchLogs(opts, "log_named_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsDiamondTestLogNamedUint)
				if err := _ValidatorsDiamondTest.contract.UnpackLog(event, "log_named_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedUint is a log parse operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestFilterer) ParseLogNamedUint(log types.Log) (*ValidatorsDiamondTestLogNamedUint, error) {
	event := new(ValidatorsDiamondTestLogNamedUint)
	if err := _ValidatorsDiamondTest.contract.UnpackLog(event, "log_named_uint", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorsDiamondTestLogStringIterator is returned from FilterLogString and is used to iterate over the raw logs and unpacked data for LogString events raised by the ValidatorsDiamondTest contract.
type ValidatorsDiamondTestLogStringIterator struct {
	Event *ValidatorsDiamondTestLogString // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsDiamondTestLogStringIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsDiamondTestLogString)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsDiamondTestLogString)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsDiamondTestLogStringIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsDiamondTestLogStringIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsDiamondTestLogString represents a LogString event raised by the ValidatorsDiamondTest contract.
type ValidatorsDiamondTestLogString struct {
	Arg0 string
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogString is a free log retrieval operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestFilterer) FilterLogString(opts *bind.FilterOpts) (*ValidatorsDiamondTestLogStringIterator, error) {

	logs, sub, err := _ValidatorsDiamondTest.contract.FilterLogs(opts, "log_string")
	if err != nil {
		return nil, err
	}
	return &ValidatorsDiamondTestLogStringIterator{contract: _ValidatorsDiamondTest.contract, event: "log_string", logs: logs, sub: sub}, nil
}

// WatchLogString is a free log subscription operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestFilterer) WatchLogString(opts *bind.WatchOpts, sink chan<- *ValidatorsDiamondTestLogString) (event.Subscription, error) {

	logs, sub, err := _ValidatorsDiamondTest.contract.WatchLogs(opts, "log_string")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsDiamondTestLogString)
				if err := _ValidatorsDiamondTest.contract.UnpackLog(event, "log_string", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogString is a log parse operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestFilterer) ParseLogString(log types.Log) (*ValidatorsDiamondTestLogString, error) {
	event := new(ValidatorsDiamondTestLogString)
	if err := _ValidatorsDiamondTest.contract.UnpackLog(event, "log_string", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorsDiamondTestLogUintIterator is returned from FilterLogUint and is used to iterate over the raw logs and unpacked data for LogUint events raised by the ValidatorsDiamondTest contract.
type ValidatorsDiamondTestLogUintIterator struct {
	Event *ValidatorsDiamondTestLogUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsDiamondTestLogUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsDiamondTestLogUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsDiamondTestLogUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsDiamondTestLogUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsDiamondTestLogUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsDiamondTestLogUint represents a LogUint event raised by the ValidatorsDiamondTest contract.
type ValidatorsDiamondTestLogUint struct {
	Arg0 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogUint is a free log retrieval operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestFilterer) FilterLogUint(opts *bind.FilterOpts) (*ValidatorsDiamondTestLogUintIterator, error) {

	logs, sub, err := _ValidatorsDiamondTest.contract.FilterLogs(opts, "log_uint")
	if err != nil {
		return nil, err
	}
	return &ValidatorsDiamondTestLogUintIterator{contract: _ValidatorsDiamondTest.contract, event: "log_uint", logs: logs, sub: sub}, nil
}

// WatchLogUint is a free log subscription operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestFilterer) WatchLogUint(opts *bind.WatchOpts, sink chan<- *ValidatorsDiamondTestLogUint) (event.Subscription, error) {

	logs, sub, err := _ValidatorsDiamondTest.contract.WatchLogs(opts, "log_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsDiamondTestLogUint)
				if err := _ValidatorsDiamondTest.contract.UnpackLog(event, "log_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogUint is a log parse operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestFilterer) ParseLogUint(log types.Log) (*ValidatorsDiamondTestLogUint, error) {
	event := new(ValidatorsDiamondTestLogUint)
	if err := _ValidatorsDiamondTest.contract.UnpackLog(event, "log_uint", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorsDiamondTestLogsIterator is returned from FilterLogs and is used to iterate over the raw logs and unpacked data for Logs events raised by the ValidatorsDiamondTest contract.
type ValidatorsDiamondTestLogsIterator struct {
	Event *ValidatorsDiamondTestLogs // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsDiamondTestLogsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsDiamondTestLogs)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsDiamondTestLogs)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsDiamondTestLogsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsDiamondTestLogsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsDiamondTestLogs represents a Logs event raised by the ValidatorsDiamondTest contract.
type ValidatorsDiamondTestLogs struct {
	Arg0 []byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogs is a free log retrieval operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestFilterer) FilterLogs(opts *bind.FilterOpts) (*ValidatorsDiamondTestLogsIterator, error) {

	logs, sub, err := _ValidatorsDiamondTest.contract.FilterLogs(opts, "logs")
	if err != nil {
		return nil, err
	}
	return &ValidatorsDiamondTestLogsIterator{contract: _ValidatorsDiamondTest.contract, event: "logs", logs: logs, sub: sub}, nil
}

// WatchLogs is a free log subscription operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestFilterer) WatchLogs(opts *bind.WatchOpts, sink chan<- *ValidatorsDiamondTestLogs) (event.Subscription, error) {

	logs, sub, err := _ValidatorsDiamondTest.contract.WatchLogs(opts, "logs")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsDiamondTestLogs)
				if err := _ValidatorsDiamondTest.contract.UnpackLog(event, "logs", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogs is a log parse operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_ValidatorsDiamondTest *ValidatorsDiamondTestFilterer) ParseLogs(log types.Log) (*ValidatorsDiamondTestLogs, error) {
	event := new(ValidatorsDiamondTestLogs)
	if err := _ValidatorsDiamondTest.contract.UnpackLog(event, "logs", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorsSnapshotABI is the input ABI used to generate the binding from.
const ValidatorsSnapshotABI = "[{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"foo\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"bar\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"fax\",\"type\":\"bytes\"}],\"name\":\"LogNote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"startingETHDKG\",\"type\":\"bool\"}],\"name\":\"SnapshotTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"madID\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"madID\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"pkHash\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorLeft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"pkHash\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorQueued\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contractDSAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"src\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"extractUint256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"src\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"extractUint32\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"val\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"getChainIdFromSnapshot\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"getHeightFromSnapshot\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"getMadHeightFromSnapshot\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"getRawBlockClaimsSnapshot\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"getRawSignatureSnapshot\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"majorStakeFine\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minorStakeFine\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_signatureGroup\",\"type\":\"bytes\"}],\"name\":\"parseSignatureGroup\",\"outputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"publicKey\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[2]\",\"name\":\"signature\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"orig\",\"type\":\"bytes\"}],\"name\":\"reverse\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"reversed\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractDSAuthority\",\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_signatureGroup\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_bclaims\",\"type\":\"bytes\"}],\"name\":\"snapshot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorMaxCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// ValidatorsSnapshotBin is the compiled bytecode used for deploying new contracts.
var ValidatorsSnapshotBin = ""

// DeployValidatorsSnapshot deploys a new Ethereum contract, binding an instance of ValidatorsSnapshot to it.
func DeployValidatorsSnapshot(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ValidatorsSnapshot, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorsSnapshotABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ValidatorsSnapshotBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ValidatorsSnapshot{ValidatorsSnapshotCaller: ValidatorsSnapshotCaller{contract: contract}, ValidatorsSnapshotTransactor: ValidatorsSnapshotTransactor{contract: contract}, ValidatorsSnapshotFilterer: ValidatorsSnapshotFilterer{contract: contract}}, nil
}

// ValidatorsSnapshot is an auto generated Go binding around an Ethereum contract.
type ValidatorsSnapshot struct {
	ValidatorsSnapshotCaller     // Read-only binding to the contract
	ValidatorsSnapshotTransactor // Write-only binding to the contract
	ValidatorsSnapshotFilterer   // Log filterer for contract events
}

// ValidatorsSnapshotCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorsSnapshotCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorsSnapshotTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorsSnapshotTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorsSnapshotFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorsSnapshotFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorsSnapshotSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorsSnapshotSession struct {
	Contract     *ValidatorsSnapshot // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ValidatorsSnapshotCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorsSnapshotCallerSession struct {
	Contract *ValidatorsSnapshotCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// ValidatorsSnapshotTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorsSnapshotTransactorSession struct {
	Contract     *ValidatorsSnapshotTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// ValidatorsSnapshotRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorsSnapshotRaw struct {
	Contract *ValidatorsSnapshot // Generic contract binding to access the raw methods on
}

// ValidatorsSnapshotCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorsSnapshotCallerRaw struct {
	Contract *ValidatorsSnapshotCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorsSnapshotTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorsSnapshotTransactorRaw struct {
	Contract *ValidatorsSnapshotTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorsSnapshot creates a new instance of ValidatorsSnapshot, bound to a specific deployed contract.
func NewValidatorsSnapshot(address common.Address, backend bind.ContractBackend) (*ValidatorsSnapshot, error) {
	contract, err := bindValidatorsSnapshot(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorsSnapshot{ValidatorsSnapshotCaller: ValidatorsSnapshotCaller{contract: contract}, ValidatorsSnapshotTransactor: ValidatorsSnapshotTransactor{contract: contract}, ValidatorsSnapshotFilterer: ValidatorsSnapshotFilterer{contract: contract}}, nil
}

// NewValidatorsSnapshotCaller creates a new read-only instance of ValidatorsSnapshot, bound to a specific deployed contract.
func NewValidatorsSnapshotCaller(address common.Address, caller bind.ContractCaller) (*ValidatorsSnapshotCaller, error) {
	contract, err := bindValidatorsSnapshot(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorsSnapshotCaller{contract: contract}, nil
}

// NewValidatorsSnapshotTransactor creates a new write-only instance of ValidatorsSnapshot, bound to a specific deployed contract.
func NewValidatorsSnapshotTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorsSnapshotTransactor, error) {
	contract, err := bindValidatorsSnapshot(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorsSnapshotTransactor{contract: contract}, nil
}

// NewValidatorsSnapshotFilterer creates a new log filterer instance of ValidatorsSnapshot, bound to a specific deployed contract.
func NewValidatorsSnapshotFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorsSnapshotFilterer, error) {
	contract, err := bindValidatorsSnapshot(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorsSnapshotFilterer{contract: contract}, nil
}

// bindValidatorsSnapshot binds a generic wrapper to an already deployed contract.
func bindValidatorsSnapshot(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorsSnapshotABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorsSnapshot *ValidatorsSnapshotRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ValidatorsSnapshot.Contract.ValidatorsSnapshotCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorsSnapshot *ValidatorsSnapshotRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorsSnapshot.Contract.ValidatorsSnapshotTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorsSnapshot *ValidatorsSnapshotRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorsSnapshot.Contract.ValidatorsSnapshotTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorsSnapshot *ValidatorsSnapshotCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ValidatorsSnapshot.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorsSnapshot *ValidatorsSnapshotTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorsSnapshot.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorsSnapshot *ValidatorsSnapshotTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorsSnapshot.Contract.contract.Transact(opts, method, params...)
}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_ValidatorsSnapshot *ValidatorsSnapshotCaller) Authority(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ValidatorsSnapshot.contract.Call(opts, out, "authority")
	return *ret0, err
}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_ValidatorsSnapshot *ValidatorsSnapshotSession) Authority() (common.Address, error) {
	return _ValidatorsSnapshot.Contract.Authority(&_ValidatorsSnapshot.CallOpts)
}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_ValidatorsSnapshot *ValidatorsSnapshotCallerSession) Authority() (common.Address, error) {
	return _ValidatorsSnapshot.Contract.Authority(&_ValidatorsSnapshot.CallOpts)
}

// Epoch is a free data retrieval call binding the contract method 0x900cf0cf.
//
// Solidity: function epoch() view returns(uint256)
func (_ValidatorsSnapshot *ValidatorsSnapshotCaller) Epoch(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ValidatorsSnapshot.contract.Call(opts, out, "epoch")
	return *ret0, err
}

// Epoch is a free data retrieval call binding the contract method 0x900cf0cf.
//
// Solidity: function epoch() view returns(uint256)
func (_ValidatorsSnapshot *ValidatorsSnapshotSession) Epoch() (*big.Int, error) {
	return _ValidatorsSnapshot.Contract.Epoch(&_ValidatorsSnapshot.CallOpts)
}

// Epoch is a free data retrieval call binding the contract method 0x900cf0cf.
//
// Solidity: function epoch() view returns(uint256)
func (_ValidatorsSnapshot *ValidatorsSnapshotCallerSession) Epoch() (*big.Int, error) {
	return _ValidatorsSnapshot.Contract.Epoch(&_ValidatorsSnapshot.CallOpts)
}

// ExtractUint256 is a free data retrieval call binding the contract method 0x1c8c8ba4.
//
// Solidity: function extractUint256(bytes src, uint256 offset) pure returns(uint256 val)
func (_ValidatorsSnapshot *ValidatorsSnapshotCaller) ExtractUint256(opts *bind.CallOpts, src []byte, offset *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ValidatorsSnapshot.contract.Call(opts, out, "extractUint256", src, offset)
	return *ret0, err
}

// ExtractUint256 is a free data retrieval call binding the contract method 0x1c8c8ba4.
//
// Solidity: function extractUint256(bytes src, uint256 offset) pure returns(uint256 val)
func (_ValidatorsSnapshot *ValidatorsSnapshotSession) ExtractUint256(src []byte, offset *big.Int) (*big.Int, error) {
	return _ValidatorsSnapshot.Contract.ExtractUint256(&_ValidatorsSnapshot.CallOpts, src, offset)
}

// ExtractUint256 is a free data retrieval call binding the contract method 0x1c8c8ba4.
//
// Solidity: function extractUint256(bytes src, uint256 offset) pure returns(uint256 val)
func (_ValidatorsSnapshot *ValidatorsSnapshotCallerSession) ExtractUint256(src []byte, offset *big.Int) (*big.Int, error) {
	return _ValidatorsSnapshot.Contract.ExtractUint256(&_ValidatorsSnapshot.CallOpts, src, offset)
}

// ExtractUint32 is a free data retrieval call binding the contract method 0xc1312f4d.
//
// Solidity: function extractUint32(bytes src, uint256 idx) pure returns(uint32 val)
func (_ValidatorsSnapshot *ValidatorsSnapshotCaller) ExtractUint32(opts *bind.CallOpts, src []byte, idx *big.Int) (uint32, error) {
	var (
		ret0 = new(uint32)
	)
	out := ret0
	err := _ValidatorsSnapshot.contract.Call(opts, out, "extractUint32", src, idx)
	return *ret0, err
}

// ExtractUint32 is a free data retrieval call binding the contract method 0xc1312f4d.
//
// Solidity: function extractUint32(bytes src, uint256 idx) pure returns(uint32 val)
func (_ValidatorsSnapshot *ValidatorsSnapshotSession) ExtractUint32(src []byte, idx *big.Int) (uint32, error) {
	return _ValidatorsSnapshot.Contract.ExtractUint32(&_ValidatorsSnapshot.CallOpts, src, idx)
}

// ExtractUint32 is a free data retrieval call binding the contract method 0xc1312f4d.
//
// Solidity: function extractUint32(bytes src, uint256 idx) pure returns(uint32 val)
func (_ValidatorsSnapshot *ValidatorsSnapshotCallerSession) ExtractUint32(src []byte, idx *big.Int) (uint32, error) {
	return _ValidatorsSnapshot.Contract.ExtractUint32(&_ValidatorsSnapshot.CallOpts, src, idx)
}

// GetChainIdFromSnapshot is a free data retrieval call binding the contract method 0x19f74669.
//
// Solidity: function getChainIdFromSnapshot(uint256 _epoch) view returns(uint32)
func (_ValidatorsSnapshot *ValidatorsSnapshotCaller) GetChainIdFromSnapshot(opts *bind.CallOpts, _epoch *big.Int) (uint32, error) {
	var (
		ret0 = new(uint32)
	)
	out := ret0
	err := _ValidatorsSnapshot.contract.Call(opts, out, "getChainIdFromSnapshot", _epoch)
	return *ret0, err
}

// GetChainIdFromSnapshot is a free data retrieval call binding the contract method 0x19f74669.
//
// Solidity: function getChainIdFromSnapshot(uint256 _epoch) view returns(uint32)
func (_ValidatorsSnapshot *ValidatorsSnapshotSession) GetChainIdFromSnapshot(_epoch *big.Int) (uint32, error) {
	return _ValidatorsSnapshot.Contract.GetChainIdFromSnapshot(&_ValidatorsSnapshot.CallOpts, _epoch)
}

// GetChainIdFromSnapshot is a free data retrieval call binding the contract method 0x19f74669.
//
// Solidity: function getChainIdFromSnapshot(uint256 _epoch) view returns(uint32)
func (_ValidatorsSnapshot *ValidatorsSnapshotCallerSession) GetChainIdFromSnapshot(_epoch *big.Int) (uint32, error) {
	return _ValidatorsSnapshot.Contract.GetChainIdFromSnapshot(&_ValidatorsSnapshot.CallOpts, _epoch)
}

// GetHeightFromSnapshot is a free data retrieval call binding the contract method 0xe380b228.
//
// Solidity: function getHeightFromSnapshot(uint256 _epoch) view returns(uint32)
func (_ValidatorsSnapshot *ValidatorsSnapshotCaller) GetHeightFromSnapshot(opts *bind.CallOpts, _epoch *big.Int) (uint32, error) {
	var (
		ret0 = new(uint32)
	)
	out := ret0
	err := _ValidatorsSnapshot.contract.Call(opts, out, "getHeightFromSnapshot", _epoch)
	return *ret0, err
}

// GetHeightFromSnapshot is a free data retrieval call binding the contract method 0xe380b228.
//
// Solidity: function getHeightFromSnapshot(uint256 _epoch) view returns(uint32)
func (_ValidatorsSnapshot *ValidatorsSnapshotSession) GetHeightFromSnapshot(_epoch *big.Int) (uint32, error) {
	return _ValidatorsSnapshot.Contract.GetHeightFromSnapshot(&_ValidatorsSnapshot.CallOpts, _epoch)
}

// GetHeightFromSnapshot is a free data retrieval call binding the contract method 0xe380b228.
//
// Solidity: function getHeightFromSnapshot(uint256 _epoch) view returns(uint32)
func (_ValidatorsSnapshot *ValidatorsSnapshotCallerSession) GetHeightFromSnapshot(_epoch *big.Int) (uint32, error) {
	return _ValidatorsSnapshot.Contract.GetHeightFromSnapshot(&_ValidatorsSnapshot.CallOpts, _epoch)
}

// GetMadHeightFromSnapshot is a free data retrieval call binding the contract method 0x4f4ea614.
//
// Solidity: function getMadHeightFromSnapshot(uint256 _epoch) view returns(uint32)
func (_ValidatorsSnapshot *ValidatorsSnapshotCaller) GetMadHeightFromSnapshot(opts *bind.CallOpts, _epoch *big.Int) (uint32, error) {
	var (
		ret0 = new(uint32)
	)
	out := ret0
	err := _ValidatorsSnapshot.contract.Call(opts, out, "getMadHeightFromSnapshot", _epoch)
	return *ret0, err
}

// GetMadHeightFromSnapshot is a free data retrieval call binding the contract method 0x4f4ea614.
//
// Solidity: function getMadHeightFromSnapshot(uint256 _epoch) view returns(uint32)
func (_ValidatorsSnapshot *ValidatorsSnapshotSession) GetMadHeightFromSnapshot(_epoch *big.Int) (uint32, error) {
	return _ValidatorsSnapshot.Contract.GetMadHeightFromSnapshot(&_ValidatorsSnapshot.CallOpts, _epoch)
}

// GetMadHeightFromSnapshot is a free data retrieval call binding the contract method 0x4f4ea614.
//
// Solidity: function getMadHeightFromSnapshot(uint256 _epoch) view returns(uint32)
func (_ValidatorsSnapshot *ValidatorsSnapshotCallerSession) GetMadHeightFromSnapshot(_epoch *big.Int) (uint32, error) {
	return _ValidatorsSnapshot.Contract.GetMadHeightFromSnapshot(&_ValidatorsSnapshot.CallOpts, _epoch)
}

// GetRawBlockClaimsSnapshot is a free data retrieval call binding the contract method 0x6372fe51.
//
// Solidity: function getRawBlockClaimsSnapshot(uint256 _epoch) view returns(bytes)
func (_ValidatorsSnapshot *ValidatorsSnapshotCaller) GetRawBlockClaimsSnapshot(opts *bind.CallOpts, _epoch *big.Int) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _ValidatorsSnapshot.contract.Call(opts, out, "getRawBlockClaimsSnapshot", _epoch)
	return *ret0, err
}

// GetRawBlockClaimsSnapshot is a free data retrieval call binding the contract method 0x6372fe51.
//
// Solidity: function getRawBlockClaimsSnapshot(uint256 _epoch) view returns(bytes)
func (_ValidatorsSnapshot *ValidatorsSnapshotSession) GetRawBlockClaimsSnapshot(_epoch *big.Int) ([]byte, error) {
	return _ValidatorsSnapshot.Contract.GetRawBlockClaimsSnapshot(&_ValidatorsSnapshot.CallOpts, _epoch)
}

// GetRawBlockClaimsSnapshot is a free data retrieval call binding the contract method 0x6372fe51.
//
// Solidity: function getRawBlockClaimsSnapshot(uint256 _epoch) view returns(bytes)
func (_ValidatorsSnapshot *ValidatorsSnapshotCallerSession) GetRawBlockClaimsSnapshot(_epoch *big.Int) ([]byte, error) {
	return _ValidatorsSnapshot.Contract.GetRawBlockClaimsSnapshot(&_ValidatorsSnapshot.CallOpts, _epoch)
}

// GetRawSignatureSnapshot is a free data retrieval call binding the contract method 0x35b6c632.
//
// Solidity: function getRawSignatureSnapshot(uint256 _epoch) view returns(bytes)
func (_ValidatorsSnapshot *ValidatorsSnapshotCaller) GetRawSignatureSnapshot(opts *bind.CallOpts, _epoch *big.Int) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _ValidatorsSnapshot.contract.Call(opts, out, "getRawSignatureSnapshot", _epoch)
	return *ret0, err
}

// GetRawSignatureSnapshot is a free data retrieval call binding the contract method 0x35b6c632.
//
// Solidity: function getRawSignatureSnapshot(uint256 _epoch) view returns(bytes)
func (_ValidatorsSnapshot *ValidatorsSnapshotSession) GetRawSignatureSnapshot(_epoch *big.Int) ([]byte, error) {
	return _ValidatorsSnapshot.Contract.GetRawSignatureSnapshot(&_ValidatorsSnapshot.CallOpts, _epoch)
}

// GetRawSignatureSnapshot is a free data retrieval call binding the contract method 0x35b6c632.
//
// Solidity: function getRawSignatureSnapshot(uint256 _epoch) view returns(bytes)
func (_ValidatorsSnapshot *ValidatorsSnapshotCallerSession) GetRawSignatureSnapshot(_epoch *big.Int) ([]byte, error) {
	return _ValidatorsSnapshot.Contract.GetRawSignatureSnapshot(&_ValidatorsSnapshot.CallOpts, _epoch)
}

// MajorStakeFine is a free data retrieval call binding the contract method 0xad43d845.
//
// Solidity: function majorStakeFine() view returns(uint256)
func (_ValidatorsSnapshot *ValidatorsSnapshotCaller) MajorStakeFine(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ValidatorsSnapshot.contract.Call(opts, out, "majorStakeFine")
	return *ret0, err
}

// MajorStakeFine is a free data retrieval call binding the contract method 0xad43d845.
//
// Solidity: function majorStakeFine() view returns(uint256)
func (_ValidatorsSnapshot *ValidatorsSnapshotSession) MajorStakeFine() (*big.Int, error) {
	return _ValidatorsSnapshot.Contract.MajorStakeFine(&_ValidatorsSnapshot.CallOpts)
}

// MajorStakeFine is a free data retrieval call binding the contract method 0xad43d845.
//
// Solidity: function majorStakeFine() view returns(uint256)
func (_ValidatorsSnapshot *ValidatorsSnapshotCallerSession) MajorStakeFine() (*big.Int, error) {
	return _ValidatorsSnapshot.Contract.MajorStakeFine(&_ValidatorsSnapshot.CallOpts)
}

// MinimumStake is a free data retrieval call binding the contract method 0xec5ffac2.
//
// Solidity: function minimumStake() view returns(uint256)
func (_ValidatorsSnapshot *ValidatorsSnapshotCaller) MinimumStake(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ValidatorsSnapshot.contract.Call(opts, out, "minimumStake")
	return *ret0, err
}

// MinimumStake is a free data retrieval call binding the contract method 0xec5ffac2.
//
// Solidity: function minimumStake() view returns(uint256)
func (_ValidatorsSnapshot *ValidatorsSnapshotSession) MinimumStake() (*big.Int, error) {
	return _ValidatorsSnapshot.Contract.MinimumStake(&_ValidatorsSnapshot.CallOpts)
}

// MinimumStake is a free data retrieval call binding the contract method 0xec5ffac2.
//
// Solidity: function minimumStake() view returns(uint256)
func (_ValidatorsSnapshot *ValidatorsSnapshotCallerSession) MinimumStake() (*big.Int, error) {
	return _ValidatorsSnapshot.Contract.MinimumStake(&_ValidatorsSnapshot.CallOpts)
}

// MinorStakeFine is a free data retrieval call binding the contract method 0x6d059126.
//
// Solidity: function minorStakeFine() view returns(uint256)
func (_ValidatorsSnapshot *ValidatorsSnapshotCaller) MinorStakeFine(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ValidatorsSnapshot.contract.Call(opts, out, "minorStakeFine")
	return *ret0, err
}

// MinorStakeFine is a free data retrieval call binding the contract method 0x6d059126.
//
// Solidity: function minorStakeFine() view returns(uint256)
func (_ValidatorsSnapshot *ValidatorsSnapshotSession) MinorStakeFine() (*big.Int, error) {
	return _ValidatorsSnapshot.Contract.MinorStakeFine(&_ValidatorsSnapshot.CallOpts)
}

// MinorStakeFine is a free data retrieval call binding the contract method 0x6d059126.
//
// Solidity: function minorStakeFine() view returns(uint256)
func (_ValidatorsSnapshot *ValidatorsSnapshotCallerSession) MinorStakeFine() (*big.Int, error) {
	return _ValidatorsSnapshot.Contract.MinorStakeFine(&_ValidatorsSnapshot.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ValidatorsSnapshot *ValidatorsSnapshotCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ValidatorsSnapshot.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ValidatorsSnapshot *ValidatorsSnapshotSession) Owner() (common.Address, error) {
	return _ValidatorsSnapshot.Contract.Owner(&_ValidatorsSnapshot.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ValidatorsSnapshot *ValidatorsSnapshotCallerSession) Owner() (common.Address, error) {
	return _ValidatorsSnapshot.Contract.Owner(&_ValidatorsSnapshot.CallOpts)
}

// ParseSignatureGroup is a free data retrieval call binding the contract method 0x9be2f2df.
//
// Solidity: function parseSignatureGroup(bytes _signatureGroup) pure returns(uint256[4] publicKey, uint256[2] signature)
func (_ValidatorsSnapshot *ValidatorsSnapshotCaller) ParseSignatureGroup(opts *bind.CallOpts, _signatureGroup []byte) (struct {
	PublicKey [4]*big.Int
	Signature [2]*big.Int
}, error) {
	ret := new(struct {
		PublicKey [4]*big.Int
		Signature [2]*big.Int
	})
	out := ret
	err := _ValidatorsSnapshot.contract.Call(opts, out, "parseSignatureGroup", _signatureGroup)
	return *ret, err
}

// ParseSignatureGroup is a free data retrieval call binding the contract method 0x9be2f2df.
//
// Solidity: function parseSignatureGroup(bytes _signatureGroup) pure returns(uint256[4] publicKey, uint256[2] signature)
func (_ValidatorsSnapshot *ValidatorsSnapshotSession) ParseSignatureGroup(_signatureGroup []byte) (struct {
	PublicKey [4]*big.Int
	Signature [2]*big.Int
}, error) {
	return _ValidatorsSnapshot.Contract.ParseSignatureGroup(&_ValidatorsSnapshot.CallOpts, _signatureGroup)
}

// ParseSignatureGroup is a free data retrieval call binding the contract method 0x9be2f2df.
//
// Solidity: function parseSignatureGroup(bytes _signatureGroup) pure returns(uint256[4] publicKey, uint256[2] signature)
func (_ValidatorsSnapshot *ValidatorsSnapshotCallerSession) ParseSignatureGroup(_signatureGroup []byte) (struct {
	PublicKey [4]*big.Int
	Signature [2]*big.Int
}, error) {
	return _ValidatorsSnapshot.Contract.ParseSignatureGroup(&_ValidatorsSnapshot.CallOpts, _signatureGroup)
}

// Reverse is a free data retrieval call binding the contract method 0xec11c823.
//
// Solidity: function reverse(bytes orig) pure returns(bytes reversed)
func (_ValidatorsSnapshot *ValidatorsSnapshotCaller) Reverse(opts *bind.CallOpts, orig []byte) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _ValidatorsSnapshot.contract.Call(opts, out, "reverse", orig)
	return *ret0, err
}

// Reverse is a free data retrieval call binding the contract method 0xec11c823.
//
// Solidity: function reverse(bytes orig) pure returns(bytes reversed)
func (_ValidatorsSnapshot *ValidatorsSnapshotSession) Reverse(orig []byte) ([]byte, error) {
	return _ValidatorsSnapshot.Contract.Reverse(&_ValidatorsSnapshot.CallOpts, orig)
}

// Reverse is a free data retrieval call binding the contract method 0xec11c823.
//
// Solidity: function reverse(bytes orig) pure returns(bytes reversed)
func (_ValidatorsSnapshot *ValidatorsSnapshotCallerSession) Reverse(orig []byte) ([]byte, error) {
	return _ValidatorsSnapshot.Contract.Reverse(&_ValidatorsSnapshot.CallOpts, orig)
}

// RewardAmount is a free data retrieval call binding the contract method 0xf7b2a7be.
//
// Solidity: function rewardAmount() view returns(uint256)
func (_ValidatorsSnapshot *ValidatorsSnapshotCaller) RewardAmount(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ValidatorsSnapshot.contract.Call(opts, out, "rewardAmount")
	return *ret0, err
}

// RewardAmount is a free data retrieval call binding the contract method 0xf7b2a7be.
//
// Solidity: function rewardAmount() view returns(uint256)
func (_ValidatorsSnapshot *ValidatorsSnapshotSession) RewardAmount() (*big.Int, error) {
	return _ValidatorsSnapshot.Contract.RewardAmount(&_ValidatorsSnapshot.CallOpts)
}

// RewardAmount is a free data retrieval call binding the contract method 0xf7b2a7be.
//
// Solidity: function rewardAmount() view returns(uint256)
func (_ValidatorsSnapshot *ValidatorsSnapshotCallerSession) RewardAmount() (*big.Int, error) {
	return _ValidatorsSnapshot.Contract.RewardAmount(&_ValidatorsSnapshot.CallOpts)
}

// RewardBonus is a free data retrieval call binding the contract method 0xfdf553cf.
//
// Solidity: function rewardBonus() view returns(uint256)
func (_ValidatorsSnapshot *ValidatorsSnapshotCaller) RewardBonus(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ValidatorsSnapshot.contract.Call(opts, out, "rewardBonus")
	return *ret0, err
}

// RewardBonus is a free data retrieval call binding the contract method 0xfdf553cf.
//
// Solidity: function rewardBonus() view returns(uint256)
func (_ValidatorsSnapshot *ValidatorsSnapshotSession) RewardBonus() (*big.Int, error) {
	return _ValidatorsSnapshot.Contract.RewardBonus(&_ValidatorsSnapshot.CallOpts)
}

// RewardBonus is a free data retrieval call binding the contract method 0xfdf553cf.
//
// Solidity: function rewardBonus() view returns(uint256)
func (_ValidatorsSnapshot *ValidatorsSnapshotCallerSession) RewardBonus() (*big.Int, error) {
	return _ValidatorsSnapshot.Contract.RewardBonus(&_ValidatorsSnapshot.CallOpts)
}

// Stopped is a free data retrieval call binding the contract method 0x75f12b21.
//
// Solidity: function stopped() view returns(bool)
func (_ValidatorsSnapshot *ValidatorsSnapshotCaller) Stopped(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ValidatorsSnapshot.contract.Call(opts, out, "stopped")
	return *ret0, err
}

// Stopped is a free data retrieval call binding the contract method 0x75f12b21.
//
// Solidity: function stopped() view returns(bool)
func (_ValidatorsSnapshot *ValidatorsSnapshotSession) Stopped() (bool, error) {
	return _ValidatorsSnapshot.Contract.Stopped(&_ValidatorsSnapshot.CallOpts)
}

// Stopped is a free data retrieval call binding the contract method 0x75f12b21.
//
// Solidity: function stopped() view returns(bool)
func (_ValidatorsSnapshot *ValidatorsSnapshotCallerSession) Stopped() (bool, error) {
	return _ValidatorsSnapshot.Contract.Stopped(&_ValidatorsSnapshot.CallOpts)
}

// ValidatorCount is a free data retrieval call binding the contract method 0x0f43a677.
//
// Solidity: function validatorCount() view returns(uint8)
func (_ValidatorsSnapshot *ValidatorsSnapshotCaller) ValidatorCount(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _ValidatorsSnapshot.contract.Call(opts, out, "validatorCount")
	return *ret0, err
}

// ValidatorCount is a free data retrieval call binding the contract method 0x0f43a677.
//
// Solidity: function validatorCount() view returns(uint8)
func (_ValidatorsSnapshot *ValidatorsSnapshotSession) ValidatorCount() (uint8, error) {
	return _ValidatorsSnapshot.Contract.ValidatorCount(&_ValidatorsSnapshot.CallOpts)
}

// ValidatorCount is a free data retrieval call binding the contract method 0x0f43a677.
//
// Solidity: function validatorCount() view returns(uint8)
func (_ValidatorsSnapshot *ValidatorsSnapshotCallerSession) ValidatorCount() (uint8, error) {
	return _ValidatorsSnapshot.Contract.ValidatorCount(&_ValidatorsSnapshot.CallOpts)
}

// ValidatorMaxCount is a free data retrieval call binding the contract method 0x09f0d45d.
//
// Solidity: function validatorMaxCount() view returns(uint8)
func (_ValidatorsSnapshot *ValidatorsSnapshotCaller) ValidatorMaxCount(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _ValidatorsSnapshot.contract.Call(opts, out, "validatorMaxCount")
	return *ret0, err
}

// ValidatorMaxCount is a free data retrieval call binding the contract method 0x09f0d45d.
//
// Solidity: function validatorMaxCount() view returns(uint8)
func (_ValidatorsSnapshot *ValidatorsSnapshotSession) ValidatorMaxCount() (uint8, error) {
	return _ValidatorsSnapshot.Contract.ValidatorMaxCount(&_ValidatorsSnapshot.CallOpts)
}

// ValidatorMaxCount is a free data retrieval call binding the contract method 0x09f0d45d.
//
// Solidity: function validatorMaxCount() view returns(uint8)
func (_ValidatorsSnapshot *ValidatorsSnapshotCallerSession) ValidatorMaxCount() (uint8, error) {
	return _ValidatorsSnapshot.Contract.ValidatorMaxCount(&_ValidatorsSnapshot.CallOpts)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_ValidatorsSnapshot *ValidatorsSnapshotTransactor) GrantOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _ValidatorsSnapshot.contract.Transact(opts, "grantOperator", _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_ValidatorsSnapshot *ValidatorsSnapshotSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _ValidatorsSnapshot.Contract.GrantOperator(&_ValidatorsSnapshot.TransactOpts, _operator)
}

// GrantOperator is a paid mutator transaction binding the contract method 0xe348da13.
//
// Solidity: function grantOperator(address _operator) returns()
func (_ValidatorsSnapshot *ValidatorsSnapshotTransactorSession) GrantOperator(_operator common.Address) (*types.Transaction, error) {
	return _ValidatorsSnapshot.Contract.GrantOperator(&_ValidatorsSnapshot.TransactOpts, _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_ValidatorsSnapshot *ValidatorsSnapshotTransactor) RevokeOperator(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	return _ValidatorsSnapshot.contract.Transact(opts, "revokeOperator", _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_ValidatorsSnapshot *ValidatorsSnapshotSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _ValidatorsSnapshot.Contract.RevokeOperator(&_ValidatorsSnapshot.TransactOpts, _operator)
}

// RevokeOperator is a paid mutator transaction binding the contract method 0xfad8b32a.
//
// Solidity: function revokeOperator(address _operator) returns()
func (_ValidatorsSnapshot *ValidatorsSnapshotTransactorSession) RevokeOperator(_operator common.Address) (*types.Transaction, error) {
	return _ValidatorsSnapshot.Contract.RevokeOperator(&_ValidatorsSnapshot.TransactOpts, _operator)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_ValidatorsSnapshot *ValidatorsSnapshotTransactor) SetAuthority(opts *bind.TransactOpts, authority_ common.Address) (*types.Transaction, error) {
	return _ValidatorsSnapshot.contract.Transact(opts, "setAuthority", authority_)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_ValidatorsSnapshot *ValidatorsSnapshotSession) SetAuthority(authority_ common.Address) (*types.Transaction, error) {
	return _ValidatorsSnapshot.Contract.SetAuthority(&_ValidatorsSnapshot.TransactOpts, authority_)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address authority_) returns()
func (_ValidatorsSnapshot *ValidatorsSnapshotTransactorSession) SetAuthority(authority_ common.Address) (*types.Transaction, error) {
	return _ValidatorsSnapshot.Contract.SetAuthority(&_ValidatorsSnapshot.TransactOpts, authority_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_ValidatorsSnapshot *ValidatorsSnapshotTransactor) SetOwner(opts *bind.TransactOpts, owner_ common.Address) (*types.Transaction, error) {
	return _ValidatorsSnapshot.contract.Transact(opts, "setOwner", owner_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_ValidatorsSnapshot *ValidatorsSnapshotSession) SetOwner(owner_ common.Address) (*types.Transaction, error) {
	return _ValidatorsSnapshot.Contract.SetOwner(&_ValidatorsSnapshot.TransactOpts, owner_)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address owner_) returns()
func (_ValidatorsSnapshot *ValidatorsSnapshotTransactorSession) SetOwner(owner_ common.Address) (*types.Transaction, error) {
	return _ValidatorsSnapshot.Contract.SetOwner(&_ValidatorsSnapshot.TransactOpts, owner_)
}

// Snapshot is a paid mutator transaction binding the contract method 0x08ca1f25.
//
// Solidity: function snapshot(bytes _signatureGroup, bytes _bclaims) returns(bool)
func (_ValidatorsSnapshot *ValidatorsSnapshotTransactor) Snapshot(opts *bind.TransactOpts, _signatureGroup []byte, _bclaims []byte) (*types.Transaction, error) {
	return _ValidatorsSnapshot.contract.Transact(opts, "snapshot", _signatureGroup, _bclaims)
}

// Snapshot is a paid mutator transaction binding the contract method 0x08ca1f25.
//
// Solidity: function snapshot(bytes _signatureGroup, bytes _bclaims) returns(bool)
func (_ValidatorsSnapshot *ValidatorsSnapshotSession) Snapshot(_signatureGroup []byte, _bclaims []byte) (*types.Transaction, error) {
	return _ValidatorsSnapshot.Contract.Snapshot(&_ValidatorsSnapshot.TransactOpts, _signatureGroup, _bclaims)
}

// Snapshot is a paid mutator transaction binding the contract method 0x08ca1f25.
//
// Solidity: function snapshot(bytes _signatureGroup, bytes _bclaims) returns(bool)
func (_ValidatorsSnapshot *ValidatorsSnapshotTransactorSession) Snapshot(_signatureGroup []byte, _bclaims []byte) (*types.Transaction, error) {
	return _ValidatorsSnapshot.Contract.Snapshot(&_ValidatorsSnapshot.TransactOpts, _signatureGroup, _bclaims)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_ValidatorsSnapshot *ValidatorsSnapshotTransactor) Start(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorsSnapshot.contract.Transact(opts, "start")
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_ValidatorsSnapshot *ValidatorsSnapshotSession) Start() (*types.Transaction, error) {
	return _ValidatorsSnapshot.Contract.Start(&_ValidatorsSnapshot.TransactOpts)
}

// Start is a paid mutator transaction binding the contract method 0xbe9a6555.
//
// Solidity: function start() returns()
func (_ValidatorsSnapshot *ValidatorsSnapshotTransactorSession) Start() (*types.Transaction, error) {
	return _ValidatorsSnapshot.Contract.Start(&_ValidatorsSnapshot.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_ValidatorsSnapshot *ValidatorsSnapshotTransactor) Stop(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorsSnapshot.contract.Transact(opts, "stop")
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_ValidatorsSnapshot *ValidatorsSnapshotSession) Stop() (*types.Transaction, error) {
	return _ValidatorsSnapshot.Contract.Stop(&_ValidatorsSnapshot.TransactOpts)
}

// Stop is a paid mutator transaction binding the contract method 0x07da68f5.
//
// Solidity: function stop() returns()
func (_ValidatorsSnapshot *ValidatorsSnapshotTransactorSession) Stop() (*types.Transaction, error) {
	return _ValidatorsSnapshot.Contract.Stop(&_ValidatorsSnapshot.TransactOpts)
}

// ValidatorsSnapshotLogSetAuthorityIterator is returned from FilterLogSetAuthority and is used to iterate over the raw logs and unpacked data for LogSetAuthority events raised by the ValidatorsSnapshot contract.
type ValidatorsSnapshotLogSetAuthorityIterator struct {
	Event *ValidatorsSnapshotLogSetAuthority // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsSnapshotLogSetAuthorityIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsSnapshotLogSetAuthority)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsSnapshotLogSetAuthority)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsSnapshotLogSetAuthorityIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsSnapshotLogSetAuthorityIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsSnapshotLogSetAuthority represents a LogSetAuthority event raised by the ValidatorsSnapshot contract.
type ValidatorsSnapshotLogSetAuthority struct {
	Authority common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterLogSetAuthority is a free log retrieval operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_ValidatorsSnapshot *ValidatorsSnapshotFilterer) FilterLogSetAuthority(opts *bind.FilterOpts, authority []common.Address) (*ValidatorsSnapshotLogSetAuthorityIterator, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}

	logs, sub, err := _ValidatorsSnapshot.contract.FilterLogs(opts, "LogSetAuthority", authorityRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsSnapshotLogSetAuthorityIterator{contract: _ValidatorsSnapshot.contract, event: "LogSetAuthority", logs: logs, sub: sub}, nil
}

// WatchLogSetAuthority is a free log subscription operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_ValidatorsSnapshot *ValidatorsSnapshotFilterer) WatchLogSetAuthority(opts *bind.WatchOpts, sink chan<- *ValidatorsSnapshotLogSetAuthority, authority []common.Address) (event.Subscription, error) {

	var authorityRule []interface{}
	for _, authorityItem := range authority {
		authorityRule = append(authorityRule, authorityItem)
	}

	logs, sub, err := _ValidatorsSnapshot.contract.WatchLogs(opts, "LogSetAuthority", authorityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsSnapshotLogSetAuthority)
				if err := _ValidatorsSnapshot.contract.UnpackLog(event, "LogSetAuthority", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogSetAuthority is a log parse operation binding the contract event 0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4.
//
// Solidity: event LogSetAuthority(address indexed authority)
func (_ValidatorsSnapshot *ValidatorsSnapshotFilterer) ParseLogSetAuthority(log types.Log) (*ValidatorsSnapshotLogSetAuthority, error) {
	event := new(ValidatorsSnapshotLogSetAuthority)
	if err := _ValidatorsSnapshot.contract.UnpackLog(event, "LogSetAuthority", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorsSnapshotLogSetOwnerIterator is returned from FilterLogSetOwner and is used to iterate over the raw logs and unpacked data for LogSetOwner events raised by the ValidatorsSnapshot contract.
type ValidatorsSnapshotLogSetOwnerIterator struct {
	Event *ValidatorsSnapshotLogSetOwner // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsSnapshotLogSetOwnerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsSnapshotLogSetOwner)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsSnapshotLogSetOwner)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsSnapshotLogSetOwnerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsSnapshotLogSetOwnerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsSnapshotLogSetOwner represents a LogSetOwner event raised by the ValidatorsSnapshot contract.
type ValidatorsSnapshotLogSetOwner struct {
	Owner common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogSetOwner is a free log retrieval operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_ValidatorsSnapshot *ValidatorsSnapshotFilterer) FilterLogSetOwner(opts *bind.FilterOpts, owner []common.Address) (*ValidatorsSnapshotLogSetOwnerIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _ValidatorsSnapshot.contract.FilterLogs(opts, "LogSetOwner", ownerRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsSnapshotLogSetOwnerIterator{contract: _ValidatorsSnapshot.contract, event: "LogSetOwner", logs: logs, sub: sub}, nil
}

// WatchLogSetOwner is a free log subscription operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_ValidatorsSnapshot *ValidatorsSnapshotFilterer) WatchLogSetOwner(opts *bind.WatchOpts, sink chan<- *ValidatorsSnapshotLogSetOwner, owner []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _ValidatorsSnapshot.contract.WatchLogs(opts, "LogSetOwner", ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsSnapshotLogSetOwner)
				if err := _ValidatorsSnapshot.contract.UnpackLog(event, "LogSetOwner", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogSetOwner is a log parse operation binding the contract event 0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94.
//
// Solidity: event LogSetOwner(address indexed owner)
func (_ValidatorsSnapshot *ValidatorsSnapshotFilterer) ParseLogSetOwner(log types.Log) (*ValidatorsSnapshotLogSetOwner, error) {
	event := new(ValidatorsSnapshotLogSetOwner)
	if err := _ValidatorsSnapshot.contract.UnpackLog(event, "LogSetOwner", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorsSnapshotSnapshotTakenIterator is returned from FilterSnapshotTaken and is used to iterate over the raw logs and unpacked data for SnapshotTaken events raised by the ValidatorsSnapshot contract.
type ValidatorsSnapshotSnapshotTakenIterator struct {
	Event *ValidatorsSnapshotSnapshotTaken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsSnapshotSnapshotTakenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsSnapshotSnapshotTaken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsSnapshotSnapshotTaken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsSnapshotSnapshotTakenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsSnapshotSnapshotTakenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsSnapshotSnapshotTaken represents a SnapshotTaken event raised by the ValidatorsSnapshot contract.
type ValidatorsSnapshotSnapshotTaken struct {
	ChainId        uint32
	Epoch          *big.Int
	Height         uint32
	Validator      common.Address
	StartingETHDKG bool
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterSnapshotTaken is a free log retrieval operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_ValidatorsSnapshot *ValidatorsSnapshotFilterer) FilterSnapshotTaken(opts *bind.FilterOpts, epoch []*big.Int, validator []common.Address) (*ValidatorsSnapshotSnapshotTakenIterator, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorsSnapshot.contract.FilterLogs(opts, "SnapshotTaken", epochRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsSnapshotSnapshotTakenIterator{contract: _ValidatorsSnapshot.contract, event: "SnapshotTaken", logs: logs, sub: sub}, nil
}

// WatchSnapshotTaken is a free log subscription operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_ValidatorsSnapshot *ValidatorsSnapshotFilterer) WatchSnapshotTaken(opts *bind.WatchOpts, sink chan<- *ValidatorsSnapshotSnapshotTaken, epoch []*big.Int, validator []common.Address) (event.Subscription, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorsSnapshot.contract.WatchLogs(opts, "SnapshotTaken", epochRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsSnapshotSnapshotTaken)
				if err := _ValidatorsSnapshot.contract.UnpackLog(event, "SnapshotTaken", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSnapshotTaken is a log parse operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_ValidatorsSnapshot *ValidatorsSnapshotFilterer) ParseSnapshotTaken(log types.Log) (*ValidatorsSnapshotSnapshotTaken, error) {
	event := new(ValidatorsSnapshotSnapshotTaken)
	if err := _ValidatorsSnapshot.contract.UnpackLog(event, "SnapshotTaken", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorsSnapshotValidatorCreatedIterator is returned from FilterValidatorCreated and is used to iterate over the raw logs and unpacked data for ValidatorCreated events raised by the ValidatorsSnapshot contract.
type ValidatorsSnapshotValidatorCreatedIterator struct {
	Event *ValidatorsSnapshotValidatorCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsSnapshotValidatorCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsSnapshotValidatorCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsSnapshotValidatorCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsSnapshotValidatorCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsSnapshotValidatorCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsSnapshotValidatorCreated represents a ValidatorCreated event raised by the ValidatorsSnapshot contract.
type ValidatorsSnapshotValidatorCreated struct {
	Validator common.Address
	Signer    common.Address
	MadID     [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorCreated is a free log retrieval operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_ValidatorsSnapshot *ValidatorsSnapshotFilterer) FilterValidatorCreated(opts *bind.FilterOpts, validator []common.Address, signer []common.Address) (*ValidatorsSnapshotValidatorCreatedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var signerRule []interface{}
	for _, signerItem := range signer {
		signerRule = append(signerRule, signerItem)
	}

	logs, sub, err := _ValidatorsSnapshot.contract.FilterLogs(opts, "ValidatorCreated", validatorRule, signerRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsSnapshotValidatorCreatedIterator{contract: _ValidatorsSnapshot.contract, event: "ValidatorCreated", logs: logs, sub: sub}, nil
}

// WatchValidatorCreated is a free log subscription operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_ValidatorsSnapshot *ValidatorsSnapshotFilterer) WatchValidatorCreated(opts *bind.WatchOpts, sink chan<- *ValidatorsSnapshotValidatorCreated, validator []common.Address, signer []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var signerRule []interface{}
	for _, signerItem := range signer {
		signerRule = append(signerRule, signerItem)
	}

	logs, sub, err := _ValidatorsSnapshot.contract.WatchLogs(opts, "ValidatorCreated", validatorRule, signerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsSnapshotValidatorCreated)
				if err := _ValidatorsSnapshot.contract.UnpackLog(event, "ValidatorCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorCreated is a log parse operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_ValidatorsSnapshot *ValidatorsSnapshotFilterer) ParseValidatorCreated(log types.Log) (*ValidatorsSnapshotValidatorCreated, error) {
	event := new(ValidatorsSnapshotValidatorCreated)
	if err := _ValidatorsSnapshot.contract.UnpackLog(event, "ValidatorCreated", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorsSnapshotValidatorJoinedIterator is returned from FilterValidatorJoined and is used to iterate over the raw logs and unpacked data for ValidatorJoined events raised by the ValidatorsSnapshot contract.
type ValidatorsSnapshotValidatorJoinedIterator struct {
	Event *ValidatorsSnapshotValidatorJoined // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsSnapshotValidatorJoinedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsSnapshotValidatorJoined)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsSnapshotValidatorJoined)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsSnapshotValidatorJoinedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsSnapshotValidatorJoinedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsSnapshotValidatorJoined represents a ValidatorJoined event raised by the ValidatorsSnapshot contract.
type ValidatorsSnapshotValidatorJoined struct {
	Validator common.Address
	MadID     [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorJoined is a free log retrieval operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_ValidatorsSnapshot *ValidatorsSnapshotFilterer) FilterValidatorJoined(opts *bind.FilterOpts, validator []common.Address) (*ValidatorsSnapshotValidatorJoinedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorsSnapshot.contract.FilterLogs(opts, "ValidatorJoined", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsSnapshotValidatorJoinedIterator{contract: _ValidatorsSnapshot.contract, event: "ValidatorJoined", logs: logs, sub: sub}, nil
}

// WatchValidatorJoined is a free log subscription operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_ValidatorsSnapshot *ValidatorsSnapshotFilterer) WatchValidatorJoined(opts *bind.WatchOpts, sink chan<- *ValidatorsSnapshotValidatorJoined, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorsSnapshot.contract.WatchLogs(opts, "ValidatorJoined", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsSnapshotValidatorJoined)
				if err := _ValidatorsSnapshot.contract.UnpackLog(event, "ValidatorJoined", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorJoined is a log parse operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_ValidatorsSnapshot *ValidatorsSnapshotFilterer) ParseValidatorJoined(log types.Log) (*ValidatorsSnapshotValidatorJoined, error) {
	event := new(ValidatorsSnapshotValidatorJoined)
	if err := _ValidatorsSnapshot.contract.UnpackLog(event, "ValidatorJoined", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorsSnapshotValidatorLeftIterator is returned from FilterValidatorLeft and is used to iterate over the raw logs and unpacked data for ValidatorLeft events raised by the ValidatorsSnapshot contract.
type ValidatorsSnapshotValidatorLeftIterator struct {
	Event *ValidatorsSnapshotValidatorLeft // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsSnapshotValidatorLeftIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsSnapshotValidatorLeft)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsSnapshotValidatorLeft)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsSnapshotValidatorLeftIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsSnapshotValidatorLeftIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsSnapshotValidatorLeft represents a ValidatorLeft event raised by the ValidatorsSnapshot contract.
type ValidatorsSnapshotValidatorLeft struct {
	Validator common.Address
	PkHash    [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorLeft is a free log retrieval operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_ValidatorsSnapshot *ValidatorsSnapshotFilterer) FilterValidatorLeft(opts *bind.FilterOpts, validator []common.Address) (*ValidatorsSnapshotValidatorLeftIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorsSnapshot.contract.FilterLogs(opts, "ValidatorLeft", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsSnapshotValidatorLeftIterator{contract: _ValidatorsSnapshot.contract, event: "ValidatorLeft", logs: logs, sub: sub}, nil
}

// WatchValidatorLeft is a free log subscription operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_ValidatorsSnapshot *ValidatorsSnapshotFilterer) WatchValidatorLeft(opts *bind.WatchOpts, sink chan<- *ValidatorsSnapshotValidatorLeft, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorsSnapshot.contract.WatchLogs(opts, "ValidatorLeft", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsSnapshotValidatorLeft)
				if err := _ValidatorsSnapshot.contract.UnpackLog(event, "ValidatorLeft", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorLeft is a log parse operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_ValidatorsSnapshot *ValidatorsSnapshotFilterer) ParseValidatorLeft(log types.Log) (*ValidatorsSnapshotValidatorLeft, error) {
	event := new(ValidatorsSnapshotValidatorLeft)
	if err := _ValidatorsSnapshot.contract.UnpackLog(event, "ValidatorLeft", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorsSnapshotValidatorQueuedIterator is returned from FilterValidatorQueued and is used to iterate over the raw logs and unpacked data for ValidatorQueued events raised by the ValidatorsSnapshot contract.
type ValidatorsSnapshotValidatorQueuedIterator struct {
	Event *ValidatorsSnapshotValidatorQueued // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsSnapshotValidatorQueuedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsSnapshotValidatorQueued)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsSnapshotValidatorQueued)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsSnapshotValidatorQueuedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsSnapshotValidatorQueuedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsSnapshotValidatorQueued represents a ValidatorQueued event raised by the ValidatorsSnapshot contract.
type ValidatorsSnapshotValidatorQueued struct {
	Validator common.Address
	PkHash    [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorQueued is a free log retrieval operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_ValidatorsSnapshot *ValidatorsSnapshotFilterer) FilterValidatorQueued(opts *bind.FilterOpts, validator []common.Address) (*ValidatorsSnapshotValidatorQueuedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorsSnapshot.contract.FilterLogs(opts, "ValidatorQueued", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsSnapshotValidatorQueuedIterator{contract: _ValidatorsSnapshot.contract, event: "ValidatorQueued", logs: logs, sub: sub}, nil
}

// WatchValidatorQueued is a free log subscription operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_ValidatorsSnapshot *ValidatorsSnapshotFilterer) WatchValidatorQueued(opts *bind.WatchOpts, sink chan<- *ValidatorsSnapshotValidatorQueued, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorsSnapshot.contract.WatchLogs(opts, "ValidatorQueued", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsSnapshotValidatorQueued)
				if err := _ValidatorsSnapshot.contract.UnpackLog(event, "ValidatorQueued", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorQueued is a log parse operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_ValidatorsSnapshot *ValidatorsSnapshotFilterer) ParseValidatorQueued(log types.Log) (*ValidatorsSnapshotValidatorQueued, error) {
	event := new(ValidatorsSnapshotValidatorQueued)
	if err := _ValidatorsSnapshot.contract.UnpackLog(event, "ValidatorQueued", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorsSnapshotTestABI is the input ABI used to generate the binding from.
const ValidatorsSnapshotTestABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"log_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"log_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"log_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"name\":\"log_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"log_named_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\"}],\"name\":\"log_named_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\"}],\"name\":\"log_named_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"}],\"name\":\"log_named_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"}],\"name\":\"log_named_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"log_named_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"log_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"logs\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testExtractUint256\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testExtractUint32\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// ValidatorsSnapshotTestBin is the compiled bytecode used for deploying new contracts.
var ValidatorsSnapshotTestBin = "0x608060405260016000806101000a81548160ff02191690831515021790555034801561002a57600080fd5b50612f8c8061003a6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80630a9254e41461005c5780633e6fe276146100665780638350596914610070578063ba414fa61461007a578063fa7626d41461009a575b600080fd5b6100646100ba565b005b61006e610125565b005b610078610296565b005b61008261040d565b60405180821515815260200191505060405180910390f35b6100a2610420565b60405180821515815260200191505060405180910390f35b6040516100c69061058d565b604051809103906000f0801580156100e2573d6000803e3d6000fd5b50600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60006040518060a0016040528060808152602001612ed760809139905060007fd8d6b02811ca34cef0bcbc79cc5dfaf2dc6b8133ea46d552ebfc96f1c2b2d71090506000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631c8c8ba48460006040518363ffffffff1660e01b81526004018080602001838152602001828103825284818151815260200191508051906020019080838360005b838110156101ff5780820151818401526020810190506101e4565b50505050905090810190601f16801561022c5780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561024a57600080fd5b505afa15801561025e573d6000803e3d6000fd5b505050506040513d602081101561027457600080fd5b810190808051906020019092919050505090506102918183610431565b505050565b60006040518060400160405280600481526020017f0102040000000000000000000000000000000000000000000000000000000000815250905060006204020190506000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c1312f4d8460006040518363ffffffff1660e01b81526004018080602001838152602001828103825284818151815260200191508051906020019080838360005b83811015610370578082015181840152602081019050610355565b50505050905090810190601f16801561039d5780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b1580156103bb57600080fd5b505afa1580156103cf573d6000803e3d6000fd5b505050506040513d60208110156103e557600080fd5b810190808051906020019092919050505090506104088163ffffffff1683610431565b505050565b600060019054906101000a900460ff1681565b60008054906101000a900460ff1681565b80821461056c577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051808060200182810382526022815260200180612eb56022913960400191505060405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a88160405180806020018381526020018281038252600a8152602001807f20204578706563746564000000000000000000000000000000000000000000008152506020019250505060405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a88260405180806020018381526020018281038252600a8152602001807f2020202041637475616c000000000000000000000000000000000000000000008152506020019250505060405180910390a161056b610570565b5b5050565b6001600060016101000a81548160ff021916908315150217905550565b61291a8061059b8339019056fe60806040523480156200001157600080fd5b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9460405160405180910390a233600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200010a600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166200011060201b60201c565b6200027a565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480620001b65750600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6200020d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526031815260200180620028e96031913960400191505060405180910390fd5b6001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060036000815480929190600101919050555050565b61265f806200028a6000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c80638da5cb5b116100f9578063e348da1311610097578063ec5ffac211610071578063ec5ffac214610ace578063f7b2a7be14610aec578063fad8b32a14610b0a578063fdf553cf14610b4e576101a9565b8063e348da131461090e578063e380b22814610952578063ec11c8231461099a576101a9565b8063ad43d845116100d3578063ad43d845146107d3578063be9a6555146107f1578063bf7e214f146107fb578063c1312f4d1461082f576101a9565b80638da5cb5b1461065b578063900cf0cf1461068f5780639be2f2df146106ad576101a9565b80631c8c8ba4116101665780636372fe51116101405780636372fe51146105325780636d059126146105d957806375f12b21146105f75780637a9e5e4b14610617576101a9565b80631c8c8ba41461036a57806335b6c632146104435780634f4ea614146104ea576101a9565b806307da68f5146101ae57806308ca1f25146101b857806309f0d45d1461029c5780630f43a677146102bd57806313af4035146102de57806319f7466914610322575b600080fd5b6101b6610b6c565b005b610284600480360360408110156101ce57600080fd5b81019080803590602001906401000000008111156101eb57600080fd5b8201836020820111156101fd57600080fd5b8035906020019184600183028401116401000000008311171561021f57600080fd5b90919293919293908035906020019064010000000081111561024057600080fd5b82018360208201111561025257600080fd5b8035906020019184600183028401116401000000008311171561027457600080fd5b9091929391929390505050610ce5565b60405180821515815260200191505060405180910390f35b6102a46115f3565b604051808260ff16815260200191505060405180910390f35b6102c5611606565b604051808260ff16815260200191505060405180910390f35b610320600480360360208110156102f457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611619565b005b61034e6004803603602081101561033857600080fd5b8101908080359060200190929190505050611762565b604051808263ffffffff16815260200191505060405180910390f35b61042d6004803603604081101561038057600080fd5b810190808035906020019064010000000081111561039d57600080fd5b8201836020820111156103af57600080fd5b803590602001918460018302840111640100000000831117156103d157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190505050611792565b6040518082815260200191505060405180910390f35b61046f6004803603602081101561045957600080fd5b8101908080359060200190929190505050611803565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104af578082015181840152602081019050610494565b50505050905090810190601f1680156104dc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6105166004803603602081101561050057600080fd5b81019080803590602001909291905050506118bb565b604051808263ffffffff16815260200191505060405180910390f35b61055e6004803603602081101561054857600080fd5b81019080803590602001909291905050506118eb565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561059e578082015181840152602081019050610583565b50505050905090810190601f1680156105cb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6105e16119a3565b6040518082815260200191505060405180910390f35b6105ff6119a9565b60405180821515815260200191505060405180910390f35b6106596004803603602081101561062d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506119bc565b005b610663611b02565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610697611b28565b6040518082815260200191505060405180910390f35b610766600480360360208110156106c357600080fd5b81019080803590602001906401000000008111156106e057600080fd5b8201836020820111156106f257600080fd5b8035906020019184600183028401116401000000008311171561071457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611b2e565b6040518083600460200280838360005b83811015610791578082015181840152602081019050610776565b5050505090500182600260200280838360005b838110156107bf5780820151818401526020810190506107a4565b505050509050019250505060405180910390f35b6107db611c17565b6040518082815260200191505060405180910390f35b6107f9611c1d565b005b610803611d97565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6108f26004803603604081101561084557600080fd5b810190808035906020019064010000000081111561086257600080fd5b82018360208201111561087457600080fd5b8035906020019184600183028401116401000000008311171561089657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190505050611dbb565b604051808263ffffffff16815260200191505060405180910390f35b6109506004803603602081101561092457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611e6c565b005b61097e6004803603602081101561096857600080fd5b8101908080359060200190929190505050611fd3565b604051808263ffffffff16815260200191505060405180910390f35b610a53600480360360208110156109b057600080fd5b81019080803590602001906401000000008111156109cd57600080fd5b8201836020820111156109df57600080fd5b80359060200191846001830284011164010000000083111715610a0157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050612003565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610a93578082015181840152602081019050610a78565b50505050905090810190601f168015610ac05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610ad66120ca565b6040518082815260200191505060405180910390f35b610af46120d0565b6040518082815260200191505060405180910390f35b610b4c60048036036020811015610b2057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506120d6565b005b610b566122ad565b6040518082815260200191505060405180910390f35b610b9a336000357fffffffff00000000000000000000000000000000000000000000000000000000166122b3565b610c0c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f64732d617574682d756e617574686f72697a656400000000000000000000000081525060200191505060405180910390fd5b60008060006004359250602435915034905060018060146101000a81548160ff02191690831515021790555081833373ffffffffffffffffffffffffffffffffffffffff166000357fffffffff00000000000000000000000000000000000000000000000000000000167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168460003660405180848152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505094505050505060405180910390a4505050565b6000600160149054906101000a900460ff1615610d6a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f64732d73746f702d69732d73746f70706564000000000000000000000000000081525060200191505060405180910390fd5b610d726124bf565b610d7a6124e1565b610dc787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611b2e565b809250819350505060008585604051808383808284378083019250505092505050604051809103902060405160200180828152602001915050604051602081830303815290604052905060006060600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16838587604051602401808060200184600260200280838360005b83811015610e83578082015181840152602081019050610e68565b5050505090500183600460200280838360005b83811015610eb1578082015181840152602081019050610e96565b50505050905001828103825285818151815260200191508051906020019080838360005b83811015610ef0578082015181840152602081019050610ed5565b50505050905090810190601f168015610f1d5780820380516001836020036101000a031916815260200191505b509450505050506040516020818303038152906040527f06367587000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b60208310610fd45780518252602082019150602081019050602083039250610fb1565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611036576040519150601f19603f3d011682016040523d82523d6000602084013e61103b565b606091505b508092508193505050816110b7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f5369676e617475726520766572696669636174696f6e206661696c656400000081525060200191505060405180910390fd5b600061110889898080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506008611dbb565b9050600061115b8a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050600c611dbb565b90506000601a60006012548152602001908152602001600020905060018160000160006101000a81548160ff0219169083151502179055508a8a8260010191906111a6929190612503565b508c8c8260020191906111ba929190612503565b50438160030160006101000a81548163ffffffff021916908363ffffffff160217905550818160030160046101000a81548163ffffffff021916908363ffffffff160217905550828160000160016101000a81548163ffffffff021916908363ffffffff16021790555060016012541115611517576000601a600060016012540381526020019081526020016000206040518060c00160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600182018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561132e5780601f106113035761010080835404028352916020019161132e565b820191906000526020600020905b81548152906001019060200180831161131157829003601f168201915b50505050508152602001600282018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113d05780601f106113a5576101008083540402835291602001916113d0565b820191906000526020600020905b8154815290600101906020018083116113b357829003601f168201915b505050505081526020016003820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016003820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681525050905080600001511580611446575061010081608001510163ffffffff164310155b61149b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806125af6026913960400191505060405180910390fd5b806000015115806114c057506104008160a001510163ffffffff168363ffffffff1610155b611515576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806125d56024913960400191505060405180910390fd5b505b6000601460009054906101000a900460ff161561153357600190505b6000601460006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff166012547f6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a8686601460009054906101000a900460ff16604051808463ffffffff1681526020018363ffffffff1681526020018215158152602001935050505060405180910390a360126000815480929190600101919050555060009950505050505050505050949350505050565b601160009054906101000a900460ff1681565b601960009054906101000a900460ff1681565b611647336000357fffffffff00000000000000000000000000000000000000000000000000000000166122b3565b6116b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f64732d617574682d756e617574686f72697a656400000000000000000000000081525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9460405160405180910390a250565b6000601a600083815260200190815260200160002060000160019054906101000a900463ffffffff169050919050565b600080601f830190505b828111156117d757600882901b8482815181106117b557fe5b602001015160f81c60f81b60f81c60ff1617915080806001900391505061179c565b50600881901b8383815181106117e957fe5b602001015160f81c60f81b60f81c60ff1617905092915050565b6060601a60008381526020019081526020016000206002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156118af5780601f10611884576101008083540402835291602001916118af565b820191906000526020600020905b81548152906001019060200180831161189257829003601f168201915b50505050509050919050565b6000601a600083815260200190815260200160002060030160049054906101000a900463ffffffff169050919050565b6060601a60008381526020019081526020016000206001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156119975780601f1061196c57610100808354040283529160200191611997565b820191906000526020600020905b81548152906001019060200180831161197a57829003601f168201915b50505050509050919050565b600e5481565b600160149054906101000a900460ff1681565b6119ea336000357fffffffff00000000000000000000000000000000000000000000000000000000166122b3565b611a5c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f64732d617574682d756e617574686f72697a656400000000000000000000000081525060200191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada460405160405180910390a250565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60125481565b611b366124bf565b611b3e6124e1565b6000611b4984612003565b9050611b56816000611792565b82600160028110611b6357fe5b602002018181525050611b77816020611792565b82600060028110611b8457fe5b602002018181525050611b98816040611792565b83600360048110611ba557fe5b602002018181525050611bb9816060611792565b83600260048110611bc657fe5b602002018181525050611bda816080611792565b83600160048110611be757fe5b602002018181525050611bfb8160a0611792565b83600060048110611c0857fe5b60200201818152505050915091565b600d5481565b611c4b336000357fffffffff00000000000000000000000000000000000000000000000000000000166122b3565b611cbd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f64732d617574682d756e617574686f72697a656400000000000000000000000081525060200191505060405180910390fd5b6000806000600435925060243591503490506000600160146101000a81548160ff02191690831515021790555081833373ffffffffffffffffffffffffffffffffffffffff166000357fffffffff00000000000000000000000000000000000000000000000000000000167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168460003660405180848152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505094505050505060405180910390a4505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000826003830181518110611dcc57fe5b602001015160f81c60f81b60f81c60ff169050826002830181518110611dee57fe5b602001015160f81c60f81b60f81c60ff1660088263ffffffff16901b179050826001830181518110611e1c57fe5b602001015160f81c60f81b60f81c60ff1660088263ffffffff16901b179050828281518110611e4757fe5b602001015160f81c60f81b60f81c60ff1660088263ffffffff16901b17905092915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611f115750600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b611f66576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806125f96031913960400191505060405180910390fd5b6001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060036000815480929190600101919050555050565b6000601a600083815260200190815260200160002060030160009054906101000a900463ffffffff169050919050565b6060815167ffffffffffffffff8111801561201d57600080fd5b506040519080825280601f01601f1916602001820160405280156120505781602001600182028036833780820191505090505b50905060005b82518110156120c45782818151811061206b57fe5b602001015160f81c60f81b82600183865103038151811061208857fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050612056565b50919050565b600c5481565b600f5481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061217b5750600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6121d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806125f96031913960400191505060405180910390fd5b600160035411612248576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f43616e27742072656d6f766520616c6c206f70657261746f727300000000000081525060200191505060405180910390fd5b600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff02191690556003600081548092919060019003919050555050565b60105481565b60003073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156122f257600190506124b9565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561235157600190506124b9565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156123af57600090506124b9565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b70096138430856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff168152602001827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001935050505060206040518083038186803b15801561247b57600080fd5b505afa15801561248f573d6000803e3d6000fd5b505050506040513d60208110156124a557600080fd5b810190808051906020019092919050505090505b92915050565b6040518060800160405280600490602082028036833780820191505090505090565b6040518060400160405280600290602082028036833780820191505090505090565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826125395760008555612580565b82601f1061255257803560ff1916838001178555612580565b82800160010185558215612580579182015b8281111561257f578235825591602001919060010190612564565b5b50905061258d9190612591565b5090565b5b808211156125aa576000816000905550600101612592565b509056fe736e617073686f74206865696768747320746f6f20636c6f736520696e20457468657265756d736e617073686f74206865696768747320746f6f20636c6f736520696e204d61644e657446756e6374696f6e616c697479207265737472696374656420746f20617574686f72697a6564206f70657261746f72732ea26469706673582212204988f9fe9478b98997761507d92ec210ede3f28d57da4a8dfa21f06f0f8117f164736f6c6343000706003346756e6374696f6e616c697479207265737472696374656420746f20617574686f72697a6564206f70657261746f72732e4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e745d10d7b2c2f196fceb52d546ea33816bdcf2fa5dcc79bcbcf0ce34ca1128b0d6d82d8652a0c5193001a55c0c43b5e0450297d3824a039d924b08d46520b354251f105a55d55c282005a5813480b48ee1efd61046d06b6084bafcf3c10dac57584b0f0bb886f1f1e04bcfa575020e3f47cceb3c11cd5cba496e5aedddc3a04d5b5ca2646970667358221220dcc527d1913bed8e4989da5885f896ecb1d2d6610746cabf54728d622732afb064736f6c63430007060033"

// DeployValidatorsSnapshotTest deploys a new Ethereum contract, binding an instance of ValidatorsSnapshotTest to it.
func DeployValidatorsSnapshotTest(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ValidatorsSnapshotTest, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorsSnapshotTestABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ValidatorsSnapshotTestBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ValidatorsSnapshotTest{ValidatorsSnapshotTestCaller: ValidatorsSnapshotTestCaller{contract: contract}, ValidatorsSnapshotTestTransactor: ValidatorsSnapshotTestTransactor{contract: contract}, ValidatorsSnapshotTestFilterer: ValidatorsSnapshotTestFilterer{contract: contract}}, nil
}

// ValidatorsSnapshotTest is an auto generated Go binding around an Ethereum contract.
type ValidatorsSnapshotTest struct {
	ValidatorsSnapshotTestCaller     // Read-only binding to the contract
	ValidatorsSnapshotTestTransactor // Write-only binding to the contract
	ValidatorsSnapshotTestFilterer   // Log filterer for contract events
}

// ValidatorsSnapshotTestCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorsSnapshotTestCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorsSnapshotTestTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorsSnapshotTestTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorsSnapshotTestFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorsSnapshotTestFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorsSnapshotTestSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorsSnapshotTestSession struct {
	Contract     *ValidatorsSnapshotTest // Generic contract binding to set the session for
	CallOpts     bind.CallOpts           // Call options to use throughout this session
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// ValidatorsSnapshotTestCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorsSnapshotTestCallerSession struct {
	Contract *ValidatorsSnapshotTestCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                 // Call options to use throughout this session
}

// ValidatorsSnapshotTestTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorsSnapshotTestTransactorSession struct {
	Contract     *ValidatorsSnapshotTestTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                 // Transaction auth options to use throughout this session
}

// ValidatorsSnapshotTestRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorsSnapshotTestRaw struct {
	Contract *ValidatorsSnapshotTest // Generic contract binding to access the raw methods on
}

// ValidatorsSnapshotTestCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorsSnapshotTestCallerRaw struct {
	Contract *ValidatorsSnapshotTestCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorsSnapshotTestTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorsSnapshotTestTransactorRaw struct {
	Contract *ValidatorsSnapshotTestTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorsSnapshotTest creates a new instance of ValidatorsSnapshotTest, bound to a specific deployed contract.
func NewValidatorsSnapshotTest(address common.Address, backend bind.ContractBackend) (*ValidatorsSnapshotTest, error) {
	contract, err := bindValidatorsSnapshotTest(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorsSnapshotTest{ValidatorsSnapshotTestCaller: ValidatorsSnapshotTestCaller{contract: contract}, ValidatorsSnapshotTestTransactor: ValidatorsSnapshotTestTransactor{contract: contract}, ValidatorsSnapshotTestFilterer: ValidatorsSnapshotTestFilterer{contract: contract}}, nil
}

// NewValidatorsSnapshotTestCaller creates a new read-only instance of ValidatorsSnapshotTest, bound to a specific deployed contract.
func NewValidatorsSnapshotTestCaller(address common.Address, caller bind.ContractCaller) (*ValidatorsSnapshotTestCaller, error) {
	contract, err := bindValidatorsSnapshotTest(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorsSnapshotTestCaller{contract: contract}, nil
}

// NewValidatorsSnapshotTestTransactor creates a new write-only instance of ValidatorsSnapshotTest, bound to a specific deployed contract.
func NewValidatorsSnapshotTestTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorsSnapshotTestTransactor, error) {
	contract, err := bindValidatorsSnapshotTest(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorsSnapshotTestTransactor{contract: contract}, nil
}

// NewValidatorsSnapshotTestFilterer creates a new log filterer instance of ValidatorsSnapshotTest, bound to a specific deployed contract.
func NewValidatorsSnapshotTestFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorsSnapshotTestFilterer, error) {
	contract, err := bindValidatorsSnapshotTest(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorsSnapshotTestFilterer{contract: contract}, nil
}

// bindValidatorsSnapshotTest binds a generic wrapper to an already deployed contract.
func bindValidatorsSnapshotTest(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorsSnapshotTestABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ValidatorsSnapshotTest.Contract.ValidatorsSnapshotTestCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorsSnapshotTest.Contract.ValidatorsSnapshotTestTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorsSnapshotTest.Contract.ValidatorsSnapshotTestTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ValidatorsSnapshotTest.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorsSnapshotTest.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorsSnapshotTest.Contract.contract.Transact(opts, method, params...)
}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestCaller) ISTEST(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ValidatorsSnapshotTest.contract.Call(opts, out, "IS_TEST")
	return *ret0, err
}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestSession) ISTEST() (bool, error) {
	return _ValidatorsSnapshotTest.Contract.ISTEST(&_ValidatorsSnapshotTest.CallOpts)
}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestCallerSession) ISTEST() (bool, error) {
	return _ValidatorsSnapshotTest.Contract.ISTEST(&_ValidatorsSnapshotTest.CallOpts)
}

// Failed is a free data retrieval call binding the contract method 0xba414fa6.
//
// Solidity: function failed() view returns(bool)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestCaller) Failed(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ValidatorsSnapshotTest.contract.Call(opts, out, "failed")
	return *ret0, err
}

// Failed is a free data retrieval call binding the contract method 0xba414fa6.
//
// Solidity: function failed() view returns(bool)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestSession) Failed() (bool, error) {
	return _ValidatorsSnapshotTest.Contract.Failed(&_ValidatorsSnapshotTest.CallOpts)
}

// Failed is a free data retrieval call binding the contract method 0xba414fa6.
//
// Solidity: function failed() view returns(bool)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestCallerSession) Failed() (bool, error) {
	return _ValidatorsSnapshotTest.Contract.Failed(&_ValidatorsSnapshotTest.CallOpts)
}

// SetUp is a paid mutator transaction binding the contract method 0x0a9254e4.
//
// Solidity: function setUp() returns()
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestTransactor) SetUp(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorsSnapshotTest.contract.Transact(opts, "setUp")
}

// SetUp is a paid mutator transaction binding the contract method 0x0a9254e4.
//
// Solidity: function setUp() returns()
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestSession) SetUp() (*types.Transaction, error) {
	return _ValidatorsSnapshotTest.Contract.SetUp(&_ValidatorsSnapshotTest.TransactOpts)
}

// SetUp is a paid mutator transaction binding the contract method 0x0a9254e4.
//
// Solidity: function setUp() returns()
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestTransactorSession) SetUp() (*types.Transaction, error) {
	return _ValidatorsSnapshotTest.Contract.SetUp(&_ValidatorsSnapshotTest.TransactOpts)
}

// TestExtractUint256 is a paid mutator transaction binding the contract method 0x3e6fe276.
//
// Solidity: function testExtractUint256() returns()
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestTransactor) TestExtractUint256(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorsSnapshotTest.contract.Transact(opts, "testExtractUint256")
}

// TestExtractUint256 is a paid mutator transaction binding the contract method 0x3e6fe276.
//
// Solidity: function testExtractUint256() returns()
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestSession) TestExtractUint256() (*types.Transaction, error) {
	return _ValidatorsSnapshotTest.Contract.TestExtractUint256(&_ValidatorsSnapshotTest.TransactOpts)
}

// TestExtractUint256 is a paid mutator transaction binding the contract method 0x3e6fe276.
//
// Solidity: function testExtractUint256() returns()
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestTransactorSession) TestExtractUint256() (*types.Transaction, error) {
	return _ValidatorsSnapshotTest.Contract.TestExtractUint256(&_ValidatorsSnapshotTest.TransactOpts)
}

// TestExtractUint32 is a paid mutator transaction binding the contract method 0x83505969.
//
// Solidity: function testExtractUint32() returns()
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestTransactor) TestExtractUint32(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorsSnapshotTest.contract.Transact(opts, "testExtractUint32")
}

// TestExtractUint32 is a paid mutator transaction binding the contract method 0x83505969.
//
// Solidity: function testExtractUint32() returns()
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestSession) TestExtractUint32() (*types.Transaction, error) {
	return _ValidatorsSnapshotTest.Contract.TestExtractUint32(&_ValidatorsSnapshotTest.TransactOpts)
}

// TestExtractUint32 is a paid mutator transaction binding the contract method 0x83505969.
//
// Solidity: function testExtractUint32() returns()
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestTransactorSession) TestExtractUint32() (*types.Transaction, error) {
	return _ValidatorsSnapshotTest.Contract.TestExtractUint32(&_ValidatorsSnapshotTest.TransactOpts)
}

// ValidatorsSnapshotTestLogIterator is returned from FilterLog and is used to iterate over the raw logs and unpacked data for Log events raised by the ValidatorsSnapshotTest contract.
type ValidatorsSnapshotTestLogIterator struct {
	Event *ValidatorsSnapshotTestLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsSnapshotTestLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsSnapshotTestLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsSnapshotTestLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsSnapshotTestLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsSnapshotTestLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsSnapshotTestLog represents a Log event raised by the ValidatorsSnapshotTest contract.
type ValidatorsSnapshotTestLog struct {
	Arg0 string
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLog is a free log retrieval operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestFilterer) FilterLog(opts *bind.FilterOpts) (*ValidatorsSnapshotTestLogIterator, error) {

	logs, sub, err := _ValidatorsSnapshotTest.contract.FilterLogs(opts, "log")
	if err != nil {
		return nil, err
	}
	return &ValidatorsSnapshotTestLogIterator{contract: _ValidatorsSnapshotTest.contract, event: "log", logs: logs, sub: sub}, nil
}

// WatchLog is a free log subscription operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestFilterer) WatchLog(opts *bind.WatchOpts, sink chan<- *ValidatorsSnapshotTestLog) (event.Subscription, error) {

	logs, sub, err := _ValidatorsSnapshotTest.contract.WatchLogs(opts, "log")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsSnapshotTestLog)
				if err := _ValidatorsSnapshotTest.contract.UnpackLog(event, "log", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLog is a log parse operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestFilterer) ParseLog(log types.Log) (*ValidatorsSnapshotTestLog, error) {
	event := new(ValidatorsSnapshotTestLog)
	if err := _ValidatorsSnapshotTest.contract.UnpackLog(event, "log", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorsSnapshotTestLogAddressIterator is returned from FilterLogAddress and is used to iterate over the raw logs and unpacked data for LogAddress events raised by the ValidatorsSnapshotTest contract.
type ValidatorsSnapshotTestLogAddressIterator struct {
	Event *ValidatorsSnapshotTestLogAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsSnapshotTestLogAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsSnapshotTestLogAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsSnapshotTestLogAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsSnapshotTestLogAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsSnapshotTestLogAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsSnapshotTestLogAddress represents a LogAddress event raised by the ValidatorsSnapshotTest contract.
type ValidatorsSnapshotTestLogAddress struct {
	Arg0 common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogAddress is a free log retrieval operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestFilterer) FilterLogAddress(opts *bind.FilterOpts) (*ValidatorsSnapshotTestLogAddressIterator, error) {

	logs, sub, err := _ValidatorsSnapshotTest.contract.FilterLogs(opts, "log_address")
	if err != nil {
		return nil, err
	}
	return &ValidatorsSnapshotTestLogAddressIterator{contract: _ValidatorsSnapshotTest.contract, event: "log_address", logs: logs, sub: sub}, nil
}

// WatchLogAddress is a free log subscription operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestFilterer) WatchLogAddress(opts *bind.WatchOpts, sink chan<- *ValidatorsSnapshotTestLogAddress) (event.Subscription, error) {

	logs, sub, err := _ValidatorsSnapshotTest.contract.WatchLogs(opts, "log_address")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsSnapshotTestLogAddress)
				if err := _ValidatorsSnapshotTest.contract.UnpackLog(event, "log_address", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogAddress is a log parse operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestFilterer) ParseLogAddress(log types.Log) (*ValidatorsSnapshotTestLogAddress, error) {
	event := new(ValidatorsSnapshotTestLogAddress)
	if err := _ValidatorsSnapshotTest.contract.UnpackLog(event, "log_address", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorsSnapshotTestLogBytesIterator is returned from FilterLogBytes and is used to iterate over the raw logs and unpacked data for LogBytes events raised by the ValidatorsSnapshotTest contract.
type ValidatorsSnapshotTestLogBytesIterator struct {
	Event *ValidatorsSnapshotTestLogBytes // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsSnapshotTestLogBytesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsSnapshotTestLogBytes)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsSnapshotTestLogBytes)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsSnapshotTestLogBytesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsSnapshotTestLogBytesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsSnapshotTestLogBytes represents a LogBytes event raised by the ValidatorsSnapshotTest contract.
type ValidatorsSnapshotTestLogBytes struct {
	Arg0 []byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogBytes is a free log retrieval operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestFilterer) FilterLogBytes(opts *bind.FilterOpts) (*ValidatorsSnapshotTestLogBytesIterator, error) {

	logs, sub, err := _ValidatorsSnapshotTest.contract.FilterLogs(opts, "log_bytes")
	if err != nil {
		return nil, err
	}
	return &ValidatorsSnapshotTestLogBytesIterator{contract: _ValidatorsSnapshotTest.contract, event: "log_bytes", logs: logs, sub: sub}, nil
}

// WatchLogBytes is a free log subscription operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestFilterer) WatchLogBytes(opts *bind.WatchOpts, sink chan<- *ValidatorsSnapshotTestLogBytes) (event.Subscription, error) {

	logs, sub, err := _ValidatorsSnapshotTest.contract.WatchLogs(opts, "log_bytes")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsSnapshotTestLogBytes)
				if err := _ValidatorsSnapshotTest.contract.UnpackLog(event, "log_bytes", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes is a log parse operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestFilterer) ParseLogBytes(log types.Log) (*ValidatorsSnapshotTestLogBytes, error) {
	event := new(ValidatorsSnapshotTestLogBytes)
	if err := _ValidatorsSnapshotTest.contract.UnpackLog(event, "log_bytes", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorsSnapshotTestLogBytes32Iterator is returned from FilterLogBytes32 and is used to iterate over the raw logs and unpacked data for LogBytes32 events raised by the ValidatorsSnapshotTest contract.
type ValidatorsSnapshotTestLogBytes32Iterator struct {
	Event *ValidatorsSnapshotTestLogBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsSnapshotTestLogBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsSnapshotTestLogBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsSnapshotTestLogBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsSnapshotTestLogBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsSnapshotTestLogBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsSnapshotTestLogBytes32 represents a LogBytes32 event raised by the ValidatorsSnapshotTest contract.
type ValidatorsSnapshotTestLogBytes32 struct {
	Arg0 [32]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogBytes32 is a free log retrieval operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestFilterer) FilterLogBytes32(opts *bind.FilterOpts) (*ValidatorsSnapshotTestLogBytes32Iterator, error) {

	logs, sub, err := _ValidatorsSnapshotTest.contract.FilterLogs(opts, "log_bytes32")
	if err != nil {
		return nil, err
	}
	return &ValidatorsSnapshotTestLogBytes32Iterator{contract: _ValidatorsSnapshotTest.contract, event: "log_bytes32", logs: logs, sub: sub}, nil
}

// WatchLogBytes32 is a free log subscription operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestFilterer) WatchLogBytes32(opts *bind.WatchOpts, sink chan<- *ValidatorsSnapshotTestLogBytes32) (event.Subscription, error) {

	logs, sub, err := _ValidatorsSnapshotTest.contract.WatchLogs(opts, "log_bytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsSnapshotTestLogBytes32)
				if err := _ValidatorsSnapshotTest.contract.UnpackLog(event, "log_bytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes32 is a log parse operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestFilterer) ParseLogBytes32(log types.Log) (*ValidatorsSnapshotTestLogBytes32, error) {
	event := new(ValidatorsSnapshotTestLogBytes32)
	if err := _ValidatorsSnapshotTest.contract.UnpackLog(event, "log_bytes32", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorsSnapshotTestLogIntIterator is returned from FilterLogInt and is used to iterate over the raw logs and unpacked data for LogInt events raised by the ValidatorsSnapshotTest contract.
type ValidatorsSnapshotTestLogIntIterator struct {
	Event *ValidatorsSnapshotTestLogInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsSnapshotTestLogIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsSnapshotTestLogInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsSnapshotTestLogInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsSnapshotTestLogIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsSnapshotTestLogIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsSnapshotTestLogInt represents a LogInt event raised by the ValidatorsSnapshotTest contract.
type ValidatorsSnapshotTestLogInt struct {
	Arg0 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogInt is a free log retrieval operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestFilterer) FilterLogInt(opts *bind.FilterOpts) (*ValidatorsSnapshotTestLogIntIterator, error) {

	logs, sub, err := _ValidatorsSnapshotTest.contract.FilterLogs(opts, "log_int")
	if err != nil {
		return nil, err
	}
	return &ValidatorsSnapshotTestLogIntIterator{contract: _ValidatorsSnapshotTest.contract, event: "log_int", logs: logs, sub: sub}, nil
}

// WatchLogInt is a free log subscription operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestFilterer) WatchLogInt(opts *bind.WatchOpts, sink chan<- *ValidatorsSnapshotTestLogInt) (event.Subscription, error) {

	logs, sub, err := _ValidatorsSnapshotTest.contract.WatchLogs(opts, "log_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsSnapshotTestLogInt)
				if err := _ValidatorsSnapshotTest.contract.UnpackLog(event, "log_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogInt is a log parse operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestFilterer) ParseLogInt(log types.Log) (*ValidatorsSnapshotTestLogInt, error) {
	event := new(ValidatorsSnapshotTestLogInt)
	if err := _ValidatorsSnapshotTest.contract.UnpackLog(event, "log_int", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorsSnapshotTestLogNamedAddressIterator is returned from FilterLogNamedAddress and is used to iterate over the raw logs and unpacked data for LogNamedAddress events raised by the ValidatorsSnapshotTest contract.
type ValidatorsSnapshotTestLogNamedAddressIterator struct {
	Event *ValidatorsSnapshotTestLogNamedAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsSnapshotTestLogNamedAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsSnapshotTestLogNamedAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsSnapshotTestLogNamedAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsSnapshotTestLogNamedAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsSnapshotTestLogNamedAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsSnapshotTestLogNamedAddress represents a LogNamedAddress event raised by the ValidatorsSnapshotTest contract.
type ValidatorsSnapshotTestLogNamedAddress struct {
	Key string
	Val common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedAddress is a free log retrieval operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestFilterer) FilterLogNamedAddress(opts *bind.FilterOpts) (*ValidatorsSnapshotTestLogNamedAddressIterator, error) {

	logs, sub, err := _ValidatorsSnapshotTest.contract.FilterLogs(opts, "log_named_address")
	if err != nil {
		return nil, err
	}
	return &ValidatorsSnapshotTestLogNamedAddressIterator{contract: _ValidatorsSnapshotTest.contract, event: "log_named_address", logs: logs, sub: sub}, nil
}

// WatchLogNamedAddress is a free log subscription operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestFilterer) WatchLogNamedAddress(opts *bind.WatchOpts, sink chan<- *ValidatorsSnapshotTestLogNamedAddress) (event.Subscription, error) {

	logs, sub, err := _ValidatorsSnapshotTest.contract.WatchLogs(opts, "log_named_address")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsSnapshotTestLogNamedAddress)
				if err := _ValidatorsSnapshotTest.contract.UnpackLog(event, "log_named_address", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedAddress is a log parse operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestFilterer) ParseLogNamedAddress(log types.Log) (*ValidatorsSnapshotTestLogNamedAddress, error) {
	event := new(ValidatorsSnapshotTestLogNamedAddress)
	if err := _ValidatorsSnapshotTest.contract.UnpackLog(event, "log_named_address", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorsSnapshotTestLogNamedBytesIterator is returned from FilterLogNamedBytes and is used to iterate over the raw logs and unpacked data for LogNamedBytes events raised by the ValidatorsSnapshotTest contract.
type ValidatorsSnapshotTestLogNamedBytesIterator struct {
	Event *ValidatorsSnapshotTestLogNamedBytes // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsSnapshotTestLogNamedBytesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsSnapshotTestLogNamedBytes)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsSnapshotTestLogNamedBytes)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsSnapshotTestLogNamedBytesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsSnapshotTestLogNamedBytesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsSnapshotTestLogNamedBytes represents a LogNamedBytes event raised by the ValidatorsSnapshotTest contract.
type ValidatorsSnapshotTestLogNamedBytes struct {
	Key string
	Val []byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedBytes is a free log retrieval operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestFilterer) FilterLogNamedBytes(opts *bind.FilterOpts) (*ValidatorsSnapshotTestLogNamedBytesIterator, error) {

	logs, sub, err := _ValidatorsSnapshotTest.contract.FilterLogs(opts, "log_named_bytes")
	if err != nil {
		return nil, err
	}
	return &ValidatorsSnapshotTestLogNamedBytesIterator{contract: _ValidatorsSnapshotTest.contract, event: "log_named_bytes", logs: logs, sub: sub}, nil
}

// WatchLogNamedBytes is a free log subscription operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestFilterer) WatchLogNamedBytes(opts *bind.WatchOpts, sink chan<- *ValidatorsSnapshotTestLogNamedBytes) (event.Subscription, error) {

	logs, sub, err := _ValidatorsSnapshotTest.contract.WatchLogs(opts, "log_named_bytes")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsSnapshotTestLogNamedBytes)
				if err := _ValidatorsSnapshotTest.contract.UnpackLog(event, "log_named_bytes", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedBytes is a log parse operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestFilterer) ParseLogNamedBytes(log types.Log) (*ValidatorsSnapshotTestLogNamedBytes, error) {
	event := new(ValidatorsSnapshotTestLogNamedBytes)
	if err := _ValidatorsSnapshotTest.contract.UnpackLog(event, "log_named_bytes", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorsSnapshotTestLogNamedBytes32Iterator is returned from FilterLogNamedBytes32 and is used to iterate over the raw logs and unpacked data for LogNamedBytes32 events raised by the ValidatorsSnapshotTest contract.
type ValidatorsSnapshotTestLogNamedBytes32Iterator struct {
	Event *ValidatorsSnapshotTestLogNamedBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsSnapshotTestLogNamedBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsSnapshotTestLogNamedBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsSnapshotTestLogNamedBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsSnapshotTestLogNamedBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsSnapshotTestLogNamedBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsSnapshotTestLogNamedBytes32 represents a LogNamedBytes32 event raised by the ValidatorsSnapshotTest contract.
type ValidatorsSnapshotTestLogNamedBytes32 struct {
	Key string
	Val [32]byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedBytes32 is a free log retrieval operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestFilterer) FilterLogNamedBytes32(opts *bind.FilterOpts) (*ValidatorsSnapshotTestLogNamedBytes32Iterator, error) {

	logs, sub, err := _ValidatorsSnapshotTest.contract.FilterLogs(opts, "log_named_bytes32")
	if err != nil {
		return nil, err
	}
	return &ValidatorsSnapshotTestLogNamedBytes32Iterator{contract: _ValidatorsSnapshotTest.contract, event: "log_named_bytes32", logs: logs, sub: sub}, nil
}

// WatchLogNamedBytes32 is a free log subscription operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestFilterer) WatchLogNamedBytes32(opts *bind.WatchOpts, sink chan<- *ValidatorsSnapshotTestLogNamedBytes32) (event.Subscription, error) {

	logs, sub, err := _ValidatorsSnapshotTest.contract.WatchLogs(opts, "log_named_bytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsSnapshotTestLogNamedBytes32)
				if err := _ValidatorsSnapshotTest.contract.UnpackLog(event, "log_named_bytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedBytes32 is a log parse operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestFilterer) ParseLogNamedBytes32(log types.Log) (*ValidatorsSnapshotTestLogNamedBytes32, error) {
	event := new(ValidatorsSnapshotTestLogNamedBytes32)
	if err := _ValidatorsSnapshotTest.contract.UnpackLog(event, "log_named_bytes32", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorsSnapshotTestLogNamedDecimalIntIterator is returned from FilterLogNamedDecimalInt and is used to iterate over the raw logs and unpacked data for LogNamedDecimalInt events raised by the ValidatorsSnapshotTest contract.
type ValidatorsSnapshotTestLogNamedDecimalIntIterator struct {
	Event *ValidatorsSnapshotTestLogNamedDecimalInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsSnapshotTestLogNamedDecimalIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsSnapshotTestLogNamedDecimalInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsSnapshotTestLogNamedDecimalInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsSnapshotTestLogNamedDecimalIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsSnapshotTestLogNamedDecimalIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsSnapshotTestLogNamedDecimalInt represents a LogNamedDecimalInt event raised by the ValidatorsSnapshotTest contract.
type ValidatorsSnapshotTestLogNamedDecimalInt struct {
	Key      string
	Val      *big.Int
	Decimals *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogNamedDecimalInt is a free log retrieval operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestFilterer) FilterLogNamedDecimalInt(opts *bind.FilterOpts) (*ValidatorsSnapshotTestLogNamedDecimalIntIterator, error) {

	logs, sub, err := _ValidatorsSnapshotTest.contract.FilterLogs(opts, "log_named_decimal_int")
	if err != nil {
		return nil, err
	}
	return &ValidatorsSnapshotTestLogNamedDecimalIntIterator{contract: _ValidatorsSnapshotTest.contract, event: "log_named_decimal_int", logs: logs, sub: sub}, nil
}

// WatchLogNamedDecimalInt is a free log subscription operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestFilterer) WatchLogNamedDecimalInt(opts *bind.WatchOpts, sink chan<- *ValidatorsSnapshotTestLogNamedDecimalInt) (event.Subscription, error) {

	logs, sub, err := _ValidatorsSnapshotTest.contract.WatchLogs(opts, "log_named_decimal_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsSnapshotTestLogNamedDecimalInt)
				if err := _ValidatorsSnapshotTest.contract.UnpackLog(event, "log_named_decimal_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedDecimalInt is a log parse operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestFilterer) ParseLogNamedDecimalInt(log types.Log) (*ValidatorsSnapshotTestLogNamedDecimalInt, error) {
	event := new(ValidatorsSnapshotTestLogNamedDecimalInt)
	if err := _ValidatorsSnapshotTest.contract.UnpackLog(event, "log_named_decimal_int", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorsSnapshotTestLogNamedDecimalUintIterator is returned from FilterLogNamedDecimalUint and is used to iterate over the raw logs and unpacked data for LogNamedDecimalUint events raised by the ValidatorsSnapshotTest contract.
type ValidatorsSnapshotTestLogNamedDecimalUintIterator struct {
	Event *ValidatorsSnapshotTestLogNamedDecimalUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsSnapshotTestLogNamedDecimalUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsSnapshotTestLogNamedDecimalUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsSnapshotTestLogNamedDecimalUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsSnapshotTestLogNamedDecimalUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsSnapshotTestLogNamedDecimalUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsSnapshotTestLogNamedDecimalUint represents a LogNamedDecimalUint event raised by the ValidatorsSnapshotTest contract.
type ValidatorsSnapshotTestLogNamedDecimalUint struct {
	Key      string
	Val      *big.Int
	Decimals *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogNamedDecimalUint is a free log retrieval operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestFilterer) FilterLogNamedDecimalUint(opts *bind.FilterOpts) (*ValidatorsSnapshotTestLogNamedDecimalUintIterator, error) {

	logs, sub, err := _ValidatorsSnapshotTest.contract.FilterLogs(opts, "log_named_decimal_uint")
	if err != nil {
		return nil, err
	}
	return &ValidatorsSnapshotTestLogNamedDecimalUintIterator{contract: _ValidatorsSnapshotTest.contract, event: "log_named_decimal_uint", logs: logs, sub: sub}, nil
}

// WatchLogNamedDecimalUint is a free log subscription operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestFilterer) WatchLogNamedDecimalUint(opts *bind.WatchOpts, sink chan<- *ValidatorsSnapshotTestLogNamedDecimalUint) (event.Subscription, error) {

	logs, sub, err := _ValidatorsSnapshotTest.contract.WatchLogs(opts, "log_named_decimal_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsSnapshotTestLogNamedDecimalUint)
				if err := _ValidatorsSnapshotTest.contract.UnpackLog(event, "log_named_decimal_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedDecimalUint is a log parse operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestFilterer) ParseLogNamedDecimalUint(log types.Log) (*ValidatorsSnapshotTestLogNamedDecimalUint, error) {
	event := new(ValidatorsSnapshotTestLogNamedDecimalUint)
	if err := _ValidatorsSnapshotTest.contract.UnpackLog(event, "log_named_decimal_uint", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorsSnapshotTestLogNamedIntIterator is returned from FilterLogNamedInt and is used to iterate over the raw logs and unpacked data for LogNamedInt events raised by the ValidatorsSnapshotTest contract.
type ValidatorsSnapshotTestLogNamedIntIterator struct {
	Event *ValidatorsSnapshotTestLogNamedInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsSnapshotTestLogNamedIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsSnapshotTestLogNamedInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsSnapshotTestLogNamedInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsSnapshotTestLogNamedIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsSnapshotTestLogNamedIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsSnapshotTestLogNamedInt represents a LogNamedInt event raised by the ValidatorsSnapshotTest contract.
type ValidatorsSnapshotTestLogNamedInt struct {
	Key string
	Val *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedInt is a free log retrieval operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestFilterer) FilterLogNamedInt(opts *bind.FilterOpts) (*ValidatorsSnapshotTestLogNamedIntIterator, error) {

	logs, sub, err := _ValidatorsSnapshotTest.contract.FilterLogs(opts, "log_named_int")
	if err != nil {
		return nil, err
	}
	return &ValidatorsSnapshotTestLogNamedIntIterator{contract: _ValidatorsSnapshotTest.contract, event: "log_named_int", logs: logs, sub: sub}, nil
}

// WatchLogNamedInt is a free log subscription operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestFilterer) WatchLogNamedInt(opts *bind.WatchOpts, sink chan<- *ValidatorsSnapshotTestLogNamedInt) (event.Subscription, error) {

	logs, sub, err := _ValidatorsSnapshotTest.contract.WatchLogs(opts, "log_named_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsSnapshotTestLogNamedInt)
				if err := _ValidatorsSnapshotTest.contract.UnpackLog(event, "log_named_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedInt is a log parse operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestFilterer) ParseLogNamedInt(log types.Log) (*ValidatorsSnapshotTestLogNamedInt, error) {
	event := new(ValidatorsSnapshotTestLogNamedInt)
	if err := _ValidatorsSnapshotTest.contract.UnpackLog(event, "log_named_int", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorsSnapshotTestLogNamedStringIterator is returned from FilterLogNamedString and is used to iterate over the raw logs and unpacked data for LogNamedString events raised by the ValidatorsSnapshotTest contract.
type ValidatorsSnapshotTestLogNamedStringIterator struct {
	Event *ValidatorsSnapshotTestLogNamedString // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsSnapshotTestLogNamedStringIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsSnapshotTestLogNamedString)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsSnapshotTestLogNamedString)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsSnapshotTestLogNamedStringIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsSnapshotTestLogNamedStringIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsSnapshotTestLogNamedString represents a LogNamedString event raised by the ValidatorsSnapshotTest contract.
type ValidatorsSnapshotTestLogNamedString struct {
	Key string
	Val string
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedString is a free log retrieval operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestFilterer) FilterLogNamedString(opts *bind.FilterOpts) (*ValidatorsSnapshotTestLogNamedStringIterator, error) {

	logs, sub, err := _ValidatorsSnapshotTest.contract.FilterLogs(opts, "log_named_string")
	if err != nil {
		return nil, err
	}
	return &ValidatorsSnapshotTestLogNamedStringIterator{contract: _ValidatorsSnapshotTest.contract, event: "log_named_string", logs: logs, sub: sub}, nil
}

// WatchLogNamedString is a free log subscription operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestFilterer) WatchLogNamedString(opts *bind.WatchOpts, sink chan<- *ValidatorsSnapshotTestLogNamedString) (event.Subscription, error) {

	logs, sub, err := _ValidatorsSnapshotTest.contract.WatchLogs(opts, "log_named_string")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsSnapshotTestLogNamedString)
				if err := _ValidatorsSnapshotTest.contract.UnpackLog(event, "log_named_string", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedString is a log parse operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestFilterer) ParseLogNamedString(log types.Log) (*ValidatorsSnapshotTestLogNamedString, error) {
	event := new(ValidatorsSnapshotTestLogNamedString)
	if err := _ValidatorsSnapshotTest.contract.UnpackLog(event, "log_named_string", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorsSnapshotTestLogNamedUintIterator is returned from FilterLogNamedUint and is used to iterate over the raw logs and unpacked data for LogNamedUint events raised by the ValidatorsSnapshotTest contract.
type ValidatorsSnapshotTestLogNamedUintIterator struct {
	Event *ValidatorsSnapshotTestLogNamedUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsSnapshotTestLogNamedUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsSnapshotTestLogNamedUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsSnapshotTestLogNamedUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsSnapshotTestLogNamedUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsSnapshotTestLogNamedUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsSnapshotTestLogNamedUint represents a LogNamedUint event raised by the ValidatorsSnapshotTest contract.
type ValidatorsSnapshotTestLogNamedUint struct {
	Key string
	Val *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedUint is a free log retrieval operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestFilterer) FilterLogNamedUint(opts *bind.FilterOpts) (*ValidatorsSnapshotTestLogNamedUintIterator, error) {

	logs, sub, err := _ValidatorsSnapshotTest.contract.FilterLogs(opts, "log_named_uint")
	if err != nil {
		return nil, err
	}
	return &ValidatorsSnapshotTestLogNamedUintIterator{contract: _ValidatorsSnapshotTest.contract, event: "log_named_uint", logs: logs, sub: sub}, nil
}

// WatchLogNamedUint is a free log subscription operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestFilterer) WatchLogNamedUint(opts *bind.WatchOpts, sink chan<- *ValidatorsSnapshotTestLogNamedUint) (event.Subscription, error) {

	logs, sub, err := _ValidatorsSnapshotTest.contract.WatchLogs(opts, "log_named_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsSnapshotTestLogNamedUint)
				if err := _ValidatorsSnapshotTest.contract.UnpackLog(event, "log_named_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedUint is a log parse operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestFilterer) ParseLogNamedUint(log types.Log) (*ValidatorsSnapshotTestLogNamedUint, error) {
	event := new(ValidatorsSnapshotTestLogNamedUint)
	if err := _ValidatorsSnapshotTest.contract.UnpackLog(event, "log_named_uint", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorsSnapshotTestLogStringIterator is returned from FilterLogString and is used to iterate over the raw logs and unpacked data for LogString events raised by the ValidatorsSnapshotTest contract.
type ValidatorsSnapshotTestLogStringIterator struct {
	Event *ValidatorsSnapshotTestLogString // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsSnapshotTestLogStringIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsSnapshotTestLogString)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsSnapshotTestLogString)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsSnapshotTestLogStringIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsSnapshotTestLogStringIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsSnapshotTestLogString represents a LogString event raised by the ValidatorsSnapshotTest contract.
type ValidatorsSnapshotTestLogString struct {
	Arg0 string
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogString is a free log retrieval operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestFilterer) FilterLogString(opts *bind.FilterOpts) (*ValidatorsSnapshotTestLogStringIterator, error) {

	logs, sub, err := _ValidatorsSnapshotTest.contract.FilterLogs(opts, "log_string")
	if err != nil {
		return nil, err
	}
	return &ValidatorsSnapshotTestLogStringIterator{contract: _ValidatorsSnapshotTest.contract, event: "log_string", logs: logs, sub: sub}, nil
}

// WatchLogString is a free log subscription operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestFilterer) WatchLogString(opts *bind.WatchOpts, sink chan<- *ValidatorsSnapshotTestLogString) (event.Subscription, error) {

	logs, sub, err := _ValidatorsSnapshotTest.contract.WatchLogs(opts, "log_string")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsSnapshotTestLogString)
				if err := _ValidatorsSnapshotTest.contract.UnpackLog(event, "log_string", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogString is a log parse operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestFilterer) ParseLogString(log types.Log) (*ValidatorsSnapshotTestLogString, error) {
	event := new(ValidatorsSnapshotTestLogString)
	if err := _ValidatorsSnapshotTest.contract.UnpackLog(event, "log_string", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorsSnapshotTestLogUintIterator is returned from FilterLogUint and is used to iterate over the raw logs and unpacked data for LogUint events raised by the ValidatorsSnapshotTest contract.
type ValidatorsSnapshotTestLogUintIterator struct {
	Event *ValidatorsSnapshotTestLogUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsSnapshotTestLogUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsSnapshotTestLogUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsSnapshotTestLogUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsSnapshotTestLogUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsSnapshotTestLogUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsSnapshotTestLogUint represents a LogUint event raised by the ValidatorsSnapshotTest contract.
type ValidatorsSnapshotTestLogUint struct {
	Arg0 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogUint is a free log retrieval operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestFilterer) FilterLogUint(opts *bind.FilterOpts) (*ValidatorsSnapshotTestLogUintIterator, error) {

	logs, sub, err := _ValidatorsSnapshotTest.contract.FilterLogs(opts, "log_uint")
	if err != nil {
		return nil, err
	}
	return &ValidatorsSnapshotTestLogUintIterator{contract: _ValidatorsSnapshotTest.contract, event: "log_uint", logs: logs, sub: sub}, nil
}

// WatchLogUint is a free log subscription operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestFilterer) WatchLogUint(opts *bind.WatchOpts, sink chan<- *ValidatorsSnapshotTestLogUint) (event.Subscription, error) {

	logs, sub, err := _ValidatorsSnapshotTest.contract.WatchLogs(opts, "log_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsSnapshotTestLogUint)
				if err := _ValidatorsSnapshotTest.contract.UnpackLog(event, "log_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogUint is a log parse operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestFilterer) ParseLogUint(log types.Log) (*ValidatorsSnapshotTestLogUint, error) {
	event := new(ValidatorsSnapshotTestLogUint)
	if err := _ValidatorsSnapshotTest.contract.UnpackLog(event, "log_uint", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorsSnapshotTestLogsIterator is returned from FilterLogs and is used to iterate over the raw logs and unpacked data for Logs events raised by the ValidatorsSnapshotTest contract.
type ValidatorsSnapshotTestLogsIterator struct {
	Event *ValidatorsSnapshotTestLogs // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsSnapshotTestLogsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsSnapshotTestLogs)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsSnapshotTestLogs)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsSnapshotTestLogsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsSnapshotTestLogsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsSnapshotTestLogs represents a Logs event raised by the ValidatorsSnapshotTest contract.
type ValidatorsSnapshotTestLogs struct {
	Arg0 []byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogs is a free log retrieval operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestFilterer) FilterLogs(opts *bind.FilterOpts) (*ValidatorsSnapshotTestLogsIterator, error) {

	logs, sub, err := _ValidatorsSnapshotTest.contract.FilterLogs(opts, "logs")
	if err != nil {
		return nil, err
	}
	return &ValidatorsSnapshotTestLogsIterator{contract: _ValidatorsSnapshotTest.contract, event: "logs", logs: logs, sub: sub}, nil
}

// WatchLogs is a free log subscription operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestFilterer) WatchLogs(opts *bind.WatchOpts, sink chan<- *ValidatorsSnapshotTestLogs) (event.Subscription, error) {

	logs, sub, err := _ValidatorsSnapshotTest.contract.WatchLogs(opts, "logs")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsSnapshotTestLogs)
				if err := _ValidatorsSnapshotTest.contract.UnpackLog(event, "logs", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogs is a log parse operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_ValidatorsSnapshotTest *ValidatorsSnapshotTestFilterer) ParseLogs(log types.Log) (*ValidatorsSnapshotTestLogs, error) {
	event := new(ValidatorsSnapshotTestLogs)
	if err := _ValidatorsSnapshotTest.contract.UnpackLog(event, "logs", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorsStorageABI is the input ABI used to generate the binding from.
const ValidatorsStorageABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"startingETHDKG\",\"type\":\"bool\"}],\"name\":\"SnapshotTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"madID\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"madID\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"pkHash\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorLeft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"pkHash\",\"type\":\"uint256[2]\"}],\"name\":\"ValidatorQueued\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"getChainIdFromSnapshot\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"getHeightFromSnapshot\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"getMadHeightFromSnapshot\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"getRawBlockClaimsSnapshot\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"getRawSignatureSnapshot\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"majorStakeFine\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minorStakeFine\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorMaxCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// ValidatorsStorageBin is the compiled bytecode used for deploying new contracts.
var ValidatorsStorageBin = "0x608060405234801561001057600080fd5b50610670806100206000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80636d0591261161008c578063e380b22811610066578063e380b2281461034e578063ec5ffac214610396578063f7b2a7be146103b4578063fdf553cf146103d2576100cf565b80636d059126146102f4578063900cf0cf14610312578063ad43d84514610330576100cf565b806309f0d45d146100d45780630f43a677146100f557806319f746691461011657806335b6c6321461015e5780634f4ea614146102055780636372fe511461024d575b600080fd5b6100dc6103f0565b604051808260ff16815260200191505060405180910390f35b6100fd610403565b604051808260ff16815260200191505060405180910390f35b6101426004803603602081101561012c57600080fd5b8101908080359060200190929190505050610416565b604051808263ffffffff16815260200191505060405180910390f35b61018a6004803603602081101561017457600080fd5b8101908080359060200190929190505050610446565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101ca5780820151818401526020810190506101af565b50505050905090810190601f1680156101f75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102316004803603602081101561021b57600080fd5b81019080803590602001909291905050506104fe565b604051808263ffffffff16815260200191505060405180910390f35b6102796004803603602081101561026357600080fd5b810190808035906020019092919050505061052e565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102b957808201518184015260208101905061029e565b50505050905090810190601f1680156102e65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102fc6105e6565b6040518082815260200191505060405180910390f35b61031a6105ec565b6040518082815260200191505060405180910390f35b6103386105f2565b6040518082815260200191505060405180910390f35b61037a6004803603602081101561036457600080fd5b81019080803590602001909291905050506105f8565b604051808263ffffffff16815260200191505060405180910390f35b61039e610628565b6040518082815260200191505060405180910390f35b6103bc61062e565b6040518082815260200191505060405180910390f35b6103da610634565b6040518082815260200191505060405180910390f35b600c60009054906101000a900460ff1681565b601460009054906101000a900460ff1681565b60006015600083815260200190815260200160002060000160019054906101000a900463ffffffff169050919050565b6060601560008381526020019081526020016000206002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104f25780601f106104c7576101008083540402835291602001916104f2565b820191906000526020600020905b8154815290600101906020018083116104d557829003601f168201915b50505050509050919050565b60006015600083815260200190815260200160002060030160049054906101000a900463ffffffff169050919050565b6060601560008381526020019081526020016000206001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105da5780601f106105af576101008083540402835291602001916105da565b820191906000526020600020905b8154815290600101906020018083116105bd57829003601f168201915b50505050509050919050565b60095481565b600d5481565b60085481565b60006015600083815260200190815260200160002060030160009054906101000a900463ffffffff169050919050565b60075481565b600a5481565b600b548156fea2646970667358221220dc132ad53848ac954097cb2adbe99c506a32fc5564711b712e9fd265593b0cfc64736f6c63430007060033"

// DeployValidatorsStorage deploys a new Ethereum contract, binding an instance of ValidatorsStorage to it.
func DeployValidatorsStorage(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ValidatorsStorage, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorsStorageABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ValidatorsStorageBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ValidatorsStorage{ValidatorsStorageCaller: ValidatorsStorageCaller{contract: contract}, ValidatorsStorageTransactor: ValidatorsStorageTransactor{contract: contract}, ValidatorsStorageFilterer: ValidatorsStorageFilterer{contract: contract}}, nil
}

// ValidatorsStorage is an auto generated Go binding around an Ethereum contract.
type ValidatorsStorage struct {
	ValidatorsStorageCaller     // Read-only binding to the contract
	ValidatorsStorageTransactor // Write-only binding to the contract
	ValidatorsStorageFilterer   // Log filterer for contract events
}

// ValidatorsStorageCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorsStorageCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorsStorageTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorsStorageTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorsStorageFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorsStorageFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorsStorageSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorsStorageSession struct {
	Contract     *ValidatorsStorage // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// ValidatorsStorageCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorsStorageCallerSession struct {
	Contract *ValidatorsStorageCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// ValidatorsStorageTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorsStorageTransactorSession struct {
	Contract     *ValidatorsStorageTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// ValidatorsStorageRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorsStorageRaw struct {
	Contract *ValidatorsStorage // Generic contract binding to access the raw methods on
}

// ValidatorsStorageCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorsStorageCallerRaw struct {
	Contract *ValidatorsStorageCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorsStorageTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorsStorageTransactorRaw struct {
	Contract *ValidatorsStorageTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorsStorage creates a new instance of ValidatorsStorage, bound to a specific deployed contract.
func NewValidatorsStorage(address common.Address, backend bind.ContractBackend) (*ValidatorsStorage, error) {
	contract, err := bindValidatorsStorage(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorsStorage{ValidatorsStorageCaller: ValidatorsStorageCaller{contract: contract}, ValidatorsStorageTransactor: ValidatorsStorageTransactor{contract: contract}, ValidatorsStorageFilterer: ValidatorsStorageFilterer{contract: contract}}, nil
}

// NewValidatorsStorageCaller creates a new read-only instance of ValidatorsStorage, bound to a specific deployed contract.
func NewValidatorsStorageCaller(address common.Address, caller bind.ContractCaller) (*ValidatorsStorageCaller, error) {
	contract, err := bindValidatorsStorage(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorsStorageCaller{contract: contract}, nil
}

// NewValidatorsStorageTransactor creates a new write-only instance of ValidatorsStorage, bound to a specific deployed contract.
func NewValidatorsStorageTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorsStorageTransactor, error) {
	contract, err := bindValidatorsStorage(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorsStorageTransactor{contract: contract}, nil
}

// NewValidatorsStorageFilterer creates a new log filterer instance of ValidatorsStorage, bound to a specific deployed contract.
func NewValidatorsStorageFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorsStorageFilterer, error) {
	contract, err := bindValidatorsStorage(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorsStorageFilterer{contract: contract}, nil
}

// bindValidatorsStorage binds a generic wrapper to an already deployed contract.
func bindValidatorsStorage(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorsStorageABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorsStorage *ValidatorsStorageRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ValidatorsStorage.Contract.ValidatorsStorageCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorsStorage *ValidatorsStorageRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorsStorage.Contract.ValidatorsStorageTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorsStorage *ValidatorsStorageRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorsStorage.Contract.ValidatorsStorageTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorsStorage *ValidatorsStorageCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ValidatorsStorage.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorsStorage *ValidatorsStorageTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorsStorage.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorsStorage *ValidatorsStorageTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorsStorage.Contract.contract.Transact(opts, method, params...)
}

// Epoch is a free data retrieval call binding the contract method 0x900cf0cf.
//
// Solidity: function epoch() view returns(uint256)
func (_ValidatorsStorage *ValidatorsStorageCaller) Epoch(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ValidatorsStorage.contract.Call(opts, out, "epoch")
	return *ret0, err
}

// Epoch is a free data retrieval call binding the contract method 0x900cf0cf.
//
// Solidity: function epoch() view returns(uint256)
func (_ValidatorsStorage *ValidatorsStorageSession) Epoch() (*big.Int, error) {
	return _ValidatorsStorage.Contract.Epoch(&_ValidatorsStorage.CallOpts)
}

// Epoch is a free data retrieval call binding the contract method 0x900cf0cf.
//
// Solidity: function epoch() view returns(uint256)
func (_ValidatorsStorage *ValidatorsStorageCallerSession) Epoch() (*big.Int, error) {
	return _ValidatorsStorage.Contract.Epoch(&_ValidatorsStorage.CallOpts)
}

// GetChainIdFromSnapshot is a free data retrieval call binding the contract method 0x19f74669.
//
// Solidity: function getChainIdFromSnapshot(uint256 _epoch) view returns(uint32)
func (_ValidatorsStorage *ValidatorsStorageCaller) GetChainIdFromSnapshot(opts *bind.CallOpts, _epoch *big.Int) (uint32, error) {
	var (
		ret0 = new(uint32)
	)
	out := ret0
	err := _ValidatorsStorage.contract.Call(opts, out, "getChainIdFromSnapshot", _epoch)
	return *ret0, err
}

// GetChainIdFromSnapshot is a free data retrieval call binding the contract method 0x19f74669.
//
// Solidity: function getChainIdFromSnapshot(uint256 _epoch) view returns(uint32)
func (_ValidatorsStorage *ValidatorsStorageSession) GetChainIdFromSnapshot(_epoch *big.Int) (uint32, error) {
	return _ValidatorsStorage.Contract.GetChainIdFromSnapshot(&_ValidatorsStorage.CallOpts, _epoch)
}

// GetChainIdFromSnapshot is a free data retrieval call binding the contract method 0x19f74669.
//
// Solidity: function getChainIdFromSnapshot(uint256 _epoch) view returns(uint32)
func (_ValidatorsStorage *ValidatorsStorageCallerSession) GetChainIdFromSnapshot(_epoch *big.Int) (uint32, error) {
	return _ValidatorsStorage.Contract.GetChainIdFromSnapshot(&_ValidatorsStorage.CallOpts, _epoch)
}

// GetHeightFromSnapshot is a free data retrieval call binding the contract method 0xe380b228.
//
// Solidity: function getHeightFromSnapshot(uint256 _epoch) view returns(uint32)
func (_ValidatorsStorage *ValidatorsStorageCaller) GetHeightFromSnapshot(opts *bind.CallOpts, _epoch *big.Int) (uint32, error) {
	var (
		ret0 = new(uint32)
	)
	out := ret0
	err := _ValidatorsStorage.contract.Call(opts, out, "getHeightFromSnapshot", _epoch)
	return *ret0, err
}

// GetHeightFromSnapshot is a free data retrieval call binding the contract method 0xe380b228.
//
// Solidity: function getHeightFromSnapshot(uint256 _epoch) view returns(uint32)
func (_ValidatorsStorage *ValidatorsStorageSession) GetHeightFromSnapshot(_epoch *big.Int) (uint32, error) {
	return _ValidatorsStorage.Contract.GetHeightFromSnapshot(&_ValidatorsStorage.CallOpts, _epoch)
}

// GetHeightFromSnapshot is a free data retrieval call binding the contract method 0xe380b228.
//
// Solidity: function getHeightFromSnapshot(uint256 _epoch) view returns(uint32)
func (_ValidatorsStorage *ValidatorsStorageCallerSession) GetHeightFromSnapshot(_epoch *big.Int) (uint32, error) {
	return _ValidatorsStorage.Contract.GetHeightFromSnapshot(&_ValidatorsStorage.CallOpts, _epoch)
}

// GetMadHeightFromSnapshot is a free data retrieval call binding the contract method 0x4f4ea614.
//
// Solidity: function getMadHeightFromSnapshot(uint256 _epoch) view returns(uint32)
func (_ValidatorsStorage *ValidatorsStorageCaller) GetMadHeightFromSnapshot(opts *bind.CallOpts, _epoch *big.Int) (uint32, error) {
	var (
		ret0 = new(uint32)
	)
	out := ret0
	err := _ValidatorsStorage.contract.Call(opts, out, "getMadHeightFromSnapshot", _epoch)
	return *ret0, err
}

// GetMadHeightFromSnapshot is a free data retrieval call binding the contract method 0x4f4ea614.
//
// Solidity: function getMadHeightFromSnapshot(uint256 _epoch) view returns(uint32)
func (_ValidatorsStorage *ValidatorsStorageSession) GetMadHeightFromSnapshot(_epoch *big.Int) (uint32, error) {
	return _ValidatorsStorage.Contract.GetMadHeightFromSnapshot(&_ValidatorsStorage.CallOpts, _epoch)
}

// GetMadHeightFromSnapshot is a free data retrieval call binding the contract method 0x4f4ea614.
//
// Solidity: function getMadHeightFromSnapshot(uint256 _epoch) view returns(uint32)
func (_ValidatorsStorage *ValidatorsStorageCallerSession) GetMadHeightFromSnapshot(_epoch *big.Int) (uint32, error) {
	return _ValidatorsStorage.Contract.GetMadHeightFromSnapshot(&_ValidatorsStorage.CallOpts, _epoch)
}

// GetRawBlockClaimsSnapshot is a free data retrieval call binding the contract method 0x6372fe51.
//
// Solidity: function getRawBlockClaimsSnapshot(uint256 _epoch) view returns(bytes)
func (_ValidatorsStorage *ValidatorsStorageCaller) GetRawBlockClaimsSnapshot(opts *bind.CallOpts, _epoch *big.Int) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _ValidatorsStorage.contract.Call(opts, out, "getRawBlockClaimsSnapshot", _epoch)
	return *ret0, err
}

// GetRawBlockClaimsSnapshot is a free data retrieval call binding the contract method 0x6372fe51.
//
// Solidity: function getRawBlockClaimsSnapshot(uint256 _epoch) view returns(bytes)
func (_ValidatorsStorage *ValidatorsStorageSession) GetRawBlockClaimsSnapshot(_epoch *big.Int) ([]byte, error) {
	return _ValidatorsStorage.Contract.GetRawBlockClaimsSnapshot(&_ValidatorsStorage.CallOpts, _epoch)
}

// GetRawBlockClaimsSnapshot is a free data retrieval call binding the contract method 0x6372fe51.
//
// Solidity: function getRawBlockClaimsSnapshot(uint256 _epoch) view returns(bytes)
func (_ValidatorsStorage *ValidatorsStorageCallerSession) GetRawBlockClaimsSnapshot(_epoch *big.Int) ([]byte, error) {
	return _ValidatorsStorage.Contract.GetRawBlockClaimsSnapshot(&_ValidatorsStorage.CallOpts, _epoch)
}

// GetRawSignatureSnapshot is a free data retrieval call binding the contract method 0x35b6c632.
//
// Solidity: function getRawSignatureSnapshot(uint256 _epoch) view returns(bytes)
func (_ValidatorsStorage *ValidatorsStorageCaller) GetRawSignatureSnapshot(opts *bind.CallOpts, _epoch *big.Int) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _ValidatorsStorage.contract.Call(opts, out, "getRawSignatureSnapshot", _epoch)
	return *ret0, err
}

// GetRawSignatureSnapshot is a free data retrieval call binding the contract method 0x35b6c632.
//
// Solidity: function getRawSignatureSnapshot(uint256 _epoch) view returns(bytes)
func (_ValidatorsStorage *ValidatorsStorageSession) GetRawSignatureSnapshot(_epoch *big.Int) ([]byte, error) {
	return _ValidatorsStorage.Contract.GetRawSignatureSnapshot(&_ValidatorsStorage.CallOpts, _epoch)
}

// GetRawSignatureSnapshot is a free data retrieval call binding the contract method 0x35b6c632.
//
// Solidity: function getRawSignatureSnapshot(uint256 _epoch) view returns(bytes)
func (_ValidatorsStorage *ValidatorsStorageCallerSession) GetRawSignatureSnapshot(_epoch *big.Int) ([]byte, error) {
	return _ValidatorsStorage.Contract.GetRawSignatureSnapshot(&_ValidatorsStorage.CallOpts, _epoch)
}

// MajorStakeFine is a free data retrieval call binding the contract method 0xad43d845.
//
// Solidity: function majorStakeFine() view returns(uint256)
func (_ValidatorsStorage *ValidatorsStorageCaller) MajorStakeFine(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ValidatorsStorage.contract.Call(opts, out, "majorStakeFine")
	return *ret0, err
}

// MajorStakeFine is a free data retrieval call binding the contract method 0xad43d845.
//
// Solidity: function majorStakeFine() view returns(uint256)
func (_ValidatorsStorage *ValidatorsStorageSession) MajorStakeFine() (*big.Int, error) {
	return _ValidatorsStorage.Contract.MajorStakeFine(&_ValidatorsStorage.CallOpts)
}

// MajorStakeFine is a free data retrieval call binding the contract method 0xad43d845.
//
// Solidity: function majorStakeFine() view returns(uint256)
func (_ValidatorsStorage *ValidatorsStorageCallerSession) MajorStakeFine() (*big.Int, error) {
	return _ValidatorsStorage.Contract.MajorStakeFine(&_ValidatorsStorage.CallOpts)
}

// MinimumStake is a free data retrieval call binding the contract method 0xec5ffac2.
//
// Solidity: function minimumStake() view returns(uint256)
func (_ValidatorsStorage *ValidatorsStorageCaller) MinimumStake(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ValidatorsStorage.contract.Call(opts, out, "minimumStake")
	return *ret0, err
}

// MinimumStake is a free data retrieval call binding the contract method 0xec5ffac2.
//
// Solidity: function minimumStake() view returns(uint256)
func (_ValidatorsStorage *ValidatorsStorageSession) MinimumStake() (*big.Int, error) {
	return _ValidatorsStorage.Contract.MinimumStake(&_ValidatorsStorage.CallOpts)
}

// MinimumStake is a free data retrieval call binding the contract method 0xec5ffac2.
//
// Solidity: function minimumStake() view returns(uint256)
func (_ValidatorsStorage *ValidatorsStorageCallerSession) MinimumStake() (*big.Int, error) {
	return _ValidatorsStorage.Contract.MinimumStake(&_ValidatorsStorage.CallOpts)
}

// MinorStakeFine is a free data retrieval call binding the contract method 0x6d059126.
//
// Solidity: function minorStakeFine() view returns(uint256)
func (_ValidatorsStorage *ValidatorsStorageCaller) MinorStakeFine(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ValidatorsStorage.contract.Call(opts, out, "minorStakeFine")
	return *ret0, err
}

// MinorStakeFine is a free data retrieval call binding the contract method 0x6d059126.
//
// Solidity: function minorStakeFine() view returns(uint256)
func (_ValidatorsStorage *ValidatorsStorageSession) MinorStakeFine() (*big.Int, error) {
	return _ValidatorsStorage.Contract.MinorStakeFine(&_ValidatorsStorage.CallOpts)
}

// MinorStakeFine is a free data retrieval call binding the contract method 0x6d059126.
//
// Solidity: function minorStakeFine() view returns(uint256)
func (_ValidatorsStorage *ValidatorsStorageCallerSession) MinorStakeFine() (*big.Int, error) {
	return _ValidatorsStorage.Contract.MinorStakeFine(&_ValidatorsStorage.CallOpts)
}

// RewardAmount is a free data retrieval call binding the contract method 0xf7b2a7be.
//
// Solidity: function rewardAmount() view returns(uint256)
func (_ValidatorsStorage *ValidatorsStorageCaller) RewardAmount(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ValidatorsStorage.contract.Call(opts, out, "rewardAmount")
	return *ret0, err
}

// RewardAmount is a free data retrieval call binding the contract method 0xf7b2a7be.
//
// Solidity: function rewardAmount() view returns(uint256)
func (_ValidatorsStorage *ValidatorsStorageSession) RewardAmount() (*big.Int, error) {
	return _ValidatorsStorage.Contract.RewardAmount(&_ValidatorsStorage.CallOpts)
}

// RewardAmount is a free data retrieval call binding the contract method 0xf7b2a7be.
//
// Solidity: function rewardAmount() view returns(uint256)
func (_ValidatorsStorage *ValidatorsStorageCallerSession) RewardAmount() (*big.Int, error) {
	return _ValidatorsStorage.Contract.RewardAmount(&_ValidatorsStorage.CallOpts)
}

// RewardBonus is a free data retrieval call binding the contract method 0xfdf553cf.
//
// Solidity: function rewardBonus() view returns(uint256)
func (_ValidatorsStorage *ValidatorsStorageCaller) RewardBonus(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ValidatorsStorage.contract.Call(opts, out, "rewardBonus")
	return *ret0, err
}

// RewardBonus is a free data retrieval call binding the contract method 0xfdf553cf.
//
// Solidity: function rewardBonus() view returns(uint256)
func (_ValidatorsStorage *ValidatorsStorageSession) RewardBonus() (*big.Int, error) {
	return _ValidatorsStorage.Contract.RewardBonus(&_ValidatorsStorage.CallOpts)
}

// RewardBonus is a free data retrieval call binding the contract method 0xfdf553cf.
//
// Solidity: function rewardBonus() view returns(uint256)
func (_ValidatorsStorage *ValidatorsStorageCallerSession) RewardBonus() (*big.Int, error) {
	return _ValidatorsStorage.Contract.RewardBonus(&_ValidatorsStorage.CallOpts)
}

// ValidatorCount is a free data retrieval call binding the contract method 0x0f43a677.
//
// Solidity: function validatorCount() view returns(uint8)
func (_ValidatorsStorage *ValidatorsStorageCaller) ValidatorCount(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _ValidatorsStorage.contract.Call(opts, out, "validatorCount")
	return *ret0, err
}

// ValidatorCount is a free data retrieval call binding the contract method 0x0f43a677.
//
// Solidity: function validatorCount() view returns(uint8)
func (_ValidatorsStorage *ValidatorsStorageSession) ValidatorCount() (uint8, error) {
	return _ValidatorsStorage.Contract.ValidatorCount(&_ValidatorsStorage.CallOpts)
}

// ValidatorCount is a free data retrieval call binding the contract method 0x0f43a677.
//
// Solidity: function validatorCount() view returns(uint8)
func (_ValidatorsStorage *ValidatorsStorageCallerSession) ValidatorCount() (uint8, error) {
	return _ValidatorsStorage.Contract.ValidatorCount(&_ValidatorsStorage.CallOpts)
}

// ValidatorMaxCount is a free data retrieval call binding the contract method 0x09f0d45d.
//
// Solidity: function validatorMaxCount() view returns(uint8)
func (_ValidatorsStorage *ValidatorsStorageCaller) ValidatorMaxCount(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _ValidatorsStorage.contract.Call(opts, out, "validatorMaxCount")
	return *ret0, err
}

// ValidatorMaxCount is a free data retrieval call binding the contract method 0x09f0d45d.
//
// Solidity: function validatorMaxCount() view returns(uint8)
func (_ValidatorsStorage *ValidatorsStorageSession) ValidatorMaxCount() (uint8, error) {
	return _ValidatorsStorage.Contract.ValidatorMaxCount(&_ValidatorsStorage.CallOpts)
}

// ValidatorMaxCount is a free data retrieval call binding the contract method 0x09f0d45d.
//
// Solidity: function validatorMaxCount() view returns(uint8)
func (_ValidatorsStorage *ValidatorsStorageCallerSession) ValidatorMaxCount() (uint8, error) {
	return _ValidatorsStorage.Contract.ValidatorMaxCount(&_ValidatorsStorage.CallOpts)
}

// ValidatorsStorageSnapshotTakenIterator is returned from FilterSnapshotTaken and is used to iterate over the raw logs and unpacked data for SnapshotTaken events raised by the ValidatorsStorage contract.
type ValidatorsStorageSnapshotTakenIterator struct {
	Event *ValidatorsStorageSnapshotTaken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsStorageSnapshotTakenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsStorageSnapshotTaken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsStorageSnapshotTaken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsStorageSnapshotTakenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsStorageSnapshotTakenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsStorageSnapshotTaken represents a SnapshotTaken event raised by the ValidatorsStorage contract.
type ValidatorsStorageSnapshotTaken struct {
	ChainId        uint32
	Epoch          *big.Int
	Height         uint32
	Validator      common.Address
	StartingETHDKG bool
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterSnapshotTaken is a free log retrieval operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_ValidatorsStorage *ValidatorsStorageFilterer) FilterSnapshotTaken(opts *bind.FilterOpts, epoch []*big.Int, validator []common.Address) (*ValidatorsStorageSnapshotTakenIterator, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorsStorage.contract.FilterLogs(opts, "SnapshotTaken", epochRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsStorageSnapshotTakenIterator{contract: _ValidatorsStorage.contract, event: "SnapshotTaken", logs: logs, sub: sub}, nil
}

// WatchSnapshotTaken is a free log subscription operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_ValidatorsStorage *ValidatorsStorageFilterer) WatchSnapshotTaken(opts *bind.WatchOpts, sink chan<- *ValidatorsStorageSnapshotTaken, epoch []*big.Int, validator []common.Address) (event.Subscription, error) {

	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorsStorage.contract.WatchLogs(opts, "SnapshotTaken", epochRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsStorageSnapshotTaken)
				if err := _ValidatorsStorage.contract.UnpackLog(event, "SnapshotTaken", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSnapshotTaken is a log parse operation binding the contract event 0x6d438b6b835d16cdae6efdc0259fdfba17e6aa32dae81863a2467866f85f724a.
//
// Solidity: event SnapshotTaken(uint32 chainId, uint256 indexed epoch, uint32 height, address indexed validator, bool startingETHDKG)
func (_ValidatorsStorage *ValidatorsStorageFilterer) ParseSnapshotTaken(log types.Log) (*ValidatorsStorageSnapshotTaken, error) {
	event := new(ValidatorsStorageSnapshotTaken)
	if err := _ValidatorsStorage.contract.UnpackLog(event, "SnapshotTaken", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorsStorageValidatorCreatedIterator is returned from FilterValidatorCreated and is used to iterate over the raw logs and unpacked data for ValidatorCreated events raised by the ValidatorsStorage contract.
type ValidatorsStorageValidatorCreatedIterator struct {
	Event *ValidatorsStorageValidatorCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsStorageValidatorCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsStorageValidatorCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsStorageValidatorCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsStorageValidatorCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsStorageValidatorCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsStorageValidatorCreated represents a ValidatorCreated event raised by the ValidatorsStorage contract.
type ValidatorsStorageValidatorCreated struct {
	Validator common.Address
	Signer    common.Address
	MadID     [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorCreated is a free log retrieval operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_ValidatorsStorage *ValidatorsStorageFilterer) FilterValidatorCreated(opts *bind.FilterOpts, validator []common.Address, signer []common.Address) (*ValidatorsStorageValidatorCreatedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var signerRule []interface{}
	for _, signerItem := range signer {
		signerRule = append(signerRule, signerItem)
	}

	logs, sub, err := _ValidatorsStorage.contract.FilterLogs(opts, "ValidatorCreated", validatorRule, signerRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsStorageValidatorCreatedIterator{contract: _ValidatorsStorage.contract, event: "ValidatorCreated", logs: logs, sub: sub}, nil
}

// WatchValidatorCreated is a free log subscription operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_ValidatorsStorage *ValidatorsStorageFilterer) WatchValidatorCreated(opts *bind.WatchOpts, sink chan<- *ValidatorsStorageValidatorCreated, validator []common.Address, signer []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}
	var signerRule []interface{}
	for _, signerItem := range signer {
		signerRule = append(signerRule, signerItem)
	}

	logs, sub, err := _ValidatorsStorage.contract.WatchLogs(opts, "ValidatorCreated", validatorRule, signerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsStorageValidatorCreated)
				if err := _ValidatorsStorage.contract.UnpackLog(event, "ValidatorCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorCreated is a log parse operation binding the contract event 0xef5e89a9416c26e0a0a37c1f630958c8c88d9efad59f553f94cff0bed0a268d3.
//
// Solidity: event ValidatorCreated(address indexed validator, address indexed signer, uint256[2] madID)
func (_ValidatorsStorage *ValidatorsStorageFilterer) ParseValidatorCreated(log types.Log) (*ValidatorsStorageValidatorCreated, error) {
	event := new(ValidatorsStorageValidatorCreated)
	if err := _ValidatorsStorage.contract.UnpackLog(event, "ValidatorCreated", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorsStorageValidatorJoinedIterator is returned from FilterValidatorJoined and is used to iterate over the raw logs and unpacked data for ValidatorJoined events raised by the ValidatorsStorage contract.
type ValidatorsStorageValidatorJoinedIterator struct {
	Event *ValidatorsStorageValidatorJoined // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsStorageValidatorJoinedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsStorageValidatorJoined)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsStorageValidatorJoined)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsStorageValidatorJoinedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsStorageValidatorJoinedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsStorageValidatorJoined represents a ValidatorJoined event raised by the ValidatorsStorage contract.
type ValidatorsStorageValidatorJoined struct {
	Validator common.Address
	MadID     [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorJoined is a free log retrieval operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_ValidatorsStorage *ValidatorsStorageFilterer) FilterValidatorJoined(opts *bind.FilterOpts, validator []common.Address) (*ValidatorsStorageValidatorJoinedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorsStorage.contract.FilterLogs(opts, "ValidatorJoined", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsStorageValidatorJoinedIterator{contract: _ValidatorsStorage.contract, event: "ValidatorJoined", logs: logs, sub: sub}, nil
}

// WatchValidatorJoined is a free log subscription operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_ValidatorsStorage *ValidatorsStorageFilterer) WatchValidatorJoined(opts *bind.WatchOpts, sink chan<- *ValidatorsStorageValidatorJoined, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorsStorage.contract.WatchLogs(opts, "ValidatorJoined", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsStorageValidatorJoined)
				if err := _ValidatorsStorage.contract.UnpackLog(event, "ValidatorJoined", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorJoined is a log parse operation binding the contract event 0x8c25e214c5693ebaf8008875bacedeb9e0aafd393864a314ed1801b2a4e13dd9.
//
// Solidity: event ValidatorJoined(address indexed validator, uint256[2] madID)
func (_ValidatorsStorage *ValidatorsStorageFilterer) ParseValidatorJoined(log types.Log) (*ValidatorsStorageValidatorJoined, error) {
	event := new(ValidatorsStorageValidatorJoined)
	if err := _ValidatorsStorage.contract.UnpackLog(event, "ValidatorJoined", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorsStorageValidatorLeftIterator is returned from FilterValidatorLeft and is used to iterate over the raw logs and unpacked data for ValidatorLeft events raised by the ValidatorsStorage contract.
type ValidatorsStorageValidatorLeftIterator struct {
	Event *ValidatorsStorageValidatorLeft // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsStorageValidatorLeftIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsStorageValidatorLeft)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsStorageValidatorLeft)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsStorageValidatorLeftIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsStorageValidatorLeftIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsStorageValidatorLeft represents a ValidatorLeft event raised by the ValidatorsStorage contract.
type ValidatorsStorageValidatorLeft struct {
	Validator common.Address
	PkHash    [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorLeft is a free log retrieval operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_ValidatorsStorage *ValidatorsStorageFilterer) FilterValidatorLeft(opts *bind.FilterOpts, validator []common.Address) (*ValidatorsStorageValidatorLeftIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorsStorage.contract.FilterLogs(opts, "ValidatorLeft", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsStorageValidatorLeftIterator{contract: _ValidatorsStorage.contract, event: "ValidatorLeft", logs: logs, sub: sub}, nil
}

// WatchValidatorLeft is a free log subscription operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_ValidatorsStorage *ValidatorsStorageFilterer) WatchValidatorLeft(opts *bind.WatchOpts, sink chan<- *ValidatorsStorageValidatorLeft, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorsStorage.contract.WatchLogs(opts, "ValidatorLeft", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsStorageValidatorLeft)
				if err := _ValidatorsStorage.contract.UnpackLog(event, "ValidatorLeft", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorLeft is a log parse operation binding the contract event 0x319bbadb03b94aedc69babb34a28675536a9cb30f4bbde343e1d0018c44ebd94.
//
// Solidity: event ValidatorLeft(address indexed validator, uint256[2] pkHash)
func (_ValidatorsStorage *ValidatorsStorageFilterer) ParseValidatorLeft(log types.Log) (*ValidatorsStorageValidatorLeft, error) {
	event := new(ValidatorsStorageValidatorLeft)
	if err := _ValidatorsStorage.contract.UnpackLog(event, "ValidatorLeft", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorsStorageValidatorQueuedIterator is returned from FilterValidatorQueued and is used to iterate over the raw logs and unpacked data for ValidatorQueued events raised by the ValidatorsStorage contract.
type ValidatorsStorageValidatorQueuedIterator struct {
	Event *ValidatorsStorageValidatorQueued // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorsStorageValidatorQueuedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorsStorageValidatorQueued)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorsStorageValidatorQueued)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorsStorageValidatorQueuedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorsStorageValidatorQueuedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorsStorageValidatorQueued represents a ValidatorQueued event raised by the ValidatorsStorage contract.
type ValidatorsStorageValidatorQueued struct {
	Validator common.Address
	PkHash    [2]*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorQueued is a free log retrieval operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_ValidatorsStorage *ValidatorsStorageFilterer) FilterValidatorQueued(opts *bind.FilterOpts, validator []common.Address) (*ValidatorsStorageValidatorQueuedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorsStorage.contract.FilterLogs(opts, "ValidatorQueued", validatorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorsStorageValidatorQueuedIterator{contract: _ValidatorsStorage.contract, event: "ValidatorQueued", logs: logs, sub: sub}, nil
}

// WatchValidatorQueued is a free log subscription operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_ValidatorsStorage *ValidatorsStorageFilterer) WatchValidatorQueued(opts *bind.WatchOpts, sink chan<- *ValidatorsStorageValidatorQueued, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _ValidatorsStorage.contract.WatchLogs(opts, "ValidatorQueued", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorsStorageValidatorQueued)
				if err := _ValidatorsStorage.contract.UnpackLog(event, "ValidatorQueued", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorQueued is a log parse operation binding the contract event 0xb4389eb1c66b46169245bc8c147e4b13a2b88adcaa44d001b0fadf25890b773d.
//
// Solidity: event ValidatorQueued(address indexed validator, uint256[2] pkHash)
func (_ValidatorsStorage *ValidatorsStorageFilterer) ParseValidatorQueued(log types.Log) (*ValidatorsStorageValidatorQueued, error) {
	event := new(ValidatorsStorageValidatorQueued)
	if err := _ValidatorsStorage.contract.UnpackLog(event, "ValidatorQueued", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ValidatorsStorageLibraryABI is the input ABI used to generate the binding from.
const ValidatorsStorageLibraryABI = "[]"

// ValidatorsStorageLibraryBin is the compiled bytecode used for deploying new contracts.
var ValidatorsStorageLibraryBin = "0x60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122063e22b704fd4b2a067d102e7078e53e747a35e78983e41bb8d3190cf21a6a86464736f6c63430007060033"

// DeployValidatorsStorageLibrary deploys a new Ethereum contract, binding an instance of ValidatorsStorageLibrary to it.
func DeployValidatorsStorageLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ValidatorsStorageLibrary, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorsStorageLibraryABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ValidatorsStorageLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ValidatorsStorageLibrary{ValidatorsStorageLibraryCaller: ValidatorsStorageLibraryCaller{contract: contract}, ValidatorsStorageLibraryTransactor: ValidatorsStorageLibraryTransactor{contract: contract}, ValidatorsStorageLibraryFilterer: ValidatorsStorageLibraryFilterer{contract: contract}}, nil
}

// ValidatorsStorageLibrary is an auto generated Go binding around an Ethereum contract.
type ValidatorsStorageLibrary struct {
	ValidatorsStorageLibraryCaller     // Read-only binding to the contract
	ValidatorsStorageLibraryTransactor // Write-only binding to the contract
	ValidatorsStorageLibraryFilterer   // Log filterer for contract events
}

// ValidatorsStorageLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorsStorageLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorsStorageLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorsStorageLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorsStorageLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorsStorageLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorsStorageLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorsStorageLibrarySession struct {
	Contract     *ValidatorsStorageLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts             // Call options to use throughout this session
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// ValidatorsStorageLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorsStorageLibraryCallerSession struct {
	Contract *ValidatorsStorageLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                   // Call options to use throughout this session
}

// ValidatorsStorageLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorsStorageLibraryTransactorSession struct {
	Contract     *ValidatorsStorageLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                   // Transaction auth options to use throughout this session
}

// ValidatorsStorageLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorsStorageLibraryRaw struct {
	Contract *ValidatorsStorageLibrary // Generic contract binding to access the raw methods on
}

// ValidatorsStorageLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorsStorageLibraryCallerRaw struct {
	Contract *ValidatorsStorageLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorsStorageLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorsStorageLibraryTransactorRaw struct {
	Contract *ValidatorsStorageLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorsStorageLibrary creates a new instance of ValidatorsStorageLibrary, bound to a specific deployed contract.
func NewValidatorsStorageLibrary(address common.Address, backend bind.ContractBackend) (*ValidatorsStorageLibrary, error) {
	contract, err := bindValidatorsStorageLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorsStorageLibrary{ValidatorsStorageLibraryCaller: ValidatorsStorageLibraryCaller{contract: contract}, ValidatorsStorageLibraryTransactor: ValidatorsStorageLibraryTransactor{contract: contract}, ValidatorsStorageLibraryFilterer: ValidatorsStorageLibraryFilterer{contract: contract}}, nil
}

// NewValidatorsStorageLibraryCaller creates a new read-only instance of ValidatorsStorageLibrary, bound to a specific deployed contract.
func NewValidatorsStorageLibraryCaller(address common.Address, caller bind.ContractCaller) (*ValidatorsStorageLibraryCaller, error) {
	contract, err := bindValidatorsStorageLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorsStorageLibraryCaller{contract: contract}, nil
}

// NewValidatorsStorageLibraryTransactor creates a new write-only instance of ValidatorsStorageLibrary, bound to a specific deployed contract.
func NewValidatorsStorageLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorsStorageLibraryTransactor, error) {
	contract, err := bindValidatorsStorageLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorsStorageLibraryTransactor{contract: contract}, nil
}

// NewValidatorsStorageLibraryFilterer creates a new log filterer instance of ValidatorsStorageLibrary, bound to a specific deployed contract.
func NewValidatorsStorageLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorsStorageLibraryFilterer, error) {
	contract, err := bindValidatorsStorageLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorsStorageLibraryFilterer{contract: contract}, nil
}

// bindValidatorsStorageLibrary binds a generic wrapper to an already deployed contract.
func bindValidatorsStorageLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorsStorageLibraryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorsStorageLibrary *ValidatorsStorageLibraryRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ValidatorsStorageLibrary.Contract.ValidatorsStorageLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorsStorageLibrary *ValidatorsStorageLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorsStorageLibrary.Contract.ValidatorsStorageLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorsStorageLibrary *ValidatorsStorageLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorsStorageLibrary.Contract.ValidatorsStorageLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorsStorageLibrary *ValidatorsStorageLibraryCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ValidatorsStorageLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorsStorageLibrary *ValidatorsStorageLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorsStorageLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorsStorageLibrary *ValidatorsStorageLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorsStorageLibrary.Contract.contract.Transact(opts, method, params...)
}

// ValidatorsUpdateFacetABI is the input ABI used to generate the binding from.
const ValidatorsUpdateFacetABI = "[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"facet\",\"type\":\"address\"}],\"name\":\"addFacet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"removeFacet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"facet\",\"type\":\"address\"}],\"name\":\"replaceFacet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// ValidatorsUpdateFacetBin is the compiled bytecode used for deploying new contracts.
var ValidatorsUpdateFacetBin = "0x608060405234801561001057600080fd5b5061075d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063208865cc14610046578063ca5a0fae14610062578063de380fbf1461007e575b600080fd5b610060600480360381019061005b919061058e565b61009a565b005b61007c60048036038101906100779190610565565b61021f565b005b6100986004803603810190610093919061058e565b610388565b005b60006100a461050e565b9050600073ffffffffffffffffffffffffffffffffffffffff16816000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610188576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017f9061064a565b60405180910390fd5b81816000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b600061022961050e565b9050600073ffffffffffffffffffffffffffffffffffffffff16816000016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561030e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103059061066a565b60405180910390fd5b806000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555050565b600061039261050e565b9050600073ffffffffffffffffffffffffffffffffffffffff16816000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610477576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046e9061066a565b60405180910390fd5b81816000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6000807fac6aff0df35b6b6d45d1a9336e974b1bccef775f3de2917da887734bb298b7a990508091505090565b60008135905061054a816106f9565b92915050565b60008135905061055f81610710565b92915050565b60006020828403121561057757600080fd5b600061058584828501610550565b91505092915050565b600080604083850312156105a157600080fd5b60006105af85828601610550565b92505060206105c08582860161053b565b9150509250929050565b60006105d760178361068a565b91507f73656c6563746f7220616c7265616479206578697374730000000000000000006000830152602082019050919050565b600061061760178361068a565b91507f73656c6563746f7220646f6573206e6f742065786973740000000000000000006000830152602082019050919050565b60006020820190508181036000830152610663816105ca565b9050919050565b600060208201905081810360008301526106838161060a565b9050919050565b600082825260208201905092915050565b60006106a6826106d9565b9050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6107028161069b565b811461070d57600080fd5b50565b610719816106ad565b811461072457600080fd5b5056fea264697066735822122069d60cc97ceeb51430eec9b2c60e0f74b88b6a4b60a7c2748c0be23edc1e83a464736f6c63430007060033"

// DeployValidatorsUpdateFacet deploys a new Ethereum contract, binding an instance of ValidatorsUpdateFacet to it.
func DeployValidatorsUpdateFacet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ValidatorsUpdateFacet, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorsUpdateFacetABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ValidatorsUpdateFacetBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ValidatorsUpdateFacet{ValidatorsUpdateFacetCaller: ValidatorsUpdateFacetCaller{contract: contract}, ValidatorsUpdateFacetTransactor: ValidatorsUpdateFacetTransactor{contract: contract}, ValidatorsUpdateFacetFilterer: ValidatorsUpdateFacetFilterer{contract: contract}}, nil
}

// ValidatorsUpdateFacet is an auto generated Go binding around an Ethereum contract.
type ValidatorsUpdateFacet struct {
	ValidatorsUpdateFacetCaller     // Read-only binding to the contract
	ValidatorsUpdateFacetTransactor // Write-only binding to the contract
	ValidatorsUpdateFacetFilterer   // Log filterer for contract events
}

// ValidatorsUpdateFacetCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorsUpdateFacetCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorsUpdateFacetTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorsUpdateFacetTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorsUpdateFacetFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorsUpdateFacetFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorsUpdateFacetSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorsUpdateFacetSession struct {
	Contract     *ValidatorsUpdateFacet // Generic contract binding to set the session for
	CallOpts     bind.CallOpts          // Call options to use throughout this session
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// ValidatorsUpdateFacetCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorsUpdateFacetCallerSession struct {
	Contract *ValidatorsUpdateFacetCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                // Call options to use throughout this session
}

// ValidatorsUpdateFacetTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorsUpdateFacetTransactorSession struct {
	Contract     *ValidatorsUpdateFacetTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                // Transaction auth options to use throughout this session
}

// ValidatorsUpdateFacetRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorsUpdateFacetRaw struct {
	Contract *ValidatorsUpdateFacet // Generic contract binding to access the raw methods on
}

// ValidatorsUpdateFacetCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorsUpdateFacetCallerRaw struct {
	Contract *ValidatorsUpdateFacetCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorsUpdateFacetTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorsUpdateFacetTransactorRaw struct {
	Contract *ValidatorsUpdateFacetTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorsUpdateFacet creates a new instance of ValidatorsUpdateFacet, bound to a specific deployed contract.
func NewValidatorsUpdateFacet(address common.Address, backend bind.ContractBackend) (*ValidatorsUpdateFacet, error) {
	contract, err := bindValidatorsUpdateFacet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorsUpdateFacet{ValidatorsUpdateFacetCaller: ValidatorsUpdateFacetCaller{contract: contract}, ValidatorsUpdateFacetTransactor: ValidatorsUpdateFacetTransactor{contract: contract}, ValidatorsUpdateFacetFilterer: ValidatorsUpdateFacetFilterer{contract: contract}}, nil
}

// NewValidatorsUpdateFacetCaller creates a new read-only instance of ValidatorsUpdateFacet, bound to a specific deployed contract.
func NewValidatorsUpdateFacetCaller(address common.Address, caller bind.ContractCaller) (*ValidatorsUpdateFacetCaller, error) {
	contract, err := bindValidatorsUpdateFacet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorsUpdateFacetCaller{contract: contract}, nil
}

// NewValidatorsUpdateFacetTransactor creates a new write-only instance of ValidatorsUpdateFacet, bound to a specific deployed contract.
func NewValidatorsUpdateFacetTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorsUpdateFacetTransactor, error) {
	contract, err := bindValidatorsUpdateFacet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorsUpdateFacetTransactor{contract: contract}, nil
}

// NewValidatorsUpdateFacetFilterer creates a new log filterer instance of ValidatorsUpdateFacet, bound to a specific deployed contract.
func NewValidatorsUpdateFacetFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorsUpdateFacetFilterer, error) {
	contract, err := bindValidatorsUpdateFacet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorsUpdateFacetFilterer{contract: contract}, nil
}

// bindValidatorsUpdateFacet binds a generic wrapper to an already deployed contract.
func bindValidatorsUpdateFacet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorsUpdateFacetABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorsUpdateFacet *ValidatorsUpdateFacetRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ValidatorsUpdateFacet.Contract.ValidatorsUpdateFacetCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorsUpdateFacet *ValidatorsUpdateFacetRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorsUpdateFacet.Contract.ValidatorsUpdateFacetTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorsUpdateFacet *ValidatorsUpdateFacetRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorsUpdateFacet.Contract.ValidatorsUpdateFacetTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorsUpdateFacet *ValidatorsUpdateFacetCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ValidatorsUpdateFacet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorsUpdateFacet *ValidatorsUpdateFacetTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorsUpdateFacet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorsUpdateFacet *ValidatorsUpdateFacetTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorsUpdateFacet.Contract.contract.Transact(opts, method, params...)
}

// AddFacet is a paid mutator transaction binding the contract method 0x208865cc.
//
// Solidity: function addFacet(bytes4 selector, address facet) returns()
func (_ValidatorsUpdateFacet *ValidatorsUpdateFacetTransactor) AddFacet(opts *bind.TransactOpts, selector [4]byte, facet common.Address) (*types.Transaction, error) {
	return _ValidatorsUpdateFacet.contract.Transact(opts, "addFacet", selector, facet)
}

// AddFacet is a paid mutator transaction binding the contract method 0x208865cc.
//
// Solidity: function addFacet(bytes4 selector, address facet) returns()
func (_ValidatorsUpdateFacet *ValidatorsUpdateFacetSession) AddFacet(selector [4]byte, facet common.Address) (*types.Transaction, error) {
	return _ValidatorsUpdateFacet.Contract.AddFacet(&_ValidatorsUpdateFacet.TransactOpts, selector, facet)
}

// AddFacet is a paid mutator transaction binding the contract method 0x208865cc.
//
// Solidity: function addFacet(bytes4 selector, address facet) returns()
func (_ValidatorsUpdateFacet *ValidatorsUpdateFacetTransactorSession) AddFacet(selector [4]byte, facet common.Address) (*types.Transaction, error) {
	return _ValidatorsUpdateFacet.Contract.AddFacet(&_ValidatorsUpdateFacet.TransactOpts, selector, facet)
}

// RemoveFacet is a paid mutator transaction binding the contract method 0xca5a0fae.
//
// Solidity: function removeFacet(bytes4 selector) returns()
func (_ValidatorsUpdateFacet *ValidatorsUpdateFacetTransactor) RemoveFacet(opts *bind.TransactOpts, selector [4]byte) (*types.Transaction, error) {
	return _ValidatorsUpdateFacet.contract.Transact(opts, "removeFacet", selector)
}

// RemoveFacet is a paid mutator transaction binding the contract method 0xca5a0fae.
//
// Solidity: function removeFacet(bytes4 selector) returns()
func (_ValidatorsUpdateFacet *ValidatorsUpdateFacetSession) RemoveFacet(selector [4]byte) (*types.Transaction, error) {
	return _ValidatorsUpdateFacet.Contract.RemoveFacet(&_ValidatorsUpdateFacet.TransactOpts, selector)
}

// RemoveFacet is a paid mutator transaction binding the contract method 0xca5a0fae.
//
// Solidity: function removeFacet(bytes4 selector) returns()
func (_ValidatorsUpdateFacet *ValidatorsUpdateFacetTransactorSession) RemoveFacet(selector [4]byte) (*types.Transaction, error) {
	return _ValidatorsUpdateFacet.Contract.RemoveFacet(&_ValidatorsUpdateFacet.TransactOpts, selector)
}

// ReplaceFacet is a paid mutator transaction binding the contract method 0xde380fbf.
//
// Solidity: function replaceFacet(bytes4 selector, address facet) returns()
func (_ValidatorsUpdateFacet *ValidatorsUpdateFacetTransactor) ReplaceFacet(opts *bind.TransactOpts, selector [4]byte, facet common.Address) (*types.Transaction, error) {
	return _ValidatorsUpdateFacet.contract.Transact(opts, "replaceFacet", selector, facet)
}

// ReplaceFacet is a paid mutator transaction binding the contract method 0xde380fbf.
//
// Solidity: function replaceFacet(bytes4 selector, address facet) returns()
func (_ValidatorsUpdateFacet *ValidatorsUpdateFacetSession) ReplaceFacet(selector [4]byte, facet common.Address) (*types.Transaction, error) {
	return _ValidatorsUpdateFacet.Contract.ReplaceFacet(&_ValidatorsUpdateFacet.TransactOpts, selector, facet)
}

// ReplaceFacet is a paid mutator transaction binding the contract method 0xde380fbf.
//
// Solidity: function replaceFacet(bytes4 selector, address facet) returns()
func (_ValidatorsUpdateFacet *ValidatorsUpdateFacetTransactorSession) ReplaceFacet(selector [4]byte, facet common.Address) (*types.Transaction, error) {
	return _ValidatorsUpdateFacet.Contract.ReplaceFacet(&_ValidatorsUpdateFacet.TransactOpts, selector, facet)
}
